/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1alpha1/events": {
    /** @description Ingest events */
    post: operations["ingestEvents"];
  };
  "/api/v1alpha1/meters": {
    /** @description Get meters */
    get: operations["getMeters"];
  };
  "/api/v1alpha1/meters/{meterId}": {
    /** @description Get meter by ID */
    get: operations["getMetersById"];
  };
  "/api/v1alpha1/meters/{meterId}/values": {
    /** @description Get meter values */
    get: operations["getValuesByMeterId"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Error: {
      /** Format: int32 */
      statusCode?: number;
      status?: string;
      /** Format: int32 */
      code?: number;
      message?: string;
    };
    /** @description CloudEvents Specification JSON Schema */
    Event: {
      /**
       * @description Identifies the event. 
       * @example A234-1234-1234
       */
      id: string;
      /**
       * Format: uri-reference 
       * @description Identifies the context in which an event happened. 
       * @example https://github.com/cloudevents
       */
      source: string;
      /**
       * @description The version of the CloudEvents specification which the event uses. 
       * @example 1.0
       */
      specversion: string;
      /**
       * @description Describes the type of event related to the originating occurrence. 
       * @example api_request
       */
      type: string;
      /**
       * @description Content type of the data value. Must adhere to RFC 2046 format. 
       * @example application/json 
       * @enum {string|null}
       */
      datacontenttype?: "application/json" | null;
      /**
       * Format: uri 
       * @description Identifies the schema that data adheres to.
       */
      dataschema?: string | null;
      /**
       * @description Describes the subject of the event in the context of the event producer (identified by source). 
       * @example customer_id
       */
      subject: string | null;
      /**
       * Format: date-time 
       * @description Timestamp of when the occurrence happened. Must adhere to RFC 3339. 
       * @example 2018-04-05T17:31:00Z
       */
      time?: string | null;
      /**
       * @description The event payload. 
       * @example {"duration_ms": "123"}
       */
      data?: {
        [key: string]: unknown;
      };
    };
    Meter: {
      /** @example my_meter */
      id?: string;
      /** @example My Meter */
      name?: string;
      /** @example My Meter Description */
      description?: string;
      /**
       * @example {
       *   "my_label": "my_value"
       * }
       */
      labels?: {
        [key: string]: string | undefined;
      };
      /** @example event_type */
      type?: string;
      /**
       * @example SUM 
       * @enum {string}
       */
      aggregation?: "SUM" | "COUNT" | "MAX" | "COUNT_DISTINCT" | "LATEST_BY_OFFSET";
      /**
       * @description JSONPath expression to extract the value from the event data. 
       * @example $.duration_ms
       */
      valueProperty?: string;
      /**
       * @description JSONPath expressions to extract the group by values from the event data. 
       * @example [
       *   "$.my_label"
       * ]
       */
      groupBy?: (string)[];
      windowSize?: components["schemas"]["WindowSize"];
    };
    /** @enum {string} */
    WindowSize: "MINUTE" | "HOUR" | "DAY";
    MeterValue: {
      subject?: string;
      /** Format: date-time */
      windowStart?: string;
      /** Format: date-time */
      windowEnd?: string;
      value?: number;
      groupBy?: {
        [key: string]: string | undefined;
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** @description Ingest events */
  ingestEvents: {
    requestBody: {
      content: {
        "application/cloudevents+json": components["schemas"]["Event"];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** @description Get meters */
  getMeters: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["Meter"])[];
        };
      };
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** @description Get meter by ID */
  getMetersById: {
    parameters: {
      path: {
        meterId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Meter"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** @description Get meter values */
  getValuesByMeterId: {
    parameters: {
      query?: {
        subject?: string;
        /**
         * @description Start date-time in RFC 3339 format.
         * Must be aligned with the window size.
         * Inclusive.
         */
        from?: string;
        /**
         * @description End date-time in RFC 3339 format.
         * Must be aligned with the window size.
         * Inclusive.
         */
        to?: string;
        /** @description If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group. */
        windowSize?: components["schemas"]["WindowSize"];
      };
      path: {
        meterId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            windowSize?: components["schemas"]["WindowSize"];
            data: (components["schemas"]["MeterValue"])[];
          };
        };
      };
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}
