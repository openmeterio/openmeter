// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const createUsageResetWithInterval = `-- name: CreateUsageResetWithInterval :exec
INSERT INTO usage_resets (
    namespace,
    id,
    created_at,
    updated_at,
    entitlement_id,
    reset_time,
    anchor,
    usage_period_interval
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
`

type CreateUsageResetWithIntervalParams struct {
	Namespace           string
	ID                  string
	CreatedAt           time.Time
	UpdatedAt           time.Time
	EntitlementID       string
	ResetTime           time.Time
	Anchor              time.Time
	UsagePeriodInterval string
}

// Insert usage reset with the new column (should fail with NULL)
func (q *Queries) CreateUsageResetWithInterval(ctx context.Context, arg CreateUsageResetWithIntervalParams) error {
	_, err := q.db.ExecContext(ctx, createUsageResetWithInterval,
		arg.Namespace,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.EntitlementID,
		arg.ResetTime,
		arg.Anchor,
		arg.UsagePeriodInterval,
	)
	return err
}

const getSchemaVersion = `-- name: GetSchemaVersion :one
SELECT version FROM schema_om ORDER BY version DESC LIMIT 1
`

// Placeholder query for SQLC validation
func (q *Queries) GetSchemaVersion(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSchemaVersion)
	var version int64
	err := row.Scan(&version)
	return version, err
}

const getUsageResetByID = `-- name: GetUsageResetByID :one

SELECT id, namespace, created_at, updated_at, deleted_at, reset_time, entitlement_id, anchor, usage_period_interval FROM usage_resets WHERE id = $1
`

// Post-migration queries with usage_period_interval column
// Query to verify usage reset data (including the new column)
func (q *Queries) GetUsageResetByID(ctx context.Context, id string) (UsageReset, error) {
	row := q.db.QueryRowContext(ctx, getUsageResetByID, id)
	var i UsageReset
	err := row.Scan(
		&i.ID,
		&i.Namespace,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ResetTime,
		&i.EntitlementID,
		&i.Anchor,
		&i.UsagePeriodInterval,
	)
	return i, err
}

const getUsageResetInterval = `-- name: GetUsageResetInterval :one
SELECT usage_period_interval FROM usage_resets WHERE id = $1
`

// Query to get usage_period_interval specifically
func (q *Queries) GetUsageResetInterval(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUsageResetInterval, id)
	var usage_period_interval string
	err := row.Scan(&usage_period_interval)
	return usage_period_interval, err
}
