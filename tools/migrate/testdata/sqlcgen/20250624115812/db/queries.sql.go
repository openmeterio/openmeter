// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createEntitlement = `-- name: CreateEntitlement :exec
INSERT INTO entitlements (
    namespace,
    id,
    created_at,
    updated_at,
    entitlement_type,
    feature_key,
    feature_id,
    subject_key,
    usage_period_interval,
    usage_period_anchor
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
`

type CreateEntitlementParams struct {
	Namespace           string
	ID                  string
	CreatedAt           time.Time
	UpdatedAt           time.Time
	EntitlementType     string
	FeatureKey          string
	FeatureID           string
	SubjectKey          string
	UsagePeriodInterval sql.NullString
	UsagePeriodAnchor   sql.NullTime
}

func (q *Queries) CreateEntitlement(ctx context.Context, arg CreateEntitlementParams) error {
	_, err := q.db.ExecContext(ctx, createEntitlement,
		arg.Namespace,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.EntitlementType,
		arg.FeatureKey,
		arg.FeatureID,
		arg.SubjectKey,
		arg.UsagePeriodInterval,
		arg.UsagePeriodAnchor,
	)
	return err
}

const createFeature = `-- name: CreateFeature :exec
INSERT INTO features (
    namespace,
    id,
    key,
    name,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type CreateFeatureParams struct {
	Namespace string
	ID        string
	Key       string
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

// Insert queries for test setup
func (q *Queries) CreateFeature(ctx context.Context, arg CreateFeatureParams) error {
	_, err := q.db.ExecContext(ctx, createFeature,
		arg.Namespace,
		arg.ID,
		arg.Key,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createUsageReset = `-- name: CreateUsageReset :exec
INSERT INTO usage_resets (
    namespace,
    id,
    created_at,
    updated_at,
    entitlement_id,
    reset_time,
    anchor
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
`

type CreateUsageResetParams struct {
	Namespace     string
	ID            string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	EntitlementID string
	ResetTime     time.Time
	Anchor        time.Time
}

func (q *Queries) CreateUsageReset(ctx context.Context, arg CreateUsageResetParams) error {
	_, err := q.db.ExecContext(ctx, createUsageReset,
		arg.Namespace,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.EntitlementID,
		arg.ResetTime,
		arg.Anchor,
	)
	return err
}

const getEntitlementByID = `-- name: GetEntitlementByID :one
SELECT id, namespace, metadata, created_at, updated_at, deleted_at, entitlement_type, feature_key, subject_key, measure_usage_from, issue_after_reset, issue_after_reset_priority, is_soft_limit, preserve_overage_at_reset, config, usage_period_interval, usage_period_anchor, current_usage_period_start, current_usage_period_end, feature_id, active_from, active_to, annotations FROM entitlements WHERE id = $1
`

// Query to get entitlement info
func (q *Queries) GetEntitlementByID(ctx context.Context, id string) (Entitlement, error) {
	row := q.db.QueryRowContext(ctx, getEntitlementByID, id)
	var i Entitlement
	err := row.Scan(
		&i.ID,
		&i.Namespace,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.EntitlementType,
		&i.FeatureKey,
		&i.SubjectKey,
		&i.MeasureUsageFrom,
		&i.IssueAfterReset,
		&i.IssueAfterResetPriority,
		&i.IsSoftLimit,
		&i.PreserveOverageAtReset,
		&i.Config,
		&i.UsagePeriodInterval,
		&i.UsagePeriodAnchor,
		&i.CurrentUsagePeriodStart,
		&i.CurrentUsagePeriodEnd,
		&i.FeatureID,
		&i.ActiveFrom,
		&i.ActiveTo,
		&i.Annotations,
	)
	return i, err
}

const getSchemaVersion = `-- name: GetSchemaVersion :one
SELECT version FROM schema_om ORDER BY version DESC LIMIT 1
`

// Placeholder query for SQLC validation
func (q *Queries) GetSchemaVersion(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSchemaVersion)
	var version int64
	err := row.Scan(&version)
	return version, err
}

const getUsageResetByID = `-- name: GetUsageResetByID :one
SELECT id, namespace, created_at, updated_at, deleted_at, reset_time, entitlement_id, anchor FROM usage_resets WHERE id = $1
`

// Query to verify usage reset data
func (q *Queries) GetUsageResetByID(ctx context.Context, id string) (UsageReset, error) {
	row := q.db.QueryRowContext(ctx, getUsageResetByID, id)
	var i UsageReset
	err := row.Scan(
		&i.ID,
		&i.Namespace,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ResetTime,
		&i.EntitlementID,
		&i.Anchor,
	)
	return i, err
}
