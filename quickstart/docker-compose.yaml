version: '3.9'

services:
  openmeter:
    image: ghcr.io/openmeterio/openmeter
    command: openmeter --config /etc/openmeter/config.yaml
    hostname: openmeter
    container_name: openmeter
    restart: always
    pull_policy: always
    depends_on:
      ksqldb-server-healthcheck:
        condition: service_healthy
    ports:
      - "8888:8888"
    volumes:
      - ./config.yaml:/etc/openmeter/config.yaml

  ksqldb-server-healthcheck:
    image: alpine/curl:3.14
    entrypoint: /bin/sh
    tty: true
    depends_on:
      - ksqldb-server
    healthcheck:
      test: curl --fail http://ksqldb-server:8088/healthcheck
      interval: 5s
      timeout: 5s
      retries: 100

  zookeeper:
    extends:
      file: ../docker-compose.yaml
      service: zookeeper

  broker:
    depends_on:
      - zookeeper
    extends:
      file: ../docker-compose.yaml
      service: broker
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://broker:29092

  schema:
    depends_on:
      - broker
    extends:
      file: ../docker-compose.yaml
      service: schema

  # We duplicate ksqldb-server config here instead of reusing ../docker-compose.yaml to avoid passing
  # --profile ksqldb to quickstart docker compose up
  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.4.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://ksqldb-server:8088
      KSQL_BOOTSTRAP_SERVERS: broker:9092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_STREAMS_PROCESSING_GUARANTEE: exactly_once_v2
      KSQL_KSQL_STREAMS_CONSUMER_ISOLATION_LEVEL: read_committed
