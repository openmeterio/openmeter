// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package apiconverter

import (
	api "github.com/openmeterio/openmeter/api"
	filter "github.com/openmeterio/openmeter/pkg/filter"
)

func init() {
	ConvertBoolean = func(source api.FilterBoolean) filter.FilterBoolean {
		var filterFilterBoolean filter.FilterBoolean
		filterFilterBoolean.Eq = source.Eq
		return filterFilterBoolean
	}
	ConvertBooleanPtr = func(source *api.FilterBoolean) *filter.FilterBoolean {
		var pFilterFilterBoolean *filter.FilterBoolean
		if source != nil {
			filterFilterBoolean := ConvertBoolean((*source))
			pFilterFilterBoolean = &filterFilterBoolean
		}
		return pFilterFilterBoolean
	}
	ConvertFloat = func(source api.FilterFloat) filter.FilterFloat {
		var filterFilterFloat filter.FilterFloat
		filterFilterFloat.Eq = source.Eq
		filterFilterFloat.Ne = source.Ne
		filterFilterFloat.Gt = source.Gt
		filterFilterFloat.Gte = source.Gte
		filterFilterFloat.Lt = source.Lt
		filterFilterFloat.Lte = source.Lte
		if source.And != nil {
			var filterFilterFloatList []filter.FilterFloat
			if (*source.And) != nil {
				filterFilterFloatList = make([]filter.FilterFloat, len((*source.And)))
				for i := 0; i < len((*source.And)); i++ {
					filterFilterFloatList[i] = ConvertFloat((*source.And)[i])
				}
			}
			filterFilterFloat.And = &filterFilterFloatList
		}
		if source.Or != nil {
			var filterFilterFloatList2 []filter.FilterFloat
			if (*source.Or) != nil {
				filterFilterFloatList2 = make([]filter.FilterFloat, len((*source.Or)))
				for j := 0; j < len((*source.Or)); j++ {
					filterFilterFloatList2[j] = ConvertFloat((*source.Or)[j])
				}
			}
			filterFilterFloat.Or = &filterFilterFloatList2
		}
		return filterFilterFloat
	}
	ConvertFloatPtr = func(source *api.FilterFloat) *filter.FilterFloat {
		var pFilterFilterFloat *filter.FilterFloat
		if source != nil {
			filterFilterFloat := ConvertFloat((*source))
			pFilterFilterFloat = &filterFilterFloat
		}
		return pFilterFilterFloat
	}
	ConvertIDExact = func(source api.FilterIDExact) filter.FilterString {
		var filterFilterString filter.FilterString
		filterFilterString.In = source.In
		return filterFilterString
	}
	ConvertIDExactPtr = func(source *api.FilterIDExact) *filter.FilterString {
		var pFilterFilterString *filter.FilterString
		if source != nil {
			filterFilterString := ConvertIDExact((*source))
			pFilterFilterString = &filterFilterString
		}
		return pFilterFilterString
	}
	ConvertInt = func(source api.FilterInteger) filter.FilterInteger {
		var filterFilterInteger filter.FilterInteger
		filterFilterInteger.Eq = source.Eq
		filterFilterInteger.Ne = source.Ne
		filterFilterInteger.Gt = source.Gt
		filterFilterInteger.Gte = source.Gte
		filterFilterInteger.Lt = source.Lt
		filterFilterInteger.Lte = source.Lte
		if source.And != nil {
			var filterFilterIntegerList []filter.FilterInteger
			if (*source.And) != nil {
				filterFilterIntegerList = make([]filter.FilterInteger, len((*source.And)))
				for i := 0; i < len((*source.And)); i++ {
					filterFilterIntegerList[i] = ConvertInt((*source.And)[i])
				}
			}
			filterFilterInteger.And = &filterFilterIntegerList
		}
		if source.Or != nil {
			var filterFilterIntegerList2 []filter.FilterInteger
			if (*source.Or) != nil {
				filterFilterIntegerList2 = make([]filter.FilterInteger, len((*source.Or)))
				for j := 0; j < len((*source.Or)); j++ {
					filterFilterIntegerList2[j] = ConvertInt((*source.Or)[j])
				}
			}
			filterFilterInteger.Or = &filterFilterIntegerList2
		}
		return filterFilterInteger
	}
	ConvertIntPtr = func(source *api.FilterInteger) *filter.FilterInteger {
		var pFilterFilterInteger *filter.FilterInteger
		if source != nil {
			filterFilterInteger := ConvertInt((*source))
			pFilterFilterInteger = &filterFilterInteger
		}
		return pFilterFilterInteger
	}
	ConvertString = func(source api.FilterString) filter.FilterString {
		var filterFilterString filter.FilterString
		filterFilterString.Eq = source.Eq
		filterFilterString.Ne = source.Ne
		filterFilterString.In = source.In
		filterFilterString.Nin = source.Nin
		filterFilterString.Like = source.Like
		filterFilterString.Nlike = source.Nlike
		filterFilterString.Ilike = source.Ilike
		filterFilterString.Nilike = source.Nilike
		filterFilterString.Gt = source.Gt
		filterFilterString.Gte = source.Gte
		filterFilterString.Lt = source.Lt
		filterFilterString.Lte = source.Lte
		if source.And != nil {
			var filterFilterStringList []filter.FilterString
			if (*source.And) != nil {
				filterFilterStringList = make([]filter.FilterString, len((*source.And)))
				for i := 0; i < len((*source.And)); i++ {
					filterFilterStringList[i] = ConvertString((*source.And)[i])
				}
			}
			filterFilterString.And = &filterFilterStringList
		}
		if source.Or != nil {
			var filterFilterStringList2 []filter.FilterString
			if (*source.Or) != nil {
				filterFilterStringList2 = make([]filter.FilterString, len((*source.Or)))
				for j := 0; j < len((*source.Or)); j++ {
					filterFilterStringList2[j] = ConvertString((*source.Or)[j])
				}
			}
			filterFilterString.Or = &filterFilterStringList2
		}
		return filterFilterString
	}
	ConvertStringMap = func(source map[string]api.FilterString) map[string]filter.FilterString {
		var mapStringFilterFilterString map[string]filter.FilterString
		if source != nil {
			mapStringFilterFilterString = make(map[string]filter.FilterString, len(source))
			for key, value := range source {
				mapStringFilterFilterString[key] = ConvertString(value)
			}
		}
		return mapStringFilterFilterString
	}
	ConvertStringMapPtr = func(source *map[string]api.FilterString) *map[string]filter.FilterString {
		var pMapStringFilterFilterString *map[string]filter.FilterString
		if source != nil {
			mapStringFilterFilterString := ConvertStringMap((*source))
			pMapStringFilterFilterString = &mapStringFilterFilterString
		}
		return pMapStringFilterFilterString
	}
	ConvertStringMapToAPIPtr = func(source map[string]filter.FilterString) map[string]api.FilterString {
		var mapStringApiFilterString map[string]api.FilterString
		if source != nil {
			mapStringApiFilterString = make(map[string]api.FilterString, len(source))
			for key, value := range source {
				mapStringApiFilterString[key] = filterFilterStringToApiFilterString(value)
			}
		}
		return mapStringApiFilterString
	}
	ConvertStringPtr = func(source *api.FilterString) *filter.FilterString {
		var pFilterFilterString *filter.FilterString
		if source != nil {
			filterFilterString := ConvertString((*source))
			pFilterFilterString = &filterFilterString
		}
		return pFilterFilterString
	}
	ConvertStringToAPI = func(source *filter.FilterString) *api.FilterString {
		var pApiFilterString *api.FilterString
		if source != nil {
			apiFilterString := filterFilterStringToApiFilterString((*source))
			pApiFilterString = &apiFilterString
		}
		return pApiFilterString
	}
	ConvertTime = func(source api.FilterTime) filter.FilterTime {
		var filterFilterTime filter.FilterTime
		filterFilterTime.Gt = source.Gt
		filterFilterTime.Gte = source.Gte
		filterFilterTime.Lt = source.Lt
		filterFilterTime.Lte = source.Lte
		if source.And != nil {
			var filterFilterTimeList []filter.FilterTime
			if (*source.And) != nil {
				filterFilterTimeList = make([]filter.FilterTime, len((*source.And)))
				for i := 0; i < len((*source.And)); i++ {
					filterFilterTimeList[i] = ConvertTime((*source.And)[i])
				}
			}
			filterFilterTime.And = &filterFilterTimeList
		}
		if source.Or != nil {
			var filterFilterTimeList2 []filter.FilterTime
			if (*source.Or) != nil {
				filterFilterTimeList2 = make([]filter.FilterTime, len((*source.Or)))
				for j := 0; j < len((*source.Or)); j++ {
					filterFilterTimeList2[j] = ConvertTime((*source.Or)[j])
				}
			}
			filterFilterTime.Or = &filterFilterTimeList2
		}
		return filterFilterTime
	}
	ConvertTimePtr = func(source *api.FilterTime) *filter.FilterTime {
		var pFilterFilterTime *filter.FilterTime
		if source != nil {
			filterFilterTime := ConvertTime((*source))
			pFilterFilterTime = &filterFilterTime
		}
		return pFilterFilterTime
	}
}
func filterFilterStringToApiFilterString(source filter.FilterString) api.FilterString {
	var apiFilterString api.FilterString
	if source.And != nil {
		var apiFilterStringList []api.FilterString
		if (*source.And) != nil {
			apiFilterStringList = make([]api.FilterString, len((*source.And)))
			for i := 0; i < len((*source.And)); i++ {
				apiFilterStringList[i] = filterFilterStringToApiFilterString((*source.And)[i])
			}
		}
		apiFilterString.And = &apiFilterStringList
	}
	apiFilterString.Eq = source.Eq
	apiFilterString.Gt = source.Gt
	apiFilterString.Gte = source.Gte
	apiFilterString.Ilike = source.Ilike
	apiFilterString.In = source.In
	apiFilterString.Like = source.Like
	apiFilterString.Lt = source.Lt
	apiFilterString.Lte = source.Lte
	apiFilterString.Ne = source.Ne
	apiFilterString.Nilike = source.Nilike
	apiFilterString.Nin = source.Nin
	apiFilterString.Nlike = source.Nlike
	if source.Or != nil {
		var apiFilterStringList2 []api.FilterString
		if (*source.Or) != nil {
			apiFilterStringList2 = make([]api.FilterString, len((*source.Or)))
			for j := 0; j < len((*source.Or)); j++ {
				apiFilterStringList2[j] = filterFilterStringToApiFilterString((*source.Or)[j])
			}
		}
		apiFilterString.Or = &apiFilterStringList2
	}
	return apiFilterString
}
