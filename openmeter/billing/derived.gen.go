// Code generated by goderive DO NOT EDIT.

package billing

import (
	models "github.com/openmeterio/openmeter/pkg/models"
	timeutil "github.com/openmeterio/openmeter/pkg/timeutil"
)

// deriveEqualDetailedLineBase returns whether this and that are equal.
func deriveEqualDetailedLineBase(this, that *DetailedLineBase) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual(&this.ManagedResource, &that.ManagedResource) &&
			this.InvoiceID == that.InvoiceID &&
			this.Category == that.Category &&
			((this.ChildUniqueReferenceID == nil && that.ChildUniqueReferenceID == nil) || (this.ChildUniqueReferenceID != nil && that.ChildUniqueReferenceID != nil && *(this.ChildUniqueReferenceID) == *(that.ChildUniqueReferenceID))) &&
			((this.Index == nil && that.Index == nil) || (this.Index != nil && that.Index != nil && *(this.Index) == *(that.Index))) &&
			this.PaymentTerm == that.PaymentTerm &&
			this.ServicePeriod.Equal(that.ServicePeriod) &&
			this.Currency == that.Currency &&
			this.PerUnitAmount.Equal(that.PerUnitAmount) &&
			this.Quantity.Equal(that.Quantity) &&
			deriveEqual_(&this.Totals, &that.Totals) &&
			this.TaxConfig.Equal(that.TaxConfig) &&
			this.ExternalIDs.Equal(that.ExternalIDs) &&
			this.FeeLineConfigID == that.FeeLineConfigID
}

// deriveEqualLineBase returns whether this and that are equal.
func deriveEqualLineBase(this, that *LineBase) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveEqual(&this.ManagedResource, &that.ManagedResource) &&
			deriveEqual_1(this.Metadata, that.Metadata) &&
			this.Annotations.Equal(that.Annotations) &&
			this.ManagedBy == that.ManagedBy &&
			this.InvoiceID == that.InvoiceID &&
			this.Currency == that.Currency &&
			this.Period.Equal(that.Period) &&
			this.InvoiceAt.Equal(that.InvoiceAt) &&
			((this.ParentLineID == nil && that.ParentLineID == nil) || (this.ParentLineID != nil && that.ParentLineID != nil && *(this.ParentLineID) == *(that.ParentLineID))) &&
			((this.SplitLineGroupID == nil && that.SplitLineGroupID == nil) || (this.SplitLineGroupID != nil && that.SplitLineGroupID != nil && *(this.SplitLineGroupID) == *(that.SplitLineGroupID))) &&
			((this.ChildUniqueReferenceID == nil && that.ChildUniqueReferenceID == nil) || (this.ChildUniqueReferenceID != nil && that.ChildUniqueReferenceID != nil && *(this.ChildUniqueReferenceID) == *(that.ChildUniqueReferenceID))) &&
			this.TaxConfig.Equal(that.TaxConfig) &&
			deriveEqual_2(&this.RateCardDiscounts, &that.RateCardDiscounts) &&
			this.ExternalIDs.Equal(that.ExternalIDs) &&
			deriveEqual_3(this.Subscription, that.Subscription) &&
			deriveEqual_(&this.Totals, &that.Totals)
}

// deriveEqualUsageBasedLine returns whether this and that are equal.
func deriveEqualUsageBasedLine(this, that *UsageBasedLine) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.ConfigID == that.ConfigID &&
			this.Price.Equal(that.Price) &&
			this.FeatureKey == that.FeatureKey &&
			((this.Quantity == nil && that.Quantity == nil) || (this.Quantity != nil && that.Quantity != nil && (*(this.Quantity)).Equal(*(that.Quantity)))) &&
			((this.MeteredQuantity == nil && that.MeteredQuantity == nil) || (this.MeteredQuantity != nil && that.MeteredQuantity != nil && (*(this.MeteredQuantity)).Equal(*(that.MeteredQuantity)))) &&
			((this.PreLinePeriodQuantity == nil && that.PreLinePeriodQuantity == nil) || (this.PreLinePeriodQuantity != nil && that.PreLinePeriodQuantity != nil && (*(this.PreLinePeriodQuantity)).Equal(*(that.PreLinePeriodQuantity)))) &&
			((this.MeteredPreLinePeriodQuantity == nil && that.MeteredPreLinePeriodQuantity == nil) || (this.MeteredPreLinePeriodQuantity != nil && that.MeteredPreLinePeriodQuantity != nil && (*(this.MeteredPreLinePeriodQuantity)).Equal(*(that.MeteredPreLinePeriodQuantity))))
}

// deriveEqualLineDiscountBase returns whether this and that are equal.
func deriveEqualLineDiscountBase(this, that *LineDiscountBase) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			((this.Description == nil && that.Description == nil) || (this.Description != nil && that.Description != nil && *(this.Description) == *(that.Description))) &&
			((this.ChildUniqueReferenceID == nil && that.ChildUniqueReferenceID == nil) || (this.ChildUniqueReferenceID != nil && that.ChildUniqueReferenceID != nil && *(this.ChildUniqueReferenceID) == *(that.ChildUniqueReferenceID))) &&
			this.ExternalIDs.Equal(that.ExternalIDs) &&
			deriveEqual_4(&this.Reason, &that.Reason)
}

// deriveEqualAmountLineDiscount returns whether this and that are equal.
func deriveEqualAmountLineDiscount(this, that *AmountLineDiscount) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.LineDiscountBase.Equal(that.LineDiscountBase) &&
			this.Amount.Equal(that.Amount) &&
			this.RoundingAmount.Equal(that.RoundingAmount)
}

// deriveEqualAmountLineDiscountManaged returns whether this and that are equal.
func deriveEqualAmountLineDiscountManaged(this, that *AmountLineDiscountManaged) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.ManagedModelWithID.Equal(that.ManagedModelWithID) &&
			this.AmountLineDiscount.Equal(that.AmountLineDiscount)
}

// deriveEqualUsageLineDiscount returns whether this and that are equal.
func deriveEqualUsageLineDiscount(this, that *UsageLineDiscount) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.LineDiscountBase.Equal(that.LineDiscountBase) &&
			this.Quantity.Equal(that.Quantity) &&
			((this.PreLinePeriodQuantity == nil && that.PreLinePeriodQuantity == nil) || (this.PreLinePeriodQuantity != nil && that.PreLinePeriodQuantity != nil && (*(this.PreLinePeriodQuantity)).Equal(*(that.PreLinePeriodQuantity))))
}

// deriveEqualUsageLineDiscountManaged returns whether this and that are equal.
func deriveEqualUsageLineDiscountManaged(this, that *UsageLineDiscountManaged) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.ManagedModelWithID.Equal(that.ManagedModelWithID) &&
			this.UsageLineDiscount.Equal(that.UsageLineDiscount)
}

// deriveEqual returns whether this and that are equal.
func deriveEqual(this, that *models.ManagedResource) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.NamespacedModel == that.NamespacedModel &&
			this.ManagedModel.Equal(that.ManagedModel) &&
			this.ID == that.ID &&
			((this.Description == nil && that.Description == nil) || (this.Description != nil && that.Description != nil && *(this.Description) == *(that.Description))) &&
			this.Name == that.Name
}

// deriveEqual_ returns whether this and that are equal.
func deriveEqual_(this, that *Totals) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Amount.Equal(that.Amount) &&
			this.ChargesTotal.Equal(that.ChargesTotal) &&
			this.DiscountsTotal.Equal(that.DiscountsTotal) &&
			this.TaxesInclusiveTotal.Equal(that.TaxesInclusiveTotal) &&
			this.TaxesExclusiveTotal.Equal(that.TaxesExclusiveTotal) &&
			this.TaxesTotal.Equal(that.TaxesTotal) &&
			this.Total.Equal(that.Total)
}

// deriveEqual_1 returns whether this and that are equal.
func deriveEqual_1(this, that map[string]string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

// deriveEqual_2 returns whether this and that are equal.
func deriveEqual_2(this, that *Discounts) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			((this.Percentage == nil && that.Percentage == nil) || (this.Percentage != nil && that.Percentage != nil && (*(this.Percentage)).Equal(*(that.Percentage)))) &&
			((this.Usage == nil && that.Usage == nil) || (this.Usage != nil && that.Usage != nil && (*(this.Usage)).Equal(*(that.Usage))))
}

// deriveEqual_3 returns whether this and that are equal.
func deriveEqual_3(this, that *SubscriptionReference) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.SubscriptionID == that.SubscriptionID &&
			this.PhaseID == that.PhaseID &&
			this.ItemID == that.ItemID &&
			deriveEqual_5(&this.BillingPeriod, &that.BillingPeriod)
}

// deriveEqual_4 returns whether this and that are equal.
func deriveEqual_4(this, that *DiscountReason) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.t == that.t &&
			((this.percentage == nil && that.percentage == nil) || (this.percentage != nil && that.percentage != nil && (*(this.percentage)).Equal(*(that.percentage)))) &&
			((this.usage == nil && that.usage == nil) || (this.usage != nil && that.usage != nil && (*(this.usage)).Equal(*(that.usage))))
}

// deriveEqual_5 returns whether this and that are equal.
func deriveEqual_5(this, that *timeutil.ClosedPeriod) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.From.Equal(that.From) &&
			this.To.Equal(that.To)
}
