// Code generated by ent, DO NOT EDIT.

package usagereset

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/pkg/isodate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldContainsFold(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEQ(FieldNamespace, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEQ(FieldDeletedAt, v))
}

// EntitlementID applies equality check predicate on the "entitlement_id" field. It's identical to EntitlementIDEQ.
func EntitlementID(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEQ(FieldEntitlementID, v))
}

// ResetTime applies equality check predicate on the "reset_time" field. It's identical to ResetTimeEQ.
func ResetTime(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEQ(FieldResetTime, v))
}

// Anchor applies equality check predicate on the "anchor" field. It's identical to AnchorEQ.
func Anchor(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEQ(FieldAnchor, v))
}

// UsagePeriodInterval applies equality check predicate on the "usage_period_interval" field. It's identical to UsagePeriodIntervalEQ.
func UsagePeriodInterval(v isodate.String) predicate.UsageReset {
	vc := string(v)
	return predicate.UsageReset(sql.FieldEQ(FieldUsagePeriodInterval, vc))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldContainsFold(FieldNamespace, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.UsageReset {
	return predicate.UsageReset(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNotNull(FieldDeletedAt))
}

// EntitlementIDEQ applies the EQ predicate on the "entitlement_id" field.
func EntitlementIDEQ(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEQ(FieldEntitlementID, v))
}

// EntitlementIDNEQ applies the NEQ predicate on the "entitlement_id" field.
func EntitlementIDNEQ(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNEQ(FieldEntitlementID, v))
}

// EntitlementIDIn applies the In predicate on the "entitlement_id" field.
func EntitlementIDIn(vs ...string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldIn(FieldEntitlementID, vs...))
}

// EntitlementIDNotIn applies the NotIn predicate on the "entitlement_id" field.
func EntitlementIDNotIn(vs ...string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNotIn(FieldEntitlementID, vs...))
}

// EntitlementIDGT applies the GT predicate on the "entitlement_id" field.
func EntitlementIDGT(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldGT(FieldEntitlementID, v))
}

// EntitlementIDGTE applies the GTE predicate on the "entitlement_id" field.
func EntitlementIDGTE(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldGTE(FieldEntitlementID, v))
}

// EntitlementIDLT applies the LT predicate on the "entitlement_id" field.
func EntitlementIDLT(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldLT(FieldEntitlementID, v))
}

// EntitlementIDLTE applies the LTE predicate on the "entitlement_id" field.
func EntitlementIDLTE(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldLTE(FieldEntitlementID, v))
}

// EntitlementIDContains applies the Contains predicate on the "entitlement_id" field.
func EntitlementIDContains(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldContains(FieldEntitlementID, v))
}

// EntitlementIDHasPrefix applies the HasPrefix predicate on the "entitlement_id" field.
func EntitlementIDHasPrefix(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldHasPrefix(FieldEntitlementID, v))
}

// EntitlementIDHasSuffix applies the HasSuffix predicate on the "entitlement_id" field.
func EntitlementIDHasSuffix(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldHasSuffix(FieldEntitlementID, v))
}

// EntitlementIDEqualFold applies the EqualFold predicate on the "entitlement_id" field.
func EntitlementIDEqualFold(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEqualFold(FieldEntitlementID, v))
}

// EntitlementIDContainsFold applies the ContainsFold predicate on the "entitlement_id" field.
func EntitlementIDContainsFold(v string) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldContainsFold(FieldEntitlementID, v))
}

// ResetTimeEQ applies the EQ predicate on the "reset_time" field.
func ResetTimeEQ(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEQ(FieldResetTime, v))
}

// ResetTimeNEQ applies the NEQ predicate on the "reset_time" field.
func ResetTimeNEQ(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNEQ(FieldResetTime, v))
}

// ResetTimeIn applies the In predicate on the "reset_time" field.
func ResetTimeIn(vs ...time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldIn(FieldResetTime, vs...))
}

// ResetTimeNotIn applies the NotIn predicate on the "reset_time" field.
func ResetTimeNotIn(vs ...time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNotIn(FieldResetTime, vs...))
}

// ResetTimeGT applies the GT predicate on the "reset_time" field.
func ResetTimeGT(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldGT(FieldResetTime, v))
}

// ResetTimeGTE applies the GTE predicate on the "reset_time" field.
func ResetTimeGTE(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldGTE(FieldResetTime, v))
}

// ResetTimeLT applies the LT predicate on the "reset_time" field.
func ResetTimeLT(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldLT(FieldResetTime, v))
}

// ResetTimeLTE applies the LTE predicate on the "reset_time" field.
func ResetTimeLTE(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldLTE(FieldResetTime, v))
}

// AnchorEQ applies the EQ predicate on the "anchor" field.
func AnchorEQ(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldEQ(FieldAnchor, v))
}

// AnchorNEQ applies the NEQ predicate on the "anchor" field.
func AnchorNEQ(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNEQ(FieldAnchor, v))
}

// AnchorIn applies the In predicate on the "anchor" field.
func AnchorIn(vs ...time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldIn(FieldAnchor, vs...))
}

// AnchorNotIn applies the NotIn predicate on the "anchor" field.
func AnchorNotIn(vs ...time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldNotIn(FieldAnchor, vs...))
}

// AnchorGT applies the GT predicate on the "anchor" field.
func AnchorGT(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldGT(FieldAnchor, v))
}

// AnchorGTE applies the GTE predicate on the "anchor" field.
func AnchorGTE(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldGTE(FieldAnchor, v))
}

// AnchorLT applies the LT predicate on the "anchor" field.
func AnchorLT(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldLT(FieldAnchor, v))
}

// AnchorLTE applies the LTE predicate on the "anchor" field.
func AnchorLTE(v time.Time) predicate.UsageReset {
	return predicate.UsageReset(sql.FieldLTE(FieldAnchor, v))
}

// UsagePeriodIntervalEQ applies the EQ predicate on the "usage_period_interval" field.
func UsagePeriodIntervalEQ(v isodate.String) predicate.UsageReset {
	vc := string(v)
	return predicate.UsageReset(sql.FieldEQ(FieldUsagePeriodInterval, vc))
}

// UsagePeriodIntervalNEQ applies the NEQ predicate on the "usage_period_interval" field.
func UsagePeriodIntervalNEQ(v isodate.String) predicate.UsageReset {
	vc := string(v)
	return predicate.UsageReset(sql.FieldNEQ(FieldUsagePeriodInterval, vc))
}

// UsagePeriodIntervalIn applies the In predicate on the "usage_period_interval" field.
func UsagePeriodIntervalIn(vs ...isodate.String) predicate.UsageReset {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.UsageReset(sql.FieldIn(FieldUsagePeriodInterval, v...))
}

// UsagePeriodIntervalNotIn applies the NotIn predicate on the "usage_period_interval" field.
func UsagePeriodIntervalNotIn(vs ...isodate.String) predicate.UsageReset {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.UsageReset(sql.FieldNotIn(FieldUsagePeriodInterval, v...))
}

// UsagePeriodIntervalGT applies the GT predicate on the "usage_period_interval" field.
func UsagePeriodIntervalGT(v isodate.String) predicate.UsageReset {
	vc := string(v)
	return predicate.UsageReset(sql.FieldGT(FieldUsagePeriodInterval, vc))
}

// UsagePeriodIntervalGTE applies the GTE predicate on the "usage_period_interval" field.
func UsagePeriodIntervalGTE(v isodate.String) predicate.UsageReset {
	vc := string(v)
	return predicate.UsageReset(sql.FieldGTE(FieldUsagePeriodInterval, vc))
}

// UsagePeriodIntervalLT applies the LT predicate on the "usage_period_interval" field.
func UsagePeriodIntervalLT(v isodate.String) predicate.UsageReset {
	vc := string(v)
	return predicate.UsageReset(sql.FieldLT(FieldUsagePeriodInterval, vc))
}

// UsagePeriodIntervalLTE applies the LTE predicate on the "usage_period_interval" field.
func UsagePeriodIntervalLTE(v isodate.String) predicate.UsageReset {
	vc := string(v)
	return predicate.UsageReset(sql.FieldLTE(FieldUsagePeriodInterval, vc))
}

// UsagePeriodIntervalContains applies the Contains predicate on the "usage_period_interval" field.
func UsagePeriodIntervalContains(v isodate.String) predicate.UsageReset {
	vc := string(v)
	return predicate.UsageReset(sql.FieldContains(FieldUsagePeriodInterval, vc))
}

// UsagePeriodIntervalHasPrefix applies the HasPrefix predicate on the "usage_period_interval" field.
func UsagePeriodIntervalHasPrefix(v isodate.String) predicate.UsageReset {
	vc := string(v)
	return predicate.UsageReset(sql.FieldHasPrefix(FieldUsagePeriodInterval, vc))
}

// UsagePeriodIntervalHasSuffix applies the HasSuffix predicate on the "usage_period_interval" field.
func UsagePeriodIntervalHasSuffix(v isodate.String) predicate.UsageReset {
	vc := string(v)
	return predicate.UsageReset(sql.FieldHasSuffix(FieldUsagePeriodInterval, vc))
}

// UsagePeriodIntervalEqualFold applies the EqualFold predicate on the "usage_period_interval" field.
func UsagePeriodIntervalEqualFold(v isodate.String) predicate.UsageReset {
	vc := string(v)
	return predicate.UsageReset(sql.FieldEqualFold(FieldUsagePeriodInterval, vc))
}

// UsagePeriodIntervalContainsFold applies the ContainsFold predicate on the "usage_period_interval" field.
func UsagePeriodIntervalContainsFold(v isodate.String) predicate.UsageReset {
	vc := string(v)
	return predicate.UsageReset(sql.FieldContainsFold(FieldUsagePeriodInterval, vc))
}

// HasEntitlement applies the HasEdge predicate on the "entitlement" edge.
func HasEntitlement() predicate.UsageReset {
	return predicate.UsageReset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EntitlementTable, EntitlementColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntitlementWith applies the HasEdge predicate on the "entitlement" edge with a given conditions (other predicates).
func HasEntitlementWith(preds ...predicate.Entitlement) predicate.UsageReset {
	return predicate.UsageReset(func(s *sql.Selector) {
		step := newEntitlementStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UsageReset) predicate.UsageReset {
	return predicate.UsageReset(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UsageReset) predicate.UsageReset {
	return predicate.UsageReset(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UsageReset) predicate.UsageReset {
	return predicate.UsageReset(sql.NotPredicates(p))
}
