// Code generated by ent, DO NOT EDIT.

package usagereset

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usagereset type in the database.
	Label = "usage_reset"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldAnnotations holds the string denoting the annotations field in the database.
	FieldAnnotations = "annotations"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntitlementID holds the string denoting the entitlement_id field in the database.
	FieldEntitlementID = "entitlement_id"
	// FieldResetTime holds the string denoting the reset_time field in the database.
	FieldResetTime = "reset_time"
	// FieldAnchor holds the string denoting the anchor field in the database.
	FieldAnchor = "anchor"
	// FieldUsagePeriodInterval holds the string denoting the usage_period_interval field in the database.
	FieldUsagePeriodInterval = "usage_period_interval"
	// EdgeEntitlement holds the string denoting the entitlement edge name in mutations.
	EdgeEntitlement = "entitlement"
	// Table holds the table name of the usagereset in the database.
	Table = "usage_resets"
	// EntitlementTable is the table that holds the entitlement relation/edge.
	EntitlementTable = "usage_resets"
	// EntitlementInverseTable is the table name for the Entitlement entity.
	// It exists in this package in order to avoid circular dependency with the "entitlement" package.
	EntitlementInverseTable = "entitlements"
	// EntitlementColumn is the table column denoting the entitlement relation/edge.
	EntitlementColumn = "entitlement_id"
)

// Columns holds all SQL columns for usagereset fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldAnnotations,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntitlementID,
	FieldResetTime,
	FieldAnchor,
	FieldUsagePeriodInterval,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the UsageReset queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEntitlementID orders the results by the entitlement_id field.
func ByEntitlementID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntitlementID, opts...).ToFunc()
}

// ByResetTime orders the results by the reset_time field.
func ByResetTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResetTime, opts...).ToFunc()
}

// ByAnchor orders the results by the anchor field.
func ByAnchor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnchor, opts...).ToFunc()
}

// ByUsagePeriodInterval orders the results by the usage_period_interval field.
func ByUsagePeriodInterval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsagePeriodInterval, opts...).ToFunc()
}

// ByEntitlementField orders the results by entitlement field.
func ByEntitlementField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntitlementStep(), sql.OrderByField(field, opts...))
	}
}
func newEntitlementStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntitlementInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EntitlementTable, EntitlementColumn),
	)
}
