// Code generated by ent, DO NOT EDIT.

package addon

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Addon {
	return predicate.Addon(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Addon {
	return predicate.Addon(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Addon {
	return predicate.Addon(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Addon {
	return predicate.Addon(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Addon {
	return predicate.Addon(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Addon {
	return predicate.Addon(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Addon {
	return predicate.Addon(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Addon {
	return predicate.Addon(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Addon {
	return predicate.Addon(sql.FieldContainsFold(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldNamespace, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldDescription, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldKey, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldVersion, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldCurrency, v))
}

// EffectiveFrom applies equality check predicate on the "effective_from" field. It's identical to EffectiveFromEQ.
func EffectiveFrom(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldEffectiveFrom, v))
}

// EffectiveTo applies equality check predicate on the "effective_to" field. It's identical to EffectiveToEQ.
func EffectiveTo(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldEffectiveTo, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.Addon {
	return predicate.Addon(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.Addon {
	return predicate.Addon(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.Addon {
	return predicate.Addon(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.Addon {
	return predicate.Addon(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.Addon {
	return predicate.Addon(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.Addon {
	return predicate.Addon(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.Addon {
	return predicate.Addon(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.Addon {
	return predicate.Addon(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.Addon {
	return predicate.Addon(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.Addon {
	return predicate.Addon(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.Addon {
	return predicate.Addon(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.Addon {
	return predicate.Addon(sql.FieldContainsFold(FieldNamespace, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Addon {
	return predicate.Addon(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Addon {
	return predicate.Addon(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Addon {
	return predicate.Addon(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Addon {
	return predicate.Addon(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Addon {
	return predicate.Addon(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Addon {
	return predicate.Addon(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Addon {
	return predicate.Addon(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Addon {
	return predicate.Addon(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Addon {
	return predicate.Addon(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Addon {
	return predicate.Addon(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Addon {
	return predicate.Addon(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Addon {
	return predicate.Addon(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Addon {
	return predicate.Addon(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Addon {
	return predicate.Addon(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Addon {
	return predicate.Addon(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Addon {
	return predicate.Addon(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Addon {
	return predicate.Addon(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Addon {
	return predicate.Addon(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Addon {
	return predicate.Addon(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Addon {
	return predicate.Addon(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Addon {
	return predicate.Addon(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Addon {
	return predicate.Addon(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Addon {
	return predicate.Addon(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Addon {
	return predicate.Addon(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Addon {
	return predicate.Addon(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Addon {
	return predicate.Addon(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Addon {
	return predicate.Addon(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Addon {
	return predicate.Addon(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Addon {
	return predicate.Addon(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Addon {
	return predicate.Addon(sql.FieldContainsFold(FieldDescription, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.Addon {
	return predicate.Addon(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.Addon {
	return predicate.Addon(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.Addon {
	return predicate.Addon(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.Addon {
	return predicate.Addon(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.Addon {
	return predicate.Addon(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.Addon {
	return predicate.Addon(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.Addon {
	return predicate.Addon(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.Addon {
	return predicate.Addon(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.Addon {
	return predicate.Addon(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.Addon {
	return predicate.Addon(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.Addon {
	return predicate.Addon(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.Addon {
	return predicate.Addon(sql.FieldContainsFold(FieldKey, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Addon {
	return predicate.Addon(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Addon {
	return predicate.Addon(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Addon {
	return predicate.Addon(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Addon {
	return predicate.Addon(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Addon {
	return predicate.Addon(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Addon {
	return predicate.Addon(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Addon {
	return predicate.Addon(sql.FieldLTE(FieldVersion, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Addon {
	return predicate.Addon(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Addon {
	return predicate.Addon(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Addon {
	return predicate.Addon(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Addon {
	return predicate.Addon(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Addon {
	return predicate.Addon(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Addon {
	return predicate.Addon(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Addon {
	return predicate.Addon(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Addon {
	return predicate.Addon(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Addon {
	return predicate.Addon(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Addon {
	return predicate.Addon(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Addon {
	return predicate.Addon(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Addon {
	return predicate.Addon(sql.FieldContainsFold(FieldCurrency, v))
}

// InstanceTypeEQ applies the EQ predicate on the "instance_type" field.
func InstanceTypeEQ(v productcatalog.AddonInstanceType) predicate.Addon {
	vc := v
	return predicate.Addon(sql.FieldEQ(FieldInstanceType, vc))
}

// InstanceTypeNEQ applies the NEQ predicate on the "instance_type" field.
func InstanceTypeNEQ(v productcatalog.AddonInstanceType) predicate.Addon {
	vc := v
	return predicate.Addon(sql.FieldNEQ(FieldInstanceType, vc))
}

// InstanceTypeIn applies the In predicate on the "instance_type" field.
func InstanceTypeIn(vs ...productcatalog.AddonInstanceType) predicate.Addon {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Addon(sql.FieldIn(FieldInstanceType, v...))
}

// InstanceTypeNotIn applies the NotIn predicate on the "instance_type" field.
func InstanceTypeNotIn(vs ...productcatalog.AddonInstanceType) predicate.Addon {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Addon(sql.FieldNotIn(FieldInstanceType, v...))
}

// EffectiveFromEQ applies the EQ predicate on the "effective_from" field.
func EffectiveFromEQ(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldEffectiveFrom, v))
}

// EffectiveFromNEQ applies the NEQ predicate on the "effective_from" field.
func EffectiveFromNEQ(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldNEQ(FieldEffectiveFrom, v))
}

// EffectiveFromIn applies the In predicate on the "effective_from" field.
func EffectiveFromIn(vs ...time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldIn(FieldEffectiveFrom, vs...))
}

// EffectiveFromNotIn applies the NotIn predicate on the "effective_from" field.
func EffectiveFromNotIn(vs ...time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldNotIn(FieldEffectiveFrom, vs...))
}

// EffectiveFromGT applies the GT predicate on the "effective_from" field.
func EffectiveFromGT(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldGT(FieldEffectiveFrom, v))
}

// EffectiveFromGTE applies the GTE predicate on the "effective_from" field.
func EffectiveFromGTE(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldGTE(FieldEffectiveFrom, v))
}

// EffectiveFromLT applies the LT predicate on the "effective_from" field.
func EffectiveFromLT(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldLT(FieldEffectiveFrom, v))
}

// EffectiveFromLTE applies the LTE predicate on the "effective_from" field.
func EffectiveFromLTE(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldLTE(FieldEffectiveFrom, v))
}

// EffectiveFromIsNil applies the IsNil predicate on the "effective_from" field.
func EffectiveFromIsNil() predicate.Addon {
	return predicate.Addon(sql.FieldIsNull(FieldEffectiveFrom))
}

// EffectiveFromNotNil applies the NotNil predicate on the "effective_from" field.
func EffectiveFromNotNil() predicate.Addon {
	return predicate.Addon(sql.FieldNotNull(FieldEffectiveFrom))
}

// EffectiveToEQ applies the EQ predicate on the "effective_to" field.
func EffectiveToEQ(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldEQ(FieldEffectiveTo, v))
}

// EffectiveToNEQ applies the NEQ predicate on the "effective_to" field.
func EffectiveToNEQ(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldNEQ(FieldEffectiveTo, v))
}

// EffectiveToIn applies the In predicate on the "effective_to" field.
func EffectiveToIn(vs ...time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldIn(FieldEffectiveTo, vs...))
}

// EffectiveToNotIn applies the NotIn predicate on the "effective_to" field.
func EffectiveToNotIn(vs ...time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldNotIn(FieldEffectiveTo, vs...))
}

// EffectiveToGT applies the GT predicate on the "effective_to" field.
func EffectiveToGT(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldGT(FieldEffectiveTo, v))
}

// EffectiveToGTE applies the GTE predicate on the "effective_to" field.
func EffectiveToGTE(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldGTE(FieldEffectiveTo, v))
}

// EffectiveToLT applies the LT predicate on the "effective_to" field.
func EffectiveToLT(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldLT(FieldEffectiveTo, v))
}

// EffectiveToLTE applies the LTE predicate on the "effective_to" field.
func EffectiveToLTE(v time.Time) predicate.Addon {
	return predicate.Addon(sql.FieldLTE(FieldEffectiveTo, v))
}

// EffectiveToIsNil applies the IsNil predicate on the "effective_to" field.
func EffectiveToIsNil() predicate.Addon {
	return predicate.Addon(sql.FieldIsNull(FieldEffectiveTo))
}

// EffectiveToNotNil applies the NotNil predicate on the "effective_to" field.
func EffectiveToNotNil() predicate.Addon {
	return predicate.Addon(sql.FieldNotNull(FieldEffectiveTo))
}

// AnnotationsIsNil applies the IsNil predicate on the "annotations" field.
func AnnotationsIsNil() predicate.Addon {
	return predicate.Addon(sql.FieldIsNull(FieldAnnotations))
}

// AnnotationsNotNil applies the NotNil predicate on the "annotations" field.
func AnnotationsNotNil() predicate.Addon {
	return predicate.Addon(sql.FieldNotNull(FieldAnnotations))
}

// HasRatecards applies the HasEdge predicate on the "ratecards" edge.
func HasRatecards() predicate.Addon {
	return predicate.Addon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RatecardsTable, RatecardsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRatecardsWith applies the HasEdge predicate on the "ratecards" edge with a given conditions (other predicates).
func HasRatecardsWith(preds ...predicate.AddonRateCard) predicate.Addon {
	return predicate.Addon(func(s *sql.Selector) {
		step := newRatecardsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscriptionAddons applies the HasEdge predicate on the "subscription_addons" edge.
func HasSubscriptionAddons() predicate.Addon {
	return predicate.Addon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubscriptionAddonsTable, SubscriptionAddonsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionAddonsWith applies the HasEdge predicate on the "subscription_addons" edge with a given conditions (other predicates).
func HasSubscriptionAddonsWith(preds ...predicate.SubscriptionAddon) predicate.Addon {
	return predicate.Addon(func(s *sql.Selector) {
		step := newSubscriptionAddonsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Addon) predicate.Addon {
	return predicate.Addon(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Addon) predicate.Addon {
	return predicate.Addon(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Addon) predicate.Addon {
	return predicate.Addon(sql.NotPredicates(p))
}
