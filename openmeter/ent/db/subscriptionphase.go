// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionphase"
)

// SubscriptionPhase is the model entity for the SubscriptionPhase schema.
type SubscriptionPhase struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// SubscriptionID holds the value of the "subscription_id" field.
	SubscriptionID string `json:"subscription_id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// ActiveFrom holds the value of the "active_from" field.
	ActiveFrom time.Time `json:"active_from,omitempty"`
	// Used to sort phases when they have the same active_from time (happens for 0 length phases)
	SortHint *uint8 `json:"sort_hint,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionPhaseQuery when eager-loading is set.
	Edges        SubscriptionPhaseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubscriptionPhaseEdges holds the relations/edges for other nodes in the graph.
type SubscriptionPhaseEdges struct {
	// Subscription holds the value of the subscription edge.
	Subscription *Subscription `json:"subscription,omitempty"`
	// Items holds the value of the items edge.
	Items []*SubscriptionItem `json:"items,omitempty"`
	// BillingLines holds the value of the billing_lines edge.
	BillingLines []*BillingInvoiceLine `json:"billing_lines,omitempty"`
	// BillingSplitLineGroups holds the value of the billing_split_line_groups edge.
	BillingSplitLineGroups []*BillingInvoiceSplitLineGroup `json:"billing_split_line_groups,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// SubscriptionOrErr returns the Subscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionPhaseEdges) SubscriptionOrErr() (*Subscription, error) {
	if e.Subscription != nil {
		return e.Subscription, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: subscription.Label}
	}
	return nil, &NotLoadedError{edge: "subscription"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e SubscriptionPhaseEdges) ItemsOrErr() ([]*SubscriptionItem, error) {
	if e.loadedTypes[1] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// BillingLinesOrErr returns the BillingLines value or an error if the edge
// was not loaded in eager-loading.
func (e SubscriptionPhaseEdges) BillingLinesOrErr() ([]*BillingInvoiceLine, error) {
	if e.loadedTypes[2] {
		return e.BillingLines, nil
	}
	return nil, &NotLoadedError{edge: "billing_lines"}
}

// BillingSplitLineGroupsOrErr returns the BillingSplitLineGroups value or an error if the edge
// was not loaded in eager-loading.
func (e SubscriptionPhaseEdges) BillingSplitLineGroupsOrErr() ([]*BillingInvoiceSplitLineGroup, error) {
	if e.loadedTypes[3] {
		return e.BillingSplitLineGroups, nil
	}
	return nil, &NotLoadedError{edge: "billing_split_line_groups"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionPhase) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptionphase.FieldMetadata:
			values[i] = new([]byte)
		case subscriptionphase.FieldSortHint:
			values[i] = new(sql.NullInt64)
		case subscriptionphase.FieldID, subscriptionphase.FieldNamespace, subscriptionphase.FieldSubscriptionID, subscriptionphase.FieldKey, subscriptionphase.FieldName, subscriptionphase.FieldDescription:
			values[i] = new(sql.NullString)
		case subscriptionphase.FieldCreatedAt, subscriptionphase.FieldUpdatedAt, subscriptionphase.FieldDeletedAt, subscriptionphase.FieldActiveFrom:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionPhase fields.
func (_m *SubscriptionPhase) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptionphase.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case subscriptionphase.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				_m.Namespace = value.String
			}
		case subscriptionphase.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case subscriptionphase.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case subscriptionphase.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case subscriptionphase.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case subscriptionphase.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				_m.SubscriptionID = value.String
			}
		case subscriptionphase.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				_m.Key = value.String
			}
		case subscriptionphase.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case subscriptionphase.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = new(string)
				*_m.Description = value.String
			}
		case subscriptionphase.FieldActiveFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field active_from", values[i])
			} else if value.Valid {
				_m.ActiveFrom = value.Time
			}
		case subscriptionphase.FieldSortHint:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_hint", values[i])
			} else if value.Valid {
				_m.SortHint = new(uint8)
				*_m.SortHint = uint8(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscriptionPhase.
// This includes values selected through modifiers, order, etc.
func (_m *SubscriptionPhase) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QuerySubscription queries the "subscription" edge of the SubscriptionPhase entity.
func (_m *SubscriptionPhase) QuerySubscription() *SubscriptionQuery {
	return NewSubscriptionPhaseClient(_m.config).QuerySubscription(_m)
}

// QueryItems queries the "items" edge of the SubscriptionPhase entity.
func (_m *SubscriptionPhase) QueryItems() *SubscriptionItemQuery {
	return NewSubscriptionPhaseClient(_m.config).QueryItems(_m)
}

// QueryBillingLines queries the "billing_lines" edge of the SubscriptionPhase entity.
func (_m *SubscriptionPhase) QueryBillingLines() *BillingInvoiceLineQuery {
	return NewSubscriptionPhaseClient(_m.config).QueryBillingLines(_m)
}

// QueryBillingSplitLineGroups queries the "billing_split_line_groups" edge of the SubscriptionPhase entity.
func (_m *SubscriptionPhase) QueryBillingSplitLineGroups() *BillingInvoiceSplitLineGroupQuery {
	return NewSubscriptionPhaseClient(_m.config).QueryBillingSplitLineGroups(_m)
}

// Update returns a builder for updating this SubscriptionPhase.
// Note that you need to call SubscriptionPhase.Unwrap() before calling this method if this SubscriptionPhase
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SubscriptionPhase) Update() *SubscriptionPhaseUpdateOne {
	return NewSubscriptionPhaseClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SubscriptionPhase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SubscriptionPhase) Unwrap() *SubscriptionPhase {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("db: SubscriptionPhase is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SubscriptionPhase) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionPhase(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("namespace=")
	builder.WriteString(_m.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("subscription_id=")
	builder.WriteString(_m.SubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(_m.Key)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	if v := _m.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("active_from=")
	builder.WriteString(_m.ActiveFrom.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.SortHint; v != nil {
		builder.WriteString("sort_hint=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionPhases is a parsable slice of SubscriptionPhase.
type SubscriptionPhases []*SubscriptionPhase
