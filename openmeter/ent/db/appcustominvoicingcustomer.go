// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustominvoicing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustominvoicingcustomer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
)

// AppCustomInvoicingCustomer is the model entity for the AppCustomInvoicingCustomer schema.
type AppCustomInvoicingCustomer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID string `json:"customer_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppCustomInvoicingCustomerQuery when eager-loading is set.
	Edges        AppCustomInvoicingCustomerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AppCustomInvoicingCustomerEdges holds the relations/edges for other nodes in the graph.
type AppCustomInvoicingCustomerEdges struct {
	// CustomInvoicingApp holds the value of the custom_invoicing_app edge.
	CustomInvoicingApp *AppCustomInvoicing `json:"custom_invoicing_app,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CustomInvoicingAppOrErr returns the CustomInvoicingApp value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppCustomInvoicingCustomerEdges) CustomInvoicingAppOrErr() (*AppCustomInvoicing, error) {
	if e.CustomInvoicingApp != nil {
		return e.CustomInvoicingApp, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: appcustominvoicing.Label}
	}
	return nil, &NotLoadedError{edge: "custom_invoicing_app"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppCustomInvoicingCustomerEdges) CustomerOrErr() (*Customer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppCustomInvoicingCustomer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appcustominvoicingcustomer.FieldMetadata:
			values[i] = new([]byte)
		case appcustominvoicingcustomer.FieldID:
			values[i] = new(sql.NullInt64)
		case appcustominvoicingcustomer.FieldNamespace, appcustominvoicingcustomer.FieldAppID, appcustominvoicingcustomer.FieldCustomerID:
			values[i] = new(sql.NullString)
		case appcustominvoicingcustomer.FieldCreatedAt, appcustominvoicingcustomer.FieldUpdatedAt, appcustominvoicingcustomer.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppCustomInvoicingCustomer fields.
func (_m *AppCustomInvoicingCustomer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appcustominvoicingcustomer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case appcustominvoicingcustomer.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				_m.Namespace = value.String
			}
		case appcustominvoicingcustomer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case appcustominvoicingcustomer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case appcustominvoicingcustomer.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case appcustominvoicingcustomer.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case appcustominvoicingcustomer.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				_m.AppID = value.String
			}
		case appcustominvoicingcustomer.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				_m.CustomerID = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppCustomInvoicingCustomer.
// This includes values selected through modifiers, order, etc.
func (_m *AppCustomInvoicingCustomer) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryCustomInvoicingApp queries the "custom_invoicing_app" edge of the AppCustomInvoicingCustomer entity.
func (_m *AppCustomInvoicingCustomer) QueryCustomInvoicingApp() *AppCustomInvoicingQuery {
	return NewAppCustomInvoicingCustomerClient(_m.config).QueryCustomInvoicingApp(_m)
}

// QueryCustomer queries the "customer" edge of the AppCustomInvoicingCustomer entity.
func (_m *AppCustomInvoicingCustomer) QueryCustomer() *CustomerQuery {
	return NewAppCustomInvoicingCustomerClient(_m.config).QueryCustomer(_m)
}

// Update returns a builder for updating this AppCustomInvoicingCustomer.
// Note that you need to call AppCustomInvoicingCustomer.Unwrap() before calling this method if this AppCustomInvoicingCustomer
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *AppCustomInvoicingCustomer) Update() *AppCustomInvoicingCustomerUpdateOne {
	return NewAppCustomInvoicingCustomerClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the AppCustomInvoicingCustomer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *AppCustomInvoicingCustomer) Unwrap() *AppCustomInvoicingCustomer {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("db: AppCustomInvoicingCustomer is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *AppCustomInvoicingCustomer) String() string {
	var builder strings.Builder
	builder.WriteString("AppCustomInvoicingCustomer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("namespace=")
	builder.WriteString(_m.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(_m.AppID)
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(_m.CustomerID)
	builder.WriteByte(')')
	return builder.String()
}

// AppCustomInvoicingCustomers is a parsable slice of AppCustomInvoicingCustomer.
type AppCustomInvoicingCustomers []*AppCustomInvoicingCustomer
