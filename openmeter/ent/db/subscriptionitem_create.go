// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicesplitlinegroup"
	"github.com/openmeterio/openmeter/openmeter/ent/db/entitlement"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionphase"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/datetime"
)

// SubscriptionItemCreate is the builder for creating a SubscriptionItem entity.
type SubscriptionItemCreate struct {
	config
	mutation *SubscriptionItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (_c *SubscriptionItemCreate) SetNamespace(v string) *SubscriptionItemCreate {
	_c.mutation.SetNamespace(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *SubscriptionItemCreate) SetCreatedAt(v time.Time) *SubscriptionItemCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *SubscriptionItemCreate) SetNillableCreatedAt(v *time.Time) *SubscriptionItemCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *SubscriptionItemCreate) SetUpdatedAt(v time.Time) *SubscriptionItemCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *SubscriptionItemCreate) SetNillableUpdatedAt(v *time.Time) *SubscriptionItemCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *SubscriptionItemCreate) SetDeletedAt(v time.Time) *SubscriptionItemCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *SubscriptionItemCreate) SetNillableDeletedAt(v *time.Time) *SubscriptionItemCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *SubscriptionItemCreate) SetMetadata(v map[string]string) *SubscriptionItemCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetAnnotations sets the "annotations" field.
func (_c *SubscriptionItemCreate) SetAnnotations(v map[string]interface{}) *SubscriptionItemCreate {
	_c.mutation.SetAnnotations(v)
	return _c
}

// SetActiveFrom sets the "active_from" field.
func (_c *SubscriptionItemCreate) SetActiveFrom(v time.Time) *SubscriptionItemCreate {
	_c.mutation.SetActiveFrom(v)
	return _c
}

// SetActiveTo sets the "active_to" field.
func (_c *SubscriptionItemCreate) SetActiveTo(v time.Time) *SubscriptionItemCreate {
	_c.mutation.SetActiveTo(v)
	return _c
}

// SetNillableActiveTo sets the "active_to" field if the given value is not nil.
func (_c *SubscriptionItemCreate) SetNillableActiveTo(v *time.Time) *SubscriptionItemCreate {
	if v != nil {
		_c.SetActiveTo(*v)
	}
	return _c
}

// SetPhaseID sets the "phase_id" field.
func (_c *SubscriptionItemCreate) SetPhaseID(v string) *SubscriptionItemCreate {
	_c.mutation.SetPhaseID(v)
	return _c
}

// SetKey sets the "key" field.
func (_c *SubscriptionItemCreate) SetKey(v string) *SubscriptionItemCreate {
	_c.mutation.SetKey(v)
	return _c
}

// SetEntitlementID sets the "entitlement_id" field.
func (_c *SubscriptionItemCreate) SetEntitlementID(v string) *SubscriptionItemCreate {
	_c.mutation.SetEntitlementID(v)
	return _c
}

// SetNillableEntitlementID sets the "entitlement_id" field if the given value is not nil.
func (_c *SubscriptionItemCreate) SetNillableEntitlementID(v *string) *SubscriptionItemCreate {
	if v != nil {
		_c.SetEntitlementID(*v)
	}
	return _c
}

// SetRestartsBillingPeriod sets the "restarts_billing_period" field.
func (_c *SubscriptionItemCreate) SetRestartsBillingPeriod(v bool) *SubscriptionItemCreate {
	_c.mutation.SetRestartsBillingPeriod(v)
	return _c
}

// SetNillableRestartsBillingPeriod sets the "restarts_billing_period" field if the given value is not nil.
func (_c *SubscriptionItemCreate) SetNillableRestartsBillingPeriod(v *bool) *SubscriptionItemCreate {
	if v != nil {
		_c.SetRestartsBillingPeriod(*v)
	}
	return _c
}

// SetActiveFromOverrideRelativeToPhaseStart sets the "active_from_override_relative_to_phase_start" field.
func (_c *SubscriptionItemCreate) SetActiveFromOverrideRelativeToPhaseStart(v datetime.ISODurationString) *SubscriptionItemCreate {
	_c.mutation.SetActiveFromOverrideRelativeToPhaseStart(v)
	return _c
}

// SetNillableActiveFromOverrideRelativeToPhaseStart sets the "active_from_override_relative_to_phase_start" field if the given value is not nil.
func (_c *SubscriptionItemCreate) SetNillableActiveFromOverrideRelativeToPhaseStart(v *datetime.ISODurationString) *SubscriptionItemCreate {
	if v != nil {
		_c.SetActiveFromOverrideRelativeToPhaseStart(*v)
	}
	return _c
}

// SetActiveToOverrideRelativeToPhaseStart sets the "active_to_override_relative_to_phase_start" field.
func (_c *SubscriptionItemCreate) SetActiveToOverrideRelativeToPhaseStart(v datetime.ISODurationString) *SubscriptionItemCreate {
	_c.mutation.SetActiveToOverrideRelativeToPhaseStart(v)
	return _c
}

// SetNillableActiveToOverrideRelativeToPhaseStart sets the "active_to_override_relative_to_phase_start" field if the given value is not nil.
func (_c *SubscriptionItemCreate) SetNillableActiveToOverrideRelativeToPhaseStart(v *datetime.ISODurationString) *SubscriptionItemCreate {
	if v != nil {
		_c.SetActiveToOverrideRelativeToPhaseStart(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *SubscriptionItemCreate) SetName(v string) *SubscriptionItemCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *SubscriptionItemCreate) SetDescription(v string) *SubscriptionItemCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *SubscriptionItemCreate) SetNillableDescription(v *string) *SubscriptionItemCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetFeatureKey sets the "feature_key" field.
func (_c *SubscriptionItemCreate) SetFeatureKey(v string) *SubscriptionItemCreate {
	_c.mutation.SetFeatureKey(v)
	return _c
}

// SetNillableFeatureKey sets the "feature_key" field if the given value is not nil.
func (_c *SubscriptionItemCreate) SetNillableFeatureKey(v *string) *SubscriptionItemCreate {
	if v != nil {
		_c.SetFeatureKey(*v)
	}
	return _c
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (_c *SubscriptionItemCreate) SetEntitlementTemplate(v *productcatalog.EntitlementTemplate) *SubscriptionItemCreate {
	_c.mutation.SetEntitlementTemplate(v)
	return _c
}

// SetTaxConfig sets the "tax_config" field.
func (_c *SubscriptionItemCreate) SetTaxConfig(v *productcatalog.TaxConfig) *SubscriptionItemCreate {
	_c.mutation.SetTaxConfig(v)
	return _c
}

// SetBillingCadence sets the "billing_cadence" field.
func (_c *SubscriptionItemCreate) SetBillingCadence(v datetime.ISODurationString) *SubscriptionItemCreate {
	_c.mutation.SetBillingCadence(v)
	return _c
}

// SetNillableBillingCadence sets the "billing_cadence" field if the given value is not nil.
func (_c *SubscriptionItemCreate) SetNillableBillingCadence(v *datetime.ISODurationString) *SubscriptionItemCreate {
	if v != nil {
		_c.SetBillingCadence(*v)
	}
	return _c
}

// SetPrice sets the "price" field.
func (_c *SubscriptionItemCreate) SetPrice(v *productcatalog.Price) *SubscriptionItemCreate {
	_c.mutation.SetPrice(v)
	return _c
}

// SetDiscounts sets the "discounts" field.
func (_c *SubscriptionItemCreate) SetDiscounts(v *productcatalog.Discounts) *SubscriptionItemCreate {
	_c.mutation.SetDiscounts(v)
	return _c
}

// SetID sets the "id" field.
func (_c *SubscriptionItemCreate) SetID(v string) *SubscriptionItemCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *SubscriptionItemCreate) SetNillableID(v *string) *SubscriptionItemCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetPhase sets the "phase" edge to the SubscriptionPhase entity.
func (_c *SubscriptionItemCreate) SetPhase(v *SubscriptionPhase) *SubscriptionItemCreate {
	return _c.SetPhaseID(v.ID)
}

// SetEntitlement sets the "entitlement" edge to the Entitlement entity.
func (_c *SubscriptionItemCreate) SetEntitlement(v *Entitlement) *SubscriptionItemCreate {
	return _c.SetEntitlementID(v.ID)
}

// AddBillingLineIDs adds the "billing_lines" edge to the BillingInvoiceLine entity by IDs.
func (_c *SubscriptionItemCreate) AddBillingLineIDs(ids ...string) *SubscriptionItemCreate {
	_c.mutation.AddBillingLineIDs(ids...)
	return _c
}

// AddBillingLines adds the "billing_lines" edges to the BillingInvoiceLine entity.
func (_c *SubscriptionItemCreate) AddBillingLines(v ...*BillingInvoiceLine) *SubscriptionItemCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddBillingLineIDs(ids...)
}

// AddBillingSplitLineGroupIDs adds the "billing_split_line_groups" edge to the BillingInvoiceSplitLineGroup entity by IDs.
func (_c *SubscriptionItemCreate) AddBillingSplitLineGroupIDs(ids ...string) *SubscriptionItemCreate {
	_c.mutation.AddBillingSplitLineGroupIDs(ids...)
	return _c
}

// AddBillingSplitLineGroups adds the "billing_split_line_groups" edges to the BillingInvoiceSplitLineGroup entity.
func (_c *SubscriptionItemCreate) AddBillingSplitLineGroups(v ...*BillingInvoiceSplitLineGroup) *SubscriptionItemCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddBillingSplitLineGroupIDs(ids...)
}

// Mutation returns the SubscriptionItemMutation object of the builder.
func (_c *SubscriptionItemCreate) Mutation() *SubscriptionItemMutation {
	return _c.mutation
}

// Save creates the SubscriptionItem in the database.
func (_c *SubscriptionItemCreate) Save(ctx context.Context) (*SubscriptionItem, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SubscriptionItemCreate) SaveX(ctx context.Context) *SubscriptionItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SubscriptionItemCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SubscriptionItemCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SubscriptionItemCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := subscriptionitem.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := subscriptionitem.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := subscriptionitem.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SubscriptionItemCreate) check() error {
	if _, ok := _c.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "SubscriptionItem.namespace"`)}
	}
	if v, ok := _c.mutation.Namespace(); ok {
		if err := subscriptionitem.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "SubscriptionItem.namespace": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "SubscriptionItem.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "SubscriptionItem.updated_at"`)}
	}
	if _, ok := _c.mutation.ActiveFrom(); !ok {
		return &ValidationError{Name: "active_from", err: errors.New(`db: missing required field "SubscriptionItem.active_from"`)}
	}
	if _, ok := _c.mutation.PhaseID(); !ok {
		return &ValidationError{Name: "phase_id", err: errors.New(`db: missing required field "SubscriptionItem.phase_id"`)}
	}
	if v, ok := _c.mutation.PhaseID(); ok {
		if err := subscriptionitem.PhaseIDValidator(v); err != nil {
			return &ValidationError{Name: "phase_id", err: fmt.Errorf(`db: validator failed for field "SubscriptionItem.phase_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`db: missing required field "SubscriptionItem.key"`)}
	}
	if v, ok := _c.mutation.Key(); ok {
		if err := subscriptionitem.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`db: validator failed for field "SubscriptionItem.key": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "SubscriptionItem.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := subscriptionitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "SubscriptionItem.name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.EntitlementTemplate(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "entitlement_template", err: fmt.Errorf(`db: validator failed for field "SubscriptionItem.entitlement_template": %w`, err)}
		}
	}
	if v, ok := _c.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "SubscriptionItem.tax_config": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Price(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`db: validator failed for field "SubscriptionItem.price": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Discounts(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "discounts", err: fmt.Errorf(`db: validator failed for field "SubscriptionItem.discounts": %w`, err)}
		}
	}
	if len(_c.mutation.PhaseIDs()) == 0 {
		return &ValidationError{Name: "phase", err: errors.New(`db: missing required edge "SubscriptionItem.phase"`)}
	}
	return nil
}

func (_c *SubscriptionItemCreate) sqlSave(ctx context.Context) (*SubscriptionItem, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := _c.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubscriptionItem.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SubscriptionItemCreate) createSpec() (*SubscriptionItem, *sqlgraph.CreateSpec, error) {
	var (
		_node = &SubscriptionItem{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionitem.Table, sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Namespace(); ok {
		_spec.SetField(subscriptionitem.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptionitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionitem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionitem.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(subscriptionitem.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.Annotations(); ok {
		vv, err := subscriptionitem.ValueScanner.Annotations.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(subscriptionitem.FieldAnnotations, field.TypeString, vv)
		_node.Annotations = value
	}
	if value, ok := _c.mutation.ActiveFrom(); ok {
		_spec.SetField(subscriptionitem.FieldActiveFrom, field.TypeTime, value)
		_node.ActiveFrom = value
	}
	if value, ok := _c.mutation.ActiveTo(); ok {
		_spec.SetField(subscriptionitem.FieldActiveTo, field.TypeTime, value)
		_node.ActiveTo = &value
	}
	if value, ok := _c.mutation.Key(); ok {
		_spec.SetField(subscriptionitem.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := _c.mutation.RestartsBillingPeriod(); ok {
		_spec.SetField(subscriptionitem.FieldRestartsBillingPeriod, field.TypeBool, value)
		_node.RestartsBillingPeriod = &value
	}
	if value, ok := _c.mutation.ActiveFromOverrideRelativeToPhaseStart(); ok {
		_spec.SetField(subscriptionitem.FieldActiveFromOverrideRelativeToPhaseStart, field.TypeString, value)
		_node.ActiveFromOverrideRelativeToPhaseStart = &value
	}
	if value, ok := _c.mutation.ActiveToOverrideRelativeToPhaseStart(); ok {
		_spec.SetField(subscriptionitem.FieldActiveToOverrideRelativeToPhaseStart, field.TypeString, value)
		_node.ActiveToOverrideRelativeToPhaseStart = &value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(subscriptionitem.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(subscriptionitem.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.FeatureKey(); ok {
		_spec.SetField(subscriptionitem.FieldFeatureKey, field.TypeString, value)
		_node.FeatureKey = &value
	}
	if value, ok := _c.mutation.EntitlementTemplate(); ok {
		vv, err := subscriptionitem.ValueScanner.EntitlementTemplate.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(subscriptionitem.FieldEntitlementTemplate, field.TypeString, vv)
		_node.EntitlementTemplate = value
	}
	if value, ok := _c.mutation.TaxConfig(); ok {
		vv, err := subscriptionitem.ValueScanner.TaxConfig.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(subscriptionitem.FieldTaxConfig, field.TypeString, vv)
		_node.TaxConfig = value
	}
	if value, ok := _c.mutation.BillingCadence(); ok {
		_spec.SetField(subscriptionitem.FieldBillingCadence, field.TypeString, value)
		_node.BillingCadence = &value
	}
	if value, ok := _c.mutation.Price(); ok {
		vv, err := subscriptionitem.ValueScanner.Price.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(subscriptionitem.FieldPrice, field.TypeString, vv)
		_node.Price = value
	}
	if value, ok := _c.mutation.Discounts(); ok {
		vv, err := subscriptionitem.ValueScanner.Discounts.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(subscriptionitem.FieldDiscounts, field.TypeString, vv)
		_node.Discounts = value
	}
	if nodes := _c.mutation.PhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionitem.PhaseTable,
			Columns: []string{subscriptionitem.PhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PhaseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EntitlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionitem.EntitlementTable,
			Columns: []string{subscriptionitem.EntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EntitlementID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BillingLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionitem.BillingLinesTable,
			Columns: []string{subscriptionitem.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BillingSplitLineGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionitem.BillingSplitLineGroupsTable,
			Columns: []string{subscriptionitem.BillingSplitLineGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionItem.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionItemUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *SubscriptionItemCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionItemUpsertOne {
	_c.conflict = opts
	return &SubscriptionItemUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SubscriptionItemCreate) OnConflictColumns(columns ...string) *SubscriptionItemUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionItemUpsertOne{
		create: _c,
	}
}

type (
	// SubscriptionItemUpsertOne is the builder for "upsert"-ing
	//  one SubscriptionItem node.
	SubscriptionItemUpsertOne struct {
		create *SubscriptionItemCreate
	}

	// SubscriptionItemUpsert is the "OnConflict" setter.
	SubscriptionItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionItemUpsert) SetUpdatedAt(v time.Time) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateUpdatedAt() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionItemUpsert) SetDeletedAt(v time.Time) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateDeletedAt() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionItemUpsert) ClearDeletedAt() *SubscriptionItemUpsert {
	u.SetNull(subscriptionitem.FieldDeletedAt)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *SubscriptionItemUpsert) SetMetadata(v map[string]string) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateMetadata() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SubscriptionItemUpsert) ClearMetadata() *SubscriptionItemUpsert {
	u.SetNull(subscriptionitem.FieldMetadata)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *SubscriptionItemUpsert) SetAnnotations(v map[string]interface{}) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateAnnotations() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldAnnotations)
	return u
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *SubscriptionItemUpsert) ClearAnnotations() *SubscriptionItemUpsert {
	u.SetNull(subscriptionitem.FieldAnnotations)
	return u
}

// SetActiveFrom sets the "active_from" field.
func (u *SubscriptionItemUpsert) SetActiveFrom(v time.Time) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldActiveFrom, v)
	return u
}

// UpdateActiveFrom sets the "active_from" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateActiveFrom() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldActiveFrom)
	return u
}

// SetActiveTo sets the "active_to" field.
func (u *SubscriptionItemUpsert) SetActiveTo(v time.Time) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldActiveTo, v)
	return u
}

// UpdateActiveTo sets the "active_to" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateActiveTo() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldActiveTo)
	return u
}

// ClearActiveTo clears the value of the "active_to" field.
func (u *SubscriptionItemUpsert) ClearActiveTo() *SubscriptionItemUpsert {
	u.SetNull(subscriptionitem.FieldActiveTo)
	return u
}

// SetEntitlementID sets the "entitlement_id" field.
func (u *SubscriptionItemUpsert) SetEntitlementID(v string) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldEntitlementID, v)
	return u
}

// UpdateEntitlementID sets the "entitlement_id" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateEntitlementID() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldEntitlementID)
	return u
}

// ClearEntitlementID clears the value of the "entitlement_id" field.
func (u *SubscriptionItemUpsert) ClearEntitlementID() *SubscriptionItemUpsert {
	u.SetNull(subscriptionitem.FieldEntitlementID)
	return u
}

// SetRestartsBillingPeriod sets the "restarts_billing_period" field.
func (u *SubscriptionItemUpsert) SetRestartsBillingPeriod(v bool) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldRestartsBillingPeriod, v)
	return u
}

// UpdateRestartsBillingPeriod sets the "restarts_billing_period" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateRestartsBillingPeriod() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldRestartsBillingPeriod)
	return u
}

// ClearRestartsBillingPeriod clears the value of the "restarts_billing_period" field.
func (u *SubscriptionItemUpsert) ClearRestartsBillingPeriod() *SubscriptionItemUpsert {
	u.SetNull(subscriptionitem.FieldRestartsBillingPeriod)
	return u
}

// SetActiveFromOverrideRelativeToPhaseStart sets the "active_from_override_relative_to_phase_start" field.
func (u *SubscriptionItemUpsert) SetActiveFromOverrideRelativeToPhaseStart(v datetime.ISODurationString) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldActiveFromOverrideRelativeToPhaseStart, v)
	return u
}

// UpdateActiveFromOverrideRelativeToPhaseStart sets the "active_from_override_relative_to_phase_start" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateActiveFromOverrideRelativeToPhaseStart() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldActiveFromOverrideRelativeToPhaseStart)
	return u
}

// ClearActiveFromOverrideRelativeToPhaseStart clears the value of the "active_from_override_relative_to_phase_start" field.
func (u *SubscriptionItemUpsert) ClearActiveFromOverrideRelativeToPhaseStart() *SubscriptionItemUpsert {
	u.SetNull(subscriptionitem.FieldActiveFromOverrideRelativeToPhaseStart)
	return u
}

// SetActiveToOverrideRelativeToPhaseStart sets the "active_to_override_relative_to_phase_start" field.
func (u *SubscriptionItemUpsert) SetActiveToOverrideRelativeToPhaseStart(v datetime.ISODurationString) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldActiveToOverrideRelativeToPhaseStart, v)
	return u
}

// UpdateActiveToOverrideRelativeToPhaseStart sets the "active_to_override_relative_to_phase_start" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateActiveToOverrideRelativeToPhaseStart() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldActiveToOverrideRelativeToPhaseStart)
	return u
}

// ClearActiveToOverrideRelativeToPhaseStart clears the value of the "active_to_override_relative_to_phase_start" field.
func (u *SubscriptionItemUpsert) ClearActiveToOverrideRelativeToPhaseStart() *SubscriptionItemUpsert {
	u.SetNull(subscriptionitem.FieldActiveToOverrideRelativeToPhaseStart)
	return u
}

// SetName sets the "name" field.
func (u *SubscriptionItemUpsert) SetName(v string) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateName() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *SubscriptionItemUpsert) SetDescription(v string) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateDescription() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *SubscriptionItemUpsert) ClearDescription() *SubscriptionItemUpsert {
	u.SetNull(subscriptionitem.FieldDescription)
	return u
}

// SetFeatureKey sets the "feature_key" field.
func (u *SubscriptionItemUpsert) SetFeatureKey(v string) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldFeatureKey, v)
	return u
}

// UpdateFeatureKey sets the "feature_key" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateFeatureKey() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldFeatureKey)
	return u
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (u *SubscriptionItemUpsert) ClearFeatureKey() *SubscriptionItemUpsert {
	u.SetNull(subscriptionitem.FieldFeatureKey)
	return u
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (u *SubscriptionItemUpsert) SetEntitlementTemplate(v *productcatalog.EntitlementTemplate) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldEntitlementTemplate, v)
	return u
}

// UpdateEntitlementTemplate sets the "entitlement_template" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateEntitlementTemplate() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldEntitlementTemplate)
	return u
}

// ClearEntitlementTemplate clears the value of the "entitlement_template" field.
func (u *SubscriptionItemUpsert) ClearEntitlementTemplate() *SubscriptionItemUpsert {
	u.SetNull(subscriptionitem.FieldEntitlementTemplate)
	return u
}

// SetTaxConfig sets the "tax_config" field.
func (u *SubscriptionItemUpsert) SetTaxConfig(v *productcatalog.TaxConfig) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldTaxConfig, v)
	return u
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateTaxConfig() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldTaxConfig)
	return u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *SubscriptionItemUpsert) ClearTaxConfig() *SubscriptionItemUpsert {
	u.SetNull(subscriptionitem.FieldTaxConfig)
	return u
}

// SetBillingCadence sets the "billing_cadence" field.
func (u *SubscriptionItemUpsert) SetBillingCadence(v datetime.ISODurationString) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldBillingCadence, v)
	return u
}

// UpdateBillingCadence sets the "billing_cadence" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateBillingCadence() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldBillingCadence)
	return u
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (u *SubscriptionItemUpsert) ClearBillingCadence() *SubscriptionItemUpsert {
	u.SetNull(subscriptionitem.FieldBillingCadence)
	return u
}

// SetPrice sets the "price" field.
func (u *SubscriptionItemUpsert) SetPrice(v *productcatalog.Price) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdatePrice() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldPrice)
	return u
}

// ClearPrice clears the value of the "price" field.
func (u *SubscriptionItemUpsert) ClearPrice() *SubscriptionItemUpsert {
	u.SetNull(subscriptionitem.FieldPrice)
	return u
}

// SetDiscounts sets the "discounts" field.
func (u *SubscriptionItemUpsert) SetDiscounts(v *productcatalog.Discounts) *SubscriptionItemUpsert {
	u.Set(subscriptionitem.FieldDiscounts, v)
	return u
}

// UpdateDiscounts sets the "discounts" field to the value that was provided on create.
func (u *SubscriptionItemUpsert) UpdateDiscounts() *SubscriptionItemUpsert {
	u.SetExcluded(subscriptionitem.FieldDiscounts)
	return u
}

// ClearDiscounts clears the value of the "discounts" field.
func (u *SubscriptionItemUpsert) ClearDiscounts() *SubscriptionItemUpsert {
	u.SetNull(subscriptionitem.FieldDiscounts)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SubscriptionItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionItemUpsertOne) UpdateNewValues() *SubscriptionItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscriptionitem.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(subscriptionitem.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(subscriptionitem.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.PhaseID(); exists {
			s.SetIgnore(subscriptionitem.FieldPhaseID)
		}
		if _, exists := u.create.mutation.Key(); exists {
			s.SetIgnore(subscriptionitem.FieldKey)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionItemUpsertOne) Ignore() *SubscriptionItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionItemUpsertOne) DoNothing() *SubscriptionItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionItemCreate.OnConflict
// documentation for more info.
func (u *SubscriptionItemUpsertOne) Update(set func(*SubscriptionItemUpsert)) *SubscriptionItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionItemUpsertOne) SetUpdatedAt(v time.Time) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateUpdatedAt() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionItemUpsertOne) SetDeletedAt(v time.Time) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateDeletedAt() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionItemUpsertOne) ClearDeletedAt() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *SubscriptionItemUpsertOne) SetMetadata(v map[string]string) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateMetadata() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SubscriptionItemUpsertOne) ClearMetadata() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearMetadata()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *SubscriptionItemUpsertOne) SetAnnotations(v map[string]interface{}) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateAnnotations() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *SubscriptionItemUpsertOne) ClearAnnotations() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearAnnotations()
	})
}

// SetActiveFrom sets the "active_from" field.
func (u *SubscriptionItemUpsertOne) SetActiveFrom(v time.Time) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetActiveFrom(v)
	})
}

// UpdateActiveFrom sets the "active_from" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateActiveFrom() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateActiveFrom()
	})
}

// SetActiveTo sets the "active_to" field.
func (u *SubscriptionItemUpsertOne) SetActiveTo(v time.Time) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetActiveTo(v)
	})
}

// UpdateActiveTo sets the "active_to" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateActiveTo() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateActiveTo()
	})
}

// ClearActiveTo clears the value of the "active_to" field.
func (u *SubscriptionItemUpsertOne) ClearActiveTo() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearActiveTo()
	})
}

// SetEntitlementID sets the "entitlement_id" field.
func (u *SubscriptionItemUpsertOne) SetEntitlementID(v string) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetEntitlementID(v)
	})
}

// UpdateEntitlementID sets the "entitlement_id" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateEntitlementID() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateEntitlementID()
	})
}

// ClearEntitlementID clears the value of the "entitlement_id" field.
func (u *SubscriptionItemUpsertOne) ClearEntitlementID() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearEntitlementID()
	})
}

// SetRestartsBillingPeriod sets the "restarts_billing_period" field.
func (u *SubscriptionItemUpsertOne) SetRestartsBillingPeriod(v bool) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetRestartsBillingPeriod(v)
	})
}

// UpdateRestartsBillingPeriod sets the "restarts_billing_period" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateRestartsBillingPeriod() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateRestartsBillingPeriod()
	})
}

// ClearRestartsBillingPeriod clears the value of the "restarts_billing_period" field.
func (u *SubscriptionItemUpsertOne) ClearRestartsBillingPeriod() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearRestartsBillingPeriod()
	})
}

// SetActiveFromOverrideRelativeToPhaseStart sets the "active_from_override_relative_to_phase_start" field.
func (u *SubscriptionItemUpsertOne) SetActiveFromOverrideRelativeToPhaseStart(v datetime.ISODurationString) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetActiveFromOverrideRelativeToPhaseStart(v)
	})
}

// UpdateActiveFromOverrideRelativeToPhaseStart sets the "active_from_override_relative_to_phase_start" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateActiveFromOverrideRelativeToPhaseStart() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateActiveFromOverrideRelativeToPhaseStart()
	})
}

// ClearActiveFromOverrideRelativeToPhaseStart clears the value of the "active_from_override_relative_to_phase_start" field.
func (u *SubscriptionItemUpsertOne) ClearActiveFromOverrideRelativeToPhaseStart() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearActiveFromOverrideRelativeToPhaseStart()
	})
}

// SetActiveToOverrideRelativeToPhaseStart sets the "active_to_override_relative_to_phase_start" field.
func (u *SubscriptionItemUpsertOne) SetActiveToOverrideRelativeToPhaseStart(v datetime.ISODurationString) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetActiveToOverrideRelativeToPhaseStart(v)
	})
}

// UpdateActiveToOverrideRelativeToPhaseStart sets the "active_to_override_relative_to_phase_start" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateActiveToOverrideRelativeToPhaseStart() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateActiveToOverrideRelativeToPhaseStart()
	})
}

// ClearActiveToOverrideRelativeToPhaseStart clears the value of the "active_to_override_relative_to_phase_start" field.
func (u *SubscriptionItemUpsertOne) ClearActiveToOverrideRelativeToPhaseStart() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearActiveToOverrideRelativeToPhaseStart()
	})
}

// SetName sets the "name" field.
func (u *SubscriptionItemUpsertOne) SetName(v string) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateName() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *SubscriptionItemUpsertOne) SetDescription(v string) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateDescription() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SubscriptionItemUpsertOne) ClearDescription() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearDescription()
	})
}

// SetFeatureKey sets the "feature_key" field.
func (u *SubscriptionItemUpsertOne) SetFeatureKey(v string) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetFeatureKey(v)
	})
}

// UpdateFeatureKey sets the "feature_key" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateFeatureKey() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateFeatureKey()
	})
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (u *SubscriptionItemUpsertOne) ClearFeatureKey() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearFeatureKey()
	})
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (u *SubscriptionItemUpsertOne) SetEntitlementTemplate(v *productcatalog.EntitlementTemplate) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetEntitlementTemplate(v)
	})
}

// UpdateEntitlementTemplate sets the "entitlement_template" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateEntitlementTemplate() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateEntitlementTemplate()
	})
}

// ClearEntitlementTemplate clears the value of the "entitlement_template" field.
func (u *SubscriptionItemUpsertOne) ClearEntitlementTemplate() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearEntitlementTemplate()
	})
}

// SetTaxConfig sets the "tax_config" field.
func (u *SubscriptionItemUpsertOne) SetTaxConfig(v *productcatalog.TaxConfig) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetTaxConfig(v)
	})
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateTaxConfig() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateTaxConfig()
	})
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *SubscriptionItemUpsertOne) ClearTaxConfig() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearTaxConfig()
	})
}

// SetBillingCadence sets the "billing_cadence" field.
func (u *SubscriptionItemUpsertOne) SetBillingCadence(v datetime.ISODurationString) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetBillingCadence(v)
	})
}

// UpdateBillingCadence sets the "billing_cadence" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateBillingCadence() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateBillingCadence()
	})
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (u *SubscriptionItemUpsertOne) ClearBillingCadence() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearBillingCadence()
	})
}

// SetPrice sets the "price" field.
func (u *SubscriptionItemUpsertOne) SetPrice(v *productcatalog.Price) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdatePrice() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdatePrice()
	})
}

// ClearPrice clears the value of the "price" field.
func (u *SubscriptionItemUpsertOne) ClearPrice() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearPrice()
	})
}

// SetDiscounts sets the "discounts" field.
func (u *SubscriptionItemUpsertOne) SetDiscounts(v *productcatalog.Discounts) *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetDiscounts(v)
	})
}

// UpdateDiscounts sets the "discounts" field to the value that was provided on create.
func (u *SubscriptionItemUpsertOne) UpdateDiscounts() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateDiscounts()
	})
}

// ClearDiscounts clears the value of the "discounts" field.
func (u *SubscriptionItemUpsertOne) ClearDiscounts() *SubscriptionItemUpsertOne {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearDiscounts()
	})
}

// Exec executes the query.
func (u *SubscriptionItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionItemUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: SubscriptionItemUpsertOne.ID is not supported by MySQL driver. Use SubscriptionItemUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionItemUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionItemCreateBulk is the builder for creating many SubscriptionItem entities in bulk.
type SubscriptionItemCreateBulk struct {
	config
	err      error
	builders []*SubscriptionItemCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscriptionItem entities in the database.
func (_c *SubscriptionItemCreateBulk) Save(ctx context.Context) ([]*SubscriptionItem, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*SubscriptionItem, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SubscriptionItemCreateBulk) SaveX(ctx context.Context) []*SubscriptionItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SubscriptionItemCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SubscriptionItemCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionItemUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *SubscriptionItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionItemUpsertBulk {
	_c.conflict = opts
	return &SubscriptionItemUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SubscriptionItemCreateBulk) OnConflictColumns(columns ...string) *SubscriptionItemUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionItemUpsertBulk{
		create: _c,
	}
}

// SubscriptionItemUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscriptionItem nodes.
type SubscriptionItemUpsertBulk struct {
	create *SubscriptionItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscriptionItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionItemUpsertBulk) UpdateNewValues() *SubscriptionItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscriptionitem.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(subscriptionitem.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(subscriptionitem.FieldCreatedAt)
			}
			if _, exists := b.mutation.PhaseID(); exists {
				s.SetIgnore(subscriptionitem.FieldPhaseID)
			}
			if _, exists := b.mutation.Key(); exists {
				s.SetIgnore(subscriptionitem.FieldKey)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionItemUpsertBulk) Ignore() *SubscriptionItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionItemUpsertBulk) DoNothing() *SubscriptionItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionItemCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionItemUpsertBulk) Update(set func(*SubscriptionItemUpsert)) *SubscriptionItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionItemUpsertBulk) SetUpdatedAt(v time.Time) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateUpdatedAt() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionItemUpsertBulk) SetDeletedAt(v time.Time) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateDeletedAt() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionItemUpsertBulk) ClearDeletedAt() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *SubscriptionItemUpsertBulk) SetMetadata(v map[string]string) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateMetadata() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SubscriptionItemUpsertBulk) ClearMetadata() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearMetadata()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *SubscriptionItemUpsertBulk) SetAnnotations(v map[string]interface{}) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateAnnotations() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *SubscriptionItemUpsertBulk) ClearAnnotations() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearAnnotations()
	})
}

// SetActiveFrom sets the "active_from" field.
func (u *SubscriptionItemUpsertBulk) SetActiveFrom(v time.Time) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetActiveFrom(v)
	})
}

// UpdateActiveFrom sets the "active_from" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateActiveFrom() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateActiveFrom()
	})
}

// SetActiveTo sets the "active_to" field.
func (u *SubscriptionItemUpsertBulk) SetActiveTo(v time.Time) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetActiveTo(v)
	})
}

// UpdateActiveTo sets the "active_to" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateActiveTo() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateActiveTo()
	})
}

// ClearActiveTo clears the value of the "active_to" field.
func (u *SubscriptionItemUpsertBulk) ClearActiveTo() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearActiveTo()
	})
}

// SetEntitlementID sets the "entitlement_id" field.
func (u *SubscriptionItemUpsertBulk) SetEntitlementID(v string) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetEntitlementID(v)
	})
}

// UpdateEntitlementID sets the "entitlement_id" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateEntitlementID() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateEntitlementID()
	})
}

// ClearEntitlementID clears the value of the "entitlement_id" field.
func (u *SubscriptionItemUpsertBulk) ClearEntitlementID() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearEntitlementID()
	})
}

// SetRestartsBillingPeriod sets the "restarts_billing_period" field.
func (u *SubscriptionItemUpsertBulk) SetRestartsBillingPeriod(v bool) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetRestartsBillingPeriod(v)
	})
}

// UpdateRestartsBillingPeriod sets the "restarts_billing_period" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateRestartsBillingPeriod() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateRestartsBillingPeriod()
	})
}

// ClearRestartsBillingPeriod clears the value of the "restarts_billing_period" field.
func (u *SubscriptionItemUpsertBulk) ClearRestartsBillingPeriod() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearRestartsBillingPeriod()
	})
}

// SetActiveFromOverrideRelativeToPhaseStart sets the "active_from_override_relative_to_phase_start" field.
func (u *SubscriptionItemUpsertBulk) SetActiveFromOverrideRelativeToPhaseStart(v datetime.ISODurationString) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetActiveFromOverrideRelativeToPhaseStart(v)
	})
}

// UpdateActiveFromOverrideRelativeToPhaseStart sets the "active_from_override_relative_to_phase_start" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateActiveFromOverrideRelativeToPhaseStart() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateActiveFromOverrideRelativeToPhaseStart()
	})
}

// ClearActiveFromOverrideRelativeToPhaseStart clears the value of the "active_from_override_relative_to_phase_start" field.
func (u *SubscriptionItemUpsertBulk) ClearActiveFromOverrideRelativeToPhaseStart() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearActiveFromOverrideRelativeToPhaseStart()
	})
}

// SetActiveToOverrideRelativeToPhaseStart sets the "active_to_override_relative_to_phase_start" field.
func (u *SubscriptionItemUpsertBulk) SetActiveToOverrideRelativeToPhaseStart(v datetime.ISODurationString) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetActiveToOverrideRelativeToPhaseStart(v)
	})
}

// UpdateActiveToOverrideRelativeToPhaseStart sets the "active_to_override_relative_to_phase_start" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateActiveToOverrideRelativeToPhaseStart() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateActiveToOverrideRelativeToPhaseStart()
	})
}

// ClearActiveToOverrideRelativeToPhaseStart clears the value of the "active_to_override_relative_to_phase_start" field.
func (u *SubscriptionItemUpsertBulk) ClearActiveToOverrideRelativeToPhaseStart() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearActiveToOverrideRelativeToPhaseStart()
	})
}

// SetName sets the "name" field.
func (u *SubscriptionItemUpsertBulk) SetName(v string) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateName() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *SubscriptionItemUpsertBulk) SetDescription(v string) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateDescription() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SubscriptionItemUpsertBulk) ClearDescription() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearDescription()
	})
}

// SetFeatureKey sets the "feature_key" field.
func (u *SubscriptionItemUpsertBulk) SetFeatureKey(v string) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetFeatureKey(v)
	})
}

// UpdateFeatureKey sets the "feature_key" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateFeatureKey() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateFeatureKey()
	})
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (u *SubscriptionItemUpsertBulk) ClearFeatureKey() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearFeatureKey()
	})
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (u *SubscriptionItemUpsertBulk) SetEntitlementTemplate(v *productcatalog.EntitlementTemplate) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetEntitlementTemplate(v)
	})
}

// UpdateEntitlementTemplate sets the "entitlement_template" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateEntitlementTemplate() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateEntitlementTemplate()
	})
}

// ClearEntitlementTemplate clears the value of the "entitlement_template" field.
func (u *SubscriptionItemUpsertBulk) ClearEntitlementTemplate() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearEntitlementTemplate()
	})
}

// SetTaxConfig sets the "tax_config" field.
func (u *SubscriptionItemUpsertBulk) SetTaxConfig(v *productcatalog.TaxConfig) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetTaxConfig(v)
	})
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateTaxConfig() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateTaxConfig()
	})
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *SubscriptionItemUpsertBulk) ClearTaxConfig() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearTaxConfig()
	})
}

// SetBillingCadence sets the "billing_cadence" field.
func (u *SubscriptionItemUpsertBulk) SetBillingCadence(v datetime.ISODurationString) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetBillingCadence(v)
	})
}

// UpdateBillingCadence sets the "billing_cadence" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateBillingCadence() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateBillingCadence()
	})
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (u *SubscriptionItemUpsertBulk) ClearBillingCadence() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearBillingCadence()
	})
}

// SetPrice sets the "price" field.
func (u *SubscriptionItemUpsertBulk) SetPrice(v *productcatalog.Price) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdatePrice() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdatePrice()
	})
}

// ClearPrice clears the value of the "price" field.
func (u *SubscriptionItemUpsertBulk) ClearPrice() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearPrice()
	})
}

// SetDiscounts sets the "discounts" field.
func (u *SubscriptionItemUpsertBulk) SetDiscounts(v *productcatalog.Discounts) *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.SetDiscounts(v)
	})
}

// UpdateDiscounts sets the "discounts" field to the value that was provided on create.
func (u *SubscriptionItemUpsertBulk) UpdateDiscounts() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.UpdateDiscounts()
	})
}

// ClearDiscounts clears the value of the "discounts" field.
func (u *SubscriptionItemUpsertBulk) ClearDiscounts() *SubscriptionItemUpsertBulk {
	return u.Update(func(s *SubscriptionItemUpsert) {
		s.ClearDiscounts()
	})
}

// Exec executes the query.
func (u *SubscriptionItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the SubscriptionItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
