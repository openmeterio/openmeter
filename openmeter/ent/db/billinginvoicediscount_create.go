// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicediscount"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
)

// BillingInvoiceDiscountCreate is the builder for creating a BillingInvoiceDiscount entity.
type BillingInvoiceDiscountCreate struct {
	config
	mutation *BillingInvoiceDiscountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (bidc *BillingInvoiceDiscountCreate) SetNamespace(s string) *BillingInvoiceDiscountCreate {
	bidc.mutation.SetNamespace(s)
	return bidc
}

// SetMetadata sets the "metadata" field.
func (bidc *BillingInvoiceDiscountCreate) SetMetadata(m map[string]string) *BillingInvoiceDiscountCreate {
	bidc.mutation.SetMetadata(m)
	return bidc
}

// SetCreatedAt sets the "created_at" field.
func (bidc *BillingInvoiceDiscountCreate) SetCreatedAt(t time.Time) *BillingInvoiceDiscountCreate {
	bidc.mutation.SetCreatedAt(t)
	return bidc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bidc *BillingInvoiceDiscountCreate) SetNillableCreatedAt(t *time.Time) *BillingInvoiceDiscountCreate {
	if t != nil {
		bidc.SetCreatedAt(*t)
	}
	return bidc
}

// SetUpdatedAt sets the "updated_at" field.
func (bidc *BillingInvoiceDiscountCreate) SetUpdatedAt(t time.Time) *BillingInvoiceDiscountCreate {
	bidc.mutation.SetUpdatedAt(t)
	return bidc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bidc *BillingInvoiceDiscountCreate) SetNillableUpdatedAt(t *time.Time) *BillingInvoiceDiscountCreate {
	if t != nil {
		bidc.SetUpdatedAt(*t)
	}
	return bidc
}

// SetDeletedAt sets the "deleted_at" field.
func (bidc *BillingInvoiceDiscountCreate) SetDeletedAt(t time.Time) *BillingInvoiceDiscountCreate {
	bidc.mutation.SetDeletedAt(t)
	return bidc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bidc *BillingInvoiceDiscountCreate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceDiscountCreate {
	if t != nil {
		bidc.SetDeletedAt(*t)
	}
	return bidc
}

// SetName sets the "name" field.
func (bidc *BillingInvoiceDiscountCreate) SetName(s string) *BillingInvoiceDiscountCreate {
	bidc.mutation.SetName(s)
	return bidc
}

// SetDescription sets the "description" field.
func (bidc *BillingInvoiceDiscountCreate) SetDescription(s string) *BillingInvoiceDiscountCreate {
	bidc.mutation.SetDescription(s)
	return bidc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bidc *BillingInvoiceDiscountCreate) SetNillableDescription(s *string) *BillingInvoiceDiscountCreate {
	if s != nil {
		bidc.SetDescription(*s)
	}
	return bidc
}

// SetInvoiceID sets the "invoice_id" field.
func (bidc *BillingInvoiceDiscountCreate) SetInvoiceID(s string) *BillingInvoiceDiscountCreate {
	bidc.mutation.SetInvoiceID(s)
	return bidc
}

// SetType sets the "type" field.
func (bidc *BillingInvoiceDiscountCreate) SetType(bdt billing.InvoiceDiscountType) *BillingInvoiceDiscountCreate {
	bidc.mutation.SetType(bdt)
	return bidc
}

// SetAmount sets the "amount" field.
func (bidc *BillingInvoiceDiscountCreate) SetAmount(a alpacadecimal.Decimal) *BillingInvoiceDiscountCreate {
	bidc.mutation.SetAmount(a)
	return bidc
}

// SetLineIds sets the "line_ids" field.
func (bidc *BillingInvoiceDiscountCreate) SetLineIds(s []string) *BillingInvoiceDiscountCreate {
	bidc.mutation.SetLineIds(s)
	return bidc
}

// SetID sets the "id" field.
func (bidc *BillingInvoiceDiscountCreate) SetID(s string) *BillingInvoiceDiscountCreate {
	bidc.mutation.SetID(s)
	return bidc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bidc *BillingInvoiceDiscountCreate) SetNillableID(s *string) *BillingInvoiceDiscountCreate {
	if s != nil {
		bidc.SetID(*s)
	}
	return bidc
}

// SetInvoice sets the "invoice" edge to the BillingInvoice entity.
func (bidc *BillingInvoiceDiscountCreate) SetInvoice(b *BillingInvoice) *BillingInvoiceDiscountCreate {
	return bidc.SetInvoiceID(b.ID)
}

// AddLineIDs adds the "lines" edge to the BillingInvoiceLine entity by IDs.
func (bidc *BillingInvoiceDiscountCreate) AddLineIDs(ids ...string) *BillingInvoiceDiscountCreate {
	bidc.mutation.AddLineIDs(ids...)
	return bidc
}

// AddLines adds the "lines" edges to the BillingInvoiceLine entity.
func (bidc *BillingInvoiceDiscountCreate) AddLines(b ...*BillingInvoiceLine) *BillingInvoiceDiscountCreate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bidc.AddLineIDs(ids...)
}

// Mutation returns the BillingInvoiceDiscountMutation object of the builder.
func (bidc *BillingInvoiceDiscountCreate) Mutation() *BillingInvoiceDiscountMutation {
	return bidc.mutation
}

// Save creates the BillingInvoiceDiscount in the database.
func (bidc *BillingInvoiceDiscountCreate) Save(ctx context.Context) (*BillingInvoiceDiscount, error) {
	bidc.defaults()
	return withHooks(ctx, bidc.sqlSave, bidc.mutation, bidc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bidc *BillingInvoiceDiscountCreate) SaveX(ctx context.Context) *BillingInvoiceDiscount {
	v, err := bidc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bidc *BillingInvoiceDiscountCreate) Exec(ctx context.Context) error {
	_, err := bidc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bidc *BillingInvoiceDiscountCreate) ExecX(ctx context.Context) {
	if err := bidc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bidc *BillingInvoiceDiscountCreate) defaults() {
	if _, ok := bidc.mutation.CreatedAt(); !ok {
		v := billinginvoicediscount.DefaultCreatedAt()
		bidc.mutation.SetCreatedAt(v)
	}
	if _, ok := bidc.mutation.UpdatedAt(); !ok {
		v := billinginvoicediscount.DefaultUpdatedAt()
		bidc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bidc.mutation.ID(); !ok {
		v := billinginvoicediscount.DefaultID()
		bidc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bidc *BillingInvoiceDiscountCreate) check() error {
	if _, ok := bidc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingInvoiceDiscount.namespace"`)}
	}
	if v, ok := bidc.mutation.Namespace(); ok {
		if err := billinginvoicediscount.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceDiscount.namespace": %w`, err)}
		}
	}
	if _, ok := bidc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingInvoiceDiscount.created_at"`)}
	}
	if _, ok := bidc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingInvoiceDiscount.updated_at"`)}
	}
	if _, ok := bidc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "BillingInvoiceDiscount.name"`)}
	}
	if _, ok := bidc.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice_id", err: errors.New(`db: missing required field "BillingInvoiceDiscount.invoice_id"`)}
	}
	if _, ok := bidc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "BillingInvoiceDiscount.type"`)}
	}
	if v, ok := bidc.mutation.GetType(); ok {
		if err := billinginvoicediscount.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceDiscount.type": %w`, err)}
		}
	}
	if _, ok := bidc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`db: missing required field "BillingInvoiceDiscount.amount"`)}
	}
	if len(bidc.mutation.InvoiceIDs()) == 0 {
		return &ValidationError{Name: "invoice", err: errors.New(`db: missing required edge "BillingInvoiceDiscount.invoice"`)}
	}
	return nil
}

func (bidc *BillingInvoiceDiscountCreate) sqlSave(ctx context.Context) (*BillingInvoiceDiscount, error) {
	if err := bidc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bidc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bidc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingInvoiceDiscount.ID type: %T", _spec.ID.Value)
		}
	}
	bidc.mutation.id = &_node.ID
	bidc.mutation.done = true
	return _node, nil
}

func (bidc *BillingInvoiceDiscountCreate) createSpec() (*BillingInvoiceDiscount, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingInvoiceDiscount{config: bidc.config}
		_spec = sqlgraph.NewCreateSpec(billinginvoicediscount.Table, sqlgraph.NewFieldSpec(billinginvoicediscount.FieldID, field.TypeString))
	)
	_spec.OnConflict = bidc.conflict
	if id, ok := bidc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bidc.mutation.Namespace(); ok {
		_spec.SetField(billinginvoicediscount.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := bidc.mutation.Metadata(); ok {
		_spec.SetField(billinginvoicediscount.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := bidc.mutation.CreatedAt(); ok {
		_spec.SetField(billinginvoicediscount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bidc.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicediscount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bidc.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicediscount.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bidc.mutation.Name(); ok {
		_spec.SetField(billinginvoicediscount.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bidc.mutation.Description(); ok {
		_spec.SetField(billinginvoicediscount.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := bidc.mutation.GetType(); ok {
		_spec.SetField(billinginvoicediscount.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := bidc.mutation.Amount(); ok {
		_spec.SetField(billinginvoicediscount.FieldAmount, field.TypeOther, value)
		_node.Amount = value
	}
	if value, ok := bidc.mutation.LineIds(); ok {
		_spec.SetField(billinginvoicediscount.FieldLineIds, field.TypeJSON, value)
		_node.LineIds = value
	}
	if nodes := bidc.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicediscount.InvoiceTable,
			Columns: []string{billinginvoicediscount.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InvoiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bidc.mutation.LinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicediscount.LinesTable,
			Columns: []string{billinginvoicediscount.LinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceDiscount.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceDiscountUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bidc *BillingInvoiceDiscountCreate) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceDiscountUpsertOne {
	bidc.conflict = opts
	return &BillingInvoiceDiscountUpsertOne{
		create: bidc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceDiscount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bidc *BillingInvoiceDiscountCreate) OnConflictColumns(columns ...string) *BillingInvoiceDiscountUpsertOne {
	bidc.conflict = append(bidc.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceDiscountUpsertOne{
		create: bidc,
	}
}

type (
	// BillingInvoiceDiscountUpsertOne is the builder for "upsert"-ing
	//  one BillingInvoiceDiscount node.
	BillingInvoiceDiscountUpsertOne struct {
		create *BillingInvoiceDiscountCreate
	}

	// BillingInvoiceDiscountUpsert is the "OnConflict" setter.
	BillingInvoiceDiscountUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceDiscountUpsert) SetMetadata(v map[string]string) *BillingInvoiceDiscountUpsert {
	u.Set(billinginvoicediscount.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsert) UpdateMetadata() *BillingInvoiceDiscountUpsert {
	u.SetExcluded(billinginvoicediscount.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceDiscountUpsert) ClearMetadata() *BillingInvoiceDiscountUpsert {
	u.SetNull(billinginvoicediscount.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceDiscountUpsert) SetUpdatedAt(v time.Time) *BillingInvoiceDiscountUpsert {
	u.Set(billinginvoicediscount.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsert) UpdateUpdatedAt() *BillingInvoiceDiscountUpsert {
	u.SetExcluded(billinginvoicediscount.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceDiscountUpsert) SetDeletedAt(v time.Time) *BillingInvoiceDiscountUpsert {
	u.Set(billinginvoicediscount.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsert) UpdateDeletedAt() *BillingInvoiceDiscountUpsert {
	u.SetExcluded(billinginvoicediscount.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceDiscountUpsert) ClearDeletedAt() *BillingInvoiceDiscountUpsert {
	u.SetNull(billinginvoicediscount.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *BillingInvoiceDiscountUpsert) SetName(v string) *BillingInvoiceDiscountUpsert {
	u.Set(billinginvoicediscount.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsert) UpdateName() *BillingInvoiceDiscountUpsert {
	u.SetExcluded(billinginvoicediscount.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceDiscountUpsert) SetDescription(v string) *BillingInvoiceDiscountUpsert {
	u.Set(billinginvoicediscount.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsert) UpdateDescription() *BillingInvoiceDiscountUpsert {
	u.SetExcluded(billinginvoicediscount.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceDiscountUpsert) ClearDescription() *BillingInvoiceDiscountUpsert {
	u.SetNull(billinginvoicediscount.FieldDescription)
	return u
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceDiscountUpsert) SetInvoiceID(v string) *BillingInvoiceDiscountUpsert {
	u.Set(billinginvoicediscount.FieldInvoiceID, v)
	return u
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsert) UpdateInvoiceID() *BillingInvoiceDiscountUpsert {
	u.SetExcluded(billinginvoicediscount.FieldInvoiceID)
	return u
}

// SetType sets the "type" field.
func (u *BillingInvoiceDiscountUpsert) SetType(v billing.InvoiceDiscountType) *BillingInvoiceDiscountUpsert {
	u.Set(billinginvoicediscount.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsert) UpdateType() *BillingInvoiceDiscountUpsert {
	u.SetExcluded(billinginvoicediscount.FieldType)
	return u
}

// SetAmount sets the "amount" field.
func (u *BillingInvoiceDiscountUpsert) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceDiscountUpsert {
	u.Set(billinginvoicediscount.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsert) UpdateAmount() *BillingInvoiceDiscountUpsert {
	u.SetExcluded(billinginvoicediscount.FieldAmount)
	return u
}

// SetLineIds sets the "line_ids" field.
func (u *BillingInvoiceDiscountUpsert) SetLineIds(v []string) *BillingInvoiceDiscountUpsert {
	u.Set(billinginvoicediscount.FieldLineIds, v)
	return u
}

// UpdateLineIds sets the "line_ids" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsert) UpdateLineIds() *BillingInvoiceDiscountUpsert {
	u.SetExcluded(billinginvoicediscount.FieldLineIds)
	return u
}

// ClearLineIds clears the value of the "line_ids" field.
func (u *BillingInvoiceDiscountUpsert) ClearLineIds() *BillingInvoiceDiscountUpsert {
	u.SetNull(billinginvoicediscount.FieldLineIds)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceDiscount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoicediscount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceDiscountUpsertOne) UpdateNewValues() *BillingInvoiceDiscountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billinginvoicediscount.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billinginvoicediscount.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billinginvoicediscount.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceDiscount.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingInvoiceDiscountUpsertOne) Ignore() *BillingInvoiceDiscountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceDiscountUpsertOne) DoNothing() *BillingInvoiceDiscountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceDiscountCreate.OnConflict
// documentation for more info.
func (u *BillingInvoiceDiscountUpsertOne) Update(set func(*BillingInvoiceDiscountUpsert)) *BillingInvoiceDiscountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceDiscountUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceDiscountUpsertOne) SetMetadata(v map[string]string) *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertOne) UpdateMetadata() *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceDiscountUpsertOne) ClearMetadata() *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceDiscountUpsertOne) SetUpdatedAt(v time.Time) *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertOne) UpdateUpdatedAt() *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceDiscountUpsertOne) SetDeletedAt(v time.Time) *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertOne) UpdateDeletedAt() *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceDiscountUpsertOne) ClearDeletedAt() *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *BillingInvoiceDiscountUpsertOne) SetName(v string) *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertOne) UpdateName() *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceDiscountUpsertOne) SetDescription(v string) *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertOne) UpdateDescription() *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceDiscountUpsertOne) ClearDescription() *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.ClearDescription()
	})
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceDiscountUpsertOne) SetInvoiceID(v string) *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetInvoiceID(v)
	})
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertOne) UpdateInvoiceID() *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateInvoiceID()
	})
}

// SetType sets the "type" field.
func (u *BillingInvoiceDiscountUpsertOne) SetType(v billing.InvoiceDiscountType) *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertOne) UpdateType() *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateType()
	})
}

// SetAmount sets the "amount" field.
func (u *BillingInvoiceDiscountUpsertOne) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertOne) UpdateAmount() *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateAmount()
	})
}

// SetLineIds sets the "line_ids" field.
func (u *BillingInvoiceDiscountUpsertOne) SetLineIds(v []string) *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetLineIds(v)
	})
}

// UpdateLineIds sets the "line_ids" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertOne) UpdateLineIds() *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateLineIds()
	})
}

// ClearLineIds clears the value of the "line_ids" field.
func (u *BillingInvoiceDiscountUpsertOne) ClearLineIds() *BillingInvoiceDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.ClearLineIds()
	})
}

// Exec executes the query.
func (u *BillingInvoiceDiscountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceDiscountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceDiscountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingInvoiceDiscountUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingInvoiceDiscountUpsertOne.ID is not supported by MySQL driver. Use BillingInvoiceDiscountUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingInvoiceDiscountUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingInvoiceDiscountCreateBulk is the builder for creating many BillingInvoiceDiscount entities in bulk.
type BillingInvoiceDiscountCreateBulk struct {
	config
	err      error
	builders []*BillingInvoiceDiscountCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingInvoiceDiscount entities in the database.
func (bidcb *BillingInvoiceDiscountCreateBulk) Save(ctx context.Context) ([]*BillingInvoiceDiscount, error) {
	if bidcb.err != nil {
		return nil, bidcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bidcb.builders))
	nodes := make([]*BillingInvoiceDiscount, len(bidcb.builders))
	mutators := make([]Mutator, len(bidcb.builders))
	for i := range bidcb.builders {
		func(i int, root context.Context) {
			builder := bidcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingInvoiceDiscountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bidcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bidcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bidcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bidcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bidcb *BillingInvoiceDiscountCreateBulk) SaveX(ctx context.Context) []*BillingInvoiceDiscount {
	v, err := bidcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bidcb *BillingInvoiceDiscountCreateBulk) Exec(ctx context.Context) error {
	_, err := bidcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bidcb *BillingInvoiceDiscountCreateBulk) ExecX(ctx context.Context) {
	if err := bidcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceDiscount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceDiscountUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bidcb *BillingInvoiceDiscountCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceDiscountUpsertBulk {
	bidcb.conflict = opts
	return &BillingInvoiceDiscountUpsertBulk{
		create: bidcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceDiscount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bidcb *BillingInvoiceDiscountCreateBulk) OnConflictColumns(columns ...string) *BillingInvoiceDiscountUpsertBulk {
	bidcb.conflict = append(bidcb.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceDiscountUpsertBulk{
		create: bidcb,
	}
}

// BillingInvoiceDiscountUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingInvoiceDiscount nodes.
type BillingInvoiceDiscountUpsertBulk struct {
	create *BillingInvoiceDiscountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingInvoiceDiscount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoicediscount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceDiscountUpsertBulk) UpdateNewValues() *BillingInvoiceDiscountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billinginvoicediscount.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billinginvoicediscount.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billinginvoicediscount.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceDiscount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingInvoiceDiscountUpsertBulk) Ignore() *BillingInvoiceDiscountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceDiscountUpsertBulk) DoNothing() *BillingInvoiceDiscountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceDiscountCreateBulk.OnConflict
// documentation for more info.
func (u *BillingInvoiceDiscountUpsertBulk) Update(set func(*BillingInvoiceDiscountUpsert)) *BillingInvoiceDiscountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceDiscountUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceDiscountUpsertBulk) SetMetadata(v map[string]string) *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertBulk) UpdateMetadata() *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceDiscountUpsertBulk) ClearMetadata() *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceDiscountUpsertBulk) SetUpdatedAt(v time.Time) *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertBulk) UpdateUpdatedAt() *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceDiscountUpsertBulk) SetDeletedAt(v time.Time) *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertBulk) UpdateDeletedAt() *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceDiscountUpsertBulk) ClearDeletedAt() *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *BillingInvoiceDiscountUpsertBulk) SetName(v string) *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertBulk) UpdateName() *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceDiscountUpsertBulk) SetDescription(v string) *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertBulk) UpdateDescription() *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceDiscountUpsertBulk) ClearDescription() *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.ClearDescription()
	})
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceDiscountUpsertBulk) SetInvoiceID(v string) *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetInvoiceID(v)
	})
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertBulk) UpdateInvoiceID() *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateInvoiceID()
	})
}

// SetType sets the "type" field.
func (u *BillingInvoiceDiscountUpsertBulk) SetType(v billing.InvoiceDiscountType) *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertBulk) UpdateType() *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateType()
	})
}

// SetAmount sets the "amount" field.
func (u *BillingInvoiceDiscountUpsertBulk) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertBulk) UpdateAmount() *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateAmount()
	})
}

// SetLineIds sets the "line_ids" field.
func (u *BillingInvoiceDiscountUpsertBulk) SetLineIds(v []string) *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.SetLineIds(v)
	})
}

// UpdateLineIds sets the "line_ids" field to the value that was provided on create.
func (u *BillingInvoiceDiscountUpsertBulk) UpdateLineIds() *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.UpdateLineIds()
	})
}

// ClearLineIds clears the value of the "line_ids" field.
func (u *BillingInvoiceDiscountUpsertBulk) ClearLineIds() *BillingInvoiceDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceDiscountUpsert) {
		s.ClearLineIds()
	})
}

// Exec executes the query.
func (u *BillingInvoiceDiscountUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingInvoiceDiscountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceDiscountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceDiscountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
