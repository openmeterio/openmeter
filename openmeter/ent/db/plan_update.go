// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/plan"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planaddon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planphase"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
)

// PlanUpdate is the builder for updating Plan entities.
type PlanUpdate struct {
	config
	hooks    []Hook
	mutation *PlanMutation
}

// Where appends a list predicates to the PlanUpdate builder.
func (_u *PlanUpdate) Where(ps ...predicate.Plan) *PlanUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *PlanUpdate) SetMetadata(v map[string]string) *PlanUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *PlanUpdate) ClearMetadata() *PlanUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PlanUpdate) SetUpdatedAt(v time.Time) *PlanUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *PlanUpdate) SetDeletedAt(v time.Time) *PlanUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *PlanUpdate) SetNillableDeletedAt(v *time.Time) *PlanUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *PlanUpdate) ClearDeletedAt() *PlanUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *PlanUpdate) SetName(v string) *PlanUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PlanUpdate) SetNillableName(v *string) *PlanUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *PlanUpdate) SetDescription(v string) *PlanUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *PlanUpdate) SetNillableDescription(v *string) *PlanUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *PlanUpdate) ClearDescription() *PlanUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetBillablesMustAlign sets the "billables_must_align" field.
func (_u *PlanUpdate) SetBillablesMustAlign(v bool) *PlanUpdate {
	_u.mutation.SetBillablesMustAlign(v)
	return _u
}

// SetNillableBillablesMustAlign sets the "billables_must_align" field if the given value is not nil.
func (_u *PlanUpdate) SetNillableBillablesMustAlign(v *bool) *PlanUpdate {
	if v != nil {
		_u.SetBillablesMustAlign(*v)
	}
	return _u
}

// SetVersion sets the "version" field.
func (_u *PlanUpdate) SetVersion(v int) *PlanUpdate {
	_u.mutation.ResetVersion()
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *PlanUpdate) SetNillableVersion(v *int) *PlanUpdate {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// AddVersion adds value to the "version" field.
func (_u *PlanUpdate) AddVersion(v int) *PlanUpdate {
	_u.mutation.AddVersion(v)
	return _u
}

// SetEffectiveFrom sets the "effective_from" field.
func (_u *PlanUpdate) SetEffectiveFrom(v time.Time) *PlanUpdate {
	_u.mutation.SetEffectiveFrom(v)
	return _u
}

// SetNillableEffectiveFrom sets the "effective_from" field if the given value is not nil.
func (_u *PlanUpdate) SetNillableEffectiveFrom(v *time.Time) *PlanUpdate {
	if v != nil {
		_u.SetEffectiveFrom(*v)
	}
	return _u
}

// ClearEffectiveFrom clears the value of the "effective_from" field.
func (_u *PlanUpdate) ClearEffectiveFrom() *PlanUpdate {
	_u.mutation.ClearEffectiveFrom()
	return _u
}

// SetEffectiveTo sets the "effective_to" field.
func (_u *PlanUpdate) SetEffectiveTo(v time.Time) *PlanUpdate {
	_u.mutation.SetEffectiveTo(v)
	return _u
}

// SetNillableEffectiveTo sets the "effective_to" field if the given value is not nil.
func (_u *PlanUpdate) SetNillableEffectiveTo(v *time.Time) *PlanUpdate {
	if v != nil {
		_u.SetEffectiveTo(*v)
	}
	return _u
}

// ClearEffectiveTo clears the value of the "effective_to" field.
func (_u *PlanUpdate) ClearEffectiveTo() *PlanUpdate {
	_u.mutation.ClearEffectiveTo()
	return _u
}

// SetIsCustom sets the "is_custom" field.
func (_u *PlanUpdate) SetIsCustom(v bool) *PlanUpdate {
	_u.mutation.SetIsCustom(v)
	return _u
}

// SetNillableIsCustom sets the "is_custom" field if the given value is not nil.
func (_u *PlanUpdate) SetNillableIsCustom(v *bool) *PlanUpdate {
	if v != nil {
		_u.SetIsCustom(*v)
	}
	return _u
}

// AddPhaseIDs adds the "phases" edge to the PlanPhase entity by IDs.
func (_u *PlanUpdate) AddPhaseIDs(ids ...string) *PlanUpdate {
	_u.mutation.AddPhaseIDs(ids...)
	return _u
}

// AddPhases adds the "phases" edges to the PlanPhase entity.
func (_u *PlanUpdate) AddPhases(v ...*PlanPhase) *PlanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPhaseIDs(ids...)
}

// AddAddonIDs adds the "addons" edge to the PlanAddon entity by IDs.
func (_u *PlanUpdate) AddAddonIDs(ids ...string) *PlanUpdate {
	_u.mutation.AddAddonIDs(ids...)
	return _u
}

// AddAddons adds the "addons" edges to the PlanAddon entity.
func (_u *PlanUpdate) AddAddons(v ...*PlanAddon) *PlanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAddonIDs(ids...)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (_u *PlanUpdate) AddSubscriptionIDs(ids ...string) *PlanUpdate {
	_u.mutation.AddSubscriptionIDs(ids...)
	return _u
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (_u *PlanUpdate) AddSubscriptions(v ...*Subscription) *PlanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubscriptionIDs(ids...)
}

// Mutation returns the PlanMutation object of the builder.
func (_u *PlanUpdate) Mutation() *PlanMutation {
	return _u.mutation
}

// ClearPhases clears all "phases" edges to the PlanPhase entity.
func (_u *PlanUpdate) ClearPhases() *PlanUpdate {
	_u.mutation.ClearPhases()
	return _u
}

// RemovePhaseIDs removes the "phases" edge to PlanPhase entities by IDs.
func (_u *PlanUpdate) RemovePhaseIDs(ids ...string) *PlanUpdate {
	_u.mutation.RemovePhaseIDs(ids...)
	return _u
}

// RemovePhases removes "phases" edges to PlanPhase entities.
func (_u *PlanUpdate) RemovePhases(v ...*PlanPhase) *PlanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePhaseIDs(ids...)
}

// ClearAddons clears all "addons" edges to the PlanAddon entity.
func (_u *PlanUpdate) ClearAddons() *PlanUpdate {
	_u.mutation.ClearAddons()
	return _u
}

// RemoveAddonIDs removes the "addons" edge to PlanAddon entities by IDs.
func (_u *PlanUpdate) RemoveAddonIDs(ids ...string) *PlanUpdate {
	_u.mutation.RemoveAddonIDs(ids...)
	return _u
}

// RemoveAddons removes "addons" edges to PlanAddon entities.
func (_u *PlanUpdate) RemoveAddons(v ...*PlanAddon) *PlanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAddonIDs(ids...)
}

// ClearSubscriptions clears all "subscriptions" edges to the Subscription entity.
func (_u *PlanUpdate) ClearSubscriptions() *PlanUpdate {
	_u.mutation.ClearSubscriptions()
	return _u
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to Subscription entities by IDs.
func (_u *PlanUpdate) RemoveSubscriptionIDs(ids ...string) *PlanUpdate {
	_u.mutation.RemoveSubscriptionIDs(ids...)
	return _u
}

// RemoveSubscriptions removes "subscriptions" edges to Subscription entities.
func (_u *PlanUpdate) RemoveSubscriptions(v ...*Subscription) *PlanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubscriptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PlanUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PlanUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PlanUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PlanUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PlanUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := plan.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PlanUpdate) check() error {
	if v, ok := _u.mutation.Version(); ok {
		if err := plan.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`db: validator failed for field "Plan.version": %w`, err)}
		}
	}
	return nil
}

func (_u *PlanUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(plan.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(plan.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(plan.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(plan.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(plan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(plan.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(plan.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.BillablesMustAlign(); ok {
		_spec.SetField(plan.FieldBillablesMustAlign, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(plan.FieldVersion, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedVersion(); ok {
		_spec.AddField(plan.FieldVersion, field.TypeInt, value)
	}
	if value, ok := _u.mutation.EffectiveFrom(); ok {
		_spec.SetField(plan.FieldEffectiveFrom, field.TypeTime, value)
	}
	if _u.mutation.EffectiveFromCleared() {
		_spec.ClearField(plan.FieldEffectiveFrom, field.TypeTime)
	}
	if value, ok := _u.mutation.EffectiveTo(); ok {
		_spec.SetField(plan.FieldEffectiveTo, field.TypeTime, value)
	}
	if _u.mutation.EffectiveToCleared() {
		_spec.ClearField(plan.FieldEffectiveTo, field.TypeTime)
	}
	if value, ok := _u.mutation.IsCustom(); ok {
		_spec.SetField(plan.FieldIsCustom, field.TypeBool, value)
	}
	if _u.mutation.PhasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PhasesTable,
			Columns: []string{plan.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planphase.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPhasesIDs(); len(nodes) > 0 && !_u.mutation.PhasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PhasesTable,
			Columns: []string{plan.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PhasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PhasesTable,
			Columns: []string{plan.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AddonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.AddonsTable,
			Columns: []string{plan.AddonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planaddon.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAddonsIDs(); len(nodes) > 0 && !_u.mutation.AddonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.AddonsTable,
			Columns: []string{plan.AddonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planaddon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AddonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.AddonsTable,
			Columns: []string{plan.AddonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planaddon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.SubscriptionsTable,
			Columns: []string{plan.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !_u.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.SubscriptionsTable,
			Columns: []string{plan.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.SubscriptionsTable,
			Columns: []string{plan.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PlanUpdateOne is the builder for updating a single Plan entity.
type PlanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlanMutation
}

// SetMetadata sets the "metadata" field.
func (_u *PlanUpdateOne) SetMetadata(v map[string]string) *PlanUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *PlanUpdateOne) ClearMetadata() *PlanUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PlanUpdateOne) SetUpdatedAt(v time.Time) *PlanUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *PlanUpdateOne) SetDeletedAt(v time.Time) *PlanUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *PlanUpdateOne) SetNillableDeletedAt(v *time.Time) *PlanUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *PlanUpdateOne) ClearDeletedAt() *PlanUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *PlanUpdateOne) SetName(v string) *PlanUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PlanUpdateOne) SetNillableName(v *string) *PlanUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *PlanUpdateOne) SetDescription(v string) *PlanUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *PlanUpdateOne) SetNillableDescription(v *string) *PlanUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *PlanUpdateOne) ClearDescription() *PlanUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetBillablesMustAlign sets the "billables_must_align" field.
func (_u *PlanUpdateOne) SetBillablesMustAlign(v bool) *PlanUpdateOne {
	_u.mutation.SetBillablesMustAlign(v)
	return _u
}

// SetNillableBillablesMustAlign sets the "billables_must_align" field if the given value is not nil.
func (_u *PlanUpdateOne) SetNillableBillablesMustAlign(v *bool) *PlanUpdateOne {
	if v != nil {
		_u.SetBillablesMustAlign(*v)
	}
	return _u
}

// SetVersion sets the "version" field.
func (_u *PlanUpdateOne) SetVersion(v int) *PlanUpdateOne {
	_u.mutation.ResetVersion()
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *PlanUpdateOne) SetNillableVersion(v *int) *PlanUpdateOne {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// AddVersion adds value to the "version" field.
func (_u *PlanUpdateOne) AddVersion(v int) *PlanUpdateOne {
	_u.mutation.AddVersion(v)
	return _u
}

// SetEffectiveFrom sets the "effective_from" field.
func (_u *PlanUpdateOne) SetEffectiveFrom(v time.Time) *PlanUpdateOne {
	_u.mutation.SetEffectiveFrom(v)
	return _u
}

// SetNillableEffectiveFrom sets the "effective_from" field if the given value is not nil.
func (_u *PlanUpdateOne) SetNillableEffectiveFrom(v *time.Time) *PlanUpdateOne {
	if v != nil {
		_u.SetEffectiveFrom(*v)
	}
	return _u
}

// ClearEffectiveFrom clears the value of the "effective_from" field.
func (_u *PlanUpdateOne) ClearEffectiveFrom() *PlanUpdateOne {
	_u.mutation.ClearEffectiveFrom()
	return _u
}

// SetEffectiveTo sets the "effective_to" field.
func (_u *PlanUpdateOne) SetEffectiveTo(v time.Time) *PlanUpdateOne {
	_u.mutation.SetEffectiveTo(v)
	return _u
}

// SetNillableEffectiveTo sets the "effective_to" field if the given value is not nil.
func (_u *PlanUpdateOne) SetNillableEffectiveTo(v *time.Time) *PlanUpdateOne {
	if v != nil {
		_u.SetEffectiveTo(*v)
	}
	return _u
}

// ClearEffectiveTo clears the value of the "effective_to" field.
func (_u *PlanUpdateOne) ClearEffectiveTo() *PlanUpdateOne {
	_u.mutation.ClearEffectiveTo()
	return _u
}

// SetIsCustom sets the "is_custom" field.
func (_u *PlanUpdateOne) SetIsCustom(v bool) *PlanUpdateOne {
	_u.mutation.SetIsCustom(v)
	return _u
}

// SetNillableIsCustom sets the "is_custom" field if the given value is not nil.
func (_u *PlanUpdateOne) SetNillableIsCustom(v *bool) *PlanUpdateOne {
	if v != nil {
		_u.SetIsCustom(*v)
	}
	return _u
}

// AddPhaseIDs adds the "phases" edge to the PlanPhase entity by IDs.
func (_u *PlanUpdateOne) AddPhaseIDs(ids ...string) *PlanUpdateOne {
	_u.mutation.AddPhaseIDs(ids...)
	return _u
}

// AddPhases adds the "phases" edges to the PlanPhase entity.
func (_u *PlanUpdateOne) AddPhases(v ...*PlanPhase) *PlanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPhaseIDs(ids...)
}

// AddAddonIDs adds the "addons" edge to the PlanAddon entity by IDs.
func (_u *PlanUpdateOne) AddAddonIDs(ids ...string) *PlanUpdateOne {
	_u.mutation.AddAddonIDs(ids...)
	return _u
}

// AddAddons adds the "addons" edges to the PlanAddon entity.
func (_u *PlanUpdateOne) AddAddons(v ...*PlanAddon) *PlanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAddonIDs(ids...)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (_u *PlanUpdateOne) AddSubscriptionIDs(ids ...string) *PlanUpdateOne {
	_u.mutation.AddSubscriptionIDs(ids...)
	return _u
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (_u *PlanUpdateOne) AddSubscriptions(v ...*Subscription) *PlanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubscriptionIDs(ids...)
}

// Mutation returns the PlanMutation object of the builder.
func (_u *PlanUpdateOne) Mutation() *PlanMutation {
	return _u.mutation
}

// ClearPhases clears all "phases" edges to the PlanPhase entity.
func (_u *PlanUpdateOne) ClearPhases() *PlanUpdateOne {
	_u.mutation.ClearPhases()
	return _u
}

// RemovePhaseIDs removes the "phases" edge to PlanPhase entities by IDs.
func (_u *PlanUpdateOne) RemovePhaseIDs(ids ...string) *PlanUpdateOne {
	_u.mutation.RemovePhaseIDs(ids...)
	return _u
}

// RemovePhases removes "phases" edges to PlanPhase entities.
func (_u *PlanUpdateOne) RemovePhases(v ...*PlanPhase) *PlanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePhaseIDs(ids...)
}

// ClearAddons clears all "addons" edges to the PlanAddon entity.
func (_u *PlanUpdateOne) ClearAddons() *PlanUpdateOne {
	_u.mutation.ClearAddons()
	return _u
}

// RemoveAddonIDs removes the "addons" edge to PlanAddon entities by IDs.
func (_u *PlanUpdateOne) RemoveAddonIDs(ids ...string) *PlanUpdateOne {
	_u.mutation.RemoveAddonIDs(ids...)
	return _u
}

// RemoveAddons removes "addons" edges to PlanAddon entities.
func (_u *PlanUpdateOne) RemoveAddons(v ...*PlanAddon) *PlanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAddonIDs(ids...)
}

// ClearSubscriptions clears all "subscriptions" edges to the Subscription entity.
func (_u *PlanUpdateOne) ClearSubscriptions() *PlanUpdateOne {
	_u.mutation.ClearSubscriptions()
	return _u
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to Subscription entities by IDs.
func (_u *PlanUpdateOne) RemoveSubscriptionIDs(ids ...string) *PlanUpdateOne {
	_u.mutation.RemoveSubscriptionIDs(ids...)
	return _u
}

// RemoveSubscriptions removes "subscriptions" edges to Subscription entities.
func (_u *PlanUpdateOne) RemoveSubscriptions(v ...*Subscription) *PlanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubscriptionIDs(ids...)
}

// Where appends a list predicates to the PlanUpdate builder.
func (_u *PlanUpdateOne) Where(ps ...predicate.Plan) *PlanUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PlanUpdateOne) Select(field string, fields ...string) *PlanUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Plan entity.
func (_u *PlanUpdateOne) Save(ctx context.Context) (*Plan, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PlanUpdateOne) SaveX(ctx context.Context) *Plan {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PlanUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PlanUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PlanUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := plan.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PlanUpdateOne) check() error {
	if v, ok := _u.mutation.Version(); ok {
		if err := plan.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`db: validator failed for field "Plan.version": %w`, err)}
		}
	}
	return nil
}

func (_u *PlanUpdateOne) sqlSave(ctx context.Context) (_node *Plan, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Plan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plan.FieldID)
		for _, f := range fields {
			if !plan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != plan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(plan.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(plan.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(plan.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(plan.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(plan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(plan.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(plan.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.BillablesMustAlign(); ok {
		_spec.SetField(plan.FieldBillablesMustAlign, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(plan.FieldVersion, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedVersion(); ok {
		_spec.AddField(plan.FieldVersion, field.TypeInt, value)
	}
	if value, ok := _u.mutation.EffectiveFrom(); ok {
		_spec.SetField(plan.FieldEffectiveFrom, field.TypeTime, value)
	}
	if _u.mutation.EffectiveFromCleared() {
		_spec.ClearField(plan.FieldEffectiveFrom, field.TypeTime)
	}
	if value, ok := _u.mutation.EffectiveTo(); ok {
		_spec.SetField(plan.FieldEffectiveTo, field.TypeTime, value)
	}
	if _u.mutation.EffectiveToCleared() {
		_spec.ClearField(plan.FieldEffectiveTo, field.TypeTime)
	}
	if value, ok := _u.mutation.IsCustom(); ok {
		_spec.SetField(plan.FieldIsCustom, field.TypeBool, value)
	}
	if _u.mutation.PhasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PhasesTable,
			Columns: []string{plan.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planphase.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPhasesIDs(); len(nodes) > 0 && !_u.mutation.PhasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PhasesTable,
			Columns: []string{plan.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PhasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PhasesTable,
			Columns: []string{plan.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AddonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.AddonsTable,
			Columns: []string{plan.AddonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planaddon.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAddonsIDs(); len(nodes) > 0 && !_u.mutation.AddonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.AddonsTable,
			Columns: []string{plan.AddonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planaddon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AddonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.AddonsTable,
			Columns: []string{plan.AddonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planaddon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.SubscriptionsTable,
			Columns: []string{plan.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !_u.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.SubscriptionsTable,
			Columns: []string{plan.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.SubscriptionsTable,
			Columns: []string{plan.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Plan{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
