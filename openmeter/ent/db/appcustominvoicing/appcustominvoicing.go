// Code generated by ent, DO NOT EDIT.

package appcustominvoicing

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the appcustominvoicing type in the database.
	Label = "app_custom_invoicing"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEnableDraftSyncHook holds the string denoting the enable_draft_sync_hook field in the database.
	FieldEnableDraftSyncHook = "enable_draft_sync_hook"
	// FieldEnableIssuingSyncHook holds the string denoting the enable_issuing_sync_hook field in the database.
	FieldEnableIssuingSyncHook = "enable_issuing_sync_hook"
	// EdgeCustomerApps holds the string denoting the customer_apps edge name in mutations.
	EdgeCustomerApps = "customer_apps"
	// EdgeApp holds the string denoting the app edge name in mutations.
	EdgeApp = "app"
	// Table holds the table name of the appcustominvoicing in the database.
	Table = "app_custom_invoicings"
	// CustomerAppsTable is the table that holds the customer_apps relation/edge.
	CustomerAppsTable = "app_custom_invoicing_customers"
	// CustomerAppsInverseTable is the table name for the AppCustomInvoicingCustomer entity.
	// It exists in this package in order to avoid circular dependency with the "appcustominvoicingcustomer" package.
	CustomerAppsInverseTable = "app_custom_invoicing_customers"
	// CustomerAppsColumn is the table column denoting the customer_apps relation/edge.
	CustomerAppsColumn = "app_id"
	// AppTable is the table that holds the app relation/edge.
	AppTable = "app_custom_invoicings"
	// AppInverseTable is the table name for the App entity.
	// It exists in this package in order to avoid circular dependency with the "dbapp" package.
	AppInverseTable = "apps"
	// AppColumn is the table column denoting the app relation/edge.
	AppColumn = "id"
)

// Columns holds all SQL columns for appcustominvoicing fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEnableDraftSyncHook,
	FieldEnableIssuingSyncHook,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEnableDraftSyncHook holds the default value on creation for the "enable_draft_sync_hook" field.
	DefaultEnableDraftSyncHook bool
	// DefaultEnableIssuingSyncHook holds the default value on creation for the "enable_issuing_sync_hook" field.
	DefaultEnableIssuingSyncHook bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the AppCustomInvoicing queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEnableDraftSyncHook orders the results by the enable_draft_sync_hook field.
func ByEnableDraftSyncHook(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnableDraftSyncHook, opts...).ToFunc()
}

// ByEnableIssuingSyncHook orders the results by the enable_issuing_sync_hook field.
func ByEnableIssuingSyncHook(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnableIssuingSyncHook, opts...).ToFunc()
}

// ByCustomerAppsCount orders the results by customer_apps count.
func ByCustomerAppsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCustomerAppsStep(), opts...)
	}
}

// ByCustomerApps orders the results by customer_apps terms.
func ByCustomerApps(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerAppsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAppField orders the results by app field.
func ByAppField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppStep(), sql.OrderByField(field, opts...))
	}
}
func newCustomerAppsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerAppsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CustomerAppsTable, CustomerAppsColumn),
	)
}
func newAppStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AppTable, AppColumn),
	)
}
