// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonquantity"
)

// SubscriptionAddonQuantityUpdate is the builder for updating SubscriptionAddonQuantity entities.
type SubscriptionAddonQuantityUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionAddonQuantityMutation
}

// Where appends a list predicates to the SubscriptionAddonQuantityUpdate builder.
func (_u *SubscriptionAddonQuantityUpdate) Where(ps ...predicate.SubscriptionAddonQuantity) *SubscriptionAddonQuantityUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubscriptionAddonQuantityUpdate) SetUpdatedAt(v time.Time) *SubscriptionAddonQuantityUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SubscriptionAddonQuantityUpdate) SetDeletedAt(v time.Time) *SubscriptionAddonQuantityUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SubscriptionAddonQuantityUpdate) SetNillableDeletedAt(v *time.Time) *SubscriptionAddonQuantityUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SubscriptionAddonQuantityUpdate) ClearDeletedAt() *SubscriptionAddonQuantityUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// Mutation returns the SubscriptionAddonQuantityMutation object of the builder.
func (_u *SubscriptionAddonQuantityUpdate) Mutation() *SubscriptionAddonQuantityMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SubscriptionAddonQuantityUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubscriptionAddonQuantityUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SubscriptionAddonQuantityUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubscriptionAddonQuantityUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubscriptionAddonQuantityUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := subscriptionaddonquantity.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubscriptionAddonQuantityUpdate) check() error {
	if _u.mutation.SubscriptionAddonCleared() && len(_u.mutation.SubscriptionAddonIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionAddonQuantity.subscription_addon"`)
	}
	return nil
}

func (_u *SubscriptionAddonQuantityUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionaddonquantity.Table, subscriptionaddonquantity.Columns, sqlgraph.NewFieldSpec(subscriptionaddonquantity.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionaddonquantity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionaddonquantity.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subscriptionaddonquantity.FieldDeletedAt, field.TypeTime)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionaddonquantity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SubscriptionAddonQuantityUpdateOne is the builder for updating a single SubscriptionAddonQuantity entity.
type SubscriptionAddonQuantityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionAddonQuantityMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubscriptionAddonQuantityUpdateOne) SetUpdatedAt(v time.Time) *SubscriptionAddonQuantityUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SubscriptionAddonQuantityUpdateOne) SetDeletedAt(v time.Time) *SubscriptionAddonQuantityUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SubscriptionAddonQuantityUpdateOne) SetNillableDeletedAt(v *time.Time) *SubscriptionAddonQuantityUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SubscriptionAddonQuantityUpdateOne) ClearDeletedAt() *SubscriptionAddonQuantityUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// Mutation returns the SubscriptionAddonQuantityMutation object of the builder.
func (_u *SubscriptionAddonQuantityUpdateOne) Mutation() *SubscriptionAddonQuantityMutation {
	return _u.mutation
}

// Where appends a list predicates to the SubscriptionAddonQuantityUpdate builder.
func (_u *SubscriptionAddonQuantityUpdateOne) Where(ps ...predicate.SubscriptionAddonQuantity) *SubscriptionAddonQuantityUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SubscriptionAddonQuantityUpdateOne) Select(field string, fields ...string) *SubscriptionAddonQuantityUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SubscriptionAddonQuantity entity.
func (_u *SubscriptionAddonQuantityUpdateOne) Save(ctx context.Context) (*SubscriptionAddonQuantity, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubscriptionAddonQuantityUpdateOne) SaveX(ctx context.Context) *SubscriptionAddonQuantity {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SubscriptionAddonQuantityUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubscriptionAddonQuantityUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubscriptionAddonQuantityUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := subscriptionaddonquantity.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubscriptionAddonQuantityUpdateOne) check() error {
	if _u.mutation.SubscriptionAddonCleared() && len(_u.mutation.SubscriptionAddonIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionAddonQuantity.subscription_addon"`)
	}
	return nil
}

func (_u *SubscriptionAddonQuantityUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionAddonQuantity, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionaddonquantity.Table, subscriptionaddonquantity.Columns, sqlgraph.NewFieldSpec(subscriptionaddonquantity.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "SubscriptionAddonQuantity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionaddonquantity.FieldID)
		for _, f := range fields {
			if !subscriptionaddonquantity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != subscriptionaddonquantity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionaddonquantity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionaddonquantity.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subscriptionaddonquantity.FieldDeletedAt, field.TypeTime)
	}
	_node = &SubscriptionAddonQuantity{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionaddonquantity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
