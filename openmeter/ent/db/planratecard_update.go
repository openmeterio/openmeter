// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/feature"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planphase"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/datetime"
)

// PlanRateCardUpdate is the builder for updating PlanRateCard entities.
type PlanRateCardUpdate struct {
	config
	hooks    []Hook
	mutation *PlanRateCardMutation
}

// Where appends a list predicates to the PlanRateCardUpdate builder.
func (_u *PlanRateCardUpdate) Where(ps ...predicate.PlanRateCard) *PlanRateCardUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *PlanRateCardUpdate) SetMetadata(v map[string]string) *PlanRateCardUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *PlanRateCardUpdate) ClearMetadata() *PlanRateCardUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PlanRateCardUpdate) SetUpdatedAt(v time.Time) *PlanRateCardUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *PlanRateCardUpdate) SetDeletedAt(v time.Time) *PlanRateCardUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *PlanRateCardUpdate) SetNillableDeletedAt(v *time.Time) *PlanRateCardUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *PlanRateCardUpdate) ClearDeletedAt() *PlanRateCardUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *PlanRateCardUpdate) SetName(v string) *PlanRateCardUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PlanRateCardUpdate) SetNillableName(v *string) *PlanRateCardUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *PlanRateCardUpdate) SetDescription(v string) *PlanRateCardUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *PlanRateCardUpdate) SetNillableDescription(v *string) *PlanRateCardUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *PlanRateCardUpdate) ClearDescription() *PlanRateCardUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetFeatureKey sets the "feature_key" field.
func (_u *PlanRateCardUpdate) SetFeatureKey(v string) *PlanRateCardUpdate {
	_u.mutation.SetFeatureKey(v)
	return _u
}

// SetNillableFeatureKey sets the "feature_key" field if the given value is not nil.
func (_u *PlanRateCardUpdate) SetNillableFeatureKey(v *string) *PlanRateCardUpdate {
	if v != nil {
		_u.SetFeatureKey(*v)
	}
	return _u
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (_u *PlanRateCardUpdate) ClearFeatureKey() *PlanRateCardUpdate {
	_u.mutation.ClearFeatureKey()
	return _u
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (_u *PlanRateCardUpdate) SetEntitlementTemplate(v *productcatalog.EntitlementTemplate) *PlanRateCardUpdate {
	_u.mutation.SetEntitlementTemplate(v)
	return _u
}

// ClearEntitlementTemplate clears the value of the "entitlement_template" field.
func (_u *PlanRateCardUpdate) ClearEntitlementTemplate() *PlanRateCardUpdate {
	_u.mutation.ClearEntitlementTemplate()
	return _u
}

// SetTaxConfig sets the "tax_config" field.
func (_u *PlanRateCardUpdate) SetTaxConfig(v *productcatalog.TaxConfig) *PlanRateCardUpdate {
	_u.mutation.SetTaxConfig(v)
	return _u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (_u *PlanRateCardUpdate) ClearTaxConfig() *PlanRateCardUpdate {
	_u.mutation.ClearTaxConfig()
	return _u
}

// SetBillingCadence sets the "billing_cadence" field.
func (_u *PlanRateCardUpdate) SetBillingCadence(v datetime.ISODurationString) *PlanRateCardUpdate {
	_u.mutation.SetBillingCadence(v)
	return _u
}

// SetNillableBillingCadence sets the "billing_cadence" field if the given value is not nil.
func (_u *PlanRateCardUpdate) SetNillableBillingCadence(v *datetime.ISODurationString) *PlanRateCardUpdate {
	if v != nil {
		_u.SetBillingCadence(*v)
	}
	return _u
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (_u *PlanRateCardUpdate) ClearBillingCadence() *PlanRateCardUpdate {
	_u.mutation.ClearBillingCadence()
	return _u
}

// SetPrice sets the "price" field.
func (_u *PlanRateCardUpdate) SetPrice(v *productcatalog.Price) *PlanRateCardUpdate {
	_u.mutation.SetPrice(v)
	return _u
}

// ClearPrice clears the value of the "price" field.
func (_u *PlanRateCardUpdate) ClearPrice() *PlanRateCardUpdate {
	_u.mutation.ClearPrice()
	return _u
}

// SetDiscounts sets the "discounts" field.
func (_u *PlanRateCardUpdate) SetDiscounts(v *productcatalog.Discounts) *PlanRateCardUpdate {
	_u.mutation.SetDiscounts(v)
	return _u
}

// ClearDiscounts clears the value of the "discounts" field.
func (_u *PlanRateCardUpdate) ClearDiscounts() *PlanRateCardUpdate {
	_u.mutation.ClearDiscounts()
	return _u
}

// SetPhaseID sets the "phase_id" field.
func (_u *PlanRateCardUpdate) SetPhaseID(v string) *PlanRateCardUpdate {
	_u.mutation.SetPhaseID(v)
	return _u
}

// SetNillablePhaseID sets the "phase_id" field if the given value is not nil.
func (_u *PlanRateCardUpdate) SetNillablePhaseID(v *string) *PlanRateCardUpdate {
	if v != nil {
		_u.SetPhaseID(*v)
	}
	return _u
}

// SetFeatureID sets the "feature_id" field.
func (_u *PlanRateCardUpdate) SetFeatureID(v string) *PlanRateCardUpdate {
	_u.mutation.SetFeatureID(v)
	return _u
}

// SetNillableFeatureID sets the "feature_id" field if the given value is not nil.
func (_u *PlanRateCardUpdate) SetNillableFeatureID(v *string) *PlanRateCardUpdate {
	if v != nil {
		_u.SetFeatureID(*v)
	}
	return _u
}

// ClearFeatureID clears the value of the "feature_id" field.
func (_u *PlanRateCardUpdate) ClearFeatureID() *PlanRateCardUpdate {
	_u.mutation.ClearFeatureID()
	return _u
}

// SetPhase sets the "phase" edge to the PlanPhase entity.
func (_u *PlanRateCardUpdate) SetPhase(v *PlanPhase) *PlanRateCardUpdate {
	return _u.SetPhaseID(v.ID)
}

// SetFeaturesID sets the "features" edge to the Feature entity by ID.
func (_u *PlanRateCardUpdate) SetFeaturesID(id string) *PlanRateCardUpdate {
	_u.mutation.SetFeaturesID(id)
	return _u
}

// SetNillableFeaturesID sets the "features" edge to the Feature entity by ID if the given value is not nil.
func (_u *PlanRateCardUpdate) SetNillableFeaturesID(id *string) *PlanRateCardUpdate {
	if id != nil {
		_u = _u.SetFeaturesID(*id)
	}
	return _u
}

// SetFeatures sets the "features" edge to the Feature entity.
func (_u *PlanRateCardUpdate) SetFeatures(v *Feature) *PlanRateCardUpdate {
	return _u.SetFeaturesID(v.ID)
}

// Mutation returns the PlanRateCardMutation object of the builder.
func (_u *PlanRateCardUpdate) Mutation() *PlanRateCardMutation {
	return _u.mutation
}

// ClearPhase clears the "phase" edge to the PlanPhase entity.
func (_u *PlanRateCardUpdate) ClearPhase() *PlanRateCardUpdate {
	_u.mutation.ClearPhase()
	return _u
}

// ClearFeatures clears the "features" edge to the Feature entity.
func (_u *PlanRateCardUpdate) ClearFeatures() *PlanRateCardUpdate {
	_u.mutation.ClearFeatures()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PlanRateCardUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PlanRateCardUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PlanRateCardUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PlanRateCardUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PlanRateCardUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := planratecard.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PlanRateCardUpdate) check() error {
	if v, ok := _u.mutation.EntitlementTemplate(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "entitlement_template", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.entitlement_template": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.tax_config": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Price(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.price": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Discounts(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "discounts", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.discounts": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PhaseID(); ok {
		if err := planratecard.PhaseIDValidator(v); err != nil {
			return &ValidationError{Name: "phase_id", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.phase_id": %w`, err)}
		}
	}
	if _u.mutation.PhaseCleared() && len(_u.mutation.PhaseIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlanRateCard.phase"`)
	}
	return nil
}

func (_u *PlanRateCardUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(planratecard.Table, planratecard.Columns, sqlgraph.NewFieldSpec(planratecard.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(planratecard.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(planratecard.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(planratecard.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(planratecard.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(planratecard.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(planratecard.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(planratecard.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(planratecard.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.FeatureKey(); ok {
		_spec.SetField(planratecard.FieldFeatureKey, field.TypeString, value)
	}
	if _u.mutation.FeatureKeyCleared() {
		_spec.ClearField(planratecard.FieldFeatureKey, field.TypeString)
	}
	if value, ok := _u.mutation.EntitlementTemplate(); ok {
		vv, err := planratecard.ValueScanner.EntitlementTemplate.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(planratecard.FieldEntitlementTemplate, field.TypeString, vv)
	}
	if _u.mutation.EntitlementTemplateCleared() {
		_spec.ClearField(planratecard.FieldEntitlementTemplate, field.TypeString)
	}
	if value, ok := _u.mutation.TaxConfig(); ok {
		vv, err := planratecard.ValueScanner.TaxConfig.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(planratecard.FieldTaxConfig, field.TypeString, vv)
	}
	if _u.mutation.TaxConfigCleared() {
		_spec.ClearField(planratecard.FieldTaxConfig, field.TypeString)
	}
	if value, ok := _u.mutation.BillingCadence(); ok {
		_spec.SetField(planratecard.FieldBillingCadence, field.TypeString, value)
	}
	if _u.mutation.BillingCadenceCleared() {
		_spec.ClearField(planratecard.FieldBillingCadence, field.TypeString)
	}
	if value, ok := _u.mutation.Price(); ok {
		vv, err := planratecard.ValueScanner.Price.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(planratecard.FieldPrice, field.TypeString, vv)
	}
	if _u.mutation.PriceCleared() {
		_spec.ClearField(planratecard.FieldPrice, field.TypeString)
	}
	if value, ok := _u.mutation.Discounts(); ok {
		vv, err := planratecard.ValueScanner.Discounts.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(planratecard.FieldDiscounts, field.TypeString, vv)
	}
	if _u.mutation.DiscountsCleared() {
		_spec.ClearField(planratecard.FieldDiscounts, field.TypeString)
	}
	if _u.mutation.PhaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planratecard.PhaseTable,
			Columns: []string{planratecard.PhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planphase.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planratecard.PhaseTable,
			Columns: []string{planratecard.PhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planratecard.FeaturesTable,
			Columns: []string{planratecard.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planratecard.FeaturesTable,
			Columns: []string{planratecard.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{planratecard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PlanRateCardUpdateOne is the builder for updating a single PlanRateCard entity.
type PlanRateCardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlanRateCardMutation
}

// SetMetadata sets the "metadata" field.
func (_u *PlanRateCardUpdateOne) SetMetadata(v map[string]string) *PlanRateCardUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *PlanRateCardUpdateOne) ClearMetadata() *PlanRateCardUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PlanRateCardUpdateOne) SetUpdatedAt(v time.Time) *PlanRateCardUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *PlanRateCardUpdateOne) SetDeletedAt(v time.Time) *PlanRateCardUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *PlanRateCardUpdateOne) SetNillableDeletedAt(v *time.Time) *PlanRateCardUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *PlanRateCardUpdateOne) ClearDeletedAt() *PlanRateCardUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *PlanRateCardUpdateOne) SetName(v string) *PlanRateCardUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PlanRateCardUpdateOne) SetNillableName(v *string) *PlanRateCardUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *PlanRateCardUpdateOne) SetDescription(v string) *PlanRateCardUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *PlanRateCardUpdateOne) SetNillableDescription(v *string) *PlanRateCardUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *PlanRateCardUpdateOne) ClearDescription() *PlanRateCardUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetFeatureKey sets the "feature_key" field.
func (_u *PlanRateCardUpdateOne) SetFeatureKey(v string) *PlanRateCardUpdateOne {
	_u.mutation.SetFeatureKey(v)
	return _u
}

// SetNillableFeatureKey sets the "feature_key" field if the given value is not nil.
func (_u *PlanRateCardUpdateOne) SetNillableFeatureKey(v *string) *PlanRateCardUpdateOne {
	if v != nil {
		_u.SetFeatureKey(*v)
	}
	return _u
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (_u *PlanRateCardUpdateOne) ClearFeatureKey() *PlanRateCardUpdateOne {
	_u.mutation.ClearFeatureKey()
	return _u
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (_u *PlanRateCardUpdateOne) SetEntitlementTemplate(v *productcatalog.EntitlementTemplate) *PlanRateCardUpdateOne {
	_u.mutation.SetEntitlementTemplate(v)
	return _u
}

// ClearEntitlementTemplate clears the value of the "entitlement_template" field.
func (_u *PlanRateCardUpdateOne) ClearEntitlementTemplate() *PlanRateCardUpdateOne {
	_u.mutation.ClearEntitlementTemplate()
	return _u
}

// SetTaxConfig sets the "tax_config" field.
func (_u *PlanRateCardUpdateOne) SetTaxConfig(v *productcatalog.TaxConfig) *PlanRateCardUpdateOne {
	_u.mutation.SetTaxConfig(v)
	return _u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (_u *PlanRateCardUpdateOne) ClearTaxConfig() *PlanRateCardUpdateOne {
	_u.mutation.ClearTaxConfig()
	return _u
}

// SetBillingCadence sets the "billing_cadence" field.
func (_u *PlanRateCardUpdateOne) SetBillingCadence(v datetime.ISODurationString) *PlanRateCardUpdateOne {
	_u.mutation.SetBillingCadence(v)
	return _u
}

// SetNillableBillingCadence sets the "billing_cadence" field if the given value is not nil.
func (_u *PlanRateCardUpdateOne) SetNillableBillingCadence(v *datetime.ISODurationString) *PlanRateCardUpdateOne {
	if v != nil {
		_u.SetBillingCadence(*v)
	}
	return _u
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (_u *PlanRateCardUpdateOne) ClearBillingCadence() *PlanRateCardUpdateOne {
	_u.mutation.ClearBillingCadence()
	return _u
}

// SetPrice sets the "price" field.
func (_u *PlanRateCardUpdateOne) SetPrice(v *productcatalog.Price) *PlanRateCardUpdateOne {
	_u.mutation.SetPrice(v)
	return _u
}

// ClearPrice clears the value of the "price" field.
func (_u *PlanRateCardUpdateOne) ClearPrice() *PlanRateCardUpdateOne {
	_u.mutation.ClearPrice()
	return _u
}

// SetDiscounts sets the "discounts" field.
func (_u *PlanRateCardUpdateOne) SetDiscounts(v *productcatalog.Discounts) *PlanRateCardUpdateOne {
	_u.mutation.SetDiscounts(v)
	return _u
}

// ClearDiscounts clears the value of the "discounts" field.
func (_u *PlanRateCardUpdateOne) ClearDiscounts() *PlanRateCardUpdateOne {
	_u.mutation.ClearDiscounts()
	return _u
}

// SetPhaseID sets the "phase_id" field.
func (_u *PlanRateCardUpdateOne) SetPhaseID(v string) *PlanRateCardUpdateOne {
	_u.mutation.SetPhaseID(v)
	return _u
}

// SetNillablePhaseID sets the "phase_id" field if the given value is not nil.
func (_u *PlanRateCardUpdateOne) SetNillablePhaseID(v *string) *PlanRateCardUpdateOne {
	if v != nil {
		_u.SetPhaseID(*v)
	}
	return _u
}

// SetFeatureID sets the "feature_id" field.
func (_u *PlanRateCardUpdateOne) SetFeatureID(v string) *PlanRateCardUpdateOne {
	_u.mutation.SetFeatureID(v)
	return _u
}

// SetNillableFeatureID sets the "feature_id" field if the given value is not nil.
func (_u *PlanRateCardUpdateOne) SetNillableFeatureID(v *string) *PlanRateCardUpdateOne {
	if v != nil {
		_u.SetFeatureID(*v)
	}
	return _u
}

// ClearFeatureID clears the value of the "feature_id" field.
func (_u *PlanRateCardUpdateOne) ClearFeatureID() *PlanRateCardUpdateOne {
	_u.mutation.ClearFeatureID()
	return _u
}

// SetPhase sets the "phase" edge to the PlanPhase entity.
func (_u *PlanRateCardUpdateOne) SetPhase(v *PlanPhase) *PlanRateCardUpdateOne {
	return _u.SetPhaseID(v.ID)
}

// SetFeaturesID sets the "features" edge to the Feature entity by ID.
func (_u *PlanRateCardUpdateOne) SetFeaturesID(id string) *PlanRateCardUpdateOne {
	_u.mutation.SetFeaturesID(id)
	return _u
}

// SetNillableFeaturesID sets the "features" edge to the Feature entity by ID if the given value is not nil.
func (_u *PlanRateCardUpdateOne) SetNillableFeaturesID(id *string) *PlanRateCardUpdateOne {
	if id != nil {
		_u = _u.SetFeaturesID(*id)
	}
	return _u
}

// SetFeatures sets the "features" edge to the Feature entity.
func (_u *PlanRateCardUpdateOne) SetFeatures(v *Feature) *PlanRateCardUpdateOne {
	return _u.SetFeaturesID(v.ID)
}

// Mutation returns the PlanRateCardMutation object of the builder.
func (_u *PlanRateCardUpdateOne) Mutation() *PlanRateCardMutation {
	return _u.mutation
}

// ClearPhase clears the "phase" edge to the PlanPhase entity.
func (_u *PlanRateCardUpdateOne) ClearPhase() *PlanRateCardUpdateOne {
	_u.mutation.ClearPhase()
	return _u
}

// ClearFeatures clears the "features" edge to the Feature entity.
func (_u *PlanRateCardUpdateOne) ClearFeatures() *PlanRateCardUpdateOne {
	_u.mutation.ClearFeatures()
	return _u
}

// Where appends a list predicates to the PlanRateCardUpdate builder.
func (_u *PlanRateCardUpdateOne) Where(ps ...predicate.PlanRateCard) *PlanRateCardUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PlanRateCardUpdateOne) Select(field string, fields ...string) *PlanRateCardUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PlanRateCard entity.
func (_u *PlanRateCardUpdateOne) Save(ctx context.Context) (*PlanRateCard, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PlanRateCardUpdateOne) SaveX(ctx context.Context) *PlanRateCard {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PlanRateCardUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PlanRateCardUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PlanRateCardUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := planratecard.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PlanRateCardUpdateOne) check() error {
	if v, ok := _u.mutation.EntitlementTemplate(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "entitlement_template", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.entitlement_template": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.tax_config": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Price(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.price": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Discounts(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "discounts", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.discounts": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PhaseID(); ok {
		if err := planratecard.PhaseIDValidator(v); err != nil {
			return &ValidationError{Name: "phase_id", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.phase_id": %w`, err)}
		}
	}
	if _u.mutation.PhaseCleared() && len(_u.mutation.PhaseIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlanRateCard.phase"`)
	}
	return nil
}

func (_u *PlanRateCardUpdateOne) sqlSave(ctx context.Context) (_node *PlanRateCard, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(planratecard.Table, planratecard.Columns, sqlgraph.NewFieldSpec(planratecard.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "PlanRateCard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, planratecard.FieldID)
		for _, f := range fields {
			if !planratecard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != planratecard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(planratecard.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(planratecard.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(planratecard.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(planratecard.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(planratecard.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(planratecard.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(planratecard.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(planratecard.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.FeatureKey(); ok {
		_spec.SetField(planratecard.FieldFeatureKey, field.TypeString, value)
	}
	if _u.mutation.FeatureKeyCleared() {
		_spec.ClearField(planratecard.FieldFeatureKey, field.TypeString)
	}
	if value, ok := _u.mutation.EntitlementTemplate(); ok {
		vv, err := planratecard.ValueScanner.EntitlementTemplate.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(planratecard.FieldEntitlementTemplate, field.TypeString, vv)
	}
	if _u.mutation.EntitlementTemplateCleared() {
		_spec.ClearField(planratecard.FieldEntitlementTemplate, field.TypeString)
	}
	if value, ok := _u.mutation.TaxConfig(); ok {
		vv, err := planratecard.ValueScanner.TaxConfig.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(planratecard.FieldTaxConfig, field.TypeString, vv)
	}
	if _u.mutation.TaxConfigCleared() {
		_spec.ClearField(planratecard.FieldTaxConfig, field.TypeString)
	}
	if value, ok := _u.mutation.BillingCadence(); ok {
		_spec.SetField(planratecard.FieldBillingCadence, field.TypeString, value)
	}
	if _u.mutation.BillingCadenceCleared() {
		_spec.ClearField(planratecard.FieldBillingCadence, field.TypeString)
	}
	if value, ok := _u.mutation.Price(); ok {
		vv, err := planratecard.ValueScanner.Price.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(planratecard.FieldPrice, field.TypeString, vv)
	}
	if _u.mutation.PriceCleared() {
		_spec.ClearField(planratecard.FieldPrice, field.TypeString)
	}
	if value, ok := _u.mutation.Discounts(); ok {
		vv, err := planratecard.ValueScanner.Discounts.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(planratecard.FieldDiscounts, field.TypeString, vv)
	}
	if _u.mutation.DiscountsCleared() {
		_spec.ClearField(planratecard.FieldDiscounts, field.TypeString)
	}
	if _u.mutation.PhaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planratecard.PhaseTable,
			Columns: []string{planratecard.PhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planphase.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planratecard.PhaseTable,
			Columns: []string{planratecard.PhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planratecard.FeaturesTable,
			Columns: []string{planratecard.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planratecard.FeaturesTable,
			Columns: []string{planratecard.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlanRateCard{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{planratecard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
