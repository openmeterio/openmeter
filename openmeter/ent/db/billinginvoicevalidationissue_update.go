// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicevalidationissue"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingInvoiceValidationIssueUpdate is the builder for updating BillingInvoiceValidationIssue entities.
type BillingInvoiceValidationIssueUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceValidationIssueMutation
}

// Where appends a list predicates to the BillingInvoiceValidationIssueUpdate builder.
func (_u *BillingInvoiceValidationIssueUpdate) Where(ps ...predicate.BillingInvoiceValidationIssue) *BillingInvoiceValidationIssueUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BillingInvoiceValidationIssueUpdate) SetUpdatedAt(v time.Time) *BillingInvoiceValidationIssueUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *BillingInvoiceValidationIssueUpdate) SetDeletedAt(v time.Time) *BillingInvoiceValidationIssueUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *BillingInvoiceValidationIssueUpdate) SetNillableDeletedAt(v *time.Time) *BillingInvoiceValidationIssueUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *BillingInvoiceValidationIssueUpdate) ClearDeletedAt() *BillingInvoiceValidationIssueUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetInvoiceID sets the "invoice_id" field.
func (_u *BillingInvoiceValidationIssueUpdate) SetInvoiceID(v string) *BillingInvoiceValidationIssueUpdate {
	_u.mutation.SetInvoiceID(v)
	return _u
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (_u *BillingInvoiceValidationIssueUpdate) SetNillableInvoiceID(v *string) *BillingInvoiceValidationIssueUpdate {
	if v != nil {
		_u.SetInvoiceID(*v)
	}
	return _u
}

// SetSeverity sets the "severity" field.
func (_u *BillingInvoiceValidationIssueUpdate) SetSeverity(v billing.ValidationIssueSeverity) *BillingInvoiceValidationIssueUpdate {
	_u.mutation.SetSeverity(v)
	return _u
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (_u *BillingInvoiceValidationIssueUpdate) SetNillableSeverity(v *billing.ValidationIssueSeverity) *BillingInvoiceValidationIssueUpdate {
	if v != nil {
		_u.SetSeverity(*v)
	}
	return _u
}

// SetCode sets the "code" field.
func (_u *BillingInvoiceValidationIssueUpdate) SetCode(v string) *BillingInvoiceValidationIssueUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *BillingInvoiceValidationIssueUpdate) SetNillableCode(v *string) *BillingInvoiceValidationIssueUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *BillingInvoiceValidationIssueUpdate) ClearCode() *BillingInvoiceValidationIssueUpdate {
	_u.mutation.ClearCode()
	return _u
}

// SetMessage sets the "message" field.
func (_u *BillingInvoiceValidationIssueUpdate) SetMessage(v string) *BillingInvoiceValidationIssueUpdate {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *BillingInvoiceValidationIssueUpdate) SetNillableMessage(v *string) *BillingInvoiceValidationIssueUpdate {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// SetPath sets the "path" field.
func (_u *BillingInvoiceValidationIssueUpdate) SetPath(v string) *BillingInvoiceValidationIssueUpdate {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *BillingInvoiceValidationIssueUpdate) SetNillablePath(v *string) *BillingInvoiceValidationIssueUpdate {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *BillingInvoiceValidationIssueUpdate) ClearPath() *BillingInvoiceValidationIssueUpdate {
	_u.mutation.ClearPath()
	return _u
}

// SetComponent sets the "component" field.
func (_u *BillingInvoiceValidationIssueUpdate) SetComponent(v string) *BillingInvoiceValidationIssueUpdate {
	_u.mutation.SetComponent(v)
	return _u
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_u *BillingInvoiceValidationIssueUpdate) SetNillableComponent(v *string) *BillingInvoiceValidationIssueUpdate {
	if v != nil {
		_u.SetComponent(*v)
	}
	return _u
}

// SetDedupeHash sets the "dedupe_hash" field.
func (_u *BillingInvoiceValidationIssueUpdate) SetDedupeHash(v []byte) *BillingInvoiceValidationIssueUpdate {
	_u.mutation.SetDedupeHash(v)
	return _u
}

// SetBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID.
func (_u *BillingInvoiceValidationIssueUpdate) SetBillingInvoiceID(id string) *BillingInvoiceValidationIssueUpdate {
	_u.mutation.SetBillingInvoiceID(id)
	return _u
}

// SetBillingInvoice sets the "billing_invoice" edge to the BillingInvoice entity.
func (_u *BillingInvoiceValidationIssueUpdate) SetBillingInvoice(v *BillingInvoice) *BillingInvoiceValidationIssueUpdate {
	return _u.SetBillingInvoiceID(v.ID)
}

// Mutation returns the BillingInvoiceValidationIssueMutation object of the builder.
func (_u *BillingInvoiceValidationIssueUpdate) Mutation() *BillingInvoiceValidationIssueMutation {
	return _u.mutation
}

// ClearBillingInvoice clears the "billing_invoice" edge to the BillingInvoice entity.
func (_u *BillingInvoiceValidationIssueUpdate) ClearBillingInvoice() *BillingInvoiceValidationIssueUpdate {
	_u.mutation.ClearBillingInvoice()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BillingInvoiceValidationIssueUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BillingInvoiceValidationIssueUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BillingInvoiceValidationIssueUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BillingInvoiceValidationIssueUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BillingInvoiceValidationIssueUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := billinginvoicevalidationissue.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BillingInvoiceValidationIssueUpdate) check() error {
	if v, ok := _u.mutation.InvoiceID(); ok {
		if err := billinginvoicevalidationissue.InvoiceIDValidator(v); err != nil {
			return &ValidationError{Name: "invoice_id", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.invoice_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Severity(); ok {
		if err := billinginvoicevalidationissue.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.severity": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Message(); ok {
		if err := billinginvoicevalidationissue.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.message": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DedupeHash(); ok {
		if err := billinginvoicevalidationissue.DedupeHashValidator(v); err != nil {
			return &ValidationError{Name: "dedupe_hash", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.dedupe_hash": %w`, err)}
		}
	}
	if _u.mutation.BillingInvoiceCleared() && len(_u.mutation.BillingInvoiceIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceValidationIssue.billing_invoice"`)
	}
	return nil
}

func (_u *BillingInvoiceValidationIssueUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoicevalidationissue.Table, billinginvoicevalidationissue.Columns, sqlgraph.NewFieldSpec(billinginvoicevalidationissue.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoicevalidationissue.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Severity(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldSeverity, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(billinginvoicevalidationissue.FieldCode, field.TypeString)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldMessage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(billinginvoicevalidationissue.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.Component(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldComponent, field.TypeString, value)
	}
	if value, ok := _u.mutation.DedupeHash(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldDedupeHash, field.TypeBytes, value)
	}
	if _u.mutation.BillingInvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicevalidationissue.BillingInvoiceTable,
			Columns: []string{billinginvoicevalidationissue.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicevalidationissue.BillingInvoiceTable,
			Columns: []string{billinginvoicevalidationissue.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicevalidationissue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BillingInvoiceValidationIssueUpdateOne is the builder for updating a single BillingInvoiceValidationIssue entity.
type BillingInvoiceValidationIssueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceValidationIssueMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetUpdatedAt(v time.Time) *BillingInvoiceValidationIssueUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetDeletedAt(v time.Time) *BillingInvoiceValidationIssueUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetNillableDeletedAt(v *time.Time) *BillingInvoiceValidationIssueUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *BillingInvoiceValidationIssueUpdateOne) ClearDeletedAt() *BillingInvoiceValidationIssueUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetInvoiceID sets the "invoice_id" field.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetInvoiceID(v string) *BillingInvoiceValidationIssueUpdateOne {
	_u.mutation.SetInvoiceID(v)
	return _u
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetNillableInvoiceID(v *string) *BillingInvoiceValidationIssueUpdateOne {
	if v != nil {
		_u.SetInvoiceID(*v)
	}
	return _u
}

// SetSeverity sets the "severity" field.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetSeverity(v billing.ValidationIssueSeverity) *BillingInvoiceValidationIssueUpdateOne {
	_u.mutation.SetSeverity(v)
	return _u
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetNillableSeverity(v *billing.ValidationIssueSeverity) *BillingInvoiceValidationIssueUpdateOne {
	if v != nil {
		_u.SetSeverity(*v)
	}
	return _u
}

// SetCode sets the "code" field.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetCode(v string) *BillingInvoiceValidationIssueUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetNillableCode(v *string) *BillingInvoiceValidationIssueUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *BillingInvoiceValidationIssueUpdateOne) ClearCode() *BillingInvoiceValidationIssueUpdateOne {
	_u.mutation.ClearCode()
	return _u
}

// SetMessage sets the "message" field.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetMessage(v string) *BillingInvoiceValidationIssueUpdateOne {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetNillableMessage(v *string) *BillingInvoiceValidationIssueUpdateOne {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// SetPath sets the "path" field.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetPath(v string) *BillingInvoiceValidationIssueUpdateOne {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetNillablePath(v *string) *BillingInvoiceValidationIssueUpdateOne {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *BillingInvoiceValidationIssueUpdateOne) ClearPath() *BillingInvoiceValidationIssueUpdateOne {
	_u.mutation.ClearPath()
	return _u
}

// SetComponent sets the "component" field.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetComponent(v string) *BillingInvoiceValidationIssueUpdateOne {
	_u.mutation.SetComponent(v)
	return _u
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetNillableComponent(v *string) *BillingInvoiceValidationIssueUpdateOne {
	if v != nil {
		_u.SetComponent(*v)
	}
	return _u
}

// SetDedupeHash sets the "dedupe_hash" field.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetDedupeHash(v []byte) *BillingInvoiceValidationIssueUpdateOne {
	_u.mutation.SetDedupeHash(v)
	return _u
}

// SetBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetBillingInvoiceID(id string) *BillingInvoiceValidationIssueUpdateOne {
	_u.mutation.SetBillingInvoiceID(id)
	return _u
}

// SetBillingInvoice sets the "billing_invoice" edge to the BillingInvoice entity.
func (_u *BillingInvoiceValidationIssueUpdateOne) SetBillingInvoice(v *BillingInvoice) *BillingInvoiceValidationIssueUpdateOne {
	return _u.SetBillingInvoiceID(v.ID)
}

// Mutation returns the BillingInvoiceValidationIssueMutation object of the builder.
func (_u *BillingInvoiceValidationIssueUpdateOne) Mutation() *BillingInvoiceValidationIssueMutation {
	return _u.mutation
}

// ClearBillingInvoice clears the "billing_invoice" edge to the BillingInvoice entity.
func (_u *BillingInvoiceValidationIssueUpdateOne) ClearBillingInvoice() *BillingInvoiceValidationIssueUpdateOne {
	_u.mutation.ClearBillingInvoice()
	return _u
}

// Where appends a list predicates to the BillingInvoiceValidationIssueUpdate builder.
func (_u *BillingInvoiceValidationIssueUpdateOne) Where(ps ...predicate.BillingInvoiceValidationIssue) *BillingInvoiceValidationIssueUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BillingInvoiceValidationIssueUpdateOne) Select(field string, fields ...string) *BillingInvoiceValidationIssueUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BillingInvoiceValidationIssue entity.
func (_u *BillingInvoiceValidationIssueUpdateOne) Save(ctx context.Context) (*BillingInvoiceValidationIssue, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BillingInvoiceValidationIssueUpdateOne) SaveX(ctx context.Context) *BillingInvoiceValidationIssue {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BillingInvoiceValidationIssueUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BillingInvoiceValidationIssueUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BillingInvoiceValidationIssueUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := billinginvoicevalidationissue.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BillingInvoiceValidationIssueUpdateOne) check() error {
	if v, ok := _u.mutation.InvoiceID(); ok {
		if err := billinginvoicevalidationissue.InvoiceIDValidator(v); err != nil {
			return &ValidationError{Name: "invoice_id", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.invoice_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Severity(); ok {
		if err := billinginvoicevalidationissue.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.severity": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Message(); ok {
		if err := billinginvoicevalidationissue.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.message": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DedupeHash(); ok {
		if err := billinginvoicevalidationissue.DedupeHashValidator(v); err != nil {
			return &ValidationError{Name: "dedupe_hash", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.dedupe_hash": %w`, err)}
		}
	}
	if _u.mutation.BillingInvoiceCleared() && len(_u.mutation.BillingInvoiceIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceValidationIssue.billing_invoice"`)
	}
	return nil
}

func (_u *BillingInvoiceValidationIssueUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoiceValidationIssue, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoicevalidationissue.Table, billinginvoicevalidationissue.Columns, sqlgraph.NewFieldSpec(billinginvoicevalidationissue.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoiceValidationIssue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoicevalidationissue.FieldID)
		for _, f := range fields {
			if !billinginvoicevalidationissue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoicevalidationissue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoicevalidationissue.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Severity(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldSeverity, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(billinginvoicevalidationissue.FieldCode, field.TypeString)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldMessage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(billinginvoicevalidationissue.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.Component(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldComponent, field.TypeString, value)
	}
	if value, ok := _u.mutation.DedupeHash(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldDedupeHash, field.TypeBytes, value)
	}
	if _u.mutation.BillingInvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicevalidationissue.BillingInvoiceTable,
			Columns: []string{billinginvoicevalidationissue.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicevalidationissue.BillingInvoiceTable,
			Columns: []string{billinginvoicevalidationissue.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingInvoiceValidationIssue{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicevalidationissue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
