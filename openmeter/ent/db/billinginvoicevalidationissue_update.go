// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicevalidationissue"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingInvoiceValidationIssueUpdate is the builder for updating BillingInvoiceValidationIssue entities.
type BillingInvoiceValidationIssueUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceValidationIssueMutation
}

// Where appends a list predicates to the BillingInvoiceValidationIssueUpdate builder.
func (biviu *BillingInvoiceValidationIssueUpdate) Where(ps ...predicate.BillingInvoiceValidationIssue) *BillingInvoiceValidationIssueUpdate {
	biviu.mutation.Where(ps...)
	return biviu
}

// SetUpdatedAt sets the "updated_at" field.
func (biviu *BillingInvoiceValidationIssueUpdate) SetUpdatedAt(t time.Time) *BillingInvoiceValidationIssueUpdate {
	biviu.mutation.SetUpdatedAt(t)
	return biviu
}

// SetDeletedAt sets the "deleted_at" field.
func (biviu *BillingInvoiceValidationIssueUpdate) SetDeletedAt(t time.Time) *BillingInvoiceValidationIssueUpdate {
	biviu.mutation.SetDeletedAt(t)
	return biviu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biviu *BillingInvoiceValidationIssueUpdate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceValidationIssueUpdate {
	if t != nil {
		biviu.SetDeletedAt(*t)
	}
	return biviu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (biviu *BillingInvoiceValidationIssueUpdate) ClearDeletedAt() *BillingInvoiceValidationIssueUpdate {
	biviu.mutation.ClearDeletedAt()
	return biviu
}

// SetInvoiceID sets the "invoice_id" field.
func (biviu *BillingInvoiceValidationIssueUpdate) SetInvoiceID(s string) *BillingInvoiceValidationIssueUpdate {
	biviu.mutation.SetInvoiceID(s)
	return biviu
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (biviu *BillingInvoiceValidationIssueUpdate) SetNillableInvoiceID(s *string) *BillingInvoiceValidationIssueUpdate {
	if s != nil {
		biviu.SetInvoiceID(*s)
	}
	return biviu
}

// SetSeverity sets the "severity" field.
func (biviu *BillingInvoiceValidationIssueUpdate) SetSeverity(bis billing.ValidationIssueSeverity) *BillingInvoiceValidationIssueUpdate {
	biviu.mutation.SetSeverity(bis)
	return biviu
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (biviu *BillingInvoiceValidationIssueUpdate) SetNillableSeverity(bis *billing.ValidationIssueSeverity) *BillingInvoiceValidationIssueUpdate {
	if bis != nil {
		biviu.SetSeverity(*bis)
	}
	return biviu
}

// SetCode sets the "code" field.
func (biviu *BillingInvoiceValidationIssueUpdate) SetCode(s string) *BillingInvoiceValidationIssueUpdate {
	biviu.mutation.SetCode(s)
	return biviu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (biviu *BillingInvoiceValidationIssueUpdate) SetNillableCode(s *string) *BillingInvoiceValidationIssueUpdate {
	if s != nil {
		biviu.SetCode(*s)
	}
	return biviu
}

// ClearCode clears the value of the "code" field.
func (biviu *BillingInvoiceValidationIssueUpdate) ClearCode() *BillingInvoiceValidationIssueUpdate {
	biviu.mutation.ClearCode()
	return biviu
}

// SetMessage sets the "message" field.
func (biviu *BillingInvoiceValidationIssueUpdate) SetMessage(s string) *BillingInvoiceValidationIssueUpdate {
	biviu.mutation.SetMessage(s)
	return biviu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (biviu *BillingInvoiceValidationIssueUpdate) SetNillableMessage(s *string) *BillingInvoiceValidationIssueUpdate {
	if s != nil {
		biviu.SetMessage(*s)
	}
	return biviu
}

// SetPath sets the "path" field.
func (biviu *BillingInvoiceValidationIssueUpdate) SetPath(s string) *BillingInvoiceValidationIssueUpdate {
	biviu.mutation.SetPath(s)
	return biviu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (biviu *BillingInvoiceValidationIssueUpdate) SetNillablePath(s *string) *BillingInvoiceValidationIssueUpdate {
	if s != nil {
		biviu.SetPath(*s)
	}
	return biviu
}

// ClearPath clears the value of the "path" field.
func (biviu *BillingInvoiceValidationIssueUpdate) ClearPath() *BillingInvoiceValidationIssueUpdate {
	biviu.mutation.ClearPath()
	return biviu
}

// SetComponent sets the "component" field.
func (biviu *BillingInvoiceValidationIssueUpdate) SetComponent(s string) *BillingInvoiceValidationIssueUpdate {
	biviu.mutation.SetComponent(s)
	return biviu
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (biviu *BillingInvoiceValidationIssueUpdate) SetNillableComponent(s *string) *BillingInvoiceValidationIssueUpdate {
	if s != nil {
		biviu.SetComponent(*s)
	}
	return biviu
}

// SetDedupeHash sets the "dedupe_hash" field.
func (biviu *BillingInvoiceValidationIssueUpdate) SetDedupeHash(b []byte) *BillingInvoiceValidationIssueUpdate {
	biviu.mutation.SetDedupeHash(b)
	return biviu
}

// SetBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID.
func (biviu *BillingInvoiceValidationIssueUpdate) SetBillingInvoiceID(id string) *BillingInvoiceValidationIssueUpdate {
	biviu.mutation.SetBillingInvoiceID(id)
	return biviu
}

// SetBillingInvoice sets the "billing_invoice" edge to the BillingInvoice entity.
func (biviu *BillingInvoiceValidationIssueUpdate) SetBillingInvoice(b *BillingInvoice) *BillingInvoiceValidationIssueUpdate {
	return biviu.SetBillingInvoiceID(b.ID)
}

// Mutation returns the BillingInvoiceValidationIssueMutation object of the builder.
func (biviu *BillingInvoiceValidationIssueUpdate) Mutation() *BillingInvoiceValidationIssueMutation {
	return biviu.mutation
}

// ClearBillingInvoice clears the "billing_invoice" edge to the BillingInvoice entity.
func (biviu *BillingInvoiceValidationIssueUpdate) ClearBillingInvoice() *BillingInvoiceValidationIssueUpdate {
	biviu.mutation.ClearBillingInvoice()
	return biviu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (biviu *BillingInvoiceValidationIssueUpdate) Save(ctx context.Context) (int, error) {
	biviu.defaults()
	return withHooks(ctx, biviu.sqlSave, biviu.mutation, biviu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biviu *BillingInvoiceValidationIssueUpdate) SaveX(ctx context.Context) int {
	affected, err := biviu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biviu *BillingInvoiceValidationIssueUpdate) Exec(ctx context.Context) error {
	_, err := biviu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biviu *BillingInvoiceValidationIssueUpdate) ExecX(ctx context.Context) {
	if err := biviu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biviu *BillingInvoiceValidationIssueUpdate) defaults() {
	if _, ok := biviu.mutation.UpdatedAt(); !ok {
		v := billinginvoicevalidationissue.UpdateDefaultUpdatedAt()
		biviu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biviu *BillingInvoiceValidationIssueUpdate) check() error {
	if v, ok := biviu.mutation.InvoiceID(); ok {
		if err := billinginvoicevalidationissue.InvoiceIDValidator(v); err != nil {
			return &ValidationError{Name: "invoice_id", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.invoice_id": %w`, err)}
		}
	}
	if v, ok := biviu.mutation.Severity(); ok {
		if err := billinginvoicevalidationissue.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.severity": %w`, err)}
		}
	}
	if v, ok := biviu.mutation.Message(); ok {
		if err := billinginvoicevalidationissue.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.message": %w`, err)}
		}
	}
	if v, ok := biviu.mutation.DedupeHash(); ok {
		if err := billinginvoicevalidationissue.DedupeHashValidator(v); err != nil {
			return &ValidationError{Name: "dedupe_hash", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.dedupe_hash": %w`, err)}
		}
	}
	if biviu.mutation.BillingInvoiceCleared() && len(biviu.mutation.BillingInvoiceIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceValidationIssue.billing_invoice"`)
	}
	return nil
}

func (biviu *BillingInvoiceValidationIssueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := biviu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoicevalidationissue.Table, billinginvoicevalidationissue.Columns, sqlgraph.NewFieldSpec(billinginvoicevalidationissue.FieldID, field.TypeString))
	if ps := biviu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biviu.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biviu.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldDeletedAt, field.TypeTime, value)
	}
	if biviu.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoicevalidationissue.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := biviu.mutation.Severity(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldSeverity, field.TypeEnum, value)
	}
	if value, ok := biviu.mutation.Code(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldCode, field.TypeString, value)
	}
	if biviu.mutation.CodeCleared() {
		_spec.ClearField(billinginvoicevalidationissue.FieldCode, field.TypeString)
	}
	if value, ok := biviu.mutation.Message(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldMessage, field.TypeString, value)
	}
	if value, ok := biviu.mutation.Path(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldPath, field.TypeString, value)
	}
	if biviu.mutation.PathCleared() {
		_spec.ClearField(billinginvoicevalidationissue.FieldPath, field.TypeString)
	}
	if value, ok := biviu.mutation.Component(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldComponent, field.TypeString, value)
	}
	if value, ok := biviu.mutation.DedupeHash(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldDedupeHash, field.TypeBytes, value)
	}
	if biviu.mutation.BillingInvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicevalidationissue.BillingInvoiceTable,
			Columns: []string{billinginvoicevalidationissue.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biviu.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicevalidationissue.BillingInvoiceTable,
			Columns: []string{billinginvoicevalidationissue.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, biviu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicevalidationissue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	biviu.mutation.done = true
	return n, nil
}

// BillingInvoiceValidationIssueUpdateOne is the builder for updating a single BillingInvoiceValidationIssue entity.
type BillingInvoiceValidationIssueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceValidationIssueMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetUpdatedAt(t time.Time) *BillingInvoiceValidationIssueUpdateOne {
	biviuo.mutation.SetUpdatedAt(t)
	return biviuo
}

// SetDeletedAt sets the "deleted_at" field.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetDeletedAt(t time.Time) *BillingInvoiceValidationIssueUpdateOne {
	biviuo.mutation.SetDeletedAt(t)
	return biviuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingInvoiceValidationIssueUpdateOne {
	if t != nil {
		biviuo.SetDeletedAt(*t)
	}
	return biviuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) ClearDeletedAt() *BillingInvoiceValidationIssueUpdateOne {
	biviuo.mutation.ClearDeletedAt()
	return biviuo
}

// SetInvoiceID sets the "invoice_id" field.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetInvoiceID(s string) *BillingInvoiceValidationIssueUpdateOne {
	biviuo.mutation.SetInvoiceID(s)
	return biviuo
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetNillableInvoiceID(s *string) *BillingInvoiceValidationIssueUpdateOne {
	if s != nil {
		biviuo.SetInvoiceID(*s)
	}
	return biviuo
}

// SetSeverity sets the "severity" field.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetSeverity(bis billing.ValidationIssueSeverity) *BillingInvoiceValidationIssueUpdateOne {
	biviuo.mutation.SetSeverity(bis)
	return biviuo
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetNillableSeverity(bis *billing.ValidationIssueSeverity) *BillingInvoiceValidationIssueUpdateOne {
	if bis != nil {
		biviuo.SetSeverity(*bis)
	}
	return biviuo
}

// SetCode sets the "code" field.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetCode(s string) *BillingInvoiceValidationIssueUpdateOne {
	biviuo.mutation.SetCode(s)
	return biviuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetNillableCode(s *string) *BillingInvoiceValidationIssueUpdateOne {
	if s != nil {
		biviuo.SetCode(*s)
	}
	return biviuo
}

// ClearCode clears the value of the "code" field.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) ClearCode() *BillingInvoiceValidationIssueUpdateOne {
	biviuo.mutation.ClearCode()
	return biviuo
}

// SetMessage sets the "message" field.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetMessage(s string) *BillingInvoiceValidationIssueUpdateOne {
	biviuo.mutation.SetMessage(s)
	return biviuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetNillableMessage(s *string) *BillingInvoiceValidationIssueUpdateOne {
	if s != nil {
		biviuo.SetMessage(*s)
	}
	return biviuo
}

// SetPath sets the "path" field.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetPath(s string) *BillingInvoiceValidationIssueUpdateOne {
	biviuo.mutation.SetPath(s)
	return biviuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetNillablePath(s *string) *BillingInvoiceValidationIssueUpdateOne {
	if s != nil {
		biviuo.SetPath(*s)
	}
	return biviuo
}

// ClearPath clears the value of the "path" field.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) ClearPath() *BillingInvoiceValidationIssueUpdateOne {
	biviuo.mutation.ClearPath()
	return biviuo
}

// SetComponent sets the "component" field.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetComponent(s string) *BillingInvoiceValidationIssueUpdateOne {
	biviuo.mutation.SetComponent(s)
	return biviuo
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetNillableComponent(s *string) *BillingInvoiceValidationIssueUpdateOne {
	if s != nil {
		biviuo.SetComponent(*s)
	}
	return biviuo
}

// SetDedupeHash sets the "dedupe_hash" field.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetDedupeHash(b []byte) *BillingInvoiceValidationIssueUpdateOne {
	biviuo.mutation.SetDedupeHash(b)
	return biviuo
}

// SetBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetBillingInvoiceID(id string) *BillingInvoiceValidationIssueUpdateOne {
	biviuo.mutation.SetBillingInvoiceID(id)
	return biviuo
}

// SetBillingInvoice sets the "billing_invoice" edge to the BillingInvoice entity.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SetBillingInvoice(b *BillingInvoice) *BillingInvoiceValidationIssueUpdateOne {
	return biviuo.SetBillingInvoiceID(b.ID)
}

// Mutation returns the BillingInvoiceValidationIssueMutation object of the builder.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) Mutation() *BillingInvoiceValidationIssueMutation {
	return biviuo.mutation
}

// ClearBillingInvoice clears the "billing_invoice" edge to the BillingInvoice entity.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) ClearBillingInvoice() *BillingInvoiceValidationIssueUpdateOne {
	biviuo.mutation.ClearBillingInvoice()
	return biviuo
}

// Where appends a list predicates to the BillingInvoiceValidationIssueUpdate builder.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) Where(ps ...predicate.BillingInvoiceValidationIssue) *BillingInvoiceValidationIssueUpdateOne {
	biviuo.mutation.Where(ps...)
	return biviuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) Select(field string, fields ...string) *BillingInvoiceValidationIssueUpdateOne {
	biviuo.fields = append([]string{field}, fields...)
	return biviuo
}

// Save executes the query and returns the updated BillingInvoiceValidationIssue entity.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) Save(ctx context.Context) (*BillingInvoiceValidationIssue, error) {
	biviuo.defaults()
	return withHooks(ctx, biviuo.sqlSave, biviuo.mutation, biviuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) SaveX(ctx context.Context) *BillingInvoiceValidationIssue {
	node, err := biviuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) Exec(ctx context.Context) error {
	_, err := biviuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) ExecX(ctx context.Context) {
	if err := biviuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) defaults() {
	if _, ok := biviuo.mutation.UpdatedAt(); !ok {
		v := billinginvoicevalidationissue.UpdateDefaultUpdatedAt()
		biviuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biviuo *BillingInvoiceValidationIssueUpdateOne) check() error {
	if v, ok := biviuo.mutation.InvoiceID(); ok {
		if err := billinginvoicevalidationissue.InvoiceIDValidator(v); err != nil {
			return &ValidationError{Name: "invoice_id", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.invoice_id": %w`, err)}
		}
	}
	if v, ok := biviuo.mutation.Severity(); ok {
		if err := billinginvoicevalidationissue.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.severity": %w`, err)}
		}
	}
	if v, ok := biviuo.mutation.Message(); ok {
		if err := billinginvoicevalidationissue.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.message": %w`, err)}
		}
	}
	if v, ok := biviuo.mutation.DedupeHash(); ok {
		if err := billinginvoicevalidationissue.DedupeHashValidator(v); err != nil {
			return &ValidationError{Name: "dedupe_hash", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.dedupe_hash": %w`, err)}
		}
	}
	if biviuo.mutation.BillingInvoiceCleared() && len(biviuo.mutation.BillingInvoiceIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceValidationIssue.billing_invoice"`)
	}
	return nil
}

func (biviuo *BillingInvoiceValidationIssueUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoiceValidationIssue, err error) {
	if err := biviuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoicevalidationissue.Table, billinginvoicevalidationissue.Columns, sqlgraph.NewFieldSpec(billinginvoicevalidationissue.FieldID, field.TypeString))
	id, ok := biviuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoiceValidationIssue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := biviuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoicevalidationissue.FieldID)
		for _, f := range fields {
			if !billinginvoicevalidationissue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoicevalidationissue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := biviuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biviuo.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biviuo.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldDeletedAt, field.TypeTime, value)
	}
	if biviuo.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoicevalidationissue.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := biviuo.mutation.Severity(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldSeverity, field.TypeEnum, value)
	}
	if value, ok := biviuo.mutation.Code(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldCode, field.TypeString, value)
	}
	if biviuo.mutation.CodeCleared() {
		_spec.ClearField(billinginvoicevalidationissue.FieldCode, field.TypeString)
	}
	if value, ok := biviuo.mutation.Message(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldMessage, field.TypeString, value)
	}
	if value, ok := biviuo.mutation.Path(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldPath, field.TypeString, value)
	}
	if biviuo.mutation.PathCleared() {
		_spec.ClearField(billinginvoicevalidationissue.FieldPath, field.TypeString)
	}
	if value, ok := biviuo.mutation.Component(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldComponent, field.TypeString, value)
	}
	if value, ok := biviuo.mutation.DedupeHash(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldDedupeHash, field.TypeBytes, value)
	}
	if biviuo.mutation.BillingInvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicevalidationissue.BillingInvoiceTable,
			Columns: []string{billinginvoicevalidationissue.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biviuo.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicevalidationissue.BillingInvoiceTable,
			Columns: []string{billinginvoicevalidationissue.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingInvoiceValidationIssue{config: biviuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biviuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicevalidationissue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	biviuo.mutation.done = true
	return _node, nil
}
