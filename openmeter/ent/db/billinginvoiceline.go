// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceflatfeelineconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicesplitlinegroup"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceusagebasedlineconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionphase"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/currencyx"
	"github.com/openmeterio/openmeter/pkg/models"
)

// BillingInvoiceLine is the model entity for the BillingInvoiceLine schema.
type BillingInvoiceLine struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Annotations holds the value of the "annotations" field.
	Annotations models.Annotations `json:"annotations,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency currencyx.Code `json:"currency,omitempty"`
	// TaxConfig holds the value of the "tax_config" field.
	TaxConfig productcatalog.TaxConfig `json:"tax_config,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount alpacadecimal.Decimal `json:"amount,omitempty"`
	// TaxesTotal holds the value of the "taxes_total" field.
	TaxesTotal alpacadecimal.Decimal `json:"taxes_total,omitempty"`
	// TaxesInclusiveTotal holds the value of the "taxes_inclusive_total" field.
	TaxesInclusiveTotal alpacadecimal.Decimal `json:"taxes_inclusive_total,omitempty"`
	// TaxesExclusiveTotal holds the value of the "taxes_exclusive_total" field.
	TaxesExclusiveTotal alpacadecimal.Decimal `json:"taxes_exclusive_total,omitempty"`
	// ChargesTotal holds the value of the "charges_total" field.
	ChargesTotal alpacadecimal.Decimal `json:"charges_total,omitempty"`
	// DiscountsTotal holds the value of the "discounts_total" field.
	DiscountsTotal alpacadecimal.Decimal `json:"discounts_total,omitempty"`
	// Total holds the value of the "total" field.
	Total alpacadecimal.Decimal `json:"total,omitempty"`
	// PeriodStart holds the value of the "period_start" field.
	PeriodStart time.Time `json:"period_start,omitempty"`
	// PeriodEnd holds the value of the "period_end" field.
	PeriodEnd time.Time `json:"period_end,omitempty"`
	// InvoiceID holds the value of the "invoice_id" field.
	InvoiceID string `json:"invoice_id,omitempty"`
	// ManagedBy holds the value of the "managed_by" field.
	ManagedBy billing.InvoiceLineManagedBy `json:"managed_by,omitempty"`
	// ParentLineID holds the value of the "parent_line_id" field.
	ParentLineID *string `json:"parent_line_id,omitempty"`
	// InvoiceAt holds the value of the "invoice_at" field.
	InvoiceAt time.Time `json:"invoice_at,omitempty"`
	// Type holds the value of the "type" field.
	Type billing.InvoiceLineType `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status billing.InvoiceLineStatus `json:"status,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity *alpacadecimal.Decimal `json:"quantity,omitempty"`
	// RatecardDiscounts holds the value of the "ratecard_discounts" field.
	RatecardDiscounts *billing.Discounts `json:"ratecard_discounts,omitempty"`
	// InvoicingAppExternalID holds the value of the "invoicing_app_external_id" field.
	InvoicingAppExternalID *string `json:"invoicing_app_external_id,omitempty"`
	// ChildUniqueReferenceID holds the value of the "child_unique_reference_id" field.
	ChildUniqueReferenceID *string `json:"child_unique_reference_id,omitempty"`
	// SubscriptionID holds the value of the "subscription_id" field.
	SubscriptionID *string `json:"subscription_id,omitempty"`
	// SubscriptionPhaseID holds the value of the "subscription_phase_id" field.
	SubscriptionPhaseID *string `json:"subscription_phase_id,omitempty"`
	// SubscriptionItemID holds the value of the "subscription_item_id" field.
	SubscriptionItemID *string `json:"subscription_item_id,omitempty"`
	// SplitLineGroupID holds the value of the "split_line_group_id" field.
	SplitLineGroupID *string `json:"split_line_group_id,omitempty"`
	// LineIds holds the value of the "line_ids" field.
	//
	// Deprecated: invoice discounts are deprecated, use line_discounts instead
	LineIds *string `json:"line_ids,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingInvoiceLineQuery when eager-loading is set.
	Edges                      BillingInvoiceLineEdges `json:"edges"`
	fee_line_config_id         *string
	usage_based_line_config_id *string
	selectValues               sql.SelectValues
}

// BillingInvoiceLineEdges holds the relations/edges for other nodes in the graph.
type BillingInvoiceLineEdges struct {
	// BillingInvoice holds the value of the billing_invoice edge.
	BillingInvoice *BillingInvoice `json:"billing_invoice,omitempty"`
	// SplitLineGroup holds the value of the split_line_group edge.
	SplitLineGroup *BillingInvoiceSplitLineGroup `json:"split_line_group,omitempty"`
	// FlatFeeLine holds the value of the flat_fee_line edge.
	FlatFeeLine *BillingInvoiceFlatFeeLineConfig `json:"flat_fee_line,omitempty"`
	// UsageBasedLine holds the value of the usage_based_line edge.
	UsageBasedLine *BillingInvoiceUsageBasedLineConfig `json:"usage_based_line,omitempty"`
	// ParentLine holds the value of the parent_line edge.
	ParentLine *BillingInvoiceLine `json:"parent_line,omitempty"`
	// DetailedLines holds the value of the detailed_lines edge.
	DetailedLines []*BillingInvoiceLine `json:"detailed_lines,omitempty"`
	// LineUsageDiscounts holds the value of the line_usage_discounts edge.
	LineUsageDiscounts []*BillingInvoiceLineUsageDiscount `json:"line_usage_discounts,omitempty"`
	// LineAmountDiscounts holds the value of the line_amount_discounts edge.
	LineAmountDiscounts []*BillingInvoiceLineDiscount `json:"line_amount_discounts,omitempty"`
	// Subscription holds the value of the subscription edge.
	Subscription *Subscription `json:"subscription,omitempty"`
	// SubscriptionPhase holds the value of the subscription_phase edge.
	SubscriptionPhase *SubscriptionPhase `json:"subscription_phase,omitempty"`
	// SubscriptionItem holds the value of the subscription_item edge.
	SubscriptionItem *SubscriptionItem `json:"subscription_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
}

// BillingInvoiceOrErr returns the BillingInvoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceLineEdges) BillingInvoiceOrErr() (*BillingInvoice, error) {
	if e.BillingInvoice != nil {
		return e.BillingInvoice, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: billinginvoice.Label}
	}
	return nil, &NotLoadedError{edge: "billing_invoice"}
}

// SplitLineGroupOrErr returns the SplitLineGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceLineEdges) SplitLineGroupOrErr() (*BillingInvoiceSplitLineGroup, error) {
	if e.SplitLineGroup != nil {
		return e.SplitLineGroup, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: billinginvoicesplitlinegroup.Label}
	}
	return nil, &NotLoadedError{edge: "split_line_group"}
}

// FlatFeeLineOrErr returns the FlatFeeLine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceLineEdges) FlatFeeLineOrErr() (*BillingInvoiceFlatFeeLineConfig, error) {
	if e.FlatFeeLine != nil {
		return e.FlatFeeLine, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: billinginvoiceflatfeelineconfig.Label}
	}
	return nil, &NotLoadedError{edge: "flat_fee_line"}
}

// UsageBasedLineOrErr returns the UsageBasedLine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceLineEdges) UsageBasedLineOrErr() (*BillingInvoiceUsageBasedLineConfig, error) {
	if e.UsageBasedLine != nil {
		return e.UsageBasedLine, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: billinginvoiceusagebasedlineconfig.Label}
	}
	return nil, &NotLoadedError{edge: "usage_based_line"}
}

// ParentLineOrErr returns the ParentLine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceLineEdges) ParentLineOrErr() (*BillingInvoiceLine, error) {
	if e.ParentLine != nil {
		return e.ParentLine, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: billinginvoiceline.Label}
	}
	return nil, &NotLoadedError{edge: "parent_line"}
}

// DetailedLinesOrErr returns the DetailedLines value or an error if the edge
// was not loaded in eager-loading.
func (e BillingInvoiceLineEdges) DetailedLinesOrErr() ([]*BillingInvoiceLine, error) {
	if e.loadedTypes[5] {
		return e.DetailedLines, nil
	}
	return nil, &NotLoadedError{edge: "detailed_lines"}
}

// LineUsageDiscountsOrErr returns the LineUsageDiscounts value or an error if the edge
// was not loaded in eager-loading.
func (e BillingInvoiceLineEdges) LineUsageDiscountsOrErr() ([]*BillingInvoiceLineUsageDiscount, error) {
	if e.loadedTypes[6] {
		return e.LineUsageDiscounts, nil
	}
	return nil, &NotLoadedError{edge: "line_usage_discounts"}
}

// LineAmountDiscountsOrErr returns the LineAmountDiscounts value or an error if the edge
// was not loaded in eager-loading.
func (e BillingInvoiceLineEdges) LineAmountDiscountsOrErr() ([]*BillingInvoiceLineDiscount, error) {
	if e.loadedTypes[7] {
		return e.LineAmountDiscounts, nil
	}
	return nil, &NotLoadedError{edge: "line_amount_discounts"}
}

// SubscriptionOrErr returns the Subscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceLineEdges) SubscriptionOrErr() (*Subscription, error) {
	if e.Subscription != nil {
		return e.Subscription, nil
	} else if e.loadedTypes[8] {
		return nil, &NotFoundError{label: subscription.Label}
	}
	return nil, &NotLoadedError{edge: "subscription"}
}

// SubscriptionPhaseOrErr returns the SubscriptionPhase value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceLineEdges) SubscriptionPhaseOrErr() (*SubscriptionPhase, error) {
	if e.SubscriptionPhase != nil {
		return e.SubscriptionPhase, nil
	} else if e.loadedTypes[9] {
		return nil, &NotFoundError{label: subscriptionphase.Label}
	}
	return nil, &NotLoadedError{edge: "subscription_phase"}
}

// SubscriptionItemOrErr returns the SubscriptionItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceLineEdges) SubscriptionItemOrErr() (*SubscriptionItem, error) {
	if e.SubscriptionItem != nil {
		return e.SubscriptionItem, nil
	} else if e.loadedTypes[10] {
		return nil, &NotFoundError{label: subscriptionitem.Label}
	}
	return nil, &NotLoadedError{edge: "subscription_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingInvoiceLine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billinginvoiceline.FieldQuantity:
			values[i] = &sql.NullScanner{S: new(alpacadecimal.Decimal)}
		case billinginvoiceline.FieldAnnotations, billinginvoiceline.FieldMetadata, billinginvoiceline.FieldTaxConfig:
			values[i] = new([]byte)
		case billinginvoiceline.FieldAmount, billinginvoiceline.FieldTaxesTotal, billinginvoiceline.FieldTaxesInclusiveTotal, billinginvoiceline.FieldTaxesExclusiveTotal, billinginvoiceline.FieldChargesTotal, billinginvoiceline.FieldDiscountsTotal, billinginvoiceline.FieldTotal:
			values[i] = new(alpacadecimal.Decimal)
		case billinginvoiceline.FieldID, billinginvoiceline.FieldNamespace, billinginvoiceline.FieldName, billinginvoiceline.FieldDescription, billinginvoiceline.FieldCurrency, billinginvoiceline.FieldInvoiceID, billinginvoiceline.FieldManagedBy, billinginvoiceline.FieldParentLineID, billinginvoiceline.FieldType, billinginvoiceline.FieldStatus, billinginvoiceline.FieldInvoicingAppExternalID, billinginvoiceline.FieldChildUniqueReferenceID, billinginvoiceline.FieldSubscriptionID, billinginvoiceline.FieldSubscriptionPhaseID, billinginvoiceline.FieldSubscriptionItemID, billinginvoiceline.FieldSplitLineGroupID, billinginvoiceline.FieldLineIds:
			values[i] = new(sql.NullString)
		case billinginvoiceline.FieldCreatedAt, billinginvoiceline.FieldUpdatedAt, billinginvoiceline.FieldDeletedAt, billinginvoiceline.FieldPeriodStart, billinginvoiceline.FieldPeriodEnd, billinginvoiceline.FieldInvoiceAt:
			values[i] = new(sql.NullTime)
		case billinginvoiceline.FieldRatecardDiscounts:
			values[i] = billinginvoiceline.ValueScanner.RatecardDiscounts.ScanValue()
		case billinginvoiceline.ForeignKeys[0]: // fee_line_config_id
			values[i] = new(sql.NullString)
		case billinginvoiceline.ForeignKeys[1]: // usage_based_line_config_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingInvoiceLine fields.
func (_m *BillingInvoiceLine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billinginvoiceline.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case billinginvoiceline.FieldAnnotations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field annotations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Annotations); err != nil {
					return fmt.Errorf("unmarshal field annotations: %w", err)
				}
			}
		case billinginvoiceline.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				_m.Namespace = value.String
			}
		case billinginvoiceline.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case billinginvoiceline.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case billinginvoiceline.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case billinginvoiceline.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case billinginvoiceline.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case billinginvoiceline.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = new(string)
				*_m.Description = value.String
			}
		case billinginvoiceline.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				_m.Currency = currencyx.Code(value.String)
			}
		case billinginvoiceline.FieldTaxConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tax_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.TaxConfig); err != nil {
					return fmt.Errorf("unmarshal field tax_config: %w", err)
				}
			}
		case billinginvoiceline.FieldAmount:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				_m.Amount = *value
			}
		case billinginvoiceline.FieldTaxesTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field taxes_total", values[i])
			} else if value != nil {
				_m.TaxesTotal = *value
			}
		case billinginvoiceline.FieldTaxesInclusiveTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field taxes_inclusive_total", values[i])
			} else if value != nil {
				_m.TaxesInclusiveTotal = *value
			}
		case billinginvoiceline.FieldTaxesExclusiveTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field taxes_exclusive_total", values[i])
			} else if value != nil {
				_m.TaxesExclusiveTotal = *value
			}
		case billinginvoiceline.FieldChargesTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field charges_total", values[i])
			} else if value != nil {
				_m.ChargesTotal = *value
			}
		case billinginvoiceline.FieldDiscountsTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field discounts_total", values[i])
			} else if value != nil {
				_m.DiscountsTotal = *value
			}
		case billinginvoiceline.FieldTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value != nil {
				_m.Total = *value
			}
		case billinginvoiceline.FieldPeriodStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_start", values[i])
			} else if value.Valid {
				_m.PeriodStart = value.Time
			}
		case billinginvoiceline.FieldPeriodEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_end", values[i])
			} else if value.Valid {
				_m.PeriodEnd = value.Time
			}
		case billinginvoiceline.FieldInvoiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_id", values[i])
			} else if value.Valid {
				_m.InvoiceID = value.String
			}
		case billinginvoiceline.FieldManagedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field managed_by", values[i])
			} else if value.Valid {
				_m.ManagedBy = billing.InvoiceLineManagedBy(value.String)
			}
		case billinginvoiceline.FieldParentLineID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_line_id", values[i])
			} else if value.Valid {
				_m.ParentLineID = new(string)
				*_m.ParentLineID = value.String
			}
		case billinginvoiceline.FieldInvoiceAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_at", values[i])
			} else if value.Valid {
				_m.InvoiceAt = value.Time
			}
		case billinginvoiceline.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = billing.InvoiceLineType(value.String)
			}
		case billinginvoiceline.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = billing.InvoiceLineStatus(value.String)
			}
		case billinginvoiceline.FieldQuantity:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				_m.Quantity = new(alpacadecimal.Decimal)
				*_m.Quantity = *value.S.(*alpacadecimal.Decimal)
			}
		case billinginvoiceline.FieldRatecardDiscounts:
			if value, err := billinginvoiceline.ValueScanner.RatecardDiscounts.FromValue(values[i]); err != nil {
				return err
			} else {
				_m.RatecardDiscounts = value
			}
		case billinginvoiceline.FieldInvoicingAppExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoicing_app_external_id", values[i])
			} else if value.Valid {
				_m.InvoicingAppExternalID = new(string)
				*_m.InvoicingAppExternalID = value.String
			}
		case billinginvoiceline.FieldChildUniqueReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field child_unique_reference_id", values[i])
			} else if value.Valid {
				_m.ChildUniqueReferenceID = new(string)
				*_m.ChildUniqueReferenceID = value.String
			}
		case billinginvoiceline.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				_m.SubscriptionID = new(string)
				*_m.SubscriptionID = value.String
			}
		case billinginvoiceline.FieldSubscriptionPhaseID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_phase_id", values[i])
			} else if value.Valid {
				_m.SubscriptionPhaseID = new(string)
				*_m.SubscriptionPhaseID = value.String
			}
		case billinginvoiceline.FieldSubscriptionItemID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_item_id", values[i])
			} else if value.Valid {
				_m.SubscriptionItemID = new(string)
				*_m.SubscriptionItemID = value.String
			}
		case billinginvoiceline.FieldSplitLineGroupID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field split_line_group_id", values[i])
			} else if value.Valid {
				_m.SplitLineGroupID = new(string)
				*_m.SplitLineGroupID = value.String
			}
		case billinginvoiceline.FieldLineIds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field line_ids", values[i])
			} else if value.Valid {
				_m.LineIds = new(string)
				*_m.LineIds = value.String
			}
		case billinginvoiceline.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fee_line_config_id", values[i])
			} else if value.Valid {
				_m.fee_line_config_id = new(string)
				*_m.fee_line_config_id = value.String
			}
		case billinginvoiceline.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field usage_based_line_config_id", values[i])
			} else if value.Valid {
				_m.usage_based_line_config_id = new(string)
				*_m.usage_based_line_config_id = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingInvoiceLine.
// This includes values selected through modifiers, order, etc.
func (_m *BillingInvoiceLine) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryBillingInvoice queries the "billing_invoice" edge of the BillingInvoiceLine entity.
func (_m *BillingInvoiceLine) QueryBillingInvoice() *BillingInvoiceQuery {
	return NewBillingInvoiceLineClient(_m.config).QueryBillingInvoice(_m)
}

// QuerySplitLineGroup queries the "split_line_group" edge of the BillingInvoiceLine entity.
func (_m *BillingInvoiceLine) QuerySplitLineGroup() *BillingInvoiceSplitLineGroupQuery {
	return NewBillingInvoiceLineClient(_m.config).QuerySplitLineGroup(_m)
}

// QueryFlatFeeLine queries the "flat_fee_line" edge of the BillingInvoiceLine entity.
func (_m *BillingInvoiceLine) QueryFlatFeeLine() *BillingInvoiceFlatFeeLineConfigQuery {
	return NewBillingInvoiceLineClient(_m.config).QueryFlatFeeLine(_m)
}

// QueryUsageBasedLine queries the "usage_based_line" edge of the BillingInvoiceLine entity.
func (_m *BillingInvoiceLine) QueryUsageBasedLine() *BillingInvoiceUsageBasedLineConfigQuery {
	return NewBillingInvoiceLineClient(_m.config).QueryUsageBasedLine(_m)
}

// QueryParentLine queries the "parent_line" edge of the BillingInvoiceLine entity.
func (_m *BillingInvoiceLine) QueryParentLine() *BillingInvoiceLineQuery {
	return NewBillingInvoiceLineClient(_m.config).QueryParentLine(_m)
}

// QueryDetailedLines queries the "detailed_lines" edge of the BillingInvoiceLine entity.
func (_m *BillingInvoiceLine) QueryDetailedLines() *BillingInvoiceLineQuery {
	return NewBillingInvoiceLineClient(_m.config).QueryDetailedLines(_m)
}

// QueryLineUsageDiscounts queries the "line_usage_discounts" edge of the BillingInvoiceLine entity.
func (_m *BillingInvoiceLine) QueryLineUsageDiscounts() *BillingInvoiceLineUsageDiscountQuery {
	return NewBillingInvoiceLineClient(_m.config).QueryLineUsageDiscounts(_m)
}

// QueryLineAmountDiscounts queries the "line_amount_discounts" edge of the BillingInvoiceLine entity.
func (_m *BillingInvoiceLine) QueryLineAmountDiscounts() *BillingInvoiceLineDiscountQuery {
	return NewBillingInvoiceLineClient(_m.config).QueryLineAmountDiscounts(_m)
}

// QuerySubscription queries the "subscription" edge of the BillingInvoiceLine entity.
func (_m *BillingInvoiceLine) QuerySubscription() *SubscriptionQuery {
	return NewBillingInvoiceLineClient(_m.config).QuerySubscription(_m)
}

// QuerySubscriptionPhase queries the "subscription_phase" edge of the BillingInvoiceLine entity.
func (_m *BillingInvoiceLine) QuerySubscriptionPhase() *SubscriptionPhaseQuery {
	return NewBillingInvoiceLineClient(_m.config).QuerySubscriptionPhase(_m)
}

// QuerySubscriptionItem queries the "subscription_item" edge of the BillingInvoiceLine entity.
func (_m *BillingInvoiceLine) QuerySubscriptionItem() *SubscriptionItemQuery {
	return NewBillingInvoiceLineClient(_m.config).QuerySubscriptionItem(_m)
}

// Update returns a builder for updating this BillingInvoiceLine.
// Note that you need to call BillingInvoiceLine.Unwrap() before calling this method if this BillingInvoiceLine
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BillingInvoiceLine) Update() *BillingInvoiceLineUpdateOne {
	return NewBillingInvoiceLineClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BillingInvoiceLine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BillingInvoiceLine) Unwrap() *BillingInvoiceLine {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingInvoiceLine is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BillingInvoiceLine) String() string {
	var builder strings.Builder
	builder.WriteString("BillingInvoiceLine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("annotations=")
	builder.WriteString(fmt.Sprintf("%v", _m.Annotations))
	builder.WriteString(", ")
	builder.WriteString("namespace=")
	builder.WriteString(_m.Namespace)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	if v := _m.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(fmt.Sprintf("%v", _m.Currency))
	builder.WriteString(", ")
	builder.WriteString("tax_config=")
	builder.WriteString(fmt.Sprintf("%v", _m.TaxConfig))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.Amount))
	builder.WriteString(", ")
	builder.WriteString("taxes_total=")
	builder.WriteString(fmt.Sprintf("%v", _m.TaxesTotal))
	builder.WriteString(", ")
	builder.WriteString("taxes_inclusive_total=")
	builder.WriteString(fmt.Sprintf("%v", _m.TaxesInclusiveTotal))
	builder.WriteString(", ")
	builder.WriteString("taxes_exclusive_total=")
	builder.WriteString(fmt.Sprintf("%v", _m.TaxesExclusiveTotal))
	builder.WriteString(", ")
	builder.WriteString("charges_total=")
	builder.WriteString(fmt.Sprintf("%v", _m.ChargesTotal))
	builder.WriteString(", ")
	builder.WriteString("discounts_total=")
	builder.WriteString(fmt.Sprintf("%v", _m.DiscountsTotal))
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", _m.Total))
	builder.WriteString(", ")
	builder.WriteString("period_start=")
	builder.WriteString(_m.PeriodStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("period_end=")
	builder.WriteString(_m.PeriodEnd.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("invoice_id=")
	builder.WriteString(_m.InvoiceID)
	builder.WriteString(", ")
	builder.WriteString("managed_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.ManagedBy))
	builder.WriteString(", ")
	if v := _m.ParentLineID; v != nil {
		builder.WriteString("parent_line_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("invoice_at=")
	builder.WriteString(_m.InvoiceAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	if v := _m.Quantity; v != nil {
		builder.WriteString("quantity=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.RatecardDiscounts; v != nil {
		builder.WriteString("ratecard_discounts=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.InvoicingAppExternalID; v != nil {
		builder.WriteString("invoicing_app_external_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.ChildUniqueReferenceID; v != nil {
		builder.WriteString("child_unique_reference_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.SubscriptionID; v != nil {
		builder.WriteString("subscription_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.SubscriptionPhaseID; v != nil {
		builder.WriteString("subscription_phase_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.SubscriptionItemID; v != nil {
		builder.WriteString("subscription_item_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.SplitLineGroupID; v != nil {
		builder.WriteString("split_line_group_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.LineIds; v != nil {
		builder.WriteString("line_ids=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// BillingInvoiceLines is a parsable slice of BillingInvoiceLine.
type BillingInvoiceLines []*BillingInvoiceLine
