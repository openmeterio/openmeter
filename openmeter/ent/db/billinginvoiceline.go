// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alpacahq/alpacadecimal"
	billingentity "github.com/openmeterio/openmeter/openmeter/billing/entity"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicemanuallineconfig"
	"github.com/openmeterio/openmeter/pkg/currencyx"
)

// BillingInvoiceLine is the model entity for the BillingInvoiceLine schema.
type BillingInvoiceLine struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// InvoiceID holds the value of the "invoice_id" field.
	InvoiceID string `json:"invoice_id,omitempty"`
	// PeriodStart holds the value of the "period_start" field.
	PeriodStart time.Time `json:"period_start,omitempty"`
	// PeriodEnd holds the value of the "period_end" field.
	PeriodEnd time.Time `json:"period_end,omitempty"`
	// InvoiceAt holds the value of the "invoice_at" field.
	InvoiceAt time.Time `json:"invoice_at,omitempty"`
	// Type holds the value of the "type" field.
	Type billingentity.InvoiceLineType `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status billingentity.InvoiceLineStatus `json:"status,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency currencyx.Code `json:"currency,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity *alpacadecimal.Decimal `json:"quantity,omitempty"`
	// TaxOverrides holds the value of the "tax_overrides" field.
	TaxOverrides *billingentity.TaxOverrides `json:"tax_overrides,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingInvoiceLineQuery when eager-loading is set.
	Edges                 BillingInvoiceLineEdges `json:"edges"`
	manual_line_config_id *string
	selectValues          sql.SelectValues
}

// BillingInvoiceLineEdges holds the relations/edges for other nodes in the graph.
type BillingInvoiceLineEdges struct {
	// BillingInvoice holds the value of the billing_invoice edge.
	BillingInvoice *BillingInvoice `json:"billing_invoice,omitempty"`
	// BillingInvoiceManualLines holds the value of the billing_invoice_manual_lines edge.
	BillingInvoiceManualLines *BillingInvoiceManualLineConfig `json:"billing_invoice_manual_lines,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BillingInvoiceOrErr returns the BillingInvoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceLineEdges) BillingInvoiceOrErr() (*BillingInvoice, error) {
	if e.BillingInvoice != nil {
		return e.BillingInvoice, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: billinginvoice.Label}
	}
	return nil, &NotLoadedError{edge: "billing_invoice"}
}

// BillingInvoiceManualLinesOrErr returns the BillingInvoiceManualLines value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceLineEdges) BillingInvoiceManualLinesOrErr() (*BillingInvoiceManualLineConfig, error) {
	if e.BillingInvoiceManualLines != nil {
		return e.BillingInvoiceManualLines, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: billinginvoicemanuallineconfig.Label}
	}
	return nil, &NotLoadedError{edge: "billing_invoice_manual_lines"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingInvoiceLine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billinginvoiceline.FieldQuantity:
			values[i] = &sql.NullScanner{S: new(alpacadecimal.Decimal)}
		case billinginvoiceline.FieldMetadata, billinginvoiceline.FieldTaxOverrides:
			values[i] = new([]byte)
		case billinginvoiceline.FieldID, billinginvoiceline.FieldNamespace, billinginvoiceline.FieldName, billinginvoiceline.FieldDescription, billinginvoiceline.FieldInvoiceID, billinginvoiceline.FieldType, billinginvoiceline.FieldStatus, billinginvoiceline.FieldCurrency:
			values[i] = new(sql.NullString)
		case billinginvoiceline.FieldCreatedAt, billinginvoiceline.FieldUpdatedAt, billinginvoiceline.FieldDeletedAt, billinginvoiceline.FieldPeriodStart, billinginvoiceline.FieldPeriodEnd, billinginvoiceline.FieldInvoiceAt:
			values[i] = new(sql.NullTime)
		case billinginvoiceline.ForeignKeys[0]: // manual_line_config_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingInvoiceLine fields.
func (bil *BillingInvoiceLine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billinginvoiceline.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bil.ID = value.String
			}
		case billinginvoiceline.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				bil.Namespace = value.String
			}
		case billinginvoiceline.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bil.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case billinginvoiceline.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bil.CreatedAt = value.Time
			}
		case billinginvoiceline.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bil.UpdatedAt = value.Time
			}
		case billinginvoiceline.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bil.DeletedAt = new(time.Time)
				*bil.DeletedAt = value.Time
			}
		case billinginvoiceline.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bil.Name = value.String
			}
		case billinginvoiceline.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				bil.Description = new(string)
				*bil.Description = value.String
			}
		case billinginvoiceline.FieldInvoiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_id", values[i])
			} else if value.Valid {
				bil.InvoiceID = value.String
			}
		case billinginvoiceline.FieldPeriodStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_start", values[i])
			} else if value.Valid {
				bil.PeriodStart = value.Time
			}
		case billinginvoiceline.FieldPeriodEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_end", values[i])
			} else if value.Valid {
				bil.PeriodEnd = value.Time
			}
		case billinginvoiceline.FieldInvoiceAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_at", values[i])
			} else if value.Valid {
				bil.InvoiceAt = value.Time
			}
		case billinginvoiceline.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				bil.Type = billingentity.InvoiceLineType(value.String)
			}
		case billinginvoiceline.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				bil.Status = billingentity.InvoiceLineStatus(value.String)
			}
		case billinginvoiceline.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				bil.Currency = currencyx.Code(value.String)
			}
		case billinginvoiceline.FieldQuantity:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				bil.Quantity = new(alpacadecimal.Decimal)
				*bil.Quantity = *value.S.(*alpacadecimal.Decimal)
			}
		case billinginvoiceline.FieldTaxOverrides:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tax_overrides", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bil.TaxOverrides); err != nil {
					return fmt.Errorf("unmarshal field tax_overrides: %w", err)
				}
			}
		case billinginvoiceline.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manual_line_config_id", values[i])
			} else if value.Valid {
				bil.manual_line_config_id = new(string)
				*bil.manual_line_config_id = value.String
			}
		default:
			bil.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingInvoiceLine.
// This includes values selected through modifiers, order, etc.
func (bil *BillingInvoiceLine) Value(name string) (ent.Value, error) {
	return bil.selectValues.Get(name)
}

// QueryBillingInvoice queries the "billing_invoice" edge of the BillingInvoiceLine entity.
func (bil *BillingInvoiceLine) QueryBillingInvoice() *BillingInvoiceQuery {
	return NewBillingInvoiceLineClient(bil.config).QueryBillingInvoice(bil)
}

// QueryBillingInvoiceManualLines queries the "billing_invoice_manual_lines" edge of the BillingInvoiceLine entity.
func (bil *BillingInvoiceLine) QueryBillingInvoiceManualLines() *BillingInvoiceManualLineConfigQuery {
	return NewBillingInvoiceLineClient(bil.config).QueryBillingInvoiceManualLines(bil)
}

// Update returns a builder for updating this BillingInvoiceLine.
// Note that you need to call BillingInvoiceLine.Unwrap() before calling this method if this BillingInvoiceLine
// was returned from a transaction, and the transaction was committed or rolled back.
func (bil *BillingInvoiceLine) Update() *BillingInvoiceLineUpdateOne {
	return NewBillingInvoiceLineClient(bil.config).UpdateOne(bil)
}

// Unwrap unwraps the BillingInvoiceLine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bil *BillingInvoiceLine) Unwrap() *BillingInvoiceLine {
	_tx, ok := bil.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingInvoiceLine is not a transactional entity")
	}
	bil.config.driver = _tx.drv
	return bil
}

// String implements the fmt.Stringer.
func (bil *BillingInvoiceLine) String() string {
	var builder strings.Builder
	builder.WriteString("BillingInvoiceLine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bil.ID))
	builder.WriteString("namespace=")
	builder.WriteString(bil.Namespace)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", bil.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bil.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bil.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bil.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(bil.Name)
	builder.WriteString(", ")
	if v := bil.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("invoice_id=")
	builder.WriteString(bil.InvoiceID)
	builder.WriteString(", ")
	builder.WriteString("period_start=")
	builder.WriteString(bil.PeriodStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("period_end=")
	builder.WriteString(bil.PeriodEnd.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("invoice_at=")
	builder.WriteString(bil.InvoiceAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", bil.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", bil.Status))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(fmt.Sprintf("%v", bil.Currency))
	builder.WriteString(", ")
	if v := bil.Quantity; v != nil {
		builder.WriteString("quantity=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("tax_overrides=")
	builder.WriteString(fmt.Sprintf("%v", bil.TaxOverrides))
	builder.WriteByte(')')
	return builder.String()
}

// BillingInvoiceLines is a parsable slice of BillingInvoiceLine.
type BillingInvoiceLines []*BillingInvoiceLine
