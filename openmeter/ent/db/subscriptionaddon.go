// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddon"
)

// SubscriptionAddon is the model entity for the SubscriptionAddon schema.
type SubscriptionAddon struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// AddonID holds the value of the "addon_id" field.
	AddonID string `json:"addon_id,omitempty"`
	// SubscriptionID holds the value of the "subscription_id" field.
	SubscriptionID string `json:"subscription_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionAddonQuery when eager-loading is set.
	Edges        SubscriptionAddonEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubscriptionAddonEdges holds the relations/edges for other nodes in the graph.
type SubscriptionAddonEdges struct {
	// Subscription holds the value of the subscription edge.
	Subscription *Subscription `json:"subscription,omitempty"`
	// RateCards holds the value of the rate_cards edge.
	RateCards []*SubscriptionAddonRateCard `json:"rate_cards,omitempty"`
	// Quantities holds the value of the quantities edge.
	Quantities []*SubscriptionAddonQuantity `json:"quantities,omitempty"`
	// Addon holds the value of the addon edge.
	Addon *Addon `json:"addon,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// SubscriptionOrErr returns the Subscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionAddonEdges) SubscriptionOrErr() (*Subscription, error) {
	if e.Subscription != nil {
		return e.Subscription, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: subscription.Label}
	}
	return nil, &NotLoadedError{edge: "subscription"}
}

// RateCardsOrErr returns the RateCards value or an error if the edge
// was not loaded in eager-loading.
func (e SubscriptionAddonEdges) RateCardsOrErr() ([]*SubscriptionAddonRateCard, error) {
	if e.loadedTypes[1] {
		return e.RateCards, nil
	}
	return nil, &NotLoadedError{edge: "rate_cards"}
}

// QuantitiesOrErr returns the Quantities value or an error if the edge
// was not loaded in eager-loading.
func (e SubscriptionAddonEdges) QuantitiesOrErr() ([]*SubscriptionAddonQuantity, error) {
	if e.loadedTypes[2] {
		return e.Quantities, nil
	}
	return nil, &NotLoadedError{edge: "quantities"}
}

// AddonOrErr returns the Addon value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionAddonEdges) AddonOrErr() (*Addon, error) {
	if e.Addon != nil {
		return e.Addon, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: addon.Label}
	}
	return nil, &NotLoadedError{edge: "addon"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionAddon) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptionaddon.FieldMetadata:
			values[i] = new([]byte)
		case subscriptionaddon.FieldID, subscriptionaddon.FieldNamespace, subscriptionaddon.FieldAddonID, subscriptionaddon.FieldSubscriptionID:
			values[i] = new(sql.NullString)
		case subscriptionaddon.FieldCreatedAt, subscriptionaddon.FieldUpdatedAt, subscriptionaddon.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionAddon fields.
func (sa *SubscriptionAddon) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptionaddon.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sa.ID = value.String
			}
		case subscriptionaddon.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				sa.Namespace = value.String
			}
		case subscriptionaddon.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sa.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case subscriptionaddon.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sa.CreatedAt = value.Time
			}
		case subscriptionaddon.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sa.UpdatedAt = value.Time
			}
		case subscriptionaddon.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sa.DeletedAt = new(time.Time)
				*sa.DeletedAt = value.Time
			}
		case subscriptionaddon.FieldAddonID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field addon_id", values[i])
			} else if value.Valid {
				sa.AddonID = value.String
			}
		case subscriptionaddon.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				sa.SubscriptionID = value.String
			}
		default:
			sa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscriptionAddon.
// This includes values selected through modifiers, order, etc.
func (sa *SubscriptionAddon) Value(name string) (ent.Value, error) {
	return sa.selectValues.Get(name)
}

// QuerySubscription queries the "subscription" edge of the SubscriptionAddon entity.
func (sa *SubscriptionAddon) QuerySubscription() *SubscriptionQuery {
	return NewSubscriptionAddonClient(sa.config).QuerySubscription(sa)
}

// QueryRateCards queries the "rate_cards" edge of the SubscriptionAddon entity.
func (sa *SubscriptionAddon) QueryRateCards() *SubscriptionAddonRateCardQuery {
	return NewSubscriptionAddonClient(sa.config).QueryRateCards(sa)
}

// QueryQuantities queries the "quantities" edge of the SubscriptionAddon entity.
func (sa *SubscriptionAddon) QueryQuantities() *SubscriptionAddonQuantityQuery {
	return NewSubscriptionAddonClient(sa.config).QueryQuantities(sa)
}

// QueryAddon queries the "addon" edge of the SubscriptionAddon entity.
func (sa *SubscriptionAddon) QueryAddon() *AddonQuery {
	return NewSubscriptionAddonClient(sa.config).QueryAddon(sa)
}

// Update returns a builder for updating this SubscriptionAddon.
// Note that you need to call SubscriptionAddon.Unwrap() before calling this method if this SubscriptionAddon
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *SubscriptionAddon) Update() *SubscriptionAddonUpdateOne {
	return NewSubscriptionAddonClient(sa.config).UpdateOne(sa)
}

// Unwrap unwraps the SubscriptionAddon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *SubscriptionAddon) Unwrap() *SubscriptionAddon {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("db: SubscriptionAddon is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *SubscriptionAddon) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionAddon(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	builder.WriteString("namespace=")
	builder.WriteString(sa.Namespace)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", sa.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := sa.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("addon_id=")
	builder.WriteString(sa.AddonID)
	builder.WriteString(", ")
	builder.WriteString("subscription_id=")
	builder.WriteString(sa.SubscriptionID)
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionAddons is a parsable slice of SubscriptionAddon.
type SubscriptionAddons []*SubscriptionAddon
