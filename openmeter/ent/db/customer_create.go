// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustomer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomeroverride"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customersubjects"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/pkg/currencyx"
	"github.com/openmeterio/openmeter/pkg/models"
)

// CustomerCreate is the builder for creating a Customer entity.
type CustomerCreate struct {
	config
	mutation *CustomerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (_c *CustomerCreate) SetNamespace(v string) *CustomerCreate {
	_c.mutation.SetNamespace(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *CustomerCreate) SetMetadata(v map[string]string) *CustomerCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *CustomerCreate) SetCreatedAt(v time.Time) *CustomerCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *CustomerCreate) SetNillableCreatedAt(v *time.Time) *CustomerCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *CustomerCreate) SetUpdatedAt(v time.Time) *CustomerCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *CustomerCreate) SetNillableUpdatedAt(v *time.Time) *CustomerCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *CustomerCreate) SetDeletedAt(v time.Time) *CustomerCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *CustomerCreate) SetNillableDeletedAt(v *time.Time) *CustomerCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *CustomerCreate) SetName(v string) *CustomerCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *CustomerCreate) SetDescription(v string) *CustomerCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *CustomerCreate) SetNillableDescription(v *string) *CustomerCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetBillingAddressCountry sets the "billing_address_country" field.
func (_c *CustomerCreate) SetBillingAddressCountry(v models.CountryCode) *CustomerCreate {
	_c.mutation.SetBillingAddressCountry(v)
	return _c
}

// SetNillableBillingAddressCountry sets the "billing_address_country" field if the given value is not nil.
func (_c *CustomerCreate) SetNillableBillingAddressCountry(v *models.CountryCode) *CustomerCreate {
	if v != nil {
		_c.SetBillingAddressCountry(*v)
	}
	return _c
}

// SetBillingAddressPostalCode sets the "billing_address_postal_code" field.
func (_c *CustomerCreate) SetBillingAddressPostalCode(v string) *CustomerCreate {
	_c.mutation.SetBillingAddressPostalCode(v)
	return _c
}

// SetNillableBillingAddressPostalCode sets the "billing_address_postal_code" field if the given value is not nil.
func (_c *CustomerCreate) SetNillableBillingAddressPostalCode(v *string) *CustomerCreate {
	if v != nil {
		_c.SetBillingAddressPostalCode(*v)
	}
	return _c
}

// SetBillingAddressState sets the "billing_address_state" field.
func (_c *CustomerCreate) SetBillingAddressState(v string) *CustomerCreate {
	_c.mutation.SetBillingAddressState(v)
	return _c
}

// SetNillableBillingAddressState sets the "billing_address_state" field if the given value is not nil.
func (_c *CustomerCreate) SetNillableBillingAddressState(v *string) *CustomerCreate {
	if v != nil {
		_c.SetBillingAddressState(*v)
	}
	return _c
}

// SetBillingAddressCity sets the "billing_address_city" field.
func (_c *CustomerCreate) SetBillingAddressCity(v string) *CustomerCreate {
	_c.mutation.SetBillingAddressCity(v)
	return _c
}

// SetNillableBillingAddressCity sets the "billing_address_city" field if the given value is not nil.
func (_c *CustomerCreate) SetNillableBillingAddressCity(v *string) *CustomerCreate {
	if v != nil {
		_c.SetBillingAddressCity(*v)
	}
	return _c
}

// SetBillingAddressLine1 sets the "billing_address_line1" field.
func (_c *CustomerCreate) SetBillingAddressLine1(v string) *CustomerCreate {
	_c.mutation.SetBillingAddressLine1(v)
	return _c
}

// SetNillableBillingAddressLine1 sets the "billing_address_line1" field if the given value is not nil.
func (_c *CustomerCreate) SetNillableBillingAddressLine1(v *string) *CustomerCreate {
	if v != nil {
		_c.SetBillingAddressLine1(*v)
	}
	return _c
}

// SetBillingAddressLine2 sets the "billing_address_line2" field.
func (_c *CustomerCreate) SetBillingAddressLine2(v string) *CustomerCreate {
	_c.mutation.SetBillingAddressLine2(v)
	return _c
}

// SetNillableBillingAddressLine2 sets the "billing_address_line2" field if the given value is not nil.
func (_c *CustomerCreate) SetNillableBillingAddressLine2(v *string) *CustomerCreate {
	if v != nil {
		_c.SetBillingAddressLine2(*v)
	}
	return _c
}

// SetBillingAddressPhoneNumber sets the "billing_address_phone_number" field.
func (_c *CustomerCreate) SetBillingAddressPhoneNumber(v string) *CustomerCreate {
	_c.mutation.SetBillingAddressPhoneNumber(v)
	return _c
}

// SetNillableBillingAddressPhoneNumber sets the "billing_address_phone_number" field if the given value is not nil.
func (_c *CustomerCreate) SetNillableBillingAddressPhoneNumber(v *string) *CustomerCreate {
	if v != nil {
		_c.SetBillingAddressPhoneNumber(*v)
	}
	return _c
}

// SetAnnotations sets the "annotations" field.
func (_c *CustomerCreate) SetAnnotations(v models.Annotations) *CustomerCreate {
	_c.mutation.SetAnnotations(v)
	return _c
}

// SetKey sets the "key" field.
func (_c *CustomerCreate) SetKey(v string) *CustomerCreate {
	_c.mutation.SetKey(v)
	return _c
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_c *CustomerCreate) SetNillableKey(v *string) *CustomerCreate {
	if v != nil {
		_c.SetKey(*v)
	}
	return _c
}

// SetPrimaryEmail sets the "primary_email" field.
func (_c *CustomerCreate) SetPrimaryEmail(v string) *CustomerCreate {
	_c.mutation.SetPrimaryEmail(v)
	return _c
}

// SetNillablePrimaryEmail sets the "primary_email" field if the given value is not nil.
func (_c *CustomerCreate) SetNillablePrimaryEmail(v *string) *CustomerCreate {
	if v != nil {
		_c.SetPrimaryEmail(*v)
	}
	return _c
}

// SetCurrency sets the "currency" field.
func (_c *CustomerCreate) SetCurrency(v currencyx.Code) *CustomerCreate {
	_c.mutation.SetCurrency(v)
	return _c
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_c *CustomerCreate) SetNillableCurrency(v *currencyx.Code) *CustomerCreate {
	if v != nil {
		_c.SetCurrency(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *CustomerCreate) SetID(v string) *CustomerCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *CustomerCreate) SetNillableID(v *string) *CustomerCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddAppIDs adds the "apps" edge to the AppCustomer entity by IDs.
func (_c *CustomerCreate) AddAppIDs(ids ...int) *CustomerCreate {
	_c.mutation.AddAppIDs(ids...)
	return _c
}

// AddApps adds the "apps" edges to the AppCustomer entity.
func (_c *CustomerCreate) AddApps(v ...*AppCustomer) *CustomerCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAppIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the CustomerSubjects entity by IDs.
func (_c *CustomerCreate) AddSubjectIDs(ids ...int) *CustomerCreate {
	_c.mutation.AddSubjectIDs(ids...)
	return _c
}

// AddSubjects adds the "subjects" edges to the CustomerSubjects entity.
func (_c *CustomerCreate) AddSubjects(v ...*CustomerSubjects) *CustomerCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSubjectIDs(ids...)
}

// SetBillingCustomerOverrideID sets the "billing_customer_override" edge to the BillingCustomerOverride entity by ID.
func (_c *CustomerCreate) SetBillingCustomerOverrideID(id string) *CustomerCreate {
	_c.mutation.SetBillingCustomerOverrideID(id)
	return _c
}

// SetNillableBillingCustomerOverrideID sets the "billing_customer_override" edge to the BillingCustomerOverride entity by ID if the given value is not nil.
func (_c *CustomerCreate) SetNillableBillingCustomerOverrideID(id *string) *CustomerCreate {
	if id != nil {
		_c = _c.SetBillingCustomerOverrideID(*id)
	}
	return _c
}

// SetBillingCustomerOverride sets the "billing_customer_override" edge to the BillingCustomerOverride entity.
func (_c *CustomerCreate) SetBillingCustomerOverride(v *BillingCustomerOverride) *CustomerCreate {
	return _c.SetBillingCustomerOverrideID(v.ID)
}

// AddBillingInvoiceIDs adds the "billing_invoice" edge to the BillingInvoice entity by IDs.
func (_c *CustomerCreate) AddBillingInvoiceIDs(ids ...string) *CustomerCreate {
	_c.mutation.AddBillingInvoiceIDs(ids...)
	return _c
}

// AddBillingInvoice adds the "billing_invoice" edges to the BillingInvoice entity.
func (_c *CustomerCreate) AddBillingInvoice(v ...*BillingInvoice) *CustomerCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddBillingInvoiceIDs(ids...)
}

// AddSubscriptionIDs adds the "subscription" edge to the Subscription entity by IDs.
func (_c *CustomerCreate) AddSubscriptionIDs(ids ...string) *CustomerCreate {
	_c.mutation.AddSubscriptionIDs(ids...)
	return _c
}

// AddSubscription adds the "subscription" edges to the Subscription entity.
func (_c *CustomerCreate) AddSubscription(v ...*Subscription) *CustomerCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSubscriptionIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (_c *CustomerCreate) Mutation() *CustomerMutation {
	return _c.mutation
}

// Save creates the Customer in the database.
func (_c *CustomerCreate) Save(ctx context.Context) (*Customer, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *CustomerCreate) SaveX(ctx context.Context) *Customer {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CustomerCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CustomerCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *CustomerCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := customer.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := customer.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := customer.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *CustomerCreate) check() error {
	if _, ok := _c.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "Customer.namespace"`)}
	}
	if v, ok := _c.mutation.Namespace(); ok {
		if err := customer.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "Customer.namespace": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Customer.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Customer.updated_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "Customer.name"`)}
	}
	if v, ok := _c.mutation.BillingAddressCountry(); ok {
		if err := customer.BillingAddressCountryValidator(string(v)); err != nil {
			return &ValidationError{Name: "billing_address_country", err: fmt.Errorf(`db: validator failed for field "Customer.billing_address_country": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Currency(); ok {
		if err := customer.CurrencyValidator(string(v)); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`db: validator failed for field "Customer.currency": %w`, err)}
		}
	}
	return nil
}

func (_c *CustomerCreate) sqlSave(ctx context.Context) (*Customer, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Customer.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *CustomerCreate) createSpec() (*Customer, *sqlgraph.CreateSpec) {
	var (
		_node = &Customer{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(customer.Table, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Namespace(); ok {
		_spec.SetField(customer.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(customer.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(customer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(customer.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(customer.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.BillingAddressCountry(); ok {
		_spec.SetField(customer.FieldBillingAddressCountry, field.TypeString, value)
		_node.BillingAddressCountry = &value
	}
	if value, ok := _c.mutation.BillingAddressPostalCode(); ok {
		_spec.SetField(customer.FieldBillingAddressPostalCode, field.TypeString, value)
		_node.BillingAddressPostalCode = &value
	}
	if value, ok := _c.mutation.BillingAddressState(); ok {
		_spec.SetField(customer.FieldBillingAddressState, field.TypeString, value)
		_node.BillingAddressState = &value
	}
	if value, ok := _c.mutation.BillingAddressCity(); ok {
		_spec.SetField(customer.FieldBillingAddressCity, field.TypeString, value)
		_node.BillingAddressCity = &value
	}
	if value, ok := _c.mutation.BillingAddressLine1(); ok {
		_spec.SetField(customer.FieldBillingAddressLine1, field.TypeString, value)
		_node.BillingAddressLine1 = &value
	}
	if value, ok := _c.mutation.BillingAddressLine2(); ok {
		_spec.SetField(customer.FieldBillingAddressLine2, field.TypeString, value)
		_node.BillingAddressLine2 = &value
	}
	if value, ok := _c.mutation.BillingAddressPhoneNumber(); ok {
		_spec.SetField(customer.FieldBillingAddressPhoneNumber, field.TypeString, value)
		_node.BillingAddressPhoneNumber = &value
	}
	if value, ok := _c.mutation.Annotations(); ok {
		_spec.SetField(customer.FieldAnnotations, field.TypeJSON, value)
		_node.Annotations = value
	}
	if value, ok := _c.mutation.Key(); ok {
		_spec.SetField(customer.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := _c.mutation.PrimaryEmail(); ok {
		_spec.SetField(customer.FieldPrimaryEmail, field.TypeString, value)
		_node.PrimaryEmail = &value
	}
	if value, ok := _c.mutation.Currency(); ok {
		_spec.SetField(customer.FieldCurrency, field.TypeString, value)
		_node.Currency = &value
	}
	if nodes := _c.mutation.AppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AppsTable,
			Columns: []string{customer.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubjectsTable,
			Columns: []string{customer.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersubjects.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BillingCustomerOverrideIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BillingCustomerOverrideTable,
			Columns: []string{customer.BillingCustomerOverrideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.BillingInvoiceTable,
			Columns: []string{customer.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubscriptionTable,
			Columns: []string{customer.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Customer.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *CustomerCreate) OnConflict(opts ...sql.ConflictOption) *CustomerUpsertOne {
	_c.conflict = opts
	return &CustomerUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *CustomerCreate) OnConflictColumns(columns ...string) *CustomerUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &CustomerUpsertOne{
		create: _c,
	}
}

type (
	// CustomerUpsertOne is the builder for "upsert"-ing
	//  one Customer node.
	CustomerUpsertOne struct {
		create *CustomerCreate
	}

	// CustomerUpsert is the "OnConflict" setter.
	CustomerUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *CustomerUpsert) SetMetadata(v map[string]string) *CustomerUpsert {
	u.Set(customer.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateMetadata() *CustomerUpsert {
	u.SetExcluded(customer.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *CustomerUpsert) ClearMetadata() *CustomerUpsert {
	u.SetNull(customer.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerUpsert) SetUpdatedAt(v time.Time) *CustomerUpsert {
	u.Set(customer.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateUpdatedAt() *CustomerUpsert {
	u.SetExcluded(customer.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CustomerUpsert) SetDeletedAt(v time.Time) *CustomerUpsert {
	u.Set(customer.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateDeletedAt() *CustomerUpsert {
	u.SetExcluded(customer.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CustomerUpsert) ClearDeletedAt() *CustomerUpsert {
	u.SetNull(customer.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *CustomerUpsert) SetName(v string) *CustomerUpsert {
	u.Set(customer.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateName() *CustomerUpsert {
	u.SetExcluded(customer.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *CustomerUpsert) SetDescription(v string) *CustomerUpsert {
	u.Set(customer.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateDescription() *CustomerUpsert {
	u.SetExcluded(customer.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *CustomerUpsert) ClearDescription() *CustomerUpsert {
	u.SetNull(customer.FieldDescription)
	return u
}

// SetBillingAddressCountry sets the "billing_address_country" field.
func (u *CustomerUpsert) SetBillingAddressCountry(v models.CountryCode) *CustomerUpsert {
	u.Set(customer.FieldBillingAddressCountry, v)
	return u
}

// UpdateBillingAddressCountry sets the "billing_address_country" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateBillingAddressCountry() *CustomerUpsert {
	u.SetExcluded(customer.FieldBillingAddressCountry)
	return u
}

// ClearBillingAddressCountry clears the value of the "billing_address_country" field.
func (u *CustomerUpsert) ClearBillingAddressCountry() *CustomerUpsert {
	u.SetNull(customer.FieldBillingAddressCountry)
	return u
}

// SetBillingAddressPostalCode sets the "billing_address_postal_code" field.
func (u *CustomerUpsert) SetBillingAddressPostalCode(v string) *CustomerUpsert {
	u.Set(customer.FieldBillingAddressPostalCode, v)
	return u
}

// UpdateBillingAddressPostalCode sets the "billing_address_postal_code" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateBillingAddressPostalCode() *CustomerUpsert {
	u.SetExcluded(customer.FieldBillingAddressPostalCode)
	return u
}

// ClearBillingAddressPostalCode clears the value of the "billing_address_postal_code" field.
func (u *CustomerUpsert) ClearBillingAddressPostalCode() *CustomerUpsert {
	u.SetNull(customer.FieldBillingAddressPostalCode)
	return u
}

// SetBillingAddressState sets the "billing_address_state" field.
func (u *CustomerUpsert) SetBillingAddressState(v string) *CustomerUpsert {
	u.Set(customer.FieldBillingAddressState, v)
	return u
}

// UpdateBillingAddressState sets the "billing_address_state" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateBillingAddressState() *CustomerUpsert {
	u.SetExcluded(customer.FieldBillingAddressState)
	return u
}

// ClearBillingAddressState clears the value of the "billing_address_state" field.
func (u *CustomerUpsert) ClearBillingAddressState() *CustomerUpsert {
	u.SetNull(customer.FieldBillingAddressState)
	return u
}

// SetBillingAddressCity sets the "billing_address_city" field.
func (u *CustomerUpsert) SetBillingAddressCity(v string) *CustomerUpsert {
	u.Set(customer.FieldBillingAddressCity, v)
	return u
}

// UpdateBillingAddressCity sets the "billing_address_city" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateBillingAddressCity() *CustomerUpsert {
	u.SetExcluded(customer.FieldBillingAddressCity)
	return u
}

// ClearBillingAddressCity clears the value of the "billing_address_city" field.
func (u *CustomerUpsert) ClearBillingAddressCity() *CustomerUpsert {
	u.SetNull(customer.FieldBillingAddressCity)
	return u
}

// SetBillingAddressLine1 sets the "billing_address_line1" field.
func (u *CustomerUpsert) SetBillingAddressLine1(v string) *CustomerUpsert {
	u.Set(customer.FieldBillingAddressLine1, v)
	return u
}

// UpdateBillingAddressLine1 sets the "billing_address_line1" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateBillingAddressLine1() *CustomerUpsert {
	u.SetExcluded(customer.FieldBillingAddressLine1)
	return u
}

// ClearBillingAddressLine1 clears the value of the "billing_address_line1" field.
func (u *CustomerUpsert) ClearBillingAddressLine1() *CustomerUpsert {
	u.SetNull(customer.FieldBillingAddressLine1)
	return u
}

// SetBillingAddressLine2 sets the "billing_address_line2" field.
func (u *CustomerUpsert) SetBillingAddressLine2(v string) *CustomerUpsert {
	u.Set(customer.FieldBillingAddressLine2, v)
	return u
}

// UpdateBillingAddressLine2 sets the "billing_address_line2" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateBillingAddressLine2() *CustomerUpsert {
	u.SetExcluded(customer.FieldBillingAddressLine2)
	return u
}

// ClearBillingAddressLine2 clears the value of the "billing_address_line2" field.
func (u *CustomerUpsert) ClearBillingAddressLine2() *CustomerUpsert {
	u.SetNull(customer.FieldBillingAddressLine2)
	return u
}

// SetBillingAddressPhoneNumber sets the "billing_address_phone_number" field.
func (u *CustomerUpsert) SetBillingAddressPhoneNumber(v string) *CustomerUpsert {
	u.Set(customer.FieldBillingAddressPhoneNumber, v)
	return u
}

// UpdateBillingAddressPhoneNumber sets the "billing_address_phone_number" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateBillingAddressPhoneNumber() *CustomerUpsert {
	u.SetExcluded(customer.FieldBillingAddressPhoneNumber)
	return u
}

// ClearBillingAddressPhoneNumber clears the value of the "billing_address_phone_number" field.
func (u *CustomerUpsert) ClearBillingAddressPhoneNumber() *CustomerUpsert {
	u.SetNull(customer.FieldBillingAddressPhoneNumber)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *CustomerUpsert) SetAnnotations(v models.Annotations) *CustomerUpsert {
	u.Set(customer.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateAnnotations() *CustomerUpsert {
	u.SetExcluded(customer.FieldAnnotations)
	return u
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *CustomerUpsert) ClearAnnotations() *CustomerUpsert {
	u.SetNull(customer.FieldAnnotations)
	return u
}

// SetKey sets the "key" field.
func (u *CustomerUpsert) SetKey(v string) *CustomerUpsert {
	u.Set(customer.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateKey() *CustomerUpsert {
	u.SetExcluded(customer.FieldKey)
	return u
}

// ClearKey clears the value of the "key" field.
func (u *CustomerUpsert) ClearKey() *CustomerUpsert {
	u.SetNull(customer.FieldKey)
	return u
}

// SetPrimaryEmail sets the "primary_email" field.
func (u *CustomerUpsert) SetPrimaryEmail(v string) *CustomerUpsert {
	u.Set(customer.FieldPrimaryEmail, v)
	return u
}

// UpdatePrimaryEmail sets the "primary_email" field to the value that was provided on create.
func (u *CustomerUpsert) UpdatePrimaryEmail() *CustomerUpsert {
	u.SetExcluded(customer.FieldPrimaryEmail)
	return u
}

// ClearPrimaryEmail clears the value of the "primary_email" field.
func (u *CustomerUpsert) ClearPrimaryEmail() *CustomerUpsert {
	u.SetNull(customer.FieldPrimaryEmail)
	return u
}

// SetCurrency sets the "currency" field.
func (u *CustomerUpsert) SetCurrency(v currencyx.Code) *CustomerUpsert {
	u.Set(customer.FieldCurrency, v)
	return u
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateCurrency() *CustomerUpsert {
	u.SetExcluded(customer.FieldCurrency)
	return u
}

// ClearCurrency clears the value of the "currency" field.
func (u *CustomerUpsert) ClearCurrency() *CustomerUpsert {
	u.SetNull(customer.FieldCurrency)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerUpsertOne) UpdateNewValues() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(customer.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(customer.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(customer.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CustomerUpsertOne) Ignore() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerUpsertOne) DoNothing() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerCreate.OnConflict
// documentation for more info.
func (u *CustomerUpsertOne) Update(set func(*CustomerUpsert)) *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *CustomerUpsertOne) SetMetadata(v map[string]string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateMetadata() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *CustomerUpsertOne) ClearMetadata() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerUpsertOne) SetUpdatedAt(v time.Time) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateUpdatedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CustomerUpsertOne) SetDeletedAt(v time.Time) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateDeletedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CustomerUpsertOne) ClearDeletedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *CustomerUpsertOne) SetName(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *CustomerUpsertOne) SetDescription(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateDescription() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *CustomerUpsertOne) ClearDescription() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearDescription()
	})
}

// SetBillingAddressCountry sets the "billing_address_country" field.
func (u *CustomerUpsertOne) SetBillingAddressCountry(v models.CountryCode) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetBillingAddressCountry(v)
	})
}

// UpdateBillingAddressCountry sets the "billing_address_country" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateBillingAddressCountry() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateBillingAddressCountry()
	})
}

// ClearBillingAddressCountry clears the value of the "billing_address_country" field.
func (u *CustomerUpsertOne) ClearBillingAddressCountry() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearBillingAddressCountry()
	})
}

// SetBillingAddressPostalCode sets the "billing_address_postal_code" field.
func (u *CustomerUpsertOne) SetBillingAddressPostalCode(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetBillingAddressPostalCode(v)
	})
}

// UpdateBillingAddressPostalCode sets the "billing_address_postal_code" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateBillingAddressPostalCode() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateBillingAddressPostalCode()
	})
}

// ClearBillingAddressPostalCode clears the value of the "billing_address_postal_code" field.
func (u *CustomerUpsertOne) ClearBillingAddressPostalCode() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearBillingAddressPostalCode()
	})
}

// SetBillingAddressState sets the "billing_address_state" field.
func (u *CustomerUpsertOne) SetBillingAddressState(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetBillingAddressState(v)
	})
}

// UpdateBillingAddressState sets the "billing_address_state" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateBillingAddressState() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateBillingAddressState()
	})
}

// ClearBillingAddressState clears the value of the "billing_address_state" field.
func (u *CustomerUpsertOne) ClearBillingAddressState() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearBillingAddressState()
	})
}

// SetBillingAddressCity sets the "billing_address_city" field.
func (u *CustomerUpsertOne) SetBillingAddressCity(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetBillingAddressCity(v)
	})
}

// UpdateBillingAddressCity sets the "billing_address_city" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateBillingAddressCity() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateBillingAddressCity()
	})
}

// ClearBillingAddressCity clears the value of the "billing_address_city" field.
func (u *CustomerUpsertOne) ClearBillingAddressCity() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearBillingAddressCity()
	})
}

// SetBillingAddressLine1 sets the "billing_address_line1" field.
func (u *CustomerUpsertOne) SetBillingAddressLine1(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetBillingAddressLine1(v)
	})
}

// UpdateBillingAddressLine1 sets the "billing_address_line1" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateBillingAddressLine1() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateBillingAddressLine1()
	})
}

// ClearBillingAddressLine1 clears the value of the "billing_address_line1" field.
func (u *CustomerUpsertOne) ClearBillingAddressLine1() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearBillingAddressLine1()
	})
}

// SetBillingAddressLine2 sets the "billing_address_line2" field.
func (u *CustomerUpsertOne) SetBillingAddressLine2(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetBillingAddressLine2(v)
	})
}

// UpdateBillingAddressLine2 sets the "billing_address_line2" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateBillingAddressLine2() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateBillingAddressLine2()
	})
}

// ClearBillingAddressLine2 clears the value of the "billing_address_line2" field.
func (u *CustomerUpsertOne) ClearBillingAddressLine2() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearBillingAddressLine2()
	})
}

// SetBillingAddressPhoneNumber sets the "billing_address_phone_number" field.
func (u *CustomerUpsertOne) SetBillingAddressPhoneNumber(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetBillingAddressPhoneNumber(v)
	})
}

// UpdateBillingAddressPhoneNumber sets the "billing_address_phone_number" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateBillingAddressPhoneNumber() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateBillingAddressPhoneNumber()
	})
}

// ClearBillingAddressPhoneNumber clears the value of the "billing_address_phone_number" field.
func (u *CustomerUpsertOne) ClearBillingAddressPhoneNumber() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearBillingAddressPhoneNumber()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *CustomerUpsertOne) SetAnnotations(v models.Annotations) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateAnnotations() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *CustomerUpsertOne) ClearAnnotations() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearAnnotations()
	})
}

// SetKey sets the "key" field.
func (u *CustomerUpsertOne) SetKey(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateKey() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateKey()
	})
}

// ClearKey clears the value of the "key" field.
func (u *CustomerUpsertOne) ClearKey() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearKey()
	})
}

// SetPrimaryEmail sets the "primary_email" field.
func (u *CustomerUpsertOne) SetPrimaryEmail(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPrimaryEmail(v)
	})
}

// UpdatePrimaryEmail sets the "primary_email" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdatePrimaryEmail() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePrimaryEmail()
	})
}

// ClearPrimaryEmail clears the value of the "primary_email" field.
func (u *CustomerUpsertOne) ClearPrimaryEmail() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPrimaryEmail()
	})
}

// SetCurrency sets the "currency" field.
func (u *CustomerUpsertOne) SetCurrency(v currencyx.Code) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateCurrency() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCurrency()
	})
}

// ClearCurrency clears the value of the "currency" field.
func (u *CustomerUpsertOne) ClearCurrency() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCurrency()
	})
}

// Exec executes the query.
func (u *CustomerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for CustomerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CustomerUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: CustomerUpsertOne.ID is not supported by MySQL driver. Use CustomerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CustomerUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CustomerCreateBulk is the builder for creating many Customer entities in bulk.
type CustomerCreateBulk struct {
	config
	err      error
	builders []*CustomerCreate
	conflict []sql.ConflictOption
}

// Save creates the Customer entities in the database.
func (_c *CustomerCreateBulk) Save(ctx context.Context) ([]*Customer, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Customer, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *CustomerCreateBulk) SaveX(ctx context.Context) []*Customer {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CustomerCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Customer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *CustomerCreateBulk) OnConflict(opts ...sql.ConflictOption) *CustomerUpsertBulk {
	_c.conflict = opts
	return &CustomerUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *CustomerCreateBulk) OnConflictColumns(columns ...string) *CustomerUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &CustomerUpsertBulk{
		create: _c,
	}
}

// CustomerUpsertBulk is the builder for "upsert"-ing
// a bulk of Customer nodes.
type CustomerUpsertBulk struct {
	create *CustomerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerUpsertBulk) UpdateNewValues() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(customer.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(customer.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(customer.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CustomerUpsertBulk) Ignore() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerUpsertBulk) DoNothing() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerCreateBulk.OnConflict
// documentation for more info.
func (u *CustomerUpsertBulk) Update(set func(*CustomerUpsert)) *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *CustomerUpsertBulk) SetMetadata(v map[string]string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateMetadata() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *CustomerUpsertBulk) ClearMetadata() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerUpsertBulk) SetUpdatedAt(v time.Time) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateUpdatedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CustomerUpsertBulk) SetDeletedAt(v time.Time) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateDeletedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CustomerUpsertBulk) ClearDeletedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *CustomerUpsertBulk) SetName(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *CustomerUpsertBulk) SetDescription(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateDescription() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *CustomerUpsertBulk) ClearDescription() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearDescription()
	})
}

// SetBillingAddressCountry sets the "billing_address_country" field.
func (u *CustomerUpsertBulk) SetBillingAddressCountry(v models.CountryCode) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetBillingAddressCountry(v)
	})
}

// UpdateBillingAddressCountry sets the "billing_address_country" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateBillingAddressCountry() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateBillingAddressCountry()
	})
}

// ClearBillingAddressCountry clears the value of the "billing_address_country" field.
func (u *CustomerUpsertBulk) ClearBillingAddressCountry() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearBillingAddressCountry()
	})
}

// SetBillingAddressPostalCode sets the "billing_address_postal_code" field.
func (u *CustomerUpsertBulk) SetBillingAddressPostalCode(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetBillingAddressPostalCode(v)
	})
}

// UpdateBillingAddressPostalCode sets the "billing_address_postal_code" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateBillingAddressPostalCode() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateBillingAddressPostalCode()
	})
}

// ClearBillingAddressPostalCode clears the value of the "billing_address_postal_code" field.
func (u *CustomerUpsertBulk) ClearBillingAddressPostalCode() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearBillingAddressPostalCode()
	})
}

// SetBillingAddressState sets the "billing_address_state" field.
func (u *CustomerUpsertBulk) SetBillingAddressState(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetBillingAddressState(v)
	})
}

// UpdateBillingAddressState sets the "billing_address_state" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateBillingAddressState() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateBillingAddressState()
	})
}

// ClearBillingAddressState clears the value of the "billing_address_state" field.
func (u *CustomerUpsertBulk) ClearBillingAddressState() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearBillingAddressState()
	})
}

// SetBillingAddressCity sets the "billing_address_city" field.
func (u *CustomerUpsertBulk) SetBillingAddressCity(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetBillingAddressCity(v)
	})
}

// UpdateBillingAddressCity sets the "billing_address_city" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateBillingAddressCity() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateBillingAddressCity()
	})
}

// ClearBillingAddressCity clears the value of the "billing_address_city" field.
func (u *CustomerUpsertBulk) ClearBillingAddressCity() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearBillingAddressCity()
	})
}

// SetBillingAddressLine1 sets the "billing_address_line1" field.
func (u *CustomerUpsertBulk) SetBillingAddressLine1(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetBillingAddressLine1(v)
	})
}

// UpdateBillingAddressLine1 sets the "billing_address_line1" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateBillingAddressLine1() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateBillingAddressLine1()
	})
}

// ClearBillingAddressLine1 clears the value of the "billing_address_line1" field.
func (u *CustomerUpsertBulk) ClearBillingAddressLine1() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearBillingAddressLine1()
	})
}

// SetBillingAddressLine2 sets the "billing_address_line2" field.
func (u *CustomerUpsertBulk) SetBillingAddressLine2(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetBillingAddressLine2(v)
	})
}

// UpdateBillingAddressLine2 sets the "billing_address_line2" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateBillingAddressLine2() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateBillingAddressLine2()
	})
}

// ClearBillingAddressLine2 clears the value of the "billing_address_line2" field.
func (u *CustomerUpsertBulk) ClearBillingAddressLine2() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearBillingAddressLine2()
	})
}

// SetBillingAddressPhoneNumber sets the "billing_address_phone_number" field.
func (u *CustomerUpsertBulk) SetBillingAddressPhoneNumber(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetBillingAddressPhoneNumber(v)
	})
}

// UpdateBillingAddressPhoneNumber sets the "billing_address_phone_number" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateBillingAddressPhoneNumber() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateBillingAddressPhoneNumber()
	})
}

// ClearBillingAddressPhoneNumber clears the value of the "billing_address_phone_number" field.
func (u *CustomerUpsertBulk) ClearBillingAddressPhoneNumber() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearBillingAddressPhoneNumber()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *CustomerUpsertBulk) SetAnnotations(v models.Annotations) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateAnnotations() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *CustomerUpsertBulk) ClearAnnotations() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearAnnotations()
	})
}

// SetKey sets the "key" field.
func (u *CustomerUpsertBulk) SetKey(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateKey() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateKey()
	})
}

// ClearKey clears the value of the "key" field.
func (u *CustomerUpsertBulk) ClearKey() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearKey()
	})
}

// SetPrimaryEmail sets the "primary_email" field.
func (u *CustomerUpsertBulk) SetPrimaryEmail(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPrimaryEmail(v)
	})
}

// UpdatePrimaryEmail sets the "primary_email" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdatePrimaryEmail() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePrimaryEmail()
	})
}

// ClearPrimaryEmail clears the value of the "primary_email" field.
func (u *CustomerUpsertBulk) ClearPrimaryEmail() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPrimaryEmail()
	})
}

// SetCurrency sets the "currency" field.
func (u *CustomerUpsertBulk) SetCurrency(v currencyx.Code) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateCurrency() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCurrency()
	})
}

// ClearCurrency clears the value of the "currency" field.
func (u *CustomerUpsertBulk) ClearCurrency() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCurrency()
	})
}

// Exec executes the query.
func (u *CustomerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the CustomerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for CustomerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
