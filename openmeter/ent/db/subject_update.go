// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subject"
)

// SubjectUpdate is the builder for updating Subject entities.
type SubjectUpdate struct {
	config
	hooks    []Hook
	mutation *SubjectMutation
}

// Where appends a list predicates to the SubjectUpdate builder.
func (_u *SubjectUpdate) Where(ps ...predicate.Subject) *SubjectUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *SubjectUpdate) SetMetadata(v map[string]string) *SubjectUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SubjectUpdate) ClearMetadata() *SubjectUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetKey sets the "key" field.
func (_u *SubjectUpdate) SetKey(v string) *SubjectUpdate {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *SubjectUpdate) SetNillableKey(v *string) *SubjectUpdate {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *SubjectUpdate) SetDisplayName(v string) *SubjectUpdate {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *SubjectUpdate) SetNillableDisplayName(v *string) *SubjectUpdate {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// ClearDisplayName clears the value of the "display_name" field.
func (_u *SubjectUpdate) ClearDisplayName() *SubjectUpdate {
	_u.mutation.ClearDisplayName()
	return _u
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (_u *SubjectUpdate) SetStripeCustomerID(v string) *SubjectUpdate {
	_u.mutation.SetStripeCustomerID(v)
	return _u
}

// SetNillableStripeCustomerID sets the "stripe_customer_id" field if the given value is not nil.
func (_u *SubjectUpdate) SetNillableStripeCustomerID(v *string) *SubjectUpdate {
	if v != nil {
		_u.SetStripeCustomerID(*v)
	}
	return _u
}

// ClearStripeCustomerID clears the value of the "stripe_customer_id" field.
func (_u *SubjectUpdate) ClearStripeCustomerID() *SubjectUpdate {
	_u.mutation.ClearStripeCustomerID()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubjectUpdate) SetUpdatedAt(v time.Time) *SubjectUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the SubjectMutation object of the builder.
func (_u *SubjectUpdate) Mutation() *SubjectMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SubjectUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubjectUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SubjectUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubjectUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubjectUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := subject.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubjectUpdate) check() error {
	if v, ok := _u.mutation.Key(); ok {
		if err := subject.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`db: validator failed for field "Subject.key": %w`, err)}
		}
	}
	return nil
}

func (_u *SubjectUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subject.Table, subject.Columns, sqlgraph.NewFieldSpec(subject.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(subject.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(subject.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(subject.FieldKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(subject.FieldDisplayName, field.TypeString, value)
	}
	if _u.mutation.DisplayNameCleared() {
		_spec.ClearField(subject.FieldDisplayName, field.TypeString)
	}
	if value, ok := _u.mutation.StripeCustomerID(); ok {
		_spec.SetField(subject.FieldStripeCustomerID, field.TypeString, value)
	}
	if _u.mutation.StripeCustomerIDCleared() {
		_spec.ClearField(subject.FieldStripeCustomerID, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subject.FieldUpdatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SubjectUpdateOne is the builder for updating a single Subject entity.
type SubjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubjectMutation
}

// SetMetadata sets the "metadata" field.
func (_u *SubjectUpdateOne) SetMetadata(v map[string]string) *SubjectUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SubjectUpdateOne) ClearMetadata() *SubjectUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetKey sets the "key" field.
func (_u *SubjectUpdateOne) SetKey(v string) *SubjectUpdateOne {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *SubjectUpdateOne) SetNillableKey(v *string) *SubjectUpdateOne {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *SubjectUpdateOne) SetDisplayName(v string) *SubjectUpdateOne {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *SubjectUpdateOne) SetNillableDisplayName(v *string) *SubjectUpdateOne {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// ClearDisplayName clears the value of the "display_name" field.
func (_u *SubjectUpdateOne) ClearDisplayName() *SubjectUpdateOne {
	_u.mutation.ClearDisplayName()
	return _u
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (_u *SubjectUpdateOne) SetStripeCustomerID(v string) *SubjectUpdateOne {
	_u.mutation.SetStripeCustomerID(v)
	return _u
}

// SetNillableStripeCustomerID sets the "stripe_customer_id" field if the given value is not nil.
func (_u *SubjectUpdateOne) SetNillableStripeCustomerID(v *string) *SubjectUpdateOne {
	if v != nil {
		_u.SetStripeCustomerID(*v)
	}
	return _u
}

// ClearStripeCustomerID clears the value of the "stripe_customer_id" field.
func (_u *SubjectUpdateOne) ClearStripeCustomerID() *SubjectUpdateOne {
	_u.mutation.ClearStripeCustomerID()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubjectUpdateOne) SetUpdatedAt(v time.Time) *SubjectUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the SubjectMutation object of the builder.
func (_u *SubjectUpdateOne) Mutation() *SubjectMutation {
	return _u.mutation
}

// Where appends a list predicates to the SubjectUpdate builder.
func (_u *SubjectUpdateOne) Where(ps ...predicate.Subject) *SubjectUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SubjectUpdateOne) Select(field string, fields ...string) *SubjectUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Subject entity.
func (_u *SubjectUpdateOne) Save(ctx context.Context) (*Subject, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubjectUpdateOne) SaveX(ctx context.Context) *Subject {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SubjectUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubjectUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubjectUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := subject.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubjectUpdateOne) check() error {
	if v, ok := _u.mutation.Key(); ok {
		if err := subject.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`db: validator failed for field "Subject.key": %w`, err)}
		}
	}
	return nil
}

func (_u *SubjectUpdateOne) sqlSave(ctx context.Context) (_node *Subject, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subject.Table, subject.Columns, sqlgraph.NewFieldSpec(subject.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Subject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subject.FieldID)
		for _, f := range fields {
			if !subject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != subject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(subject.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(subject.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(subject.FieldKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(subject.FieldDisplayName, field.TypeString, value)
	}
	if _u.mutation.DisplayNameCleared() {
		_spec.ClearField(subject.FieldDisplayName, field.TypeString)
	}
	if value, ok := _u.mutation.StripeCustomerID(); ok {
		_spec.SetField(subject.FieldStripeCustomerID, field.TypeString, value)
	}
	if _u.mutation.StripeCustomerIDCleared() {
		_spec.ClearField(subject.FieldStripeCustomerID, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subject.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Subject{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
