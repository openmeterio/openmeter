// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonratecarditemlink"
)

// SubscriptionAddonRateCardItemLinkDelete is the builder for deleting a SubscriptionAddonRateCardItemLink entity.
type SubscriptionAddonRateCardItemLinkDelete struct {
	config
	hooks    []Hook
	mutation *SubscriptionAddonRateCardItemLinkMutation
}

// Where appends a list predicates to the SubscriptionAddonRateCardItemLinkDelete builder.
func (sarcild *SubscriptionAddonRateCardItemLinkDelete) Where(ps ...predicate.SubscriptionAddonRateCardItemLink) *SubscriptionAddonRateCardItemLinkDelete {
	sarcild.mutation.Where(ps...)
	return sarcild
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sarcild *SubscriptionAddonRateCardItemLinkDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sarcild.sqlExec, sarcild.mutation, sarcild.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sarcild *SubscriptionAddonRateCardItemLinkDelete) ExecX(ctx context.Context) int {
	n, err := sarcild.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sarcild *SubscriptionAddonRateCardItemLinkDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(subscriptionaddonratecarditemlink.Table, sqlgraph.NewFieldSpec(subscriptionaddonratecarditemlink.FieldID, field.TypeString))
	if ps := sarcild.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sarcild.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sarcild.mutation.done = true
	return affected, err
}

// SubscriptionAddonRateCardItemLinkDeleteOne is the builder for deleting a single SubscriptionAddonRateCardItemLink entity.
type SubscriptionAddonRateCardItemLinkDeleteOne struct {
	sarcild *SubscriptionAddonRateCardItemLinkDelete
}

// Where appends a list predicates to the SubscriptionAddonRateCardItemLinkDelete builder.
func (sarcildo *SubscriptionAddonRateCardItemLinkDeleteOne) Where(ps ...predicate.SubscriptionAddonRateCardItemLink) *SubscriptionAddonRateCardItemLinkDeleteOne {
	sarcildo.sarcild.mutation.Where(ps...)
	return sarcildo
}

// Exec executes the deletion query.
func (sarcildo *SubscriptionAddonRateCardItemLinkDeleteOne) Exec(ctx context.Context) error {
	n, err := sarcildo.sarcild.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{subscriptionaddonratecarditemlink.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sarcildo *SubscriptionAddonRateCardItemLinkDeleteOne) ExecX(ctx context.Context) {
	if err := sarcildo.Exec(ctx); err != nil {
		panic(err)
	}
}
