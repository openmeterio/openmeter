// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustominvoicing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustominvoicingcustomer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// AppCustomInvoicingUpdate is the builder for updating AppCustomInvoicing entities.
type AppCustomInvoicingUpdate struct {
	config
	hooks    []Hook
	mutation *AppCustomInvoicingMutation
}

// Where appends a list predicates to the AppCustomInvoicingUpdate builder.
func (aciu *AppCustomInvoicingUpdate) Where(ps ...predicate.AppCustomInvoicing) *AppCustomInvoicingUpdate {
	aciu.mutation.Where(ps...)
	return aciu
}

// SetUpdatedAt sets the "updated_at" field.
func (aciu *AppCustomInvoicingUpdate) SetUpdatedAt(t time.Time) *AppCustomInvoicingUpdate {
	aciu.mutation.SetUpdatedAt(t)
	return aciu
}

// SetDeletedAt sets the "deleted_at" field.
func (aciu *AppCustomInvoicingUpdate) SetDeletedAt(t time.Time) *AppCustomInvoicingUpdate {
	aciu.mutation.SetDeletedAt(t)
	return aciu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aciu *AppCustomInvoicingUpdate) SetNillableDeletedAt(t *time.Time) *AppCustomInvoicingUpdate {
	if t != nil {
		aciu.SetDeletedAt(*t)
	}
	return aciu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aciu *AppCustomInvoicingUpdate) ClearDeletedAt() *AppCustomInvoicingUpdate {
	aciu.mutation.ClearDeletedAt()
	return aciu
}

// SetSkipDraftSyncHook sets the "skip_draft_sync_hook" field.
func (aciu *AppCustomInvoicingUpdate) SetSkipDraftSyncHook(b bool) *AppCustomInvoicingUpdate {
	aciu.mutation.SetSkipDraftSyncHook(b)
	return aciu
}

// SetNillableSkipDraftSyncHook sets the "skip_draft_sync_hook" field if the given value is not nil.
func (aciu *AppCustomInvoicingUpdate) SetNillableSkipDraftSyncHook(b *bool) *AppCustomInvoicingUpdate {
	if b != nil {
		aciu.SetSkipDraftSyncHook(*b)
	}
	return aciu
}

// SetSkipIssuingSyncHook sets the "skip_issuing_sync_hook" field.
func (aciu *AppCustomInvoicingUpdate) SetSkipIssuingSyncHook(b bool) *AppCustomInvoicingUpdate {
	aciu.mutation.SetSkipIssuingSyncHook(b)
	return aciu
}

// SetNillableSkipIssuingSyncHook sets the "skip_issuing_sync_hook" field if the given value is not nil.
func (aciu *AppCustomInvoicingUpdate) SetNillableSkipIssuingSyncHook(b *bool) *AppCustomInvoicingUpdate {
	if b != nil {
		aciu.SetSkipIssuingSyncHook(*b)
	}
	return aciu
}

// AddCustomerAppIDs adds the "customer_apps" edge to the AppCustomInvoicingCustomer entity by IDs.
func (aciu *AppCustomInvoicingUpdate) AddCustomerAppIDs(ids ...int) *AppCustomInvoicingUpdate {
	aciu.mutation.AddCustomerAppIDs(ids...)
	return aciu
}

// AddCustomerApps adds the "customer_apps" edges to the AppCustomInvoicingCustomer entity.
func (aciu *AppCustomInvoicingUpdate) AddCustomerApps(a ...*AppCustomInvoicingCustomer) *AppCustomInvoicingUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aciu.AddCustomerAppIDs(ids...)
}

// Mutation returns the AppCustomInvoicingMutation object of the builder.
func (aciu *AppCustomInvoicingUpdate) Mutation() *AppCustomInvoicingMutation {
	return aciu.mutation
}

// ClearCustomerApps clears all "customer_apps" edges to the AppCustomInvoicingCustomer entity.
func (aciu *AppCustomInvoicingUpdate) ClearCustomerApps() *AppCustomInvoicingUpdate {
	aciu.mutation.ClearCustomerApps()
	return aciu
}

// RemoveCustomerAppIDs removes the "customer_apps" edge to AppCustomInvoicingCustomer entities by IDs.
func (aciu *AppCustomInvoicingUpdate) RemoveCustomerAppIDs(ids ...int) *AppCustomInvoicingUpdate {
	aciu.mutation.RemoveCustomerAppIDs(ids...)
	return aciu
}

// RemoveCustomerApps removes "customer_apps" edges to AppCustomInvoicingCustomer entities.
func (aciu *AppCustomInvoicingUpdate) RemoveCustomerApps(a ...*AppCustomInvoicingCustomer) *AppCustomInvoicingUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aciu.RemoveCustomerAppIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aciu *AppCustomInvoicingUpdate) Save(ctx context.Context) (int, error) {
	aciu.defaults()
	return withHooks(ctx, aciu.sqlSave, aciu.mutation, aciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aciu *AppCustomInvoicingUpdate) SaveX(ctx context.Context) int {
	affected, err := aciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aciu *AppCustomInvoicingUpdate) Exec(ctx context.Context) error {
	_, err := aciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aciu *AppCustomInvoicingUpdate) ExecX(ctx context.Context) {
	if err := aciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aciu *AppCustomInvoicingUpdate) defaults() {
	if _, ok := aciu.mutation.UpdatedAt(); !ok {
		v := appcustominvoicing.UpdateDefaultUpdatedAt()
		aciu.mutation.SetUpdatedAt(v)
	}
}

func (aciu *AppCustomInvoicingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appcustominvoicing.Table, appcustominvoicing.Columns, sqlgraph.NewFieldSpec(appcustominvoicing.FieldID, field.TypeString))
	if ps := aciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aciu.mutation.UpdatedAt(); ok {
		_spec.SetField(appcustominvoicing.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aciu.mutation.DeletedAt(); ok {
		_spec.SetField(appcustominvoicing.FieldDeletedAt, field.TypeTime, value)
	}
	if aciu.mutation.DeletedAtCleared() {
		_spec.ClearField(appcustominvoicing.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aciu.mutation.SkipDraftSyncHook(); ok {
		_spec.SetField(appcustominvoicing.FieldSkipDraftSyncHook, field.TypeBool, value)
	}
	if value, ok := aciu.mutation.SkipIssuingSyncHook(); ok {
		_spec.SetField(appcustominvoicing.FieldSkipIssuingSyncHook, field.TypeBool, value)
	}
	if aciu.mutation.CustomerAppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appcustominvoicing.CustomerAppsTable,
			Columns: []string{appcustominvoicing.CustomerAppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustominvoicingcustomer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aciu.mutation.RemovedCustomerAppsIDs(); len(nodes) > 0 && !aciu.mutation.CustomerAppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appcustominvoicing.CustomerAppsTable,
			Columns: []string{appcustominvoicing.CustomerAppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustominvoicingcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aciu.mutation.CustomerAppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appcustominvoicing.CustomerAppsTable,
			Columns: []string{appcustominvoicing.CustomerAppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustominvoicingcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appcustominvoicing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aciu.mutation.done = true
	return n, nil
}

// AppCustomInvoicingUpdateOne is the builder for updating a single AppCustomInvoicing entity.
type AppCustomInvoicingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppCustomInvoicingMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (aciuo *AppCustomInvoicingUpdateOne) SetUpdatedAt(t time.Time) *AppCustomInvoicingUpdateOne {
	aciuo.mutation.SetUpdatedAt(t)
	return aciuo
}

// SetDeletedAt sets the "deleted_at" field.
func (aciuo *AppCustomInvoicingUpdateOne) SetDeletedAt(t time.Time) *AppCustomInvoicingUpdateOne {
	aciuo.mutation.SetDeletedAt(t)
	return aciuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aciuo *AppCustomInvoicingUpdateOne) SetNillableDeletedAt(t *time.Time) *AppCustomInvoicingUpdateOne {
	if t != nil {
		aciuo.SetDeletedAt(*t)
	}
	return aciuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aciuo *AppCustomInvoicingUpdateOne) ClearDeletedAt() *AppCustomInvoicingUpdateOne {
	aciuo.mutation.ClearDeletedAt()
	return aciuo
}

// SetSkipDraftSyncHook sets the "skip_draft_sync_hook" field.
func (aciuo *AppCustomInvoicingUpdateOne) SetSkipDraftSyncHook(b bool) *AppCustomInvoicingUpdateOne {
	aciuo.mutation.SetSkipDraftSyncHook(b)
	return aciuo
}

// SetNillableSkipDraftSyncHook sets the "skip_draft_sync_hook" field if the given value is not nil.
func (aciuo *AppCustomInvoicingUpdateOne) SetNillableSkipDraftSyncHook(b *bool) *AppCustomInvoicingUpdateOne {
	if b != nil {
		aciuo.SetSkipDraftSyncHook(*b)
	}
	return aciuo
}

// SetSkipIssuingSyncHook sets the "skip_issuing_sync_hook" field.
func (aciuo *AppCustomInvoicingUpdateOne) SetSkipIssuingSyncHook(b bool) *AppCustomInvoicingUpdateOne {
	aciuo.mutation.SetSkipIssuingSyncHook(b)
	return aciuo
}

// SetNillableSkipIssuingSyncHook sets the "skip_issuing_sync_hook" field if the given value is not nil.
func (aciuo *AppCustomInvoicingUpdateOne) SetNillableSkipIssuingSyncHook(b *bool) *AppCustomInvoicingUpdateOne {
	if b != nil {
		aciuo.SetSkipIssuingSyncHook(*b)
	}
	return aciuo
}

// AddCustomerAppIDs adds the "customer_apps" edge to the AppCustomInvoicingCustomer entity by IDs.
func (aciuo *AppCustomInvoicingUpdateOne) AddCustomerAppIDs(ids ...int) *AppCustomInvoicingUpdateOne {
	aciuo.mutation.AddCustomerAppIDs(ids...)
	return aciuo
}

// AddCustomerApps adds the "customer_apps" edges to the AppCustomInvoicingCustomer entity.
func (aciuo *AppCustomInvoicingUpdateOne) AddCustomerApps(a ...*AppCustomInvoicingCustomer) *AppCustomInvoicingUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aciuo.AddCustomerAppIDs(ids...)
}

// Mutation returns the AppCustomInvoicingMutation object of the builder.
func (aciuo *AppCustomInvoicingUpdateOne) Mutation() *AppCustomInvoicingMutation {
	return aciuo.mutation
}

// ClearCustomerApps clears all "customer_apps" edges to the AppCustomInvoicingCustomer entity.
func (aciuo *AppCustomInvoicingUpdateOne) ClearCustomerApps() *AppCustomInvoicingUpdateOne {
	aciuo.mutation.ClearCustomerApps()
	return aciuo
}

// RemoveCustomerAppIDs removes the "customer_apps" edge to AppCustomInvoicingCustomer entities by IDs.
func (aciuo *AppCustomInvoicingUpdateOne) RemoveCustomerAppIDs(ids ...int) *AppCustomInvoicingUpdateOne {
	aciuo.mutation.RemoveCustomerAppIDs(ids...)
	return aciuo
}

// RemoveCustomerApps removes "customer_apps" edges to AppCustomInvoicingCustomer entities.
func (aciuo *AppCustomInvoicingUpdateOne) RemoveCustomerApps(a ...*AppCustomInvoicingCustomer) *AppCustomInvoicingUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aciuo.RemoveCustomerAppIDs(ids...)
}

// Where appends a list predicates to the AppCustomInvoicingUpdate builder.
func (aciuo *AppCustomInvoicingUpdateOne) Where(ps ...predicate.AppCustomInvoicing) *AppCustomInvoicingUpdateOne {
	aciuo.mutation.Where(ps...)
	return aciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aciuo *AppCustomInvoicingUpdateOne) Select(field string, fields ...string) *AppCustomInvoicingUpdateOne {
	aciuo.fields = append([]string{field}, fields...)
	return aciuo
}

// Save executes the query and returns the updated AppCustomInvoicing entity.
func (aciuo *AppCustomInvoicingUpdateOne) Save(ctx context.Context) (*AppCustomInvoicing, error) {
	aciuo.defaults()
	return withHooks(ctx, aciuo.sqlSave, aciuo.mutation, aciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aciuo *AppCustomInvoicingUpdateOne) SaveX(ctx context.Context) *AppCustomInvoicing {
	node, err := aciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aciuo *AppCustomInvoicingUpdateOne) Exec(ctx context.Context) error {
	_, err := aciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aciuo *AppCustomInvoicingUpdateOne) ExecX(ctx context.Context) {
	if err := aciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aciuo *AppCustomInvoicingUpdateOne) defaults() {
	if _, ok := aciuo.mutation.UpdatedAt(); !ok {
		v := appcustominvoicing.UpdateDefaultUpdatedAt()
		aciuo.mutation.SetUpdatedAt(v)
	}
}

func (aciuo *AppCustomInvoicingUpdateOne) sqlSave(ctx context.Context) (_node *AppCustomInvoicing, err error) {
	_spec := sqlgraph.NewUpdateSpec(appcustominvoicing.Table, appcustominvoicing.Columns, sqlgraph.NewFieldSpec(appcustominvoicing.FieldID, field.TypeString))
	id, ok := aciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "AppCustomInvoicing.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appcustominvoicing.FieldID)
		for _, f := range fields {
			if !appcustominvoicing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != appcustominvoicing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aciuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appcustominvoicing.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aciuo.mutation.DeletedAt(); ok {
		_spec.SetField(appcustominvoicing.FieldDeletedAt, field.TypeTime, value)
	}
	if aciuo.mutation.DeletedAtCleared() {
		_spec.ClearField(appcustominvoicing.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aciuo.mutation.SkipDraftSyncHook(); ok {
		_spec.SetField(appcustominvoicing.FieldSkipDraftSyncHook, field.TypeBool, value)
	}
	if value, ok := aciuo.mutation.SkipIssuingSyncHook(); ok {
		_spec.SetField(appcustominvoicing.FieldSkipIssuingSyncHook, field.TypeBool, value)
	}
	if aciuo.mutation.CustomerAppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appcustominvoicing.CustomerAppsTable,
			Columns: []string{appcustominvoicing.CustomerAppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustominvoicingcustomer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aciuo.mutation.RemovedCustomerAppsIDs(); len(nodes) > 0 && !aciuo.mutation.CustomerAppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appcustominvoicing.CustomerAppsTable,
			Columns: []string{appcustominvoicing.CustomerAppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustominvoicingcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aciuo.mutation.CustomerAppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appcustominvoicing.CustomerAppsTable,
			Columns: []string{appcustominvoicing.CustomerAppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustominvoicingcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AppCustomInvoicing{config: aciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appcustominvoicing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aciuo.mutation.done = true
	return _node, nil
}
