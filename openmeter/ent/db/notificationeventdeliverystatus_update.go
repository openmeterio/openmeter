// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationevent"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationeventdeliverystatus"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/notification"
	"github.com/openmeterio/openmeter/pkg/models"
)

// NotificationEventDeliveryStatusUpdate is the builder for updating NotificationEventDeliveryStatus entities.
type NotificationEventDeliveryStatusUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationEventDeliveryStatusMutation
}

// Where appends a list predicates to the NotificationEventDeliveryStatusUpdate builder.
func (_u *NotificationEventDeliveryStatusUpdate) Where(ps ...predicate.NotificationEventDeliveryStatus) *NotificationEventDeliveryStatusUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAnnotations sets the "annotations" field.
func (_u *NotificationEventDeliveryStatusUpdate) SetAnnotations(v models.Annotations) *NotificationEventDeliveryStatusUpdate {
	_u.mutation.SetAnnotations(v)
	return _u
}

// ClearAnnotations clears the value of the "annotations" field.
func (_u *NotificationEventDeliveryStatusUpdate) ClearAnnotations() *NotificationEventDeliveryStatusUpdate {
	_u.mutation.ClearAnnotations()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationEventDeliveryStatusUpdate) SetUpdatedAt(v time.Time) *NotificationEventDeliveryStatusUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetState sets the "state" field.
func (_u *NotificationEventDeliveryStatusUpdate) SetState(v notification.EventDeliveryStatusState) *NotificationEventDeliveryStatusUpdate {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *NotificationEventDeliveryStatusUpdate) SetNillableState(v *notification.EventDeliveryStatusState) *NotificationEventDeliveryStatusUpdate {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// SetReason sets the "reason" field.
func (_u *NotificationEventDeliveryStatusUpdate) SetReason(v string) *NotificationEventDeliveryStatusUpdate {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *NotificationEventDeliveryStatusUpdate) SetNillableReason(v *string) *NotificationEventDeliveryStatusUpdate {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// ClearReason clears the value of the "reason" field.
func (_u *NotificationEventDeliveryStatusUpdate) ClearReason() *NotificationEventDeliveryStatusUpdate {
	_u.mutation.ClearReason()
	return _u
}

// AddEventIDs adds the "events" edge to the NotificationEvent entity by IDs.
func (_u *NotificationEventDeliveryStatusUpdate) AddEventIDs(ids ...string) *NotificationEventDeliveryStatusUpdate {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the NotificationEvent entity.
func (_u *NotificationEventDeliveryStatusUpdate) AddEvents(v ...*NotificationEvent) *NotificationEventDeliveryStatusUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// Mutation returns the NotificationEventDeliveryStatusMutation object of the builder.
func (_u *NotificationEventDeliveryStatusUpdate) Mutation() *NotificationEventDeliveryStatusMutation {
	return _u.mutation
}

// ClearEvents clears all "events" edges to the NotificationEvent entity.
func (_u *NotificationEventDeliveryStatusUpdate) ClearEvents() *NotificationEventDeliveryStatusUpdate {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to NotificationEvent entities by IDs.
func (_u *NotificationEventDeliveryStatusUpdate) RemoveEventIDs(ids ...string) *NotificationEventDeliveryStatusUpdate {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to NotificationEvent entities.
func (_u *NotificationEventDeliveryStatusUpdate) RemoveEvents(v ...*NotificationEvent) *NotificationEventDeliveryStatusUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NotificationEventDeliveryStatusUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationEventDeliveryStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NotificationEventDeliveryStatusUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationEventDeliveryStatusUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationEventDeliveryStatusUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notificationeventdeliverystatus.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationEventDeliveryStatusUpdate) check() error {
	if v, ok := _u.mutation.State(); ok {
		if err := notificationeventdeliverystatus.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`db: validator failed for field "NotificationEventDeliveryStatus.state": %w`, err)}
		}
	}
	return nil
}

func (_u *NotificationEventDeliveryStatusUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationeventdeliverystatus.Table, notificationeventdeliverystatus.Columns, sqlgraph.NewFieldSpec(notificationeventdeliverystatus.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Annotations(); ok {
		_spec.SetField(notificationeventdeliverystatus.FieldAnnotations, field.TypeJSON, value)
	}
	if _u.mutation.AnnotationsCleared() {
		_spec.ClearField(notificationeventdeliverystatus.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationeventdeliverystatus.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(notificationeventdeliverystatus.FieldState, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(notificationeventdeliverystatus.FieldReason, field.TypeString, value)
	}
	if _u.mutation.ReasonCleared() {
		_spec.ClearField(notificationeventdeliverystatus.FieldReason, field.TypeString)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notificationeventdeliverystatus.EventsTable,
			Columns: notificationeventdeliverystatus.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notificationeventdeliverystatus.EventsTable,
			Columns: notificationeventdeliverystatus.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notificationeventdeliverystatus.EventsTable,
			Columns: notificationeventdeliverystatus.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationeventdeliverystatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NotificationEventDeliveryStatusUpdateOne is the builder for updating a single NotificationEventDeliveryStatus entity.
type NotificationEventDeliveryStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationEventDeliveryStatusMutation
}

// SetAnnotations sets the "annotations" field.
func (_u *NotificationEventDeliveryStatusUpdateOne) SetAnnotations(v models.Annotations) *NotificationEventDeliveryStatusUpdateOne {
	_u.mutation.SetAnnotations(v)
	return _u
}

// ClearAnnotations clears the value of the "annotations" field.
func (_u *NotificationEventDeliveryStatusUpdateOne) ClearAnnotations() *NotificationEventDeliveryStatusUpdateOne {
	_u.mutation.ClearAnnotations()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationEventDeliveryStatusUpdateOne) SetUpdatedAt(v time.Time) *NotificationEventDeliveryStatusUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetState sets the "state" field.
func (_u *NotificationEventDeliveryStatusUpdateOne) SetState(v notification.EventDeliveryStatusState) *NotificationEventDeliveryStatusUpdateOne {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *NotificationEventDeliveryStatusUpdateOne) SetNillableState(v *notification.EventDeliveryStatusState) *NotificationEventDeliveryStatusUpdateOne {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// SetReason sets the "reason" field.
func (_u *NotificationEventDeliveryStatusUpdateOne) SetReason(v string) *NotificationEventDeliveryStatusUpdateOne {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *NotificationEventDeliveryStatusUpdateOne) SetNillableReason(v *string) *NotificationEventDeliveryStatusUpdateOne {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// ClearReason clears the value of the "reason" field.
func (_u *NotificationEventDeliveryStatusUpdateOne) ClearReason() *NotificationEventDeliveryStatusUpdateOne {
	_u.mutation.ClearReason()
	return _u
}

// AddEventIDs adds the "events" edge to the NotificationEvent entity by IDs.
func (_u *NotificationEventDeliveryStatusUpdateOne) AddEventIDs(ids ...string) *NotificationEventDeliveryStatusUpdateOne {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the NotificationEvent entity.
func (_u *NotificationEventDeliveryStatusUpdateOne) AddEvents(v ...*NotificationEvent) *NotificationEventDeliveryStatusUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// Mutation returns the NotificationEventDeliveryStatusMutation object of the builder.
func (_u *NotificationEventDeliveryStatusUpdateOne) Mutation() *NotificationEventDeliveryStatusMutation {
	return _u.mutation
}

// ClearEvents clears all "events" edges to the NotificationEvent entity.
func (_u *NotificationEventDeliveryStatusUpdateOne) ClearEvents() *NotificationEventDeliveryStatusUpdateOne {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to NotificationEvent entities by IDs.
func (_u *NotificationEventDeliveryStatusUpdateOne) RemoveEventIDs(ids ...string) *NotificationEventDeliveryStatusUpdateOne {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to NotificationEvent entities.
func (_u *NotificationEventDeliveryStatusUpdateOne) RemoveEvents(v ...*NotificationEvent) *NotificationEventDeliveryStatusUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the NotificationEventDeliveryStatusUpdate builder.
func (_u *NotificationEventDeliveryStatusUpdateOne) Where(ps ...predicate.NotificationEventDeliveryStatus) *NotificationEventDeliveryStatusUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NotificationEventDeliveryStatusUpdateOne) Select(field string, fields ...string) *NotificationEventDeliveryStatusUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated NotificationEventDeliveryStatus entity.
func (_u *NotificationEventDeliveryStatusUpdateOne) Save(ctx context.Context) (*NotificationEventDeliveryStatus, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationEventDeliveryStatusUpdateOne) SaveX(ctx context.Context) *NotificationEventDeliveryStatus {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NotificationEventDeliveryStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationEventDeliveryStatusUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationEventDeliveryStatusUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notificationeventdeliverystatus.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationEventDeliveryStatusUpdateOne) check() error {
	if v, ok := _u.mutation.State(); ok {
		if err := notificationeventdeliverystatus.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`db: validator failed for field "NotificationEventDeliveryStatus.state": %w`, err)}
		}
	}
	return nil
}

func (_u *NotificationEventDeliveryStatusUpdateOne) sqlSave(ctx context.Context) (_node *NotificationEventDeliveryStatus, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationeventdeliverystatus.Table, notificationeventdeliverystatus.Columns, sqlgraph.NewFieldSpec(notificationeventdeliverystatus.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "NotificationEventDeliveryStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationeventdeliverystatus.FieldID)
		for _, f := range fields {
			if !notificationeventdeliverystatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != notificationeventdeliverystatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Annotations(); ok {
		_spec.SetField(notificationeventdeliverystatus.FieldAnnotations, field.TypeJSON, value)
	}
	if _u.mutation.AnnotationsCleared() {
		_spec.ClearField(notificationeventdeliverystatus.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationeventdeliverystatus.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(notificationeventdeliverystatus.FieldState, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(notificationeventdeliverystatus.FieldReason, field.TypeString, value)
	}
	if _u.mutation.ReasonCleared() {
		_spec.ClearField(notificationeventdeliverystatus.FieldReason, field.TypeString)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notificationeventdeliverystatus.EventsTable,
			Columns: notificationeventdeliverystatus.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notificationeventdeliverystatus.EventsTable,
			Columns: notificationeventdeliverystatus.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notificationeventdeliverystatus.EventsTable,
			Columns: notificationeventdeliverystatus.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NotificationEventDeliveryStatus{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationeventdeliverystatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
