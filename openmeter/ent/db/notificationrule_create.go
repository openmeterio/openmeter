// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationchannel"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationevent"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationrule"
	"github.com/openmeterio/openmeter/openmeter/notification"
)

// NotificationRuleCreate is the builder for creating a NotificationRule entity.
type NotificationRuleCreate struct {
	config
	mutation *NotificationRuleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (nrc *NotificationRuleCreate) SetNamespace(s string) *NotificationRuleCreate {
	nrc.mutation.SetNamespace(s)
	return nrc
}

// SetCreatedAt sets the "created_at" field.
func (nrc *NotificationRuleCreate) SetCreatedAt(t time.Time) *NotificationRuleCreate {
	nrc.mutation.SetCreatedAt(t)
	return nrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nrc *NotificationRuleCreate) SetNillableCreatedAt(t *time.Time) *NotificationRuleCreate {
	if t != nil {
		nrc.SetCreatedAt(*t)
	}
	return nrc
}

// SetUpdatedAt sets the "updated_at" field.
func (nrc *NotificationRuleCreate) SetUpdatedAt(t time.Time) *NotificationRuleCreate {
	nrc.mutation.SetUpdatedAt(t)
	return nrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nrc *NotificationRuleCreate) SetNillableUpdatedAt(t *time.Time) *NotificationRuleCreate {
	if t != nil {
		nrc.SetUpdatedAt(*t)
	}
	return nrc
}

// SetDeletedAt sets the "deleted_at" field.
func (nrc *NotificationRuleCreate) SetDeletedAt(t time.Time) *NotificationRuleCreate {
	nrc.mutation.SetDeletedAt(t)
	return nrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nrc *NotificationRuleCreate) SetNillableDeletedAt(t *time.Time) *NotificationRuleCreate {
	if t != nil {
		nrc.SetDeletedAt(*t)
	}
	return nrc
}

// SetType sets the "type" field.
func (nrc *NotificationRuleCreate) SetType(nt notification.EventType) *NotificationRuleCreate {
	nrc.mutation.SetType(nt)
	return nrc
}

// SetName sets the "name" field.
func (nrc *NotificationRuleCreate) SetName(s string) *NotificationRuleCreate {
	nrc.mutation.SetName(s)
	return nrc
}

// SetDisabled sets the "disabled" field.
func (nrc *NotificationRuleCreate) SetDisabled(b bool) *NotificationRuleCreate {
	nrc.mutation.SetDisabled(b)
	return nrc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (nrc *NotificationRuleCreate) SetNillableDisabled(b *bool) *NotificationRuleCreate {
	if b != nil {
		nrc.SetDisabled(*b)
	}
	return nrc
}

// SetConfig sets the "config" field.
func (nrc *NotificationRuleCreate) SetConfig(nc notification.RuleConfig) *NotificationRuleCreate {
	nrc.mutation.SetConfig(nc)
	return nrc
}

// SetID sets the "id" field.
func (nrc *NotificationRuleCreate) SetID(s string) *NotificationRuleCreate {
	nrc.mutation.SetID(s)
	return nrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (nrc *NotificationRuleCreate) SetNillableID(s *string) *NotificationRuleCreate {
	if s != nil {
		nrc.SetID(*s)
	}
	return nrc
}

// AddChannelIDs adds the "channels" edge to the NotificationChannel entity by IDs.
func (nrc *NotificationRuleCreate) AddChannelIDs(ids ...string) *NotificationRuleCreate {
	nrc.mutation.AddChannelIDs(ids...)
	return nrc
}

// AddChannels adds the "channels" edges to the NotificationChannel entity.
func (nrc *NotificationRuleCreate) AddChannels(n ...*NotificationChannel) *NotificationRuleCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nrc.AddChannelIDs(ids...)
}

// AddEventIDs adds the "events" edge to the NotificationEvent entity by IDs.
func (nrc *NotificationRuleCreate) AddEventIDs(ids ...string) *NotificationRuleCreate {
	nrc.mutation.AddEventIDs(ids...)
	return nrc
}

// AddEvents adds the "events" edges to the NotificationEvent entity.
func (nrc *NotificationRuleCreate) AddEvents(n ...*NotificationEvent) *NotificationRuleCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nrc.AddEventIDs(ids...)
}

// Mutation returns the NotificationRuleMutation object of the builder.
func (nrc *NotificationRuleCreate) Mutation() *NotificationRuleMutation {
	return nrc.mutation
}

// Save creates the NotificationRule in the database.
func (nrc *NotificationRuleCreate) Save(ctx context.Context) (*NotificationRule, error) {
	nrc.defaults()
	return withHooks(ctx, nrc.sqlSave, nrc.mutation, nrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nrc *NotificationRuleCreate) SaveX(ctx context.Context) *NotificationRule {
	v, err := nrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nrc *NotificationRuleCreate) Exec(ctx context.Context) error {
	_, err := nrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nrc *NotificationRuleCreate) ExecX(ctx context.Context) {
	if err := nrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nrc *NotificationRuleCreate) defaults() {
	if _, ok := nrc.mutation.CreatedAt(); !ok {
		v := notificationrule.DefaultCreatedAt()
		nrc.mutation.SetCreatedAt(v)
	}
	if _, ok := nrc.mutation.UpdatedAt(); !ok {
		v := notificationrule.DefaultUpdatedAt()
		nrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := nrc.mutation.Disabled(); !ok {
		v := notificationrule.DefaultDisabled
		nrc.mutation.SetDisabled(v)
	}
	if _, ok := nrc.mutation.ID(); !ok {
		v := notificationrule.DefaultID()
		nrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nrc *NotificationRuleCreate) check() error {
	if _, ok := nrc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "NotificationRule.namespace"`)}
	}
	if v, ok := nrc.mutation.Namespace(); ok {
		if err := notificationrule.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "NotificationRule.namespace": %w`, err)}
		}
	}
	if _, ok := nrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "NotificationRule.created_at"`)}
	}
	if _, ok := nrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "NotificationRule.updated_at"`)}
	}
	if _, ok := nrc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "NotificationRule.type"`)}
	}
	if v, ok := nrc.mutation.GetType(); ok {
		if err := notificationrule.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "NotificationRule.type": %w`, err)}
		}
	}
	if _, ok := nrc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "NotificationRule.name"`)}
	}
	if v, ok := nrc.mutation.Name(); ok {
		if err := notificationrule.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "NotificationRule.name": %w`, err)}
		}
	}
	if _, ok := nrc.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New(`db: missing required field "NotificationRule.config"`)}
	}
	return nil
}

func (nrc *NotificationRuleCreate) sqlSave(ctx context.Context) (*NotificationRule, error) {
	if err := nrc.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := nrc.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, nrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected NotificationRule.ID type: %T", _spec.ID.Value)
		}
	}
	nrc.mutation.id = &_node.ID
	nrc.mutation.done = true
	return _node, nil
}

func (nrc *NotificationRuleCreate) createSpec() (*NotificationRule, *sqlgraph.CreateSpec, error) {
	var (
		_node = &NotificationRule{config: nrc.config}
		_spec = sqlgraph.NewCreateSpec(notificationrule.Table, sqlgraph.NewFieldSpec(notificationrule.FieldID, field.TypeString))
	)
	_spec.OnConflict = nrc.conflict
	if id, ok := nrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nrc.mutation.Namespace(); ok {
		_spec.SetField(notificationrule.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := nrc.mutation.CreatedAt(); ok {
		_spec.SetField(notificationrule.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nrc.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationrule.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := nrc.mutation.DeletedAt(); ok {
		_spec.SetField(notificationrule.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := nrc.mutation.GetType(); ok {
		_spec.SetField(notificationrule.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := nrc.mutation.Name(); ok {
		_spec.SetField(notificationrule.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := nrc.mutation.Disabled(); ok {
		_spec.SetField(notificationrule.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := nrc.mutation.Config(); ok {
		vv, err := notificationrule.ValueScanner.Config.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(notificationrule.FieldConfig, field.TypeString, vv)
		_node.Config = value
	}
	if nodes := nrc.mutation.ChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notificationrule.ChannelsTable,
			Columns: notificationrule.ChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchannel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nrc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationrule.EventsTable,
			Columns: []string{notificationrule.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationRule.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationRuleUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (nrc *NotificationRuleCreate) OnConflict(opts ...sql.ConflictOption) *NotificationRuleUpsertOne {
	nrc.conflict = opts
	return &NotificationRuleUpsertOne{
		create: nrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationRule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nrc *NotificationRuleCreate) OnConflictColumns(columns ...string) *NotificationRuleUpsertOne {
	nrc.conflict = append(nrc.conflict, sql.ConflictColumns(columns...))
	return &NotificationRuleUpsertOne{
		create: nrc,
	}
}

type (
	// NotificationRuleUpsertOne is the builder for "upsert"-ing
	//  one NotificationRule node.
	NotificationRuleUpsertOne struct {
		create *NotificationRuleCreate
	}

	// NotificationRuleUpsert is the "OnConflict" setter.
	NotificationRuleUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationRuleUpsert) SetUpdatedAt(v time.Time) *NotificationRuleUpsert {
	u.Set(notificationrule.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationRuleUpsert) UpdateUpdatedAt() *NotificationRuleUpsert {
	u.SetExcluded(notificationrule.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationRuleUpsert) SetDeletedAt(v time.Time) *NotificationRuleUpsert {
	u.Set(notificationrule.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationRuleUpsert) UpdateDeletedAt() *NotificationRuleUpsert {
	u.SetExcluded(notificationrule.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationRuleUpsert) ClearDeletedAt() *NotificationRuleUpsert {
	u.SetNull(notificationrule.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *NotificationRuleUpsert) SetName(v string) *NotificationRuleUpsert {
	u.Set(notificationrule.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NotificationRuleUpsert) UpdateName() *NotificationRuleUpsert {
	u.SetExcluded(notificationrule.FieldName)
	return u
}

// SetDisabled sets the "disabled" field.
func (u *NotificationRuleUpsert) SetDisabled(v bool) *NotificationRuleUpsert {
	u.Set(notificationrule.FieldDisabled, v)
	return u
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *NotificationRuleUpsert) UpdateDisabled() *NotificationRuleUpsert {
	u.SetExcluded(notificationrule.FieldDisabled)
	return u
}

// ClearDisabled clears the value of the "disabled" field.
func (u *NotificationRuleUpsert) ClearDisabled() *NotificationRuleUpsert {
	u.SetNull(notificationrule.FieldDisabled)
	return u
}

// SetConfig sets the "config" field.
func (u *NotificationRuleUpsert) SetConfig(v notification.RuleConfig) *NotificationRuleUpsert {
	u.Set(notificationrule.FieldConfig, v)
	return u
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *NotificationRuleUpsert) UpdateConfig() *NotificationRuleUpsert {
	u.SetExcluded(notificationrule.FieldConfig)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NotificationRule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationrule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationRuleUpsertOne) UpdateNewValues() *NotificationRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(notificationrule.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(notificationrule.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(notificationrule.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(notificationrule.FieldType)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationRule.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NotificationRuleUpsertOne) Ignore() *NotificationRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationRuleUpsertOne) DoNothing() *NotificationRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationRuleCreate.OnConflict
// documentation for more info.
func (u *NotificationRuleUpsertOne) Update(set func(*NotificationRuleUpsert)) *NotificationRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationRuleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationRuleUpsertOne) SetUpdatedAt(v time.Time) *NotificationRuleUpsertOne {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationRuleUpsertOne) UpdateUpdatedAt() *NotificationRuleUpsertOne {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationRuleUpsertOne) SetDeletedAt(v time.Time) *NotificationRuleUpsertOne {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationRuleUpsertOne) UpdateDeletedAt() *NotificationRuleUpsertOne {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationRuleUpsertOne) ClearDeletedAt() *NotificationRuleUpsertOne {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *NotificationRuleUpsertOne) SetName(v string) *NotificationRuleUpsertOne {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NotificationRuleUpsertOne) UpdateName() *NotificationRuleUpsertOne {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.UpdateName()
	})
}

// SetDisabled sets the "disabled" field.
func (u *NotificationRuleUpsertOne) SetDisabled(v bool) *NotificationRuleUpsertOne {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *NotificationRuleUpsertOne) UpdateDisabled() *NotificationRuleUpsertOne {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.UpdateDisabled()
	})
}

// ClearDisabled clears the value of the "disabled" field.
func (u *NotificationRuleUpsertOne) ClearDisabled() *NotificationRuleUpsertOne {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.ClearDisabled()
	})
}

// SetConfig sets the "config" field.
func (u *NotificationRuleUpsertOne) SetConfig(v notification.RuleConfig) *NotificationRuleUpsertOne {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *NotificationRuleUpsertOne) UpdateConfig() *NotificationRuleUpsertOne {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.UpdateConfig()
	})
}

// Exec executes the query.
func (u *NotificationRuleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for NotificationRuleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationRuleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotificationRuleUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: NotificationRuleUpsertOne.ID is not supported by MySQL driver. Use NotificationRuleUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotificationRuleUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotificationRuleCreateBulk is the builder for creating many NotificationRule entities in bulk.
type NotificationRuleCreateBulk struct {
	config
	err      error
	builders []*NotificationRuleCreate
	conflict []sql.ConflictOption
}

// Save creates the NotificationRule entities in the database.
func (nrcb *NotificationRuleCreateBulk) Save(ctx context.Context) ([]*NotificationRule, error) {
	if nrcb.err != nil {
		return nil, nrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nrcb.builders))
	nodes := make([]*NotificationRule, len(nrcb.builders))
	mutators := make([]Mutator, len(nrcb.builders))
	for i := range nrcb.builders {
		func(i int, root context.Context) {
			builder := nrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = nrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nrcb *NotificationRuleCreateBulk) SaveX(ctx context.Context) []*NotificationRule {
	v, err := nrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nrcb *NotificationRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := nrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nrcb *NotificationRuleCreateBulk) ExecX(ctx context.Context) {
	if err := nrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationRule.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationRuleUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (nrcb *NotificationRuleCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotificationRuleUpsertBulk {
	nrcb.conflict = opts
	return &NotificationRuleUpsertBulk{
		create: nrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationRule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nrcb *NotificationRuleCreateBulk) OnConflictColumns(columns ...string) *NotificationRuleUpsertBulk {
	nrcb.conflict = append(nrcb.conflict, sql.ConflictColumns(columns...))
	return &NotificationRuleUpsertBulk{
		create: nrcb,
	}
}

// NotificationRuleUpsertBulk is the builder for "upsert"-ing
// a bulk of NotificationRule nodes.
type NotificationRuleUpsertBulk struct {
	create *NotificationRuleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NotificationRule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationrule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationRuleUpsertBulk) UpdateNewValues() *NotificationRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(notificationrule.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(notificationrule.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(notificationrule.FieldCreatedAt)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(notificationrule.FieldType)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationRule.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NotificationRuleUpsertBulk) Ignore() *NotificationRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationRuleUpsertBulk) DoNothing() *NotificationRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationRuleCreateBulk.OnConflict
// documentation for more info.
func (u *NotificationRuleUpsertBulk) Update(set func(*NotificationRuleUpsert)) *NotificationRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationRuleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationRuleUpsertBulk) SetUpdatedAt(v time.Time) *NotificationRuleUpsertBulk {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationRuleUpsertBulk) UpdateUpdatedAt() *NotificationRuleUpsertBulk {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationRuleUpsertBulk) SetDeletedAt(v time.Time) *NotificationRuleUpsertBulk {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationRuleUpsertBulk) UpdateDeletedAt() *NotificationRuleUpsertBulk {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationRuleUpsertBulk) ClearDeletedAt() *NotificationRuleUpsertBulk {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *NotificationRuleUpsertBulk) SetName(v string) *NotificationRuleUpsertBulk {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NotificationRuleUpsertBulk) UpdateName() *NotificationRuleUpsertBulk {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.UpdateName()
	})
}

// SetDisabled sets the "disabled" field.
func (u *NotificationRuleUpsertBulk) SetDisabled(v bool) *NotificationRuleUpsertBulk {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *NotificationRuleUpsertBulk) UpdateDisabled() *NotificationRuleUpsertBulk {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.UpdateDisabled()
	})
}

// ClearDisabled clears the value of the "disabled" field.
func (u *NotificationRuleUpsertBulk) ClearDisabled() *NotificationRuleUpsertBulk {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.ClearDisabled()
	})
}

// SetConfig sets the "config" field.
func (u *NotificationRuleUpsertBulk) SetConfig(v notification.RuleConfig) *NotificationRuleUpsertBulk {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *NotificationRuleUpsertBulk) UpdateConfig() *NotificationRuleUpsertBulk {
	return u.Update(func(s *NotificationRuleUpsert) {
		s.UpdateConfig()
	})
}

// Exec executes the query.
func (u *NotificationRuleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the NotificationRuleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for NotificationRuleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationRuleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
