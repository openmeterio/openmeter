// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationchannel"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationevent"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationrule"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/notification"
)

// NotificationRuleUpdate is the builder for updating NotificationRule entities.
type NotificationRuleUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationRuleMutation
}

// Where appends a list predicates to the NotificationRuleUpdate builder.
func (_u *NotificationRuleUpdate) Where(ps ...predicate.NotificationRule) *NotificationRuleUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationRuleUpdate) SetUpdatedAt(v time.Time) *NotificationRuleUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *NotificationRuleUpdate) SetDeletedAt(v time.Time) *NotificationRuleUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *NotificationRuleUpdate) SetNillableDeletedAt(v *time.Time) *NotificationRuleUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *NotificationRuleUpdate) ClearDeletedAt() *NotificationRuleUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *NotificationRuleUpdate) SetName(v string) *NotificationRuleUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NotificationRuleUpdate) SetNillableName(v *string) *NotificationRuleUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDisabled sets the "disabled" field.
func (_u *NotificationRuleUpdate) SetDisabled(v bool) *NotificationRuleUpdate {
	_u.mutation.SetDisabled(v)
	return _u
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_u *NotificationRuleUpdate) SetNillableDisabled(v *bool) *NotificationRuleUpdate {
	if v != nil {
		_u.SetDisabled(*v)
	}
	return _u
}

// ClearDisabled clears the value of the "disabled" field.
func (_u *NotificationRuleUpdate) ClearDisabled() *NotificationRuleUpdate {
	_u.mutation.ClearDisabled()
	return _u
}

// SetConfig sets the "config" field.
func (_u *NotificationRuleUpdate) SetConfig(v notification.RuleConfig) *NotificationRuleUpdate {
	_u.mutation.SetConfig(v)
	return _u
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (_u *NotificationRuleUpdate) SetNillableConfig(v *notification.RuleConfig) *NotificationRuleUpdate {
	if v != nil {
		_u.SetConfig(*v)
	}
	return _u
}

// AddChannelIDs adds the "channels" edge to the NotificationChannel entity by IDs.
func (_u *NotificationRuleUpdate) AddChannelIDs(ids ...string) *NotificationRuleUpdate {
	_u.mutation.AddChannelIDs(ids...)
	return _u
}

// AddChannels adds the "channels" edges to the NotificationChannel entity.
func (_u *NotificationRuleUpdate) AddChannels(v ...*NotificationChannel) *NotificationRuleUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChannelIDs(ids...)
}

// AddEventIDs adds the "events" edge to the NotificationEvent entity by IDs.
func (_u *NotificationRuleUpdate) AddEventIDs(ids ...string) *NotificationRuleUpdate {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the NotificationEvent entity.
func (_u *NotificationRuleUpdate) AddEvents(v ...*NotificationEvent) *NotificationRuleUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// Mutation returns the NotificationRuleMutation object of the builder.
func (_u *NotificationRuleUpdate) Mutation() *NotificationRuleMutation {
	return _u.mutation
}

// ClearChannels clears all "channels" edges to the NotificationChannel entity.
func (_u *NotificationRuleUpdate) ClearChannels() *NotificationRuleUpdate {
	_u.mutation.ClearChannels()
	return _u
}

// RemoveChannelIDs removes the "channels" edge to NotificationChannel entities by IDs.
func (_u *NotificationRuleUpdate) RemoveChannelIDs(ids ...string) *NotificationRuleUpdate {
	_u.mutation.RemoveChannelIDs(ids...)
	return _u
}

// RemoveChannels removes "channels" edges to NotificationChannel entities.
func (_u *NotificationRuleUpdate) RemoveChannels(v ...*NotificationChannel) *NotificationRuleUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChannelIDs(ids...)
}

// ClearEvents clears all "events" edges to the NotificationEvent entity.
func (_u *NotificationRuleUpdate) ClearEvents() *NotificationRuleUpdate {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to NotificationEvent entities by IDs.
func (_u *NotificationRuleUpdate) RemoveEventIDs(ids ...string) *NotificationRuleUpdate {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to NotificationEvent entities.
func (_u *NotificationRuleUpdate) RemoveEvents(v ...*NotificationEvent) *NotificationRuleUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NotificationRuleUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NotificationRuleUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationRuleUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationRuleUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notificationrule.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationRuleUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := notificationrule.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "NotificationRule.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Config(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "config", err: fmt.Errorf(`db: validator failed for field "NotificationRule.config": %w`, err)}
		}
	}
	return nil
}

func (_u *NotificationRuleUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationrule.Table, notificationrule.Columns, sqlgraph.NewFieldSpec(notificationrule.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationrule.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(notificationrule.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(notificationrule.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(notificationrule.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Disabled(); ok {
		_spec.SetField(notificationrule.FieldDisabled, field.TypeBool, value)
	}
	if _u.mutation.DisabledCleared() {
		_spec.ClearField(notificationrule.FieldDisabled, field.TypeBool)
	}
	if value, ok := _u.mutation.Config(); ok {
		vv, err := notificationrule.ValueScanner.Config.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(notificationrule.FieldConfig, field.TypeString, vv)
	}
	if _u.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notificationrule.ChannelsTable,
			Columns: notificationrule.ChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchannel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChannelsIDs(); len(nodes) > 0 && !_u.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notificationrule.ChannelsTable,
			Columns: notificationrule.ChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchannel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notificationrule.ChannelsTable,
			Columns: notificationrule.ChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchannel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationrule.EventsTable,
			Columns: []string{notificationrule.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationrule.EventsTable,
			Columns: []string{notificationrule.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationrule.EventsTable,
			Columns: []string{notificationrule.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NotificationRuleUpdateOne is the builder for updating a single NotificationRule entity.
type NotificationRuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationRuleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationRuleUpdateOne) SetUpdatedAt(v time.Time) *NotificationRuleUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *NotificationRuleUpdateOne) SetDeletedAt(v time.Time) *NotificationRuleUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *NotificationRuleUpdateOne) SetNillableDeletedAt(v *time.Time) *NotificationRuleUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *NotificationRuleUpdateOne) ClearDeletedAt() *NotificationRuleUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *NotificationRuleUpdateOne) SetName(v string) *NotificationRuleUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NotificationRuleUpdateOne) SetNillableName(v *string) *NotificationRuleUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDisabled sets the "disabled" field.
func (_u *NotificationRuleUpdateOne) SetDisabled(v bool) *NotificationRuleUpdateOne {
	_u.mutation.SetDisabled(v)
	return _u
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_u *NotificationRuleUpdateOne) SetNillableDisabled(v *bool) *NotificationRuleUpdateOne {
	if v != nil {
		_u.SetDisabled(*v)
	}
	return _u
}

// ClearDisabled clears the value of the "disabled" field.
func (_u *NotificationRuleUpdateOne) ClearDisabled() *NotificationRuleUpdateOne {
	_u.mutation.ClearDisabled()
	return _u
}

// SetConfig sets the "config" field.
func (_u *NotificationRuleUpdateOne) SetConfig(v notification.RuleConfig) *NotificationRuleUpdateOne {
	_u.mutation.SetConfig(v)
	return _u
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (_u *NotificationRuleUpdateOne) SetNillableConfig(v *notification.RuleConfig) *NotificationRuleUpdateOne {
	if v != nil {
		_u.SetConfig(*v)
	}
	return _u
}

// AddChannelIDs adds the "channels" edge to the NotificationChannel entity by IDs.
func (_u *NotificationRuleUpdateOne) AddChannelIDs(ids ...string) *NotificationRuleUpdateOne {
	_u.mutation.AddChannelIDs(ids...)
	return _u
}

// AddChannels adds the "channels" edges to the NotificationChannel entity.
func (_u *NotificationRuleUpdateOne) AddChannels(v ...*NotificationChannel) *NotificationRuleUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChannelIDs(ids...)
}

// AddEventIDs adds the "events" edge to the NotificationEvent entity by IDs.
func (_u *NotificationRuleUpdateOne) AddEventIDs(ids ...string) *NotificationRuleUpdateOne {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the NotificationEvent entity.
func (_u *NotificationRuleUpdateOne) AddEvents(v ...*NotificationEvent) *NotificationRuleUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// Mutation returns the NotificationRuleMutation object of the builder.
func (_u *NotificationRuleUpdateOne) Mutation() *NotificationRuleMutation {
	return _u.mutation
}

// ClearChannels clears all "channels" edges to the NotificationChannel entity.
func (_u *NotificationRuleUpdateOne) ClearChannels() *NotificationRuleUpdateOne {
	_u.mutation.ClearChannels()
	return _u
}

// RemoveChannelIDs removes the "channels" edge to NotificationChannel entities by IDs.
func (_u *NotificationRuleUpdateOne) RemoveChannelIDs(ids ...string) *NotificationRuleUpdateOne {
	_u.mutation.RemoveChannelIDs(ids...)
	return _u
}

// RemoveChannels removes "channels" edges to NotificationChannel entities.
func (_u *NotificationRuleUpdateOne) RemoveChannels(v ...*NotificationChannel) *NotificationRuleUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChannelIDs(ids...)
}

// ClearEvents clears all "events" edges to the NotificationEvent entity.
func (_u *NotificationRuleUpdateOne) ClearEvents() *NotificationRuleUpdateOne {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to NotificationEvent entities by IDs.
func (_u *NotificationRuleUpdateOne) RemoveEventIDs(ids ...string) *NotificationRuleUpdateOne {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to NotificationEvent entities.
func (_u *NotificationRuleUpdateOne) RemoveEvents(v ...*NotificationEvent) *NotificationRuleUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the NotificationRuleUpdate builder.
func (_u *NotificationRuleUpdateOne) Where(ps ...predicate.NotificationRule) *NotificationRuleUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NotificationRuleUpdateOne) Select(field string, fields ...string) *NotificationRuleUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated NotificationRule entity.
func (_u *NotificationRuleUpdateOne) Save(ctx context.Context) (*NotificationRule, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationRuleUpdateOne) SaveX(ctx context.Context) *NotificationRule {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NotificationRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationRuleUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationRuleUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notificationrule.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationRuleUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := notificationrule.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "NotificationRule.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Config(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "config", err: fmt.Errorf(`db: validator failed for field "NotificationRule.config": %w`, err)}
		}
	}
	return nil
}

func (_u *NotificationRuleUpdateOne) sqlSave(ctx context.Context) (_node *NotificationRule, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationrule.Table, notificationrule.Columns, sqlgraph.NewFieldSpec(notificationrule.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "NotificationRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationrule.FieldID)
		for _, f := range fields {
			if !notificationrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != notificationrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationrule.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(notificationrule.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(notificationrule.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(notificationrule.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Disabled(); ok {
		_spec.SetField(notificationrule.FieldDisabled, field.TypeBool, value)
	}
	if _u.mutation.DisabledCleared() {
		_spec.ClearField(notificationrule.FieldDisabled, field.TypeBool)
	}
	if value, ok := _u.mutation.Config(); ok {
		vv, err := notificationrule.ValueScanner.Config.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(notificationrule.FieldConfig, field.TypeString, vv)
	}
	if _u.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notificationrule.ChannelsTable,
			Columns: notificationrule.ChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchannel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChannelsIDs(); len(nodes) > 0 && !_u.mutation.ChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notificationrule.ChannelsTable,
			Columns: notificationrule.ChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchannel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notificationrule.ChannelsTable,
			Columns: notificationrule.ChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationchannel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationrule.EventsTable,
			Columns: []string{notificationrule.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationrule.EventsTable,
			Columns: []string{notificationrule.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationrule.EventsTable,
			Columns: []string{notificationrule.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NotificationRule{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
