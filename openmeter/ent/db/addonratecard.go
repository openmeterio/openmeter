// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/feature"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/isodate"
)

// AddonRateCard is the model entity for the AddonRateCard schema.
type AddonRateCard struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Type holds the value of the "type" field.
	Type productcatalog.RateCardType `json:"type,omitempty"`
	// FeatureKey holds the value of the "feature_key" field.
	FeatureKey *string `json:"feature_key,omitempty"`
	// EntitlementTemplate holds the value of the "entitlement_template" field.
	EntitlementTemplate *productcatalog.EntitlementTemplate `json:"entitlement_template,omitempty"`
	// TaxConfig holds the value of the "tax_config" field.
	TaxConfig *productcatalog.TaxConfig `json:"tax_config,omitempty"`
	// BillingCadence holds the value of the "billing_cadence" field.
	BillingCadence *isodate.String `json:"billing_cadence,omitempty"`
	// Price holds the value of the "price" field.
	Price *productcatalog.Price `json:"price,omitempty"`
	// Discounts holds the value of the "discounts" field.
	Discounts *productcatalog.Discounts `json:"discounts,omitempty"`
	// The add-on identifier the ratecard is assigned to.
	AddonID string `json:"addon_id,omitempty"`
	// The feature identifier the ratecard is related to.
	FeatureID *string `json:"feature_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AddonRateCardQuery when eager-loading is set.
	Edges        AddonRateCardEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AddonRateCardEdges holds the relations/edges for other nodes in the graph.
type AddonRateCardEdges struct {
	// Addon holds the value of the addon edge.
	Addon *Addon `json:"addon,omitempty"`
	// Features holds the value of the features edge.
	Features *Feature `json:"features,omitempty"`
	// SubscriptionAddonRateCards holds the value of the subscription_addon_rate_cards edge.
	SubscriptionAddonRateCards []*SubscriptionAddonRateCard `json:"subscription_addon_rate_cards,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AddonOrErr returns the Addon value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddonRateCardEdges) AddonOrErr() (*Addon, error) {
	if e.Addon != nil {
		return e.Addon, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: addon.Label}
	}
	return nil, &NotLoadedError{edge: "addon"}
}

// FeaturesOrErr returns the Features value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddonRateCardEdges) FeaturesOrErr() (*Feature, error) {
	if e.Features != nil {
		return e.Features, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: feature.Label}
	}
	return nil, &NotLoadedError{edge: "features"}
}

// SubscriptionAddonRateCardsOrErr returns the SubscriptionAddonRateCards value or an error if the edge
// was not loaded in eager-loading.
func (e AddonRateCardEdges) SubscriptionAddonRateCardsOrErr() ([]*SubscriptionAddonRateCard, error) {
	if e.loadedTypes[2] {
		return e.SubscriptionAddonRateCards, nil
	}
	return nil, &NotLoadedError{edge: "subscription_addon_rate_cards"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AddonRateCard) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case addonratecard.FieldMetadata:
			values[i] = new([]byte)
		case addonratecard.FieldID, addonratecard.FieldNamespace, addonratecard.FieldName, addonratecard.FieldDescription, addonratecard.FieldKey, addonratecard.FieldType, addonratecard.FieldFeatureKey, addonratecard.FieldBillingCadence, addonratecard.FieldAddonID, addonratecard.FieldFeatureID:
			values[i] = new(sql.NullString)
		case addonratecard.FieldCreatedAt, addonratecard.FieldUpdatedAt, addonratecard.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case addonratecard.FieldEntitlementTemplate:
			values[i] = addonratecard.ValueScanner.EntitlementTemplate.ScanValue()
		case addonratecard.FieldTaxConfig:
			values[i] = addonratecard.ValueScanner.TaxConfig.ScanValue()
		case addonratecard.FieldPrice:
			values[i] = addonratecard.ValueScanner.Price.ScanValue()
		case addonratecard.FieldDiscounts:
			values[i] = addonratecard.ValueScanner.Discounts.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AddonRateCard fields.
func (arc *AddonRateCard) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case addonratecard.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				arc.ID = value.String
			}
		case addonratecard.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				arc.Namespace = value.String
			}
		case addonratecard.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &arc.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case addonratecard.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				arc.CreatedAt = value.Time
			}
		case addonratecard.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				arc.UpdatedAt = value.Time
			}
		case addonratecard.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				arc.DeletedAt = new(time.Time)
				*arc.DeletedAt = value.Time
			}
		case addonratecard.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				arc.Name = value.String
			}
		case addonratecard.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				arc.Description = new(string)
				*arc.Description = value.String
			}
		case addonratecard.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				arc.Key = value.String
			}
		case addonratecard.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				arc.Type = productcatalog.RateCardType(value.String)
			}
		case addonratecard.FieldFeatureKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feature_key", values[i])
			} else if value.Valid {
				arc.FeatureKey = new(string)
				*arc.FeatureKey = value.String
			}
		case addonratecard.FieldEntitlementTemplate:
			if value, err := addonratecard.ValueScanner.EntitlementTemplate.FromValue(values[i]); err != nil {
				return err
			} else {
				arc.EntitlementTemplate = value
			}
		case addonratecard.FieldTaxConfig:
			if value, err := addonratecard.ValueScanner.TaxConfig.FromValue(values[i]); err != nil {
				return err
			} else {
				arc.TaxConfig = value
			}
		case addonratecard.FieldBillingCadence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_cadence", values[i])
			} else if value.Valid {
				arc.BillingCadence = new(isodate.String)
				*arc.BillingCadence = isodate.String(value.String)
			}
		case addonratecard.FieldPrice:
			if value, err := addonratecard.ValueScanner.Price.FromValue(values[i]); err != nil {
				return err
			} else {
				arc.Price = value
			}
		case addonratecard.FieldDiscounts:
			if value, err := addonratecard.ValueScanner.Discounts.FromValue(values[i]); err != nil {
				return err
			} else {
				arc.Discounts = value
			}
		case addonratecard.FieldAddonID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field addon_id", values[i])
			} else if value.Valid {
				arc.AddonID = value.String
			}
		case addonratecard.FieldFeatureID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feature_id", values[i])
			} else if value.Valid {
				arc.FeatureID = new(string)
				*arc.FeatureID = value.String
			}
		default:
			arc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AddonRateCard.
// This includes values selected through modifiers, order, etc.
func (arc *AddonRateCard) Value(name string) (ent.Value, error) {
	return arc.selectValues.Get(name)
}

// QueryAddon queries the "addon" edge of the AddonRateCard entity.
func (arc *AddonRateCard) QueryAddon() *AddonQuery {
	return NewAddonRateCardClient(arc.config).QueryAddon(arc)
}

// QueryFeatures queries the "features" edge of the AddonRateCard entity.
func (arc *AddonRateCard) QueryFeatures() *FeatureQuery {
	return NewAddonRateCardClient(arc.config).QueryFeatures(arc)
}

// QuerySubscriptionAddonRateCards queries the "subscription_addon_rate_cards" edge of the AddonRateCard entity.
func (arc *AddonRateCard) QuerySubscriptionAddonRateCards() *SubscriptionAddonRateCardQuery {
	return NewAddonRateCardClient(arc.config).QuerySubscriptionAddonRateCards(arc)
}

// Update returns a builder for updating this AddonRateCard.
// Note that you need to call AddonRateCard.Unwrap() before calling this method if this AddonRateCard
// was returned from a transaction, and the transaction was committed or rolled back.
func (arc *AddonRateCard) Update() *AddonRateCardUpdateOne {
	return NewAddonRateCardClient(arc.config).UpdateOne(arc)
}

// Unwrap unwraps the AddonRateCard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (arc *AddonRateCard) Unwrap() *AddonRateCard {
	_tx, ok := arc.config.driver.(*txDriver)
	if !ok {
		panic("db: AddonRateCard is not a transactional entity")
	}
	arc.config.driver = _tx.drv
	return arc
}

// String implements the fmt.Stringer.
func (arc *AddonRateCard) String() string {
	var builder strings.Builder
	builder.WriteString("AddonRateCard(")
	builder.WriteString(fmt.Sprintf("id=%v, ", arc.ID))
	builder.WriteString("namespace=")
	builder.WriteString(arc.Namespace)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", arc.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(arc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(arc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := arc.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(arc.Name)
	builder.WriteString(", ")
	if v := arc.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(arc.Key)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", arc.Type))
	builder.WriteString(", ")
	if v := arc.FeatureKey; v != nil {
		builder.WriteString("feature_key=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := arc.EntitlementTemplate; v != nil {
		builder.WriteString("entitlement_template=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := arc.TaxConfig; v != nil {
		builder.WriteString("tax_config=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := arc.BillingCadence; v != nil {
		builder.WriteString("billing_cadence=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := arc.Price; v != nil {
		builder.WriteString("price=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := arc.Discounts; v != nil {
		builder.WriteString("discounts=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("addon_id=")
	builder.WriteString(arc.AddonID)
	builder.WriteString(", ")
	if v := arc.FeatureID; v != nil {
		builder.WriteString("feature_id=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// AddonRateCards is a parsable slice of AddonRateCard.
type AddonRateCards []*AddonRateCard
