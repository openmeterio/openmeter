// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicediscount"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingInvoiceDiscountUpdate is the builder for updating BillingInvoiceDiscount entities.
type BillingInvoiceDiscountUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceDiscountMutation
}

// Where appends a list predicates to the BillingInvoiceDiscountUpdate builder.
func (bidu *BillingInvoiceDiscountUpdate) Where(ps ...predicate.BillingInvoiceDiscount) *BillingInvoiceDiscountUpdate {
	bidu.mutation.Where(ps...)
	return bidu
}

// SetMetadata sets the "metadata" field.
func (bidu *BillingInvoiceDiscountUpdate) SetMetadata(m map[string]string) *BillingInvoiceDiscountUpdate {
	bidu.mutation.SetMetadata(m)
	return bidu
}

// ClearMetadata clears the value of the "metadata" field.
func (bidu *BillingInvoiceDiscountUpdate) ClearMetadata() *BillingInvoiceDiscountUpdate {
	bidu.mutation.ClearMetadata()
	return bidu
}

// SetUpdatedAt sets the "updated_at" field.
func (bidu *BillingInvoiceDiscountUpdate) SetUpdatedAt(t time.Time) *BillingInvoiceDiscountUpdate {
	bidu.mutation.SetUpdatedAt(t)
	return bidu
}

// SetDeletedAt sets the "deleted_at" field.
func (bidu *BillingInvoiceDiscountUpdate) SetDeletedAt(t time.Time) *BillingInvoiceDiscountUpdate {
	bidu.mutation.SetDeletedAt(t)
	return bidu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bidu *BillingInvoiceDiscountUpdate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceDiscountUpdate {
	if t != nil {
		bidu.SetDeletedAt(*t)
	}
	return bidu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bidu *BillingInvoiceDiscountUpdate) ClearDeletedAt() *BillingInvoiceDiscountUpdate {
	bidu.mutation.ClearDeletedAt()
	return bidu
}

// SetName sets the "name" field.
func (bidu *BillingInvoiceDiscountUpdate) SetName(s string) *BillingInvoiceDiscountUpdate {
	bidu.mutation.SetName(s)
	return bidu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bidu *BillingInvoiceDiscountUpdate) SetNillableName(s *string) *BillingInvoiceDiscountUpdate {
	if s != nil {
		bidu.SetName(*s)
	}
	return bidu
}

// SetDescription sets the "description" field.
func (bidu *BillingInvoiceDiscountUpdate) SetDescription(s string) *BillingInvoiceDiscountUpdate {
	bidu.mutation.SetDescription(s)
	return bidu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bidu *BillingInvoiceDiscountUpdate) SetNillableDescription(s *string) *BillingInvoiceDiscountUpdate {
	if s != nil {
		bidu.SetDescription(*s)
	}
	return bidu
}

// ClearDescription clears the value of the "description" field.
func (bidu *BillingInvoiceDiscountUpdate) ClearDescription() *BillingInvoiceDiscountUpdate {
	bidu.mutation.ClearDescription()
	return bidu
}

// SetInvoiceID sets the "invoice_id" field.
func (bidu *BillingInvoiceDiscountUpdate) SetInvoiceID(s string) *BillingInvoiceDiscountUpdate {
	bidu.mutation.SetInvoiceID(s)
	return bidu
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (bidu *BillingInvoiceDiscountUpdate) SetNillableInvoiceID(s *string) *BillingInvoiceDiscountUpdate {
	if s != nil {
		bidu.SetInvoiceID(*s)
	}
	return bidu
}

// SetType sets the "type" field.
func (bidu *BillingInvoiceDiscountUpdate) SetType(bdt billing.InvoiceDiscountType) *BillingInvoiceDiscountUpdate {
	bidu.mutation.SetType(bdt)
	return bidu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bidu *BillingInvoiceDiscountUpdate) SetNillableType(bdt *billing.InvoiceDiscountType) *BillingInvoiceDiscountUpdate {
	if bdt != nil {
		bidu.SetType(*bdt)
	}
	return bidu
}

// SetAmount sets the "amount" field.
func (bidu *BillingInvoiceDiscountUpdate) SetAmount(a alpacadecimal.Decimal) *BillingInvoiceDiscountUpdate {
	bidu.mutation.SetAmount(a)
	return bidu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (bidu *BillingInvoiceDiscountUpdate) SetNillableAmount(a *alpacadecimal.Decimal) *BillingInvoiceDiscountUpdate {
	if a != nil {
		bidu.SetAmount(*a)
	}
	return bidu
}

// SetLineIds sets the "line_ids" field.
func (bidu *BillingInvoiceDiscountUpdate) SetLineIds(s []string) *BillingInvoiceDiscountUpdate {
	bidu.mutation.SetLineIds(s)
	return bidu
}

// AppendLineIds appends s to the "line_ids" field.
func (bidu *BillingInvoiceDiscountUpdate) AppendLineIds(s []string) *BillingInvoiceDiscountUpdate {
	bidu.mutation.AppendLineIds(s)
	return bidu
}

// ClearLineIds clears the value of the "line_ids" field.
func (bidu *BillingInvoiceDiscountUpdate) ClearLineIds() *BillingInvoiceDiscountUpdate {
	bidu.mutation.ClearLineIds()
	return bidu
}

// SetInvoice sets the "invoice" edge to the BillingInvoice entity.
func (bidu *BillingInvoiceDiscountUpdate) SetInvoice(b *BillingInvoice) *BillingInvoiceDiscountUpdate {
	return bidu.SetInvoiceID(b.ID)
}

// AddLineIDs adds the "lines" edge to the BillingInvoiceLine entity by IDs.
func (bidu *BillingInvoiceDiscountUpdate) AddLineIDs(ids ...string) *BillingInvoiceDiscountUpdate {
	bidu.mutation.AddLineIDs(ids...)
	return bidu
}

// AddLines adds the "lines" edges to the BillingInvoiceLine entity.
func (bidu *BillingInvoiceDiscountUpdate) AddLines(b ...*BillingInvoiceLine) *BillingInvoiceDiscountUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bidu.AddLineIDs(ids...)
}

// Mutation returns the BillingInvoiceDiscountMutation object of the builder.
func (bidu *BillingInvoiceDiscountUpdate) Mutation() *BillingInvoiceDiscountMutation {
	return bidu.mutation
}

// ClearInvoice clears the "invoice" edge to the BillingInvoice entity.
func (bidu *BillingInvoiceDiscountUpdate) ClearInvoice() *BillingInvoiceDiscountUpdate {
	bidu.mutation.ClearInvoice()
	return bidu
}

// ClearLines clears all "lines" edges to the BillingInvoiceLine entity.
func (bidu *BillingInvoiceDiscountUpdate) ClearLines() *BillingInvoiceDiscountUpdate {
	bidu.mutation.ClearLines()
	return bidu
}

// RemoveLineIDs removes the "lines" edge to BillingInvoiceLine entities by IDs.
func (bidu *BillingInvoiceDiscountUpdate) RemoveLineIDs(ids ...string) *BillingInvoiceDiscountUpdate {
	bidu.mutation.RemoveLineIDs(ids...)
	return bidu
}

// RemoveLines removes "lines" edges to BillingInvoiceLine entities.
func (bidu *BillingInvoiceDiscountUpdate) RemoveLines(b ...*BillingInvoiceLine) *BillingInvoiceDiscountUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bidu.RemoveLineIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bidu *BillingInvoiceDiscountUpdate) Save(ctx context.Context) (int, error) {
	bidu.defaults()
	return withHooks(ctx, bidu.sqlSave, bidu.mutation, bidu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bidu *BillingInvoiceDiscountUpdate) SaveX(ctx context.Context) int {
	affected, err := bidu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bidu *BillingInvoiceDiscountUpdate) Exec(ctx context.Context) error {
	_, err := bidu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bidu *BillingInvoiceDiscountUpdate) ExecX(ctx context.Context) {
	if err := bidu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bidu *BillingInvoiceDiscountUpdate) defaults() {
	if _, ok := bidu.mutation.UpdatedAt(); !ok {
		v := billinginvoicediscount.UpdateDefaultUpdatedAt()
		bidu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bidu *BillingInvoiceDiscountUpdate) check() error {
	if v, ok := bidu.mutation.GetType(); ok {
		if err := billinginvoicediscount.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceDiscount.type": %w`, err)}
		}
	}
	if bidu.mutation.InvoiceCleared() && len(bidu.mutation.InvoiceIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceDiscount.invoice"`)
	}
	return nil
}

func (bidu *BillingInvoiceDiscountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bidu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoicediscount.Table, billinginvoicediscount.Columns, sqlgraph.NewFieldSpec(billinginvoicediscount.FieldID, field.TypeString))
	if ps := bidu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bidu.mutation.Metadata(); ok {
		_spec.SetField(billinginvoicediscount.FieldMetadata, field.TypeJSON, value)
	}
	if bidu.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoicediscount.FieldMetadata, field.TypeJSON)
	}
	if value, ok := bidu.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicediscount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bidu.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicediscount.FieldDeletedAt, field.TypeTime, value)
	}
	if bidu.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoicediscount.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bidu.mutation.Name(); ok {
		_spec.SetField(billinginvoicediscount.FieldName, field.TypeString, value)
	}
	if value, ok := bidu.mutation.Description(); ok {
		_spec.SetField(billinginvoicediscount.FieldDescription, field.TypeString, value)
	}
	if bidu.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoicediscount.FieldDescription, field.TypeString)
	}
	if value, ok := bidu.mutation.GetType(); ok {
		_spec.SetField(billinginvoicediscount.FieldType, field.TypeEnum, value)
	}
	if value, ok := bidu.mutation.Amount(); ok {
		_spec.SetField(billinginvoicediscount.FieldAmount, field.TypeOther, value)
	}
	if value, ok := bidu.mutation.LineIds(); ok {
		_spec.SetField(billinginvoicediscount.FieldLineIds, field.TypeJSON, value)
	}
	if value, ok := bidu.mutation.AppendedLineIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, billinginvoicediscount.FieldLineIds, value)
		})
	}
	if bidu.mutation.LineIdsCleared() {
		_spec.ClearField(billinginvoicediscount.FieldLineIds, field.TypeJSON)
	}
	if bidu.mutation.InvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicediscount.InvoiceTable,
			Columns: []string{billinginvoicediscount.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bidu.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicediscount.InvoiceTable,
			Columns: []string{billinginvoicediscount.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bidu.mutation.LinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicediscount.LinesTable,
			Columns: []string{billinginvoicediscount.LinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bidu.mutation.RemovedLinesIDs(); len(nodes) > 0 && !bidu.mutation.LinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicediscount.LinesTable,
			Columns: []string{billinginvoicediscount.LinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bidu.mutation.LinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicediscount.LinesTable,
			Columns: []string{billinginvoicediscount.LinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bidu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicediscount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bidu.mutation.done = true
	return n, nil
}

// BillingInvoiceDiscountUpdateOne is the builder for updating a single BillingInvoiceDiscount entity.
type BillingInvoiceDiscountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceDiscountMutation
}

// SetMetadata sets the "metadata" field.
func (biduo *BillingInvoiceDiscountUpdateOne) SetMetadata(m map[string]string) *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.SetMetadata(m)
	return biduo
}

// ClearMetadata clears the value of the "metadata" field.
func (biduo *BillingInvoiceDiscountUpdateOne) ClearMetadata() *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.ClearMetadata()
	return biduo
}

// SetUpdatedAt sets the "updated_at" field.
func (biduo *BillingInvoiceDiscountUpdateOne) SetUpdatedAt(t time.Time) *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.SetUpdatedAt(t)
	return biduo
}

// SetDeletedAt sets the "deleted_at" field.
func (biduo *BillingInvoiceDiscountUpdateOne) SetDeletedAt(t time.Time) *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.SetDeletedAt(t)
	return biduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biduo *BillingInvoiceDiscountUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingInvoiceDiscountUpdateOne {
	if t != nil {
		biduo.SetDeletedAt(*t)
	}
	return biduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (biduo *BillingInvoiceDiscountUpdateOne) ClearDeletedAt() *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.ClearDeletedAt()
	return biduo
}

// SetName sets the "name" field.
func (biduo *BillingInvoiceDiscountUpdateOne) SetName(s string) *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.SetName(s)
	return biduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (biduo *BillingInvoiceDiscountUpdateOne) SetNillableName(s *string) *BillingInvoiceDiscountUpdateOne {
	if s != nil {
		biduo.SetName(*s)
	}
	return biduo
}

// SetDescription sets the "description" field.
func (biduo *BillingInvoiceDiscountUpdateOne) SetDescription(s string) *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.SetDescription(s)
	return biduo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (biduo *BillingInvoiceDiscountUpdateOne) SetNillableDescription(s *string) *BillingInvoiceDiscountUpdateOne {
	if s != nil {
		biduo.SetDescription(*s)
	}
	return biduo
}

// ClearDescription clears the value of the "description" field.
func (biduo *BillingInvoiceDiscountUpdateOne) ClearDescription() *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.ClearDescription()
	return biduo
}

// SetInvoiceID sets the "invoice_id" field.
func (biduo *BillingInvoiceDiscountUpdateOne) SetInvoiceID(s string) *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.SetInvoiceID(s)
	return biduo
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (biduo *BillingInvoiceDiscountUpdateOne) SetNillableInvoiceID(s *string) *BillingInvoiceDiscountUpdateOne {
	if s != nil {
		biduo.SetInvoiceID(*s)
	}
	return biduo
}

// SetType sets the "type" field.
func (biduo *BillingInvoiceDiscountUpdateOne) SetType(bdt billing.InvoiceDiscountType) *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.SetType(bdt)
	return biduo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (biduo *BillingInvoiceDiscountUpdateOne) SetNillableType(bdt *billing.InvoiceDiscountType) *BillingInvoiceDiscountUpdateOne {
	if bdt != nil {
		biduo.SetType(*bdt)
	}
	return biduo
}

// SetAmount sets the "amount" field.
func (biduo *BillingInvoiceDiscountUpdateOne) SetAmount(a alpacadecimal.Decimal) *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.SetAmount(a)
	return biduo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (biduo *BillingInvoiceDiscountUpdateOne) SetNillableAmount(a *alpacadecimal.Decimal) *BillingInvoiceDiscountUpdateOne {
	if a != nil {
		biduo.SetAmount(*a)
	}
	return biduo
}

// SetLineIds sets the "line_ids" field.
func (biduo *BillingInvoiceDiscountUpdateOne) SetLineIds(s []string) *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.SetLineIds(s)
	return biduo
}

// AppendLineIds appends s to the "line_ids" field.
func (biduo *BillingInvoiceDiscountUpdateOne) AppendLineIds(s []string) *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.AppendLineIds(s)
	return biduo
}

// ClearLineIds clears the value of the "line_ids" field.
func (biduo *BillingInvoiceDiscountUpdateOne) ClearLineIds() *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.ClearLineIds()
	return biduo
}

// SetInvoice sets the "invoice" edge to the BillingInvoice entity.
func (biduo *BillingInvoiceDiscountUpdateOne) SetInvoice(b *BillingInvoice) *BillingInvoiceDiscountUpdateOne {
	return biduo.SetInvoiceID(b.ID)
}

// AddLineIDs adds the "lines" edge to the BillingInvoiceLine entity by IDs.
func (biduo *BillingInvoiceDiscountUpdateOne) AddLineIDs(ids ...string) *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.AddLineIDs(ids...)
	return biduo
}

// AddLines adds the "lines" edges to the BillingInvoiceLine entity.
func (biduo *BillingInvoiceDiscountUpdateOne) AddLines(b ...*BillingInvoiceLine) *BillingInvoiceDiscountUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biduo.AddLineIDs(ids...)
}

// Mutation returns the BillingInvoiceDiscountMutation object of the builder.
func (biduo *BillingInvoiceDiscountUpdateOne) Mutation() *BillingInvoiceDiscountMutation {
	return biduo.mutation
}

// ClearInvoice clears the "invoice" edge to the BillingInvoice entity.
func (biduo *BillingInvoiceDiscountUpdateOne) ClearInvoice() *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.ClearInvoice()
	return biduo
}

// ClearLines clears all "lines" edges to the BillingInvoiceLine entity.
func (biduo *BillingInvoiceDiscountUpdateOne) ClearLines() *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.ClearLines()
	return biduo
}

// RemoveLineIDs removes the "lines" edge to BillingInvoiceLine entities by IDs.
func (biduo *BillingInvoiceDiscountUpdateOne) RemoveLineIDs(ids ...string) *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.RemoveLineIDs(ids...)
	return biduo
}

// RemoveLines removes "lines" edges to BillingInvoiceLine entities.
func (biduo *BillingInvoiceDiscountUpdateOne) RemoveLines(b ...*BillingInvoiceLine) *BillingInvoiceDiscountUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biduo.RemoveLineIDs(ids...)
}

// Where appends a list predicates to the BillingInvoiceDiscountUpdate builder.
func (biduo *BillingInvoiceDiscountUpdateOne) Where(ps ...predicate.BillingInvoiceDiscount) *BillingInvoiceDiscountUpdateOne {
	biduo.mutation.Where(ps...)
	return biduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (biduo *BillingInvoiceDiscountUpdateOne) Select(field string, fields ...string) *BillingInvoiceDiscountUpdateOne {
	biduo.fields = append([]string{field}, fields...)
	return biduo
}

// Save executes the query and returns the updated BillingInvoiceDiscount entity.
func (biduo *BillingInvoiceDiscountUpdateOne) Save(ctx context.Context) (*BillingInvoiceDiscount, error) {
	biduo.defaults()
	return withHooks(ctx, biduo.sqlSave, biduo.mutation, biduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biduo *BillingInvoiceDiscountUpdateOne) SaveX(ctx context.Context) *BillingInvoiceDiscount {
	node, err := biduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biduo *BillingInvoiceDiscountUpdateOne) Exec(ctx context.Context) error {
	_, err := biduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biduo *BillingInvoiceDiscountUpdateOne) ExecX(ctx context.Context) {
	if err := biduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biduo *BillingInvoiceDiscountUpdateOne) defaults() {
	if _, ok := biduo.mutation.UpdatedAt(); !ok {
		v := billinginvoicediscount.UpdateDefaultUpdatedAt()
		biduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biduo *BillingInvoiceDiscountUpdateOne) check() error {
	if v, ok := biduo.mutation.GetType(); ok {
		if err := billinginvoicediscount.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceDiscount.type": %w`, err)}
		}
	}
	if biduo.mutation.InvoiceCleared() && len(biduo.mutation.InvoiceIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceDiscount.invoice"`)
	}
	return nil
}

func (biduo *BillingInvoiceDiscountUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoiceDiscount, err error) {
	if err := biduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoicediscount.Table, billinginvoicediscount.Columns, sqlgraph.NewFieldSpec(billinginvoicediscount.FieldID, field.TypeString))
	id, ok := biduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoiceDiscount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := biduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoicediscount.FieldID)
		for _, f := range fields {
			if !billinginvoicediscount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoicediscount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := biduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biduo.mutation.Metadata(); ok {
		_spec.SetField(billinginvoicediscount.FieldMetadata, field.TypeJSON, value)
	}
	if biduo.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoicediscount.FieldMetadata, field.TypeJSON)
	}
	if value, ok := biduo.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicediscount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biduo.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicediscount.FieldDeletedAt, field.TypeTime, value)
	}
	if biduo.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoicediscount.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := biduo.mutation.Name(); ok {
		_spec.SetField(billinginvoicediscount.FieldName, field.TypeString, value)
	}
	if value, ok := biduo.mutation.Description(); ok {
		_spec.SetField(billinginvoicediscount.FieldDescription, field.TypeString, value)
	}
	if biduo.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoicediscount.FieldDescription, field.TypeString)
	}
	if value, ok := biduo.mutation.GetType(); ok {
		_spec.SetField(billinginvoicediscount.FieldType, field.TypeEnum, value)
	}
	if value, ok := biduo.mutation.Amount(); ok {
		_spec.SetField(billinginvoicediscount.FieldAmount, field.TypeOther, value)
	}
	if value, ok := biduo.mutation.LineIds(); ok {
		_spec.SetField(billinginvoicediscount.FieldLineIds, field.TypeJSON, value)
	}
	if value, ok := biduo.mutation.AppendedLineIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, billinginvoicediscount.FieldLineIds, value)
		})
	}
	if biduo.mutation.LineIdsCleared() {
		_spec.ClearField(billinginvoicediscount.FieldLineIds, field.TypeJSON)
	}
	if biduo.mutation.InvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicediscount.InvoiceTable,
			Columns: []string{billinginvoicediscount.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biduo.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicediscount.InvoiceTable,
			Columns: []string{billinginvoicediscount.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biduo.mutation.LinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicediscount.LinesTable,
			Columns: []string{billinginvoicediscount.LinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biduo.mutation.RemovedLinesIDs(); len(nodes) > 0 && !biduo.mutation.LinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicediscount.LinesTable,
			Columns: []string{billinginvoicediscount.LinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biduo.mutation.LinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicediscount.LinesTable,
			Columns: []string{billinginvoicediscount.LinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingInvoiceDiscount{config: biduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicediscount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	biduo.mutation.done = true
	return _node, nil
}
