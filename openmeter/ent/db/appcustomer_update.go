// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustomer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// AppCustomerUpdate is the builder for updating AppCustomer entities.
type AppCustomerUpdate struct {
	config
	hooks    []Hook
	mutation *AppCustomerMutation
}

// Where appends a list predicates to the AppCustomerUpdate builder.
func (_u *AppCustomerUpdate) Where(ps ...predicate.AppCustomer) *AppCustomerUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AppCustomerUpdate) SetUpdatedAt(v time.Time) *AppCustomerUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *AppCustomerUpdate) SetDeletedAt(v time.Time) *AppCustomerUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *AppCustomerUpdate) SetNillableDeletedAt(v *time.Time) *AppCustomerUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *AppCustomerUpdate) ClearDeletedAt() *AppCustomerUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// Mutation returns the AppCustomerMutation object of the builder.
func (_u *AppCustomerUpdate) Mutation() *AppCustomerMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AppCustomerUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AppCustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AppCustomerUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AppCustomerUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AppCustomerUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := appcustomer.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AppCustomerUpdate) check() error {
	if _u.mutation.AppCleared() && len(_u.mutation.AppIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "AppCustomer.app"`)
	}
	if _u.mutation.CustomerCleared() && len(_u.mutation.CustomerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "AppCustomer.customer"`)
	}
	return nil
}

func (_u *AppCustomerUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appcustomer.Table, appcustomer.Columns, sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(appcustomer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(appcustomer.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(appcustomer.FieldDeletedAt, field.TypeTime)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appcustomer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AppCustomerUpdateOne is the builder for updating a single AppCustomer entity.
type AppCustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppCustomerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AppCustomerUpdateOne) SetUpdatedAt(v time.Time) *AppCustomerUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *AppCustomerUpdateOne) SetDeletedAt(v time.Time) *AppCustomerUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *AppCustomerUpdateOne) SetNillableDeletedAt(v *time.Time) *AppCustomerUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *AppCustomerUpdateOne) ClearDeletedAt() *AppCustomerUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// Mutation returns the AppCustomerMutation object of the builder.
func (_u *AppCustomerUpdateOne) Mutation() *AppCustomerMutation {
	return _u.mutation
}

// Where appends a list predicates to the AppCustomerUpdate builder.
func (_u *AppCustomerUpdateOne) Where(ps ...predicate.AppCustomer) *AppCustomerUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AppCustomerUpdateOne) Select(field string, fields ...string) *AppCustomerUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AppCustomer entity.
func (_u *AppCustomerUpdateOne) Save(ctx context.Context) (*AppCustomer, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AppCustomerUpdateOne) SaveX(ctx context.Context) *AppCustomer {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AppCustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AppCustomerUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AppCustomerUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := appcustomer.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AppCustomerUpdateOne) check() error {
	if _u.mutation.AppCleared() && len(_u.mutation.AppIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "AppCustomer.app"`)
	}
	if _u.mutation.CustomerCleared() && len(_u.mutation.CustomerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "AppCustomer.customer"`)
	}
	return nil
}

func (_u *AppCustomerUpdateOne) sqlSave(ctx context.Context) (_node *AppCustomer, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appcustomer.Table, appcustomer.Columns, sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "AppCustomer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appcustomer.FieldID)
		for _, f := range fields {
			if !appcustomer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != appcustomer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(appcustomer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(appcustomer.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(appcustomer.FieldDeletedAt, field.TypeTime)
	}
	_node = &AppCustomer{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appcustomer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
