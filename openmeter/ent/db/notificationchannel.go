// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationchannel"
	"github.com/openmeterio/openmeter/openmeter/notification"
	"github.com/openmeterio/openmeter/pkg/models"
)

// NotificationChannel is the model entity for the NotificationChannel schema.
type NotificationChannel struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Annotations holds the value of the "annotations" field.
	Annotations models.Annotations `json:"annotations,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Type holds the value of the "type" field.
	Type notification.ChannelType `json:"type,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Disabled holds the value of the "disabled" field.
	Disabled bool `json:"disabled,omitempty"`
	// Config holds the value of the "config" field.
	Config notification.ChannelConfig `json:"config,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationChannelQuery when eager-loading is set.
	Edges        NotificationChannelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NotificationChannelEdges holds the relations/edges for other nodes in the graph.
type NotificationChannelEdges struct {
	// Rules holds the value of the rules edge.
	Rules []*NotificationRule `json:"rules,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RulesOrErr returns the Rules value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationChannelEdges) RulesOrErr() ([]*NotificationRule, error) {
	if e.loadedTypes[0] {
		return e.Rules, nil
	}
	return nil, &NotLoadedError{edge: "rules"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotificationChannel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notificationchannel.FieldAnnotations, notificationchannel.FieldMetadata:
			values[i] = new([]byte)
		case notificationchannel.FieldDisabled:
			values[i] = new(sql.NullBool)
		case notificationchannel.FieldID, notificationchannel.FieldNamespace, notificationchannel.FieldType, notificationchannel.FieldName:
			values[i] = new(sql.NullString)
		case notificationchannel.FieldCreatedAt, notificationchannel.FieldUpdatedAt, notificationchannel.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case notificationchannel.FieldConfig:
			values[i] = notificationchannel.ValueScanner.Config.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotificationChannel fields.
func (_m *NotificationChannel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notificationchannel.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case notificationchannel.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				_m.Namespace = value.String
			}
		case notificationchannel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case notificationchannel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case notificationchannel.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case notificationchannel.FieldAnnotations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field annotations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Annotations); err != nil {
					return fmt.Errorf("unmarshal field annotations: %w", err)
				}
			}
		case notificationchannel.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case notificationchannel.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = notification.ChannelType(value.String)
			}
		case notificationchannel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case notificationchannel.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				_m.Disabled = value.Bool
			}
		case notificationchannel.FieldConfig:
			if value, err := notificationchannel.ValueScanner.Config.FromValue(values[i]); err != nil {
				return err
			} else {
				_m.Config = value
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NotificationChannel.
// This includes values selected through modifiers, order, etc.
func (_m *NotificationChannel) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryRules queries the "rules" edge of the NotificationChannel entity.
func (_m *NotificationChannel) QueryRules() *NotificationRuleQuery {
	return NewNotificationChannelClient(_m.config).QueryRules(_m)
}

// Update returns a builder for updating this NotificationChannel.
// Note that you need to call NotificationChannel.Unwrap() before calling this method if this NotificationChannel
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *NotificationChannel) Update() *NotificationChannelUpdateOne {
	return NewNotificationChannelClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the NotificationChannel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *NotificationChannel) Unwrap() *NotificationChannel {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("db: NotificationChannel is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *NotificationChannel) String() string {
	var builder strings.Builder
	builder.WriteString("NotificationChannel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("namespace=")
	builder.WriteString(_m.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("annotations=")
	builder.WriteString(fmt.Sprintf("%v", _m.Annotations))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("disabled=")
	builder.WriteString(fmt.Sprintf("%v", _m.Disabled))
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", _m.Config))
	builder.WriteByte(')')
	return builder.String()
}

// NotificationChannels is a parsable slice of NotificationChannel.
type NotificationChannels []*NotificationChannel
