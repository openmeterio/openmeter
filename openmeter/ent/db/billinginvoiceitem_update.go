// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	billingentity "github.com/openmeterio/openmeter/openmeter/billing/entity"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceitem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingInvoiceItemUpdate is the builder for updating BillingInvoiceItem entities.
type BillingInvoiceItemUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceItemMutation
}

// Where appends a list predicates to the BillingInvoiceItemUpdate builder.
func (biiu *BillingInvoiceItemUpdate) Where(ps ...predicate.BillingInvoiceItem) *BillingInvoiceItemUpdate {
	biiu.mutation.Where(ps...)
	return biiu
}

// SetUpdatedAt sets the "updated_at" field.
func (biiu *BillingInvoiceItemUpdate) SetUpdatedAt(t time.Time) *BillingInvoiceItemUpdate {
	biiu.mutation.SetUpdatedAt(t)
	return biiu
}

// SetDeletedAt sets the "deleted_at" field.
func (biiu *BillingInvoiceItemUpdate) SetDeletedAt(t time.Time) *BillingInvoiceItemUpdate {
	biiu.mutation.SetDeletedAt(t)
	return biiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biiu *BillingInvoiceItemUpdate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceItemUpdate {
	if t != nil {
		biiu.SetDeletedAt(*t)
	}
	return biiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (biiu *BillingInvoiceItemUpdate) ClearDeletedAt() *BillingInvoiceItemUpdate {
	biiu.mutation.ClearDeletedAt()
	return biiu
}

// SetMetadata sets the "metadata" field.
func (biiu *BillingInvoiceItemUpdate) SetMetadata(m map[string]string) *BillingInvoiceItemUpdate {
	biiu.mutation.SetMetadata(m)
	return biiu
}

// ClearMetadata clears the value of the "metadata" field.
func (biiu *BillingInvoiceItemUpdate) ClearMetadata() *BillingInvoiceItemUpdate {
	biiu.mutation.ClearMetadata()
	return biiu
}

// SetInvoiceID sets the "invoice_id" field.
func (biiu *BillingInvoiceItemUpdate) SetInvoiceID(s string) *BillingInvoiceItemUpdate {
	biiu.mutation.SetInvoiceID(s)
	return biiu
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (biiu *BillingInvoiceItemUpdate) SetNillableInvoiceID(s *string) *BillingInvoiceItemUpdate {
	if s != nil {
		biiu.SetInvoiceID(*s)
	}
	return biiu
}

// ClearInvoiceID clears the value of the "invoice_id" field.
func (biiu *BillingInvoiceItemUpdate) ClearInvoiceID() *BillingInvoiceItemUpdate {
	biiu.mutation.ClearInvoiceID()
	return biiu
}

// SetPeriodStart sets the "period_start" field.
func (biiu *BillingInvoiceItemUpdate) SetPeriodStart(t time.Time) *BillingInvoiceItemUpdate {
	biiu.mutation.SetPeriodStart(t)
	return biiu
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (biiu *BillingInvoiceItemUpdate) SetNillablePeriodStart(t *time.Time) *BillingInvoiceItemUpdate {
	if t != nil {
		biiu.SetPeriodStart(*t)
	}
	return biiu
}

// SetPeriodEnd sets the "period_end" field.
func (biiu *BillingInvoiceItemUpdate) SetPeriodEnd(t time.Time) *BillingInvoiceItemUpdate {
	biiu.mutation.SetPeriodEnd(t)
	return biiu
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (biiu *BillingInvoiceItemUpdate) SetNillablePeriodEnd(t *time.Time) *BillingInvoiceItemUpdate {
	if t != nil {
		biiu.SetPeriodEnd(*t)
	}
	return biiu
}

// SetInvoiceAt sets the "invoice_at" field.
func (biiu *BillingInvoiceItemUpdate) SetInvoiceAt(t time.Time) *BillingInvoiceItemUpdate {
	biiu.mutation.SetInvoiceAt(t)
	return biiu
}

// SetNillableInvoiceAt sets the "invoice_at" field if the given value is not nil.
func (biiu *BillingInvoiceItemUpdate) SetNillableInvoiceAt(t *time.Time) *BillingInvoiceItemUpdate {
	if t != nil {
		biiu.SetInvoiceAt(*t)
	}
	return biiu
}

// SetType sets the "type" field.
func (biiu *BillingInvoiceItemUpdate) SetType(bit billingentity.InvoiceItemType) *BillingInvoiceItemUpdate {
	biiu.mutation.SetType(bit)
	return biiu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (biiu *BillingInvoiceItemUpdate) SetNillableType(bit *billingentity.InvoiceItemType) *BillingInvoiceItemUpdate {
	if bit != nil {
		biiu.SetType(*bit)
	}
	return biiu
}

// SetName sets the "name" field.
func (biiu *BillingInvoiceItemUpdate) SetName(s string) *BillingInvoiceItemUpdate {
	biiu.mutation.SetName(s)
	return biiu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (biiu *BillingInvoiceItemUpdate) SetNillableName(s *string) *BillingInvoiceItemUpdate {
	if s != nil {
		biiu.SetName(*s)
	}
	return biiu
}

// SetQuantity sets the "quantity" field.
func (biiu *BillingInvoiceItemUpdate) SetQuantity(a alpacadecimal.Decimal) *BillingInvoiceItemUpdate {
	biiu.mutation.SetQuantity(a)
	return biiu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (biiu *BillingInvoiceItemUpdate) SetNillableQuantity(a *alpacadecimal.Decimal) *BillingInvoiceItemUpdate {
	if a != nil {
		biiu.SetQuantity(*a)
	}
	return biiu
}

// ClearQuantity clears the value of the "quantity" field.
func (biiu *BillingInvoiceItemUpdate) ClearQuantity() *BillingInvoiceItemUpdate {
	biiu.mutation.ClearQuantity()
	return biiu
}

// SetUnitPrice sets the "unit_price" field.
func (biiu *BillingInvoiceItemUpdate) SetUnitPrice(a alpacadecimal.Decimal) *BillingInvoiceItemUpdate {
	biiu.mutation.SetUnitPrice(a)
	return biiu
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (biiu *BillingInvoiceItemUpdate) SetNillableUnitPrice(a *alpacadecimal.Decimal) *BillingInvoiceItemUpdate {
	if a != nil {
		biiu.SetUnitPrice(*a)
	}
	return biiu
}

// SetTaxCodeOverride sets the "tax_code_override" field.
func (biiu *BillingInvoiceItemUpdate) SetTaxCodeOverride(bo billingentity.TaxOverrides) *BillingInvoiceItemUpdate {
	biiu.mutation.SetTaxCodeOverride(bo)
	return biiu
}

// SetNillableTaxCodeOverride sets the "tax_code_override" field if the given value is not nil.
func (biiu *BillingInvoiceItemUpdate) SetNillableTaxCodeOverride(bo *billingentity.TaxOverrides) *BillingInvoiceItemUpdate {
	if bo != nil {
		biiu.SetTaxCodeOverride(*bo)
	}
	return biiu
}

// SetBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID.
func (biiu *BillingInvoiceItemUpdate) SetBillingInvoiceID(id string) *BillingInvoiceItemUpdate {
	biiu.mutation.SetBillingInvoiceID(id)
	return biiu
}

// SetNillableBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID if the given value is not nil.
func (biiu *BillingInvoiceItemUpdate) SetNillableBillingInvoiceID(id *string) *BillingInvoiceItemUpdate {
	if id != nil {
		biiu = biiu.SetBillingInvoiceID(*id)
	}
	return biiu
}

// SetBillingInvoice sets the "billing_invoice" edge to the BillingInvoice entity.
func (biiu *BillingInvoiceItemUpdate) SetBillingInvoice(b *BillingInvoice) *BillingInvoiceItemUpdate {
	return biiu.SetBillingInvoiceID(b.ID)
}

// Mutation returns the BillingInvoiceItemMutation object of the builder.
func (biiu *BillingInvoiceItemUpdate) Mutation() *BillingInvoiceItemMutation {
	return biiu.mutation
}

// ClearBillingInvoice clears the "billing_invoice" edge to the BillingInvoice entity.
func (biiu *BillingInvoiceItemUpdate) ClearBillingInvoice() *BillingInvoiceItemUpdate {
	biiu.mutation.ClearBillingInvoice()
	return biiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (biiu *BillingInvoiceItemUpdate) Save(ctx context.Context) (int, error) {
	biiu.defaults()
	return withHooks(ctx, biiu.sqlSave, biiu.mutation, biiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biiu *BillingInvoiceItemUpdate) SaveX(ctx context.Context) int {
	affected, err := biiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biiu *BillingInvoiceItemUpdate) Exec(ctx context.Context) error {
	_, err := biiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biiu *BillingInvoiceItemUpdate) ExecX(ctx context.Context) {
	if err := biiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biiu *BillingInvoiceItemUpdate) defaults() {
	if _, ok := biiu.mutation.UpdatedAt(); !ok {
		v := billinginvoiceitem.UpdateDefaultUpdatedAt()
		biiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biiu *BillingInvoiceItemUpdate) check() error {
	if v, ok := biiu.mutation.GetType(); ok {
		if err := billinginvoiceitem.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceItem.type": %w`, err)}
		}
	}
	if v, ok := biiu.mutation.Name(); ok {
		if err := billinginvoiceitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceItem.name": %w`, err)}
		}
	}
	return nil
}

func (biiu *BillingInvoiceItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := biiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoiceitem.Table, billinginvoiceitem.Columns, sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString))
	if ps := biiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biiu.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoiceitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biiu.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoiceitem.FieldDeletedAt, field.TypeTime, value)
	}
	if biiu.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoiceitem.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := biiu.mutation.Metadata(); ok {
		_spec.SetField(billinginvoiceitem.FieldMetadata, field.TypeJSON, value)
	}
	if biiu.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoiceitem.FieldMetadata, field.TypeJSON)
	}
	if value, ok := biiu.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoiceitem.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := biiu.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoiceitem.FieldPeriodEnd, field.TypeTime, value)
	}
	if value, ok := biiu.mutation.InvoiceAt(); ok {
		_spec.SetField(billinginvoiceitem.FieldInvoiceAt, field.TypeTime, value)
	}
	if value, ok := biiu.mutation.GetType(); ok {
		_spec.SetField(billinginvoiceitem.FieldType, field.TypeEnum, value)
	}
	if value, ok := biiu.mutation.Name(); ok {
		_spec.SetField(billinginvoiceitem.FieldName, field.TypeString, value)
	}
	if value, ok := biiu.mutation.Quantity(); ok {
		_spec.SetField(billinginvoiceitem.FieldQuantity, field.TypeOther, value)
	}
	if biiu.mutation.QuantityCleared() {
		_spec.ClearField(billinginvoiceitem.FieldQuantity, field.TypeOther)
	}
	if value, ok := biiu.mutation.UnitPrice(); ok {
		_spec.SetField(billinginvoiceitem.FieldUnitPrice, field.TypeOther, value)
	}
	if value, ok := biiu.mutation.TaxCodeOverride(); ok {
		_spec.SetField(billinginvoiceitem.FieldTaxCodeOverride, field.TypeJSON, value)
	}
	if biiu.mutation.BillingInvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceitem.BillingInvoiceTable,
			Columns: []string{billinginvoiceitem.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biiu.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceitem.BillingInvoiceTable,
			Columns: []string{billinginvoiceitem.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, biiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoiceitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	biiu.mutation.done = true
	return n, nil
}

// BillingInvoiceItemUpdateOne is the builder for updating a single BillingInvoiceItem entity.
type BillingInvoiceItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceItemMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (biiuo *BillingInvoiceItemUpdateOne) SetUpdatedAt(t time.Time) *BillingInvoiceItemUpdateOne {
	biiuo.mutation.SetUpdatedAt(t)
	return biiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (biiuo *BillingInvoiceItemUpdateOne) SetDeletedAt(t time.Time) *BillingInvoiceItemUpdateOne {
	biiuo.mutation.SetDeletedAt(t)
	return biiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biiuo *BillingInvoiceItemUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingInvoiceItemUpdateOne {
	if t != nil {
		biiuo.SetDeletedAt(*t)
	}
	return biiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (biiuo *BillingInvoiceItemUpdateOne) ClearDeletedAt() *BillingInvoiceItemUpdateOne {
	biiuo.mutation.ClearDeletedAt()
	return biiuo
}

// SetMetadata sets the "metadata" field.
func (biiuo *BillingInvoiceItemUpdateOne) SetMetadata(m map[string]string) *BillingInvoiceItemUpdateOne {
	biiuo.mutation.SetMetadata(m)
	return biiuo
}

// ClearMetadata clears the value of the "metadata" field.
func (biiuo *BillingInvoiceItemUpdateOne) ClearMetadata() *BillingInvoiceItemUpdateOne {
	biiuo.mutation.ClearMetadata()
	return biiuo
}

// SetInvoiceID sets the "invoice_id" field.
func (biiuo *BillingInvoiceItemUpdateOne) SetInvoiceID(s string) *BillingInvoiceItemUpdateOne {
	biiuo.mutation.SetInvoiceID(s)
	return biiuo
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (biiuo *BillingInvoiceItemUpdateOne) SetNillableInvoiceID(s *string) *BillingInvoiceItemUpdateOne {
	if s != nil {
		biiuo.SetInvoiceID(*s)
	}
	return biiuo
}

// ClearInvoiceID clears the value of the "invoice_id" field.
func (biiuo *BillingInvoiceItemUpdateOne) ClearInvoiceID() *BillingInvoiceItemUpdateOne {
	biiuo.mutation.ClearInvoiceID()
	return biiuo
}

// SetPeriodStart sets the "period_start" field.
func (biiuo *BillingInvoiceItemUpdateOne) SetPeriodStart(t time.Time) *BillingInvoiceItemUpdateOne {
	biiuo.mutation.SetPeriodStart(t)
	return biiuo
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (biiuo *BillingInvoiceItemUpdateOne) SetNillablePeriodStart(t *time.Time) *BillingInvoiceItemUpdateOne {
	if t != nil {
		biiuo.SetPeriodStart(*t)
	}
	return biiuo
}

// SetPeriodEnd sets the "period_end" field.
func (biiuo *BillingInvoiceItemUpdateOne) SetPeriodEnd(t time.Time) *BillingInvoiceItemUpdateOne {
	biiuo.mutation.SetPeriodEnd(t)
	return biiuo
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (biiuo *BillingInvoiceItemUpdateOne) SetNillablePeriodEnd(t *time.Time) *BillingInvoiceItemUpdateOne {
	if t != nil {
		biiuo.SetPeriodEnd(*t)
	}
	return biiuo
}

// SetInvoiceAt sets the "invoice_at" field.
func (biiuo *BillingInvoiceItemUpdateOne) SetInvoiceAt(t time.Time) *BillingInvoiceItemUpdateOne {
	biiuo.mutation.SetInvoiceAt(t)
	return biiuo
}

// SetNillableInvoiceAt sets the "invoice_at" field if the given value is not nil.
func (biiuo *BillingInvoiceItemUpdateOne) SetNillableInvoiceAt(t *time.Time) *BillingInvoiceItemUpdateOne {
	if t != nil {
		biiuo.SetInvoiceAt(*t)
	}
	return biiuo
}

// SetType sets the "type" field.
func (biiuo *BillingInvoiceItemUpdateOne) SetType(bit billingentity.InvoiceItemType) *BillingInvoiceItemUpdateOne {
	biiuo.mutation.SetType(bit)
	return biiuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (biiuo *BillingInvoiceItemUpdateOne) SetNillableType(bit *billingentity.InvoiceItemType) *BillingInvoiceItemUpdateOne {
	if bit != nil {
		biiuo.SetType(*bit)
	}
	return biiuo
}

// SetName sets the "name" field.
func (biiuo *BillingInvoiceItemUpdateOne) SetName(s string) *BillingInvoiceItemUpdateOne {
	biiuo.mutation.SetName(s)
	return biiuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (biiuo *BillingInvoiceItemUpdateOne) SetNillableName(s *string) *BillingInvoiceItemUpdateOne {
	if s != nil {
		biiuo.SetName(*s)
	}
	return biiuo
}

// SetQuantity sets the "quantity" field.
func (biiuo *BillingInvoiceItemUpdateOne) SetQuantity(a alpacadecimal.Decimal) *BillingInvoiceItemUpdateOne {
	biiuo.mutation.SetQuantity(a)
	return biiuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (biiuo *BillingInvoiceItemUpdateOne) SetNillableQuantity(a *alpacadecimal.Decimal) *BillingInvoiceItemUpdateOne {
	if a != nil {
		biiuo.SetQuantity(*a)
	}
	return biiuo
}

// ClearQuantity clears the value of the "quantity" field.
func (biiuo *BillingInvoiceItemUpdateOne) ClearQuantity() *BillingInvoiceItemUpdateOne {
	biiuo.mutation.ClearQuantity()
	return biiuo
}

// SetUnitPrice sets the "unit_price" field.
func (biiuo *BillingInvoiceItemUpdateOne) SetUnitPrice(a alpacadecimal.Decimal) *BillingInvoiceItemUpdateOne {
	biiuo.mutation.SetUnitPrice(a)
	return biiuo
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (biiuo *BillingInvoiceItemUpdateOne) SetNillableUnitPrice(a *alpacadecimal.Decimal) *BillingInvoiceItemUpdateOne {
	if a != nil {
		biiuo.SetUnitPrice(*a)
	}
	return biiuo
}

// SetTaxCodeOverride sets the "tax_code_override" field.
func (biiuo *BillingInvoiceItemUpdateOne) SetTaxCodeOverride(bo billingentity.TaxOverrides) *BillingInvoiceItemUpdateOne {
	biiuo.mutation.SetTaxCodeOverride(bo)
	return biiuo
}

// SetNillableTaxCodeOverride sets the "tax_code_override" field if the given value is not nil.
func (biiuo *BillingInvoiceItemUpdateOne) SetNillableTaxCodeOverride(bo *billingentity.TaxOverrides) *BillingInvoiceItemUpdateOne {
	if bo != nil {
		biiuo.SetTaxCodeOverride(*bo)
	}
	return biiuo
}

// SetBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID.
func (biiuo *BillingInvoiceItemUpdateOne) SetBillingInvoiceID(id string) *BillingInvoiceItemUpdateOne {
	biiuo.mutation.SetBillingInvoiceID(id)
	return biiuo
}

// SetNillableBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID if the given value is not nil.
func (biiuo *BillingInvoiceItemUpdateOne) SetNillableBillingInvoiceID(id *string) *BillingInvoiceItemUpdateOne {
	if id != nil {
		biiuo = biiuo.SetBillingInvoiceID(*id)
	}
	return biiuo
}

// SetBillingInvoice sets the "billing_invoice" edge to the BillingInvoice entity.
func (biiuo *BillingInvoiceItemUpdateOne) SetBillingInvoice(b *BillingInvoice) *BillingInvoiceItemUpdateOne {
	return biiuo.SetBillingInvoiceID(b.ID)
}

// Mutation returns the BillingInvoiceItemMutation object of the builder.
func (biiuo *BillingInvoiceItemUpdateOne) Mutation() *BillingInvoiceItemMutation {
	return biiuo.mutation
}

// ClearBillingInvoice clears the "billing_invoice" edge to the BillingInvoice entity.
func (biiuo *BillingInvoiceItemUpdateOne) ClearBillingInvoice() *BillingInvoiceItemUpdateOne {
	biiuo.mutation.ClearBillingInvoice()
	return biiuo
}

// Where appends a list predicates to the BillingInvoiceItemUpdate builder.
func (biiuo *BillingInvoiceItemUpdateOne) Where(ps ...predicate.BillingInvoiceItem) *BillingInvoiceItemUpdateOne {
	biiuo.mutation.Where(ps...)
	return biiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (biiuo *BillingInvoiceItemUpdateOne) Select(field string, fields ...string) *BillingInvoiceItemUpdateOne {
	biiuo.fields = append([]string{field}, fields...)
	return biiuo
}

// Save executes the query and returns the updated BillingInvoiceItem entity.
func (biiuo *BillingInvoiceItemUpdateOne) Save(ctx context.Context) (*BillingInvoiceItem, error) {
	biiuo.defaults()
	return withHooks(ctx, biiuo.sqlSave, biiuo.mutation, biiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biiuo *BillingInvoiceItemUpdateOne) SaveX(ctx context.Context) *BillingInvoiceItem {
	node, err := biiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biiuo *BillingInvoiceItemUpdateOne) Exec(ctx context.Context) error {
	_, err := biiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biiuo *BillingInvoiceItemUpdateOne) ExecX(ctx context.Context) {
	if err := biiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biiuo *BillingInvoiceItemUpdateOne) defaults() {
	if _, ok := biiuo.mutation.UpdatedAt(); !ok {
		v := billinginvoiceitem.UpdateDefaultUpdatedAt()
		biiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biiuo *BillingInvoiceItemUpdateOne) check() error {
	if v, ok := biiuo.mutation.GetType(); ok {
		if err := billinginvoiceitem.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceItem.type": %w`, err)}
		}
	}
	if v, ok := biiuo.mutation.Name(); ok {
		if err := billinginvoiceitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceItem.name": %w`, err)}
		}
	}
	return nil
}

func (biiuo *BillingInvoiceItemUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoiceItem, err error) {
	if err := biiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoiceitem.Table, billinginvoiceitem.Columns, sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString))
	id, ok := biiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoiceItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := biiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoiceitem.FieldID)
		for _, f := range fields {
			if !billinginvoiceitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoiceitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := biiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoiceitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biiuo.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoiceitem.FieldDeletedAt, field.TypeTime, value)
	}
	if biiuo.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoiceitem.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := biiuo.mutation.Metadata(); ok {
		_spec.SetField(billinginvoiceitem.FieldMetadata, field.TypeJSON, value)
	}
	if biiuo.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoiceitem.FieldMetadata, field.TypeJSON)
	}
	if value, ok := biiuo.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoiceitem.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := biiuo.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoiceitem.FieldPeriodEnd, field.TypeTime, value)
	}
	if value, ok := biiuo.mutation.InvoiceAt(); ok {
		_spec.SetField(billinginvoiceitem.FieldInvoiceAt, field.TypeTime, value)
	}
	if value, ok := biiuo.mutation.GetType(); ok {
		_spec.SetField(billinginvoiceitem.FieldType, field.TypeEnum, value)
	}
	if value, ok := biiuo.mutation.Name(); ok {
		_spec.SetField(billinginvoiceitem.FieldName, field.TypeString, value)
	}
	if value, ok := biiuo.mutation.Quantity(); ok {
		_spec.SetField(billinginvoiceitem.FieldQuantity, field.TypeOther, value)
	}
	if biiuo.mutation.QuantityCleared() {
		_spec.ClearField(billinginvoiceitem.FieldQuantity, field.TypeOther)
	}
	if value, ok := biiuo.mutation.UnitPrice(); ok {
		_spec.SetField(billinginvoiceitem.FieldUnitPrice, field.TypeOther, value)
	}
	if value, ok := biiuo.mutation.TaxCodeOverride(); ok {
		_spec.SetField(billinginvoiceitem.FieldTaxCodeOverride, field.TypeJSON, value)
	}
	if biiuo.mutation.BillingInvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceitem.BillingInvoiceTable,
			Columns: []string{billinginvoiceitem.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biiuo.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceitem.BillingInvoiceTable,
			Columns: []string{billinginvoiceitem.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingInvoiceItem{config: biiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoiceitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	biiuo.mutation.done = true
	return _node, nil
}
