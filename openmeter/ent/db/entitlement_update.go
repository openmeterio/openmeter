// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/balancesnapshot"
	"github.com/openmeterio/openmeter/openmeter/ent/db/entitlement"
	dbgrant "github.com/openmeterio/openmeter/openmeter/ent/db/grant"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/usagereset"
	"github.com/openmeterio/openmeter/pkg/models"
)

// EntitlementUpdate is the builder for updating Entitlement entities.
type EntitlementUpdate struct {
	config
	hooks    []Hook
	mutation *EntitlementMutation
}

// Where appends a list predicates to the EntitlementUpdate builder.
func (_u *EntitlementUpdate) Where(ps ...predicate.Entitlement) *EntitlementUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *EntitlementUpdate) SetMetadata(v map[string]string) *EntitlementUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *EntitlementUpdate) ClearMetadata() *EntitlementUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EntitlementUpdate) SetUpdatedAt(v time.Time) *EntitlementUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *EntitlementUpdate) SetDeletedAt(v time.Time) *EntitlementUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *EntitlementUpdate) SetNillableDeletedAt(v *time.Time) *EntitlementUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *EntitlementUpdate) ClearDeletedAt() *EntitlementUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetActiveTo sets the "active_to" field.
func (_u *EntitlementUpdate) SetActiveTo(v time.Time) *EntitlementUpdate {
	_u.mutation.SetActiveTo(v)
	return _u
}

// SetNillableActiveTo sets the "active_to" field if the given value is not nil.
func (_u *EntitlementUpdate) SetNillableActiveTo(v *time.Time) *EntitlementUpdate {
	if v != nil {
		_u.SetActiveTo(*v)
	}
	return _u
}

// ClearActiveTo clears the value of the "active_to" field.
func (_u *EntitlementUpdate) ClearActiveTo() *EntitlementUpdate {
	_u.mutation.ClearActiveTo()
	return _u
}

// SetConfig sets the "config" field.
func (_u *EntitlementUpdate) SetConfig(v []uint8) *EntitlementUpdate {
	_u.mutation.SetConfig(v)
	return _u
}

// AppendConfig appends value to the "config" field.
func (_u *EntitlementUpdate) AppendConfig(v []uint8) *EntitlementUpdate {
	_u.mutation.AppendConfig(v)
	return _u
}

// ClearConfig clears the value of the "config" field.
func (_u *EntitlementUpdate) ClearConfig() *EntitlementUpdate {
	_u.mutation.ClearConfig()
	return _u
}

// SetUsagePeriodAnchor sets the "usage_period_anchor" field.
func (_u *EntitlementUpdate) SetUsagePeriodAnchor(v time.Time) *EntitlementUpdate {
	_u.mutation.SetUsagePeriodAnchor(v)
	return _u
}

// SetNillableUsagePeriodAnchor sets the "usage_period_anchor" field if the given value is not nil.
func (_u *EntitlementUpdate) SetNillableUsagePeriodAnchor(v *time.Time) *EntitlementUpdate {
	if v != nil {
		_u.SetUsagePeriodAnchor(*v)
	}
	return _u
}

// ClearUsagePeriodAnchor clears the value of the "usage_period_anchor" field.
func (_u *EntitlementUpdate) ClearUsagePeriodAnchor() *EntitlementUpdate {
	_u.mutation.ClearUsagePeriodAnchor()
	return _u
}

// SetCurrentUsagePeriodStart sets the "current_usage_period_start" field.
func (_u *EntitlementUpdate) SetCurrentUsagePeriodStart(v time.Time) *EntitlementUpdate {
	_u.mutation.SetCurrentUsagePeriodStart(v)
	return _u
}

// SetNillableCurrentUsagePeriodStart sets the "current_usage_period_start" field if the given value is not nil.
func (_u *EntitlementUpdate) SetNillableCurrentUsagePeriodStart(v *time.Time) *EntitlementUpdate {
	if v != nil {
		_u.SetCurrentUsagePeriodStart(*v)
	}
	return _u
}

// ClearCurrentUsagePeriodStart clears the value of the "current_usage_period_start" field.
func (_u *EntitlementUpdate) ClearCurrentUsagePeriodStart() *EntitlementUpdate {
	_u.mutation.ClearCurrentUsagePeriodStart()
	return _u
}

// SetCurrentUsagePeriodEnd sets the "current_usage_period_end" field.
func (_u *EntitlementUpdate) SetCurrentUsagePeriodEnd(v time.Time) *EntitlementUpdate {
	_u.mutation.SetCurrentUsagePeriodEnd(v)
	return _u
}

// SetNillableCurrentUsagePeriodEnd sets the "current_usage_period_end" field if the given value is not nil.
func (_u *EntitlementUpdate) SetNillableCurrentUsagePeriodEnd(v *time.Time) *EntitlementUpdate {
	if v != nil {
		_u.SetCurrentUsagePeriodEnd(*v)
	}
	return _u
}

// ClearCurrentUsagePeriodEnd clears the value of the "current_usage_period_end" field.
func (_u *EntitlementUpdate) ClearCurrentUsagePeriodEnd() *EntitlementUpdate {
	_u.mutation.ClearCurrentUsagePeriodEnd()
	return _u
}

// SetAnnotations sets the "annotations" field.
func (_u *EntitlementUpdate) SetAnnotations(v models.Annotations) *EntitlementUpdate {
	_u.mutation.SetAnnotations(v)
	return _u
}

// ClearAnnotations clears the value of the "annotations" field.
func (_u *EntitlementUpdate) ClearAnnotations() *EntitlementUpdate {
	_u.mutation.ClearAnnotations()
	return _u
}

// AddUsageResetIDs adds the "usage_reset" edge to the UsageReset entity by IDs.
func (_u *EntitlementUpdate) AddUsageResetIDs(ids ...string) *EntitlementUpdate {
	_u.mutation.AddUsageResetIDs(ids...)
	return _u
}

// AddUsageReset adds the "usage_reset" edges to the UsageReset entity.
func (_u *EntitlementUpdate) AddUsageReset(v ...*UsageReset) *EntitlementUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUsageResetIDs(ids...)
}

// AddGrantIDs adds the "grant" edge to the Grant entity by IDs.
func (_u *EntitlementUpdate) AddGrantIDs(ids ...string) *EntitlementUpdate {
	_u.mutation.AddGrantIDs(ids...)
	return _u
}

// AddGrant adds the "grant" edges to the Grant entity.
func (_u *EntitlementUpdate) AddGrant(v ...*Grant) *EntitlementUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGrantIDs(ids...)
}

// AddBalanceSnapshotIDs adds the "balance_snapshot" edge to the BalanceSnapshot entity by IDs.
func (_u *EntitlementUpdate) AddBalanceSnapshotIDs(ids ...int) *EntitlementUpdate {
	_u.mutation.AddBalanceSnapshotIDs(ids...)
	return _u
}

// AddBalanceSnapshot adds the "balance_snapshot" edges to the BalanceSnapshot entity.
func (_u *EntitlementUpdate) AddBalanceSnapshot(v ...*BalanceSnapshot) *EntitlementUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBalanceSnapshotIDs(ids...)
}

// AddSubscriptionItemIDs adds the "subscription_item" edge to the SubscriptionItem entity by IDs.
func (_u *EntitlementUpdate) AddSubscriptionItemIDs(ids ...string) *EntitlementUpdate {
	_u.mutation.AddSubscriptionItemIDs(ids...)
	return _u
}

// AddSubscriptionItem adds the "subscription_item" edges to the SubscriptionItem entity.
func (_u *EntitlementUpdate) AddSubscriptionItem(v ...*SubscriptionItem) *EntitlementUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubscriptionItemIDs(ids...)
}

// Mutation returns the EntitlementMutation object of the builder.
func (_u *EntitlementUpdate) Mutation() *EntitlementMutation {
	return _u.mutation
}

// ClearUsageReset clears all "usage_reset" edges to the UsageReset entity.
func (_u *EntitlementUpdate) ClearUsageReset() *EntitlementUpdate {
	_u.mutation.ClearUsageReset()
	return _u
}

// RemoveUsageResetIDs removes the "usage_reset" edge to UsageReset entities by IDs.
func (_u *EntitlementUpdate) RemoveUsageResetIDs(ids ...string) *EntitlementUpdate {
	_u.mutation.RemoveUsageResetIDs(ids...)
	return _u
}

// RemoveUsageReset removes "usage_reset" edges to UsageReset entities.
func (_u *EntitlementUpdate) RemoveUsageReset(v ...*UsageReset) *EntitlementUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUsageResetIDs(ids...)
}

// ClearGrant clears all "grant" edges to the Grant entity.
func (_u *EntitlementUpdate) ClearGrant() *EntitlementUpdate {
	_u.mutation.ClearGrant()
	return _u
}

// RemoveGrantIDs removes the "grant" edge to Grant entities by IDs.
func (_u *EntitlementUpdate) RemoveGrantIDs(ids ...string) *EntitlementUpdate {
	_u.mutation.RemoveGrantIDs(ids...)
	return _u
}

// RemoveGrant removes "grant" edges to Grant entities.
func (_u *EntitlementUpdate) RemoveGrant(v ...*Grant) *EntitlementUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGrantIDs(ids...)
}

// ClearBalanceSnapshot clears all "balance_snapshot" edges to the BalanceSnapshot entity.
func (_u *EntitlementUpdate) ClearBalanceSnapshot() *EntitlementUpdate {
	_u.mutation.ClearBalanceSnapshot()
	return _u
}

// RemoveBalanceSnapshotIDs removes the "balance_snapshot" edge to BalanceSnapshot entities by IDs.
func (_u *EntitlementUpdate) RemoveBalanceSnapshotIDs(ids ...int) *EntitlementUpdate {
	_u.mutation.RemoveBalanceSnapshotIDs(ids...)
	return _u
}

// RemoveBalanceSnapshot removes "balance_snapshot" edges to BalanceSnapshot entities.
func (_u *EntitlementUpdate) RemoveBalanceSnapshot(v ...*BalanceSnapshot) *EntitlementUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBalanceSnapshotIDs(ids...)
}

// ClearSubscriptionItem clears all "subscription_item" edges to the SubscriptionItem entity.
func (_u *EntitlementUpdate) ClearSubscriptionItem() *EntitlementUpdate {
	_u.mutation.ClearSubscriptionItem()
	return _u
}

// RemoveSubscriptionItemIDs removes the "subscription_item" edge to SubscriptionItem entities by IDs.
func (_u *EntitlementUpdate) RemoveSubscriptionItemIDs(ids ...string) *EntitlementUpdate {
	_u.mutation.RemoveSubscriptionItemIDs(ids...)
	return _u
}

// RemoveSubscriptionItem removes "subscription_item" edges to SubscriptionItem entities.
func (_u *EntitlementUpdate) RemoveSubscriptionItem(v ...*SubscriptionItem) *EntitlementUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubscriptionItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EntitlementUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EntitlementUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EntitlementUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EntitlementUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EntitlementUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := entitlement.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EntitlementUpdate) check() error {
	if _u.mutation.FeatureCleared() && len(_u.mutation.FeatureIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Entitlement.feature"`)
	}
	if _u.mutation.SubjectCleared() && len(_u.mutation.SubjectIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Entitlement.subject"`)
	}
	return nil
}

func (_u *EntitlementUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entitlement.Table, entitlement.Columns, sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(entitlement.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(entitlement.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(entitlement.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(entitlement.FieldDeletedAt, field.TypeTime)
	}
	if _u.mutation.ActiveFromCleared() {
		_spec.ClearField(entitlement.FieldActiveFrom, field.TypeTime)
	}
	if value, ok := _u.mutation.ActiveTo(); ok {
		_spec.SetField(entitlement.FieldActiveTo, field.TypeTime, value)
	}
	if _u.mutation.ActiveToCleared() {
		_spec.ClearField(entitlement.FieldActiveTo, field.TypeTime)
	}
	if _u.mutation.MeasureUsageFromCleared() {
		_spec.ClearField(entitlement.FieldMeasureUsageFrom, field.TypeTime)
	}
	if _u.mutation.IssueAfterResetCleared() {
		_spec.ClearField(entitlement.FieldIssueAfterReset, field.TypeFloat64)
	}
	if _u.mutation.IssueAfterResetPriorityCleared() {
		_spec.ClearField(entitlement.FieldIssueAfterResetPriority, field.TypeUint8)
	}
	if _u.mutation.IsSoftLimitCleared() {
		_spec.ClearField(entitlement.FieldIsSoftLimit, field.TypeBool)
	}
	if _u.mutation.PreserveOverageAtResetCleared() {
		_spec.ClearField(entitlement.FieldPreserveOverageAtReset, field.TypeBool)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(entitlement.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedConfig(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entitlement.FieldConfig, value)
		})
	}
	if _u.mutation.ConfigCleared() {
		_spec.ClearField(entitlement.FieldConfig, field.TypeJSON)
	}
	if _u.mutation.UsagePeriodIntervalCleared() {
		_spec.ClearField(entitlement.FieldUsagePeriodInterval, field.TypeString)
	}
	if value, ok := _u.mutation.UsagePeriodAnchor(); ok {
		_spec.SetField(entitlement.FieldUsagePeriodAnchor, field.TypeTime, value)
	}
	if _u.mutation.UsagePeriodAnchorCleared() {
		_spec.ClearField(entitlement.FieldUsagePeriodAnchor, field.TypeTime)
	}
	if value, ok := _u.mutation.CurrentUsagePeriodStart(); ok {
		_spec.SetField(entitlement.FieldCurrentUsagePeriodStart, field.TypeTime, value)
	}
	if _u.mutation.CurrentUsagePeriodStartCleared() {
		_spec.ClearField(entitlement.FieldCurrentUsagePeriodStart, field.TypeTime)
	}
	if value, ok := _u.mutation.CurrentUsagePeriodEnd(); ok {
		_spec.SetField(entitlement.FieldCurrentUsagePeriodEnd, field.TypeTime, value)
	}
	if _u.mutation.CurrentUsagePeriodEndCleared() {
		_spec.ClearField(entitlement.FieldCurrentUsagePeriodEnd, field.TypeTime)
	}
	if value, ok := _u.mutation.Annotations(); ok {
		vv, err := entitlement.ValueScanner.Annotations.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(entitlement.FieldAnnotations, field.TypeString, vv)
	}
	if _u.mutation.AnnotationsCleared() {
		_spec.ClearField(entitlement.FieldAnnotations, field.TypeString)
	}
	if _u.mutation.UsageResetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.UsageResetTable,
			Columns: []string{entitlement.UsageResetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usagereset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsageResetIDs(); len(nodes) > 0 && !_u.mutation.UsageResetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.UsageResetTable,
			Columns: []string{entitlement.UsageResetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usagereset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsageResetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.UsageResetTable,
			Columns: []string{entitlement.UsageResetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usagereset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GrantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.GrantTable,
			Columns: []string{entitlement.GrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dbgrant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGrantIDs(); len(nodes) > 0 && !_u.mutation.GrantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.GrantTable,
			Columns: []string{entitlement.GrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dbgrant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GrantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.GrantTable,
			Columns: []string{entitlement.GrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dbgrant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BalanceSnapshotCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.BalanceSnapshotTable,
			Columns: []string{entitlement.BalanceSnapshotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(balancesnapshot.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBalanceSnapshotIDs(); len(nodes) > 0 && !_u.mutation.BalanceSnapshotCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.BalanceSnapshotTable,
			Columns: []string{entitlement.BalanceSnapshotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(balancesnapshot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BalanceSnapshotIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.BalanceSnapshotTable,
			Columns: []string{entitlement.BalanceSnapshotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(balancesnapshot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscriptionItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.SubscriptionItemTable,
			Columns: []string{entitlement.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubscriptionItemIDs(); len(nodes) > 0 && !_u.mutation.SubscriptionItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.SubscriptionItemTable,
			Columns: []string{entitlement.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscriptionItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.SubscriptionItemTable,
			Columns: []string{entitlement.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitlement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EntitlementUpdateOne is the builder for updating a single Entitlement entity.
type EntitlementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntitlementMutation
}

// SetMetadata sets the "metadata" field.
func (_u *EntitlementUpdateOne) SetMetadata(v map[string]string) *EntitlementUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *EntitlementUpdateOne) ClearMetadata() *EntitlementUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EntitlementUpdateOne) SetUpdatedAt(v time.Time) *EntitlementUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *EntitlementUpdateOne) SetDeletedAt(v time.Time) *EntitlementUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *EntitlementUpdateOne) SetNillableDeletedAt(v *time.Time) *EntitlementUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *EntitlementUpdateOne) ClearDeletedAt() *EntitlementUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetActiveTo sets the "active_to" field.
func (_u *EntitlementUpdateOne) SetActiveTo(v time.Time) *EntitlementUpdateOne {
	_u.mutation.SetActiveTo(v)
	return _u
}

// SetNillableActiveTo sets the "active_to" field if the given value is not nil.
func (_u *EntitlementUpdateOne) SetNillableActiveTo(v *time.Time) *EntitlementUpdateOne {
	if v != nil {
		_u.SetActiveTo(*v)
	}
	return _u
}

// ClearActiveTo clears the value of the "active_to" field.
func (_u *EntitlementUpdateOne) ClearActiveTo() *EntitlementUpdateOne {
	_u.mutation.ClearActiveTo()
	return _u
}

// SetConfig sets the "config" field.
func (_u *EntitlementUpdateOne) SetConfig(v []uint8) *EntitlementUpdateOne {
	_u.mutation.SetConfig(v)
	return _u
}

// AppendConfig appends value to the "config" field.
func (_u *EntitlementUpdateOne) AppendConfig(v []uint8) *EntitlementUpdateOne {
	_u.mutation.AppendConfig(v)
	return _u
}

// ClearConfig clears the value of the "config" field.
func (_u *EntitlementUpdateOne) ClearConfig() *EntitlementUpdateOne {
	_u.mutation.ClearConfig()
	return _u
}

// SetUsagePeriodAnchor sets the "usage_period_anchor" field.
func (_u *EntitlementUpdateOne) SetUsagePeriodAnchor(v time.Time) *EntitlementUpdateOne {
	_u.mutation.SetUsagePeriodAnchor(v)
	return _u
}

// SetNillableUsagePeriodAnchor sets the "usage_period_anchor" field if the given value is not nil.
func (_u *EntitlementUpdateOne) SetNillableUsagePeriodAnchor(v *time.Time) *EntitlementUpdateOne {
	if v != nil {
		_u.SetUsagePeriodAnchor(*v)
	}
	return _u
}

// ClearUsagePeriodAnchor clears the value of the "usage_period_anchor" field.
func (_u *EntitlementUpdateOne) ClearUsagePeriodAnchor() *EntitlementUpdateOne {
	_u.mutation.ClearUsagePeriodAnchor()
	return _u
}

// SetCurrentUsagePeriodStart sets the "current_usage_period_start" field.
func (_u *EntitlementUpdateOne) SetCurrentUsagePeriodStart(v time.Time) *EntitlementUpdateOne {
	_u.mutation.SetCurrentUsagePeriodStart(v)
	return _u
}

// SetNillableCurrentUsagePeriodStart sets the "current_usage_period_start" field if the given value is not nil.
func (_u *EntitlementUpdateOne) SetNillableCurrentUsagePeriodStart(v *time.Time) *EntitlementUpdateOne {
	if v != nil {
		_u.SetCurrentUsagePeriodStart(*v)
	}
	return _u
}

// ClearCurrentUsagePeriodStart clears the value of the "current_usage_period_start" field.
func (_u *EntitlementUpdateOne) ClearCurrentUsagePeriodStart() *EntitlementUpdateOne {
	_u.mutation.ClearCurrentUsagePeriodStart()
	return _u
}

// SetCurrentUsagePeriodEnd sets the "current_usage_period_end" field.
func (_u *EntitlementUpdateOne) SetCurrentUsagePeriodEnd(v time.Time) *EntitlementUpdateOne {
	_u.mutation.SetCurrentUsagePeriodEnd(v)
	return _u
}

// SetNillableCurrentUsagePeriodEnd sets the "current_usage_period_end" field if the given value is not nil.
func (_u *EntitlementUpdateOne) SetNillableCurrentUsagePeriodEnd(v *time.Time) *EntitlementUpdateOne {
	if v != nil {
		_u.SetCurrentUsagePeriodEnd(*v)
	}
	return _u
}

// ClearCurrentUsagePeriodEnd clears the value of the "current_usage_period_end" field.
func (_u *EntitlementUpdateOne) ClearCurrentUsagePeriodEnd() *EntitlementUpdateOne {
	_u.mutation.ClearCurrentUsagePeriodEnd()
	return _u
}

// SetAnnotations sets the "annotations" field.
func (_u *EntitlementUpdateOne) SetAnnotations(v models.Annotations) *EntitlementUpdateOne {
	_u.mutation.SetAnnotations(v)
	return _u
}

// ClearAnnotations clears the value of the "annotations" field.
func (_u *EntitlementUpdateOne) ClearAnnotations() *EntitlementUpdateOne {
	_u.mutation.ClearAnnotations()
	return _u
}

// AddUsageResetIDs adds the "usage_reset" edge to the UsageReset entity by IDs.
func (_u *EntitlementUpdateOne) AddUsageResetIDs(ids ...string) *EntitlementUpdateOne {
	_u.mutation.AddUsageResetIDs(ids...)
	return _u
}

// AddUsageReset adds the "usage_reset" edges to the UsageReset entity.
func (_u *EntitlementUpdateOne) AddUsageReset(v ...*UsageReset) *EntitlementUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUsageResetIDs(ids...)
}

// AddGrantIDs adds the "grant" edge to the Grant entity by IDs.
func (_u *EntitlementUpdateOne) AddGrantIDs(ids ...string) *EntitlementUpdateOne {
	_u.mutation.AddGrantIDs(ids...)
	return _u
}

// AddGrant adds the "grant" edges to the Grant entity.
func (_u *EntitlementUpdateOne) AddGrant(v ...*Grant) *EntitlementUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGrantIDs(ids...)
}

// AddBalanceSnapshotIDs adds the "balance_snapshot" edge to the BalanceSnapshot entity by IDs.
func (_u *EntitlementUpdateOne) AddBalanceSnapshotIDs(ids ...int) *EntitlementUpdateOne {
	_u.mutation.AddBalanceSnapshotIDs(ids...)
	return _u
}

// AddBalanceSnapshot adds the "balance_snapshot" edges to the BalanceSnapshot entity.
func (_u *EntitlementUpdateOne) AddBalanceSnapshot(v ...*BalanceSnapshot) *EntitlementUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBalanceSnapshotIDs(ids...)
}

// AddSubscriptionItemIDs adds the "subscription_item" edge to the SubscriptionItem entity by IDs.
func (_u *EntitlementUpdateOne) AddSubscriptionItemIDs(ids ...string) *EntitlementUpdateOne {
	_u.mutation.AddSubscriptionItemIDs(ids...)
	return _u
}

// AddSubscriptionItem adds the "subscription_item" edges to the SubscriptionItem entity.
func (_u *EntitlementUpdateOne) AddSubscriptionItem(v ...*SubscriptionItem) *EntitlementUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubscriptionItemIDs(ids...)
}

// Mutation returns the EntitlementMutation object of the builder.
func (_u *EntitlementUpdateOne) Mutation() *EntitlementMutation {
	return _u.mutation
}

// ClearUsageReset clears all "usage_reset" edges to the UsageReset entity.
func (_u *EntitlementUpdateOne) ClearUsageReset() *EntitlementUpdateOne {
	_u.mutation.ClearUsageReset()
	return _u
}

// RemoveUsageResetIDs removes the "usage_reset" edge to UsageReset entities by IDs.
func (_u *EntitlementUpdateOne) RemoveUsageResetIDs(ids ...string) *EntitlementUpdateOne {
	_u.mutation.RemoveUsageResetIDs(ids...)
	return _u
}

// RemoveUsageReset removes "usage_reset" edges to UsageReset entities.
func (_u *EntitlementUpdateOne) RemoveUsageReset(v ...*UsageReset) *EntitlementUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUsageResetIDs(ids...)
}

// ClearGrant clears all "grant" edges to the Grant entity.
func (_u *EntitlementUpdateOne) ClearGrant() *EntitlementUpdateOne {
	_u.mutation.ClearGrant()
	return _u
}

// RemoveGrantIDs removes the "grant" edge to Grant entities by IDs.
func (_u *EntitlementUpdateOne) RemoveGrantIDs(ids ...string) *EntitlementUpdateOne {
	_u.mutation.RemoveGrantIDs(ids...)
	return _u
}

// RemoveGrant removes "grant" edges to Grant entities.
func (_u *EntitlementUpdateOne) RemoveGrant(v ...*Grant) *EntitlementUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGrantIDs(ids...)
}

// ClearBalanceSnapshot clears all "balance_snapshot" edges to the BalanceSnapshot entity.
func (_u *EntitlementUpdateOne) ClearBalanceSnapshot() *EntitlementUpdateOne {
	_u.mutation.ClearBalanceSnapshot()
	return _u
}

// RemoveBalanceSnapshotIDs removes the "balance_snapshot" edge to BalanceSnapshot entities by IDs.
func (_u *EntitlementUpdateOne) RemoveBalanceSnapshotIDs(ids ...int) *EntitlementUpdateOne {
	_u.mutation.RemoveBalanceSnapshotIDs(ids...)
	return _u
}

// RemoveBalanceSnapshot removes "balance_snapshot" edges to BalanceSnapshot entities.
func (_u *EntitlementUpdateOne) RemoveBalanceSnapshot(v ...*BalanceSnapshot) *EntitlementUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBalanceSnapshotIDs(ids...)
}

// ClearSubscriptionItem clears all "subscription_item" edges to the SubscriptionItem entity.
func (_u *EntitlementUpdateOne) ClearSubscriptionItem() *EntitlementUpdateOne {
	_u.mutation.ClearSubscriptionItem()
	return _u
}

// RemoveSubscriptionItemIDs removes the "subscription_item" edge to SubscriptionItem entities by IDs.
func (_u *EntitlementUpdateOne) RemoveSubscriptionItemIDs(ids ...string) *EntitlementUpdateOne {
	_u.mutation.RemoveSubscriptionItemIDs(ids...)
	return _u
}

// RemoveSubscriptionItem removes "subscription_item" edges to SubscriptionItem entities.
func (_u *EntitlementUpdateOne) RemoveSubscriptionItem(v ...*SubscriptionItem) *EntitlementUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubscriptionItemIDs(ids...)
}

// Where appends a list predicates to the EntitlementUpdate builder.
func (_u *EntitlementUpdateOne) Where(ps ...predicate.Entitlement) *EntitlementUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EntitlementUpdateOne) Select(field string, fields ...string) *EntitlementUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Entitlement entity.
func (_u *EntitlementUpdateOne) Save(ctx context.Context) (*Entitlement, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EntitlementUpdateOne) SaveX(ctx context.Context) *Entitlement {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EntitlementUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EntitlementUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EntitlementUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := entitlement.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EntitlementUpdateOne) check() error {
	if _u.mutation.FeatureCleared() && len(_u.mutation.FeatureIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Entitlement.feature"`)
	}
	if _u.mutation.SubjectCleared() && len(_u.mutation.SubjectIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Entitlement.subject"`)
	}
	return nil
}

func (_u *EntitlementUpdateOne) sqlSave(ctx context.Context) (_node *Entitlement, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entitlement.Table, entitlement.Columns, sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Entitlement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entitlement.FieldID)
		for _, f := range fields {
			if !entitlement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != entitlement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(entitlement.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(entitlement.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(entitlement.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(entitlement.FieldDeletedAt, field.TypeTime)
	}
	if _u.mutation.ActiveFromCleared() {
		_spec.ClearField(entitlement.FieldActiveFrom, field.TypeTime)
	}
	if value, ok := _u.mutation.ActiveTo(); ok {
		_spec.SetField(entitlement.FieldActiveTo, field.TypeTime, value)
	}
	if _u.mutation.ActiveToCleared() {
		_spec.ClearField(entitlement.FieldActiveTo, field.TypeTime)
	}
	if _u.mutation.MeasureUsageFromCleared() {
		_spec.ClearField(entitlement.FieldMeasureUsageFrom, field.TypeTime)
	}
	if _u.mutation.IssueAfterResetCleared() {
		_spec.ClearField(entitlement.FieldIssueAfterReset, field.TypeFloat64)
	}
	if _u.mutation.IssueAfterResetPriorityCleared() {
		_spec.ClearField(entitlement.FieldIssueAfterResetPriority, field.TypeUint8)
	}
	if _u.mutation.IsSoftLimitCleared() {
		_spec.ClearField(entitlement.FieldIsSoftLimit, field.TypeBool)
	}
	if _u.mutation.PreserveOverageAtResetCleared() {
		_spec.ClearField(entitlement.FieldPreserveOverageAtReset, field.TypeBool)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(entitlement.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedConfig(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entitlement.FieldConfig, value)
		})
	}
	if _u.mutation.ConfigCleared() {
		_spec.ClearField(entitlement.FieldConfig, field.TypeJSON)
	}
	if _u.mutation.UsagePeriodIntervalCleared() {
		_spec.ClearField(entitlement.FieldUsagePeriodInterval, field.TypeString)
	}
	if value, ok := _u.mutation.UsagePeriodAnchor(); ok {
		_spec.SetField(entitlement.FieldUsagePeriodAnchor, field.TypeTime, value)
	}
	if _u.mutation.UsagePeriodAnchorCleared() {
		_spec.ClearField(entitlement.FieldUsagePeriodAnchor, field.TypeTime)
	}
	if value, ok := _u.mutation.CurrentUsagePeriodStart(); ok {
		_spec.SetField(entitlement.FieldCurrentUsagePeriodStart, field.TypeTime, value)
	}
	if _u.mutation.CurrentUsagePeriodStartCleared() {
		_spec.ClearField(entitlement.FieldCurrentUsagePeriodStart, field.TypeTime)
	}
	if value, ok := _u.mutation.CurrentUsagePeriodEnd(); ok {
		_spec.SetField(entitlement.FieldCurrentUsagePeriodEnd, field.TypeTime, value)
	}
	if _u.mutation.CurrentUsagePeriodEndCleared() {
		_spec.ClearField(entitlement.FieldCurrentUsagePeriodEnd, field.TypeTime)
	}
	if value, ok := _u.mutation.Annotations(); ok {
		vv, err := entitlement.ValueScanner.Annotations.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(entitlement.FieldAnnotations, field.TypeString, vv)
	}
	if _u.mutation.AnnotationsCleared() {
		_spec.ClearField(entitlement.FieldAnnotations, field.TypeString)
	}
	if _u.mutation.UsageResetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.UsageResetTable,
			Columns: []string{entitlement.UsageResetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usagereset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsageResetIDs(); len(nodes) > 0 && !_u.mutation.UsageResetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.UsageResetTable,
			Columns: []string{entitlement.UsageResetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usagereset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsageResetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.UsageResetTable,
			Columns: []string{entitlement.UsageResetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usagereset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GrantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.GrantTable,
			Columns: []string{entitlement.GrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dbgrant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGrantIDs(); len(nodes) > 0 && !_u.mutation.GrantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.GrantTable,
			Columns: []string{entitlement.GrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dbgrant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GrantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.GrantTable,
			Columns: []string{entitlement.GrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dbgrant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BalanceSnapshotCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.BalanceSnapshotTable,
			Columns: []string{entitlement.BalanceSnapshotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(balancesnapshot.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBalanceSnapshotIDs(); len(nodes) > 0 && !_u.mutation.BalanceSnapshotCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.BalanceSnapshotTable,
			Columns: []string{entitlement.BalanceSnapshotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(balancesnapshot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BalanceSnapshotIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.BalanceSnapshotTable,
			Columns: []string{entitlement.BalanceSnapshotColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(balancesnapshot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscriptionItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.SubscriptionItemTable,
			Columns: []string{entitlement.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubscriptionItemIDs(); len(nodes) > 0 && !_u.mutation.SubscriptionItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.SubscriptionItemTable,
			Columns: []string{entitlement.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscriptionItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.SubscriptionItemTable,
			Columns: []string{entitlement.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Entitlement{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitlement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
