// Code generated by ent, DO NOT EDIT.

package billingsequencenumbers

import (
	"entgo.io/ent/dialect/sql"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldLTE(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldEQ(FieldNamespace, v))
}

// Scope applies equality check predicate on the "scope" field. It's identical to ScopeEQ.
func Scope(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldEQ(FieldScope, v))
}

// Last applies equality check predicate on the "last" field. It's identical to LastEQ.
func Last(v alpacadecimal.Decimal) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldEQ(FieldLast, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldContainsFold(FieldNamespace, v))
}

// ScopeEQ applies the EQ predicate on the "scope" field.
func ScopeEQ(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldEQ(FieldScope, v))
}

// ScopeNEQ applies the NEQ predicate on the "scope" field.
func ScopeNEQ(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldNEQ(FieldScope, v))
}

// ScopeIn applies the In predicate on the "scope" field.
func ScopeIn(vs ...string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldIn(FieldScope, vs...))
}

// ScopeNotIn applies the NotIn predicate on the "scope" field.
func ScopeNotIn(vs ...string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldNotIn(FieldScope, vs...))
}

// ScopeGT applies the GT predicate on the "scope" field.
func ScopeGT(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldGT(FieldScope, v))
}

// ScopeGTE applies the GTE predicate on the "scope" field.
func ScopeGTE(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldGTE(FieldScope, v))
}

// ScopeLT applies the LT predicate on the "scope" field.
func ScopeLT(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldLT(FieldScope, v))
}

// ScopeLTE applies the LTE predicate on the "scope" field.
func ScopeLTE(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldLTE(FieldScope, v))
}

// ScopeContains applies the Contains predicate on the "scope" field.
func ScopeContains(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldContains(FieldScope, v))
}

// ScopeHasPrefix applies the HasPrefix predicate on the "scope" field.
func ScopeHasPrefix(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldHasPrefix(FieldScope, v))
}

// ScopeHasSuffix applies the HasSuffix predicate on the "scope" field.
func ScopeHasSuffix(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldHasSuffix(FieldScope, v))
}

// ScopeEqualFold applies the EqualFold predicate on the "scope" field.
func ScopeEqualFold(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldEqualFold(FieldScope, v))
}

// ScopeContainsFold applies the ContainsFold predicate on the "scope" field.
func ScopeContainsFold(v string) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldContainsFold(FieldScope, v))
}

// LastEQ applies the EQ predicate on the "last" field.
func LastEQ(v alpacadecimal.Decimal) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldEQ(FieldLast, v))
}

// LastNEQ applies the NEQ predicate on the "last" field.
func LastNEQ(v alpacadecimal.Decimal) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldNEQ(FieldLast, v))
}

// LastIn applies the In predicate on the "last" field.
func LastIn(vs ...alpacadecimal.Decimal) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldIn(FieldLast, vs...))
}

// LastNotIn applies the NotIn predicate on the "last" field.
func LastNotIn(vs ...alpacadecimal.Decimal) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldNotIn(FieldLast, vs...))
}

// LastGT applies the GT predicate on the "last" field.
func LastGT(v alpacadecimal.Decimal) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldGT(FieldLast, v))
}

// LastGTE applies the GTE predicate on the "last" field.
func LastGTE(v alpacadecimal.Decimal) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldGTE(FieldLast, v))
}

// LastLT applies the LT predicate on the "last" field.
func LastLT(v alpacadecimal.Decimal) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldLT(FieldLast, v))
}

// LastLTE applies the LTE predicate on the "last" field.
func LastLTE(v alpacadecimal.Decimal) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.FieldLTE(FieldLast, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BillingSequenceNumbers) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BillingSequenceNumbers) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BillingSequenceNumbers) predicate.BillingSequenceNumbers {
	return predicate.BillingSequenceNumbers(sql.NotPredicates(p))
}
