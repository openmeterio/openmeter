// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	dbapp "github.com/openmeterio/openmeter/openmeter/ent/db/app"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustomer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingprofile"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// AppQuery is the builder for querying App entities.
type AppQuery struct {
	config
	ctx                            *QueryContext
	order                          []dbapp.OrderOption
	inters                         []Interceptor
	predicates                     []predicate.App
	withCustomerApps               *AppCustomerQuery
	withBillingProfileTaxApp       *BillingProfileQuery
	withBillingProfileInvoicingApp *BillingProfileQuery
	withBillingProfilePaymentApp   *BillingProfileQuery
	withBillingInvoiceTaxApp       *BillingInvoiceQuery
	withBillingInvoiceInvoicingApp *BillingInvoiceQuery
	withBillingInvoicePaymentApp   *BillingInvoiceQuery
	modifiers                      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AppQuery builder.
func (_q *AppQuery) Where(ps ...predicate.App) *AppQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *AppQuery) Limit(limit int) *AppQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *AppQuery) Offset(offset int) *AppQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *AppQuery) Unique(unique bool) *AppQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *AppQuery) Order(o ...dbapp.OrderOption) *AppQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryCustomerApps chains the current query on the "customer_apps" edge.
func (_q *AppQuery) QueryCustomerApps() *AppCustomerQuery {
	query := (&AppCustomerClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, selector),
			sqlgraph.To(appcustomer.Table, appcustomer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbapp.CustomerAppsTable, dbapp.CustomerAppsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBillingProfileTaxApp chains the current query on the "billing_profile_tax_app" edge.
func (_q *AppQuery) QueryBillingProfileTaxApp() *BillingProfileQuery {
	query := (&BillingProfileClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, selector),
			sqlgraph.To(billingprofile.Table, billingprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbapp.BillingProfileTaxAppTable, dbapp.BillingProfileTaxAppColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBillingProfileInvoicingApp chains the current query on the "billing_profile_invoicing_app" edge.
func (_q *AppQuery) QueryBillingProfileInvoicingApp() *BillingProfileQuery {
	query := (&BillingProfileClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, selector),
			sqlgraph.To(billingprofile.Table, billingprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbapp.BillingProfileInvoicingAppTable, dbapp.BillingProfileInvoicingAppColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBillingProfilePaymentApp chains the current query on the "billing_profile_payment_app" edge.
func (_q *AppQuery) QueryBillingProfilePaymentApp() *BillingProfileQuery {
	query := (&BillingProfileClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, selector),
			sqlgraph.To(billingprofile.Table, billingprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbapp.BillingProfilePaymentAppTable, dbapp.BillingProfilePaymentAppColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBillingInvoiceTaxApp chains the current query on the "billing_invoice_tax_app" edge.
func (_q *AppQuery) QueryBillingInvoiceTaxApp() *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, selector),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbapp.BillingInvoiceTaxAppTable, dbapp.BillingInvoiceTaxAppColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBillingInvoiceInvoicingApp chains the current query on the "billing_invoice_invoicing_app" edge.
func (_q *AppQuery) QueryBillingInvoiceInvoicingApp() *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, selector),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbapp.BillingInvoiceInvoicingAppTable, dbapp.BillingInvoiceInvoicingAppColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBillingInvoicePaymentApp chains the current query on the "billing_invoice_payment_app" edge.
func (_q *AppQuery) QueryBillingInvoicePaymentApp() *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, selector),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbapp.BillingInvoicePaymentAppTable, dbapp.BillingInvoicePaymentAppColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first App entity from the query.
// Returns a *NotFoundError when no App was found.
func (_q *AppQuery) First(ctx context.Context) (*App, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{dbapp.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *AppQuery) FirstX(ctx context.Context) *App {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first App ID from the query.
// Returns a *NotFoundError when no App ID was found.
func (_q *AppQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{dbapp.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *AppQuery) FirstIDX(ctx context.Context) string {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single App entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one App entity is found.
// Returns a *NotFoundError when no App entities are found.
func (_q *AppQuery) Only(ctx context.Context) (*App, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{dbapp.Label}
	default:
		return nil, &NotSingularError{dbapp.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *AppQuery) OnlyX(ctx context.Context) *App {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only App ID in the query.
// Returns a *NotSingularError when more than one App ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *AppQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{dbapp.Label}
	default:
		err = &NotSingularError{dbapp.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *AppQuery) OnlyIDX(ctx context.Context) string {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Apps.
func (_q *AppQuery) All(ctx context.Context) ([]*App, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*App, *AppQuery]()
	return withInterceptors[[]*App](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *AppQuery) AllX(ctx context.Context) []*App {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of App IDs.
func (_q *AppQuery) IDs(ctx context.Context) (ids []string, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(dbapp.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *AppQuery) IDsX(ctx context.Context) []string {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *AppQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*AppQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *AppQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *AppQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *AppQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AppQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *AppQuery) Clone() *AppQuery {
	if _q == nil {
		return nil
	}
	return &AppQuery{
		config:                         _q.config,
		ctx:                            _q.ctx.Clone(),
		order:                          append([]dbapp.OrderOption{}, _q.order...),
		inters:                         append([]Interceptor{}, _q.inters...),
		predicates:                     append([]predicate.App{}, _q.predicates...),
		withCustomerApps:               _q.withCustomerApps.Clone(),
		withBillingProfileTaxApp:       _q.withBillingProfileTaxApp.Clone(),
		withBillingProfileInvoicingApp: _q.withBillingProfileInvoicingApp.Clone(),
		withBillingProfilePaymentApp:   _q.withBillingProfilePaymentApp.Clone(),
		withBillingInvoiceTaxApp:       _q.withBillingInvoiceTaxApp.Clone(),
		withBillingInvoiceInvoicingApp: _q.withBillingInvoiceInvoicingApp.Clone(),
		withBillingInvoicePaymentApp:   _q.withBillingInvoicePaymentApp.Clone(),
		// clone intermediate query.
		sql:  _q.sql.Clone(),
		path: _q.path,
	}
}

// WithCustomerApps tells the query-builder to eager-load the nodes that are connected to
// the "customer_apps" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AppQuery) WithCustomerApps(opts ...func(*AppCustomerQuery)) *AppQuery {
	query := (&AppCustomerClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withCustomerApps = query
	return _q
}

// WithBillingProfileTaxApp tells the query-builder to eager-load the nodes that are connected to
// the "billing_profile_tax_app" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AppQuery) WithBillingProfileTaxApp(opts ...func(*BillingProfileQuery)) *AppQuery {
	query := (&BillingProfileClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withBillingProfileTaxApp = query
	return _q
}

// WithBillingProfileInvoicingApp tells the query-builder to eager-load the nodes that are connected to
// the "billing_profile_invoicing_app" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AppQuery) WithBillingProfileInvoicingApp(opts ...func(*BillingProfileQuery)) *AppQuery {
	query := (&BillingProfileClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withBillingProfileInvoicingApp = query
	return _q
}

// WithBillingProfilePaymentApp tells the query-builder to eager-load the nodes that are connected to
// the "billing_profile_payment_app" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AppQuery) WithBillingProfilePaymentApp(opts ...func(*BillingProfileQuery)) *AppQuery {
	query := (&BillingProfileClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withBillingProfilePaymentApp = query
	return _q
}

// WithBillingInvoiceTaxApp tells the query-builder to eager-load the nodes that are connected to
// the "billing_invoice_tax_app" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AppQuery) WithBillingInvoiceTaxApp(opts ...func(*BillingInvoiceQuery)) *AppQuery {
	query := (&BillingInvoiceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withBillingInvoiceTaxApp = query
	return _q
}

// WithBillingInvoiceInvoicingApp tells the query-builder to eager-load the nodes that are connected to
// the "billing_invoice_invoicing_app" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AppQuery) WithBillingInvoiceInvoicingApp(opts ...func(*BillingInvoiceQuery)) *AppQuery {
	query := (&BillingInvoiceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withBillingInvoiceInvoicingApp = query
	return _q
}

// WithBillingInvoicePaymentApp tells the query-builder to eager-load the nodes that are connected to
// the "billing_invoice_payment_app" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AppQuery) WithBillingInvoicePaymentApp(opts ...func(*BillingInvoiceQuery)) *AppQuery {
	query := (&BillingInvoiceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withBillingInvoicePaymentApp = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.App.Query().
//		GroupBy(dbapp.FieldNamespace).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (_q *AppQuery) GroupBy(field string, fields ...string) *AppGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AppGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = dbapp.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//	}
//
//	client.App.Query().
//		Select(dbapp.FieldNamespace).
//		Scan(ctx, &v)
func (_q *AppQuery) Select(fields ...string) *AppSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &AppSelect{AppQuery: _q}
	sbuild.label = dbapp.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AppSelect configured with the given aggregations.
func (_q *AppQuery) Aggregate(fns ...AggregateFunc) *AppSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *AppQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !dbapp.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *AppQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*App, error) {
	var (
		nodes       = []*App{}
		_spec       = _q.querySpec()
		loadedTypes = [7]bool{
			_q.withCustomerApps != nil,
			_q.withBillingProfileTaxApp != nil,
			_q.withBillingProfileInvoicingApp != nil,
			_q.withBillingProfilePaymentApp != nil,
			_q.withBillingInvoiceTaxApp != nil,
			_q.withBillingInvoiceInvoicingApp != nil,
			_q.withBillingInvoicePaymentApp != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*App).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &App{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withCustomerApps; query != nil {
		if err := _q.loadCustomerApps(ctx, query, nodes,
			func(n *App) { n.Edges.CustomerApps = []*AppCustomer{} },
			func(n *App, e *AppCustomer) { n.Edges.CustomerApps = append(n.Edges.CustomerApps, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withBillingProfileTaxApp; query != nil {
		if err := _q.loadBillingProfileTaxApp(ctx, query, nodes,
			func(n *App) { n.Edges.BillingProfileTaxApp = []*BillingProfile{} },
			func(n *App, e *BillingProfile) {
				n.Edges.BillingProfileTaxApp = append(n.Edges.BillingProfileTaxApp, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withBillingProfileInvoicingApp; query != nil {
		if err := _q.loadBillingProfileInvoicingApp(ctx, query, nodes,
			func(n *App) { n.Edges.BillingProfileInvoicingApp = []*BillingProfile{} },
			func(n *App, e *BillingProfile) {
				n.Edges.BillingProfileInvoicingApp = append(n.Edges.BillingProfileInvoicingApp, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withBillingProfilePaymentApp; query != nil {
		if err := _q.loadBillingProfilePaymentApp(ctx, query, nodes,
			func(n *App) { n.Edges.BillingProfilePaymentApp = []*BillingProfile{} },
			func(n *App, e *BillingProfile) {
				n.Edges.BillingProfilePaymentApp = append(n.Edges.BillingProfilePaymentApp, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withBillingInvoiceTaxApp; query != nil {
		if err := _q.loadBillingInvoiceTaxApp(ctx, query, nodes,
			func(n *App) { n.Edges.BillingInvoiceTaxApp = []*BillingInvoice{} },
			func(n *App, e *BillingInvoice) {
				n.Edges.BillingInvoiceTaxApp = append(n.Edges.BillingInvoiceTaxApp, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withBillingInvoiceInvoicingApp; query != nil {
		if err := _q.loadBillingInvoiceInvoicingApp(ctx, query, nodes,
			func(n *App) { n.Edges.BillingInvoiceInvoicingApp = []*BillingInvoice{} },
			func(n *App, e *BillingInvoice) {
				n.Edges.BillingInvoiceInvoicingApp = append(n.Edges.BillingInvoiceInvoicingApp, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withBillingInvoicePaymentApp; query != nil {
		if err := _q.loadBillingInvoicePaymentApp(ctx, query, nodes,
			func(n *App) { n.Edges.BillingInvoicePaymentApp = []*BillingInvoice{} },
			func(n *App, e *BillingInvoice) {
				n.Edges.BillingInvoicePaymentApp = append(n.Edges.BillingInvoicePaymentApp, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *AppQuery) loadCustomerApps(ctx context.Context, query *AppCustomerQuery, nodes []*App, init func(*App), assign func(*App, *AppCustomer)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*App)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(appcustomer.FieldAppID)
	}
	query.Where(predicate.AppCustomer(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(dbapp.CustomerAppsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AppID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "app_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AppQuery) loadBillingProfileTaxApp(ctx context.Context, query *BillingProfileQuery, nodes []*App, init func(*App), assign func(*App, *BillingProfile)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*App)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(billingprofile.FieldTaxAppID)
	}
	query.Where(predicate.BillingProfile(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(dbapp.BillingProfileTaxAppColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TaxAppID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "tax_app_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AppQuery) loadBillingProfileInvoicingApp(ctx context.Context, query *BillingProfileQuery, nodes []*App, init func(*App), assign func(*App, *BillingProfile)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*App)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(billingprofile.FieldInvoicingAppID)
	}
	query.Where(predicate.BillingProfile(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(dbapp.BillingProfileInvoicingAppColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.InvoicingAppID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "invoicing_app_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AppQuery) loadBillingProfilePaymentApp(ctx context.Context, query *BillingProfileQuery, nodes []*App, init func(*App), assign func(*App, *BillingProfile)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*App)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(billingprofile.FieldPaymentAppID)
	}
	query.Where(predicate.BillingProfile(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(dbapp.BillingProfilePaymentAppColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PaymentAppID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "payment_app_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AppQuery) loadBillingInvoiceTaxApp(ctx context.Context, query *BillingInvoiceQuery, nodes []*App, init func(*App), assign func(*App, *BillingInvoice)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*App)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(billinginvoice.FieldTaxAppID)
	}
	query.Where(predicate.BillingInvoice(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(dbapp.BillingInvoiceTaxAppColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TaxAppID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "tax_app_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AppQuery) loadBillingInvoiceInvoicingApp(ctx context.Context, query *BillingInvoiceQuery, nodes []*App, init func(*App), assign func(*App, *BillingInvoice)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*App)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(billinginvoice.FieldInvoicingAppID)
	}
	query.Where(predicate.BillingInvoice(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(dbapp.BillingInvoiceInvoicingAppColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.InvoicingAppID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "invoicing_app_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AppQuery) loadBillingInvoicePaymentApp(ctx context.Context, query *BillingInvoiceQuery, nodes []*App, init func(*App), assign func(*App, *BillingInvoice)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*App)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(billinginvoice.FieldPaymentAppID)
	}
	query.Where(predicate.BillingInvoice(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(dbapp.BillingInvoicePaymentAppColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PaymentAppID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "payment_app_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (_q *AppQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *AppQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(dbapp.Table, dbapp.Columns, sqlgraph.NewFieldSpec(dbapp.FieldID, field.TypeString))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dbapp.FieldID)
		for i := range fields {
			if fields[i] != dbapp.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *AppQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(dbapp.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = dbapp.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range _q.modifiers {
		m(selector)
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (_q *AppQuery) ForUpdate(opts ...sql.LockOption) *AppQuery {
	if _q.driver.Dialect() == dialect.Postgres {
		_q.Unique(false)
	}
	_q.modifiers = append(_q.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return _q
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (_q *AppQuery) ForShare(opts ...sql.LockOption) *AppQuery {
	if _q.driver.Dialect() == dialect.Postgres {
		_q.Unique(false)
	}
	_q.modifiers = append(_q.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return _q
}

// AppGroupBy is the group-by builder for App entities.
type AppGroupBy struct {
	selector
	build *AppQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *AppGroupBy) Aggregate(fns ...AggregateFunc) *AppGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the selector query and scans the result into the given value.
func (agb *AppGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, agb.build.ctx, ent.OpQueryGroupBy)
	if err := agb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AppQuery, *AppGroupBy](ctx, agb.build, agb, agb.build.inters, v)
}

func (agb *AppGroupBy) sqlScan(ctx context.Context, root *AppQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(agb.fns))
	for _, fn := range agb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*agb.flds)+len(agb.fns))
		for _, f := range *agb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*agb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AppSelect is the builder for selecting fields of App entities.
type AppSelect struct {
	*AppQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (as *AppSelect) Aggregate(fns ...AggregateFunc) *AppSelect {
	as.fns = append(as.fns, fns...)
	return as
}

// Scan applies the selector query and scans the result into the given value.
func (as *AppSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, as.ctx, ent.OpQuerySelect)
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AppQuery, *AppSelect](ctx, as.AppQuery, as, as.inters, v)
}

func (as *AppSelect) sqlScan(ctx context.Context, root *AppQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(as.fns))
	for _, fn := range as.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*as.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
