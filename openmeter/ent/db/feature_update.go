// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/entitlement"
	dbfeature "github.com/openmeterio/openmeter/openmeter/ent/db/feature"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/productcatalog/feature"
)

// FeatureUpdate is the builder for updating Feature entities.
type FeatureUpdate struct {
	config
	hooks    []Hook
	mutation *FeatureMutation
}

// Where appends a list predicates to the FeatureUpdate builder.
func (_u *FeatureUpdate) Where(ps ...predicate.Feature) *FeatureUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *FeatureUpdate) SetUpdatedAt(v time.Time) *FeatureUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *FeatureUpdate) SetDeletedAt(v time.Time) *FeatureUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *FeatureUpdate) SetNillableDeletedAt(v *time.Time) *FeatureUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *FeatureUpdate) ClearDeletedAt() *FeatureUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *FeatureUpdate) SetMetadata(v map[string]string) *FeatureUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *FeatureUpdate) ClearMetadata() *FeatureUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetName sets the "name" field.
func (_u *FeatureUpdate) SetName(v string) *FeatureUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *FeatureUpdate) SetNillableName(v *string) *FeatureUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetMeterGroupByFilters sets the "meter_group_by_filters" field.
func (_u *FeatureUpdate) SetMeterGroupByFilters(v map[string]string) *FeatureUpdate {
	_u.mutation.SetMeterGroupByFilters(v)
	return _u
}

// ClearMeterGroupByFilters clears the value of the "meter_group_by_filters" field.
func (_u *FeatureUpdate) ClearMeterGroupByFilters() *FeatureUpdate {
	_u.mutation.ClearMeterGroupByFilters()
	return _u
}

// SetAdvancedMeterGroupByFilters sets the "advanced_meter_group_by_filters" field.
func (_u *FeatureUpdate) SetAdvancedMeterGroupByFilters(v feature.MeterGroupByFilters) *FeatureUpdate {
	_u.mutation.SetAdvancedMeterGroupByFilters(v)
	return _u
}

// ClearAdvancedMeterGroupByFilters clears the value of the "advanced_meter_group_by_filters" field.
func (_u *FeatureUpdate) ClearAdvancedMeterGroupByFilters() *FeatureUpdate {
	_u.mutation.ClearAdvancedMeterGroupByFilters()
	return _u
}

// SetArchivedAt sets the "archived_at" field.
func (_u *FeatureUpdate) SetArchivedAt(v time.Time) *FeatureUpdate {
	_u.mutation.SetArchivedAt(v)
	return _u
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (_u *FeatureUpdate) SetNillableArchivedAt(v *time.Time) *FeatureUpdate {
	if v != nil {
		_u.SetArchivedAt(*v)
	}
	return _u
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (_u *FeatureUpdate) ClearArchivedAt() *FeatureUpdate {
	_u.mutation.ClearArchivedAt()
	return _u
}

// AddEntitlementIDs adds the "entitlement" edge to the Entitlement entity by IDs.
func (_u *FeatureUpdate) AddEntitlementIDs(ids ...string) *FeatureUpdate {
	_u.mutation.AddEntitlementIDs(ids...)
	return _u
}

// AddEntitlement adds the "entitlement" edges to the Entitlement entity.
func (_u *FeatureUpdate) AddEntitlement(v ...*Entitlement) *FeatureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntitlementIDs(ids...)
}

// AddRatecardIDs adds the "ratecard" edge to the PlanRateCard entity by IDs.
func (_u *FeatureUpdate) AddRatecardIDs(ids ...string) *FeatureUpdate {
	_u.mutation.AddRatecardIDs(ids...)
	return _u
}

// AddRatecard adds the "ratecard" edges to the PlanRateCard entity.
func (_u *FeatureUpdate) AddRatecard(v ...*PlanRateCard) *FeatureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRatecardIDs(ids...)
}

// AddAddonRatecardIDs adds the "addon_ratecard" edge to the AddonRateCard entity by IDs.
func (_u *FeatureUpdate) AddAddonRatecardIDs(ids ...string) *FeatureUpdate {
	_u.mutation.AddAddonRatecardIDs(ids...)
	return _u
}

// AddAddonRatecard adds the "addon_ratecard" edges to the AddonRateCard entity.
func (_u *FeatureUpdate) AddAddonRatecard(v ...*AddonRateCard) *FeatureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAddonRatecardIDs(ids...)
}

// Mutation returns the FeatureMutation object of the builder.
func (_u *FeatureUpdate) Mutation() *FeatureMutation {
	return _u.mutation
}

// ClearEntitlement clears all "entitlement" edges to the Entitlement entity.
func (_u *FeatureUpdate) ClearEntitlement() *FeatureUpdate {
	_u.mutation.ClearEntitlement()
	return _u
}

// RemoveEntitlementIDs removes the "entitlement" edge to Entitlement entities by IDs.
func (_u *FeatureUpdate) RemoveEntitlementIDs(ids ...string) *FeatureUpdate {
	_u.mutation.RemoveEntitlementIDs(ids...)
	return _u
}

// RemoveEntitlement removes "entitlement" edges to Entitlement entities.
func (_u *FeatureUpdate) RemoveEntitlement(v ...*Entitlement) *FeatureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntitlementIDs(ids...)
}

// ClearRatecard clears all "ratecard" edges to the PlanRateCard entity.
func (_u *FeatureUpdate) ClearRatecard() *FeatureUpdate {
	_u.mutation.ClearRatecard()
	return _u
}

// RemoveRatecardIDs removes the "ratecard" edge to PlanRateCard entities by IDs.
func (_u *FeatureUpdate) RemoveRatecardIDs(ids ...string) *FeatureUpdate {
	_u.mutation.RemoveRatecardIDs(ids...)
	return _u
}

// RemoveRatecard removes "ratecard" edges to PlanRateCard entities.
func (_u *FeatureUpdate) RemoveRatecard(v ...*PlanRateCard) *FeatureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRatecardIDs(ids...)
}

// ClearAddonRatecard clears all "addon_ratecard" edges to the AddonRateCard entity.
func (_u *FeatureUpdate) ClearAddonRatecard() *FeatureUpdate {
	_u.mutation.ClearAddonRatecard()
	return _u
}

// RemoveAddonRatecardIDs removes the "addon_ratecard" edge to AddonRateCard entities by IDs.
func (_u *FeatureUpdate) RemoveAddonRatecardIDs(ids ...string) *FeatureUpdate {
	_u.mutation.RemoveAddonRatecardIDs(ids...)
	return _u
}

// RemoveAddonRatecard removes "addon_ratecard" edges to AddonRateCard entities.
func (_u *FeatureUpdate) RemoveAddonRatecard(v ...*AddonRateCard) *FeatureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAddonRatecardIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FeatureUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FeatureUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FeatureUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FeatureUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FeatureUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := dbfeature.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FeatureUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := dbfeature.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Feature.name": %w`, err)}
		}
	}
	return nil
}

func (_u *FeatureUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dbfeature.Table, dbfeature.Columns, sqlgraph.NewFieldSpec(dbfeature.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dbfeature.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(dbfeature.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(dbfeature.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(dbfeature.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(dbfeature.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(dbfeature.FieldName, field.TypeString, value)
	}
	if _u.mutation.MeterSlugCleared() {
		_spec.ClearField(dbfeature.FieldMeterSlug, field.TypeString)
	}
	if value, ok := _u.mutation.MeterGroupByFilters(); ok {
		_spec.SetField(dbfeature.FieldMeterGroupByFilters, field.TypeJSON, value)
	}
	if _u.mutation.MeterGroupByFiltersCleared() {
		_spec.ClearField(dbfeature.FieldMeterGroupByFilters, field.TypeJSON)
	}
	if value, ok := _u.mutation.AdvancedMeterGroupByFilters(); ok {
		_spec.SetField(dbfeature.FieldAdvancedMeterGroupByFilters, field.TypeJSON, value)
	}
	if _u.mutation.AdvancedMeterGroupByFiltersCleared() {
		_spec.ClearField(dbfeature.FieldAdvancedMeterGroupByFilters, field.TypeJSON)
	}
	if value, ok := _u.mutation.ArchivedAt(); ok {
		_spec.SetField(dbfeature.FieldArchivedAt, field.TypeTime, value)
	}
	if _u.mutation.ArchivedAtCleared() {
		_spec.ClearField(dbfeature.FieldArchivedAt, field.TypeTime)
	}
	if _u.mutation.EntitlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.EntitlementTable,
			Columns: []string{dbfeature.EntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntitlementIDs(); len(nodes) > 0 && !_u.mutation.EntitlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.EntitlementTable,
			Columns: []string{dbfeature.EntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntitlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.EntitlementTable,
			Columns: []string{dbfeature.EntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RatecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.RatecardTable,
			Columns: []string{dbfeature.RatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planratecard.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRatecardIDs(); len(nodes) > 0 && !_u.mutation.RatecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.RatecardTable,
			Columns: []string{dbfeature.RatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RatecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.RatecardTable,
			Columns: []string{dbfeature.RatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AddonRatecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.AddonRatecardTable,
			Columns: []string{dbfeature.AddonRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAddonRatecardIDs(); len(nodes) > 0 && !_u.mutation.AddonRatecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.AddonRatecardTable,
			Columns: []string{dbfeature.AddonRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AddonRatecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.AddonRatecardTable,
			Columns: []string{dbfeature.AddonRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbfeature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FeatureUpdateOne is the builder for updating a single Feature entity.
type FeatureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeatureMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *FeatureUpdateOne) SetUpdatedAt(v time.Time) *FeatureUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *FeatureUpdateOne) SetDeletedAt(v time.Time) *FeatureUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *FeatureUpdateOne) SetNillableDeletedAt(v *time.Time) *FeatureUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *FeatureUpdateOne) ClearDeletedAt() *FeatureUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *FeatureUpdateOne) SetMetadata(v map[string]string) *FeatureUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *FeatureUpdateOne) ClearMetadata() *FeatureUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetName sets the "name" field.
func (_u *FeatureUpdateOne) SetName(v string) *FeatureUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *FeatureUpdateOne) SetNillableName(v *string) *FeatureUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetMeterGroupByFilters sets the "meter_group_by_filters" field.
func (_u *FeatureUpdateOne) SetMeterGroupByFilters(v map[string]string) *FeatureUpdateOne {
	_u.mutation.SetMeterGroupByFilters(v)
	return _u
}

// ClearMeterGroupByFilters clears the value of the "meter_group_by_filters" field.
func (_u *FeatureUpdateOne) ClearMeterGroupByFilters() *FeatureUpdateOne {
	_u.mutation.ClearMeterGroupByFilters()
	return _u
}

// SetAdvancedMeterGroupByFilters sets the "advanced_meter_group_by_filters" field.
func (_u *FeatureUpdateOne) SetAdvancedMeterGroupByFilters(v feature.MeterGroupByFilters) *FeatureUpdateOne {
	_u.mutation.SetAdvancedMeterGroupByFilters(v)
	return _u
}

// ClearAdvancedMeterGroupByFilters clears the value of the "advanced_meter_group_by_filters" field.
func (_u *FeatureUpdateOne) ClearAdvancedMeterGroupByFilters() *FeatureUpdateOne {
	_u.mutation.ClearAdvancedMeterGroupByFilters()
	return _u
}

// SetArchivedAt sets the "archived_at" field.
func (_u *FeatureUpdateOne) SetArchivedAt(v time.Time) *FeatureUpdateOne {
	_u.mutation.SetArchivedAt(v)
	return _u
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (_u *FeatureUpdateOne) SetNillableArchivedAt(v *time.Time) *FeatureUpdateOne {
	if v != nil {
		_u.SetArchivedAt(*v)
	}
	return _u
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (_u *FeatureUpdateOne) ClearArchivedAt() *FeatureUpdateOne {
	_u.mutation.ClearArchivedAt()
	return _u
}

// AddEntitlementIDs adds the "entitlement" edge to the Entitlement entity by IDs.
func (_u *FeatureUpdateOne) AddEntitlementIDs(ids ...string) *FeatureUpdateOne {
	_u.mutation.AddEntitlementIDs(ids...)
	return _u
}

// AddEntitlement adds the "entitlement" edges to the Entitlement entity.
func (_u *FeatureUpdateOne) AddEntitlement(v ...*Entitlement) *FeatureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntitlementIDs(ids...)
}

// AddRatecardIDs adds the "ratecard" edge to the PlanRateCard entity by IDs.
func (_u *FeatureUpdateOne) AddRatecardIDs(ids ...string) *FeatureUpdateOne {
	_u.mutation.AddRatecardIDs(ids...)
	return _u
}

// AddRatecard adds the "ratecard" edges to the PlanRateCard entity.
func (_u *FeatureUpdateOne) AddRatecard(v ...*PlanRateCard) *FeatureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRatecardIDs(ids...)
}

// AddAddonRatecardIDs adds the "addon_ratecard" edge to the AddonRateCard entity by IDs.
func (_u *FeatureUpdateOne) AddAddonRatecardIDs(ids ...string) *FeatureUpdateOne {
	_u.mutation.AddAddonRatecardIDs(ids...)
	return _u
}

// AddAddonRatecard adds the "addon_ratecard" edges to the AddonRateCard entity.
func (_u *FeatureUpdateOne) AddAddonRatecard(v ...*AddonRateCard) *FeatureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAddonRatecardIDs(ids...)
}

// Mutation returns the FeatureMutation object of the builder.
func (_u *FeatureUpdateOne) Mutation() *FeatureMutation {
	return _u.mutation
}

// ClearEntitlement clears all "entitlement" edges to the Entitlement entity.
func (_u *FeatureUpdateOne) ClearEntitlement() *FeatureUpdateOne {
	_u.mutation.ClearEntitlement()
	return _u
}

// RemoveEntitlementIDs removes the "entitlement" edge to Entitlement entities by IDs.
func (_u *FeatureUpdateOne) RemoveEntitlementIDs(ids ...string) *FeatureUpdateOne {
	_u.mutation.RemoveEntitlementIDs(ids...)
	return _u
}

// RemoveEntitlement removes "entitlement" edges to Entitlement entities.
func (_u *FeatureUpdateOne) RemoveEntitlement(v ...*Entitlement) *FeatureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntitlementIDs(ids...)
}

// ClearRatecard clears all "ratecard" edges to the PlanRateCard entity.
func (_u *FeatureUpdateOne) ClearRatecard() *FeatureUpdateOne {
	_u.mutation.ClearRatecard()
	return _u
}

// RemoveRatecardIDs removes the "ratecard" edge to PlanRateCard entities by IDs.
func (_u *FeatureUpdateOne) RemoveRatecardIDs(ids ...string) *FeatureUpdateOne {
	_u.mutation.RemoveRatecardIDs(ids...)
	return _u
}

// RemoveRatecard removes "ratecard" edges to PlanRateCard entities.
func (_u *FeatureUpdateOne) RemoveRatecard(v ...*PlanRateCard) *FeatureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRatecardIDs(ids...)
}

// ClearAddonRatecard clears all "addon_ratecard" edges to the AddonRateCard entity.
func (_u *FeatureUpdateOne) ClearAddonRatecard() *FeatureUpdateOne {
	_u.mutation.ClearAddonRatecard()
	return _u
}

// RemoveAddonRatecardIDs removes the "addon_ratecard" edge to AddonRateCard entities by IDs.
func (_u *FeatureUpdateOne) RemoveAddonRatecardIDs(ids ...string) *FeatureUpdateOne {
	_u.mutation.RemoveAddonRatecardIDs(ids...)
	return _u
}

// RemoveAddonRatecard removes "addon_ratecard" edges to AddonRateCard entities.
func (_u *FeatureUpdateOne) RemoveAddonRatecard(v ...*AddonRateCard) *FeatureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAddonRatecardIDs(ids...)
}

// Where appends a list predicates to the FeatureUpdate builder.
func (_u *FeatureUpdateOne) Where(ps ...predicate.Feature) *FeatureUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FeatureUpdateOne) Select(field string, fields ...string) *FeatureUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Feature entity.
func (_u *FeatureUpdateOne) Save(ctx context.Context) (*Feature, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FeatureUpdateOne) SaveX(ctx context.Context) *Feature {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FeatureUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FeatureUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FeatureUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := dbfeature.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FeatureUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := dbfeature.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Feature.name": %w`, err)}
		}
	}
	return nil
}

func (_u *FeatureUpdateOne) sqlSave(ctx context.Context) (_node *Feature, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dbfeature.Table, dbfeature.Columns, sqlgraph.NewFieldSpec(dbfeature.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Feature.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dbfeature.FieldID)
		for _, f := range fields {
			if !dbfeature.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != dbfeature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dbfeature.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(dbfeature.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(dbfeature.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(dbfeature.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(dbfeature.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(dbfeature.FieldName, field.TypeString, value)
	}
	if _u.mutation.MeterSlugCleared() {
		_spec.ClearField(dbfeature.FieldMeterSlug, field.TypeString)
	}
	if value, ok := _u.mutation.MeterGroupByFilters(); ok {
		_spec.SetField(dbfeature.FieldMeterGroupByFilters, field.TypeJSON, value)
	}
	if _u.mutation.MeterGroupByFiltersCleared() {
		_spec.ClearField(dbfeature.FieldMeterGroupByFilters, field.TypeJSON)
	}
	if value, ok := _u.mutation.AdvancedMeterGroupByFilters(); ok {
		_spec.SetField(dbfeature.FieldAdvancedMeterGroupByFilters, field.TypeJSON, value)
	}
	if _u.mutation.AdvancedMeterGroupByFiltersCleared() {
		_spec.ClearField(dbfeature.FieldAdvancedMeterGroupByFilters, field.TypeJSON)
	}
	if value, ok := _u.mutation.ArchivedAt(); ok {
		_spec.SetField(dbfeature.FieldArchivedAt, field.TypeTime, value)
	}
	if _u.mutation.ArchivedAtCleared() {
		_spec.ClearField(dbfeature.FieldArchivedAt, field.TypeTime)
	}
	if _u.mutation.EntitlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.EntitlementTable,
			Columns: []string{dbfeature.EntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntitlementIDs(); len(nodes) > 0 && !_u.mutation.EntitlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.EntitlementTable,
			Columns: []string{dbfeature.EntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntitlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.EntitlementTable,
			Columns: []string{dbfeature.EntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RatecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.RatecardTable,
			Columns: []string{dbfeature.RatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planratecard.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRatecardIDs(); len(nodes) > 0 && !_u.mutation.RatecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.RatecardTable,
			Columns: []string{dbfeature.RatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RatecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.RatecardTable,
			Columns: []string{dbfeature.RatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AddonRatecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.AddonRatecardTable,
			Columns: []string{dbfeature.AddonRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAddonRatecardIDs(); len(nodes) > 0 && !_u.mutation.AddonRatecardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.AddonRatecardTable,
			Columns: []string{dbfeature.AddonRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AddonRatecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbfeature.AddonRatecardTable,
			Columns: []string{dbfeature.AddonRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Feature{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbfeature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
