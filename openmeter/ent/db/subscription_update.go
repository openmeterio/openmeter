// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicesplitlinegroup"
	"github.com/openmeterio/openmeter/openmeter/ent/db/plan"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionphase"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/isodate"
)

// SubscriptionUpdate is the builder for updating Subscription entities.
type SubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionMutation
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (_u *SubscriptionUpdate) Where(ps ...predicate.Subscription) *SubscriptionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubscriptionUpdate) SetUpdatedAt(v time.Time) *SubscriptionUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SubscriptionUpdate) SetDeletedAt(v time.Time) *SubscriptionUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableDeletedAt(v *time.Time) *SubscriptionUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SubscriptionUpdate) ClearDeletedAt() *SubscriptionUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *SubscriptionUpdate) SetMetadata(v map[string]string) *SubscriptionUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SubscriptionUpdate) ClearMetadata() *SubscriptionUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetActiveTo sets the "active_to" field.
func (_u *SubscriptionUpdate) SetActiveTo(v time.Time) *SubscriptionUpdate {
	_u.mutation.SetActiveTo(v)
	return _u
}

// SetNillableActiveTo sets the "active_to" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableActiveTo(v *time.Time) *SubscriptionUpdate {
	if v != nil {
		_u.SetActiveTo(*v)
	}
	return _u
}

// ClearActiveTo clears the value of the "active_to" field.
func (_u *SubscriptionUpdate) ClearActiveTo() *SubscriptionUpdate {
	_u.mutation.ClearActiveTo()
	return _u
}

// SetBillablesMustAlign sets the "billables_must_align" field.
func (_u *SubscriptionUpdate) SetBillablesMustAlign(v bool) *SubscriptionUpdate {
	_u.mutation.SetBillablesMustAlign(v)
	return _u
}

// SetNillableBillablesMustAlign sets the "billables_must_align" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableBillablesMustAlign(v *bool) *SubscriptionUpdate {
	if v != nil {
		_u.SetBillablesMustAlign(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *SubscriptionUpdate) SetName(v string) *SubscriptionUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableName(v *string) *SubscriptionUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *SubscriptionUpdate) SetDescription(v string) *SubscriptionUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableDescription(v *string) *SubscriptionUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *SubscriptionUpdate) ClearDescription() *SubscriptionUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetPlanID sets the "plan_id" field.
func (_u *SubscriptionUpdate) SetPlanID(v string) *SubscriptionUpdate {
	_u.mutation.SetPlanID(v)
	return _u
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillablePlanID(v *string) *SubscriptionUpdate {
	if v != nil {
		_u.SetPlanID(*v)
	}
	return _u
}

// ClearPlanID clears the value of the "plan_id" field.
func (_u *SubscriptionUpdate) ClearPlanID() *SubscriptionUpdate {
	_u.mutation.ClearPlanID()
	return _u
}

// SetBillingAnchor sets the "billing_anchor" field.
func (_u *SubscriptionUpdate) SetBillingAnchor(v time.Time) *SubscriptionUpdate {
	_u.mutation.SetBillingAnchor(v)
	return _u
}

// SetNillableBillingAnchor sets the "billing_anchor" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableBillingAnchor(v *time.Time) *SubscriptionUpdate {
	if v != nil {
		_u.SetBillingAnchor(*v)
	}
	return _u
}

// SetBillingCadence sets the "billing_cadence" field.
func (_u *SubscriptionUpdate) SetBillingCadence(v isodate.String) *SubscriptionUpdate {
	_u.mutation.SetBillingCadence(v)
	return _u
}

// SetNillableBillingCadence sets the "billing_cadence" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableBillingCadence(v *isodate.String) *SubscriptionUpdate {
	if v != nil {
		_u.SetBillingCadence(*v)
	}
	return _u
}

// SetProRatingConfig sets the "pro_rating_config" field.
func (_u *SubscriptionUpdate) SetProRatingConfig(v productcatalog.ProRatingConfig) *SubscriptionUpdate {
	_u.mutation.SetProRatingConfig(v)
	return _u
}

// SetNillableProRatingConfig sets the "pro_rating_config" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableProRatingConfig(v *productcatalog.ProRatingConfig) *SubscriptionUpdate {
	if v != nil {
		_u.SetProRatingConfig(*v)
	}
	return _u
}

// SetPlan sets the "plan" edge to the Plan entity.
func (_u *SubscriptionUpdate) SetPlan(v *Plan) *SubscriptionUpdate {
	return _u.SetPlanID(v.ID)
}

// AddPhaseIDs adds the "phases" edge to the SubscriptionPhase entity by IDs.
func (_u *SubscriptionUpdate) AddPhaseIDs(ids ...string) *SubscriptionUpdate {
	_u.mutation.AddPhaseIDs(ids...)
	return _u
}

// AddPhases adds the "phases" edges to the SubscriptionPhase entity.
func (_u *SubscriptionUpdate) AddPhases(v ...*SubscriptionPhase) *SubscriptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPhaseIDs(ids...)
}

// AddBillingLineIDs adds the "billing_lines" edge to the BillingInvoiceLine entity by IDs.
func (_u *SubscriptionUpdate) AddBillingLineIDs(ids ...string) *SubscriptionUpdate {
	_u.mutation.AddBillingLineIDs(ids...)
	return _u
}

// AddBillingLines adds the "billing_lines" edges to the BillingInvoiceLine entity.
func (_u *SubscriptionUpdate) AddBillingLines(v ...*BillingInvoiceLine) *SubscriptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBillingLineIDs(ids...)
}

// AddBillingSplitLineGroupIDs adds the "billing_split_line_groups" edge to the BillingInvoiceSplitLineGroup entity by IDs.
func (_u *SubscriptionUpdate) AddBillingSplitLineGroupIDs(ids ...string) *SubscriptionUpdate {
	_u.mutation.AddBillingSplitLineGroupIDs(ids...)
	return _u
}

// AddBillingSplitLineGroups adds the "billing_split_line_groups" edges to the BillingInvoiceSplitLineGroup entity.
func (_u *SubscriptionUpdate) AddBillingSplitLineGroups(v ...*BillingInvoiceSplitLineGroup) *SubscriptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBillingSplitLineGroupIDs(ids...)
}

// AddAddonIDs adds the "addons" edge to the SubscriptionAddon entity by IDs.
func (_u *SubscriptionUpdate) AddAddonIDs(ids ...string) *SubscriptionUpdate {
	_u.mutation.AddAddonIDs(ids...)
	return _u
}

// AddAddons adds the "addons" edges to the SubscriptionAddon entity.
func (_u *SubscriptionUpdate) AddAddons(v ...*SubscriptionAddon) *SubscriptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAddonIDs(ids...)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (_u *SubscriptionUpdate) Mutation() *SubscriptionMutation {
	return _u.mutation
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (_u *SubscriptionUpdate) ClearPlan() *SubscriptionUpdate {
	_u.mutation.ClearPlan()
	return _u
}

// ClearPhases clears all "phases" edges to the SubscriptionPhase entity.
func (_u *SubscriptionUpdate) ClearPhases() *SubscriptionUpdate {
	_u.mutation.ClearPhases()
	return _u
}

// RemovePhaseIDs removes the "phases" edge to SubscriptionPhase entities by IDs.
func (_u *SubscriptionUpdate) RemovePhaseIDs(ids ...string) *SubscriptionUpdate {
	_u.mutation.RemovePhaseIDs(ids...)
	return _u
}

// RemovePhases removes "phases" edges to SubscriptionPhase entities.
func (_u *SubscriptionUpdate) RemovePhases(v ...*SubscriptionPhase) *SubscriptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePhaseIDs(ids...)
}

// ClearBillingLines clears all "billing_lines" edges to the BillingInvoiceLine entity.
func (_u *SubscriptionUpdate) ClearBillingLines() *SubscriptionUpdate {
	_u.mutation.ClearBillingLines()
	return _u
}

// RemoveBillingLineIDs removes the "billing_lines" edge to BillingInvoiceLine entities by IDs.
func (_u *SubscriptionUpdate) RemoveBillingLineIDs(ids ...string) *SubscriptionUpdate {
	_u.mutation.RemoveBillingLineIDs(ids...)
	return _u
}

// RemoveBillingLines removes "billing_lines" edges to BillingInvoiceLine entities.
func (_u *SubscriptionUpdate) RemoveBillingLines(v ...*BillingInvoiceLine) *SubscriptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBillingLineIDs(ids...)
}

// ClearBillingSplitLineGroups clears all "billing_split_line_groups" edges to the BillingInvoiceSplitLineGroup entity.
func (_u *SubscriptionUpdate) ClearBillingSplitLineGroups() *SubscriptionUpdate {
	_u.mutation.ClearBillingSplitLineGroups()
	return _u
}

// RemoveBillingSplitLineGroupIDs removes the "billing_split_line_groups" edge to BillingInvoiceSplitLineGroup entities by IDs.
func (_u *SubscriptionUpdate) RemoveBillingSplitLineGroupIDs(ids ...string) *SubscriptionUpdate {
	_u.mutation.RemoveBillingSplitLineGroupIDs(ids...)
	return _u
}

// RemoveBillingSplitLineGroups removes "billing_split_line_groups" edges to BillingInvoiceSplitLineGroup entities.
func (_u *SubscriptionUpdate) RemoveBillingSplitLineGroups(v ...*BillingInvoiceSplitLineGroup) *SubscriptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBillingSplitLineGroupIDs(ids...)
}

// ClearAddons clears all "addons" edges to the SubscriptionAddon entity.
func (_u *SubscriptionUpdate) ClearAddons() *SubscriptionUpdate {
	_u.mutation.ClearAddons()
	return _u
}

// RemoveAddonIDs removes the "addons" edge to SubscriptionAddon entities by IDs.
func (_u *SubscriptionUpdate) RemoveAddonIDs(ids ...string) *SubscriptionUpdate {
	_u.mutation.RemoveAddonIDs(ids...)
	return _u
}

// RemoveAddons removes "addons" edges to SubscriptionAddon entities.
func (_u *SubscriptionUpdate) RemoveAddons(v ...*SubscriptionAddon) *SubscriptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAddonIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SubscriptionUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubscriptionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubscriptionUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := subscription.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubscriptionUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := subscription.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Subscription.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProRatingConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "pro_rating_config", err: fmt.Errorf(`db: validator failed for field "Subscription.pro_rating_config": %w`, err)}
		}
	}
	if _u.mutation.CustomerCleared() && len(_u.mutation.CustomerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Subscription.customer"`)
	}
	return nil
}

func (_u *SubscriptionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subscription.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subscription.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(subscription.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(subscription.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.ActiveTo(); ok {
		_spec.SetField(subscription.FieldActiveTo, field.TypeTime, value)
	}
	if _u.mutation.ActiveToCleared() {
		_spec.ClearField(subscription.FieldActiveTo, field.TypeTime)
	}
	if value, ok := _u.mutation.BillablesMustAlign(); ok {
		_spec.SetField(subscription.FieldBillablesMustAlign, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(subscription.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(subscription.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(subscription.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAnchor(); ok {
		_spec.SetField(subscription.FieldBillingAnchor, field.TypeTime, value)
	}
	if value, ok := _u.mutation.BillingCadence(); ok {
		_spec.SetField(subscription.FieldBillingCadence, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProRatingConfig(); ok {
		vv, err := subscription.ValueScanner.ProRatingConfig.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(subscription.FieldProRatingConfig, field.TypeString, vv)
	}
	if _u.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.PlanTable,
			Columns: []string{subscription.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.PlanTable,
			Columns: []string{subscription.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PhasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.PhasesTable,
			Columns: []string{subscription.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPhasesIDs(); len(nodes) > 0 && !_u.mutation.PhasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.PhasesTable,
			Columns: []string{subscription.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PhasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.PhasesTable,
			Columns: []string{subscription.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BillingLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.BillingLinesTable,
			Columns: []string{subscription.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBillingLinesIDs(); len(nodes) > 0 && !_u.mutation.BillingLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.BillingLinesTable,
			Columns: []string{subscription.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.BillingLinesTable,
			Columns: []string{subscription.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BillingSplitLineGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.BillingSplitLineGroupsTable,
			Columns: []string{subscription.BillingSplitLineGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBillingSplitLineGroupsIDs(); len(nodes) > 0 && !_u.mutation.BillingSplitLineGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.BillingSplitLineGroupsTable,
			Columns: []string{subscription.BillingSplitLineGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingSplitLineGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.BillingSplitLineGroupsTable,
			Columns: []string{subscription.BillingSplitLineGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AddonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.AddonsTable,
			Columns: []string{subscription.AddonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddon.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAddonsIDs(); len(nodes) > 0 && !_u.mutation.AddonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.AddonsTable,
			Columns: []string{subscription.AddonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AddonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.AddonsTable,
			Columns: []string{subscription.AddonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SubscriptionUpdateOne is the builder for updating a single Subscription entity.
type SubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubscriptionUpdateOne) SetUpdatedAt(v time.Time) *SubscriptionUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SubscriptionUpdateOne) SetDeletedAt(v time.Time) *SubscriptionUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableDeletedAt(v *time.Time) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SubscriptionUpdateOne) ClearDeletedAt() *SubscriptionUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *SubscriptionUpdateOne) SetMetadata(v map[string]string) *SubscriptionUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SubscriptionUpdateOne) ClearMetadata() *SubscriptionUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetActiveTo sets the "active_to" field.
func (_u *SubscriptionUpdateOne) SetActiveTo(v time.Time) *SubscriptionUpdateOne {
	_u.mutation.SetActiveTo(v)
	return _u
}

// SetNillableActiveTo sets the "active_to" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableActiveTo(v *time.Time) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetActiveTo(*v)
	}
	return _u
}

// ClearActiveTo clears the value of the "active_to" field.
func (_u *SubscriptionUpdateOne) ClearActiveTo() *SubscriptionUpdateOne {
	_u.mutation.ClearActiveTo()
	return _u
}

// SetBillablesMustAlign sets the "billables_must_align" field.
func (_u *SubscriptionUpdateOne) SetBillablesMustAlign(v bool) *SubscriptionUpdateOne {
	_u.mutation.SetBillablesMustAlign(v)
	return _u
}

// SetNillableBillablesMustAlign sets the "billables_must_align" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableBillablesMustAlign(v *bool) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetBillablesMustAlign(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *SubscriptionUpdateOne) SetName(v string) *SubscriptionUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableName(v *string) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *SubscriptionUpdateOne) SetDescription(v string) *SubscriptionUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableDescription(v *string) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *SubscriptionUpdateOne) ClearDescription() *SubscriptionUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetPlanID sets the "plan_id" field.
func (_u *SubscriptionUpdateOne) SetPlanID(v string) *SubscriptionUpdateOne {
	_u.mutation.SetPlanID(v)
	return _u
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillablePlanID(v *string) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetPlanID(*v)
	}
	return _u
}

// ClearPlanID clears the value of the "plan_id" field.
func (_u *SubscriptionUpdateOne) ClearPlanID() *SubscriptionUpdateOne {
	_u.mutation.ClearPlanID()
	return _u
}

// SetBillingAnchor sets the "billing_anchor" field.
func (_u *SubscriptionUpdateOne) SetBillingAnchor(v time.Time) *SubscriptionUpdateOne {
	_u.mutation.SetBillingAnchor(v)
	return _u
}

// SetNillableBillingAnchor sets the "billing_anchor" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableBillingAnchor(v *time.Time) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetBillingAnchor(*v)
	}
	return _u
}

// SetBillingCadence sets the "billing_cadence" field.
func (_u *SubscriptionUpdateOne) SetBillingCadence(v isodate.String) *SubscriptionUpdateOne {
	_u.mutation.SetBillingCadence(v)
	return _u
}

// SetNillableBillingCadence sets the "billing_cadence" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableBillingCadence(v *isodate.String) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetBillingCadence(*v)
	}
	return _u
}

// SetProRatingConfig sets the "pro_rating_config" field.
func (_u *SubscriptionUpdateOne) SetProRatingConfig(v productcatalog.ProRatingConfig) *SubscriptionUpdateOne {
	_u.mutation.SetProRatingConfig(v)
	return _u
}

// SetNillableProRatingConfig sets the "pro_rating_config" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableProRatingConfig(v *productcatalog.ProRatingConfig) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetProRatingConfig(*v)
	}
	return _u
}

// SetPlan sets the "plan" edge to the Plan entity.
func (_u *SubscriptionUpdateOne) SetPlan(v *Plan) *SubscriptionUpdateOne {
	return _u.SetPlanID(v.ID)
}

// AddPhaseIDs adds the "phases" edge to the SubscriptionPhase entity by IDs.
func (_u *SubscriptionUpdateOne) AddPhaseIDs(ids ...string) *SubscriptionUpdateOne {
	_u.mutation.AddPhaseIDs(ids...)
	return _u
}

// AddPhases adds the "phases" edges to the SubscriptionPhase entity.
func (_u *SubscriptionUpdateOne) AddPhases(v ...*SubscriptionPhase) *SubscriptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPhaseIDs(ids...)
}

// AddBillingLineIDs adds the "billing_lines" edge to the BillingInvoiceLine entity by IDs.
func (_u *SubscriptionUpdateOne) AddBillingLineIDs(ids ...string) *SubscriptionUpdateOne {
	_u.mutation.AddBillingLineIDs(ids...)
	return _u
}

// AddBillingLines adds the "billing_lines" edges to the BillingInvoiceLine entity.
func (_u *SubscriptionUpdateOne) AddBillingLines(v ...*BillingInvoiceLine) *SubscriptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBillingLineIDs(ids...)
}

// AddBillingSplitLineGroupIDs adds the "billing_split_line_groups" edge to the BillingInvoiceSplitLineGroup entity by IDs.
func (_u *SubscriptionUpdateOne) AddBillingSplitLineGroupIDs(ids ...string) *SubscriptionUpdateOne {
	_u.mutation.AddBillingSplitLineGroupIDs(ids...)
	return _u
}

// AddBillingSplitLineGroups adds the "billing_split_line_groups" edges to the BillingInvoiceSplitLineGroup entity.
func (_u *SubscriptionUpdateOne) AddBillingSplitLineGroups(v ...*BillingInvoiceSplitLineGroup) *SubscriptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBillingSplitLineGroupIDs(ids...)
}

// AddAddonIDs adds the "addons" edge to the SubscriptionAddon entity by IDs.
func (_u *SubscriptionUpdateOne) AddAddonIDs(ids ...string) *SubscriptionUpdateOne {
	_u.mutation.AddAddonIDs(ids...)
	return _u
}

// AddAddons adds the "addons" edges to the SubscriptionAddon entity.
func (_u *SubscriptionUpdateOne) AddAddons(v ...*SubscriptionAddon) *SubscriptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAddonIDs(ids...)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (_u *SubscriptionUpdateOne) Mutation() *SubscriptionMutation {
	return _u.mutation
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (_u *SubscriptionUpdateOne) ClearPlan() *SubscriptionUpdateOne {
	_u.mutation.ClearPlan()
	return _u
}

// ClearPhases clears all "phases" edges to the SubscriptionPhase entity.
func (_u *SubscriptionUpdateOne) ClearPhases() *SubscriptionUpdateOne {
	_u.mutation.ClearPhases()
	return _u
}

// RemovePhaseIDs removes the "phases" edge to SubscriptionPhase entities by IDs.
func (_u *SubscriptionUpdateOne) RemovePhaseIDs(ids ...string) *SubscriptionUpdateOne {
	_u.mutation.RemovePhaseIDs(ids...)
	return _u
}

// RemovePhases removes "phases" edges to SubscriptionPhase entities.
func (_u *SubscriptionUpdateOne) RemovePhases(v ...*SubscriptionPhase) *SubscriptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePhaseIDs(ids...)
}

// ClearBillingLines clears all "billing_lines" edges to the BillingInvoiceLine entity.
func (_u *SubscriptionUpdateOne) ClearBillingLines() *SubscriptionUpdateOne {
	_u.mutation.ClearBillingLines()
	return _u
}

// RemoveBillingLineIDs removes the "billing_lines" edge to BillingInvoiceLine entities by IDs.
func (_u *SubscriptionUpdateOne) RemoveBillingLineIDs(ids ...string) *SubscriptionUpdateOne {
	_u.mutation.RemoveBillingLineIDs(ids...)
	return _u
}

// RemoveBillingLines removes "billing_lines" edges to BillingInvoiceLine entities.
func (_u *SubscriptionUpdateOne) RemoveBillingLines(v ...*BillingInvoiceLine) *SubscriptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBillingLineIDs(ids...)
}

// ClearBillingSplitLineGroups clears all "billing_split_line_groups" edges to the BillingInvoiceSplitLineGroup entity.
func (_u *SubscriptionUpdateOne) ClearBillingSplitLineGroups() *SubscriptionUpdateOne {
	_u.mutation.ClearBillingSplitLineGroups()
	return _u
}

// RemoveBillingSplitLineGroupIDs removes the "billing_split_line_groups" edge to BillingInvoiceSplitLineGroup entities by IDs.
func (_u *SubscriptionUpdateOne) RemoveBillingSplitLineGroupIDs(ids ...string) *SubscriptionUpdateOne {
	_u.mutation.RemoveBillingSplitLineGroupIDs(ids...)
	return _u
}

// RemoveBillingSplitLineGroups removes "billing_split_line_groups" edges to BillingInvoiceSplitLineGroup entities.
func (_u *SubscriptionUpdateOne) RemoveBillingSplitLineGroups(v ...*BillingInvoiceSplitLineGroup) *SubscriptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBillingSplitLineGroupIDs(ids...)
}

// ClearAddons clears all "addons" edges to the SubscriptionAddon entity.
func (_u *SubscriptionUpdateOne) ClearAddons() *SubscriptionUpdateOne {
	_u.mutation.ClearAddons()
	return _u
}

// RemoveAddonIDs removes the "addons" edge to SubscriptionAddon entities by IDs.
func (_u *SubscriptionUpdateOne) RemoveAddonIDs(ids ...string) *SubscriptionUpdateOne {
	_u.mutation.RemoveAddonIDs(ids...)
	return _u
}

// RemoveAddons removes "addons" edges to SubscriptionAddon entities.
func (_u *SubscriptionUpdateOne) RemoveAddons(v ...*SubscriptionAddon) *SubscriptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAddonIDs(ids...)
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (_u *SubscriptionUpdateOne) Where(ps ...predicate.Subscription) *SubscriptionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SubscriptionUpdateOne) Select(field string, fields ...string) *SubscriptionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Subscription entity.
func (_u *SubscriptionUpdateOne) Save(ctx context.Context) (*Subscription, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubscriptionUpdateOne) SaveX(ctx context.Context) *Subscription {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubscriptionUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := subscription.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubscriptionUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := subscription.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Subscription.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProRatingConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "pro_rating_config", err: fmt.Errorf(`db: validator failed for field "Subscription.pro_rating_config": %w`, err)}
		}
	}
	if _u.mutation.CustomerCleared() && len(_u.mutation.CustomerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Subscription.customer"`)
	}
	return nil
}

func (_u *SubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *Subscription, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Subscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscription.FieldID)
		for _, f := range fields {
			if !subscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != subscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subscription.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subscription.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(subscription.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(subscription.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.ActiveTo(); ok {
		_spec.SetField(subscription.FieldActiveTo, field.TypeTime, value)
	}
	if _u.mutation.ActiveToCleared() {
		_spec.ClearField(subscription.FieldActiveTo, field.TypeTime)
	}
	if value, ok := _u.mutation.BillablesMustAlign(); ok {
		_spec.SetField(subscription.FieldBillablesMustAlign, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(subscription.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(subscription.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(subscription.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAnchor(); ok {
		_spec.SetField(subscription.FieldBillingAnchor, field.TypeTime, value)
	}
	if value, ok := _u.mutation.BillingCadence(); ok {
		_spec.SetField(subscription.FieldBillingCadence, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProRatingConfig(); ok {
		vv, err := subscription.ValueScanner.ProRatingConfig.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(subscription.FieldProRatingConfig, field.TypeString, vv)
	}
	if _u.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.PlanTable,
			Columns: []string{subscription.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.PlanTable,
			Columns: []string{subscription.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PhasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.PhasesTable,
			Columns: []string{subscription.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPhasesIDs(); len(nodes) > 0 && !_u.mutation.PhasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.PhasesTable,
			Columns: []string{subscription.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PhasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.PhasesTable,
			Columns: []string{subscription.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BillingLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.BillingLinesTable,
			Columns: []string{subscription.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBillingLinesIDs(); len(nodes) > 0 && !_u.mutation.BillingLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.BillingLinesTable,
			Columns: []string{subscription.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.BillingLinesTable,
			Columns: []string{subscription.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BillingSplitLineGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.BillingSplitLineGroupsTable,
			Columns: []string{subscription.BillingSplitLineGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBillingSplitLineGroupsIDs(); len(nodes) > 0 && !_u.mutation.BillingSplitLineGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.BillingSplitLineGroupsTable,
			Columns: []string{subscription.BillingSplitLineGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingSplitLineGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.BillingSplitLineGroupsTable,
			Columns: []string{subscription.BillingSplitLineGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AddonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.AddonsTable,
			Columns: []string{subscription.AddonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddon.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAddonsIDs(); len(nodes) > 0 && !_u.mutation.AddonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.AddonsTable,
			Columns: []string{subscription.AddonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AddonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.AddonsTable,
			Columns: []string{subscription.AddonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subscription{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
