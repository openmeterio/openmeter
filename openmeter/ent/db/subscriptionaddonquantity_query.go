// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonquantity"
)

// SubscriptionAddonQuantityQuery is the builder for querying SubscriptionAddonQuantity entities.
type SubscriptionAddonQuantityQuery struct {
	config
	ctx                   *QueryContext
	order                 []subscriptionaddonquantity.OrderOption
	inters                []Interceptor
	predicates            []predicate.SubscriptionAddonQuantity
	withSubscriptionAddon *SubscriptionAddonQuery
	modifiers             []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubscriptionAddonQuantityQuery builder.
func (saqq *SubscriptionAddonQuantityQuery) Where(ps ...predicate.SubscriptionAddonQuantity) *SubscriptionAddonQuantityQuery {
	saqq.predicates = append(saqq.predicates, ps...)
	return saqq
}

// Limit the number of records to be returned by this query.
func (saqq *SubscriptionAddonQuantityQuery) Limit(limit int) *SubscriptionAddonQuantityQuery {
	saqq.ctx.Limit = &limit
	return saqq
}

// Offset to start from.
func (saqq *SubscriptionAddonQuantityQuery) Offset(offset int) *SubscriptionAddonQuantityQuery {
	saqq.ctx.Offset = &offset
	return saqq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (saqq *SubscriptionAddonQuantityQuery) Unique(unique bool) *SubscriptionAddonQuantityQuery {
	saqq.ctx.Unique = &unique
	return saqq
}

// Order specifies how the records should be ordered.
func (saqq *SubscriptionAddonQuantityQuery) Order(o ...subscriptionaddonquantity.OrderOption) *SubscriptionAddonQuantityQuery {
	saqq.order = append(saqq.order, o...)
	return saqq
}

// QuerySubscriptionAddon chains the current query on the "subscription_addon" edge.
func (saqq *SubscriptionAddonQuantityQuery) QuerySubscriptionAddon() *SubscriptionAddonQuery {
	query := (&SubscriptionAddonClient{config: saqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionaddonquantity.Table, subscriptionaddonquantity.FieldID, selector),
			sqlgraph.To(subscriptionaddon.Table, subscriptionaddon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionaddonquantity.SubscriptionAddonTable, subscriptionaddonquantity.SubscriptionAddonColumn),
		)
		fromU = sqlgraph.SetNeighbors(saqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SubscriptionAddonQuantity entity from the query.
// Returns a *NotFoundError when no SubscriptionAddonQuantity was found.
func (saqq *SubscriptionAddonQuantityQuery) First(ctx context.Context) (*SubscriptionAddonQuantity, error) {
	nodes, err := saqq.Limit(1).All(setContextOp(ctx, saqq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{subscriptionaddonquantity.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (saqq *SubscriptionAddonQuantityQuery) FirstX(ctx context.Context) *SubscriptionAddonQuantity {
	node, err := saqq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SubscriptionAddonQuantity ID from the query.
// Returns a *NotFoundError when no SubscriptionAddonQuantity ID was found.
func (saqq *SubscriptionAddonQuantityQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = saqq.Limit(1).IDs(setContextOp(ctx, saqq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{subscriptionaddonquantity.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (saqq *SubscriptionAddonQuantityQuery) FirstIDX(ctx context.Context) string {
	id, err := saqq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SubscriptionAddonQuantity entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SubscriptionAddonQuantity entity is found.
// Returns a *NotFoundError when no SubscriptionAddonQuantity entities are found.
func (saqq *SubscriptionAddonQuantityQuery) Only(ctx context.Context) (*SubscriptionAddonQuantity, error) {
	nodes, err := saqq.Limit(2).All(setContextOp(ctx, saqq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{subscriptionaddonquantity.Label}
	default:
		return nil, &NotSingularError{subscriptionaddonquantity.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (saqq *SubscriptionAddonQuantityQuery) OnlyX(ctx context.Context) *SubscriptionAddonQuantity {
	node, err := saqq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SubscriptionAddonQuantity ID in the query.
// Returns a *NotSingularError when more than one SubscriptionAddonQuantity ID is found.
// Returns a *NotFoundError when no entities are found.
func (saqq *SubscriptionAddonQuantityQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = saqq.Limit(2).IDs(setContextOp(ctx, saqq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{subscriptionaddonquantity.Label}
	default:
		err = &NotSingularError{subscriptionaddonquantity.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (saqq *SubscriptionAddonQuantityQuery) OnlyIDX(ctx context.Context) string {
	id, err := saqq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SubscriptionAddonQuantities.
func (saqq *SubscriptionAddonQuantityQuery) All(ctx context.Context) ([]*SubscriptionAddonQuantity, error) {
	ctx = setContextOp(ctx, saqq.ctx, ent.OpQueryAll)
	if err := saqq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SubscriptionAddonQuantity, *SubscriptionAddonQuantityQuery]()
	return withInterceptors[[]*SubscriptionAddonQuantity](ctx, saqq, qr, saqq.inters)
}

// AllX is like All, but panics if an error occurs.
func (saqq *SubscriptionAddonQuantityQuery) AllX(ctx context.Context) []*SubscriptionAddonQuantity {
	nodes, err := saqq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SubscriptionAddonQuantity IDs.
func (saqq *SubscriptionAddonQuantityQuery) IDs(ctx context.Context) (ids []string, err error) {
	if saqq.ctx.Unique == nil && saqq.path != nil {
		saqq.Unique(true)
	}
	ctx = setContextOp(ctx, saqq.ctx, ent.OpQueryIDs)
	if err = saqq.Select(subscriptionaddonquantity.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (saqq *SubscriptionAddonQuantityQuery) IDsX(ctx context.Context) []string {
	ids, err := saqq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (saqq *SubscriptionAddonQuantityQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, saqq.ctx, ent.OpQueryCount)
	if err := saqq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, saqq, querierCount[*SubscriptionAddonQuantityQuery](), saqq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (saqq *SubscriptionAddonQuantityQuery) CountX(ctx context.Context) int {
	count, err := saqq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (saqq *SubscriptionAddonQuantityQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, saqq.ctx, ent.OpQueryExist)
	switch _, err := saqq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (saqq *SubscriptionAddonQuantityQuery) ExistX(ctx context.Context) bool {
	exist, err := saqq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubscriptionAddonQuantityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (saqq *SubscriptionAddonQuantityQuery) Clone() *SubscriptionAddonQuantityQuery {
	if saqq == nil {
		return nil
	}
	return &SubscriptionAddonQuantityQuery{
		config:                saqq.config,
		ctx:                   saqq.ctx.Clone(),
		order:                 append([]subscriptionaddonquantity.OrderOption{}, saqq.order...),
		inters:                append([]Interceptor{}, saqq.inters...),
		predicates:            append([]predicate.SubscriptionAddonQuantity{}, saqq.predicates...),
		withSubscriptionAddon: saqq.withSubscriptionAddon.Clone(),
		// clone intermediate query.
		sql:  saqq.sql.Clone(),
		path: saqq.path,
	}
}

// WithSubscriptionAddon tells the query-builder to eager-load the nodes that are connected to
// the "subscription_addon" edge. The optional arguments are used to configure the query builder of the edge.
func (saqq *SubscriptionAddonQuantityQuery) WithSubscriptionAddon(opts ...func(*SubscriptionAddonQuery)) *SubscriptionAddonQuantityQuery {
	query := (&SubscriptionAddonClient{config: saqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saqq.withSubscriptionAddon = query
	return saqq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SubscriptionAddonQuantity.Query().
//		GroupBy(subscriptionaddonquantity.FieldNamespace).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (saqq *SubscriptionAddonQuantityQuery) GroupBy(field string, fields ...string) *SubscriptionAddonQuantityGroupBy {
	saqq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SubscriptionAddonQuantityGroupBy{build: saqq}
	grbuild.flds = &saqq.ctx.Fields
	grbuild.label = subscriptionaddonquantity.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//	}
//
//	client.SubscriptionAddonQuantity.Query().
//		Select(subscriptionaddonquantity.FieldNamespace).
//		Scan(ctx, &v)
func (saqq *SubscriptionAddonQuantityQuery) Select(fields ...string) *SubscriptionAddonQuantitySelect {
	saqq.ctx.Fields = append(saqq.ctx.Fields, fields...)
	sbuild := &SubscriptionAddonQuantitySelect{SubscriptionAddonQuantityQuery: saqq}
	sbuild.label = subscriptionaddonquantity.Label
	sbuild.flds, sbuild.scan = &saqq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SubscriptionAddonQuantitySelect configured with the given aggregations.
func (saqq *SubscriptionAddonQuantityQuery) Aggregate(fns ...AggregateFunc) *SubscriptionAddonQuantitySelect {
	return saqq.Select().Aggregate(fns...)
}

func (saqq *SubscriptionAddonQuantityQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range saqq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, saqq); err != nil {
				return err
			}
		}
	}
	for _, f := range saqq.ctx.Fields {
		if !subscriptionaddonquantity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if saqq.path != nil {
		prev, err := saqq.path(ctx)
		if err != nil {
			return err
		}
		saqq.sql = prev
	}
	return nil
}

func (saqq *SubscriptionAddonQuantityQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SubscriptionAddonQuantity, error) {
	var (
		nodes       = []*SubscriptionAddonQuantity{}
		_spec       = saqq.querySpec()
		loadedTypes = [1]bool{
			saqq.withSubscriptionAddon != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SubscriptionAddonQuantity).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SubscriptionAddonQuantity{config: saqq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(saqq.modifiers) > 0 {
		_spec.Modifiers = saqq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, saqq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := saqq.withSubscriptionAddon; query != nil {
		if err := saqq.loadSubscriptionAddon(ctx, query, nodes, nil,
			func(n *SubscriptionAddonQuantity, e *SubscriptionAddon) { n.Edges.SubscriptionAddon = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (saqq *SubscriptionAddonQuantityQuery) loadSubscriptionAddon(ctx context.Context, query *SubscriptionAddonQuery, nodes []*SubscriptionAddonQuantity, init func(*SubscriptionAddonQuantity), assign func(*SubscriptionAddonQuantity, *SubscriptionAddon)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*SubscriptionAddonQuantity)
	for i := range nodes {
		fk := nodes[i].SubscriptionAddonID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subscriptionaddon.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscription_addon_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (saqq *SubscriptionAddonQuantityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := saqq.querySpec()
	if len(saqq.modifiers) > 0 {
		_spec.Modifiers = saqq.modifiers
	}
	_spec.Node.Columns = saqq.ctx.Fields
	if len(saqq.ctx.Fields) > 0 {
		_spec.Unique = saqq.ctx.Unique != nil && *saqq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, saqq.driver, _spec)
}

func (saqq *SubscriptionAddonQuantityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(subscriptionaddonquantity.Table, subscriptionaddonquantity.Columns, sqlgraph.NewFieldSpec(subscriptionaddonquantity.FieldID, field.TypeString))
	_spec.From = saqq.sql
	if unique := saqq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if saqq.path != nil {
		_spec.Unique = true
	}
	if fields := saqq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionaddonquantity.FieldID)
		for i := range fields {
			if fields[i] != subscriptionaddonquantity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if saqq.withSubscriptionAddon != nil {
			_spec.Node.AddColumnOnce(subscriptionaddonquantity.FieldSubscriptionAddonID)
		}
	}
	if ps := saqq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := saqq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := saqq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := saqq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (saqq *SubscriptionAddonQuantityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(saqq.driver.Dialect())
	t1 := builder.Table(subscriptionaddonquantity.Table)
	columns := saqq.ctx.Fields
	if len(columns) == 0 {
		columns = subscriptionaddonquantity.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if saqq.sql != nil {
		selector = saqq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if saqq.ctx.Unique != nil && *saqq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range saqq.modifiers {
		m(selector)
	}
	for _, p := range saqq.predicates {
		p(selector)
	}
	for _, p := range saqq.order {
		p(selector)
	}
	if offset := saqq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := saqq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (saqq *SubscriptionAddonQuantityQuery) ForUpdate(opts ...sql.LockOption) *SubscriptionAddonQuantityQuery {
	if saqq.driver.Dialect() == dialect.Postgres {
		saqq.Unique(false)
	}
	saqq.modifiers = append(saqq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return saqq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (saqq *SubscriptionAddonQuantityQuery) ForShare(opts ...sql.LockOption) *SubscriptionAddonQuantityQuery {
	if saqq.driver.Dialect() == dialect.Postgres {
		saqq.Unique(false)
	}
	saqq.modifiers = append(saqq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return saqq
}

// SubscriptionAddonQuantityGroupBy is the group-by builder for SubscriptionAddonQuantity entities.
type SubscriptionAddonQuantityGroupBy struct {
	selector
	build *SubscriptionAddonQuantityQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (saqgb *SubscriptionAddonQuantityGroupBy) Aggregate(fns ...AggregateFunc) *SubscriptionAddonQuantityGroupBy {
	saqgb.fns = append(saqgb.fns, fns...)
	return saqgb
}

// Scan applies the selector query and scans the result into the given value.
func (saqgb *SubscriptionAddonQuantityGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, saqgb.build.ctx, ent.OpQueryGroupBy)
	if err := saqgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscriptionAddonQuantityQuery, *SubscriptionAddonQuantityGroupBy](ctx, saqgb.build, saqgb, saqgb.build.inters, v)
}

func (saqgb *SubscriptionAddonQuantityGroupBy) sqlScan(ctx context.Context, root *SubscriptionAddonQuantityQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(saqgb.fns))
	for _, fn := range saqgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*saqgb.flds)+len(saqgb.fns))
		for _, f := range *saqgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*saqgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := saqgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SubscriptionAddonQuantitySelect is the builder for selecting fields of SubscriptionAddonQuantity entities.
type SubscriptionAddonQuantitySelect struct {
	*SubscriptionAddonQuantityQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (saqs *SubscriptionAddonQuantitySelect) Aggregate(fns ...AggregateFunc) *SubscriptionAddonQuantitySelect {
	saqs.fns = append(saqs.fns, fns...)
	return saqs
}

// Scan applies the selector query and scans the result into the given value.
func (saqs *SubscriptionAddonQuantitySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, saqs.ctx, ent.OpQuerySelect)
	if err := saqs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscriptionAddonQuantityQuery, *SubscriptionAddonQuantitySelect](ctx, saqs.SubscriptionAddonQuantityQuery, saqs, saqs.inters, v)
}

func (saqs *SubscriptionAddonQuantitySelect) sqlScan(ctx context.Context, root *SubscriptionAddonQuantityQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(saqs.fns))
	for _, fn := range saqs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*saqs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := saqs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
