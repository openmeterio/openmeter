// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceflatfeelineconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
)

// BillingInvoiceFlatFeeLineConfigUpdate is the builder for updating BillingInvoiceFlatFeeLineConfig entities.
type BillingInvoiceFlatFeeLineConfigUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceFlatFeeLineConfigMutation
}

// Where appends a list predicates to the BillingInvoiceFlatFeeLineConfigUpdate builder.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) Where(ps ...predicate.BillingInvoiceFlatFeeLineConfig) *BillingInvoiceFlatFeeLineConfigUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetPerUnitAmount sets the "per_unit_amount" field.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) SetPerUnitAmount(v alpacadecimal.Decimal) *BillingInvoiceFlatFeeLineConfigUpdate {
	_u.mutation.SetPerUnitAmount(v)
	return _u
}

// SetNillablePerUnitAmount sets the "per_unit_amount" field if the given value is not nil.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) SetNillablePerUnitAmount(v *alpacadecimal.Decimal) *BillingInvoiceFlatFeeLineConfigUpdate {
	if v != nil {
		_u.SetPerUnitAmount(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) SetCategory(v billing.FlatFeeCategory) *BillingInvoiceFlatFeeLineConfigUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) SetNillableCategory(v *billing.FlatFeeCategory) *BillingInvoiceFlatFeeLineConfigUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetPaymentTerm sets the "payment_term" field.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) SetPaymentTerm(v productcatalog.PaymentTermType) *BillingInvoiceFlatFeeLineConfigUpdate {
	_u.mutation.SetPaymentTerm(v)
	return _u
}

// SetNillablePaymentTerm sets the "payment_term" field if the given value is not nil.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) SetNillablePaymentTerm(v *productcatalog.PaymentTermType) *BillingInvoiceFlatFeeLineConfigUpdate {
	if v != nil {
		_u.SetPaymentTerm(*v)
	}
	return _u
}

// SetIndex sets the "index" field.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) SetIndex(v int) *BillingInvoiceFlatFeeLineConfigUpdate {
	_u.mutation.ResetIndex()
	_u.mutation.SetIndex(v)
	return _u
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) SetNillableIndex(v *int) *BillingInvoiceFlatFeeLineConfigUpdate {
	if v != nil {
		_u.SetIndex(*v)
	}
	return _u
}

// AddIndex adds value to the "index" field.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) AddIndex(v int) *BillingInvoiceFlatFeeLineConfigUpdate {
	_u.mutation.AddIndex(v)
	return _u
}

// ClearIndex clears the value of the "index" field.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) ClearIndex() *BillingInvoiceFlatFeeLineConfigUpdate {
	_u.mutation.ClearIndex()
	return _u
}

// Mutation returns the BillingInvoiceFlatFeeLineConfigMutation object of the builder.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) Mutation() *BillingInvoiceFlatFeeLineConfigMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BillingInvoiceFlatFeeLineConfigUpdate) check() error {
	if v, ok := _u.mutation.Category(); ok {
		if err := billinginvoiceflatfeelineconfig.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceFlatFeeLineConfig.category": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PaymentTerm(); ok {
		if err := billinginvoiceflatfeelineconfig.PaymentTermValidator(v); err != nil {
			return &ValidationError{Name: "payment_term", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceFlatFeeLineConfig.payment_term": %w`, err)}
		}
	}
	return nil
}

func (_u *BillingInvoiceFlatFeeLineConfigUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoiceflatfeelineconfig.Table, billinginvoiceflatfeelineconfig.Columns, sqlgraph.NewFieldSpec(billinginvoiceflatfeelineconfig.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PerUnitAmount(); ok {
		_spec.SetField(billinginvoiceflatfeelineconfig.FieldPerUnitAmount, field.TypeOther, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(billinginvoiceflatfeelineconfig.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.PaymentTerm(); ok {
		_spec.SetField(billinginvoiceflatfeelineconfig.FieldPaymentTerm, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Index(); ok {
		_spec.SetField(billinginvoiceflatfeelineconfig.FieldIndex, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedIndex(); ok {
		_spec.AddField(billinginvoiceflatfeelineconfig.FieldIndex, field.TypeInt, value)
	}
	if _u.mutation.IndexCleared() {
		_spec.ClearField(billinginvoiceflatfeelineconfig.FieldIndex, field.TypeInt)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoiceflatfeelineconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BillingInvoiceFlatFeeLineConfigUpdateOne is the builder for updating a single BillingInvoiceFlatFeeLineConfig entity.
type BillingInvoiceFlatFeeLineConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceFlatFeeLineConfigMutation
}

// SetPerUnitAmount sets the "per_unit_amount" field.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) SetPerUnitAmount(v alpacadecimal.Decimal) *BillingInvoiceFlatFeeLineConfigUpdateOne {
	_u.mutation.SetPerUnitAmount(v)
	return _u
}

// SetNillablePerUnitAmount sets the "per_unit_amount" field if the given value is not nil.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) SetNillablePerUnitAmount(v *alpacadecimal.Decimal) *BillingInvoiceFlatFeeLineConfigUpdateOne {
	if v != nil {
		_u.SetPerUnitAmount(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) SetCategory(v billing.FlatFeeCategory) *BillingInvoiceFlatFeeLineConfigUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) SetNillableCategory(v *billing.FlatFeeCategory) *BillingInvoiceFlatFeeLineConfigUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetPaymentTerm sets the "payment_term" field.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) SetPaymentTerm(v productcatalog.PaymentTermType) *BillingInvoiceFlatFeeLineConfigUpdateOne {
	_u.mutation.SetPaymentTerm(v)
	return _u
}

// SetNillablePaymentTerm sets the "payment_term" field if the given value is not nil.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) SetNillablePaymentTerm(v *productcatalog.PaymentTermType) *BillingInvoiceFlatFeeLineConfigUpdateOne {
	if v != nil {
		_u.SetPaymentTerm(*v)
	}
	return _u
}

// SetIndex sets the "index" field.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) SetIndex(v int) *BillingInvoiceFlatFeeLineConfigUpdateOne {
	_u.mutation.ResetIndex()
	_u.mutation.SetIndex(v)
	return _u
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) SetNillableIndex(v *int) *BillingInvoiceFlatFeeLineConfigUpdateOne {
	if v != nil {
		_u.SetIndex(*v)
	}
	return _u
}

// AddIndex adds value to the "index" field.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) AddIndex(v int) *BillingInvoiceFlatFeeLineConfigUpdateOne {
	_u.mutation.AddIndex(v)
	return _u
}

// ClearIndex clears the value of the "index" field.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) ClearIndex() *BillingInvoiceFlatFeeLineConfigUpdateOne {
	_u.mutation.ClearIndex()
	return _u
}

// Mutation returns the BillingInvoiceFlatFeeLineConfigMutation object of the builder.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) Mutation() *BillingInvoiceFlatFeeLineConfigMutation {
	return _u.mutation
}

// Where appends a list predicates to the BillingInvoiceFlatFeeLineConfigUpdate builder.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) Where(ps ...predicate.BillingInvoiceFlatFeeLineConfig) *BillingInvoiceFlatFeeLineConfigUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) Select(field string, fields ...string) *BillingInvoiceFlatFeeLineConfigUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BillingInvoiceFlatFeeLineConfig entity.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) Save(ctx context.Context) (*BillingInvoiceFlatFeeLineConfig, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) SaveX(ctx context.Context) *BillingInvoiceFlatFeeLineConfig {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) check() error {
	if v, ok := _u.mutation.Category(); ok {
		if err := billinginvoiceflatfeelineconfig.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceFlatFeeLineConfig.category": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PaymentTerm(); ok {
		if err := billinginvoiceflatfeelineconfig.PaymentTermValidator(v); err != nil {
			return &ValidationError{Name: "payment_term", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceFlatFeeLineConfig.payment_term": %w`, err)}
		}
	}
	return nil
}

func (_u *BillingInvoiceFlatFeeLineConfigUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoiceFlatFeeLineConfig, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoiceflatfeelineconfig.Table, billinginvoiceflatfeelineconfig.Columns, sqlgraph.NewFieldSpec(billinginvoiceflatfeelineconfig.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoiceFlatFeeLineConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoiceflatfeelineconfig.FieldID)
		for _, f := range fields {
			if !billinginvoiceflatfeelineconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoiceflatfeelineconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PerUnitAmount(); ok {
		_spec.SetField(billinginvoiceflatfeelineconfig.FieldPerUnitAmount, field.TypeOther, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(billinginvoiceflatfeelineconfig.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.PaymentTerm(); ok {
		_spec.SetField(billinginvoiceflatfeelineconfig.FieldPaymentTerm, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Index(); ok {
		_spec.SetField(billinginvoiceflatfeelineconfig.FieldIndex, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedIndex(); ok {
		_spec.AddField(billinginvoiceflatfeelineconfig.FieldIndex, field.TypeInt, value)
	}
	if _u.mutation.IndexCleared() {
		_spec.ClearField(billinginvoiceflatfeelineconfig.FieldIndex, field.TypeInt)
	}
	_node = &BillingInvoiceFlatFeeLineConfig{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoiceflatfeelineconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
