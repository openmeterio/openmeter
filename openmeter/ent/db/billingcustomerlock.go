// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomerlock"
)

// BillingCustomerLock is the model entity for the BillingCustomerLock schema.
type BillingCustomerLock struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID   string `json:"customer_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingCustomerLock) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billingcustomerlock.FieldID, billingcustomerlock.FieldNamespace, billingcustomerlock.FieldCustomerID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingCustomerLock fields.
func (bcl *BillingCustomerLock) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billingcustomerlock.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bcl.ID = value.String
			}
		case billingcustomerlock.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				bcl.Namespace = value.String
			}
		case billingcustomerlock.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				bcl.CustomerID = value.String
			}
		default:
			bcl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingCustomerLock.
// This includes values selected through modifiers, order, etc.
func (bcl *BillingCustomerLock) Value(name string) (ent.Value, error) {
	return bcl.selectValues.Get(name)
}

// Update returns a builder for updating this BillingCustomerLock.
// Note that you need to call BillingCustomerLock.Unwrap() before calling this method if this BillingCustomerLock
// was returned from a transaction, and the transaction was committed or rolled back.
func (bcl *BillingCustomerLock) Update() *BillingCustomerLockUpdateOne {
	return NewBillingCustomerLockClient(bcl.config).UpdateOne(bcl)
}

// Unwrap unwraps the BillingCustomerLock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bcl *BillingCustomerLock) Unwrap() *BillingCustomerLock {
	_tx, ok := bcl.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingCustomerLock is not a transactional entity")
	}
	bcl.config.driver = _tx.drv
	return bcl
}

// String implements the fmt.Stringer.
func (bcl *BillingCustomerLock) String() string {
	var builder strings.Builder
	builder.WriteString("BillingCustomerLock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bcl.ID))
	builder.WriteString("namespace=")
	builder.WriteString(bcl.Namespace)
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(bcl.CustomerID)
	builder.WriteByte(')')
	return builder.String()
}

// BillingCustomerLocks is a parsable slice of BillingCustomerLock.
type BillingCustomerLocks []*BillingCustomerLock
