// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicelinediscount"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
)

// BillingInvoiceLineDiscountUpdate is the builder for updating BillingInvoiceLineDiscount entities.
type BillingInvoiceLineDiscountUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceLineDiscountMutation
}

// Where appends a list predicates to the BillingInvoiceLineDiscountUpdate builder.
func (bildu *BillingInvoiceLineDiscountUpdate) Where(ps ...predicate.BillingInvoiceLineDiscount) *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.Where(ps...)
	return bildu
}

// SetUpdatedAt sets the "updated_at" field.
func (bildu *BillingInvoiceLineDiscountUpdate) SetUpdatedAt(t time.Time) *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.SetUpdatedAt(t)
	return bildu
}

// SetDeletedAt sets the "deleted_at" field.
func (bildu *BillingInvoiceLineDiscountUpdate) SetDeletedAt(t time.Time) *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.SetDeletedAt(t)
	return bildu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bildu *BillingInvoiceLineDiscountUpdate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceLineDiscountUpdate {
	if t != nil {
		bildu.SetDeletedAt(*t)
	}
	return bildu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bildu *BillingInvoiceLineDiscountUpdate) ClearDeletedAt() *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.ClearDeletedAt()
	return bildu
}

// SetType sets the "type" field.
func (bildu *BillingInvoiceLineDiscountUpdate) SetType(bdt billing.LineDiscountType) *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.SetType(bdt)
	return bildu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bildu *BillingInvoiceLineDiscountUpdate) SetNillableType(bdt *billing.LineDiscountType) *BillingInvoiceLineDiscountUpdate {
	if bdt != nil {
		bildu.SetType(*bdt)
	}
	return bildu
}

// SetReason sets the "reason" field.
func (bildu *BillingInvoiceLineDiscountUpdate) SetReason(bdr billing.LineDiscountReason) *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.SetReason(bdr)
	return bildu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (bildu *BillingInvoiceLineDiscountUpdate) SetNillableReason(bdr *billing.LineDiscountReason) *BillingInvoiceLineDiscountUpdate {
	if bdr != nil {
		bildu.SetReason(*bdr)
	}
	return bildu
}

// SetLineID sets the "line_id" field.
func (bildu *BillingInvoiceLineDiscountUpdate) SetLineID(s string) *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.SetLineID(s)
	return bildu
}

// SetNillableLineID sets the "line_id" field if the given value is not nil.
func (bildu *BillingInvoiceLineDiscountUpdate) SetNillableLineID(s *string) *BillingInvoiceLineDiscountUpdate {
	if s != nil {
		bildu.SetLineID(*s)
	}
	return bildu
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (bildu *BillingInvoiceLineDiscountUpdate) SetChildUniqueReferenceID(s string) *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.SetChildUniqueReferenceID(s)
	return bildu
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (bildu *BillingInvoiceLineDiscountUpdate) SetNillableChildUniqueReferenceID(s *string) *BillingInvoiceLineDiscountUpdate {
	if s != nil {
		bildu.SetChildUniqueReferenceID(*s)
	}
	return bildu
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (bildu *BillingInvoiceLineDiscountUpdate) ClearChildUniqueReferenceID() *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.ClearChildUniqueReferenceID()
	return bildu
}

// SetDescription sets the "description" field.
func (bildu *BillingInvoiceLineDiscountUpdate) SetDescription(s string) *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.SetDescription(s)
	return bildu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bildu *BillingInvoiceLineDiscountUpdate) SetNillableDescription(s *string) *BillingInvoiceLineDiscountUpdate {
	if s != nil {
		bildu.SetDescription(*s)
	}
	return bildu
}

// ClearDescription clears the value of the "description" field.
func (bildu *BillingInvoiceLineDiscountUpdate) ClearDescription() *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.ClearDescription()
	return bildu
}

// SetAmount sets the "amount" field.
func (bildu *BillingInvoiceLineDiscountUpdate) SetAmount(a alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.SetAmount(a)
	return bildu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (bildu *BillingInvoiceLineDiscountUpdate) SetNillableAmount(a *alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpdate {
	if a != nil {
		bildu.SetAmount(*a)
	}
	return bildu
}

// ClearAmount clears the value of the "amount" field.
func (bildu *BillingInvoiceLineDiscountUpdate) ClearAmount() *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.ClearAmount()
	return bildu
}

// SetRoundingAmount sets the "rounding_amount" field.
func (bildu *BillingInvoiceLineDiscountUpdate) SetRoundingAmount(a alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.SetRoundingAmount(a)
	return bildu
}

// SetNillableRoundingAmount sets the "rounding_amount" field if the given value is not nil.
func (bildu *BillingInvoiceLineDiscountUpdate) SetNillableRoundingAmount(a *alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpdate {
	if a != nil {
		bildu.SetRoundingAmount(*a)
	}
	return bildu
}

// ClearRoundingAmount clears the value of the "rounding_amount" field.
func (bildu *BillingInvoiceLineDiscountUpdate) ClearRoundingAmount() *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.ClearRoundingAmount()
	return bildu
}

// SetQuantity sets the "quantity" field.
func (bildu *BillingInvoiceLineDiscountUpdate) SetQuantity(a alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.SetQuantity(a)
	return bildu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (bildu *BillingInvoiceLineDiscountUpdate) SetNillableQuantity(a *alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpdate {
	if a != nil {
		bildu.SetQuantity(*a)
	}
	return bildu
}

// ClearQuantity clears the value of the "quantity" field.
func (bildu *BillingInvoiceLineDiscountUpdate) ClearQuantity() *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.ClearQuantity()
	return bildu
}

// SetPreLinePeriodQuantity sets the "pre_line_period_quantity" field.
func (bildu *BillingInvoiceLineDiscountUpdate) SetPreLinePeriodQuantity(a alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.SetPreLinePeriodQuantity(a)
	return bildu
}

// SetNillablePreLinePeriodQuantity sets the "pre_line_period_quantity" field if the given value is not nil.
func (bildu *BillingInvoiceLineDiscountUpdate) SetNillablePreLinePeriodQuantity(a *alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpdate {
	if a != nil {
		bildu.SetPreLinePeriodQuantity(*a)
	}
	return bildu
}

// ClearPreLinePeriodQuantity clears the value of the "pre_line_period_quantity" field.
func (bildu *BillingInvoiceLineDiscountUpdate) ClearPreLinePeriodQuantity() *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.ClearPreLinePeriodQuantity()
	return bildu
}

// SetSourceDiscount sets the "source_discount" field.
func (bildu *BillingInvoiceLineDiscountUpdate) SetSourceDiscount(pr *productcatalog.Discount) *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.SetSourceDiscount(pr)
	return bildu
}

// ClearSourceDiscount clears the value of the "source_discount" field.
func (bildu *BillingInvoiceLineDiscountUpdate) ClearSourceDiscount() *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.ClearSourceDiscount()
	return bildu
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (bildu *BillingInvoiceLineDiscountUpdate) SetInvoicingAppExternalID(s string) *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.SetInvoicingAppExternalID(s)
	return bildu
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (bildu *BillingInvoiceLineDiscountUpdate) SetNillableInvoicingAppExternalID(s *string) *BillingInvoiceLineDiscountUpdate {
	if s != nil {
		bildu.SetInvoicingAppExternalID(*s)
	}
	return bildu
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (bildu *BillingInvoiceLineDiscountUpdate) ClearInvoicingAppExternalID() *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.ClearInvoicingAppExternalID()
	return bildu
}

// SetBillingInvoiceLineID sets the "billing_invoice_line" edge to the BillingInvoiceLine entity by ID.
func (bildu *BillingInvoiceLineDiscountUpdate) SetBillingInvoiceLineID(id string) *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.SetBillingInvoiceLineID(id)
	return bildu
}

// SetBillingInvoiceLine sets the "billing_invoice_line" edge to the BillingInvoiceLine entity.
func (bildu *BillingInvoiceLineDiscountUpdate) SetBillingInvoiceLine(b *BillingInvoiceLine) *BillingInvoiceLineDiscountUpdate {
	return bildu.SetBillingInvoiceLineID(b.ID)
}

// Mutation returns the BillingInvoiceLineDiscountMutation object of the builder.
func (bildu *BillingInvoiceLineDiscountUpdate) Mutation() *BillingInvoiceLineDiscountMutation {
	return bildu.mutation
}

// ClearBillingInvoiceLine clears the "billing_invoice_line" edge to the BillingInvoiceLine entity.
func (bildu *BillingInvoiceLineDiscountUpdate) ClearBillingInvoiceLine() *BillingInvoiceLineDiscountUpdate {
	bildu.mutation.ClearBillingInvoiceLine()
	return bildu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bildu *BillingInvoiceLineDiscountUpdate) Save(ctx context.Context) (int, error) {
	bildu.defaults()
	return withHooks(ctx, bildu.sqlSave, bildu.mutation, bildu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bildu *BillingInvoiceLineDiscountUpdate) SaveX(ctx context.Context) int {
	affected, err := bildu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bildu *BillingInvoiceLineDiscountUpdate) Exec(ctx context.Context) error {
	_, err := bildu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bildu *BillingInvoiceLineDiscountUpdate) ExecX(ctx context.Context) {
	if err := bildu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bildu *BillingInvoiceLineDiscountUpdate) defaults() {
	if _, ok := bildu.mutation.UpdatedAt(); !ok {
		v := billinginvoicelinediscount.UpdateDefaultUpdatedAt()
		bildu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bildu *BillingInvoiceLineDiscountUpdate) check() error {
	if v, ok := bildu.mutation.GetType(); ok {
		if err := billinginvoicelinediscount.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLineDiscount.type": %w`, err)}
		}
	}
	if v, ok := bildu.mutation.Reason(); ok {
		if err := billinginvoicelinediscount.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLineDiscount.reason": %w`, err)}
		}
	}
	if v, ok := bildu.mutation.SourceDiscount(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "source_discount", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLineDiscount.source_discount": %w`, err)}
		}
	}
	if bildu.mutation.BillingInvoiceLineCleared() && len(bildu.mutation.BillingInvoiceLineIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceLineDiscount.billing_invoice_line"`)
	}
	return nil
}

func (bildu *BillingInvoiceLineDiscountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bildu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoicelinediscount.Table, billinginvoicelinediscount.Columns, sqlgraph.NewFieldSpec(billinginvoicelinediscount.FieldID, field.TypeString))
	if ps := bildu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bildu.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bildu.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldDeletedAt, field.TypeTime, value)
	}
	if bildu.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bildu.mutation.GetType(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldType, field.TypeEnum, value)
	}
	if value, ok := bildu.mutation.Reason(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldReason, field.TypeEnum, value)
	}
	if value, ok := bildu.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldChildUniqueReferenceID, field.TypeString, value)
	}
	if bildu.mutation.ChildUniqueReferenceIDCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldChildUniqueReferenceID, field.TypeString)
	}
	if value, ok := bildu.mutation.Description(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldDescription, field.TypeString, value)
	}
	if bildu.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldDescription, field.TypeString)
	}
	if value, ok := bildu.mutation.Amount(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldAmount, field.TypeOther, value)
	}
	if bildu.mutation.AmountCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldAmount, field.TypeOther)
	}
	if value, ok := bildu.mutation.RoundingAmount(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldRoundingAmount, field.TypeOther, value)
	}
	if bildu.mutation.RoundingAmountCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldRoundingAmount, field.TypeOther)
	}
	if value, ok := bildu.mutation.Quantity(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldQuantity, field.TypeOther, value)
	}
	if bildu.mutation.QuantityCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldQuantity, field.TypeOther)
	}
	if value, ok := bildu.mutation.PreLinePeriodQuantity(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldPreLinePeriodQuantity, field.TypeOther, value)
	}
	if bildu.mutation.PreLinePeriodQuantityCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldPreLinePeriodQuantity, field.TypeOther)
	}
	if value, ok := bildu.mutation.SourceDiscount(); ok {
		vv, err := billinginvoicelinediscount.ValueScanner.SourceDiscount.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(billinginvoicelinediscount.FieldSourceDiscount, field.TypeString, vv)
	}
	if bildu.mutation.SourceDiscountCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldSourceDiscount, field.TypeString)
	}
	if value, ok := bildu.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldInvoicingAppExternalID, field.TypeString, value)
	}
	if bildu.mutation.InvoicingAppExternalIDCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldInvoicingAppExternalID, field.TypeString)
	}
	if bildu.mutation.BillingInvoiceLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicelinediscount.BillingInvoiceLineTable,
			Columns: []string{billinginvoicelinediscount.BillingInvoiceLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bildu.mutation.BillingInvoiceLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicelinediscount.BillingInvoiceLineTable,
			Columns: []string{billinginvoicelinediscount.BillingInvoiceLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bildu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicelinediscount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bildu.mutation.done = true
	return n, nil
}

// BillingInvoiceLineDiscountUpdateOne is the builder for updating a single BillingInvoiceLineDiscount entity.
type BillingInvoiceLineDiscountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceLineDiscountMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetUpdatedAt(t time.Time) *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.SetUpdatedAt(t)
	return bilduo
}

// SetDeletedAt sets the "deleted_at" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetDeletedAt(t time.Time) *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.SetDeletedAt(t)
	return bilduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingInvoiceLineDiscountUpdateOne {
	if t != nil {
		bilduo.SetDeletedAt(*t)
	}
	return bilduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) ClearDeletedAt() *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.ClearDeletedAt()
	return bilduo
}

// SetType sets the "type" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetType(bdt billing.LineDiscountType) *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.SetType(bdt)
	return bilduo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetNillableType(bdt *billing.LineDiscountType) *BillingInvoiceLineDiscountUpdateOne {
	if bdt != nil {
		bilduo.SetType(*bdt)
	}
	return bilduo
}

// SetReason sets the "reason" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetReason(bdr billing.LineDiscountReason) *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.SetReason(bdr)
	return bilduo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetNillableReason(bdr *billing.LineDiscountReason) *BillingInvoiceLineDiscountUpdateOne {
	if bdr != nil {
		bilduo.SetReason(*bdr)
	}
	return bilduo
}

// SetLineID sets the "line_id" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetLineID(s string) *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.SetLineID(s)
	return bilduo
}

// SetNillableLineID sets the "line_id" field if the given value is not nil.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetNillableLineID(s *string) *BillingInvoiceLineDiscountUpdateOne {
	if s != nil {
		bilduo.SetLineID(*s)
	}
	return bilduo
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetChildUniqueReferenceID(s string) *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.SetChildUniqueReferenceID(s)
	return bilduo
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetNillableChildUniqueReferenceID(s *string) *BillingInvoiceLineDiscountUpdateOne {
	if s != nil {
		bilduo.SetChildUniqueReferenceID(*s)
	}
	return bilduo
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) ClearChildUniqueReferenceID() *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.ClearChildUniqueReferenceID()
	return bilduo
}

// SetDescription sets the "description" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetDescription(s string) *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.SetDescription(s)
	return bilduo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetNillableDescription(s *string) *BillingInvoiceLineDiscountUpdateOne {
	if s != nil {
		bilduo.SetDescription(*s)
	}
	return bilduo
}

// ClearDescription clears the value of the "description" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) ClearDescription() *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.ClearDescription()
	return bilduo
}

// SetAmount sets the "amount" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetAmount(a alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.SetAmount(a)
	return bilduo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetNillableAmount(a *alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpdateOne {
	if a != nil {
		bilduo.SetAmount(*a)
	}
	return bilduo
}

// ClearAmount clears the value of the "amount" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) ClearAmount() *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.ClearAmount()
	return bilduo
}

// SetRoundingAmount sets the "rounding_amount" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetRoundingAmount(a alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.SetRoundingAmount(a)
	return bilduo
}

// SetNillableRoundingAmount sets the "rounding_amount" field if the given value is not nil.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetNillableRoundingAmount(a *alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpdateOne {
	if a != nil {
		bilduo.SetRoundingAmount(*a)
	}
	return bilduo
}

// ClearRoundingAmount clears the value of the "rounding_amount" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) ClearRoundingAmount() *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.ClearRoundingAmount()
	return bilduo
}

// SetQuantity sets the "quantity" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetQuantity(a alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.SetQuantity(a)
	return bilduo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetNillableQuantity(a *alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpdateOne {
	if a != nil {
		bilduo.SetQuantity(*a)
	}
	return bilduo
}

// ClearQuantity clears the value of the "quantity" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) ClearQuantity() *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.ClearQuantity()
	return bilduo
}

// SetPreLinePeriodQuantity sets the "pre_line_period_quantity" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetPreLinePeriodQuantity(a alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.SetPreLinePeriodQuantity(a)
	return bilduo
}

// SetNillablePreLinePeriodQuantity sets the "pre_line_period_quantity" field if the given value is not nil.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetNillablePreLinePeriodQuantity(a *alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpdateOne {
	if a != nil {
		bilduo.SetPreLinePeriodQuantity(*a)
	}
	return bilduo
}

// ClearPreLinePeriodQuantity clears the value of the "pre_line_period_quantity" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) ClearPreLinePeriodQuantity() *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.ClearPreLinePeriodQuantity()
	return bilduo
}

// SetSourceDiscount sets the "source_discount" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetSourceDiscount(pr *productcatalog.Discount) *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.SetSourceDiscount(pr)
	return bilduo
}

// ClearSourceDiscount clears the value of the "source_discount" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) ClearSourceDiscount() *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.ClearSourceDiscount()
	return bilduo
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetInvoicingAppExternalID(s string) *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.SetInvoicingAppExternalID(s)
	return bilduo
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetNillableInvoicingAppExternalID(s *string) *BillingInvoiceLineDiscountUpdateOne {
	if s != nil {
		bilduo.SetInvoicingAppExternalID(*s)
	}
	return bilduo
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) ClearInvoicingAppExternalID() *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.ClearInvoicingAppExternalID()
	return bilduo
}

// SetBillingInvoiceLineID sets the "billing_invoice_line" edge to the BillingInvoiceLine entity by ID.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetBillingInvoiceLineID(id string) *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.SetBillingInvoiceLineID(id)
	return bilduo
}

// SetBillingInvoiceLine sets the "billing_invoice_line" edge to the BillingInvoiceLine entity.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SetBillingInvoiceLine(b *BillingInvoiceLine) *BillingInvoiceLineDiscountUpdateOne {
	return bilduo.SetBillingInvoiceLineID(b.ID)
}

// Mutation returns the BillingInvoiceLineDiscountMutation object of the builder.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) Mutation() *BillingInvoiceLineDiscountMutation {
	return bilduo.mutation
}

// ClearBillingInvoiceLine clears the "billing_invoice_line" edge to the BillingInvoiceLine entity.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) ClearBillingInvoiceLine() *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.ClearBillingInvoiceLine()
	return bilduo
}

// Where appends a list predicates to the BillingInvoiceLineDiscountUpdate builder.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) Where(ps ...predicate.BillingInvoiceLineDiscount) *BillingInvoiceLineDiscountUpdateOne {
	bilduo.mutation.Where(ps...)
	return bilduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) Select(field string, fields ...string) *BillingInvoiceLineDiscountUpdateOne {
	bilduo.fields = append([]string{field}, fields...)
	return bilduo
}

// Save executes the query and returns the updated BillingInvoiceLineDiscount entity.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) Save(ctx context.Context) (*BillingInvoiceLineDiscount, error) {
	bilduo.defaults()
	return withHooks(ctx, bilduo.sqlSave, bilduo.mutation, bilduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) SaveX(ctx context.Context) *BillingInvoiceLineDiscount {
	node, err := bilduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) Exec(ctx context.Context) error {
	_, err := bilduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) ExecX(ctx context.Context) {
	if err := bilduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) defaults() {
	if _, ok := bilduo.mutation.UpdatedAt(); !ok {
		v := billinginvoicelinediscount.UpdateDefaultUpdatedAt()
		bilduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bilduo *BillingInvoiceLineDiscountUpdateOne) check() error {
	if v, ok := bilduo.mutation.GetType(); ok {
		if err := billinginvoicelinediscount.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLineDiscount.type": %w`, err)}
		}
	}
	if v, ok := bilduo.mutation.Reason(); ok {
		if err := billinginvoicelinediscount.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLineDiscount.reason": %w`, err)}
		}
	}
	if v, ok := bilduo.mutation.SourceDiscount(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "source_discount", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLineDiscount.source_discount": %w`, err)}
		}
	}
	if bilduo.mutation.BillingInvoiceLineCleared() && len(bilduo.mutation.BillingInvoiceLineIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceLineDiscount.billing_invoice_line"`)
	}
	return nil
}

func (bilduo *BillingInvoiceLineDiscountUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoiceLineDiscount, err error) {
	if err := bilduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoicelinediscount.Table, billinginvoicelinediscount.Columns, sqlgraph.NewFieldSpec(billinginvoicelinediscount.FieldID, field.TypeString))
	id, ok := bilduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoiceLineDiscount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bilduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoicelinediscount.FieldID)
		for _, f := range fields {
			if !billinginvoicelinediscount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoicelinediscount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bilduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bilduo.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bilduo.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldDeletedAt, field.TypeTime, value)
	}
	if bilduo.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bilduo.mutation.GetType(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldType, field.TypeEnum, value)
	}
	if value, ok := bilduo.mutation.Reason(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldReason, field.TypeEnum, value)
	}
	if value, ok := bilduo.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldChildUniqueReferenceID, field.TypeString, value)
	}
	if bilduo.mutation.ChildUniqueReferenceIDCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldChildUniqueReferenceID, field.TypeString)
	}
	if value, ok := bilduo.mutation.Description(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldDescription, field.TypeString, value)
	}
	if bilduo.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldDescription, field.TypeString)
	}
	if value, ok := bilduo.mutation.Amount(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldAmount, field.TypeOther, value)
	}
	if bilduo.mutation.AmountCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldAmount, field.TypeOther)
	}
	if value, ok := bilduo.mutation.RoundingAmount(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldRoundingAmount, field.TypeOther, value)
	}
	if bilduo.mutation.RoundingAmountCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldRoundingAmount, field.TypeOther)
	}
	if value, ok := bilduo.mutation.Quantity(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldQuantity, field.TypeOther, value)
	}
	if bilduo.mutation.QuantityCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldQuantity, field.TypeOther)
	}
	if value, ok := bilduo.mutation.PreLinePeriodQuantity(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldPreLinePeriodQuantity, field.TypeOther, value)
	}
	if bilduo.mutation.PreLinePeriodQuantityCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldPreLinePeriodQuantity, field.TypeOther)
	}
	if value, ok := bilduo.mutation.SourceDiscount(); ok {
		vv, err := billinginvoicelinediscount.ValueScanner.SourceDiscount.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(billinginvoicelinediscount.FieldSourceDiscount, field.TypeString, vv)
	}
	if bilduo.mutation.SourceDiscountCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldSourceDiscount, field.TypeString)
	}
	if value, ok := bilduo.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldInvoicingAppExternalID, field.TypeString, value)
	}
	if bilduo.mutation.InvoicingAppExternalIDCleared() {
		_spec.ClearField(billinginvoicelinediscount.FieldInvoicingAppExternalID, field.TypeString)
	}
	if bilduo.mutation.BillingInvoiceLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicelinediscount.BillingInvoiceLineTable,
			Columns: []string{billinginvoicelinediscount.BillingInvoiceLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bilduo.mutation.BillingInvoiceLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicelinediscount.BillingInvoiceLineTable,
			Columns: []string{billinginvoicelinediscount.BillingInvoiceLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingInvoiceLineDiscount{config: bilduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bilduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicelinediscount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bilduo.mutation.done = true
	return _node, nil
}
