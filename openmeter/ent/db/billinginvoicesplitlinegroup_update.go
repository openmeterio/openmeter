// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicesplitlinegroup"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
)

// BillingInvoiceSplitLineGroupUpdate is the builder for updating BillingInvoiceSplitLineGroup entities.
type BillingInvoiceSplitLineGroupUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceSplitLineGroupMutation
}

// Where appends a list predicates to the BillingInvoiceSplitLineGroupUpdate builder.
func (_u *BillingInvoiceSplitLineGroupUpdate) Where(ps ...predicate.BillingInvoiceSplitLineGroup) *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetMetadata(v map[string]string) *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *BillingInvoiceSplitLineGroupUpdate) ClearMetadata() *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetUpdatedAt(v time.Time) *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetDeletedAt(v time.Time) *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetNillableDeletedAt(v *time.Time) *BillingInvoiceSplitLineGroupUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *BillingInvoiceSplitLineGroupUpdate) ClearDeletedAt() *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetName(v string) *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetNillableName(v *string) *BillingInvoiceSplitLineGroupUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetDescription(v string) *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetNillableDescription(v *string) *BillingInvoiceSplitLineGroupUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BillingInvoiceSplitLineGroupUpdate) ClearDescription() *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetTaxConfig sets the "tax_config" field.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.SetTaxConfig(v)
	return _u
}

// SetNillableTaxConfig sets the "tax_config" field if the given value is not nil.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetNillableTaxConfig(v *productcatalog.TaxConfig) *BillingInvoiceSplitLineGroupUpdate {
	if v != nil {
		_u.SetTaxConfig(*v)
	}
	return _u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (_u *BillingInvoiceSplitLineGroupUpdate) ClearTaxConfig() *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.ClearTaxConfig()
	return _u
}

// SetServicePeriodStart sets the "service_period_start" field.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetServicePeriodStart(v time.Time) *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.SetServicePeriodStart(v)
	return _u
}

// SetNillableServicePeriodStart sets the "service_period_start" field if the given value is not nil.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetNillableServicePeriodStart(v *time.Time) *BillingInvoiceSplitLineGroupUpdate {
	if v != nil {
		_u.SetServicePeriodStart(*v)
	}
	return _u
}

// SetServicePeriodEnd sets the "service_period_end" field.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetServicePeriodEnd(v time.Time) *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.SetServicePeriodEnd(v)
	return _u
}

// SetNillableServicePeriodEnd sets the "service_period_end" field if the given value is not nil.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetNillableServicePeriodEnd(v *time.Time) *BillingInvoiceSplitLineGroupUpdate {
	if v != nil {
		_u.SetServicePeriodEnd(*v)
	}
	return _u
}

// SetUniqueReferenceID sets the "unique_reference_id" field.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetUniqueReferenceID(v string) *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.SetUniqueReferenceID(v)
	return _u
}

// SetNillableUniqueReferenceID sets the "unique_reference_id" field if the given value is not nil.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetNillableUniqueReferenceID(v *string) *BillingInvoiceSplitLineGroupUpdate {
	if v != nil {
		_u.SetUniqueReferenceID(*v)
	}
	return _u
}

// ClearUniqueReferenceID clears the value of the "unique_reference_id" field.
func (_u *BillingInvoiceSplitLineGroupUpdate) ClearUniqueReferenceID() *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.ClearUniqueReferenceID()
	return _u
}

// SetRatecardDiscounts sets the "ratecard_discounts" field.
func (_u *BillingInvoiceSplitLineGroupUpdate) SetRatecardDiscounts(v *billing.Discounts) *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.SetRatecardDiscounts(v)
	return _u
}

// ClearRatecardDiscounts clears the value of the "ratecard_discounts" field.
func (_u *BillingInvoiceSplitLineGroupUpdate) ClearRatecardDiscounts() *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.ClearRatecardDiscounts()
	return _u
}

// AddBillingInvoiceLineIDs adds the "billing_invoice_lines" edge to the BillingInvoiceLine entity by IDs.
func (_u *BillingInvoiceSplitLineGroupUpdate) AddBillingInvoiceLineIDs(ids ...string) *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.AddBillingInvoiceLineIDs(ids...)
	return _u
}

// AddBillingInvoiceLines adds the "billing_invoice_lines" edges to the BillingInvoiceLine entity.
func (_u *BillingInvoiceSplitLineGroupUpdate) AddBillingInvoiceLines(v ...*BillingInvoiceLine) *BillingInvoiceSplitLineGroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBillingInvoiceLineIDs(ids...)
}

// Mutation returns the BillingInvoiceSplitLineGroupMutation object of the builder.
func (_u *BillingInvoiceSplitLineGroupUpdate) Mutation() *BillingInvoiceSplitLineGroupMutation {
	return _u.mutation
}

// ClearBillingInvoiceLines clears all "billing_invoice_lines" edges to the BillingInvoiceLine entity.
func (_u *BillingInvoiceSplitLineGroupUpdate) ClearBillingInvoiceLines() *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.ClearBillingInvoiceLines()
	return _u
}

// RemoveBillingInvoiceLineIDs removes the "billing_invoice_lines" edge to BillingInvoiceLine entities by IDs.
func (_u *BillingInvoiceSplitLineGroupUpdate) RemoveBillingInvoiceLineIDs(ids ...string) *BillingInvoiceSplitLineGroupUpdate {
	_u.mutation.RemoveBillingInvoiceLineIDs(ids...)
	return _u
}

// RemoveBillingInvoiceLines removes "billing_invoice_lines" edges to BillingInvoiceLine entities.
func (_u *BillingInvoiceSplitLineGroupUpdate) RemoveBillingInvoiceLines(v ...*BillingInvoiceLine) *BillingInvoiceSplitLineGroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBillingInvoiceLineIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BillingInvoiceSplitLineGroupUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BillingInvoiceSplitLineGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BillingInvoiceSplitLineGroupUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BillingInvoiceSplitLineGroupUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BillingInvoiceSplitLineGroupUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := billinginvoicesplitlinegroup.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *BillingInvoiceSplitLineGroupUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(billinginvoicesplitlinegroup.Table, billinginvoicesplitlinegroup.Columns, sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoicesplitlinegroup.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoicesplitlinegroup.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoicesplitlinegroup.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.TaxConfig(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldTaxConfig, field.TypeJSON, value)
	}
	if _u.mutation.TaxConfigCleared() {
		_spec.ClearField(billinginvoicesplitlinegroup.FieldTaxConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.ServicePeriodStart(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldServicePeriodStart, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ServicePeriodEnd(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldServicePeriodEnd, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UniqueReferenceID(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldUniqueReferenceID, field.TypeString, value)
	}
	if _u.mutation.UniqueReferenceIDCleared() {
		_spec.ClearField(billinginvoicesplitlinegroup.FieldUniqueReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.RatecardDiscounts(); ok {
		vv, err := billinginvoicesplitlinegroup.ValueScanner.RatecardDiscounts.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(billinginvoicesplitlinegroup.FieldRatecardDiscounts, field.TypeString, vv)
	}
	if _u.mutation.RatecardDiscountsCleared() {
		_spec.ClearField(billinginvoicesplitlinegroup.FieldRatecardDiscounts, field.TypeString)
	}
	if _u.mutation.FeatureKeyCleared() {
		_spec.ClearField(billinginvoicesplitlinegroup.FieldFeatureKey, field.TypeString)
	}
	if _u.mutation.BillingInvoiceLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicesplitlinegroup.BillingInvoiceLinesTable,
			Columns: []string{billinginvoicesplitlinegroup.BillingInvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBillingInvoiceLinesIDs(); len(nodes) > 0 && !_u.mutation.BillingInvoiceLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicesplitlinegroup.BillingInvoiceLinesTable,
			Columns: []string{billinginvoicesplitlinegroup.BillingInvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingInvoiceLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicesplitlinegroup.BillingInvoiceLinesTable,
			Columns: []string{billinginvoicesplitlinegroup.BillingInvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicesplitlinegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BillingInvoiceSplitLineGroupUpdateOne is the builder for updating a single BillingInvoiceSplitLineGroup entity.
type BillingInvoiceSplitLineGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceSplitLineGroupMutation
}

// SetMetadata sets the "metadata" field.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetMetadata(v map[string]string) *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) ClearMetadata() *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetUpdatedAt(v time.Time) *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetDeletedAt(v time.Time) *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetNillableDeletedAt(v *time.Time) *BillingInvoiceSplitLineGroupUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) ClearDeletedAt() *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetName(v string) *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetNillableName(v *string) *BillingInvoiceSplitLineGroupUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetDescription(v string) *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetNillableDescription(v *string) *BillingInvoiceSplitLineGroupUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) ClearDescription() *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetTaxConfig sets the "tax_config" field.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.SetTaxConfig(v)
	return _u
}

// SetNillableTaxConfig sets the "tax_config" field if the given value is not nil.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetNillableTaxConfig(v *productcatalog.TaxConfig) *BillingInvoiceSplitLineGroupUpdateOne {
	if v != nil {
		_u.SetTaxConfig(*v)
	}
	return _u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) ClearTaxConfig() *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.ClearTaxConfig()
	return _u
}

// SetServicePeriodStart sets the "service_period_start" field.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetServicePeriodStart(v time.Time) *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.SetServicePeriodStart(v)
	return _u
}

// SetNillableServicePeriodStart sets the "service_period_start" field if the given value is not nil.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetNillableServicePeriodStart(v *time.Time) *BillingInvoiceSplitLineGroupUpdateOne {
	if v != nil {
		_u.SetServicePeriodStart(*v)
	}
	return _u
}

// SetServicePeriodEnd sets the "service_period_end" field.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetServicePeriodEnd(v time.Time) *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.SetServicePeriodEnd(v)
	return _u
}

// SetNillableServicePeriodEnd sets the "service_period_end" field if the given value is not nil.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetNillableServicePeriodEnd(v *time.Time) *BillingInvoiceSplitLineGroupUpdateOne {
	if v != nil {
		_u.SetServicePeriodEnd(*v)
	}
	return _u
}

// SetUniqueReferenceID sets the "unique_reference_id" field.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetUniqueReferenceID(v string) *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.SetUniqueReferenceID(v)
	return _u
}

// SetNillableUniqueReferenceID sets the "unique_reference_id" field if the given value is not nil.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetNillableUniqueReferenceID(v *string) *BillingInvoiceSplitLineGroupUpdateOne {
	if v != nil {
		_u.SetUniqueReferenceID(*v)
	}
	return _u
}

// ClearUniqueReferenceID clears the value of the "unique_reference_id" field.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) ClearUniqueReferenceID() *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.ClearUniqueReferenceID()
	return _u
}

// SetRatecardDiscounts sets the "ratecard_discounts" field.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SetRatecardDiscounts(v *billing.Discounts) *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.SetRatecardDiscounts(v)
	return _u
}

// ClearRatecardDiscounts clears the value of the "ratecard_discounts" field.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) ClearRatecardDiscounts() *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.ClearRatecardDiscounts()
	return _u
}

// AddBillingInvoiceLineIDs adds the "billing_invoice_lines" edge to the BillingInvoiceLine entity by IDs.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) AddBillingInvoiceLineIDs(ids ...string) *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.AddBillingInvoiceLineIDs(ids...)
	return _u
}

// AddBillingInvoiceLines adds the "billing_invoice_lines" edges to the BillingInvoiceLine entity.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) AddBillingInvoiceLines(v ...*BillingInvoiceLine) *BillingInvoiceSplitLineGroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBillingInvoiceLineIDs(ids...)
}

// Mutation returns the BillingInvoiceSplitLineGroupMutation object of the builder.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) Mutation() *BillingInvoiceSplitLineGroupMutation {
	return _u.mutation
}

// ClearBillingInvoiceLines clears all "billing_invoice_lines" edges to the BillingInvoiceLine entity.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) ClearBillingInvoiceLines() *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.ClearBillingInvoiceLines()
	return _u
}

// RemoveBillingInvoiceLineIDs removes the "billing_invoice_lines" edge to BillingInvoiceLine entities by IDs.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) RemoveBillingInvoiceLineIDs(ids ...string) *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.RemoveBillingInvoiceLineIDs(ids...)
	return _u
}

// RemoveBillingInvoiceLines removes "billing_invoice_lines" edges to BillingInvoiceLine entities.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) RemoveBillingInvoiceLines(v ...*BillingInvoiceLine) *BillingInvoiceSplitLineGroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBillingInvoiceLineIDs(ids...)
}

// Where appends a list predicates to the BillingInvoiceSplitLineGroupUpdate builder.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) Where(ps ...predicate.BillingInvoiceSplitLineGroup) *BillingInvoiceSplitLineGroupUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) Select(field string, fields ...string) *BillingInvoiceSplitLineGroupUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BillingInvoiceSplitLineGroup entity.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) Save(ctx context.Context) (*BillingInvoiceSplitLineGroup, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) SaveX(ctx context.Context) *BillingInvoiceSplitLineGroup {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BillingInvoiceSplitLineGroupUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := billinginvoicesplitlinegroup.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *BillingInvoiceSplitLineGroupUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoiceSplitLineGroup, err error) {
	_spec := sqlgraph.NewUpdateSpec(billinginvoicesplitlinegroup.Table, billinginvoicesplitlinegroup.Columns, sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoiceSplitLineGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoicesplitlinegroup.FieldID)
		for _, f := range fields {
			if !billinginvoicesplitlinegroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoicesplitlinegroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoicesplitlinegroup.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoicesplitlinegroup.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoicesplitlinegroup.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.TaxConfig(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldTaxConfig, field.TypeJSON, value)
	}
	if _u.mutation.TaxConfigCleared() {
		_spec.ClearField(billinginvoicesplitlinegroup.FieldTaxConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.ServicePeriodStart(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldServicePeriodStart, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ServicePeriodEnd(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldServicePeriodEnd, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UniqueReferenceID(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldUniqueReferenceID, field.TypeString, value)
	}
	if _u.mutation.UniqueReferenceIDCleared() {
		_spec.ClearField(billinginvoicesplitlinegroup.FieldUniqueReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.RatecardDiscounts(); ok {
		vv, err := billinginvoicesplitlinegroup.ValueScanner.RatecardDiscounts.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(billinginvoicesplitlinegroup.FieldRatecardDiscounts, field.TypeString, vv)
	}
	if _u.mutation.RatecardDiscountsCleared() {
		_spec.ClearField(billinginvoicesplitlinegroup.FieldRatecardDiscounts, field.TypeString)
	}
	if _u.mutation.FeatureKeyCleared() {
		_spec.ClearField(billinginvoicesplitlinegroup.FieldFeatureKey, field.TypeString)
	}
	if _u.mutation.BillingInvoiceLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicesplitlinegroup.BillingInvoiceLinesTable,
			Columns: []string{billinginvoicesplitlinegroup.BillingInvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBillingInvoiceLinesIDs(); len(nodes) > 0 && !_u.mutation.BillingInvoiceLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicesplitlinegroup.BillingInvoiceLinesTable,
			Columns: []string{billinginvoicesplitlinegroup.BillingInvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingInvoiceLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicesplitlinegroup.BillingInvoiceLinesTable,
			Columns: []string{billinginvoicesplitlinegroup.BillingInvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingInvoiceSplitLineGroup{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicesplitlinegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
