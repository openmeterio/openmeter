// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/plan"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planphase"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planratecard"
	"github.com/openmeterio/openmeter/pkg/datetime"
)

// PlanPhaseCreate is the builder for creating a PlanPhase entity.
type PlanPhaseCreate struct {
	config
	mutation *PlanPhaseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (_c *PlanPhaseCreate) SetNamespace(v string) *PlanPhaseCreate {
	_c.mutation.SetNamespace(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *PlanPhaseCreate) SetMetadata(v map[string]string) *PlanPhaseCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *PlanPhaseCreate) SetCreatedAt(v time.Time) *PlanPhaseCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *PlanPhaseCreate) SetNillableCreatedAt(v *time.Time) *PlanPhaseCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *PlanPhaseCreate) SetUpdatedAt(v time.Time) *PlanPhaseCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *PlanPhaseCreate) SetNillableUpdatedAt(v *time.Time) *PlanPhaseCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *PlanPhaseCreate) SetDeletedAt(v time.Time) *PlanPhaseCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *PlanPhaseCreate) SetNillableDeletedAt(v *time.Time) *PlanPhaseCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *PlanPhaseCreate) SetName(v string) *PlanPhaseCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *PlanPhaseCreate) SetDescription(v string) *PlanPhaseCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *PlanPhaseCreate) SetNillableDescription(v *string) *PlanPhaseCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetKey sets the "key" field.
func (_c *PlanPhaseCreate) SetKey(v string) *PlanPhaseCreate {
	_c.mutation.SetKey(v)
	return _c
}

// SetPlanID sets the "plan_id" field.
func (_c *PlanPhaseCreate) SetPlanID(v string) *PlanPhaseCreate {
	_c.mutation.SetPlanID(v)
	return _c
}

// SetIndex sets the "index" field.
func (_c *PlanPhaseCreate) SetIndex(v uint8) *PlanPhaseCreate {
	_c.mutation.SetIndex(v)
	return _c
}

// SetDuration sets the "duration" field.
func (_c *PlanPhaseCreate) SetDuration(v datetime.ISODurationString) *PlanPhaseCreate {
	_c.mutation.SetDuration(v)
	return _c
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_c *PlanPhaseCreate) SetNillableDuration(v *datetime.ISODurationString) *PlanPhaseCreate {
	if v != nil {
		_c.SetDuration(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *PlanPhaseCreate) SetID(v string) *PlanPhaseCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *PlanPhaseCreate) SetNillableID(v *string) *PlanPhaseCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetPlan sets the "plan" edge to the Plan entity.
func (_c *PlanPhaseCreate) SetPlan(v *Plan) *PlanPhaseCreate {
	return _c.SetPlanID(v.ID)
}

// AddRatecardIDs adds the "ratecards" edge to the PlanRateCard entity by IDs.
func (_c *PlanPhaseCreate) AddRatecardIDs(ids ...string) *PlanPhaseCreate {
	_c.mutation.AddRatecardIDs(ids...)
	return _c
}

// AddRatecards adds the "ratecards" edges to the PlanRateCard entity.
func (_c *PlanPhaseCreate) AddRatecards(v ...*PlanRateCard) *PlanPhaseCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRatecardIDs(ids...)
}

// Mutation returns the PlanPhaseMutation object of the builder.
func (_c *PlanPhaseCreate) Mutation() *PlanPhaseMutation {
	return _c.mutation
}

// Save creates the PlanPhase in the database.
func (_c *PlanPhaseCreate) Save(ctx context.Context) (*PlanPhase, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PlanPhaseCreate) SaveX(ctx context.Context) *PlanPhase {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PlanPhaseCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PlanPhaseCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PlanPhaseCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := planphase.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := planphase.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := planphase.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PlanPhaseCreate) check() error {
	if _, ok := _c.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "PlanPhase.namespace"`)}
	}
	if v, ok := _c.mutation.Namespace(); ok {
		if err := planphase.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "PlanPhase.namespace": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "PlanPhase.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "PlanPhase.updated_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "PlanPhase.name"`)}
	}
	if _, ok := _c.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`db: missing required field "PlanPhase.key"`)}
	}
	if v, ok := _c.mutation.Key(); ok {
		if err := planphase.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`db: validator failed for field "PlanPhase.key": %w`, err)}
		}
	}
	if _, ok := _c.mutation.PlanID(); !ok {
		return &ValidationError{Name: "plan_id", err: errors.New(`db: missing required field "PlanPhase.plan_id"`)}
	}
	if v, ok := _c.mutation.PlanID(); ok {
		if err := planphase.PlanIDValidator(v); err != nil {
			return &ValidationError{Name: "plan_id", err: fmt.Errorf(`db: validator failed for field "PlanPhase.plan_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Index(); !ok {
		return &ValidationError{Name: "index", err: errors.New(`db: missing required field "PlanPhase.index"`)}
	}
	if len(_c.mutation.PlanIDs()) == 0 {
		return &ValidationError{Name: "plan", err: errors.New(`db: missing required edge "PlanPhase.plan"`)}
	}
	return nil
}

func (_c *PlanPhaseCreate) sqlSave(ctx context.Context) (*PlanPhase, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PlanPhase.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PlanPhaseCreate) createSpec() (*PlanPhase, *sqlgraph.CreateSpec) {
	var (
		_node = &PlanPhase{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(planphase.Table, sqlgraph.NewFieldSpec(planphase.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Namespace(); ok {
		_spec.SetField(planphase.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(planphase.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(planphase.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(planphase.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(planphase.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(planphase.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(planphase.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.Key(); ok {
		_spec.SetField(planphase.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := _c.mutation.Index(); ok {
		_spec.SetField(planphase.FieldIndex, field.TypeUint8, value)
		_node.Index = value
	}
	if value, ok := _c.mutation.Duration(); ok {
		_spec.SetField(planphase.FieldDuration, field.TypeString, value)
		_node.Duration = &value
	}
	if nodes := _c.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planphase.PlanTable,
			Columns: []string{planphase.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlanID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RatecardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   planphase.RatecardsTable,
			Columns: []string{planphase.RatecardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlanPhase.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanPhaseUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *PlanPhaseCreate) OnConflict(opts ...sql.ConflictOption) *PlanPhaseUpsertOne {
	_c.conflict = opts
	return &PlanPhaseUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlanPhase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PlanPhaseCreate) OnConflictColumns(columns ...string) *PlanPhaseUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PlanPhaseUpsertOne{
		create: _c,
	}
}

type (
	// PlanPhaseUpsertOne is the builder for "upsert"-ing
	//  one PlanPhase node.
	PlanPhaseUpsertOne struct {
		create *PlanPhaseCreate
	}

	// PlanPhaseUpsert is the "OnConflict" setter.
	PlanPhaseUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *PlanPhaseUpsert) SetMetadata(v map[string]string) *PlanPhaseUpsert {
	u.Set(planphase.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *PlanPhaseUpsert) UpdateMetadata() *PlanPhaseUpsert {
	u.SetExcluded(planphase.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *PlanPhaseUpsert) ClearMetadata() *PlanPhaseUpsert {
	u.SetNull(planphase.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanPhaseUpsert) SetUpdatedAt(v time.Time) *PlanPhaseUpsert {
	u.Set(planphase.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanPhaseUpsert) UpdateUpdatedAt() *PlanPhaseUpsert {
	u.SetExcluded(planphase.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanPhaseUpsert) SetDeletedAt(v time.Time) *PlanPhaseUpsert {
	u.Set(planphase.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanPhaseUpsert) UpdateDeletedAt() *PlanPhaseUpsert {
	u.SetExcluded(planphase.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PlanPhaseUpsert) ClearDeletedAt() *PlanPhaseUpsert {
	u.SetNull(planphase.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *PlanPhaseUpsert) SetName(v string) *PlanPhaseUpsert {
	u.Set(planphase.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlanPhaseUpsert) UpdateName() *PlanPhaseUpsert {
	u.SetExcluded(planphase.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *PlanPhaseUpsert) SetDescription(v string) *PlanPhaseUpsert {
	u.Set(planphase.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanPhaseUpsert) UpdateDescription() *PlanPhaseUpsert {
	u.SetExcluded(planphase.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *PlanPhaseUpsert) ClearDescription() *PlanPhaseUpsert {
	u.SetNull(planphase.FieldDescription)
	return u
}

// SetPlanID sets the "plan_id" field.
func (u *PlanPhaseUpsert) SetPlanID(v string) *PlanPhaseUpsert {
	u.Set(planphase.FieldPlanID, v)
	return u
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *PlanPhaseUpsert) UpdatePlanID() *PlanPhaseUpsert {
	u.SetExcluded(planphase.FieldPlanID)
	return u
}

// SetIndex sets the "index" field.
func (u *PlanPhaseUpsert) SetIndex(v uint8) *PlanPhaseUpsert {
	u.Set(planphase.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *PlanPhaseUpsert) UpdateIndex() *PlanPhaseUpsert {
	u.SetExcluded(planphase.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *PlanPhaseUpsert) AddIndex(v uint8) *PlanPhaseUpsert {
	u.Add(planphase.FieldIndex, v)
	return u
}

// SetDuration sets the "duration" field.
func (u *PlanPhaseUpsert) SetDuration(v datetime.ISODurationString) *PlanPhaseUpsert {
	u.Set(planphase.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *PlanPhaseUpsert) UpdateDuration() *PlanPhaseUpsert {
	u.SetExcluded(planphase.FieldDuration)
	return u
}

// ClearDuration clears the value of the "duration" field.
func (u *PlanPhaseUpsert) ClearDuration() *PlanPhaseUpsert {
	u.SetNull(planphase.FieldDuration)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PlanPhase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(planphase.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlanPhaseUpsertOne) UpdateNewValues() *PlanPhaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(planphase.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(planphase.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(planphase.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Key(); exists {
			s.SetIgnore(planphase.FieldKey)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PlanPhase.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PlanPhaseUpsertOne) Ignore() *PlanPhaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanPhaseUpsertOne) DoNothing() *PlanPhaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanPhaseCreate.OnConflict
// documentation for more info.
func (u *PlanPhaseUpsertOne) Update(set func(*PlanPhaseUpsert)) *PlanPhaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanPhaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *PlanPhaseUpsertOne) SetMetadata(v map[string]string) *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *PlanPhaseUpsertOne) UpdateMetadata() *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *PlanPhaseUpsertOne) ClearMetadata() *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanPhaseUpsertOne) SetUpdatedAt(v time.Time) *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanPhaseUpsertOne) UpdateUpdatedAt() *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanPhaseUpsertOne) SetDeletedAt(v time.Time) *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanPhaseUpsertOne) UpdateDeletedAt() *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PlanPhaseUpsertOne) ClearDeletedAt() *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *PlanPhaseUpsertOne) SetName(v string) *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlanPhaseUpsertOne) UpdateName() *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *PlanPhaseUpsertOne) SetDescription(v string) *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanPhaseUpsertOne) UpdateDescription() *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PlanPhaseUpsertOne) ClearDescription() *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.ClearDescription()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *PlanPhaseUpsertOne) SetPlanID(v string) *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *PlanPhaseUpsertOne) UpdatePlanID() *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.UpdatePlanID()
	})
}

// SetIndex sets the "index" field.
func (u *PlanPhaseUpsertOne) SetIndex(v uint8) *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *PlanPhaseUpsertOne) AddIndex(v uint8) *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *PlanPhaseUpsertOne) UpdateIndex() *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.UpdateIndex()
	})
}

// SetDuration sets the "duration" field.
func (u *PlanPhaseUpsertOne) SetDuration(v datetime.ISODurationString) *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.SetDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *PlanPhaseUpsertOne) UpdateDuration() *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *PlanPhaseUpsertOne) ClearDuration() *PlanPhaseUpsertOne {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.ClearDuration()
	})
}

// Exec executes the query.
func (u *PlanPhaseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for PlanPhaseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanPhaseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlanPhaseUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: PlanPhaseUpsertOne.ID is not supported by MySQL driver. Use PlanPhaseUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlanPhaseUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlanPhaseCreateBulk is the builder for creating many PlanPhase entities in bulk.
type PlanPhaseCreateBulk struct {
	config
	err      error
	builders []*PlanPhaseCreate
	conflict []sql.ConflictOption
}

// Save creates the PlanPhase entities in the database.
func (_c *PlanPhaseCreateBulk) Save(ctx context.Context) ([]*PlanPhase, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*PlanPhase, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanPhaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PlanPhaseCreateBulk) SaveX(ctx context.Context) []*PlanPhase {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PlanPhaseCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PlanPhaseCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlanPhase.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanPhaseUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *PlanPhaseCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlanPhaseUpsertBulk {
	_c.conflict = opts
	return &PlanPhaseUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlanPhase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PlanPhaseCreateBulk) OnConflictColumns(columns ...string) *PlanPhaseUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PlanPhaseUpsertBulk{
		create: _c,
	}
}

// PlanPhaseUpsertBulk is the builder for "upsert"-ing
// a bulk of PlanPhase nodes.
type PlanPhaseUpsertBulk struct {
	create *PlanPhaseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PlanPhase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(planphase.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlanPhaseUpsertBulk) UpdateNewValues() *PlanPhaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(planphase.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(planphase.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(planphase.FieldCreatedAt)
			}
			if _, exists := b.mutation.Key(); exists {
				s.SetIgnore(planphase.FieldKey)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PlanPhase.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PlanPhaseUpsertBulk) Ignore() *PlanPhaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanPhaseUpsertBulk) DoNothing() *PlanPhaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanPhaseCreateBulk.OnConflict
// documentation for more info.
func (u *PlanPhaseUpsertBulk) Update(set func(*PlanPhaseUpsert)) *PlanPhaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanPhaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *PlanPhaseUpsertBulk) SetMetadata(v map[string]string) *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *PlanPhaseUpsertBulk) UpdateMetadata() *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *PlanPhaseUpsertBulk) ClearMetadata() *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanPhaseUpsertBulk) SetUpdatedAt(v time.Time) *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanPhaseUpsertBulk) UpdateUpdatedAt() *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanPhaseUpsertBulk) SetDeletedAt(v time.Time) *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanPhaseUpsertBulk) UpdateDeletedAt() *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PlanPhaseUpsertBulk) ClearDeletedAt() *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *PlanPhaseUpsertBulk) SetName(v string) *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlanPhaseUpsertBulk) UpdateName() *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *PlanPhaseUpsertBulk) SetDescription(v string) *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanPhaseUpsertBulk) UpdateDescription() *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PlanPhaseUpsertBulk) ClearDescription() *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.ClearDescription()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *PlanPhaseUpsertBulk) SetPlanID(v string) *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *PlanPhaseUpsertBulk) UpdatePlanID() *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.UpdatePlanID()
	})
}

// SetIndex sets the "index" field.
func (u *PlanPhaseUpsertBulk) SetIndex(v uint8) *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *PlanPhaseUpsertBulk) AddIndex(v uint8) *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *PlanPhaseUpsertBulk) UpdateIndex() *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.UpdateIndex()
	})
}

// SetDuration sets the "duration" field.
func (u *PlanPhaseUpsertBulk) SetDuration(v datetime.ISODurationString) *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.SetDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *PlanPhaseUpsertBulk) UpdateDuration() *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *PlanPhaseUpsertBulk) ClearDuration() *PlanPhaseUpsertBulk {
	return u.Update(func(s *PlanPhaseUpsert) {
		s.ClearDuration()
	})
}

// Exec executes the query.
func (u *PlanPhaseUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the PlanPhaseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for PlanPhaseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanPhaseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
