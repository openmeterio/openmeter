// Code generated by ent, DO NOT EDIT.

package dbfeature

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmeterio/openmeter/openmeter/productcatalog/feature"
)

const (
	// Label holds the string label denoting the feature type in the database.
	Label = "feature"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldMeterSlug holds the string denoting the meter_slug field in the database.
	FieldMeterSlug = "meter_slug"
	// FieldMeterGroupByFilters holds the string denoting the meter_group_by_filters field in the database.
	FieldMeterGroupByFilters = "meter_group_by_filters"
	// FieldAdvancedMeterGroupByFilters holds the string denoting the advanced_meter_group_by_filters field in the database.
	FieldAdvancedMeterGroupByFilters = "advanced_meter_group_by_filters"
	// FieldArchivedAt holds the string denoting the archived_at field in the database.
	FieldArchivedAt = "archived_at"
	// FieldCostKind holds the string denoting the cost_kind field in the database.
	FieldCostKind = "cost_kind"
	// FieldCostCurrency holds the string denoting the cost_currency field in the database.
	FieldCostCurrency = "cost_currency"
	// FieldCostUnitAmount holds the string denoting the cost_unit_amount field in the database.
	FieldCostUnitAmount = "cost_unit_amount"
	// FieldCostProviderID holds the string denoting the cost_provider_id field in the database.
	FieldCostProviderID = "cost_provider_id"
	// EdgeEntitlement holds the string denoting the entitlement edge name in mutations.
	EdgeEntitlement = "entitlement"
	// EdgeRatecard holds the string denoting the ratecard edge name in mutations.
	EdgeRatecard = "ratecard"
	// EdgeAddonRatecard holds the string denoting the addon_ratecard edge name in mutations.
	EdgeAddonRatecard = "addon_ratecard"
	// Table holds the table name of the feature in the database.
	Table = "features"
	// EntitlementTable is the table that holds the entitlement relation/edge.
	EntitlementTable = "entitlements"
	// EntitlementInverseTable is the table name for the Entitlement entity.
	// It exists in this package in order to avoid circular dependency with the "entitlement" package.
	EntitlementInverseTable = "entitlements"
	// EntitlementColumn is the table column denoting the entitlement relation/edge.
	EntitlementColumn = "feature_id"
	// RatecardTable is the table that holds the ratecard relation/edge.
	RatecardTable = "plan_rate_cards"
	// RatecardInverseTable is the table name for the PlanRateCard entity.
	// It exists in this package in order to avoid circular dependency with the "planratecard" package.
	RatecardInverseTable = "plan_rate_cards"
	// RatecardColumn is the table column denoting the ratecard relation/edge.
	RatecardColumn = "feature_id"
	// AddonRatecardTable is the table that holds the addon_ratecard relation/edge.
	AddonRatecardTable = "addon_rate_cards"
	// AddonRatecardInverseTable is the table name for the AddonRateCard entity.
	// It exists in this package in order to avoid circular dependency with the "addonratecard" package.
	AddonRatecardInverseTable = "addon_rate_cards"
	// AddonRatecardColumn is the table column denoting the addon_ratecard relation/edge.
	AddonRatecardColumn = "feature_id"
)

// Columns holds all SQL columns for feature fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldMetadata,
	FieldNamespace,
	FieldName,
	FieldKey,
	FieldMeterSlug,
	FieldMeterGroupByFilters,
	FieldAdvancedMeterGroupByFilters,
	FieldArchivedAt,
	FieldCostKind,
	FieldCostCurrency,
	FieldCostUnitAmount,
	FieldCostProviderID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
	// CostCurrencyValidator is a validator for the "cost_currency" field. It is called by the builders before save.
	CostCurrencyValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// CostKindValidator is a validator for the "cost_kind" field enum values. It is called by the builders before save.
func CostKindValidator(ck feature.CostKind) error {
	switch ck {
	case "manual", "provider":
		return nil
	default:
		return fmt.Errorf("dbfeature: invalid enum value for cost_kind field: %q", ck)
	}
}

// OrderOption defines the ordering options for the Feature queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByMeterSlug orders the results by the meter_slug field.
func ByMeterSlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMeterSlug, opts...).ToFunc()
}

// ByArchivedAt orders the results by the archived_at field.
func ByArchivedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchivedAt, opts...).ToFunc()
}

// ByCostKind orders the results by the cost_kind field.
func ByCostKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCostKind, opts...).ToFunc()
}

// ByCostCurrency orders the results by the cost_currency field.
func ByCostCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCostCurrency, opts...).ToFunc()
}

// ByCostUnitAmount orders the results by the cost_unit_amount field.
func ByCostUnitAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCostUnitAmount, opts...).ToFunc()
}

// ByCostProviderID orders the results by the cost_provider_id field.
func ByCostProviderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCostProviderID, opts...).ToFunc()
}

// ByEntitlementCount orders the results by entitlement count.
func ByEntitlementCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEntitlementStep(), opts...)
	}
}

// ByEntitlement orders the results by entitlement terms.
func ByEntitlement(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntitlementStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRatecardCount orders the results by ratecard count.
func ByRatecardCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRatecardStep(), opts...)
	}
}

// ByRatecard orders the results by ratecard terms.
func ByRatecard(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRatecardStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAddonRatecardCount orders the results by addon_ratecard count.
func ByAddonRatecardCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAddonRatecardStep(), opts...)
	}
}

// ByAddonRatecard orders the results by addon_ratecard terms.
func ByAddonRatecard(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddonRatecardStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEntitlementStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntitlementInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EntitlementTable, EntitlementColumn),
	)
}
func newRatecardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RatecardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RatecardTable, RatecardColumn),
	)
}
func newAddonRatecardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddonRatecardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AddonRatecardTable, AddonRatecardColumn),
	)
}
