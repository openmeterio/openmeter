// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicediscount"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicevalidationissue"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/pkg/models"
)

// BillingInvoiceUpdate is the builder for updating BillingInvoice entities.
type BillingInvoiceUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceMutation
}

// Where appends a list predicates to the BillingInvoiceUpdate builder.
func (biu *BillingInvoiceUpdate) Where(ps ...predicate.BillingInvoice) *BillingInvoiceUpdate {
	biu.mutation.Where(ps...)
	return biu
}

// SetMetadata sets the "metadata" field.
func (biu *BillingInvoiceUpdate) SetMetadata(m map[string]string) *BillingInvoiceUpdate {
	biu.mutation.SetMetadata(m)
	return biu
}

// ClearMetadata clears the value of the "metadata" field.
func (biu *BillingInvoiceUpdate) ClearMetadata() *BillingInvoiceUpdate {
	biu.mutation.ClearMetadata()
	return biu
}

// SetUpdatedAt sets the "updated_at" field.
func (biu *BillingInvoiceUpdate) SetUpdatedAt(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetUpdatedAt(t)
	return biu
}

// SetDeletedAt sets the "deleted_at" field.
func (biu *BillingInvoiceUpdate) SetDeletedAt(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetDeletedAt(t)
	return biu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetDeletedAt(*t)
	}
	return biu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (biu *BillingInvoiceUpdate) ClearDeletedAt() *BillingInvoiceUpdate {
	biu.mutation.ClearDeletedAt()
	return biu
}

// SetSupplierAddressCountry sets the "supplier_address_country" field.
func (biu *BillingInvoiceUpdate) SetSupplierAddressCountry(mc models.CountryCode) *BillingInvoiceUpdate {
	biu.mutation.SetSupplierAddressCountry(mc)
	return biu
}

// SetNillableSupplierAddressCountry sets the "supplier_address_country" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableSupplierAddressCountry(mc *models.CountryCode) *BillingInvoiceUpdate {
	if mc != nil {
		biu.SetSupplierAddressCountry(*mc)
	}
	return biu
}

// ClearSupplierAddressCountry clears the value of the "supplier_address_country" field.
func (biu *BillingInvoiceUpdate) ClearSupplierAddressCountry() *BillingInvoiceUpdate {
	biu.mutation.ClearSupplierAddressCountry()
	return biu
}

// SetSupplierAddressPostalCode sets the "supplier_address_postal_code" field.
func (biu *BillingInvoiceUpdate) SetSupplierAddressPostalCode(s string) *BillingInvoiceUpdate {
	biu.mutation.SetSupplierAddressPostalCode(s)
	return biu
}

// SetNillableSupplierAddressPostalCode sets the "supplier_address_postal_code" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableSupplierAddressPostalCode(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetSupplierAddressPostalCode(*s)
	}
	return biu
}

// ClearSupplierAddressPostalCode clears the value of the "supplier_address_postal_code" field.
func (biu *BillingInvoiceUpdate) ClearSupplierAddressPostalCode() *BillingInvoiceUpdate {
	biu.mutation.ClearSupplierAddressPostalCode()
	return biu
}

// SetSupplierAddressState sets the "supplier_address_state" field.
func (biu *BillingInvoiceUpdate) SetSupplierAddressState(s string) *BillingInvoiceUpdate {
	biu.mutation.SetSupplierAddressState(s)
	return biu
}

// SetNillableSupplierAddressState sets the "supplier_address_state" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableSupplierAddressState(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetSupplierAddressState(*s)
	}
	return biu
}

// ClearSupplierAddressState clears the value of the "supplier_address_state" field.
func (biu *BillingInvoiceUpdate) ClearSupplierAddressState() *BillingInvoiceUpdate {
	biu.mutation.ClearSupplierAddressState()
	return biu
}

// SetSupplierAddressCity sets the "supplier_address_city" field.
func (biu *BillingInvoiceUpdate) SetSupplierAddressCity(s string) *BillingInvoiceUpdate {
	biu.mutation.SetSupplierAddressCity(s)
	return biu
}

// SetNillableSupplierAddressCity sets the "supplier_address_city" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableSupplierAddressCity(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetSupplierAddressCity(*s)
	}
	return biu
}

// ClearSupplierAddressCity clears the value of the "supplier_address_city" field.
func (biu *BillingInvoiceUpdate) ClearSupplierAddressCity() *BillingInvoiceUpdate {
	biu.mutation.ClearSupplierAddressCity()
	return biu
}

// SetSupplierAddressLine1 sets the "supplier_address_line1" field.
func (biu *BillingInvoiceUpdate) SetSupplierAddressLine1(s string) *BillingInvoiceUpdate {
	biu.mutation.SetSupplierAddressLine1(s)
	return biu
}

// SetNillableSupplierAddressLine1 sets the "supplier_address_line1" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableSupplierAddressLine1(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetSupplierAddressLine1(*s)
	}
	return biu
}

// ClearSupplierAddressLine1 clears the value of the "supplier_address_line1" field.
func (biu *BillingInvoiceUpdate) ClearSupplierAddressLine1() *BillingInvoiceUpdate {
	biu.mutation.ClearSupplierAddressLine1()
	return biu
}

// SetSupplierAddressLine2 sets the "supplier_address_line2" field.
func (biu *BillingInvoiceUpdate) SetSupplierAddressLine2(s string) *BillingInvoiceUpdate {
	biu.mutation.SetSupplierAddressLine2(s)
	return biu
}

// SetNillableSupplierAddressLine2 sets the "supplier_address_line2" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableSupplierAddressLine2(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetSupplierAddressLine2(*s)
	}
	return biu
}

// ClearSupplierAddressLine2 clears the value of the "supplier_address_line2" field.
func (biu *BillingInvoiceUpdate) ClearSupplierAddressLine2() *BillingInvoiceUpdate {
	biu.mutation.ClearSupplierAddressLine2()
	return biu
}

// SetSupplierAddressPhoneNumber sets the "supplier_address_phone_number" field.
func (biu *BillingInvoiceUpdate) SetSupplierAddressPhoneNumber(s string) *BillingInvoiceUpdate {
	biu.mutation.SetSupplierAddressPhoneNumber(s)
	return biu
}

// SetNillableSupplierAddressPhoneNumber sets the "supplier_address_phone_number" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableSupplierAddressPhoneNumber(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetSupplierAddressPhoneNumber(*s)
	}
	return biu
}

// ClearSupplierAddressPhoneNumber clears the value of the "supplier_address_phone_number" field.
func (biu *BillingInvoiceUpdate) ClearSupplierAddressPhoneNumber() *BillingInvoiceUpdate {
	biu.mutation.ClearSupplierAddressPhoneNumber()
	return biu
}

// SetCustomerAddressCountry sets the "customer_address_country" field.
func (biu *BillingInvoiceUpdate) SetCustomerAddressCountry(mc models.CountryCode) *BillingInvoiceUpdate {
	biu.mutation.SetCustomerAddressCountry(mc)
	return biu
}

// SetNillableCustomerAddressCountry sets the "customer_address_country" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableCustomerAddressCountry(mc *models.CountryCode) *BillingInvoiceUpdate {
	if mc != nil {
		biu.SetCustomerAddressCountry(*mc)
	}
	return biu
}

// ClearCustomerAddressCountry clears the value of the "customer_address_country" field.
func (biu *BillingInvoiceUpdate) ClearCustomerAddressCountry() *BillingInvoiceUpdate {
	biu.mutation.ClearCustomerAddressCountry()
	return biu
}

// SetCustomerAddressPostalCode sets the "customer_address_postal_code" field.
func (biu *BillingInvoiceUpdate) SetCustomerAddressPostalCode(s string) *BillingInvoiceUpdate {
	biu.mutation.SetCustomerAddressPostalCode(s)
	return biu
}

// SetNillableCustomerAddressPostalCode sets the "customer_address_postal_code" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableCustomerAddressPostalCode(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetCustomerAddressPostalCode(*s)
	}
	return biu
}

// ClearCustomerAddressPostalCode clears the value of the "customer_address_postal_code" field.
func (biu *BillingInvoiceUpdate) ClearCustomerAddressPostalCode() *BillingInvoiceUpdate {
	biu.mutation.ClearCustomerAddressPostalCode()
	return biu
}

// SetCustomerAddressState sets the "customer_address_state" field.
func (biu *BillingInvoiceUpdate) SetCustomerAddressState(s string) *BillingInvoiceUpdate {
	biu.mutation.SetCustomerAddressState(s)
	return biu
}

// SetNillableCustomerAddressState sets the "customer_address_state" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableCustomerAddressState(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetCustomerAddressState(*s)
	}
	return biu
}

// ClearCustomerAddressState clears the value of the "customer_address_state" field.
func (biu *BillingInvoiceUpdate) ClearCustomerAddressState() *BillingInvoiceUpdate {
	biu.mutation.ClearCustomerAddressState()
	return biu
}

// SetCustomerAddressCity sets the "customer_address_city" field.
func (biu *BillingInvoiceUpdate) SetCustomerAddressCity(s string) *BillingInvoiceUpdate {
	biu.mutation.SetCustomerAddressCity(s)
	return biu
}

// SetNillableCustomerAddressCity sets the "customer_address_city" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableCustomerAddressCity(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetCustomerAddressCity(*s)
	}
	return biu
}

// ClearCustomerAddressCity clears the value of the "customer_address_city" field.
func (biu *BillingInvoiceUpdate) ClearCustomerAddressCity() *BillingInvoiceUpdate {
	biu.mutation.ClearCustomerAddressCity()
	return biu
}

// SetCustomerAddressLine1 sets the "customer_address_line1" field.
func (biu *BillingInvoiceUpdate) SetCustomerAddressLine1(s string) *BillingInvoiceUpdate {
	biu.mutation.SetCustomerAddressLine1(s)
	return biu
}

// SetNillableCustomerAddressLine1 sets the "customer_address_line1" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableCustomerAddressLine1(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetCustomerAddressLine1(*s)
	}
	return biu
}

// ClearCustomerAddressLine1 clears the value of the "customer_address_line1" field.
func (biu *BillingInvoiceUpdate) ClearCustomerAddressLine1() *BillingInvoiceUpdate {
	biu.mutation.ClearCustomerAddressLine1()
	return biu
}

// SetCustomerAddressLine2 sets the "customer_address_line2" field.
func (biu *BillingInvoiceUpdate) SetCustomerAddressLine2(s string) *BillingInvoiceUpdate {
	biu.mutation.SetCustomerAddressLine2(s)
	return biu
}

// SetNillableCustomerAddressLine2 sets the "customer_address_line2" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableCustomerAddressLine2(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetCustomerAddressLine2(*s)
	}
	return biu
}

// ClearCustomerAddressLine2 clears the value of the "customer_address_line2" field.
func (biu *BillingInvoiceUpdate) ClearCustomerAddressLine2() *BillingInvoiceUpdate {
	biu.mutation.ClearCustomerAddressLine2()
	return biu
}

// SetCustomerAddressPhoneNumber sets the "customer_address_phone_number" field.
func (biu *BillingInvoiceUpdate) SetCustomerAddressPhoneNumber(s string) *BillingInvoiceUpdate {
	biu.mutation.SetCustomerAddressPhoneNumber(s)
	return biu
}

// SetNillableCustomerAddressPhoneNumber sets the "customer_address_phone_number" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableCustomerAddressPhoneNumber(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetCustomerAddressPhoneNumber(*s)
	}
	return biu
}

// ClearCustomerAddressPhoneNumber clears the value of the "customer_address_phone_number" field.
func (biu *BillingInvoiceUpdate) ClearCustomerAddressPhoneNumber() *BillingInvoiceUpdate {
	biu.mutation.ClearCustomerAddressPhoneNumber()
	return biu
}

// SetAmount sets the "amount" field.
func (biu *BillingInvoiceUpdate) SetAmount(a alpacadecimal.Decimal) *BillingInvoiceUpdate {
	biu.mutation.SetAmount(a)
	return biu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableAmount(a *alpacadecimal.Decimal) *BillingInvoiceUpdate {
	if a != nil {
		biu.SetAmount(*a)
	}
	return biu
}

// SetTaxesTotal sets the "taxes_total" field.
func (biu *BillingInvoiceUpdate) SetTaxesTotal(a alpacadecimal.Decimal) *BillingInvoiceUpdate {
	biu.mutation.SetTaxesTotal(a)
	return biu
}

// SetNillableTaxesTotal sets the "taxes_total" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableTaxesTotal(a *alpacadecimal.Decimal) *BillingInvoiceUpdate {
	if a != nil {
		biu.SetTaxesTotal(*a)
	}
	return biu
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (biu *BillingInvoiceUpdate) SetTaxesInclusiveTotal(a alpacadecimal.Decimal) *BillingInvoiceUpdate {
	biu.mutation.SetTaxesInclusiveTotal(a)
	return biu
}

// SetNillableTaxesInclusiveTotal sets the "taxes_inclusive_total" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableTaxesInclusiveTotal(a *alpacadecimal.Decimal) *BillingInvoiceUpdate {
	if a != nil {
		biu.SetTaxesInclusiveTotal(*a)
	}
	return biu
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (biu *BillingInvoiceUpdate) SetTaxesExclusiveTotal(a alpacadecimal.Decimal) *BillingInvoiceUpdate {
	biu.mutation.SetTaxesExclusiveTotal(a)
	return biu
}

// SetNillableTaxesExclusiveTotal sets the "taxes_exclusive_total" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableTaxesExclusiveTotal(a *alpacadecimal.Decimal) *BillingInvoiceUpdate {
	if a != nil {
		biu.SetTaxesExclusiveTotal(*a)
	}
	return biu
}

// SetChargesTotal sets the "charges_total" field.
func (biu *BillingInvoiceUpdate) SetChargesTotal(a alpacadecimal.Decimal) *BillingInvoiceUpdate {
	biu.mutation.SetChargesTotal(a)
	return biu
}

// SetNillableChargesTotal sets the "charges_total" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableChargesTotal(a *alpacadecimal.Decimal) *BillingInvoiceUpdate {
	if a != nil {
		biu.SetChargesTotal(*a)
	}
	return biu
}

// SetDiscountsTotal sets the "discounts_total" field.
func (biu *BillingInvoiceUpdate) SetDiscountsTotal(a alpacadecimal.Decimal) *BillingInvoiceUpdate {
	biu.mutation.SetDiscountsTotal(a)
	return biu
}

// SetNillableDiscountsTotal sets the "discounts_total" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableDiscountsTotal(a *alpacadecimal.Decimal) *BillingInvoiceUpdate {
	if a != nil {
		biu.SetDiscountsTotal(*a)
	}
	return biu
}

// SetTotal sets the "total" field.
func (biu *BillingInvoiceUpdate) SetTotal(a alpacadecimal.Decimal) *BillingInvoiceUpdate {
	biu.mutation.SetTotal(a)
	return biu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableTotal(a *alpacadecimal.Decimal) *BillingInvoiceUpdate {
	if a != nil {
		biu.SetTotal(*a)
	}
	return biu
}

// SetSupplierName sets the "supplier_name" field.
func (biu *BillingInvoiceUpdate) SetSupplierName(s string) *BillingInvoiceUpdate {
	biu.mutation.SetSupplierName(s)
	return biu
}

// SetNillableSupplierName sets the "supplier_name" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableSupplierName(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetSupplierName(*s)
	}
	return biu
}

// SetSupplierTaxCode sets the "supplier_tax_code" field.
func (biu *BillingInvoiceUpdate) SetSupplierTaxCode(s string) *BillingInvoiceUpdate {
	biu.mutation.SetSupplierTaxCode(s)
	return biu
}

// SetNillableSupplierTaxCode sets the "supplier_tax_code" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableSupplierTaxCode(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetSupplierTaxCode(*s)
	}
	return biu
}

// ClearSupplierTaxCode clears the value of the "supplier_tax_code" field.
func (biu *BillingInvoiceUpdate) ClearSupplierTaxCode() *BillingInvoiceUpdate {
	biu.mutation.ClearSupplierTaxCode()
	return biu
}

// SetCustomerName sets the "customer_name" field.
func (biu *BillingInvoiceUpdate) SetCustomerName(s string) *BillingInvoiceUpdate {
	biu.mutation.SetCustomerName(s)
	return biu
}

// SetNillableCustomerName sets the "customer_name" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableCustomerName(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetCustomerName(*s)
	}
	return biu
}

// SetCustomerUsageAttribution sets the "customer_usage_attribution" field.
func (biu *BillingInvoiceUpdate) SetCustomerUsageAttribution(bcua *billing.VersionedCustomerUsageAttribution) *BillingInvoiceUpdate {
	biu.mutation.SetCustomerUsageAttribution(bcua)
	return biu
}

// SetNumber sets the "number" field.
func (biu *BillingInvoiceUpdate) SetNumber(s string) *BillingInvoiceUpdate {
	biu.mutation.SetNumber(s)
	return biu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableNumber(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetNumber(*s)
	}
	return biu
}

// SetType sets the "type" field.
func (biu *BillingInvoiceUpdate) SetType(bt billing.InvoiceType) *BillingInvoiceUpdate {
	biu.mutation.SetType(bt)
	return biu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableType(bt *billing.InvoiceType) *BillingInvoiceUpdate {
	if bt != nil {
		biu.SetType(*bt)
	}
	return biu
}

// SetDescription sets the "description" field.
func (biu *BillingInvoiceUpdate) SetDescription(s string) *BillingInvoiceUpdate {
	biu.mutation.SetDescription(s)
	return biu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableDescription(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetDescription(*s)
	}
	return biu
}

// ClearDescription clears the value of the "description" field.
func (biu *BillingInvoiceUpdate) ClearDescription() *BillingInvoiceUpdate {
	biu.mutation.ClearDescription()
	return biu
}

// SetVoidedAt sets the "voided_at" field.
func (biu *BillingInvoiceUpdate) SetVoidedAt(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetVoidedAt(t)
	return biu
}

// SetNillableVoidedAt sets the "voided_at" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableVoidedAt(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetVoidedAt(*t)
	}
	return biu
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (biu *BillingInvoiceUpdate) ClearVoidedAt() *BillingInvoiceUpdate {
	biu.mutation.ClearVoidedAt()
	return biu
}

// SetIssuedAt sets the "issued_at" field.
func (biu *BillingInvoiceUpdate) SetIssuedAt(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetIssuedAt(t)
	return biu
}

// SetNillableIssuedAt sets the "issued_at" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableIssuedAt(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetIssuedAt(*t)
	}
	return biu
}

// ClearIssuedAt clears the value of the "issued_at" field.
func (biu *BillingInvoiceUpdate) ClearIssuedAt() *BillingInvoiceUpdate {
	biu.mutation.ClearIssuedAt()
	return biu
}

// SetDraftUntil sets the "draft_until" field.
func (biu *BillingInvoiceUpdate) SetDraftUntil(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetDraftUntil(t)
	return biu
}

// SetNillableDraftUntil sets the "draft_until" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableDraftUntil(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetDraftUntil(*t)
	}
	return biu
}

// ClearDraftUntil clears the value of the "draft_until" field.
func (biu *BillingInvoiceUpdate) ClearDraftUntil() *BillingInvoiceUpdate {
	biu.mutation.ClearDraftUntil()
	return biu
}

// SetDueAt sets the "due_at" field.
func (biu *BillingInvoiceUpdate) SetDueAt(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetDueAt(t)
	return biu
}

// SetNillableDueAt sets the "due_at" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableDueAt(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetDueAt(*t)
	}
	return biu
}

// ClearDueAt clears the value of the "due_at" field.
func (biu *BillingInvoiceUpdate) ClearDueAt() *BillingInvoiceUpdate {
	biu.mutation.ClearDueAt()
	return biu
}

// SetStatus sets the "status" field.
func (biu *BillingInvoiceUpdate) SetStatus(bs billing.InvoiceStatus) *BillingInvoiceUpdate {
	biu.mutation.SetStatus(bs)
	return biu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableStatus(bs *billing.InvoiceStatus) *BillingInvoiceUpdate {
	if bs != nil {
		biu.SetStatus(*bs)
	}
	return biu
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (biu *BillingInvoiceUpdate) SetWorkflowConfigID(s string) *BillingInvoiceUpdate {
	biu.mutation.SetWorkflowConfigID(s)
	return biu
}

// SetNillableWorkflowConfigID sets the "workflow_config_id" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableWorkflowConfigID(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetWorkflowConfigID(*s)
	}
	return biu
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (biu *BillingInvoiceUpdate) SetInvoicingAppExternalID(s string) *BillingInvoiceUpdate {
	biu.mutation.SetInvoicingAppExternalID(s)
	return biu
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableInvoicingAppExternalID(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetInvoicingAppExternalID(*s)
	}
	return biu
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (biu *BillingInvoiceUpdate) ClearInvoicingAppExternalID() *BillingInvoiceUpdate {
	biu.mutation.ClearInvoicingAppExternalID()
	return biu
}

// SetPaymentAppExternalID sets the "payment_app_external_id" field.
func (biu *BillingInvoiceUpdate) SetPaymentAppExternalID(s string) *BillingInvoiceUpdate {
	biu.mutation.SetPaymentAppExternalID(s)
	return biu
}

// SetNillablePaymentAppExternalID sets the "payment_app_external_id" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillablePaymentAppExternalID(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetPaymentAppExternalID(*s)
	}
	return biu
}

// ClearPaymentAppExternalID clears the value of the "payment_app_external_id" field.
func (biu *BillingInvoiceUpdate) ClearPaymentAppExternalID() *BillingInvoiceUpdate {
	biu.mutation.ClearPaymentAppExternalID()
	return biu
}

// SetPeriodStart sets the "period_start" field.
func (biu *BillingInvoiceUpdate) SetPeriodStart(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetPeriodStart(t)
	return biu
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillablePeriodStart(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetPeriodStart(*t)
	}
	return biu
}

// ClearPeriodStart clears the value of the "period_start" field.
func (biu *BillingInvoiceUpdate) ClearPeriodStart() *BillingInvoiceUpdate {
	biu.mutation.ClearPeriodStart()
	return biu
}

// SetPeriodEnd sets the "period_end" field.
func (biu *BillingInvoiceUpdate) SetPeriodEnd(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetPeriodEnd(t)
	return biu
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillablePeriodEnd(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetPeriodEnd(*t)
	}
	return biu
}

// ClearPeriodEnd clears the value of the "period_end" field.
func (biu *BillingInvoiceUpdate) ClearPeriodEnd() *BillingInvoiceUpdate {
	biu.mutation.ClearPeriodEnd()
	return biu
}

// SetCollectionAt sets the "collection_at" field.
func (biu *BillingInvoiceUpdate) SetCollectionAt(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetCollectionAt(t)
	return biu
}

// SetNillableCollectionAt sets the "collection_at" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableCollectionAt(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetCollectionAt(*t)
	}
	return biu
}

// ClearCollectionAt clears the value of the "collection_at" field.
func (biu *BillingInvoiceUpdate) ClearCollectionAt() *BillingInvoiceUpdate {
	biu.mutation.ClearCollectionAt()
	return biu
}

// SetBillingWorkflowConfigID sets the "billing_workflow_config" edge to the BillingWorkflowConfig entity by ID.
func (biu *BillingInvoiceUpdate) SetBillingWorkflowConfigID(id string) *BillingInvoiceUpdate {
	biu.mutation.SetBillingWorkflowConfigID(id)
	return biu
}

// SetBillingWorkflowConfig sets the "billing_workflow_config" edge to the BillingWorkflowConfig entity.
func (biu *BillingInvoiceUpdate) SetBillingWorkflowConfig(b *BillingWorkflowConfig) *BillingInvoiceUpdate {
	return biu.SetBillingWorkflowConfigID(b.ID)
}

// AddBillingInvoiceLineIDs adds the "billing_invoice_lines" edge to the BillingInvoiceLine entity by IDs.
func (biu *BillingInvoiceUpdate) AddBillingInvoiceLineIDs(ids ...string) *BillingInvoiceUpdate {
	biu.mutation.AddBillingInvoiceLineIDs(ids...)
	return biu
}

// AddBillingInvoiceLines adds the "billing_invoice_lines" edges to the BillingInvoiceLine entity.
func (biu *BillingInvoiceUpdate) AddBillingInvoiceLines(b ...*BillingInvoiceLine) *BillingInvoiceUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biu.AddBillingInvoiceLineIDs(ids...)
}

// AddBillingInvoiceValidationIssueIDs adds the "billing_invoice_validation_issues" edge to the BillingInvoiceValidationIssue entity by IDs.
func (biu *BillingInvoiceUpdate) AddBillingInvoiceValidationIssueIDs(ids ...string) *BillingInvoiceUpdate {
	biu.mutation.AddBillingInvoiceValidationIssueIDs(ids...)
	return biu
}

// AddBillingInvoiceValidationIssues adds the "billing_invoice_validation_issues" edges to the BillingInvoiceValidationIssue entity.
func (biu *BillingInvoiceUpdate) AddBillingInvoiceValidationIssues(b ...*BillingInvoiceValidationIssue) *BillingInvoiceUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biu.AddBillingInvoiceValidationIssueIDs(ids...)
}

// AddInvoiceDiscountIDs adds the "invoice_discounts" edge to the BillingInvoiceDiscount entity by IDs.
func (biu *BillingInvoiceUpdate) AddInvoiceDiscountIDs(ids ...string) *BillingInvoiceUpdate {
	biu.mutation.AddInvoiceDiscountIDs(ids...)
	return biu
}

// AddInvoiceDiscounts adds the "invoice_discounts" edges to the BillingInvoiceDiscount entity.
func (biu *BillingInvoiceUpdate) AddInvoiceDiscounts(b ...*BillingInvoiceDiscount) *BillingInvoiceUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biu.AddInvoiceDiscountIDs(ids...)
}

// Mutation returns the BillingInvoiceMutation object of the builder.
func (biu *BillingInvoiceUpdate) Mutation() *BillingInvoiceMutation {
	return biu.mutation
}

// ClearBillingWorkflowConfig clears the "billing_workflow_config" edge to the BillingWorkflowConfig entity.
func (biu *BillingInvoiceUpdate) ClearBillingWorkflowConfig() *BillingInvoiceUpdate {
	biu.mutation.ClearBillingWorkflowConfig()
	return biu
}

// ClearBillingInvoiceLines clears all "billing_invoice_lines" edges to the BillingInvoiceLine entity.
func (biu *BillingInvoiceUpdate) ClearBillingInvoiceLines() *BillingInvoiceUpdate {
	biu.mutation.ClearBillingInvoiceLines()
	return biu
}

// RemoveBillingInvoiceLineIDs removes the "billing_invoice_lines" edge to BillingInvoiceLine entities by IDs.
func (biu *BillingInvoiceUpdate) RemoveBillingInvoiceLineIDs(ids ...string) *BillingInvoiceUpdate {
	biu.mutation.RemoveBillingInvoiceLineIDs(ids...)
	return biu
}

// RemoveBillingInvoiceLines removes "billing_invoice_lines" edges to BillingInvoiceLine entities.
func (biu *BillingInvoiceUpdate) RemoveBillingInvoiceLines(b ...*BillingInvoiceLine) *BillingInvoiceUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biu.RemoveBillingInvoiceLineIDs(ids...)
}

// ClearBillingInvoiceValidationIssues clears all "billing_invoice_validation_issues" edges to the BillingInvoiceValidationIssue entity.
func (biu *BillingInvoiceUpdate) ClearBillingInvoiceValidationIssues() *BillingInvoiceUpdate {
	biu.mutation.ClearBillingInvoiceValidationIssues()
	return biu
}

// RemoveBillingInvoiceValidationIssueIDs removes the "billing_invoice_validation_issues" edge to BillingInvoiceValidationIssue entities by IDs.
func (biu *BillingInvoiceUpdate) RemoveBillingInvoiceValidationIssueIDs(ids ...string) *BillingInvoiceUpdate {
	biu.mutation.RemoveBillingInvoiceValidationIssueIDs(ids...)
	return biu
}

// RemoveBillingInvoiceValidationIssues removes "billing_invoice_validation_issues" edges to BillingInvoiceValidationIssue entities.
func (biu *BillingInvoiceUpdate) RemoveBillingInvoiceValidationIssues(b ...*BillingInvoiceValidationIssue) *BillingInvoiceUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biu.RemoveBillingInvoiceValidationIssueIDs(ids...)
}

// ClearInvoiceDiscounts clears all "invoice_discounts" edges to the BillingInvoiceDiscount entity.
func (biu *BillingInvoiceUpdate) ClearInvoiceDiscounts() *BillingInvoiceUpdate {
	biu.mutation.ClearInvoiceDiscounts()
	return biu
}

// RemoveInvoiceDiscountIDs removes the "invoice_discounts" edge to BillingInvoiceDiscount entities by IDs.
func (biu *BillingInvoiceUpdate) RemoveInvoiceDiscountIDs(ids ...string) *BillingInvoiceUpdate {
	biu.mutation.RemoveInvoiceDiscountIDs(ids...)
	return biu
}

// RemoveInvoiceDiscounts removes "invoice_discounts" edges to BillingInvoiceDiscount entities.
func (biu *BillingInvoiceUpdate) RemoveInvoiceDiscounts(b ...*BillingInvoiceDiscount) *BillingInvoiceUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biu.RemoveInvoiceDiscountIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (biu *BillingInvoiceUpdate) Save(ctx context.Context) (int, error) {
	biu.defaults()
	return withHooks(ctx, biu.sqlSave, biu.mutation, biu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biu *BillingInvoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := biu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biu *BillingInvoiceUpdate) Exec(ctx context.Context) error {
	_, err := biu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biu *BillingInvoiceUpdate) ExecX(ctx context.Context) {
	if err := biu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biu *BillingInvoiceUpdate) defaults() {
	if _, ok := biu.mutation.UpdatedAt(); !ok {
		v := billinginvoice.UpdateDefaultUpdatedAt()
		biu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biu *BillingInvoiceUpdate) check() error {
	if v, ok := biu.mutation.SupplierAddressCountry(); ok {
		if err := billinginvoice.SupplierAddressCountryValidator(string(v)); err != nil {
			return &ValidationError{Name: "supplier_address_country", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.supplier_address_country": %w`, err)}
		}
	}
	if v, ok := biu.mutation.CustomerAddressCountry(); ok {
		if err := billinginvoice.CustomerAddressCountryValidator(string(v)); err != nil {
			return &ValidationError{Name: "customer_address_country", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.customer_address_country": %w`, err)}
		}
	}
	if v, ok := biu.mutation.SupplierName(); ok {
		if err := billinginvoice.SupplierNameValidator(v); err != nil {
			return &ValidationError{Name: "supplier_name", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.supplier_name": %w`, err)}
		}
	}
	if v, ok := biu.mutation.CustomerName(); ok {
		if err := billinginvoice.CustomerNameValidator(v); err != nil {
			return &ValidationError{Name: "customer_name", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.customer_name": %w`, err)}
		}
	}
	if v, ok := biu.mutation.GetType(); ok {
		if err := billinginvoice.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.type": %w`, err)}
		}
	}
	if v, ok := biu.mutation.Status(); ok {
		if err := billinginvoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.status": %w`, err)}
		}
	}
	if biu.mutation.SourceBillingProfileCleared() && len(biu.mutation.SourceBillingProfileIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.source_billing_profile"`)
	}
	if biu.mutation.BillingWorkflowConfigCleared() && len(biu.mutation.BillingWorkflowConfigIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.billing_workflow_config"`)
	}
	if biu.mutation.BillingInvoiceCustomerCleared() && len(biu.mutation.BillingInvoiceCustomerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.billing_invoice_customer"`)
	}
	if biu.mutation.TaxAppCleared() && len(biu.mutation.TaxAppIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.tax_app"`)
	}
	if biu.mutation.InvoicingAppCleared() && len(biu.mutation.InvoicingAppIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.invoicing_app"`)
	}
	if biu.mutation.PaymentAppCleared() && len(biu.mutation.PaymentAppIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.payment_app"`)
	}
	return nil
}

func (biu *BillingInvoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := biu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoice.Table, billinginvoice.Columns, sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString))
	if ps := biu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biu.mutation.Metadata(); ok {
		_spec.SetField(billinginvoice.FieldMetadata, field.TypeJSON, value)
	}
	if biu.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoice.FieldMetadata, field.TypeJSON)
	}
	if value, ok := biu.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biu.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoice.FieldDeletedAt, field.TypeTime, value)
	}
	if biu.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoice.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := biu.mutation.SupplierAddressCountry(); ok {
		_spec.SetField(billinginvoice.FieldSupplierAddressCountry, field.TypeString, value)
	}
	if biu.mutation.SupplierAddressCountryCleared() {
		_spec.ClearField(billinginvoice.FieldSupplierAddressCountry, field.TypeString)
	}
	if value, ok := biu.mutation.SupplierAddressPostalCode(); ok {
		_spec.SetField(billinginvoice.FieldSupplierAddressPostalCode, field.TypeString, value)
	}
	if biu.mutation.SupplierAddressPostalCodeCleared() {
		_spec.ClearField(billinginvoice.FieldSupplierAddressPostalCode, field.TypeString)
	}
	if value, ok := biu.mutation.SupplierAddressState(); ok {
		_spec.SetField(billinginvoice.FieldSupplierAddressState, field.TypeString, value)
	}
	if biu.mutation.SupplierAddressStateCleared() {
		_spec.ClearField(billinginvoice.FieldSupplierAddressState, field.TypeString)
	}
	if value, ok := biu.mutation.SupplierAddressCity(); ok {
		_spec.SetField(billinginvoice.FieldSupplierAddressCity, field.TypeString, value)
	}
	if biu.mutation.SupplierAddressCityCleared() {
		_spec.ClearField(billinginvoice.FieldSupplierAddressCity, field.TypeString)
	}
	if value, ok := biu.mutation.SupplierAddressLine1(); ok {
		_spec.SetField(billinginvoice.FieldSupplierAddressLine1, field.TypeString, value)
	}
	if biu.mutation.SupplierAddressLine1Cleared() {
		_spec.ClearField(billinginvoice.FieldSupplierAddressLine1, field.TypeString)
	}
	if value, ok := biu.mutation.SupplierAddressLine2(); ok {
		_spec.SetField(billinginvoice.FieldSupplierAddressLine2, field.TypeString, value)
	}
	if biu.mutation.SupplierAddressLine2Cleared() {
		_spec.ClearField(billinginvoice.FieldSupplierAddressLine2, field.TypeString)
	}
	if value, ok := biu.mutation.SupplierAddressPhoneNumber(); ok {
		_spec.SetField(billinginvoice.FieldSupplierAddressPhoneNumber, field.TypeString, value)
	}
	if biu.mutation.SupplierAddressPhoneNumberCleared() {
		_spec.ClearField(billinginvoice.FieldSupplierAddressPhoneNumber, field.TypeString)
	}
	if value, ok := biu.mutation.CustomerAddressCountry(); ok {
		_spec.SetField(billinginvoice.FieldCustomerAddressCountry, field.TypeString, value)
	}
	if biu.mutation.CustomerAddressCountryCleared() {
		_spec.ClearField(billinginvoice.FieldCustomerAddressCountry, field.TypeString)
	}
	if value, ok := biu.mutation.CustomerAddressPostalCode(); ok {
		_spec.SetField(billinginvoice.FieldCustomerAddressPostalCode, field.TypeString, value)
	}
	if biu.mutation.CustomerAddressPostalCodeCleared() {
		_spec.ClearField(billinginvoice.FieldCustomerAddressPostalCode, field.TypeString)
	}
	if value, ok := biu.mutation.CustomerAddressState(); ok {
		_spec.SetField(billinginvoice.FieldCustomerAddressState, field.TypeString, value)
	}
	if biu.mutation.CustomerAddressStateCleared() {
		_spec.ClearField(billinginvoice.FieldCustomerAddressState, field.TypeString)
	}
	if value, ok := biu.mutation.CustomerAddressCity(); ok {
		_spec.SetField(billinginvoice.FieldCustomerAddressCity, field.TypeString, value)
	}
	if biu.mutation.CustomerAddressCityCleared() {
		_spec.ClearField(billinginvoice.FieldCustomerAddressCity, field.TypeString)
	}
	if value, ok := biu.mutation.CustomerAddressLine1(); ok {
		_spec.SetField(billinginvoice.FieldCustomerAddressLine1, field.TypeString, value)
	}
	if biu.mutation.CustomerAddressLine1Cleared() {
		_spec.ClearField(billinginvoice.FieldCustomerAddressLine1, field.TypeString)
	}
	if value, ok := biu.mutation.CustomerAddressLine2(); ok {
		_spec.SetField(billinginvoice.FieldCustomerAddressLine2, field.TypeString, value)
	}
	if biu.mutation.CustomerAddressLine2Cleared() {
		_spec.ClearField(billinginvoice.FieldCustomerAddressLine2, field.TypeString)
	}
	if value, ok := biu.mutation.CustomerAddressPhoneNumber(); ok {
		_spec.SetField(billinginvoice.FieldCustomerAddressPhoneNumber, field.TypeString, value)
	}
	if biu.mutation.CustomerAddressPhoneNumberCleared() {
		_spec.ClearField(billinginvoice.FieldCustomerAddressPhoneNumber, field.TypeString)
	}
	if value, ok := biu.mutation.Amount(); ok {
		_spec.SetField(billinginvoice.FieldAmount, field.TypeOther, value)
	}
	if value, ok := biu.mutation.TaxesTotal(); ok {
		_spec.SetField(billinginvoice.FieldTaxesTotal, field.TypeOther, value)
	}
	if value, ok := biu.mutation.TaxesInclusiveTotal(); ok {
		_spec.SetField(billinginvoice.FieldTaxesInclusiveTotal, field.TypeOther, value)
	}
	if value, ok := biu.mutation.TaxesExclusiveTotal(); ok {
		_spec.SetField(billinginvoice.FieldTaxesExclusiveTotal, field.TypeOther, value)
	}
	if value, ok := biu.mutation.ChargesTotal(); ok {
		_spec.SetField(billinginvoice.FieldChargesTotal, field.TypeOther, value)
	}
	if value, ok := biu.mutation.DiscountsTotal(); ok {
		_spec.SetField(billinginvoice.FieldDiscountsTotal, field.TypeOther, value)
	}
	if value, ok := biu.mutation.Total(); ok {
		_spec.SetField(billinginvoice.FieldTotal, field.TypeOther, value)
	}
	if value, ok := biu.mutation.SupplierName(); ok {
		_spec.SetField(billinginvoice.FieldSupplierName, field.TypeString, value)
	}
	if value, ok := biu.mutation.SupplierTaxCode(); ok {
		_spec.SetField(billinginvoice.FieldSupplierTaxCode, field.TypeString, value)
	}
	if biu.mutation.SupplierTaxCodeCleared() {
		_spec.ClearField(billinginvoice.FieldSupplierTaxCode, field.TypeString)
	}
	if value, ok := biu.mutation.CustomerName(); ok {
		_spec.SetField(billinginvoice.FieldCustomerName, field.TypeString, value)
	}
	if value, ok := biu.mutation.CustomerUsageAttribution(); ok {
		_spec.SetField(billinginvoice.FieldCustomerUsageAttribution, field.TypeJSON, value)
	}
	if value, ok := biu.mutation.Number(); ok {
		_spec.SetField(billinginvoice.FieldNumber, field.TypeString, value)
	}
	if value, ok := biu.mutation.GetType(); ok {
		_spec.SetField(billinginvoice.FieldType, field.TypeEnum, value)
	}
	if value, ok := biu.mutation.Description(); ok {
		_spec.SetField(billinginvoice.FieldDescription, field.TypeString, value)
	}
	if biu.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoice.FieldDescription, field.TypeString)
	}
	if value, ok := biu.mutation.VoidedAt(); ok {
		_spec.SetField(billinginvoice.FieldVoidedAt, field.TypeTime, value)
	}
	if biu.mutation.VoidedAtCleared() {
		_spec.ClearField(billinginvoice.FieldVoidedAt, field.TypeTime)
	}
	if value, ok := biu.mutation.IssuedAt(); ok {
		_spec.SetField(billinginvoice.FieldIssuedAt, field.TypeTime, value)
	}
	if biu.mutation.IssuedAtCleared() {
		_spec.ClearField(billinginvoice.FieldIssuedAt, field.TypeTime)
	}
	if value, ok := biu.mutation.DraftUntil(); ok {
		_spec.SetField(billinginvoice.FieldDraftUntil, field.TypeTime, value)
	}
	if biu.mutation.DraftUntilCleared() {
		_spec.ClearField(billinginvoice.FieldDraftUntil, field.TypeTime)
	}
	if value, ok := biu.mutation.DueAt(); ok {
		_spec.SetField(billinginvoice.FieldDueAt, field.TypeTime, value)
	}
	if biu.mutation.DueAtCleared() {
		_spec.ClearField(billinginvoice.FieldDueAt, field.TypeTime)
	}
	if value, ok := biu.mutation.Status(); ok {
		_spec.SetField(billinginvoice.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := biu.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoice.FieldInvoicingAppExternalID, field.TypeString, value)
	}
	if biu.mutation.InvoicingAppExternalIDCleared() {
		_spec.ClearField(billinginvoice.FieldInvoicingAppExternalID, field.TypeString)
	}
	if value, ok := biu.mutation.PaymentAppExternalID(); ok {
		_spec.SetField(billinginvoice.FieldPaymentAppExternalID, field.TypeString, value)
	}
	if biu.mutation.PaymentAppExternalIDCleared() {
		_spec.ClearField(billinginvoice.FieldPaymentAppExternalID, field.TypeString)
	}
	if value, ok := biu.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoice.FieldPeriodStart, field.TypeTime, value)
	}
	if biu.mutation.PeriodStartCleared() {
		_spec.ClearField(billinginvoice.FieldPeriodStart, field.TypeTime)
	}
	if value, ok := biu.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoice.FieldPeriodEnd, field.TypeTime, value)
	}
	if biu.mutation.PeriodEndCleared() {
		_spec.ClearField(billinginvoice.FieldPeriodEnd, field.TypeTime)
	}
	if value, ok := biu.mutation.CollectionAt(); ok {
		_spec.SetField(billinginvoice.FieldCollectionAt, field.TypeTime, value)
	}
	if biu.mutation.CollectionAtCleared() {
		_spec.ClearField(billinginvoice.FieldCollectionAt, field.TypeTime)
	}
	if biu.mutation.BillingWorkflowConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billinginvoice.BillingWorkflowConfigTable,
			Columns: []string{billinginvoice.BillingWorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.BillingWorkflowConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billinginvoice.BillingWorkflowConfigTable,
			Columns: []string{billinginvoice.BillingWorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.BillingInvoiceLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceLinesTable,
			Columns: []string{billinginvoice.BillingInvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.RemovedBillingInvoiceLinesIDs(); len(nodes) > 0 && !biu.mutation.BillingInvoiceLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceLinesTable,
			Columns: []string{billinginvoice.BillingInvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.BillingInvoiceLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceLinesTable,
			Columns: []string{billinginvoice.BillingInvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.BillingInvoiceValidationIssuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceValidationIssuesTable,
			Columns: []string{billinginvoice.BillingInvoiceValidationIssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicevalidationissue.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.RemovedBillingInvoiceValidationIssuesIDs(); len(nodes) > 0 && !biu.mutation.BillingInvoiceValidationIssuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceValidationIssuesTable,
			Columns: []string{billinginvoice.BillingInvoiceValidationIssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicevalidationissue.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.BillingInvoiceValidationIssuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceValidationIssuesTable,
			Columns: []string{billinginvoice.BillingInvoiceValidationIssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicevalidationissue.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.InvoiceDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.InvoiceDiscountsTable,
			Columns: []string{billinginvoice.InvoiceDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicediscount.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.RemovedInvoiceDiscountsIDs(); len(nodes) > 0 && !biu.mutation.InvoiceDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.InvoiceDiscountsTable,
			Columns: []string{billinginvoice.InvoiceDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.InvoiceDiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.InvoiceDiscountsTable,
			Columns: []string{billinginvoice.InvoiceDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, biu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	biu.mutation.done = true
	return n, nil
}

// BillingInvoiceUpdateOne is the builder for updating a single BillingInvoice entity.
type BillingInvoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceMutation
}

// SetMetadata sets the "metadata" field.
func (biuo *BillingInvoiceUpdateOne) SetMetadata(m map[string]string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetMetadata(m)
	return biuo
}

// ClearMetadata clears the value of the "metadata" field.
func (biuo *BillingInvoiceUpdateOne) ClearMetadata() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearMetadata()
	return biuo
}

// SetUpdatedAt sets the "updated_at" field.
func (biuo *BillingInvoiceUpdateOne) SetUpdatedAt(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetUpdatedAt(t)
	return biuo
}

// SetDeletedAt sets the "deleted_at" field.
func (biuo *BillingInvoiceUpdateOne) SetDeletedAt(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetDeletedAt(t)
	return biuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetDeletedAt(*t)
	}
	return biuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (biuo *BillingInvoiceUpdateOne) ClearDeletedAt() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearDeletedAt()
	return biuo
}

// SetSupplierAddressCountry sets the "supplier_address_country" field.
func (biuo *BillingInvoiceUpdateOne) SetSupplierAddressCountry(mc models.CountryCode) *BillingInvoiceUpdateOne {
	biuo.mutation.SetSupplierAddressCountry(mc)
	return biuo
}

// SetNillableSupplierAddressCountry sets the "supplier_address_country" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableSupplierAddressCountry(mc *models.CountryCode) *BillingInvoiceUpdateOne {
	if mc != nil {
		biuo.SetSupplierAddressCountry(*mc)
	}
	return biuo
}

// ClearSupplierAddressCountry clears the value of the "supplier_address_country" field.
func (biuo *BillingInvoiceUpdateOne) ClearSupplierAddressCountry() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearSupplierAddressCountry()
	return biuo
}

// SetSupplierAddressPostalCode sets the "supplier_address_postal_code" field.
func (biuo *BillingInvoiceUpdateOne) SetSupplierAddressPostalCode(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetSupplierAddressPostalCode(s)
	return biuo
}

// SetNillableSupplierAddressPostalCode sets the "supplier_address_postal_code" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableSupplierAddressPostalCode(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetSupplierAddressPostalCode(*s)
	}
	return biuo
}

// ClearSupplierAddressPostalCode clears the value of the "supplier_address_postal_code" field.
func (biuo *BillingInvoiceUpdateOne) ClearSupplierAddressPostalCode() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearSupplierAddressPostalCode()
	return biuo
}

// SetSupplierAddressState sets the "supplier_address_state" field.
func (biuo *BillingInvoiceUpdateOne) SetSupplierAddressState(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetSupplierAddressState(s)
	return biuo
}

// SetNillableSupplierAddressState sets the "supplier_address_state" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableSupplierAddressState(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetSupplierAddressState(*s)
	}
	return biuo
}

// ClearSupplierAddressState clears the value of the "supplier_address_state" field.
func (biuo *BillingInvoiceUpdateOne) ClearSupplierAddressState() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearSupplierAddressState()
	return biuo
}

// SetSupplierAddressCity sets the "supplier_address_city" field.
func (biuo *BillingInvoiceUpdateOne) SetSupplierAddressCity(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetSupplierAddressCity(s)
	return biuo
}

// SetNillableSupplierAddressCity sets the "supplier_address_city" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableSupplierAddressCity(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetSupplierAddressCity(*s)
	}
	return biuo
}

// ClearSupplierAddressCity clears the value of the "supplier_address_city" field.
func (biuo *BillingInvoiceUpdateOne) ClearSupplierAddressCity() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearSupplierAddressCity()
	return biuo
}

// SetSupplierAddressLine1 sets the "supplier_address_line1" field.
func (biuo *BillingInvoiceUpdateOne) SetSupplierAddressLine1(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetSupplierAddressLine1(s)
	return biuo
}

// SetNillableSupplierAddressLine1 sets the "supplier_address_line1" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableSupplierAddressLine1(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetSupplierAddressLine1(*s)
	}
	return biuo
}

// ClearSupplierAddressLine1 clears the value of the "supplier_address_line1" field.
func (biuo *BillingInvoiceUpdateOne) ClearSupplierAddressLine1() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearSupplierAddressLine1()
	return biuo
}

// SetSupplierAddressLine2 sets the "supplier_address_line2" field.
func (biuo *BillingInvoiceUpdateOne) SetSupplierAddressLine2(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetSupplierAddressLine2(s)
	return biuo
}

// SetNillableSupplierAddressLine2 sets the "supplier_address_line2" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableSupplierAddressLine2(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetSupplierAddressLine2(*s)
	}
	return biuo
}

// ClearSupplierAddressLine2 clears the value of the "supplier_address_line2" field.
func (biuo *BillingInvoiceUpdateOne) ClearSupplierAddressLine2() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearSupplierAddressLine2()
	return biuo
}

// SetSupplierAddressPhoneNumber sets the "supplier_address_phone_number" field.
func (biuo *BillingInvoiceUpdateOne) SetSupplierAddressPhoneNumber(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetSupplierAddressPhoneNumber(s)
	return biuo
}

// SetNillableSupplierAddressPhoneNumber sets the "supplier_address_phone_number" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableSupplierAddressPhoneNumber(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetSupplierAddressPhoneNumber(*s)
	}
	return biuo
}

// ClearSupplierAddressPhoneNumber clears the value of the "supplier_address_phone_number" field.
func (biuo *BillingInvoiceUpdateOne) ClearSupplierAddressPhoneNumber() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearSupplierAddressPhoneNumber()
	return biuo
}

// SetCustomerAddressCountry sets the "customer_address_country" field.
func (biuo *BillingInvoiceUpdateOne) SetCustomerAddressCountry(mc models.CountryCode) *BillingInvoiceUpdateOne {
	biuo.mutation.SetCustomerAddressCountry(mc)
	return biuo
}

// SetNillableCustomerAddressCountry sets the "customer_address_country" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableCustomerAddressCountry(mc *models.CountryCode) *BillingInvoiceUpdateOne {
	if mc != nil {
		biuo.SetCustomerAddressCountry(*mc)
	}
	return biuo
}

// ClearCustomerAddressCountry clears the value of the "customer_address_country" field.
func (biuo *BillingInvoiceUpdateOne) ClearCustomerAddressCountry() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearCustomerAddressCountry()
	return biuo
}

// SetCustomerAddressPostalCode sets the "customer_address_postal_code" field.
func (biuo *BillingInvoiceUpdateOne) SetCustomerAddressPostalCode(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetCustomerAddressPostalCode(s)
	return biuo
}

// SetNillableCustomerAddressPostalCode sets the "customer_address_postal_code" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableCustomerAddressPostalCode(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetCustomerAddressPostalCode(*s)
	}
	return biuo
}

// ClearCustomerAddressPostalCode clears the value of the "customer_address_postal_code" field.
func (biuo *BillingInvoiceUpdateOne) ClearCustomerAddressPostalCode() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearCustomerAddressPostalCode()
	return biuo
}

// SetCustomerAddressState sets the "customer_address_state" field.
func (biuo *BillingInvoiceUpdateOne) SetCustomerAddressState(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetCustomerAddressState(s)
	return biuo
}

// SetNillableCustomerAddressState sets the "customer_address_state" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableCustomerAddressState(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetCustomerAddressState(*s)
	}
	return biuo
}

// ClearCustomerAddressState clears the value of the "customer_address_state" field.
func (biuo *BillingInvoiceUpdateOne) ClearCustomerAddressState() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearCustomerAddressState()
	return biuo
}

// SetCustomerAddressCity sets the "customer_address_city" field.
func (biuo *BillingInvoiceUpdateOne) SetCustomerAddressCity(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetCustomerAddressCity(s)
	return biuo
}

// SetNillableCustomerAddressCity sets the "customer_address_city" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableCustomerAddressCity(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetCustomerAddressCity(*s)
	}
	return biuo
}

// ClearCustomerAddressCity clears the value of the "customer_address_city" field.
func (biuo *BillingInvoiceUpdateOne) ClearCustomerAddressCity() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearCustomerAddressCity()
	return biuo
}

// SetCustomerAddressLine1 sets the "customer_address_line1" field.
func (biuo *BillingInvoiceUpdateOne) SetCustomerAddressLine1(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetCustomerAddressLine1(s)
	return biuo
}

// SetNillableCustomerAddressLine1 sets the "customer_address_line1" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableCustomerAddressLine1(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetCustomerAddressLine1(*s)
	}
	return biuo
}

// ClearCustomerAddressLine1 clears the value of the "customer_address_line1" field.
func (biuo *BillingInvoiceUpdateOne) ClearCustomerAddressLine1() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearCustomerAddressLine1()
	return biuo
}

// SetCustomerAddressLine2 sets the "customer_address_line2" field.
func (biuo *BillingInvoiceUpdateOne) SetCustomerAddressLine2(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetCustomerAddressLine2(s)
	return biuo
}

// SetNillableCustomerAddressLine2 sets the "customer_address_line2" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableCustomerAddressLine2(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetCustomerAddressLine2(*s)
	}
	return biuo
}

// ClearCustomerAddressLine2 clears the value of the "customer_address_line2" field.
func (biuo *BillingInvoiceUpdateOne) ClearCustomerAddressLine2() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearCustomerAddressLine2()
	return biuo
}

// SetCustomerAddressPhoneNumber sets the "customer_address_phone_number" field.
func (biuo *BillingInvoiceUpdateOne) SetCustomerAddressPhoneNumber(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetCustomerAddressPhoneNumber(s)
	return biuo
}

// SetNillableCustomerAddressPhoneNumber sets the "customer_address_phone_number" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableCustomerAddressPhoneNumber(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetCustomerAddressPhoneNumber(*s)
	}
	return biuo
}

// ClearCustomerAddressPhoneNumber clears the value of the "customer_address_phone_number" field.
func (biuo *BillingInvoiceUpdateOne) ClearCustomerAddressPhoneNumber() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearCustomerAddressPhoneNumber()
	return biuo
}

// SetAmount sets the "amount" field.
func (biuo *BillingInvoiceUpdateOne) SetAmount(a alpacadecimal.Decimal) *BillingInvoiceUpdateOne {
	biuo.mutation.SetAmount(a)
	return biuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableAmount(a *alpacadecimal.Decimal) *BillingInvoiceUpdateOne {
	if a != nil {
		biuo.SetAmount(*a)
	}
	return biuo
}

// SetTaxesTotal sets the "taxes_total" field.
func (biuo *BillingInvoiceUpdateOne) SetTaxesTotal(a alpacadecimal.Decimal) *BillingInvoiceUpdateOne {
	biuo.mutation.SetTaxesTotal(a)
	return biuo
}

// SetNillableTaxesTotal sets the "taxes_total" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableTaxesTotal(a *alpacadecimal.Decimal) *BillingInvoiceUpdateOne {
	if a != nil {
		biuo.SetTaxesTotal(*a)
	}
	return biuo
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (biuo *BillingInvoiceUpdateOne) SetTaxesInclusiveTotal(a alpacadecimal.Decimal) *BillingInvoiceUpdateOne {
	biuo.mutation.SetTaxesInclusiveTotal(a)
	return biuo
}

// SetNillableTaxesInclusiveTotal sets the "taxes_inclusive_total" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableTaxesInclusiveTotal(a *alpacadecimal.Decimal) *BillingInvoiceUpdateOne {
	if a != nil {
		biuo.SetTaxesInclusiveTotal(*a)
	}
	return biuo
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (biuo *BillingInvoiceUpdateOne) SetTaxesExclusiveTotal(a alpacadecimal.Decimal) *BillingInvoiceUpdateOne {
	biuo.mutation.SetTaxesExclusiveTotal(a)
	return biuo
}

// SetNillableTaxesExclusiveTotal sets the "taxes_exclusive_total" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableTaxesExclusiveTotal(a *alpacadecimal.Decimal) *BillingInvoiceUpdateOne {
	if a != nil {
		biuo.SetTaxesExclusiveTotal(*a)
	}
	return biuo
}

// SetChargesTotal sets the "charges_total" field.
func (biuo *BillingInvoiceUpdateOne) SetChargesTotal(a alpacadecimal.Decimal) *BillingInvoiceUpdateOne {
	biuo.mutation.SetChargesTotal(a)
	return biuo
}

// SetNillableChargesTotal sets the "charges_total" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableChargesTotal(a *alpacadecimal.Decimal) *BillingInvoiceUpdateOne {
	if a != nil {
		biuo.SetChargesTotal(*a)
	}
	return biuo
}

// SetDiscountsTotal sets the "discounts_total" field.
func (biuo *BillingInvoiceUpdateOne) SetDiscountsTotal(a alpacadecimal.Decimal) *BillingInvoiceUpdateOne {
	biuo.mutation.SetDiscountsTotal(a)
	return biuo
}

// SetNillableDiscountsTotal sets the "discounts_total" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableDiscountsTotal(a *alpacadecimal.Decimal) *BillingInvoiceUpdateOne {
	if a != nil {
		biuo.SetDiscountsTotal(*a)
	}
	return biuo
}

// SetTotal sets the "total" field.
func (biuo *BillingInvoiceUpdateOne) SetTotal(a alpacadecimal.Decimal) *BillingInvoiceUpdateOne {
	biuo.mutation.SetTotal(a)
	return biuo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableTotal(a *alpacadecimal.Decimal) *BillingInvoiceUpdateOne {
	if a != nil {
		biuo.SetTotal(*a)
	}
	return biuo
}

// SetSupplierName sets the "supplier_name" field.
func (biuo *BillingInvoiceUpdateOne) SetSupplierName(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetSupplierName(s)
	return biuo
}

// SetNillableSupplierName sets the "supplier_name" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableSupplierName(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetSupplierName(*s)
	}
	return biuo
}

// SetSupplierTaxCode sets the "supplier_tax_code" field.
func (biuo *BillingInvoiceUpdateOne) SetSupplierTaxCode(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetSupplierTaxCode(s)
	return biuo
}

// SetNillableSupplierTaxCode sets the "supplier_tax_code" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableSupplierTaxCode(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetSupplierTaxCode(*s)
	}
	return biuo
}

// ClearSupplierTaxCode clears the value of the "supplier_tax_code" field.
func (biuo *BillingInvoiceUpdateOne) ClearSupplierTaxCode() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearSupplierTaxCode()
	return biuo
}

// SetCustomerName sets the "customer_name" field.
func (biuo *BillingInvoiceUpdateOne) SetCustomerName(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetCustomerName(s)
	return biuo
}

// SetNillableCustomerName sets the "customer_name" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableCustomerName(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetCustomerName(*s)
	}
	return biuo
}

// SetCustomerUsageAttribution sets the "customer_usage_attribution" field.
func (biuo *BillingInvoiceUpdateOne) SetCustomerUsageAttribution(bcua *billing.VersionedCustomerUsageAttribution) *BillingInvoiceUpdateOne {
	biuo.mutation.SetCustomerUsageAttribution(bcua)
	return biuo
}

// SetNumber sets the "number" field.
func (biuo *BillingInvoiceUpdateOne) SetNumber(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetNumber(s)
	return biuo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableNumber(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetNumber(*s)
	}
	return biuo
}

// SetType sets the "type" field.
func (biuo *BillingInvoiceUpdateOne) SetType(bt billing.InvoiceType) *BillingInvoiceUpdateOne {
	biuo.mutation.SetType(bt)
	return biuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableType(bt *billing.InvoiceType) *BillingInvoiceUpdateOne {
	if bt != nil {
		biuo.SetType(*bt)
	}
	return biuo
}

// SetDescription sets the "description" field.
func (biuo *BillingInvoiceUpdateOne) SetDescription(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetDescription(s)
	return biuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableDescription(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetDescription(*s)
	}
	return biuo
}

// ClearDescription clears the value of the "description" field.
func (biuo *BillingInvoiceUpdateOne) ClearDescription() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearDescription()
	return biuo
}

// SetVoidedAt sets the "voided_at" field.
func (biuo *BillingInvoiceUpdateOne) SetVoidedAt(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetVoidedAt(t)
	return biuo
}

// SetNillableVoidedAt sets the "voided_at" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableVoidedAt(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetVoidedAt(*t)
	}
	return biuo
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (biuo *BillingInvoiceUpdateOne) ClearVoidedAt() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearVoidedAt()
	return biuo
}

// SetIssuedAt sets the "issued_at" field.
func (biuo *BillingInvoiceUpdateOne) SetIssuedAt(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetIssuedAt(t)
	return biuo
}

// SetNillableIssuedAt sets the "issued_at" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableIssuedAt(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetIssuedAt(*t)
	}
	return biuo
}

// ClearIssuedAt clears the value of the "issued_at" field.
func (biuo *BillingInvoiceUpdateOne) ClearIssuedAt() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearIssuedAt()
	return biuo
}

// SetDraftUntil sets the "draft_until" field.
func (biuo *BillingInvoiceUpdateOne) SetDraftUntil(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetDraftUntil(t)
	return biuo
}

// SetNillableDraftUntil sets the "draft_until" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableDraftUntil(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetDraftUntil(*t)
	}
	return biuo
}

// ClearDraftUntil clears the value of the "draft_until" field.
func (biuo *BillingInvoiceUpdateOne) ClearDraftUntil() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearDraftUntil()
	return biuo
}

// SetDueAt sets the "due_at" field.
func (biuo *BillingInvoiceUpdateOne) SetDueAt(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetDueAt(t)
	return biuo
}

// SetNillableDueAt sets the "due_at" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableDueAt(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetDueAt(*t)
	}
	return biuo
}

// ClearDueAt clears the value of the "due_at" field.
func (biuo *BillingInvoiceUpdateOne) ClearDueAt() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearDueAt()
	return biuo
}

// SetStatus sets the "status" field.
func (biuo *BillingInvoiceUpdateOne) SetStatus(bs billing.InvoiceStatus) *BillingInvoiceUpdateOne {
	biuo.mutation.SetStatus(bs)
	return biuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableStatus(bs *billing.InvoiceStatus) *BillingInvoiceUpdateOne {
	if bs != nil {
		biuo.SetStatus(*bs)
	}
	return biuo
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (biuo *BillingInvoiceUpdateOne) SetWorkflowConfigID(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetWorkflowConfigID(s)
	return biuo
}

// SetNillableWorkflowConfigID sets the "workflow_config_id" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableWorkflowConfigID(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetWorkflowConfigID(*s)
	}
	return biuo
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (biuo *BillingInvoiceUpdateOne) SetInvoicingAppExternalID(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetInvoicingAppExternalID(s)
	return biuo
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableInvoicingAppExternalID(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetInvoicingAppExternalID(*s)
	}
	return biuo
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (biuo *BillingInvoiceUpdateOne) ClearInvoicingAppExternalID() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearInvoicingAppExternalID()
	return biuo
}

// SetPaymentAppExternalID sets the "payment_app_external_id" field.
func (biuo *BillingInvoiceUpdateOne) SetPaymentAppExternalID(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetPaymentAppExternalID(s)
	return biuo
}

// SetNillablePaymentAppExternalID sets the "payment_app_external_id" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillablePaymentAppExternalID(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetPaymentAppExternalID(*s)
	}
	return biuo
}

// ClearPaymentAppExternalID clears the value of the "payment_app_external_id" field.
func (biuo *BillingInvoiceUpdateOne) ClearPaymentAppExternalID() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearPaymentAppExternalID()
	return biuo
}

// SetPeriodStart sets the "period_start" field.
func (biuo *BillingInvoiceUpdateOne) SetPeriodStart(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetPeriodStart(t)
	return biuo
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillablePeriodStart(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetPeriodStart(*t)
	}
	return biuo
}

// ClearPeriodStart clears the value of the "period_start" field.
func (biuo *BillingInvoiceUpdateOne) ClearPeriodStart() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearPeriodStart()
	return biuo
}

// SetPeriodEnd sets the "period_end" field.
func (biuo *BillingInvoiceUpdateOne) SetPeriodEnd(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetPeriodEnd(t)
	return biuo
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillablePeriodEnd(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetPeriodEnd(*t)
	}
	return biuo
}

// ClearPeriodEnd clears the value of the "period_end" field.
func (biuo *BillingInvoiceUpdateOne) ClearPeriodEnd() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearPeriodEnd()
	return biuo
}

// SetCollectionAt sets the "collection_at" field.
func (biuo *BillingInvoiceUpdateOne) SetCollectionAt(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetCollectionAt(t)
	return biuo
}

// SetNillableCollectionAt sets the "collection_at" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableCollectionAt(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetCollectionAt(*t)
	}
	return biuo
}

// ClearCollectionAt clears the value of the "collection_at" field.
func (biuo *BillingInvoiceUpdateOne) ClearCollectionAt() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearCollectionAt()
	return biuo
}

// SetBillingWorkflowConfigID sets the "billing_workflow_config" edge to the BillingWorkflowConfig entity by ID.
func (biuo *BillingInvoiceUpdateOne) SetBillingWorkflowConfigID(id string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetBillingWorkflowConfigID(id)
	return biuo
}

// SetBillingWorkflowConfig sets the "billing_workflow_config" edge to the BillingWorkflowConfig entity.
func (biuo *BillingInvoiceUpdateOne) SetBillingWorkflowConfig(b *BillingWorkflowConfig) *BillingInvoiceUpdateOne {
	return biuo.SetBillingWorkflowConfigID(b.ID)
}

// AddBillingInvoiceLineIDs adds the "billing_invoice_lines" edge to the BillingInvoiceLine entity by IDs.
func (biuo *BillingInvoiceUpdateOne) AddBillingInvoiceLineIDs(ids ...string) *BillingInvoiceUpdateOne {
	biuo.mutation.AddBillingInvoiceLineIDs(ids...)
	return biuo
}

// AddBillingInvoiceLines adds the "billing_invoice_lines" edges to the BillingInvoiceLine entity.
func (biuo *BillingInvoiceUpdateOne) AddBillingInvoiceLines(b ...*BillingInvoiceLine) *BillingInvoiceUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biuo.AddBillingInvoiceLineIDs(ids...)
}

// AddBillingInvoiceValidationIssueIDs adds the "billing_invoice_validation_issues" edge to the BillingInvoiceValidationIssue entity by IDs.
func (biuo *BillingInvoiceUpdateOne) AddBillingInvoiceValidationIssueIDs(ids ...string) *BillingInvoiceUpdateOne {
	biuo.mutation.AddBillingInvoiceValidationIssueIDs(ids...)
	return biuo
}

// AddBillingInvoiceValidationIssues adds the "billing_invoice_validation_issues" edges to the BillingInvoiceValidationIssue entity.
func (biuo *BillingInvoiceUpdateOne) AddBillingInvoiceValidationIssues(b ...*BillingInvoiceValidationIssue) *BillingInvoiceUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biuo.AddBillingInvoiceValidationIssueIDs(ids...)
}

// AddInvoiceDiscountIDs adds the "invoice_discounts" edge to the BillingInvoiceDiscount entity by IDs.
func (biuo *BillingInvoiceUpdateOne) AddInvoiceDiscountIDs(ids ...string) *BillingInvoiceUpdateOne {
	biuo.mutation.AddInvoiceDiscountIDs(ids...)
	return biuo
}

// AddInvoiceDiscounts adds the "invoice_discounts" edges to the BillingInvoiceDiscount entity.
func (biuo *BillingInvoiceUpdateOne) AddInvoiceDiscounts(b ...*BillingInvoiceDiscount) *BillingInvoiceUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biuo.AddInvoiceDiscountIDs(ids...)
}

// Mutation returns the BillingInvoiceMutation object of the builder.
func (biuo *BillingInvoiceUpdateOne) Mutation() *BillingInvoiceMutation {
	return biuo.mutation
}

// ClearBillingWorkflowConfig clears the "billing_workflow_config" edge to the BillingWorkflowConfig entity.
func (biuo *BillingInvoiceUpdateOne) ClearBillingWorkflowConfig() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearBillingWorkflowConfig()
	return biuo
}

// ClearBillingInvoiceLines clears all "billing_invoice_lines" edges to the BillingInvoiceLine entity.
func (biuo *BillingInvoiceUpdateOne) ClearBillingInvoiceLines() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearBillingInvoiceLines()
	return biuo
}

// RemoveBillingInvoiceLineIDs removes the "billing_invoice_lines" edge to BillingInvoiceLine entities by IDs.
func (biuo *BillingInvoiceUpdateOne) RemoveBillingInvoiceLineIDs(ids ...string) *BillingInvoiceUpdateOne {
	biuo.mutation.RemoveBillingInvoiceLineIDs(ids...)
	return biuo
}

// RemoveBillingInvoiceLines removes "billing_invoice_lines" edges to BillingInvoiceLine entities.
func (biuo *BillingInvoiceUpdateOne) RemoveBillingInvoiceLines(b ...*BillingInvoiceLine) *BillingInvoiceUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biuo.RemoveBillingInvoiceLineIDs(ids...)
}

// ClearBillingInvoiceValidationIssues clears all "billing_invoice_validation_issues" edges to the BillingInvoiceValidationIssue entity.
func (biuo *BillingInvoiceUpdateOne) ClearBillingInvoiceValidationIssues() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearBillingInvoiceValidationIssues()
	return biuo
}

// RemoveBillingInvoiceValidationIssueIDs removes the "billing_invoice_validation_issues" edge to BillingInvoiceValidationIssue entities by IDs.
func (biuo *BillingInvoiceUpdateOne) RemoveBillingInvoiceValidationIssueIDs(ids ...string) *BillingInvoiceUpdateOne {
	biuo.mutation.RemoveBillingInvoiceValidationIssueIDs(ids...)
	return biuo
}

// RemoveBillingInvoiceValidationIssues removes "billing_invoice_validation_issues" edges to BillingInvoiceValidationIssue entities.
func (biuo *BillingInvoiceUpdateOne) RemoveBillingInvoiceValidationIssues(b ...*BillingInvoiceValidationIssue) *BillingInvoiceUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biuo.RemoveBillingInvoiceValidationIssueIDs(ids...)
}

// ClearInvoiceDiscounts clears all "invoice_discounts" edges to the BillingInvoiceDiscount entity.
func (biuo *BillingInvoiceUpdateOne) ClearInvoiceDiscounts() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearInvoiceDiscounts()
	return biuo
}

// RemoveInvoiceDiscountIDs removes the "invoice_discounts" edge to BillingInvoiceDiscount entities by IDs.
func (biuo *BillingInvoiceUpdateOne) RemoveInvoiceDiscountIDs(ids ...string) *BillingInvoiceUpdateOne {
	biuo.mutation.RemoveInvoiceDiscountIDs(ids...)
	return biuo
}

// RemoveInvoiceDiscounts removes "invoice_discounts" edges to BillingInvoiceDiscount entities.
func (biuo *BillingInvoiceUpdateOne) RemoveInvoiceDiscounts(b ...*BillingInvoiceDiscount) *BillingInvoiceUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biuo.RemoveInvoiceDiscountIDs(ids...)
}

// Where appends a list predicates to the BillingInvoiceUpdate builder.
func (biuo *BillingInvoiceUpdateOne) Where(ps ...predicate.BillingInvoice) *BillingInvoiceUpdateOne {
	biuo.mutation.Where(ps...)
	return biuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (biuo *BillingInvoiceUpdateOne) Select(field string, fields ...string) *BillingInvoiceUpdateOne {
	biuo.fields = append([]string{field}, fields...)
	return biuo
}

// Save executes the query and returns the updated BillingInvoice entity.
func (biuo *BillingInvoiceUpdateOne) Save(ctx context.Context) (*BillingInvoice, error) {
	biuo.defaults()
	return withHooks(ctx, biuo.sqlSave, biuo.mutation, biuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biuo *BillingInvoiceUpdateOne) SaveX(ctx context.Context) *BillingInvoice {
	node, err := biuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biuo *BillingInvoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := biuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biuo *BillingInvoiceUpdateOne) ExecX(ctx context.Context) {
	if err := biuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biuo *BillingInvoiceUpdateOne) defaults() {
	if _, ok := biuo.mutation.UpdatedAt(); !ok {
		v := billinginvoice.UpdateDefaultUpdatedAt()
		biuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biuo *BillingInvoiceUpdateOne) check() error {
	if v, ok := biuo.mutation.SupplierAddressCountry(); ok {
		if err := billinginvoice.SupplierAddressCountryValidator(string(v)); err != nil {
			return &ValidationError{Name: "supplier_address_country", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.supplier_address_country": %w`, err)}
		}
	}
	if v, ok := biuo.mutation.CustomerAddressCountry(); ok {
		if err := billinginvoice.CustomerAddressCountryValidator(string(v)); err != nil {
			return &ValidationError{Name: "customer_address_country", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.customer_address_country": %w`, err)}
		}
	}
	if v, ok := biuo.mutation.SupplierName(); ok {
		if err := billinginvoice.SupplierNameValidator(v); err != nil {
			return &ValidationError{Name: "supplier_name", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.supplier_name": %w`, err)}
		}
	}
	if v, ok := biuo.mutation.CustomerName(); ok {
		if err := billinginvoice.CustomerNameValidator(v); err != nil {
			return &ValidationError{Name: "customer_name", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.customer_name": %w`, err)}
		}
	}
	if v, ok := biuo.mutation.GetType(); ok {
		if err := billinginvoice.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.type": %w`, err)}
		}
	}
	if v, ok := biuo.mutation.Status(); ok {
		if err := billinginvoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.status": %w`, err)}
		}
	}
	if biuo.mutation.SourceBillingProfileCleared() && len(biuo.mutation.SourceBillingProfileIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.source_billing_profile"`)
	}
	if biuo.mutation.BillingWorkflowConfigCleared() && len(biuo.mutation.BillingWorkflowConfigIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.billing_workflow_config"`)
	}
	if biuo.mutation.BillingInvoiceCustomerCleared() && len(biuo.mutation.BillingInvoiceCustomerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.billing_invoice_customer"`)
	}
	if biuo.mutation.TaxAppCleared() && len(biuo.mutation.TaxAppIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.tax_app"`)
	}
	if biuo.mutation.InvoicingAppCleared() && len(biuo.mutation.InvoicingAppIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.invoicing_app"`)
	}
	if biuo.mutation.PaymentAppCleared() && len(biuo.mutation.PaymentAppIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.payment_app"`)
	}
	return nil
}

func (biuo *BillingInvoiceUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoice, err error) {
	if err := biuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoice.Table, billinginvoice.Columns, sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString))
	id, ok := biuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := biuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoice.FieldID)
		for _, f := range fields {
			if !billinginvoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := biuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biuo.mutation.Metadata(); ok {
		_spec.SetField(billinginvoice.FieldMetadata, field.TypeJSON, value)
	}
	if biuo.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoice.FieldMetadata, field.TypeJSON)
	}
	if value, ok := biuo.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biuo.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoice.FieldDeletedAt, field.TypeTime, value)
	}
	if biuo.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoice.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := biuo.mutation.SupplierAddressCountry(); ok {
		_spec.SetField(billinginvoice.FieldSupplierAddressCountry, field.TypeString, value)
	}
	if biuo.mutation.SupplierAddressCountryCleared() {
		_spec.ClearField(billinginvoice.FieldSupplierAddressCountry, field.TypeString)
	}
	if value, ok := biuo.mutation.SupplierAddressPostalCode(); ok {
		_spec.SetField(billinginvoice.FieldSupplierAddressPostalCode, field.TypeString, value)
	}
	if biuo.mutation.SupplierAddressPostalCodeCleared() {
		_spec.ClearField(billinginvoice.FieldSupplierAddressPostalCode, field.TypeString)
	}
	if value, ok := biuo.mutation.SupplierAddressState(); ok {
		_spec.SetField(billinginvoice.FieldSupplierAddressState, field.TypeString, value)
	}
	if biuo.mutation.SupplierAddressStateCleared() {
		_spec.ClearField(billinginvoice.FieldSupplierAddressState, field.TypeString)
	}
	if value, ok := biuo.mutation.SupplierAddressCity(); ok {
		_spec.SetField(billinginvoice.FieldSupplierAddressCity, field.TypeString, value)
	}
	if biuo.mutation.SupplierAddressCityCleared() {
		_spec.ClearField(billinginvoice.FieldSupplierAddressCity, field.TypeString)
	}
	if value, ok := biuo.mutation.SupplierAddressLine1(); ok {
		_spec.SetField(billinginvoice.FieldSupplierAddressLine1, field.TypeString, value)
	}
	if biuo.mutation.SupplierAddressLine1Cleared() {
		_spec.ClearField(billinginvoice.FieldSupplierAddressLine1, field.TypeString)
	}
	if value, ok := biuo.mutation.SupplierAddressLine2(); ok {
		_spec.SetField(billinginvoice.FieldSupplierAddressLine2, field.TypeString, value)
	}
	if biuo.mutation.SupplierAddressLine2Cleared() {
		_spec.ClearField(billinginvoice.FieldSupplierAddressLine2, field.TypeString)
	}
	if value, ok := biuo.mutation.SupplierAddressPhoneNumber(); ok {
		_spec.SetField(billinginvoice.FieldSupplierAddressPhoneNumber, field.TypeString, value)
	}
	if biuo.mutation.SupplierAddressPhoneNumberCleared() {
		_spec.ClearField(billinginvoice.FieldSupplierAddressPhoneNumber, field.TypeString)
	}
	if value, ok := biuo.mutation.CustomerAddressCountry(); ok {
		_spec.SetField(billinginvoice.FieldCustomerAddressCountry, field.TypeString, value)
	}
	if biuo.mutation.CustomerAddressCountryCleared() {
		_spec.ClearField(billinginvoice.FieldCustomerAddressCountry, field.TypeString)
	}
	if value, ok := biuo.mutation.CustomerAddressPostalCode(); ok {
		_spec.SetField(billinginvoice.FieldCustomerAddressPostalCode, field.TypeString, value)
	}
	if biuo.mutation.CustomerAddressPostalCodeCleared() {
		_spec.ClearField(billinginvoice.FieldCustomerAddressPostalCode, field.TypeString)
	}
	if value, ok := biuo.mutation.CustomerAddressState(); ok {
		_spec.SetField(billinginvoice.FieldCustomerAddressState, field.TypeString, value)
	}
	if biuo.mutation.CustomerAddressStateCleared() {
		_spec.ClearField(billinginvoice.FieldCustomerAddressState, field.TypeString)
	}
	if value, ok := biuo.mutation.CustomerAddressCity(); ok {
		_spec.SetField(billinginvoice.FieldCustomerAddressCity, field.TypeString, value)
	}
	if biuo.mutation.CustomerAddressCityCleared() {
		_spec.ClearField(billinginvoice.FieldCustomerAddressCity, field.TypeString)
	}
	if value, ok := biuo.mutation.CustomerAddressLine1(); ok {
		_spec.SetField(billinginvoice.FieldCustomerAddressLine1, field.TypeString, value)
	}
	if biuo.mutation.CustomerAddressLine1Cleared() {
		_spec.ClearField(billinginvoice.FieldCustomerAddressLine1, field.TypeString)
	}
	if value, ok := biuo.mutation.CustomerAddressLine2(); ok {
		_spec.SetField(billinginvoice.FieldCustomerAddressLine2, field.TypeString, value)
	}
	if biuo.mutation.CustomerAddressLine2Cleared() {
		_spec.ClearField(billinginvoice.FieldCustomerAddressLine2, field.TypeString)
	}
	if value, ok := biuo.mutation.CustomerAddressPhoneNumber(); ok {
		_spec.SetField(billinginvoice.FieldCustomerAddressPhoneNumber, field.TypeString, value)
	}
	if biuo.mutation.CustomerAddressPhoneNumberCleared() {
		_spec.ClearField(billinginvoice.FieldCustomerAddressPhoneNumber, field.TypeString)
	}
	if value, ok := biuo.mutation.Amount(); ok {
		_spec.SetField(billinginvoice.FieldAmount, field.TypeOther, value)
	}
	if value, ok := biuo.mutation.TaxesTotal(); ok {
		_spec.SetField(billinginvoice.FieldTaxesTotal, field.TypeOther, value)
	}
	if value, ok := biuo.mutation.TaxesInclusiveTotal(); ok {
		_spec.SetField(billinginvoice.FieldTaxesInclusiveTotal, field.TypeOther, value)
	}
	if value, ok := biuo.mutation.TaxesExclusiveTotal(); ok {
		_spec.SetField(billinginvoice.FieldTaxesExclusiveTotal, field.TypeOther, value)
	}
	if value, ok := biuo.mutation.ChargesTotal(); ok {
		_spec.SetField(billinginvoice.FieldChargesTotal, field.TypeOther, value)
	}
	if value, ok := biuo.mutation.DiscountsTotal(); ok {
		_spec.SetField(billinginvoice.FieldDiscountsTotal, field.TypeOther, value)
	}
	if value, ok := biuo.mutation.Total(); ok {
		_spec.SetField(billinginvoice.FieldTotal, field.TypeOther, value)
	}
	if value, ok := biuo.mutation.SupplierName(); ok {
		_spec.SetField(billinginvoice.FieldSupplierName, field.TypeString, value)
	}
	if value, ok := biuo.mutation.SupplierTaxCode(); ok {
		_spec.SetField(billinginvoice.FieldSupplierTaxCode, field.TypeString, value)
	}
	if biuo.mutation.SupplierTaxCodeCleared() {
		_spec.ClearField(billinginvoice.FieldSupplierTaxCode, field.TypeString)
	}
	if value, ok := biuo.mutation.CustomerName(); ok {
		_spec.SetField(billinginvoice.FieldCustomerName, field.TypeString, value)
	}
	if value, ok := biuo.mutation.CustomerUsageAttribution(); ok {
		_spec.SetField(billinginvoice.FieldCustomerUsageAttribution, field.TypeJSON, value)
	}
	if value, ok := biuo.mutation.Number(); ok {
		_spec.SetField(billinginvoice.FieldNumber, field.TypeString, value)
	}
	if value, ok := biuo.mutation.GetType(); ok {
		_spec.SetField(billinginvoice.FieldType, field.TypeEnum, value)
	}
	if value, ok := biuo.mutation.Description(); ok {
		_spec.SetField(billinginvoice.FieldDescription, field.TypeString, value)
	}
	if biuo.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoice.FieldDescription, field.TypeString)
	}
	if value, ok := biuo.mutation.VoidedAt(); ok {
		_spec.SetField(billinginvoice.FieldVoidedAt, field.TypeTime, value)
	}
	if biuo.mutation.VoidedAtCleared() {
		_spec.ClearField(billinginvoice.FieldVoidedAt, field.TypeTime)
	}
	if value, ok := biuo.mutation.IssuedAt(); ok {
		_spec.SetField(billinginvoice.FieldIssuedAt, field.TypeTime, value)
	}
	if biuo.mutation.IssuedAtCleared() {
		_spec.ClearField(billinginvoice.FieldIssuedAt, field.TypeTime)
	}
	if value, ok := biuo.mutation.DraftUntil(); ok {
		_spec.SetField(billinginvoice.FieldDraftUntil, field.TypeTime, value)
	}
	if biuo.mutation.DraftUntilCleared() {
		_spec.ClearField(billinginvoice.FieldDraftUntil, field.TypeTime)
	}
	if value, ok := biuo.mutation.DueAt(); ok {
		_spec.SetField(billinginvoice.FieldDueAt, field.TypeTime, value)
	}
	if biuo.mutation.DueAtCleared() {
		_spec.ClearField(billinginvoice.FieldDueAt, field.TypeTime)
	}
	if value, ok := biuo.mutation.Status(); ok {
		_spec.SetField(billinginvoice.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := biuo.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoice.FieldInvoicingAppExternalID, field.TypeString, value)
	}
	if biuo.mutation.InvoicingAppExternalIDCleared() {
		_spec.ClearField(billinginvoice.FieldInvoicingAppExternalID, field.TypeString)
	}
	if value, ok := biuo.mutation.PaymentAppExternalID(); ok {
		_spec.SetField(billinginvoice.FieldPaymentAppExternalID, field.TypeString, value)
	}
	if biuo.mutation.PaymentAppExternalIDCleared() {
		_spec.ClearField(billinginvoice.FieldPaymentAppExternalID, field.TypeString)
	}
	if value, ok := biuo.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoice.FieldPeriodStart, field.TypeTime, value)
	}
	if biuo.mutation.PeriodStartCleared() {
		_spec.ClearField(billinginvoice.FieldPeriodStart, field.TypeTime)
	}
	if value, ok := biuo.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoice.FieldPeriodEnd, field.TypeTime, value)
	}
	if biuo.mutation.PeriodEndCleared() {
		_spec.ClearField(billinginvoice.FieldPeriodEnd, field.TypeTime)
	}
	if value, ok := biuo.mutation.CollectionAt(); ok {
		_spec.SetField(billinginvoice.FieldCollectionAt, field.TypeTime, value)
	}
	if biuo.mutation.CollectionAtCleared() {
		_spec.ClearField(billinginvoice.FieldCollectionAt, field.TypeTime)
	}
	if biuo.mutation.BillingWorkflowConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billinginvoice.BillingWorkflowConfigTable,
			Columns: []string{billinginvoice.BillingWorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.BillingWorkflowConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billinginvoice.BillingWorkflowConfigTable,
			Columns: []string{billinginvoice.BillingWorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.BillingInvoiceLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceLinesTable,
			Columns: []string{billinginvoice.BillingInvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.RemovedBillingInvoiceLinesIDs(); len(nodes) > 0 && !biuo.mutation.BillingInvoiceLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceLinesTable,
			Columns: []string{billinginvoice.BillingInvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.BillingInvoiceLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceLinesTable,
			Columns: []string{billinginvoice.BillingInvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.BillingInvoiceValidationIssuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceValidationIssuesTable,
			Columns: []string{billinginvoice.BillingInvoiceValidationIssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicevalidationissue.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.RemovedBillingInvoiceValidationIssuesIDs(); len(nodes) > 0 && !biuo.mutation.BillingInvoiceValidationIssuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceValidationIssuesTable,
			Columns: []string{billinginvoice.BillingInvoiceValidationIssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicevalidationissue.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.BillingInvoiceValidationIssuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceValidationIssuesTable,
			Columns: []string{billinginvoice.BillingInvoiceValidationIssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicevalidationissue.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.InvoiceDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.InvoiceDiscountsTable,
			Columns: []string{billinginvoice.InvoiceDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicediscount.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.RemovedInvoiceDiscountsIDs(); len(nodes) > 0 && !biuo.mutation.InvoiceDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.InvoiceDiscountsTable,
			Columns: []string{billinginvoice.InvoiceDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.InvoiceDiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.InvoiceDiscountsTable,
			Columns: []string{billinginvoice.InvoiceDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingInvoice{config: biuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	biuo.mutation.done = true
	return _node, nil
}
