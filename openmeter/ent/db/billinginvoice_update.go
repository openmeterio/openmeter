// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	billingentity "github.com/openmeterio/openmeter/openmeter/billing/entity"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceitem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingInvoiceUpdate is the builder for updating BillingInvoice entities.
type BillingInvoiceUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceMutation
}

// Where appends a list predicates to the BillingInvoiceUpdate builder.
func (biu *BillingInvoiceUpdate) Where(ps ...predicate.BillingInvoice) *BillingInvoiceUpdate {
	biu.mutation.Where(ps...)
	return biu
}

// SetUpdatedAt sets the "updated_at" field.
func (biu *BillingInvoiceUpdate) SetUpdatedAt(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetUpdatedAt(t)
	return biu
}

// SetDeletedAt sets the "deleted_at" field.
func (biu *BillingInvoiceUpdate) SetDeletedAt(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetDeletedAt(t)
	return biu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetDeletedAt(*t)
	}
	return biu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (biu *BillingInvoiceUpdate) ClearDeletedAt() *BillingInvoiceUpdate {
	biu.mutation.ClearDeletedAt()
	return biu
}

// SetMetadata sets the "metadata" field.
func (biu *BillingInvoiceUpdate) SetMetadata(m map[string]string) *BillingInvoiceUpdate {
	biu.mutation.SetMetadata(m)
	return biu
}

// ClearMetadata clears the value of the "metadata" field.
func (biu *BillingInvoiceUpdate) ClearMetadata() *BillingInvoiceUpdate {
	biu.mutation.ClearMetadata()
	return biu
}

// SetSeries sets the "series" field.
func (biu *BillingInvoiceUpdate) SetSeries(s string) *BillingInvoiceUpdate {
	biu.mutation.SetSeries(s)
	return biu
}

// SetNillableSeries sets the "series" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableSeries(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetSeries(*s)
	}
	return biu
}

// ClearSeries clears the value of the "series" field.
func (biu *BillingInvoiceUpdate) ClearSeries() *BillingInvoiceUpdate {
	biu.mutation.ClearSeries()
	return biu
}

// SetCode sets the "code" field.
func (biu *BillingInvoiceUpdate) SetCode(s string) *BillingInvoiceUpdate {
	biu.mutation.SetCode(s)
	return biu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableCode(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetCode(*s)
	}
	return biu
}

// ClearCode clears the value of the "code" field.
func (biu *BillingInvoiceUpdate) ClearCode() *BillingInvoiceUpdate {
	biu.mutation.ClearCode()
	return biu
}

// SetVoidedAt sets the "voided_at" field.
func (biu *BillingInvoiceUpdate) SetVoidedAt(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetVoidedAt(t)
	return biu
}

// SetNillableVoidedAt sets the "voided_at" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableVoidedAt(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetVoidedAt(*t)
	}
	return biu
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (biu *BillingInvoiceUpdate) ClearVoidedAt() *BillingInvoiceUpdate {
	biu.mutation.ClearVoidedAt()
	return biu
}

// SetDueDate sets the "due_date" field.
func (biu *BillingInvoiceUpdate) SetDueDate(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetDueDate(t)
	return biu
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableDueDate(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetDueDate(*t)
	}
	return biu
}

// SetStatus sets the "status" field.
func (biu *BillingInvoiceUpdate) SetStatus(bs billingentity.InvoiceStatus) *BillingInvoiceUpdate {
	biu.mutation.SetStatus(bs)
	return biu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableStatus(bs *billingentity.InvoiceStatus) *BillingInvoiceUpdate {
	if bs != nil {
		biu.SetStatus(*bs)
	}
	return biu
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (biu *BillingInvoiceUpdate) SetWorkflowConfigID(s string) *BillingInvoiceUpdate {
	biu.mutation.SetWorkflowConfigID(s)
	return biu
}

// SetNillableWorkflowConfigID sets the "workflow_config_id" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillableWorkflowConfigID(s *string) *BillingInvoiceUpdate {
	if s != nil {
		biu.SetWorkflowConfigID(*s)
	}
	return biu
}

// SetPeriodStart sets the "period_start" field.
func (biu *BillingInvoiceUpdate) SetPeriodStart(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetPeriodStart(t)
	return biu
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillablePeriodStart(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetPeriodStart(*t)
	}
	return biu
}

// SetPeriodEnd sets the "period_end" field.
func (biu *BillingInvoiceUpdate) SetPeriodEnd(t time.Time) *BillingInvoiceUpdate {
	biu.mutation.SetPeriodEnd(t)
	return biu
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (biu *BillingInvoiceUpdate) SetNillablePeriodEnd(t *time.Time) *BillingInvoiceUpdate {
	if t != nil {
		biu.SetPeriodEnd(*t)
	}
	return biu
}

// SetBillingWorkflowConfigID sets the "billing_workflow_config" edge to the BillingWorkflowConfig entity by ID.
func (biu *BillingInvoiceUpdate) SetBillingWorkflowConfigID(id string) *BillingInvoiceUpdate {
	biu.mutation.SetBillingWorkflowConfigID(id)
	return biu
}

// SetBillingWorkflowConfig sets the "billing_workflow_config" edge to the BillingWorkflowConfig entity.
func (biu *BillingInvoiceUpdate) SetBillingWorkflowConfig(b *BillingWorkflowConfig) *BillingInvoiceUpdate {
	return biu.SetBillingWorkflowConfigID(b.ID)
}

// AddBillingInvoiceItemIDs adds the "billing_invoice_items" edge to the BillingInvoiceItem entity by IDs.
func (biu *BillingInvoiceUpdate) AddBillingInvoiceItemIDs(ids ...string) *BillingInvoiceUpdate {
	biu.mutation.AddBillingInvoiceItemIDs(ids...)
	return biu
}

// AddBillingInvoiceItems adds the "billing_invoice_items" edges to the BillingInvoiceItem entity.
func (biu *BillingInvoiceUpdate) AddBillingInvoiceItems(b ...*BillingInvoiceItem) *BillingInvoiceUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biu.AddBillingInvoiceItemIDs(ids...)
}

// Mutation returns the BillingInvoiceMutation object of the builder.
func (biu *BillingInvoiceUpdate) Mutation() *BillingInvoiceMutation {
	return biu.mutation
}

// ClearBillingWorkflowConfig clears the "billing_workflow_config" edge to the BillingWorkflowConfig entity.
func (biu *BillingInvoiceUpdate) ClearBillingWorkflowConfig() *BillingInvoiceUpdate {
	biu.mutation.ClearBillingWorkflowConfig()
	return biu
}

// ClearBillingInvoiceItems clears all "billing_invoice_items" edges to the BillingInvoiceItem entity.
func (biu *BillingInvoiceUpdate) ClearBillingInvoiceItems() *BillingInvoiceUpdate {
	biu.mutation.ClearBillingInvoiceItems()
	return biu
}

// RemoveBillingInvoiceItemIDs removes the "billing_invoice_items" edge to BillingInvoiceItem entities by IDs.
func (biu *BillingInvoiceUpdate) RemoveBillingInvoiceItemIDs(ids ...string) *BillingInvoiceUpdate {
	biu.mutation.RemoveBillingInvoiceItemIDs(ids...)
	return biu
}

// RemoveBillingInvoiceItems removes "billing_invoice_items" edges to BillingInvoiceItem entities.
func (biu *BillingInvoiceUpdate) RemoveBillingInvoiceItems(b ...*BillingInvoiceItem) *BillingInvoiceUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biu.RemoveBillingInvoiceItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (biu *BillingInvoiceUpdate) Save(ctx context.Context) (int, error) {
	biu.defaults()
	return withHooks(ctx, biu.sqlSave, biu.mutation, biu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biu *BillingInvoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := biu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biu *BillingInvoiceUpdate) Exec(ctx context.Context) error {
	_, err := biu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biu *BillingInvoiceUpdate) ExecX(ctx context.Context) {
	if err := biu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biu *BillingInvoiceUpdate) defaults() {
	if _, ok := biu.mutation.UpdatedAt(); !ok {
		v := billinginvoice.UpdateDefaultUpdatedAt()
		biu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biu *BillingInvoiceUpdate) check() error {
	if v, ok := biu.mutation.Status(); ok {
		if err := billinginvoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.status": %w`, err)}
		}
	}
	if biu.mutation.BillingProfileCleared() && len(biu.mutation.BillingProfileIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.billing_profile"`)
	}
	if biu.mutation.BillingWorkflowConfigCleared() && len(biu.mutation.BillingWorkflowConfigIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.billing_workflow_config"`)
	}
	return nil
}

func (biu *BillingInvoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := biu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoice.Table, billinginvoice.Columns, sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString))
	if ps := biu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biu.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biu.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoice.FieldDeletedAt, field.TypeTime, value)
	}
	if biu.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoice.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := biu.mutation.Metadata(); ok {
		_spec.SetField(billinginvoice.FieldMetadata, field.TypeJSON, value)
	}
	if biu.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoice.FieldMetadata, field.TypeJSON)
	}
	if value, ok := biu.mutation.Series(); ok {
		_spec.SetField(billinginvoice.FieldSeries, field.TypeString, value)
	}
	if biu.mutation.SeriesCleared() {
		_spec.ClearField(billinginvoice.FieldSeries, field.TypeString)
	}
	if value, ok := biu.mutation.Code(); ok {
		_spec.SetField(billinginvoice.FieldCode, field.TypeString, value)
	}
	if biu.mutation.CodeCleared() {
		_spec.ClearField(billinginvoice.FieldCode, field.TypeString)
	}
	if value, ok := biu.mutation.VoidedAt(); ok {
		_spec.SetField(billinginvoice.FieldVoidedAt, field.TypeTime, value)
	}
	if biu.mutation.VoidedAtCleared() {
		_spec.ClearField(billinginvoice.FieldVoidedAt, field.TypeTime)
	}
	if value, ok := biu.mutation.DueDate(); ok {
		_spec.SetField(billinginvoice.FieldDueDate, field.TypeTime, value)
	}
	if value, ok := biu.mutation.Status(); ok {
		_spec.SetField(billinginvoice.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := biu.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoice.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := biu.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoice.FieldPeriodEnd, field.TypeTime, value)
	}
	if biu.mutation.BillingWorkflowConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billinginvoice.BillingWorkflowConfigTable,
			Columns: []string{billinginvoice.BillingWorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.BillingWorkflowConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billinginvoice.BillingWorkflowConfigTable,
			Columns: []string{billinginvoice.BillingWorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.BillingInvoiceItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceItemsTable,
			Columns: []string{billinginvoice.BillingInvoiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.RemovedBillingInvoiceItemsIDs(); len(nodes) > 0 && !biu.mutation.BillingInvoiceItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceItemsTable,
			Columns: []string{billinginvoice.BillingInvoiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.BillingInvoiceItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceItemsTable,
			Columns: []string{billinginvoice.BillingInvoiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, biu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	biu.mutation.done = true
	return n, nil
}

// BillingInvoiceUpdateOne is the builder for updating a single BillingInvoice entity.
type BillingInvoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (biuo *BillingInvoiceUpdateOne) SetUpdatedAt(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetUpdatedAt(t)
	return biuo
}

// SetDeletedAt sets the "deleted_at" field.
func (biuo *BillingInvoiceUpdateOne) SetDeletedAt(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetDeletedAt(t)
	return biuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetDeletedAt(*t)
	}
	return biuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (biuo *BillingInvoiceUpdateOne) ClearDeletedAt() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearDeletedAt()
	return biuo
}

// SetMetadata sets the "metadata" field.
func (biuo *BillingInvoiceUpdateOne) SetMetadata(m map[string]string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetMetadata(m)
	return biuo
}

// ClearMetadata clears the value of the "metadata" field.
func (biuo *BillingInvoiceUpdateOne) ClearMetadata() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearMetadata()
	return biuo
}

// SetSeries sets the "series" field.
func (biuo *BillingInvoiceUpdateOne) SetSeries(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetSeries(s)
	return biuo
}

// SetNillableSeries sets the "series" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableSeries(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetSeries(*s)
	}
	return biuo
}

// ClearSeries clears the value of the "series" field.
func (biuo *BillingInvoiceUpdateOne) ClearSeries() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearSeries()
	return biuo
}

// SetCode sets the "code" field.
func (biuo *BillingInvoiceUpdateOne) SetCode(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetCode(s)
	return biuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableCode(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetCode(*s)
	}
	return biuo
}

// ClearCode clears the value of the "code" field.
func (biuo *BillingInvoiceUpdateOne) ClearCode() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearCode()
	return biuo
}

// SetVoidedAt sets the "voided_at" field.
func (biuo *BillingInvoiceUpdateOne) SetVoidedAt(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetVoidedAt(t)
	return biuo
}

// SetNillableVoidedAt sets the "voided_at" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableVoidedAt(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetVoidedAt(*t)
	}
	return biuo
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (biuo *BillingInvoiceUpdateOne) ClearVoidedAt() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearVoidedAt()
	return biuo
}

// SetDueDate sets the "due_date" field.
func (biuo *BillingInvoiceUpdateOne) SetDueDate(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetDueDate(t)
	return biuo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableDueDate(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetDueDate(*t)
	}
	return biuo
}

// SetStatus sets the "status" field.
func (biuo *BillingInvoiceUpdateOne) SetStatus(bs billingentity.InvoiceStatus) *BillingInvoiceUpdateOne {
	biuo.mutation.SetStatus(bs)
	return biuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableStatus(bs *billingentity.InvoiceStatus) *BillingInvoiceUpdateOne {
	if bs != nil {
		biuo.SetStatus(*bs)
	}
	return biuo
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (biuo *BillingInvoiceUpdateOne) SetWorkflowConfigID(s string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetWorkflowConfigID(s)
	return biuo
}

// SetNillableWorkflowConfigID sets the "workflow_config_id" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillableWorkflowConfigID(s *string) *BillingInvoiceUpdateOne {
	if s != nil {
		biuo.SetWorkflowConfigID(*s)
	}
	return biuo
}

// SetPeriodStart sets the "period_start" field.
func (biuo *BillingInvoiceUpdateOne) SetPeriodStart(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetPeriodStart(t)
	return biuo
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillablePeriodStart(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetPeriodStart(*t)
	}
	return biuo
}

// SetPeriodEnd sets the "period_end" field.
func (biuo *BillingInvoiceUpdateOne) SetPeriodEnd(t time.Time) *BillingInvoiceUpdateOne {
	biuo.mutation.SetPeriodEnd(t)
	return biuo
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (biuo *BillingInvoiceUpdateOne) SetNillablePeriodEnd(t *time.Time) *BillingInvoiceUpdateOne {
	if t != nil {
		biuo.SetPeriodEnd(*t)
	}
	return biuo
}

// SetBillingWorkflowConfigID sets the "billing_workflow_config" edge to the BillingWorkflowConfig entity by ID.
func (biuo *BillingInvoiceUpdateOne) SetBillingWorkflowConfigID(id string) *BillingInvoiceUpdateOne {
	biuo.mutation.SetBillingWorkflowConfigID(id)
	return biuo
}

// SetBillingWorkflowConfig sets the "billing_workflow_config" edge to the BillingWorkflowConfig entity.
func (biuo *BillingInvoiceUpdateOne) SetBillingWorkflowConfig(b *BillingWorkflowConfig) *BillingInvoiceUpdateOne {
	return biuo.SetBillingWorkflowConfigID(b.ID)
}

// AddBillingInvoiceItemIDs adds the "billing_invoice_items" edge to the BillingInvoiceItem entity by IDs.
func (biuo *BillingInvoiceUpdateOne) AddBillingInvoiceItemIDs(ids ...string) *BillingInvoiceUpdateOne {
	biuo.mutation.AddBillingInvoiceItemIDs(ids...)
	return biuo
}

// AddBillingInvoiceItems adds the "billing_invoice_items" edges to the BillingInvoiceItem entity.
func (biuo *BillingInvoiceUpdateOne) AddBillingInvoiceItems(b ...*BillingInvoiceItem) *BillingInvoiceUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biuo.AddBillingInvoiceItemIDs(ids...)
}

// Mutation returns the BillingInvoiceMutation object of the builder.
func (biuo *BillingInvoiceUpdateOne) Mutation() *BillingInvoiceMutation {
	return biuo.mutation
}

// ClearBillingWorkflowConfig clears the "billing_workflow_config" edge to the BillingWorkflowConfig entity.
func (biuo *BillingInvoiceUpdateOne) ClearBillingWorkflowConfig() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearBillingWorkflowConfig()
	return biuo
}

// ClearBillingInvoiceItems clears all "billing_invoice_items" edges to the BillingInvoiceItem entity.
func (biuo *BillingInvoiceUpdateOne) ClearBillingInvoiceItems() *BillingInvoiceUpdateOne {
	biuo.mutation.ClearBillingInvoiceItems()
	return biuo
}

// RemoveBillingInvoiceItemIDs removes the "billing_invoice_items" edge to BillingInvoiceItem entities by IDs.
func (biuo *BillingInvoiceUpdateOne) RemoveBillingInvoiceItemIDs(ids ...string) *BillingInvoiceUpdateOne {
	biuo.mutation.RemoveBillingInvoiceItemIDs(ids...)
	return biuo
}

// RemoveBillingInvoiceItems removes "billing_invoice_items" edges to BillingInvoiceItem entities.
func (biuo *BillingInvoiceUpdateOne) RemoveBillingInvoiceItems(b ...*BillingInvoiceItem) *BillingInvoiceUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biuo.RemoveBillingInvoiceItemIDs(ids...)
}

// Where appends a list predicates to the BillingInvoiceUpdate builder.
func (biuo *BillingInvoiceUpdateOne) Where(ps ...predicate.BillingInvoice) *BillingInvoiceUpdateOne {
	biuo.mutation.Where(ps...)
	return biuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (biuo *BillingInvoiceUpdateOne) Select(field string, fields ...string) *BillingInvoiceUpdateOne {
	biuo.fields = append([]string{field}, fields...)
	return biuo
}

// Save executes the query and returns the updated BillingInvoice entity.
func (biuo *BillingInvoiceUpdateOne) Save(ctx context.Context) (*BillingInvoice, error) {
	biuo.defaults()
	return withHooks(ctx, biuo.sqlSave, biuo.mutation, biuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biuo *BillingInvoiceUpdateOne) SaveX(ctx context.Context) *BillingInvoice {
	node, err := biuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biuo *BillingInvoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := biuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biuo *BillingInvoiceUpdateOne) ExecX(ctx context.Context) {
	if err := biuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biuo *BillingInvoiceUpdateOne) defaults() {
	if _, ok := biuo.mutation.UpdatedAt(); !ok {
		v := billinginvoice.UpdateDefaultUpdatedAt()
		biuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biuo *BillingInvoiceUpdateOne) check() error {
	if v, ok := biuo.mutation.Status(); ok {
		if err := billinginvoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.status": %w`, err)}
		}
	}
	if biuo.mutation.BillingProfileCleared() && len(biuo.mutation.BillingProfileIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.billing_profile"`)
	}
	if biuo.mutation.BillingWorkflowConfigCleared() && len(biuo.mutation.BillingWorkflowConfigIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoice.billing_workflow_config"`)
	}
	return nil
}

func (biuo *BillingInvoiceUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoice, err error) {
	if err := biuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoice.Table, billinginvoice.Columns, sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString))
	id, ok := biuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := biuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoice.FieldID)
		for _, f := range fields {
			if !billinginvoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := biuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biuo.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biuo.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoice.FieldDeletedAt, field.TypeTime, value)
	}
	if biuo.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoice.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := biuo.mutation.Metadata(); ok {
		_spec.SetField(billinginvoice.FieldMetadata, field.TypeJSON, value)
	}
	if biuo.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoice.FieldMetadata, field.TypeJSON)
	}
	if value, ok := biuo.mutation.Series(); ok {
		_spec.SetField(billinginvoice.FieldSeries, field.TypeString, value)
	}
	if biuo.mutation.SeriesCleared() {
		_spec.ClearField(billinginvoice.FieldSeries, field.TypeString)
	}
	if value, ok := biuo.mutation.Code(); ok {
		_spec.SetField(billinginvoice.FieldCode, field.TypeString, value)
	}
	if biuo.mutation.CodeCleared() {
		_spec.ClearField(billinginvoice.FieldCode, field.TypeString)
	}
	if value, ok := biuo.mutation.VoidedAt(); ok {
		_spec.SetField(billinginvoice.FieldVoidedAt, field.TypeTime, value)
	}
	if biuo.mutation.VoidedAtCleared() {
		_spec.ClearField(billinginvoice.FieldVoidedAt, field.TypeTime)
	}
	if value, ok := biuo.mutation.DueDate(); ok {
		_spec.SetField(billinginvoice.FieldDueDate, field.TypeTime, value)
	}
	if value, ok := biuo.mutation.Status(); ok {
		_spec.SetField(billinginvoice.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := biuo.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoice.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := biuo.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoice.FieldPeriodEnd, field.TypeTime, value)
	}
	if biuo.mutation.BillingWorkflowConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billinginvoice.BillingWorkflowConfigTable,
			Columns: []string{billinginvoice.BillingWorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.BillingWorkflowConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billinginvoice.BillingWorkflowConfigTable,
			Columns: []string{billinginvoice.BillingWorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.BillingInvoiceItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceItemsTable,
			Columns: []string{billinginvoice.BillingInvoiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.RemovedBillingInvoiceItemsIDs(); len(nodes) > 0 && !biuo.mutation.BillingInvoiceItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceItemsTable,
			Columns: []string{billinginvoice.BillingInvoiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.BillingInvoiceItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceItemsTable,
			Columns: []string{billinginvoice.BillingInvoiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingInvoice{config: biuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	biuo.mutation.done = true
	return _node, nil
}
