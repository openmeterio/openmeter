// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/plan"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionphase"
	"github.com/openmeterio/openmeter/pkg/currencyx"
)

// SubscriptionCreate is the builder for creating a Subscription entity.
type SubscriptionCreate struct {
	config
	mutation *SubscriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (sc *SubscriptionCreate) SetNamespace(s string) *SubscriptionCreate {
	sc.mutation.SetNamespace(s)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SubscriptionCreate) SetCreatedAt(t time.Time) *SubscriptionCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableCreatedAt(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SubscriptionCreate) SetUpdatedAt(t time.Time) *SubscriptionCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableUpdatedAt(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SubscriptionCreate) SetDeletedAt(t time.Time) *SubscriptionCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableDeletedAt(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetMetadata sets the "metadata" field.
func (sc *SubscriptionCreate) SetMetadata(m map[string]string) *SubscriptionCreate {
	sc.mutation.SetMetadata(m)
	return sc
}

// SetActiveFrom sets the "active_from" field.
func (sc *SubscriptionCreate) SetActiveFrom(t time.Time) *SubscriptionCreate {
	sc.mutation.SetActiveFrom(t)
	return sc
}

// SetActiveTo sets the "active_to" field.
func (sc *SubscriptionCreate) SetActiveTo(t time.Time) *SubscriptionCreate {
	sc.mutation.SetActiveTo(t)
	return sc
}

// SetNillableActiveTo sets the "active_to" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableActiveTo(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetActiveTo(*t)
	}
	return sc
}

// SetBillablesMustAlign sets the "billables_must_align" field.
func (sc *SubscriptionCreate) SetBillablesMustAlign(b bool) *SubscriptionCreate {
	sc.mutation.SetBillablesMustAlign(b)
	return sc
}

// SetNillableBillablesMustAlign sets the "billables_must_align" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableBillablesMustAlign(b *bool) *SubscriptionCreate {
	if b != nil {
		sc.SetBillablesMustAlign(*b)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *SubscriptionCreate) SetName(s string) *SubscriptionCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableName(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetName(*s)
	}
	return sc
}

// SetDescription sets the "description" field.
func (sc *SubscriptionCreate) SetDescription(s string) *SubscriptionCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableDescription(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetPlanID sets the "plan_id" field.
func (sc *SubscriptionCreate) SetPlanID(s string) *SubscriptionCreate {
	sc.mutation.SetPlanID(s)
	return sc
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillablePlanID(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetPlanID(*s)
	}
	return sc
}

// SetCustomerID sets the "customer_id" field.
func (sc *SubscriptionCreate) SetCustomerID(s string) *SubscriptionCreate {
	sc.mutation.SetCustomerID(s)
	return sc
}

// SetCurrency sets the "currency" field.
func (sc *SubscriptionCreate) SetCurrency(c currencyx.Code) *SubscriptionCreate {
	sc.mutation.SetCurrency(c)
	return sc
}

// SetLastEditedAt sets the "last_edited_at" field.
func (sc *SubscriptionCreate) SetLastEditedAt(t time.Time) *SubscriptionCreate {
	sc.mutation.SetLastEditedAt(t)
	return sc
}

// SetNillableLastEditedAt sets the "last_edited_at" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableLastEditedAt(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetLastEditedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SubscriptionCreate) SetID(s string) *SubscriptionCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableID(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetID(*s)
	}
	return sc
}

// SetPlan sets the "plan" edge to the Plan entity.
func (sc *SubscriptionCreate) SetPlan(p *Plan) *SubscriptionCreate {
	return sc.SetPlanID(p.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (sc *SubscriptionCreate) SetCustomer(c *Customer) *SubscriptionCreate {
	return sc.SetCustomerID(c.ID)
}

// AddPhaseIDs adds the "phases" edge to the SubscriptionPhase entity by IDs.
func (sc *SubscriptionCreate) AddPhaseIDs(ids ...string) *SubscriptionCreate {
	sc.mutation.AddPhaseIDs(ids...)
	return sc
}

// AddPhases adds the "phases" edges to the SubscriptionPhase entity.
func (sc *SubscriptionCreate) AddPhases(s ...*SubscriptionPhase) *SubscriptionCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddPhaseIDs(ids...)
}

// AddBillingLineIDs adds the "billing_lines" edge to the BillingInvoiceLine entity by IDs.
func (sc *SubscriptionCreate) AddBillingLineIDs(ids ...string) *SubscriptionCreate {
	sc.mutation.AddBillingLineIDs(ids...)
	return sc
}

// AddBillingLines adds the "billing_lines" edges to the BillingInvoiceLine entity.
func (sc *SubscriptionCreate) AddBillingLines(b ...*BillingInvoiceLine) *SubscriptionCreate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return sc.AddBillingLineIDs(ids...)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (sc *SubscriptionCreate) Mutation() *SubscriptionMutation {
	return sc.mutation
}

// Save creates the Subscription in the database.
func (sc *SubscriptionCreate) Save(ctx context.Context) (*Subscription, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubscriptionCreate) SaveX(ctx context.Context) *Subscription {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubscriptionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubscriptionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SubscriptionCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := subscription.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := subscription.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.BillablesMustAlign(); !ok {
		v := subscription.DefaultBillablesMustAlign
		sc.mutation.SetBillablesMustAlign(v)
	}
	if _, ok := sc.mutation.Name(); !ok {
		v := subscription.DefaultName
		sc.mutation.SetName(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := subscription.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubscriptionCreate) check() error {
	if _, ok := sc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "Subscription.namespace"`)}
	}
	if v, ok := sc.mutation.Namespace(); ok {
		if err := subscription.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "Subscription.namespace": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Subscription.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Subscription.updated_at"`)}
	}
	if _, ok := sc.mutation.ActiveFrom(); !ok {
		return &ValidationError{Name: "active_from", err: errors.New(`db: missing required field "Subscription.active_from"`)}
	}
	if _, ok := sc.mutation.BillablesMustAlign(); !ok {
		return &ValidationError{Name: "billables_must_align", err: errors.New(`db: missing required field "Subscription.billables_must_align"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "Subscription.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := subscription.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Subscription.name": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`db: missing required field "Subscription.customer_id"`)}
	}
	if v, ok := sc.mutation.CustomerID(); ok {
		if err := subscription.CustomerIDValidator(v); err != nil {
			return &ValidationError{Name: "customer_id", err: fmt.Errorf(`db: validator failed for field "Subscription.customer_id": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`db: missing required field "Subscription.currency"`)}
	}
	if v, ok := sc.mutation.Currency(); ok {
		if err := subscription.CurrencyValidator(string(v)); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`db: validator failed for field "Subscription.currency": %w`, err)}
		}
	}
	if len(sc.mutation.CustomerIDs()) == 0 {
		return &ValidationError{Name: "customer", err: errors.New(`db: missing required edge "Subscription.customer"`)}
	}
	return nil
}

func (sc *SubscriptionCreate) sqlSave(ctx context.Context) (*Subscription, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Subscription.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubscriptionCreate) createSpec() (*Subscription, *sqlgraph.CreateSpec) {
	var (
		_node = &Subscription{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(subscription.Table, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Namespace(); ok {
		_spec.SetField(subscription.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(subscription.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(subscription.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := sc.mutation.Metadata(); ok {
		_spec.SetField(subscription.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := sc.mutation.ActiveFrom(); ok {
		_spec.SetField(subscription.FieldActiveFrom, field.TypeTime, value)
		_node.ActiveFrom = value
	}
	if value, ok := sc.mutation.ActiveTo(); ok {
		_spec.SetField(subscription.FieldActiveTo, field.TypeTime, value)
		_node.ActiveTo = &value
	}
	if value, ok := sc.mutation.BillablesMustAlign(); ok {
		_spec.SetField(subscription.FieldBillablesMustAlign, field.TypeBool, value)
		_node.BillablesMustAlign = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(subscription.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(subscription.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := sc.mutation.Currency(); ok {
		_spec.SetField(subscription.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := sc.mutation.LastEditedAt(); ok {
		_spec.SetField(subscription.FieldLastEditedAt, field.TypeTime, value)
		_node.LastEditedAt = &value
	}
	if nodes := sc.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.PlanTable,
			Columns: []string{subscription.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlanID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.CustomerTable,
			Columns: []string{subscription.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.PhasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.PhasesTable,
			Columns: []string{subscription.PhasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.BillingLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscription.BillingLinesTable,
			Columns: []string{subscription.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Subscription.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (sc *SubscriptionCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionUpsertOne {
	sc.conflict = opts
	return &SubscriptionUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SubscriptionCreate) OnConflictColumns(columns ...string) *SubscriptionUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionUpsertOne{
		create: sc,
	}
}

type (
	// SubscriptionUpsertOne is the builder for "upsert"-ing
	//  one Subscription node.
	SubscriptionUpsertOne struct {
		create *SubscriptionCreate
	}

	// SubscriptionUpsert is the "OnConflict" setter.
	SubscriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionUpsert) SetUpdatedAt(v time.Time) *SubscriptionUpsert {
	u.Set(subscription.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateUpdatedAt() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionUpsert) SetDeletedAt(v time.Time) *SubscriptionUpsert {
	u.Set(subscription.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateDeletedAt() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionUpsert) ClearDeletedAt() *SubscriptionUpsert {
	u.SetNull(subscription.FieldDeletedAt)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *SubscriptionUpsert) SetMetadata(v map[string]string) *SubscriptionUpsert {
	u.Set(subscription.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateMetadata() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SubscriptionUpsert) ClearMetadata() *SubscriptionUpsert {
	u.SetNull(subscription.FieldMetadata)
	return u
}

// SetActiveTo sets the "active_to" field.
func (u *SubscriptionUpsert) SetActiveTo(v time.Time) *SubscriptionUpsert {
	u.Set(subscription.FieldActiveTo, v)
	return u
}

// UpdateActiveTo sets the "active_to" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateActiveTo() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldActiveTo)
	return u
}

// ClearActiveTo clears the value of the "active_to" field.
func (u *SubscriptionUpsert) ClearActiveTo() *SubscriptionUpsert {
	u.SetNull(subscription.FieldActiveTo)
	return u
}

// SetBillablesMustAlign sets the "billables_must_align" field.
func (u *SubscriptionUpsert) SetBillablesMustAlign(v bool) *SubscriptionUpsert {
	u.Set(subscription.FieldBillablesMustAlign, v)
	return u
}

// UpdateBillablesMustAlign sets the "billables_must_align" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateBillablesMustAlign() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldBillablesMustAlign)
	return u
}

// SetName sets the "name" field.
func (u *SubscriptionUpsert) SetName(v string) *SubscriptionUpsert {
	u.Set(subscription.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateName() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *SubscriptionUpsert) SetDescription(v string) *SubscriptionUpsert {
	u.Set(subscription.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateDescription() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *SubscriptionUpsert) ClearDescription() *SubscriptionUpsert {
	u.SetNull(subscription.FieldDescription)
	return u
}

// SetPlanID sets the "plan_id" field.
func (u *SubscriptionUpsert) SetPlanID(v string) *SubscriptionUpsert {
	u.Set(subscription.FieldPlanID, v)
	return u
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdatePlanID() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldPlanID)
	return u
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *SubscriptionUpsert) ClearPlanID() *SubscriptionUpsert {
	u.SetNull(subscription.FieldPlanID)
	return u
}

// SetLastEditedAt sets the "last_edited_at" field.
func (u *SubscriptionUpsert) SetLastEditedAt(v time.Time) *SubscriptionUpsert {
	u.Set(subscription.FieldLastEditedAt, v)
	return u
}

// UpdateLastEditedAt sets the "last_edited_at" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateLastEditedAt() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldLastEditedAt)
	return u
}

// ClearLastEditedAt clears the value of the "last_edited_at" field.
func (u *SubscriptionUpsert) ClearLastEditedAt() *SubscriptionUpsert {
	u.SetNull(subscription.FieldLastEditedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionUpsertOne) UpdateNewValues() *SubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscription.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(subscription.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(subscription.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.ActiveFrom(); exists {
			s.SetIgnore(subscription.FieldActiveFrom)
		}
		if _, exists := u.create.mutation.CustomerID(); exists {
			s.SetIgnore(subscription.FieldCustomerID)
		}
		if _, exists := u.create.mutation.Currency(); exists {
			s.SetIgnore(subscription.FieldCurrency)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Subscription.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionUpsertOne) Ignore() *SubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionUpsertOne) DoNothing() *SubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionCreate.OnConflict
// documentation for more info.
func (u *SubscriptionUpsertOne) Update(set func(*SubscriptionUpsert)) *SubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionUpsertOne) SetUpdatedAt(v time.Time) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateUpdatedAt() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionUpsertOne) SetDeletedAt(v time.Time) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateDeletedAt() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionUpsertOne) ClearDeletedAt() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *SubscriptionUpsertOne) SetMetadata(v map[string]string) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateMetadata() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SubscriptionUpsertOne) ClearMetadata() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearMetadata()
	})
}

// SetActiveTo sets the "active_to" field.
func (u *SubscriptionUpsertOne) SetActiveTo(v time.Time) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetActiveTo(v)
	})
}

// UpdateActiveTo sets the "active_to" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateActiveTo() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateActiveTo()
	})
}

// ClearActiveTo clears the value of the "active_to" field.
func (u *SubscriptionUpsertOne) ClearActiveTo() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearActiveTo()
	})
}

// SetBillablesMustAlign sets the "billables_must_align" field.
func (u *SubscriptionUpsertOne) SetBillablesMustAlign(v bool) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetBillablesMustAlign(v)
	})
}

// UpdateBillablesMustAlign sets the "billables_must_align" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateBillablesMustAlign() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateBillablesMustAlign()
	})
}

// SetName sets the "name" field.
func (u *SubscriptionUpsertOne) SetName(v string) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateName() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *SubscriptionUpsertOne) SetDescription(v string) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateDescription() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SubscriptionUpsertOne) ClearDescription() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearDescription()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *SubscriptionUpsertOne) SetPlanID(v string) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdatePlanID() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdatePlanID()
	})
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *SubscriptionUpsertOne) ClearPlanID() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearPlanID()
	})
}

// SetLastEditedAt sets the "last_edited_at" field.
func (u *SubscriptionUpsertOne) SetLastEditedAt(v time.Time) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetLastEditedAt(v)
	})
}

// UpdateLastEditedAt sets the "last_edited_at" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateLastEditedAt() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateLastEditedAt()
	})
}

// ClearLastEditedAt clears the value of the "last_edited_at" field.
func (u *SubscriptionUpsertOne) ClearLastEditedAt() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearLastEditedAt()
	})
}

// Exec executes the query.
func (u *SubscriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: SubscriptionUpsertOne.ID is not supported by MySQL driver. Use SubscriptionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionCreateBulk is the builder for creating many Subscription entities in bulk.
type SubscriptionCreateBulk struct {
	config
	err      error
	builders []*SubscriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the Subscription entities in the database.
func (scb *SubscriptionCreateBulk) Save(ctx context.Context) ([]*Subscription, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Subscription, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubscriptionCreateBulk) SaveX(ctx context.Context) []*Subscription {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Subscription.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (scb *SubscriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionUpsertBulk {
	scb.conflict = opts
	return &SubscriptionUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SubscriptionCreateBulk) OnConflictColumns(columns ...string) *SubscriptionUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionUpsertBulk{
		create: scb,
	}
}

// SubscriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of Subscription nodes.
type SubscriptionUpsertBulk struct {
	create *SubscriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionUpsertBulk) UpdateNewValues() *SubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscription.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(subscription.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(subscription.FieldCreatedAt)
			}
			if _, exists := b.mutation.ActiveFrom(); exists {
				s.SetIgnore(subscription.FieldActiveFrom)
			}
			if _, exists := b.mutation.CustomerID(); exists {
				s.SetIgnore(subscription.FieldCustomerID)
			}
			if _, exists := b.mutation.Currency(); exists {
				s.SetIgnore(subscription.FieldCurrency)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionUpsertBulk) Ignore() *SubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionUpsertBulk) DoNothing() *SubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionUpsertBulk) Update(set func(*SubscriptionUpsert)) *SubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionUpsertBulk) SetUpdatedAt(v time.Time) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateUpdatedAt() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionUpsertBulk) SetDeletedAt(v time.Time) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateDeletedAt() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionUpsertBulk) ClearDeletedAt() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *SubscriptionUpsertBulk) SetMetadata(v map[string]string) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateMetadata() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SubscriptionUpsertBulk) ClearMetadata() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearMetadata()
	})
}

// SetActiveTo sets the "active_to" field.
func (u *SubscriptionUpsertBulk) SetActiveTo(v time.Time) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetActiveTo(v)
	})
}

// UpdateActiveTo sets the "active_to" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateActiveTo() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateActiveTo()
	})
}

// ClearActiveTo clears the value of the "active_to" field.
func (u *SubscriptionUpsertBulk) ClearActiveTo() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearActiveTo()
	})
}

// SetBillablesMustAlign sets the "billables_must_align" field.
func (u *SubscriptionUpsertBulk) SetBillablesMustAlign(v bool) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetBillablesMustAlign(v)
	})
}

// UpdateBillablesMustAlign sets the "billables_must_align" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateBillablesMustAlign() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateBillablesMustAlign()
	})
}

// SetName sets the "name" field.
func (u *SubscriptionUpsertBulk) SetName(v string) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateName() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *SubscriptionUpsertBulk) SetDescription(v string) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateDescription() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SubscriptionUpsertBulk) ClearDescription() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearDescription()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *SubscriptionUpsertBulk) SetPlanID(v string) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdatePlanID() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdatePlanID()
	})
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *SubscriptionUpsertBulk) ClearPlanID() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearPlanID()
	})
}

// SetLastEditedAt sets the "last_edited_at" field.
func (u *SubscriptionUpsertBulk) SetLastEditedAt(v time.Time) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetLastEditedAt(v)
	})
}

// UpdateLastEditedAt sets the "last_edited_at" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateLastEditedAt() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateLastEditedAt()
	})
}

// ClearLastEditedAt clears the value of the "last_edited_at" field.
func (u *SubscriptionUpsertBulk) ClearLastEditedAt() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearLastEditedAt()
	})
}

// Exec executes the query.
func (u *SubscriptionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the SubscriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
