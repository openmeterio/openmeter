// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonratecarditemlink"
)

// SubscriptionAddonRateCardCreate is the builder for creating a SubscriptionAddonRateCard entity.
type SubscriptionAddonRateCardCreate struct {
	config
	mutation *SubscriptionAddonRateCardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (sarcc *SubscriptionAddonRateCardCreate) SetNamespace(s string) *SubscriptionAddonRateCardCreate {
	sarcc.mutation.SetNamespace(s)
	return sarcc
}

// SetCreatedAt sets the "created_at" field.
func (sarcc *SubscriptionAddonRateCardCreate) SetCreatedAt(t time.Time) *SubscriptionAddonRateCardCreate {
	sarcc.mutation.SetCreatedAt(t)
	return sarcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sarcc *SubscriptionAddonRateCardCreate) SetNillableCreatedAt(t *time.Time) *SubscriptionAddonRateCardCreate {
	if t != nil {
		sarcc.SetCreatedAt(*t)
	}
	return sarcc
}

// SetUpdatedAt sets the "updated_at" field.
func (sarcc *SubscriptionAddonRateCardCreate) SetUpdatedAt(t time.Time) *SubscriptionAddonRateCardCreate {
	sarcc.mutation.SetUpdatedAt(t)
	return sarcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sarcc *SubscriptionAddonRateCardCreate) SetNillableUpdatedAt(t *time.Time) *SubscriptionAddonRateCardCreate {
	if t != nil {
		sarcc.SetUpdatedAt(*t)
	}
	return sarcc
}

// SetDeletedAt sets the "deleted_at" field.
func (sarcc *SubscriptionAddonRateCardCreate) SetDeletedAt(t time.Time) *SubscriptionAddonRateCardCreate {
	sarcc.mutation.SetDeletedAt(t)
	return sarcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sarcc *SubscriptionAddonRateCardCreate) SetNillableDeletedAt(t *time.Time) *SubscriptionAddonRateCardCreate {
	if t != nil {
		sarcc.SetDeletedAt(*t)
	}
	return sarcc
}

// SetMetadata sets the "metadata" field.
func (sarcc *SubscriptionAddonRateCardCreate) SetMetadata(m map[string]string) *SubscriptionAddonRateCardCreate {
	sarcc.mutation.SetMetadata(m)
	return sarcc
}

// SetSubscriptionAddonID sets the "subscription_addon_id" field.
func (sarcc *SubscriptionAddonRateCardCreate) SetSubscriptionAddonID(s string) *SubscriptionAddonRateCardCreate {
	sarcc.mutation.SetSubscriptionAddonID(s)
	return sarcc
}

// SetAddonRatecardID sets the "addon_ratecard_id" field.
func (sarcc *SubscriptionAddonRateCardCreate) SetAddonRatecardID(s string) *SubscriptionAddonRateCardCreate {
	sarcc.mutation.SetAddonRatecardID(s)
	return sarcc
}

// SetID sets the "id" field.
func (sarcc *SubscriptionAddonRateCardCreate) SetID(s string) *SubscriptionAddonRateCardCreate {
	sarcc.mutation.SetID(s)
	return sarcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sarcc *SubscriptionAddonRateCardCreate) SetNillableID(s *string) *SubscriptionAddonRateCardCreate {
	if s != nil {
		sarcc.SetID(*s)
	}
	return sarcc
}

// SetSubscriptionAddon sets the "subscription_addon" edge to the SubscriptionAddon entity.
func (sarcc *SubscriptionAddonRateCardCreate) SetSubscriptionAddon(s *SubscriptionAddon) *SubscriptionAddonRateCardCreate {
	return sarcc.SetSubscriptionAddonID(s.ID)
}

// AddItemIDs adds the "items" edge to the SubscriptionAddonRateCardItemLink entity by IDs.
func (sarcc *SubscriptionAddonRateCardCreate) AddItemIDs(ids ...string) *SubscriptionAddonRateCardCreate {
	sarcc.mutation.AddItemIDs(ids...)
	return sarcc
}

// AddItems adds the "items" edges to the SubscriptionAddonRateCardItemLink entity.
func (sarcc *SubscriptionAddonRateCardCreate) AddItems(s ...*SubscriptionAddonRateCardItemLink) *SubscriptionAddonRateCardCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sarcc.AddItemIDs(ids...)
}

// SetAddonRatecard sets the "addon_ratecard" edge to the AddonRateCard entity.
func (sarcc *SubscriptionAddonRateCardCreate) SetAddonRatecard(a *AddonRateCard) *SubscriptionAddonRateCardCreate {
	return sarcc.SetAddonRatecardID(a.ID)
}

// Mutation returns the SubscriptionAddonRateCardMutation object of the builder.
func (sarcc *SubscriptionAddonRateCardCreate) Mutation() *SubscriptionAddonRateCardMutation {
	return sarcc.mutation
}

// Save creates the SubscriptionAddonRateCard in the database.
func (sarcc *SubscriptionAddonRateCardCreate) Save(ctx context.Context) (*SubscriptionAddonRateCard, error) {
	sarcc.defaults()
	return withHooks(ctx, sarcc.sqlSave, sarcc.mutation, sarcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sarcc *SubscriptionAddonRateCardCreate) SaveX(ctx context.Context) *SubscriptionAddonRateCard {
	v, err := sarcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sarcc *SubscriptionAddonRateCardCreate) Exec(ctx context.Context) error {
	_, err := sarcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sarcc *SubscriptionAddonRateCardCreate) ExecX(ctx context.Context) {
	if err := sarcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sarcc *SubscriptionAddonRateCardCreate) defaults() {
	if _, ok := sarcc.mutation.CreatedAt(); !ok {
		v := subscriptionaddonratecard.DefaultCreatedAt()
		sarcc.mutation.SetCreatedAt(v)
	}
	if _, ok := sarcc.mutation.UpdatedAt(); !ok {
		v := subscriptionaddonratecard.DefaultUpdatedAt()
		sarcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sarcc.mutation.ID(); !ok {
		v := subscriptionaddonratecard.DefaultID()
		sarcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sarcc *SubscriptionAddonRateCardCreate) check() error {
	if _, ok := sarcc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "SubscriptionAddonRateCard.namespace"`)}
	}
	if v, ok := sarcc.mutation.Namespace(); ok {
		if err := subscriptionaddonratecard.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "SubscriptionAddonRateCard.namespace": %w`, err)}
		}
	}
	if _, ok := sarcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "SubscriptionAddonRateCard.created_at"`)}
	}
	if _, ok := sarcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "SubscriptionAddonRateCard.updated_at"`)}
	}
	if _, ok := sarcc.mutation.SubscriptionAddonID(); !ok {
		return &ValidationError{Name: "subscription_addon_id", err: errors.New(`db: missing required field "SubscriptionAddonRateCard.subscription_addon_id"`)}
	}
	if v, ok := sarcc.mutation.SubscriptionAddonID(); ok {
		if err := subscriptionaddonratecard.SubscriptionAddonIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_addon_id", err: fmt.Errorf(`db: validator failed for field "SubscriptionAddonRateCard.subscription_addon_id": %w`, err)}
		}
	}
	if _, ok := sarcc.mutation.AddonRatecardID(); !ok {
		return &ValidationError{Name: "addon_ratecard_id", err: errors.New(`db: missing required field "SubscriptionAddonRateCard.addon_ratecard_id"`)}
	}
	if v, ok := sarcc.mutation.AddonRatecardID(); ok {
		if err := subscriptionaddonratecard.AddonRatecardIDValidator(v); err != nil {
			return &ValidationError{Name: "addon_ratecard_id", err: fmt.Errorf(`db: validator failed for field "SubscriptionAddonRateCard.addon_ratecard_id": %w`, err)}
		}
	}
	if len(sarcc.mutation.SubscriptionAddonIDs()) == 0 {
		return &ValidationError{Name: "subscription_addon", err: errors.New(`db: missing required edge "SubscriptionAddonRateCard.subscription_addon"`)}
	}
	if len(sarcc.mutation.AddonRatecardIDs()) == 0 {
		return &ValidationError{Name: "addon_ratecard", err: errors.New(`db: missing required edge "SubscriptionAddonRateCard.addon_ratecard"`)}
	}
	return nil
}

func (sarcc *SubscriptionAddonRateCardCreate) sqlSave(ctx context.Context) (*SubscriptionAddonRateCard, error) {
	if err := sarcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sarcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sarcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubscriptionAddonRateCard.ID type: %T", _spec.ID.Value)
		}
	}
	sarcc.mutation.id = &_node.ID
	sarcc.mutation.done = true
	return _node, nil
}

func (sarcc *SubscriptionAddonRateCardCreate) createSpec() (*SubscriptionAddonRateCard, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionAddonRateCard{config: sarcc.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionaddonratecard.Table, sqlgraph.NewFieldSpec(subscriptionaddonratecard.FieldID, field.TypeString))
	)
	_spec.OnConflict = sarcc.conflict
	if id, ok := sarcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sarcc.mutation.Namespace(); ok {
		_spec.SetField(subscriptionaddonratecard.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := sarcc.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptionaddonratecard.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sarcc.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionaddonratecard.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sarcc.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionaddonratecard.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := sarcc.mutation.Metadata(); ok {
		_spec.SetField(subscriptionaddonratecard.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := sarcc.mutation.SubscriptionAddonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionaddonratecard.SubscriptionAddonTable,
			Columns: []string{subscriptionaddonratecard.SubscriptionAddonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionAddonID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sarcc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionaddonratecard.ItemsTable,
			Columns: []string{subscriptionaddonratecard.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonratecarditemlink.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sarcc.mutation.AddonRatecardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionaddonratecard.AddonRatecardTable,
			Columns: []string{subscriptionaddonratecard.AddonRatecardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AddonRatecardID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionAddonRateCard.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionAddonRateCardUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (sarcc *SubscriptionAddonRateCardCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionAddonRateCardUpsertOne {
	sarcc.conflict = opts
	return &SubscriptionAddonRateCardUpsertOne{
		create: sarcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionAddonRateCard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sarcc *SubscriptionAddonRateCardCreate) OnConflictColumns(columns ...string) *SubscriptionAddonRateCardUpsertOne {
	sarcc.conflict = append(sarcc.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionAddonRateCardUpsertOne{
		create: sarcc,
	}
}

type (
	// SubscriptionAddonRateCardUpsertOne is the builder for "upsert"-ing
	//  one SubscriptionAddonRateCard node.
	SubscriptionAddonRateCardUpsertOne struct {
		create *SubscriptionAddonRateCardCreate
	}

	// SubscriptionAddonRateCardUpsert is the "OnConflict" setter.
	SubscriptionAddonRateCardUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionAddonRateCardUpsert) SetUpdatedAt(v time.Time) *SubscriptionAddonRateCardUpsert {
	u.Set(subscriptionaddonratecard.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionAddonRateCardUpsert) UpdateUpdatedAt() *SubscriptionAddonRateCardUpsert {
	u.SetExcluded(subscriptionaddonratecard.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionAddonRateCardUpsert) SetDeletedAt(v time.Time) *SubscriptionAddonRateCardUpsert {
	u.Set(subscriptionaddonratecard.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionAddonRateCardUpsert) UpdateDeletedAt() *SubscriptionAddonRateCardUpsert {
	u.SetExcluded(subscriptionaddonratecard.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionAddonRateCardUpsert) ClearDeletedAt() *SubscriptionAddonRateCardUpsert {
	u.SetNull(subscriptionaddonratecard.FieldDeletedAt)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *SubscriptionAddonRateCardUpsert) SetMetadata(v map[string]string) *SubscriptionAddonRateCardUpsert {
	u.Set(subscriptionaddonratecard.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SubscriptionAddonRateCardUpsert) UpdateMetadata() *SubscriptionAddonRateCardUpsert {
	u.SetExcluded(subscriptionaddonratecard.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SubscriptionAddonRateCardUpsert) ClearMetadata() *SubscriptionAddonRateCardUpsert {
	u.SetNull(subscriptionaddonratecard.FieldMetadata)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SubscriptionAddonRateCard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionaddonratecard.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionAddonRateCardUpsertOne) UpdateNewValues() *SubscriptionAddonRateCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscriptionaddonratecard.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(subscriptionaddonratecard.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(subscriptionaddonratecard.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.SubscriptionAddonID(); exists {
			s.SetIgnore(subscriptionaddonratecard.FieldSubscriptionAddonID)
		}
		if _, exists := u.create.mutation.AddonRatecardID(); exists {
			s.SetIgnore(subscriptionaddonratecard.FieldAddonRatecardID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionAddonRateCard.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionAddonRateCardUpsertOne) Ignore() *SubscriptionAddonRateCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionAddonRateCardUpsertOne) DoNothing() *SubscriptionAddonRateCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionAddonRateCardCreate.OnConflict
// documentation for more info.
func (u *SubscriptionAddonRateCardUpsertOne) Update(set func(*SubscriptionAddonRateCardUpsert)) *SubscriptionAddonRateCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionAddonRateCardUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionAddonRateCardUpsertOne) SetUpdatedAt(v time.Time) *SubscriptionAddonRateCardUpsertOne {
	return u.Update(func(s *SubscriptionAddonRateCardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionAddonRateCardUpsertOne) UpdateUpdatedAt() *SubscriptionAddonRateCardUpsertOne {
	return u.Update(func(s *SubscriptionAddonRateCardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionAddonRateCardUpsertOne) SetDeletedAt(v time.Time) *SubscriptionAddonRateCardUpsertOne {
	return u.Update(func(s *SubscriptionAddonRateCardUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionAddonRateCardUpsertOne) UpdateDeletedAt() *SubscriptionAddonRateCardUpsertOne {
	return u.Update(func(s *SubscriptionAddonRateCardUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionAddonRateCardUpsertOne) ClearDeletedAt() *SubscriptionAddonRateCardUpsertOne {
	return u.Update(func(s *SubscriptionAddonRateCardUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *SubscriptionAddonRateCardUpsertOne) SetMetadata(v map[string]string) *SubscriptionAddonRateCardUpsertOne {
	return u.Update(func(s *SubscriptionAddonRateCardUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SubscriptionAddonRateCardUpsertOne) UpdateMetadata() *SubscriptionAddonRateCardUpsertOne {
	return u.Update(func(s *SubscriptionAddonRateCardUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SubscriptionAddonRateCardUpsertOne) ClearMetadata() *SubscriptionAddonRateCardUpsertOne {
	return u.Update(func(s *SubscriptionAddonRateCardUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *SubscriptionAddonRateCardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionAddonRateCardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionAddonRateCardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionAddonRateCardUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: SubscriptionAddonRateCardUpsertOne.ID is not supported by MySQL driver. Use SubscriptionAddonRateCardUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionAddonRateCardUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionAddonRateCardCreateBulk is the builder for creating many SubscriptionAddonRateCard entities in bulk.
type SubscriptionAddonRateCardCreateBulk struct {
	config
	err      error
	builders []*SubscriptionAddonRateCardCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscriptionAddonRateCard entities in the database.
func (sarccb *SubscriptionAddonRateCardCreateBulk) Save(ctx context.Context) ([]*SubscriptionAddonRateCard, error) {
	if sarccb.err != nil {
		return nil, sarccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sarccb.builders))
	nodes := make([]*SubscriptionAddonRateCard, len(sarccb.builders))
	mutators := make([]Mutator, len(sarccb.builders))
	for i := range sarccb.builders {
		func(i int, root context.Context) {
			builder := sarccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionAddonRateCardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sarccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sarccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sarccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sarccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sarccb *SubscriptionAddonRateCardCreateBulk) SaveX(ctx context.Context) []*SubscriptionAddonRateCard {
	v, err := sarccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sarccb *SubscriptionAddonRateCardCreateBulk) Exec(ctx context.Context) error {
	_, err := sarccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sarccb *SubscriptionAddonRateCardCreateBulk) ExecX(ctx context.Context) {
	if err := sarccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionAddonRateCard.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionAddonRateCardUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (sarccb *SubscriptionAddonRateCardCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionAddonRateCardUpsertBulk {
	sarccb.conflict = opts
	return &SubscriptionAddonRateCardUpsertBulk{
		create: sarccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionAddonRateCard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sarccb *SubscriptionAddonRateCardCreateBulk) OnConflictColumns(columns ...string) *SubscriptionAddonRateCardUpsertBulk {
	sarccb.conflict = append(sarccb.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionAddonRateCardUpsertBulk{
		create: sarccb,
	}
}

// SubscriptionAddonRateCardUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscriptionAddonRateCard nodes.
type SubscriptionAddonRateCardUpsertBulk struct {
	create *SubscriptionAddonRateCardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscriptionAddonRateCard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionaddonratecard.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionAddonRateCardUpsertBulk) UpdateNewValues() *SubscriptionAddonRateCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscriptionaddonratecard.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(subscriptionaddonratecard.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(subscriptionaddonratecard.FieldCreatedAt)
			}
			if _, exists := b.mutation.SubscriptionAddonID(); exists {
				s.SetIgnore(subscriptionaddonratecard.FieldSubscriptionAddonID)
			}
			if _, exists := b.mutation.AddonRatecardID(); exists {
				s.SetIgnore(subscriptionaddonratecard.FieldAddonRatecardID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionAddonRateCard.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionAddonRateCardUpsertBulk) Ignore() *SubscriptionAddonRateCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionAddonRateCardUpsertBulk) DoNothing() *SubscriptionAddonRateCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionAddonRateCardCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionAddonRateCardUpsertBulk) Update(set func(*SubscriptionAddonRateCardUpsert)) *SubscriptionAddonRateCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionAddonRateCardUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionAddonRateCardUpsertBulk) SetUpdatedAt(v time.Time) *SubscriptionAddonRateCardUpsertBulk {
	return u.Update(func(s *SubscriptionAddonRateCardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionAddonRateCardUpsertBulk) UpdateUpdatedAt() *SubscriptionAddonRateCardUpsertBulk {
	return u.Update(func(s *SubscriptionAddonRateCardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionAddonRateCardUpsertBulk) SetDeletedAt(v time.Time) *SubscriptionAddonRateCardUpsertBulk {
	return u.Update(func(s *SubscriptionAddonRateCardUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionAddonRateCardUpsertBulk) UpdateDeletedAt() *SubscriptionAddonRateCardUpsertBulk {
	return u.Update(func(s *SubscriptionAddonRateCardUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionAddonRateCardUpsertBulk) ClearDeletedAt() *SubscriptionAddonRateCardUpsertBulk {
	return u.Update(func(s *SubscriptionAddonRateCardUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *SubscriptionAddonRateCardUpsertBulk) SetMetadata(v map[string]string) *SubscriptionAddonRateCardUpsertBulk {
	return u.Update(func(s *SubscriptionAddonRateCardUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SubscriptionAddonRateCardUpsertBulk) UpdateMetadata() *SubscriptionAddonRateCardUpsertBulk {
	return u.Update(func(s *SubscriptionAddonRateCardUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SubscriptionAddonRateCardUpsertBulk) ClearMetadata() *SubscriptionAddonRateCardUpsertBulk {
	return u.Update(func(s *SubscriptionAddonRateCardUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *SubscriptionAddonRateCardUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the SubscriptionAddonRateCardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionAddonRateCardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionAddonRateCardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
