// Code generated by ent, DO NOT EDIT.

package billinginvoicediscount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldContainsFold(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldNamespace, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldDeletedAt, v))
}

// InvoiceID applies equality check predicate on the "invoice_id" field. It's identical to InvoiceIDEQ.
func InvoiceID(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldInvoiceID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldDescription, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v alpacadecimal.Decimal) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldAmount, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldContainsFold(FieldNamespace, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNotNull(FieldDeletedAt))
}

// InvoiceIDEQ applies the EQ predicate on the "invoice_id" field.
func InvoiceIDEQ(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldInvoiceID, v))
}

// InvoiceIDNEQ applies the NEQ predicate on the "invoice_id" field.
func InvoiceIDNEQ(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNEQ(FieldInvoiceID, v))
}

// InvoiceIDIn applies the In predicate on the "invoice_id" field.
func InvoiceIDIn(vs ...string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldIn(FieldInvoiceID, vs...))
}

// InvoiceIDNotIn applies the NotIn predicate on the "invoice_id" field.
func InvoiceIDNotIn(vs ...string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNotIn(FieldInvoiceID, vs...))
}

// InvoiceIDGT applies the GT predicate on the "invoice_id" field.
func InvoiceIDGT(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldGT(FieldInvoiceID, v))
}

// InvoiceIDGTE applies the GTE predicate on the "invoice_id" field.
func InvoiceIDGTE(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldGTE(FieldInvoiceID, v))
}

// InvoiceIDLT applies the LT predicate on the "invoice_id" field.
func InvoiceIDLT(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldLT(FieldInvoiceID, v))
}

// InvoiceIDLTE applies the LTE predicate on the "invoice_id" field.
func InvoiceIDLTE(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldLTE(FieldInvoiceID, v))
}

// InvoiceIDContains applies the Contains predicate on the "invoice_id" field.
func InvoiceIDContains(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldContains(FieldInvoiceID, v))
}

// InvoiceIDHasPrefix applies the HasPrefix predicate on the "invoice_id" field.
func InvoiceIDHasPrefix(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldHasPrefix(FieldInvoiceID, v))
}

// InvoiceIDHasSuffix applies the HasSuffix predicate on the "invoice_id" field.
func InvoiceIDHasSuffix(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldHasSuffix(FieldInvoiceID, v))
}

// InvoiceIDEqualFold applies the EqualFold predicate on the "invoice_id" field.
func InvoiceIDEqualFold(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEqualFold(FieldInvoiceID, v))
}

// InvoiceIDContainsFold applies the ContainsFold predicate on the "invoice_id" field.
func InvoiceIDContainsFold(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldContainsFold(FieldInvoiceID, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldContainsFold(FieldDescription, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v billing.DiscountType) predicate.BillingInvoiceDiscount {
	vc := v
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v billing.DiscountType) predicate.BillingInvoiceDiscount {
	vc := v
	return predicate.BillingInvoiceDiscount(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...billing.DiscountType) predicate.BillingInvoiceDiscount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BillingInvoiceDiscount(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...billing.DiscountType) predicate.BillingInvoiceDiscount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BillingInvoiceDiscount(sql.FieldNotIn(FieldType, v...))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v alpacadecimal.Decimal) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v alpacadecimal.Decimal) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...alpacadecimal.Decimal) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...alpacadecimal.Decimal) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v alpacadecimal.Decimal) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v alpacadecimal.Decimal) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v alpacadecimal.Decimal) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v alpacadecimal.Decimal) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldLTE(FieldAmount, v))
}

// LineIdsIsNil applies the IsNil predicate on the "line_ids" field.
func LineIdsIsNil() predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldIsNull(FieldLineIds))
}

// LineIdsNotNil applies the NotNil predicate on the "line_ids" field.
func LineIdsNotNil() predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.FieldNotNull(FieldLineIds))
}

// HasInvoice applies the HasEdge predicate on the "invoice" edge.
func HasInvoice() predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InvoiceTable, InvoiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvoiceWith applies the HasEdge predicate on the "invoice" edge with a given conditions (other predicates).
func HasInvoiceWith(preds ...predicate.BillingInvoice) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(func(s *sql.Selector) {
		step := newInvoiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLines applies the HasEdge predicate on the "lines" edge.
func HasLines() predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LinesTable, LinesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLinesWith applies the HasEdge predicate on the "lines" edge with a given conditions (other predicates).
func HasLinesWith(preds ...predicate.BillingInvoiceLine) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(func(s *sql.Selector) {
		step := newLinesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BillingInvoiceDiscount) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BillingInvoiceDiscount) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BillingInvoiceDiscount) predicate.BillingInvoiceDiscount {
	return predicate.BillingInvoiceDiscount(sql.NotPredicates(p))
}
