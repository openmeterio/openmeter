// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonratecarditemlink"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
)

// SubscriptionAddonRateCardItemLink is the model entity for the SubscriptionAddonRateCardItemLink schema.
type SubscriptionAddonRateCardItemLink struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// SubscriptionAddonRateCardID holds the value of the "subscription_addon_rate_card_id" field.
	SubscriptionAddonRateCardID string `json:"subscription_addon_rate_card_id,omitempty"`
	// SubscriptionItemID holds the value of the "subscription_item_id" field.
	SubscriptionItemID string `json:"subscription_item_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionAddonRateCardItemLinkQuery when eager-loading is set.
	Edges        SubscriptionAddonRateCardItemLinkEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubscriptionAddonRateCardItemLinkEdges holds the relations/edges for other nodes in the graph.
type SubscriptionAddonRateCardItemLinkEdges struct {
	// SubscriptionAddonRateCard holds the value of the subscription_addon_rate_card edge.
	SubscriptionAddonRateCard *SubscriptionAddonRateCard `json:"subscription_addon_rate_card,omitempty"`
	// SubscriptionItem holds the value of the subscription_item edge.
	SubscriptionItem *SubscriptionItem `json:"subscription_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SubscriptionAddonRateCardOrErr returns the SubscriptionAddonRateCard value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionAddonRateCardItemLinkEdges) SubscriptionAddonRateCardOrErr() (*SubscriptionAddonRateCard, error) {
	if e.SubscriptionAddonRateCard != nil {
		return e.SubscriptionAddonRateCard, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: subscriptionaddonratecard.Label}
	}
	return nil, &NotLoadedError{edge: "subscription_addon_rate_card"}
}

// SubscriptionItemOrErr returns the SubscriptionItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionAddonRateCardItemLinkEdges) SubscriptionItemOrErr() (*SubscriptionItem, error) {
	if e.SubscriptionItem != nil {
		return e.SubscriptionItem, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: subscriptionitem.Label}
	}
	return nil, &NotLoadedError{edge: "subscription_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionAddonRateCardItemLink) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptionaddonratecarditemlink.FieldID, subscriptionaddonratecarditemlink.FieldSubscriptionAddonRateCardID, subscriptionaddonratecarditemlink.FieldSubscriptionItemID:
			values[i] = new(sql.NullString)
		case subscriptionaddonratecarditemlink.FieldCreatedAt, subscriptionaddonratecarditemlink.FieldUpdatedAt, subscriptionaddonratecarditemlink.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionAddonRateCardItemLink fields.
func (sarcil *SubscriptionAddonRateCardItemLink) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptionaddonratecarditemlink.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sarcil.ID = value.String
			}
		case subscriptionaddonratecarditemlink.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sarcil.CreatedAt = value.Time
			}
		case subscriptionaddonratecarditemlink.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sarcil.UpdatedAt = value.Time
			}
		case subscriptionaddonratecarditemlink.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sarcil.DeletedAt = new(time.Time)
				*sarcil.DeletedAt = value.Time
			}
		case subscriptionaddonratecarditemlink.FieldSubscriptionAddonRateCardID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_addon_rate_card_id", values[i])
			} else if value.Valid {
				sarcil.SubscriptionAddonRateCardID = value.String
			}
		case subscriptionaddonratecarditemlink.FieldSubscriptionItemID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_item_id", values[i])
			} else if value.Valid {
				sarcil.SubscriptionItemID = value.String
			}
		default:
			sarcil.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscriptionAddonRateCardItemLink.
// This includes values selected through modifiers, order, etc.
func (sarcil *SubscriptionAddonRateCardItemLink) Value(name string) (ent.Value, error) {
	return sarcil.selectValues.Get(name)
}

// QuerySubscriptionAddonRateCard queries the "subscription_addon_rate_card" edge of the SubscriptionAddonRateCardItemLink entity.
func (sarcil *SubscriptionAddonRateCardItemLink) QuerySubscriptionAddonRateCard() *SubscriptionAddonRateCardQuery {
	return NewSubscriptionAddonRateCardItemLinkClient(sarcil.config).QuerySubscriptionAddonRateCard(sarcil)
}

// QuerySubscriptionItem queries the "subscription_item" edge of the SubscriptionAddonRateCardItemLink entity.
func (sarcil *SubscriptionAddonRateCardItemLink) QuerySubscriptionItem() *SubscriptionItemQuery {
	return NewSubscriptionAddonRateCardItemLinkClient(sarcil.config).QuerySubscriptionItem(sarcil)
}

// Update returns a builder for updating this SubscriptionAddonRateCardItemLink.
// Note that you need to call SubscriptionAddonRateCardItemLink.Unwrap() before calling this method if this SubscriptionAddonRateCardItemLink
// was returned from a transaction, and the transaction was committed or rolled back.
func (sarcil *SubscriptionAddonRateCardItemLink) Update() *SubscriptionAddonRateCardItemLinkUpdateOne {
	return NewSubscriptionAddonRateCardItemLinkClient(sarcil.config).UpdateOne(sarcil)
}

// Unwrap unwraps the SubscriptionAddonRateCardItemLink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sarcil *SubscriptionAddonRateCardItemLink) Unwrap() *SubscriptionAddonRateCardItemLink {
	_tx, ok := sarcil.config.driver.(*txDriver)
	if !ok {
		panic("db: SubscriptionAddonRateCardItemLink is not a transactional entity")
	}
	sarcil.config.driver = _tx.drv
	return sarcil
}

// String implements the fmt.Stringer.
func (sarcil *SubscriptionAddonRateCardItemLink) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionAddonRateCardItemLink(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sarcil.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sarcil.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sarcil.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := sarcil.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("subscription_addon_rate_card_id=")
	builder.WriteString(sarcil.SubscriptionAddonRateCardID)
	builder.WriteString(", ")
	builder.WriteString("subscription_item_id=")
	builder.WriteString(sarcil.SubscriptionItemID)
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionAddonRateCardItemLinks is a parsable slice of SubscriptionAddonRateCardItemLink.
type SubscriptionAddonRateCardItemLinks []*SubscriptionAddonRateCardItemLink
