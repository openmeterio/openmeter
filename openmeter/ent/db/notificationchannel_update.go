// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationchannel"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationrule"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/notification"
	"github.com/openmeterio/openmeter/pkg/models"
)

// NotificationChannelUpdate is the builder for updating NotificationChannel entities.
type NotificationChannelUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationChannelMutation
}

// Where appends a list predicates to the NotificationChannelUpdate builder.
func (_u *NotificationChannelUpdate) Where(ps ...predicate.NotificationChannel) *NotificationChannelUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationChannelUpdate) SetUpdatedAt(v time.Time) *NotificationChannelUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *NotificationChannelUpdate) SetDeletedAt(v time.Time) *NotificationChannelUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *NotificationChannelUpdate) SetNillableDeletedAt(v *time.Time) *NotificationChannelUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *NotificationChannelUpdate) ClearDeletedAt() *NotificationChannelUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetAnnotations sets the "annotations" field.
func (_u *NotificationChannelUpdate) SetAnnotations(v models.Annotations) *NotificationChannelUpdate {
	_u.mutation.SetAnnotations(v)
	return _u
}

// ClearAnnotations clears the value of the "annotations" field.
func (_u *NotificationChannelUpdate) ClearAnnotations() *NotificationChannelUpdate {
	_u.mutation.ClearAnnotations()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *NotificationChannelUpdate) SetMetadata(v map[string]string) *NotificationChannelUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *NotificationChannelUpdate) ClearMetadata() *NotificationChannelUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetName sets the "name" field.
func (_u *NotificationChannelUpdate) SetName(v string) *NotificationChannelUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NotificationChannelUpdate) SetNillableName(v *string) *NotificationChannelUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDisabled sets the "disabled" field.
func (_u *NotificationChannelUpdate) SetDisabled(v bool) *NotificationChannelUpdate {
	_u.mutation.SetDisabled(v)
	return _u
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_u *NotificationChannelUpdate) SetNillableDisabled(v *bool) *NotificationChannelUpdate {
	if v != nil {
		_u.SetDisabled(*v)
	}
	return _u
}

// ClearDisabled clears the value of the "disabled" field.
func (_u *NotificationChannelUpdate) ClearDisabled() *NotificationChannelUpdate {
	_u.mutation.ClearDisabled()
	return _u
}

// SetConfig sets the "config" field.
func (_u *NotificationChannelUpdate) SetConfig(v notification.ChannelConfig) *NotificationChannelUpdate {
	_u.mutation.SetConfig(v)
	return _u
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (_u *NotificationChannelUpdate) SetNillableConfig(v *notification.ChannelConfig) *NotificationChannelUpdate {
	if v != nil {
		_u.SetConfig(*v)
	}
	return _u
}

// AddRuleIDs adds the "rules" edge to the NotificationRule entity by IDs.
func (_u *NotificationChannelUpdate) AddRuleIDs(ids ...string) *NotificationChannelUpdate {
	_u.mutation.AddRuleIDs(ids...)
	return _u
}

// AddRules adds the "rules" edges to the NotificationRule entity.
func (_u *NotificationChannelUpdate) AddRules(v ...*NotificationRule) *NotificationChannelUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRuleIDs(ids...)
}

// Mutation returns the NotificationChannelMutation object of the builder.
func (_u *NotificationChannelUpdate) Mutation() *NotificationChannelMutation {
	return _u.mutation
}

// ClearRules clears all "rules" edges to the NotificationRule entity.
func (_u *NotificationChannelUpdate) ClearRules() *NotificationChannelUpdate {
	_u.mutation.ClearRules()
	return _u
}

// RemoveRuleIDs removes the "rules" edge to NotificationRule entities by IDs.
func (_u *NotificationChannelUpdate) RemoveRuleIDs(ids ...string) *NotificationChannelUpdate {
	_u.mutation.RemoveRuleIDs(ids...)
	return _u
}

// RemoveRules removes "rules" edges to NotificationRule entities.
func (_u *NotificationChannelUpdate) RemoveRules(v ...*NotificationRule) *NotificationChannelUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRuleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NotificationChannelUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NotificationChannelUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationChannelUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationChannelUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notificationchannel.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationChannelUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := notificationchannel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "NotificationChannel.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Config(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "config", err: fmt.Errorf(`db: validator failed for field "NotificationChannel.config": %w`, err)}
		}
	}
	return nil
}

func (_u *NotificationChannelUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationchannel.Table, notificationchannel.Columns, sqlgraph.NewFieldSpec(notificationchannel.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationchannel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(notificationchannel.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(notificationchannel.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Annotations(); ok {
		_spec.SetField(notificationchannel.FieldAnnotations, field.TypeJSON, value)
	}
	if _u.mutation.AnnotationsCleared() {
		_spec.ClearField(notificationchannel.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(notificationchannel.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(notificationchannel.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(notificationchannel.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Disabled(); ok {
		_spec.SetField(notificationchannel.FieldDisabled, field.TypeBool, value)
	}
	if _u.mutation.DisabledCleared() {
		_spec.ClearField(notificationchannel.FieldDisabled, field.TypeBool)
	}
	if value, ok := _u.mutation.Config(); ok {
		vv, err := notificationchannel.ValueScanner.Config.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(notificationchannel.FieldConfig, field.TypeString, vv)
	}
	if _u.mutation.RulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notificationchannel.RulesTable,
			Columns: notificationchannel.RulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationrule.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRulesIDs(); len(nodes) > 0 && !_u.mutation.RulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notificationchannel.RulesTable,
			Columns: notificationchannel.RulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notificationchannel.RulesTable,
			Columns: notificationchannel.RulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NotificationChannelUpdateOne is the builder for updating a single NotificationChannel entity.
type NotificationChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationChannelMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationChannelUpdateOne) SetUpdatedAt(v time.Time) *NotificationChannelUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *NotificationChannelUpdateOne) SetDeletedAt(v time.Time) *NotificationChannelUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *NotificationChannelUpdateOne) SetNillableDeletedAt(v *time.Time) *NotificationChannelUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *NotificationChannelUpdateOne) ClearDeletedAt() *NotificationChannelUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetAnnotations sets the "annotations" field.
func (_u *NotificationChannelUpdateOne) SetAnnotations(v models.Annotations) *NotificationChannelUpdateOne {
	_u.mutation.SetAnnotations(v)
	return _u
}

// ClearAnnotations clears the value of the "annotations" field.
func (_u *NotificationChannelUpdateOne) ClearAnnotations() *NotificationChannelUpdateOne {
	_u.mutation.ClearAnnotations()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *NotificationChannelUpdateOne) SetMetadata(v map[string]string) *NotificationChannelUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *NotificationChannelUpdateOne) ClearMetadata() *NotificationChannelUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetName sets the "name" field.
func (_u *NotificationChannelUpdateOne) SetName(v string) *NotificationChannelUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NotificationChannelUpdateOne) SetNillableName(v *string) *NotificationChannelUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDisabled sets the "disabled" field.
func (_u *NotificationChannelUpdateOne) SetDisabled(v bool) *NotificationChannelUpdateOne {
	_u.mutation.SetDisabled(v)
	return _u
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_u *NotificationChannelUpdateOne) SetNillableDisabled(v *bool) *NotificationChannelUpdateOne {
	if v != nil {
		_u.SetDisabled(*v)
	}
	return _u
}

// ClearDisabled clears the value of the "disabled" field.
func (_u *NotificationChannelUpdateOne) ClearDisabled() *NotificationChannelUpdateOne {
	_u.mutation.ClearDisabled()
	return _u
}

// SetConfig sets the "config" field.
func (_u *NotificationChannelUpdateOne) SetConfig(v notification.ChannelConfig) *NotificationChannelUpdateOne {
	_u.mutation.SetConfig(v)
	return _u
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (_u *NotificationChannelUpdateOne) SetNillableConfig(v *notification.ChannelConfig) *NotificationChannelUpdateOne {
	if v != nil {
		_u.SetConfig(*v)
	}
	return _u
}

// AddRuleIDs adds the "rules" edge to the NotificationRule entity by IDs.
func (_u *NotificationChannelUpdateOne) AddRuleIDs(ids ...string) *NotificationChannelUpdateOne {
	_u.mutation.AddRuleIDs(ids...)
	return _u
}

// AddRules adds the "rules" edges to the NotificationRule entity.
func (_u *NotificationChannelUpdateOne) AddRules(v ...*NotificationRule) *NotificationChannelUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRuleIDs(ids...)
}

// Mutation returns the NotificationChannelMutation object of the builder.
func (_u *NotificationChannelUpdateOne) Mutation() *NotificationChannelMutation {
	return _u.mutation
}

// ClearRules clears all "rules" edges to the NotificationRule entity.
func (_u *NotificationChannelUpdateOne) ClearRules() *NotificationChannelUpdateOne {
	_u.mutation.ClearRules()
	return _u
}

// RemoveRuleIDs removes the "rules" edge to NotificationRule entities by IDs.
func (_u *NotificationChannelUpdateOne) RemoveRuleIDs(ids ...string) *NotificationChannelUpdateOne {
	_u.mutation.RemoveRuleIDs(ids...)
	return _u
}

// RemoveRules removes "rules" edges to NotificationRule entities.
func (_u *NotificationChannelUpdateOne) RemoveRules(v ...*NotificationRule) *NotificationChannelUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRuleIDs(ids...)
}

// Where appends a list predicates to the NotificationChannelUpdate builder.
func (_u *NotificationChannelUpdateOne) Where(ps ...predicate.NotificationChannel) *NotificationChannelUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NotificationChannelUpdateOne) Select(field string, fields ...string) *NotificationChannelUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated NotificationChannel entity.
func (_u *NotificationChannelUpdateOne) Save(ctx context.Context) (*NotificationChannel, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationChannelUpdateOne) SaveX(ctx context.Context) *NotificationChannel {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NotificationChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationChannelUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationChannelUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notificationchannel.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationChannelUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := notificationchannel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "NotificationChannel.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Config(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "config", err: fmt.Errorf(`db: validator failed for field "NotificationChannel.config": %w`, err)}
		}
	}
	return nil
}

func (_u *NotificationChannelUpdateOne) sqlSave(ctx context.Context) (_node *NotificationChannel, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationchannel.Table, notificationchannel.Columns, sqlgraph.NewFieldSpec(notificationchannel.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "NotificationChannel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationchannel.FieldID)
		for _, f := range fields {
			if !notificationchannel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != notificationchannel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationchannel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(notificationchannel.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(notificationchannel.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Annotations(); ok {
		_spec.SetField(notificationchannel.FieldAnnotations, field.TypeJSON, value)
	}
	if _u.mutation.AnnotationsCleared() {
		_spec.ClearField(notificationchannel.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(notificationchannel.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(notificationchannel.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(notificationchannel.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Disabled(); ok {
		_spec.SetField(notificationchannel.FieldDisabled, field.TypeBool, value)
	}
	if _u.mutation.DisabledCleared() {
		_spec.ClearField(notificationchannel.FieldDisabled, field.TypeBool)
	}
	if value, ok := _u.mutation.Config(); ok {
		vv, err := notificationchannel.ValueScanner.Config.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(notificationchannel.FieldConfig, field.TypeString, vv)
	}
	if _u.mutation.RulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notificationchannel.RulesTable,
			Columns: notificationchannel.RulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationrule.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRulesIDs(); len(nodes) > 0 && !_u.mutation.RulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notificationchannel.RulesTable,
			Columns: notificationchannel.RulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notificationchannel.RulesTable,
			Columns: notificationchannel.RulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NotificationChannel{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
