// Code generated by ent, DO NOT EDIT.

package addonratecard

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
)

const (
	// Label holds the string label denoting the addonratecard type in the database.
	Label = "addon_rate_card"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldFeatureKey holds the string denoting the feature_key field in the database.
	FieldFeatureKey = "feature_key"
	// FieldEntitlementTemplate holds the string denoting the entitlement_template field in the database.
	FieldEntitlementTemplate = "entitlement_template"
	// FieldTaxConfig holds the string denoting the tax_config field in the database.
	FieldTaxConfig = "tax_config"
	// FieldBillingCadence holds the string denoting the billing_cadence field in the database.
	FieldBillingCadence = "billing_cadence"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldDiscounts holds the string denoting the discounts field in the database.
	FieldDiscounts = "discounts"
	// FieldAddonID holds the string denoting the addon_id field in the database.
	FieldAddonID = "addon_id"
	// FieldFeatureID holds the string denoting the feature_id field in the database.
	FieldFeatureID = "feature_id"
	// EdgeAddon holds the string denoting the addon edge name in mutations.
	EdgeAddon = "addon"
	// EdgeFeatures holds the string denoting the features edge name in mutations.
	EdgeFeatures = "features"
	// EdgeSubscriptionAddonRateCards holds the string denoting the subscription_addon_rate_cards edge name in mutations.
	EdgeSubscriptionAddonRateCards = "subscription_addon_rate_cards"
	// Table holds the table name of the addonratecard in the database.
	Table = "addon_rate_cards"
	// AddonTable is the table that holds the addon relation/edge.
	AddonTable = "addon_rate_cards"
	// AddonInverseTable is the table name for the Addon entity.
	// It exists in this package in order to avoid circular dependency with the "addon" package.
	AddonInverseTable = "addons"
	// AddonColumn is the table column denoting the addon relation/edge.
	AddonColumn = "addon_id"
	// FeaturesTable is the table that holds the features relation/edge.
	FeaturesTable = "addon_rate_cards"
	// FeaturesInverseTable is the table name for the Feature entity.
	// It exists in this package in order to avoid circular dependency with the "feature" package.
	FeaturesInverseTable = "features"
	// FeaturesColumn is the table column denoting the features relation/edge.
	FeaturesColumn = "feature_id"
	// SubscriptionAddonRateCardsTable is the table that holds the subscription_addon_rate_cards relation/edge.
	SubscriptionAddonRateCardsTable = "subscription_addon_rate_cards"
	// SubscriptionAddonRateCardsInverseTable is the table name for the SubscriptionAddonRateCard entity.
	// It exists in this package in order to avoid circular dependency with the "subscriptionaddonratecard" package.
	SubscriptionAddonRateCardsInverseTable = "subscription_addon_rate_cards"
	// SubscriptionAddonRateCardsColumn is the table column denoting the subscription_addon_rate_cards relation/edge.
	SubscriptionAddonRateCardsColumn = "addon_ratecard_id"
)

// Columns holds all SQL columns for addonratecard fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldDescription,
	FieldKey,
	FieldType,
	FieldFeatureKey,
	FieldEntitlementTemplate,
	FieldTaxConfig,
	FieldBillingCadence,
	FieldPrice,
	FieldDiscounts,
	FieldAddonID,
	FieldFeatureID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
	// AddonIDValidator is a validator for the "addon_id" field. It is called by the builders before save.
	AddonIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// ValueScanner of all AddonRateCard fields.
	ValueScanner struct {
		EntitlementTemplate field.TypeValueScanner[*productcatalog.EntitlementTemplate]
		TaxConfig           field.TypeValueScanner[*productcatalog.TaxConfig]
		Price               field.TypeValueScanner[*productcatalog.Price]
		Discounts           field.TypeValueScanner[*productcatalog.Discounts]
	}
)

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type productcatalog.RateCardType) error {
	switch _type {
	case "flat_fee", "usage_based":
		return nil
	default:
		return fmt.Errorf("addonratecard: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the AddonRateCard queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByFeatureKey orders the results by the feature_key field.
func ByFeatureKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatureKey, opts...).ToFunc()
}

// ByEntitlementTemplate orders the results by the entitlement_template field.
func ByEntitlementTemplate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntitlementTemplate, opts...).ToFunc()
}

// ByTaxConfig orders the results by the tax_config field.
func ByTaxConfig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxConfig, opts...).ToFunc()
}

// ByBillingCadence orders the results by the billing_cadence field.
func ByBillingCadence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingCadence, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByDiscounts orders the results by the discounts field.
func ByDiscounts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscounts, opts...).ToFunc()
}

// ByAddonID orders the results by the addon_id field.
func ByAddonID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddonID, opts...).ToFunc()
}

// ByFeatureID orders the results by the feature_id field.
func ByFeatureID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatureID, opts...).ToFunc()
}

// ByAddonField orders the results by addon field.
func ByAddonField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddonStep(), sql.OrderByField(field, opts...))
	}
}

// ByFeaturesField orders the results by features field.
func ByFeaturesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeaturesStep(), sql.OrderByField(field, opts...))
	}
}

// BySubscriptionAddonRateCardsCount orders the results by subscription_addon_rate_cards count.
func BySubscriptionAddonRateCardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubscriptionAddonRateCardsStep(), opts...)
	}
}

// BySubscriptionAddonRateCards orders the results by subscription_addon_rate_cards terms.
func BySubscriptionAddonRateCards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriptionAddonRateCardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAddonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AddonTable, AddonColumn),
	)
}
func newFeaturesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeaturesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FeaturesTable, FeaturesColumn),
	)
}
func newSubscriptionAddonRateCardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriptionAddonRateCardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubscriptionAddonRateCardsTable, SubscriptionAddonRateCardsColumn),
	)
}
