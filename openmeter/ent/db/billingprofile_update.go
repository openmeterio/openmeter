// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomeroverride"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingprofile"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/pkg/models"
)

// BillingProfileUpdate is the builder for updating BillingProfile entities.
type BillingProfileUpdate struct {
	config
	hooks    []Hook
	mutation *BillingProfileMutation
}

// Where appends a list predicates to the BillingProfileUpdate builder.
func (_u *BillingProfileUpdate) Where(ps ...predicate.BillingProfile) *BillingProfileUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *BillingProfileUpdate) SetMetadata(v map[string]string) *BillingProfileUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *BillingProfileUpdate) ClearMetadata() *BillingProfileUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BillingProfileUpdate) SetUpdatedAt(v time.Time) *BillingProfileUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *BillingProfileUpdate) SetDeletedAt(v time.Time) *BillingProfileUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *BillingProfileUpdate) SetNillableDeletedAt(v *time.Time) *BillingProfileUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *BillingProfileUpdate) ClearDeletedAt() *BillingProfileUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *BillingProfileUpdate) SetName(v string) *BillingProfileUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *BillingProfileUpdate) SetNillableName(v *string) *BillingProfileUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *BillingProfileUpdate) SetDescription(v string) *BillingProfileUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *BillingProfileUpdate) SetNillableDescription(v *string) *BillingProfileUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BillingProfileUpdate) ClearDescription() *BillingProfileUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetSupplierAddressCountry sets the "supplier_address_country" field.
func (_u *BillingProfileUpdate) SetSupplierAddressCountry(v models.CountryCode) *BillingProfileUpdate {
	_u.mutation.SetSupplierAddressCountry(v)
	return _u
}

// SetNillableSupplierAddressCountry sets the "supplier_address_country" field if the given value is not nil.
func (_u *BillingProfileUpdate) SetNillableSupplierAddressCountry(v *models.CountryCode) *BillingProfileUpdate {
	if v != nil {
		_u.SetSupplierAddressCountry(*v)
	}
	return _u
}

// ClearSupplierAddressCountry clears the value of the "supplier_address_country" field.
func (_u *BillingProfileUpdate) ClearSupplierAddressCountry() *BillingProfileUpdate {
	_u.mutation.ClearSupplierAddressCountry()
	return _u
}

// SetSupplierAddressPostalCode sets the "supplier_address_postal_code" field.
func (_u *BillingProfileUpdate) SetSupplierAddressPostalCode(v string) *BillingProfileUpdate {
	_u.mutation.SetSupplierAddressPostalCode(v)
	return _u
}

// SetNillableSupplierAddressPostalCode sets the "supplier_address_postal_code" field if the given value is not nil.
func (_u *BillingProfileUpdate) SetNillableSupplierAddressPostalCode(v *string) *BillingProfileUpdate {
	if v != nil {
		_u.SetSupplierAddressPostalCode(*v)
	}
	return _u
}

// ClearSupplierAddressPostalCode clears the value of the "supplier_address_postal_code" field.
func (_u *BillingProfileUpdate) ClearSupplierAddressPostalCode() *BillingProfileUpdate {
	_u.mutation.ClearSupplierAddressPostalCode()
	return _u
}

// SetSupplierAddressState sets the "supplier_address_state" field.
func (_u *BillingProfileUpdate) SetSupplierAddressState(v string) *BillingProfileUpdate {
	_u.mutation.SetSupplierAddressState(v)
	return _u
}

// SetNillableSupplierAddressState sets the "supplier_address_state" field if the given value is not nil.
func (_u *BillingProfileUpdate) SetNillableSupplierAddressState(v *string) *BillingProfileUpdate {
	if v != nil {
		_u.SetSupplierAddressState(*v)
	}
	return _u
}

// ClearSupplierAddressState clears the value of the "supplier_address_state" field.
func (_u *BillingProfileUpdate) ClearSupplierAddressState() *BillingProfileUpdate {
	_u.mutation.ClearSupplierAddressState()
	return _u
}

// SetSupplierAddressCity sets the "supplier_address_city" field.
func (_u *BillingProfileUpdate) SetSupplierAddressCity(v string) *BillingProfileUpdate {
	_u.mutation.SetSupplierAddressCity(v)
	return _u
}

// SetNillableSupplierAddressCity sets the "supplier_address_city" field if the given value is not nil.
func (_u *BillingProfileUpdate) SetNillableSupplierAddressCity(v *string) *BillingProfileUpdate {
	if v != nil {
		_u.SetSupplierAddressCity(*v)
	}
	return _u
}

// ClearSupplierAddressCity clears the value of the "supplier_address_city" field.
func (_u *BillingProfileUpdate) ClearSupplierAddressCity() *BillingProfileUpdate {
	_u.mutation.ClearSupplierAddressCity()
	return _u
}

// SetSupplierAddressLine1 sets the "supplier_address_line1" field.
func (_u *BillingProfileUpdate) SetSupplierAddressLine1(v string) *BillingProfileUpdate {
	_u.mutation.SetSupplierAddressLine1(v)
	return _u
}

// SetNillableSupplierAddressLine1 sets the "supplier_address_line1" field if the given value is not nil.
func (_u *BillingProfileUpdate) SetNillableSupplierAddressLine1(v *string) *BillingProfileUpdate {
	if v != nil {
		_u.SetSupplierAddressLine1(*v)
	}
	return _u
}

// ClearSupplierAddressLine1 clears the value of the "supplier_address_line1" field.
func (_u *BillingProfileUpdate) ClearSupplierAddressLine1() *BillingProfileUpdate {
	_u.mutation.ClearSupplierAddressLine1()
	return _u
}

// SetSupplierAddressLine2 sets the "supplier_address_line2" field.
func (_u *BillingProfileUpdate) SetSupplierAddressLine2(v string) *BillingProfileUpdate {
	_u.mutation.SetSupplierAddressLine2(v)
	return _u
}

// SetNillableSupplierAddressLine2 sets the "supplier_address_line2" field if the given value is not nil.
func (_u *BillingProfileUpdate) SetNillableSupplierAddressLine2(v *string) *BillingProfileUpdate {
	if v != nil {
		_u.SetSupplierAddressLine2(*v)
	}
	return _u
}

// ClearSupplierAddressLine2 clears the value of the "supplier_address_line2" field.
func (_u *BillingProfileUpdate) ClearSupplierAddressLine2() *BillingProfileUpdate {
	_u.mutation.ClearSupplierAddressLine2()
	return _u
}

// SetSupplierAddressPhoneNumber sets the "supplier_address_phone_number" field.
func (_u *BillingProfileUpdate) SetSupplierAddressPhoneNumber(v string) *BillingProfileUpdate {
	_u.mutation.SetSupplierAddressPhoneNumber(v)
	return _u
}

// SetNillableSupplierAddressPhoneNumber sets the "supplier_address_phone_number" field if the given value is not nil.
func (_u *BillingProfileUpdate) SetNillableSupplierAddressPhoneNumber(v *string) *BillingProfileUpdate {
	if v != nil {
		_u.SetSupplierAddressPhoneNumber(*v)
	}
	return _u
}

// ClearSupplierAddressPhoneNumber clears the value of the "supplier_address_phone_number" field.
func (_u *BillingProfileUpdate) ClearSupplierAddressPhoneNumber() *BillingProfileUpdate {
	_u.mutation.ClearSupplierAddressPhoneNumber()
	return _u
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (_u *BillingProfileUpdate) SetWorkflowConfigID(v string) *BillingProfileUpdate {
	_u.mutation.SetWorkflowConfigID(v)
	return _u
}

// SetNillableWorkflowConfigID sets the "workflow_config_id" field if the given value is not nil.
func (_u *BillingProfileUpdate) SetNillableWorkflowConfigID(v *string) *BillingProfileUpdate {
	if v != nil {
		_u.SetWorkflowConfigID(*v)
	}
	return _u
}

// SetDefault sets the "default" field.
func (_u *BillingProfileUpdate) SetDefault(v bool) *BillingProfileUpdate {
	_u.mutation.SetDefault(v)
	return _u
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (_u *BillingProfileUpdate) SetNillableDefault(v *bool) *BillingProfileUpdate {
	if v != nil {
		_u.SetDefault(*v)
	}
	return _u
}

// SetSupplierName sets the "supplier_name" field.
func (_u *BillingProfileUpdate) SetSupplierName(v string) *BillingProfileUpdate {
	_u.mutation.SetSupplierName(v)
	return _u
}

// SetNillableSupplierName sets the "supplier_name" field if the given value is not nil.
func (_u *BillingProfileUpdate) SetNillableSupplierName(v *string) *BillingProfileUpdate {
	if v != nil {
		_u.SetSupplierName(*v)
	}
	return _u
}

// SetSupplierTaxCode sets the "supplier_tax_code" field.
func (_u *BillingProfileUpdate) SetSupplierTaxCode(v string) *BillingProfileUpdate {
	_u.mutation.SetSupplierTaxCode(v)
	return _u
}

// SetNillableSupplierTaxCode sets the "supplier_tax_code" field if the given value is not nil.
func (_u *BillingProfileUpdate) SetNillableSupplierTaxCode(v *string) *BillingProfileUpdate {
	if v != nil {
		_u.SetSupplierTaxCode(*v)
	}
	return _u
}

// ClearSupplierTaxCode clears the value of the "supplier_tax_code" field.
func (_u *BillingProfileUpdate) ClearSupplierTaxCode() *BillingProfileUpdate {
	_u.mutation.ClearSupplierTaxCode()
	return _u
}

// AddBillingInvoiceIDs adds the "billing_invoices" edge to the BillingInvoice entity by IDs.
func (_u *BillingProfileUpdate) AddBillingInvoiceIDs(ids ...string) *BillingProfileUpdate {
	_u.mutation.AddBillingInvoiceIDs(ids...)
	return _u
}

// AddBillingInvoices adds the "billing_invoices" edges to the BillingInvoice entity.
func (_u *BillingProfileUpdate) AddBillingInvoices(v ...*BillingInvoice) *BillingProfileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBillingInvoiceIDs(ids...)
}

// AddBillingCustomerOverrideIDs adds the "billing_customer_override" edge to the BillingCustomerOverride entity by IDs.
func (_u *BillingProfileUpdate) AddBillingCustomerOverrideIDs(ids ...string) *BillingProfileUpdate {
	_u.mutation.AddBillingCustomerOverrideIDs(ids...)
	return _u
}

// AddBillingCustomerOverride adds the "billing_customer_override" edges to the BillingCustomerOverride entity.
func (_u *BillingProfileUpdate) AddBillingCustomerOverride(v ...*BillingCustomerOverride) *BillingProfileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBillingCustomerOverrideIDs(ids...)
}

// SetWorkflowConfig sets the "workflow_config" edge to the BillingWorkflowConfig entity.
func (_u *BillingProfileUpdate) SetWorkflowConfig(v *BillingWorkflowConfig) *BillingProfileUpdate {
	return _u.SetWorkflowConfigID(v.ID)
}

// Mutation returns the BillingProfileMutation object of the builder.
func (_u *BillingProfileUpdate) Mutation() *BillingProfileMutation {
	return _u.mutation
}

// ClearBillingInvoices clears all "billing_invoices" edges to the BillingInvoice entity.
func (_u *BillingProfileUpdate) ClearBillingInvoices() *BillingProfileUpdate {
	_u.mutation.ClearBillingInvoices()
	return _u
}

// RemoveBillingInvoiceIDs removes the "billing_invoices" edge to BillingInvoice entities by IDs.
func (_u *BillingProfileUpdate) RemoveBillingInvoiceIDs(ids ...string) *BillingProfileUpdate {
	_u.mutation.RemoveBillingInvoiceIDs(ids...)
	return _u
}

// RemoveBillingInvoices removes "billing_invoices" edges to BillingInvoice entities.
func (_u *BillingProfileUpdate) RemoveBillingInvoices(v ...*BillingInvoice) *BillingProfileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBillingInvoiceIDs(ids...)
}

// ClearBillingCustomerOverride clears all "billing_customer_override" edges to the BillingCustomerOverride entity.
func (_u *BillingProfileUpdate) ClearBillingCustomerOverride() *BillingProfileUpdate {
	_u.mutation.ClearBillingCustomerOverride()
	return _u
}

// RemoveBillingCustomerOverrideIDs removes the "billing_customer_override" edge to BillingCustomerOverride entities by IDs.
func (_u *BillingProfileUpdate) RemoveBillingCustomerOverrideIDs(ids ...string) *BillingProfileUpdate {
	_u.mutation.RemoveBillingCustomerOverrideIDs(ids...)
	return _u
}

// RemoveBillingCustomerOverride removes "billing_customer_override" edges to BillingCustomerOverride entities.
func (_u *BillingProfileUpdate) RemoveBillingCustomerOverride(v ...*BillingCustomerOverride) *BillingProfileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBillingCustomerOverrideIDs(ids...)
}

// ClearWorkflowConfig clears the "workflow_config" edge to the BillingWorkflowConfig entity.
func (_u *BillingProfileUpdate) ClearWorkflowConfig() *BillingProfileUpdate {
	_u.mutation.ClearWorkflowConfig()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BillingProfileUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BillingProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BillingProfileUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BillingProfileUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BillingProfileUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := billingprofile.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BillingProfileUpdate) check() error {
	if v, ok := _u.mutation.SupplierAddressCountry(); ok {
		if err := billingprofile.SupplierAddressCountryValidator(string(v)); err != nil {
			return &ValidationError{Name: "supplier_address_country", err: fmt.Errorf(`db: validator failed for field "BillingProfile.supplier_address_country": %w`, err)}
		}
	}
	if v, ok := _u.mutation.WorkflowConfigID(); ok {
		if err := billingprofile.WorkflowConfigIDValidator(v); err != nil {
			return &ValidationError{Name: "workflow_config_id", err: fmt.Errorf(`db: validator failed for field "BillingProfile.workflow_config_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.SupplierName(); ok {
		if err := billingprofile.SupplierNameValidator(v); err != nil {
			return &ValidationError{Name: "supplier_name", err: fmt.Errorf(`db: validator failed for field "BillingProfile.supplier_name": %w`, err)}
		}
	}
	if _u.mutation.WorkflowConfigCleared() && len(_u.mutation.WorkflowConfigIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingProfile.workflow_config"`)
	}
	if _u.mutation.TaxAppCleared() && len(_u.mutation.TaxAppIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingProfile.tax_app"`)
	}
	if _u.mutation.InvoicingAppCleared() && len(_u.mutation.InvoicingAppIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingProfile.invoicing_app"`)
	}
	if _u.mutation.PaymentAppCleared() && len(_u.mutation.PaymentAppIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingProfile.payment_app"`)
	}
	return nil
}

func (_u *BillingProfileUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingprofile.Table, billingprofile.Columns, sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(billingprofile.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(billingprofile.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(billingprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(billingprofile.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(billingprofile.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(billingprofile.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(billingprofile.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(billingprofile.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.SupplierAddressCountry(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressCountry, field.TypeString, value)
	}
	if _u.mutation.SupplierAddressCountryCleared() {
		_spec.ClearField(billingprofile.FieldSupplierAddressCountry, field.TypeString)
	}
	if value, ok := _u.mutation.SupplierAddressPostalCode(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressPostalCode, field.TypeString, value)
	}
	if _u.mutation.SupplierAddressPostalCodeCleared() {
		_spec.ClearField(billingprofile.FieldSupplierAddressPostalCode, field.TypeString)
	}
	if value, ok := _u.mutation.SupplierAddressState(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressState, field.TypeString, value)
	}
	if _u.mutation.SupplierAddressStateCleared() {
		_spec.ClearField(billingprofile.FieldSupplierAddressState, field.TypeString)
	}
	if value, ok := _u.mutation.SupplierAddressCity(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressCity, field.TypeString, value)
	}
	if _u.mutation.SupplierAddressCityCleared() {
		_spec.ClearField(billingprofile.FieldSupplierAddressCity, field.TypeString)
	}
	if value, ok := _u.mutation.SupplierAddressLine1(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressLine1, field.TypeString, value)
	}
	if _u.mutation.SupplierAddressLine1Cleared() {
		_spec.ClearField(billingprofile.FieldSupplierAddressLine1, field.TypeString)
	}
	if value, ok := _u.mutation.SupplierAddressLine2(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressLine2, field.TypeString, value)
	}
	if _u.mutation.SupplierAddressLine2Cleared() {
		_spec.ClearField(billingprofile.FieldSupplierAddressLine2, field.TypeString)
	}
	if value, ok := _u.mutation.SupplierAddressPhoneNumber(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressPhoneNumber, field.TypeString, value)
	}
	if _u.mutation.SupplierAddressPhoneNumberCleared() {
		_spec.ClearField(billingprofile.FieldSupplierAddressPhoneNumber, field.TypeString)
	}
	if value, ok := _u.mutation.Default(); ok {
		_spec.SetField(billingprofile.FieldDefault, field.TypeBool, value)
	}
	if value, ok := _u.mutation.SupplierName(); ok {
		_spec.SetField(billingprofile.FieldSupplierName, field.TypeString, value)
	}
	if value, ok := _u.mutation.SupplierTaxCode(); ok {
		_spec.SetField(billingprofile.FieldSupplierTaxCode, field.TypeString, value)
	}
	if _u.mutation.SupplierTaxCodeCleared() {
		_spec.ClearField(billingprofile.FieldSupplierTaxCode, field.TypeString)
	}
	if _u.mutation.BillingInvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingInvoicesTable,
			Columns: []string{billingprofile.BillingInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBillingInvoicesIDs(); len(nodes) > 0 && !_u.mutation.BillingInvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingInvoicesTable,
			Columns: []string{billingprofile.BillingInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingInvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingInvoicesTable,
			Columns: []string{billingprofile.BillingInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BillingCustomerOverrideCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingCustomerOverrideTable,
			Columns: []string{billingprofile.BillingCustomerOverrideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBillingCustomerOverrideIDs(); len(nodes) > 0 && !_u.mutation.BillingCustomerOverrideCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingCustomerOverrideTable,
			Columns: []string{billingprofile.BillingCustomerOverrideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingCustomerOverrideIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingCustomerOverrideTable,
			Columns: []string{billingprofile.BillingCustomerOverrideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.WorkflowConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingprofile.WorkflowConfigTable,
			Columns: []string{billingprofile.WorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.WorkflowConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingprofile.WorkflowConfigTable,
			Columns: []string{billingprofile.WorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BillingProfileUpdateOne is the builder for updating a single BillingProfile entity.
type BillingProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingProfileMutation
}

// SetMetadata sets the "metadata" field.
func (_u *BillingProfileUpdateOne) SetMetadata(v map[string]string) *BillingProfileUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *BillingProfileUpdateOne) ClearMetadata() *BillingProfileUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BillingProfileUpdateOne) SetUpdatedAt(v time.Time) *BillingProfileUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *BillingProfileUpdateOne) SetDeletedAt(v time.Time) *BillingProfileUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *BillingProfileUpdateOne) SetNillableDeletedAt(v *time.Time) *BillingProfileUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *BillingProfileUpdateOne) ClearDeletedAt() *BillingProfileUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *BillingProfileUpdateOne) SetName(v string) *BillingProfileUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *BillingProfileUpdateOne) SetNillableName(v *string) *BillingProfileUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *BillingProfileUpdateOne) SetDescription(v string) *BillingProfileUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *BillingProfileUpdateOne) SetNillableDescription(v *string) *BillingProfileUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BillingProfileUpdateOne) ClearDescription() *BillingProfileUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetSupplierAddressCountry sets the "supplier_address_country" field.
func (_u *BillingProfileUpdateOne) SetSupplierAddressCountry(v models.CountryCode) *BillingProfileUpdateOne {
	_u.mutation.SetSupplierAddressCountry(v)
	return _u
}

// SetNillableSupplierAddressCountry sets the "supplier_address_country" field if the given value is not nil.
func (_u *BillingProfileUpdateOne) SetNillableSupplierAddressCountry(v *models.CountryCode) *BillingProfileUpdateOne {
	if v != nil {
		_u.SetSupplierAddressCountry(*v)
	}
	return _u
}

// ClearSupplierAddressCountry clears the value of the "supplier_address_country" field.
func (_u *BillingProfileUpdateOne) ClearSupplierAddressCountry() *BillingProfileUpdateOne {
	_u.mutation.ClearSupplierAddressCountry()
	return _u
}

// SetSupplierAddressPostalCode sets the "supplier_address_postal_code" field.
func (_u *BillingProfileUpdateOne) SetSupplierAddressPostalCode(v string) *BillingProfileUpdateOne {
	_u.mutation.SetSupplierAddressPostalCode(v)
	return _u
}

// SetNillableSupplierAddressPostalCode sets the "supplier_address_postal_code" field if the given value is not nil.
func (_u *BillingProfileUpdateOne) SetNillableSupplierAddressPostalCode(v *string) *BillingProfileUpdateOne {
	if v != nil {
		_u.SetSupplierAddressPostalCode(*v)
	}
	return _u
}

// ClearSupplierAddressPostalCode clears the value of the "supplier_address_postal_code" field.
func (_u *BillingProfileUpdateOne) ClearSupplierAddressPostalCode() *BillingProfileUpdateOne {
	_u.mutation.ClearSupplierAddressPostalCode()
	return _u
}

// SetSupplierAddressState sets the "supplier_address_state" field.
func (_u *BillingProfileUpdateOne) SetSupplierAddressState(v string) *BillingProfileUpdateOne {
	_u.mutation.SetSupplierAddressState(v)
	return _u
}

// SetNillableSupplierAddressState sets the "supplier_address_state" field if the given value is not nil.
func (_u *BillingProfileUpdateOne) SetNillableSupplierAddressState(v *string) *BillingProfileUpdateOne {
	if v != nil {
		_u.SetSupplierAddressState(*v)
	}
	return _u
}

// ClearSupplierAddressState clears the value of the "supplier_address_state" field.
func (_u *BillingProfileUpdateOne) ClearSupplierAddressState() *BillingProfileUpdateOne {
	_u.mutation.ClearSupplierAddressState()
	return _u
}

// SetSupplierAddressCity sets the "supplier_address_city" field.
func (_u *BillingProfileUpdateOne) SetSupplierAddressCity(v string) *BillingProfileUpdateOne {
	_u.mutation.SetSupplierAddressCity(v)
	return _u
}

// SetNillableSupplierAddressCity sets the "supplier_address_city" field if the given value is not nil.
func (_u *BillingProfileUpdateOne) SetNillableSupplierAddressCity(v *string) *BillingProfileUpdateOne {
	if v != nil {
		_u.SetSupplierAddressCity(*v)
	}
	return _u
}

// ClearSupplierAddressCity clears the value of the "supplier_address_city" field.
func (_u *BillingProfileUpdateOne) ClearSupplierAddressCity() *BillingProfileUpdateOne {
	_u.mutation.ClearSupplierAddressCity()
	return _u
}

// SetSupplierAddressLine1 sets the "supplier_address_line1" field.
func (_u *BillingProfileUpdateOne) SetSupplierAddressLine1(v string) *BillingProfileUpdateOne {
	_u.mutation.SetSupplierAddressLine1(v)
	return _u
}

// SetNillableSupplierAddressLine1 sets the "supplier_address_line1" field if the given value is not nil.
func (_u *BillingProfileUpdateOne) SetNillableSupplierAddressLine1(v *string) *BillingProfileUpdateOne {
	if v != nil {
		_u.SetSupplierAddressLine1(*v)
	}
	return _u
}

// ClearSupplierAddressLine1 clears the value of the "supplier_address_line1" field.
func (_u *BillingProfileUpdateOne) ClearSupplierAddressLine1() *BillingProfileUpdateOne {
	_u.mutation.ClearSupplierAddressLine1()
	return _u
}

// SetSupplierAddressLine2 sets the "supplier_address_line2" field.
func (_u *BillingProfileUpdateOne) SetSupplierAddressLine2(v string) *BillingProfileUpdateOne {
	_u.mutation.SetSupplierAddressLine2(v)
	return _u
}

// SetNillableSupplierAddressLine2 sets the "supplier_address_line2" field if the given value is not nil.
func (_u *BillingProfileUpdateOne) SetNillableSupplierAddressLine2(v *string) *BillingProfileUpdateOne {
	if v != nil {
		_u.SetSupplierAddressLine2(*v)
	}
	return _u
}

// ClearSupplierAddressLine2 clears the value of the "supplier_address_line2" field.
func (_u *BillingProfileUpdateOne) ClearSupplierAddressLine2() *BillingProfileUpdateOne {
	_u.mutation.ClearSupplierAddressLine2()
	return _u
}

// SetSupplierAddressPhoneNumber sets the "supplier_address_phone_number" field.
func (_u *BillingProfileUpdateOne) SetSupplierAddressPhoneNumber(v string) *BillingProfileUpdateOne {
	_u.mutation.SetSupplierAddressPhoneNumber(v)
	return _u
}

// SetNillableSupplierAddressPhoneNumber sets the "supplier_address_phone_number" field if the given value is not nil.
func (_u *BillingProfileUpdateOne) SetNillableSupplierAddressPhoneNumber(v *string) *BillingProfileUpdateOne {
	if v != nil {
		_u.SetSupplierAddressPhoneNumber(*v)
	}
	return _u
}

// ClearSupplierAddressPhoneNumber clears the value of the "supplier_address_phone_number" field.
func (_u *BillingProfileUpdateOne) ClearSupplierAddressPhoneNumber() *BillingProfileUpdateOne {
	_u.mutation.ClearSupplierAddressPhoneNumber()
	return _u
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (_u *BillingProfileUpdateOne) SetWorkflowConfigID(v string) *BillingProfileUpdateOne {
	_u.mutation.SetWorkflowConfigID(v)
	return _u
}

// SetNillableWorkflowConfigID sets the "workflow_config_id" field if the given value is not nil.
func (_u *BillingProfileUpdateOne) SetNillableWorkflowConfigID(v *string) *BillingProfileUpdateOne {
	if v != nil {
		_u.SetWorkflowConfigID(*v)
	}
	return _u
}

// SetDefault sets the "default" field.
func (_u *BillingProfileUpdateOne) SetDefault(v bool) *BillingProfileUpdateOne {
	_u.mutation.SetDefault(v)
	return _u
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (_u *BillingProfileUpdateOne) SetNillableDefault(v *bool) *BillingProfileUpdateOne {
	if v != nil {
		_u.SetDefault(*v)
	}
	return _u
}

// SetSupplierName sets the "supplier_name" field.
func (_u *BillingProfileUpdateOne) SetSupplierName(v string) *BillingProfileUpdateOne {
	_u.mutation.SetSupplierName(v)
	return _u
}

// SetNillableSupplierName sets the "supplier_name" field if the given value is not nil.
func (_u *BillingProfileUpdateOne) SetNillableSupplierName(v *string) *BillingProfileUpdateOne {
	if v != nil {
		_u.SetSupplierName(*v)
	}
	return _u
}

// SetSupplierTaxCode sets the "supplier_tax_code" field.
func (_u *BillingProfileUpdateOne) SetSupplierTaxCode(v string) *BillingProfileUpdateOne {
	_u.mutation.SetSupplierTaxCode(v)
	return _u
}

// SetNillableSupplierTaxCode sets the "supplier_tax_code" field if the given value is not nil.
func (_u *BillingProfileUpdateOne) SetNillableSupplierTaxCode(v *string) *BillingProfileUpdateOne {
	if v != nil {
		_u.SetSupplierTaxCode(*v)
	}
	return _u
}

// ClearSupplierTaxCode clears the value of the "supplier_tax_code" field.
func (_u *BillingProfileUpdateOne) ClearSupplierTaxCode() *BillingProfileUpdateOne {
	_u.mutation.ClearSupplierTaxCode()
	return _u
}

// AddBillingInvoiceIDs adds the "billing_invoices" edge to the BillingInvoice entity by IDs.
func (_u *BillingProfileUpdateOne) AddBillingInvoiceIDs(ids ...string) *BillingProfileUpdateOne {
	_u.mutation.AddBillingInvoiceIDs(ids...)
	return _u
}

// AddBillingInvoices adds the "billing_invoices" edges to the BillingInvoice entity.
func (_u *BillingProfileUpdateOne) AddBillingInvoices(v ...*BillingInvoice) *BillingProfileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBillingInvoiceIDs(ids...)
}

// AddBillingCustomerOverrideIDs adds the "billing_customer_override" edge to the BillingCustomerOverride entity by IDs.
func (_u *BillingProfileUpdateOne) AddBillingCustomerOverrideIDs(ids ...string) *BillingProfileUpdateOne {
	_u.mutation.AddBillingCustomerOverrideIDs(ids...)
	return _u
}

// AddBillingCustomerOverride adds the "billing_customer_override" edges to the BillingCustomerOverride entity.
func (_u *BillingProfileUpdateOne) AddBillingCustomerOverride(v ...*BillingCustomerOverride) *BillingProfileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBillingCustomerOverrideIDs(ids...)
}

// SetWorkflowConfig sets the "workflow_config" edge to the BillingWorkflowConfig entity.
func (_u *BillingProfileUpdateOne) SetWorkflowConfig(v *BillingWorkflowConfig) *BillingProfileUpdateOne {
	return _u.SetWorkflowConfigID(v.ID)
}

// Mutation returns the BillingProfileMutation object of the builder.
func (_u *BillingProfileUpdateOne) Mutation() *BillingProfileMutation {
	return _u.mutation
}

// ClearBillingInvoices clears all "billing_invoices" edges to the BillingInvoice entity.
func (_u *BillingProfileUpdateOne) ClearBillingInvoices() *BillingProfileUpdateOne {
	_u.mutation.ClearBillingInvoices()
	return _u
}

// RemoveBillingInvoiceIDs removes the "billing_invoices" edge to BillingInvoice entities by IDs.
func (_u *BillingProfileUpdateOne) RemoveBillingInvoiceIDs(ids ...string) *BillingProfileUpdateOne {
	_u.mutation.RemoveBillingInvoiceIDs(ids...)
	return _u
}

// RemoveBillingInvoices removes "billing_invoices" edges to BillingInvoice entities.
func (_u *BillingProfileUpdateOne) RemoveBillingInvoices(v ...*BillingInvoice) *BillingProfileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBillingInvoiceIDs(ids...)
}

// ClearBillingCustomerOverride clears all "billing_customer_override" edges to the BillingCustomerOverride entity.
func (_u *BillingProfileUpdateOne) ClearBillingCustomerOverride() *BillingProfileUpdateOne {
	_u.mutation.ClearBillingCustomerOverride()
	return _u
}

// RemoveBillingCustomerOverrideIDs removes the "billing_customer_override" edge to BillingCustomerOverride entities by IDs.
func (_u *BillingProfileUpdateOne) RemoveBillingCustomerOverrideIDs(ids ...string) *BillingProfileUpdateOne {
	_u.mutation.RemoveBillingCustomerOverrideIDs(ids...)
	return _u
}

// RemoveBillingCustomerOverride removes "billing_customer_override" edges to BillingCustomerOverride entities.
func (_u *BillingProfileUpdateOne) RemoveBillingCustomerOverride(v ...*BillingCustomerOverride) *BillingProfileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBillingCustomerOverrideIDs(ids...)
}

// ClearWorkflowConfig clears the "workflow_config" edge to the BillingWorkflowConfig entity.
func (_u *BillingProfileUpdateOne) ClearWorkflowConfig() *BillingProfileUpdateOne {
	_u.mutation.ClearWorkflowConfig()
	return _u
}

// Where appends a list predicates to the BillingProfileUpdate builder.
func (_u *BillingProfileUpdateOne) Where(ps ...predicate.BillingProfile) *BillingProfileUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BillingProfileUpdateOne) Select(field string, fields ...string) *BillingProfileUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BillingProfile entity.
func (_u *BillingProfileUpdateOne) Save(ctx context.Context) (*BillingProfile, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BillingProfileUpdateOne) SaveX(ctx context.Context) *BillingProfile {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BillingProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BillingProfileUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BillingProfileUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := billingprofile.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BillingProfileUpdateOne) check() error {
	if v, ok := _u.mutation.SupplierAddressCountry(); ok {
		if err := billingprofile.SupplierAddressCountryValidator(string(v)); err != nil {
			return &ValidationError{Name: "supplier_address_country", err: fmt.Errorf(`db: validator failed for field "BillingProfile.supplier_address_country": %w`, err)}
		}
	}
	if v, ok := _u.mutation.WorkflowConfigID(); ok {
		if err := billingprofile.WorkflowConfigIDValidator(v); err != nil {
			return &ValidationError{Name: "workflow_config_id", err: fmt.Errorf(`db: validator failed for field "BillingProfile.workflow_config_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.SupplierName(); ok {
		if err := billingprofile.SupplierNameValidator(v); err != nil {
			return &ValidationError{Name: "supplier_name", err: fmt.Errorf(`db: validator failed for field "BillingProfile.supplier_name": %w`, err)}
		}
	}
	if _u.mutation.WorkflowConfigCleared() && len(_u.mutation.WorkflowConfigIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingProfile.workflow_config"`)
	}
	if _u.mutation.TaxAppCleared() && len(_u.mutation.TaxAppIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingProfile.tax_app"`)
	}
	if _u.mutation.InvoicingAppCleared() && len(_u.mutation.InvoicingAppIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingProfile.invoicing_app"`)
	}
	if _u.mutation.PaymentAppCleared() && len(_u.mutation.PaymentAppIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingProfile.payment_app"`)
	}
	return nil
}

func (_u *BillingProfileUpdateOne) sqlSave(ctx context.Context) (_node *BillingProfile, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingprofile.Table, billingprofile.Columns, sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingprofile.FieldID)
		for _, f := range fields {
			if !billingprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billingprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(billingprofile.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(billingprofile.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(billingprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(billingprofile.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(billingprofile.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(billingprofile.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(billingprofile.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(billingprofile.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.SupplierAddressCountry(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressCountry, field.TypeString, value)
	}
	if _u.mutation.SupplierAddressCountryCleared() {
		_spec.ClearField(billingprofile.FieldSupplierAddressCountry, field.TypeString)
	}
	if value, ok := _u.mutation.SupplierAddressPostalCode(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressPostalCode, field.TypeString, value)
	}
	if _u.mutation.SupplierAddressPostalCodeCleared() {
		_spec.ClearField(billingprofile.FieldSupplierAddressPostalCode, field.TypeString)
	}
	if value, ok := _u.mutation.SupplierAddressState(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressState, field.TypeString, value)
	}
	if _u.mutation.SupplierAddressStateCleared() {
		_spec.ClearField(billingprofile.FieldSupplierAddressState, field.TypeString)
	}
	if value, ok := _u.mutation.SupplierAddressCity(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressCity, field.TypeString, value)
	}
	if _u.mutation.SupplierAddressCityCleared() {
		_spec.ClearField(billingprofile.FieldSupplierAddressCity, field.TypeString)
	}
	if value, ok := _u.mutation.SupplierAddressLine1(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressLine1, field.TypeString, value)
	}
	if _u.mutation.SupplierAddressLine1Cleared() {
		_spec.ClearField(billingprofile.FieldSupplierAddressLine1, field.TypeString)
	}
	if value, ok := _u.mutation.SupplierAddressLine2(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressLine2, field.TypeString, value)
	}
	if _u.mutation.SupplierAddressLine2Cleared() {
		_spec.ClearField(billingprofile.FieldSupplierAddressLine2, field.TypeString)
	}
	if value, ok := _u.mutation.SupplierAddressPhoneNumber(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressPhoneNumber, field.TypeString, value)
	}
	if _u.mutation.SupplierAddressPhoneNumberCleared() {
		_spec.ClearField(billingprofile.FieldSupplierAddressPhoneNumber, field.TypeString)
	}
	if value, ok := _u.mutation.Default(); ok {
		_spec.SetField(billingprofile.FieldDefault, field.TypeBool, value)
	}
	if value, ok := _u.mutation.SupplierName(); ok {
		_spec.SetField(billingprofile.FieldSupplierName, field.TypeString, value)
	}
	if value, ok := _u.mutation.SupplierTaxCode(); ok {
		_spec.SetField(billingprofile.FieldSupplierTaxCode, field.TypeString, value)
	}
	if _u.mutation.SupplierTaxCodeCleared() {
		_spec.ClearField(billingprofile.FieldSupplierTaxCode, field.TypeString)
	}
	if _u.mutation.BillingInvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingInvoicesTable,
			Columns: []string{billingprofile.BillingInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBillingInvoicesIDs(); len(nodes) > 0 && !_u.mutation.BillingInvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingInvoicesTable,
			Columns: []string{billingprofile.BillingInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingInvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingInvoicesTable,
			Columns: []string{billingprofile.BillingInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BillingCustomerOverrideCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingCustomerOverrideTable,
			Columns: []string{billingprofile.BillingCustomerOverrideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBillingCustomerOverrideIDs(); len(nodes) > 0 && !_u.mutation.BillingCustomerOverrideCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingCustomerOverrideTable,
			Columns: []string{billingprofile.BillingCustomerOverrideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingCustomerOverrideIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingCustomerOverrideTable,
			Columns: []string{billingprofile.BillingCustomerOverrideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.WorkflowConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingprofile.WorkflowConfigTable,
			Columns: []string{billingprofile.WorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.WorkflowConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingprofile.WorkflowConfigTable,
			Columns: []string{billingprofile.WorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingProfile{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
