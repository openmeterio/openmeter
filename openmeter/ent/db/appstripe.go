// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	dbapp "github.com/openmeterio/openmeter/openmeter/ent/db/app"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appstripe"
)

// AppStripe is the model entity for the AppStripe schema.
type AppStripe struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// StripeAccountID holds the value of the "stripe_account_id" field.
	StripeAccountID string `json:"stripe_account_id,omitempty"`
	// StripeLivemode holds the value of the "stripe_livemode" field.
	StripeLivemode bool `json:"stripe_livemode,omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey string `json:"-"`
	// MaskedAPIKey holds the value of the "masked_api_key" field.
	MaskedAPIKey string `json:"masked_api_key,omitempty"`
	// StripeWebhookID holds the value of the "stripe_webhook_id" field.
	StripeWebhookID string `json:"stripe_webhook_id,omitempty"`
	// WebhookSecret holds the value of the "webhook_secret" field.
	WebhookSecret string `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppStripeQuery when eager-loading is set.
	Edges        AppStripeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AppStripeEdges holds the relations/edges for other nodes in the graph.
type AppStripeEdges struct {
	// CustomerApps holds the value of the customer_apps edge.
	CustomerApps []*AppStripeCustomer `json:"customer_apps,omitempty"`
	// App holds the value of the app edge.
	App *App `json:"app,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CustomerAppsOrErr returns the CustomerApps value or an error if the edge
// was not loaded in eager-loading.
func (e AppStripeEdges) CustomerAppsOrErr() ([]*AppStripeCustomer, error) {
	if e.loadedTypes[0] {
		return e.CustomerApps, nil
	}
	return nil, &NotLoadedError{edge: "customer_apps"}
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppStripeEdges) AppOrErr() (*App, error) {
	if e.App != nil {
		return e.App, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: dbapp.Label}
	}
	return nil, &NotLoadedError{edge: "app"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppStripe) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appstripe.FieldStripeLivemode:
			values[i] = new(sql.NullBool)
		case appstripe.FieldID, appstripe.FieldNamespace, appstripe.FieldStripeAccountID, appstripe.FieldAPIKey, appstripe.FieldMaskedAPIKey, appstripe.FieldStripeWebhookID, appstripe.FieldWebhookSecret:
			values[i] = new(sql.NullString)
		case appstripe.FieldCreatedAt, appstripe.FieldUpdatedAt, appstripe.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppStripe fields.
func (as *AppStripe) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appstripe.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				as.ID = value.String
			}
		case appstripe.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				as.Namespace = value.String
			}
		case appstripe.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				as.CreatedAt = value.Time
			}
		case appstripe.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				as.UpdatedAt = value.Time
			}
		case appstripe.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				as.DeletedAt = new(time.Time)
				*as.DeletedAt = value.Time
			}
		case appstripe.FieldStripeAccountID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_account_id", values[i])
			} else if value.Valid {
				as.StripeAccountID = value.String
			}
		case appstripe.FieldStripeLivemode:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_livemode", values[i])
			} else if value.Valid {
				as.StripeLivemode = value.Bool
			}
		case appstripe.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				as.APIKey = value.String
			}
		case appstripe.FieldMaskedAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field masked_api_key", values[i])
			} else if value.Valid {
				as.MaskedAPIKey = value.String
			}
		case appstripe.FieldStripeWebhookID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_webhook_id", values[i])
			} else if value.Valid {
				as.StripeWebhookID = value.String
			}
		case appstripe.FieldWebhookSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field webhook_secret", values[i])
			} else if value.Valid {
				as.WebhookSecret = value.String
			}
		default:
			as.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppStripe.
// This includes values selected through modifiers, order, etc.
func (as *AppStripe) Value(name string) (ent.Value, error) {
	return as.selectValues.Get(name)
}

// QueryCustomerApps queries the "customer_apps" edge of the AppStripe entity.
func (as *AppStripe) QueryCustomerApps() *AppStripeCustomerQuery {
	return NewAppStripeClient(as.config).QueryCustomerApps(as)
}

// QueryApp queries the "app" edge of the AppStripe entity.
func (as *AppStripe) QueryApp() *AppQuery {
	return NewAppStripeClient(as.config).QueryApp(as)
}

// Update returns a builder for updating this AppStripe.
// Note that you need to call AppStripe.Unwrap() before calling this method if this AppStripe
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AppStripe) Update() *AppStripeUpdateOne {
	return NewAppStripeClient(as.config).UpdateOne(as)
}

// Unwrap unwraps the AppStripe entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *AppStripe) Unwrap() *AppStripe {
	_tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("db: AppStripe is not a transactional entity")
	}
	as.config.driver = _tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AppStripe) String() string {
	var builder strings.Builder
	builder.WriteString("AppStripe(")
	builder.WriteString(fmt.Sprintf("id=%v, ", as.ID))
	builder.WriteString("namespace=")
	builder.WriteString(as.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(as.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(as.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := as.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("stripe_account_id=")
	builder.WriteString(as.StripeAccountID)
	builder.WriteString(", ")
	builder.WriteString("stripe_livemode=")
	builder.WriteString(fmt.Sprintf("%v", as.StripeLivemode))
	builder.WriteString(", ")
	builder.WriteString("api_key=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("masked_api_key=")
	builder.WriteString(as.MaskedAPIKey)
	builder.WriteString(", ")
	builder.WriteString("stripe_webhook_id=")
	builder.WriteString(as.StripeWebhookID)
	builder.WriteString(", ")
	builder.WriteString("webhook_secret=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// AppStripes is a parsable slice of AppStripe.
type AppStripes []*AppStripe
