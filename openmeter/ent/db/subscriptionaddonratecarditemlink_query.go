// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonratecarditemlink"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
)

// SubscriptionAddonRateCardItemLinkQuery is the builder for querying SubscriptionAddonRateCardItemLink entities.
type SubscriptionAddonRateCardItemLinkQuery struct {
	config
	ctx                           *QueryContext
	order                         []subscriptionaddonratecarditemlink.OrderOption
	inters                        []Interceptor
	predicates                    []predicate.SubscriptionAddonRateCardItemLink
	withSubscriptionAddonRateCard *SubscriptionAddonRateCardQuery
	withSubscriptionItem          *SubscriptionItemQuery
	modifiers                     []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubscriptionAddonRateCardItemLinkQuery builder.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) Where(ps ...predicate.SubscriptionAddonRateCardItemLink) *SubscriptionAddonRateCardItemLinkQuery {
	sarcilq.predicates = append(sarcilq.predicates, ps...)
	return sarcilq
}

// Limit the number of records to be returned by this query.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) Limit(limit int) *SubscriptionAddonRateCardItemLinkQuery {
	sarcilq.ctx.Limit = &limit
	return sarcilq
}

// Offset to start from.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) Offset(offset int) *SubscriptionAddonRateCardItemLinkQuery {
	sarcilq.ctx.Offset = &offset
	return sarcilq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) Unique(unique bool) *SubscriptionAddonRateCardItemLinkQuery {
	sarcilq.ctx.Unique = &unique
	return sarcilq
}

// Order specifies how the records should be ordered.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) Order(o ...subscriptionaddonratecarditemlink.OrderOption) *SubscriptionAddonRateCardItemLinkQuery {
	sarcilq.order = append(sarcilq.order, o...)
	return sarcilq
}

// QuerySubscriptionAddonRateCard chains the current query on the "subscription_addon_rate_card" edge.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) QuerySubscriptionAddonRateCard() *SubscriptionAddonRateCardQuery {
	query := (&SubscriptionAddonRateCardClient{config: sarcilq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sarcilq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sarcilq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionaddonratecarditemlink.Table, subscriptionaddonratecarditemlink.FieldID, selector),
			sqlgraph.To(subscriptionaddonratecard.Table, subscriptionaddonratecard.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionaddonratecarditemlink.SubscriptionAddonRateCardTable, subscriptionaddonratecarditemlink.SubscriptionAddonRateCardColumn),
		)
		fromU = sqlgraph.SetNeighbors(sarcilq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscriptionItem chains the current query on the "subscription_item" edge.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) QuerySubscriptionItem() *SubscriptionItemQuery {
	query := (&SubscriptionItemClient{config: sarcilq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sarcilq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sarcilq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionaddonratecarditemlink.Table, subscriptionaddonratecarditemlink.FieldID, selector),
			sqlgraph.To(subscriptionitem.Table, subscriptionitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionaddonratecarditemlink.SubscriptionItemTable, subscriptionaddonratecarditemlink.SubscriptionItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(sarcilq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SubscriptionAddonRateCardItemLink entity from the query.
// Returns a *NotFoundError when no SubscriptionAddonRateCardItemLink was found.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) First(ctx context.Context) (*SubscriptionAddonRateCardItemLink, error) {
	nodes, err := sarcilq.Limit(1).All(setContextOp(ctx, sarcilq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{subscriptionaddonratecarditemlink.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) FirstX(ctx context.Context) *SubscriptionAddonRateCardItemLink {
	node, err := sarcilq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SubscriptionAddonRateCardItemLink ID from the query.
// Returns a *NotFoundError when no SubscriptionAddonRateCardItemLink ID was found.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sarcilq.Limit(1).IDs(setContextOp(ctx, sarcilq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{subscriptionaddonratecarditemlink.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) FirstIDX(ctx context.Context) string {
	id, err := sarcilq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SubscriptionAddonRateCardItemLink entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SubscriptionAddonRateCardItemLink entity is found.
// Returns a *NotFoundError when no SubscriptionAddonRateCardItemLink entities are found.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) Only(ctx context.Context) (*SubscriptionAddonRateCardItemLink, error) {
	nodes, err := sarcilq.Limit(2).All(setContextOp(ctx, sarcilq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{subscriptionaddonratecarditemlink.Label}
	default:
		return nil, &NotSingularError{subscriptionaddonratecarditemlink.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) OnlyX(ctx context.Context) *SubscriptionAddonRateCardItemLink {
	node, err := sarcilq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SubscriptionAddonRateCardItemLink ID in the query.
// Returns a *NotSingularError when more than one SubscriptionAddonRateCardItemLink ID is found.
// Returns a *NotFoundError when no entities are found.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sarcilq.Limit(2).IDs(setContextOp(ctx, sarcilq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{subscriptionaddonratecarditemlink.Label}
	default:
		err = &NotSingularError{subscriptionaddonratecarditemlink.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) OnlyIDX(ctx context.Context) string {
	id, err := sarcilq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SubscriptionAddonRateCardItemLinks.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) All(ctx context.Context) ([]*SubscriptionAddonRateCardItemLink, error) {
	ctx = setContextOp(ctx, sarcilq.ctx, ent.OpQueryAll)
	if err := sarcilq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SubscriptionAddonRateCardItemLink, *SubscriptionAddonRateCardItemLinkQuery]()
	return withInterceptors[[]*SubscriptionAddonRateCardItemLink](ctx, sarcilq, qr, sarcilq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) AllX(ctx context.Context) []*SubscriptionAddonRateCardItemLink {
	nodes, err := sarcilq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SubscriptionAddonRateCardItemLink IDs.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) IDs(ctx context.Context) (ids []string, err error) {
	if sarcilq.ctx.Unique == nil && sarcilq.path != nil {
		sarcilq.Unique(true)
	}
	ctx = setContextOp(ctx, sarcilq.ctx, ent.OpQueryIDs)
	if err = sarcilq.Select(subscriptionaddonratecarditemlink.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) IDsX(ctx context.Context) []string {
	ids, err := sarcilq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sarcilq.ctx, ent.OpQueryCount)
	if err := sarcilq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sarcilq, querierCount[*SubscriptionAddonRateCardItemLinkQuery](), sarcilq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) CountX(ctx context.Context) int {
	count, err := sarcilq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sarcilq.ctx, ent.OpQueryExist)
	switch _, err := sarcilq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) ExistX(ctx context.Context) bool {
	exist, err := sarcilq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubscriptionAddonRateCardItemLinkQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) Clone() *SubscriptionAddonRateCardItemLinkQuery {
	if sarcilq == nil {
		return nil
	}
	return &SubscriptionAddonRateCardItemLinkQuery{
		config:                        sarcilq.config,
		ctx:                           sarcilq.ctx.Clone(),
		order:                         append([]subscriptionaddonratecarditemlink.OrderOption{}, sarcilq.order...),
		inters:                        append([]Interceptor{}, sarcilq.inters...),
		predicates:                    append([]predicate.SubscriptionAddonRateCardItemLink{}, sarcilq.predicates...),
		withSubscriptionAddonRateCard: sarcilq.withSubscriptionAddonRateCard.Clone(),
		withSubscriptionItem:          sarcilq.withSubscriptionItem.Clone(),
		// clone intermediate query.
		sql:  sarcilq.sql.Clone(),
		path: sarcilq.path,
	}
}

// WithSubscriptionAddonRateCard tells the query-builder to eager-load the nodes that are connected to
// the "subscription_addon_rate_card" edge. The optional arguments are used to configure the query builder of the edge.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) WithSubscriptionAddonRateCard(opts ...func(*SubscriptionAddonRateCardQuery)) *SubscriptionAddonRateCardItemLinkQuery {
	query := (&SubscriptionAddonRateCardClient{config: sarcilq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sarcilq.withSubscriptionAddonRateCard = query
	return sarcilq
}

// WithSubscriptionItem tells the query-builder to eager-load the nodes that are connected to
// the "subscription_item" edge. The optional arguments are used to configure the query builder of the edge.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) WithSubscriptionItem(opts ...func(*SubscriptionItemQuery)) *SubscriptionAddonRateCardItemLinkQuery {
	query := (&SubscriptionItemClient{config: sarcilq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sarcilq.withSubscriptionItem = query
	return sarcilq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SubscriptionAddonRateCardItemLink.Query().
//		GroupBy(subscriptionaddonratecarditemlink.FieldCreatedAt).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) GroupBy(field string, fields ...string) *SubscriptionAddonRateCardItemLinkGroupBy {
	sarcilq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SubscriptionAddonRateCardItemLinkGroupBy{build: sarcilq}
	grbuild.flds = &sarcilq.ctx.Fields
	grbuild.label = subscriptionaddonratecarditemlink.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.SubscriptionAddonRateCardItemLink.Query().
//		Select(subscriptionaddonratecarditemlink.FieldCreatedAt).
//		Scan(ctx, &v)
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) Select(fields ...string) *SubscriptionAddonRateCardItemLinkSelect {
	sarcilq.ctx.Fields = append(sarcilq.ctx.Fields, fields...)
	sbuild := &SubscriptionAddonRateCardItemLinkSelect{SubscriptionAddonRateCardItemLinkQuery: sarcilq}
	sbuild.label = subscriptionaddonratecarditemlink.Label
	sbuild.flds, sbuild.scan = &sarcilq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SubscriptionAddonRateCardItemLinkSelect configured with the given aggregations.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) Aggregate(fns ...AggregateFunc) *SubscriptionAddonRateCardItemLinkSelect {
	return sarcilq.Select().Aggregate(fns...)
}

func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sarcilq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sarcilq); err != nil {
				return err
			}
		}
	}
	for _, f := range sarcilq.ctx.Fields {
		if !subscriptionaddonratecarditemlink.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if sarcilq.path != nil {
		prev, err := sarcilq.path(ctx)
		if err != nil {
			return err
		}
		sarcilq.sql = prev
	}
	return nil
}

func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SubscriptionAddonRateCardItemLink, error) {
	var (
		nodes       = []*SubscriptionAddonRateCardItemLink{}
		_spec       = sarcilq.querySpec()
		loadedTypes = [2]bool{
			sarcilq.withSubscriptionAddonRateCard != nil,
			sarcilq.withSubscriptionItem != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SubscriptionAddonRateCardItemLink).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SubscriptionAddonRateCardItemLink{config: sarcilq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sarcilq.modifiers) > 0 {
		_spec.Modifiers = sarcilq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sarcilq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sarcilq.withSubscriptionAddonRateCard; query != nil {
		if err := sarcilq.loadSubscriptionAddonRateCard(ctx, query, nodes, nil,
			func(n *SubscriptionAddonRateCardItemLink, e *SubscriptionAddonRateCard) {
				n.Edges.SubscriptionAddonRateCard = e
			}); err != nil {
			return nil, err
		}
	}
	if query := sarcilq.withSubscriptionItem; query != nil {
		if err := sarcilq.loadSubscriptionItem(ctx, query, nodes, nil,
			func(n *SubscriptionAddonRateCardItemLink, e *SubscriptionItem) { n.Edges.SubscriptionItem = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) loadSubscriptionAddonRateCard(ctx context.Context, query *SubscriptionAddonRateCardQuery, nodes []*SubscriptionAddonRateCardItemLink, init func(*SubscriptionAddonRateCardItemLink), assign func(*SubscriptionAddonRateCardItemLink, *SubscriptionAddonRateCard)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*SubscriptionAddonRateCardItemLink)
	for i := range nodes {
		fk := nodes[i].SubscriptionAddonRateCardID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subscriptionaddonratecard.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscription_addon_rate_card_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) loadSubscriptionItem(ctx context.Context, query *SubscriptionItemQuery, nodes []*SubscriptionAddonRateCardItemLink, init func(*SubscriptionAddonRateCardItemLink), assign func(*SubscriptionAddonRateCardItemLink, *SubscriptionItem)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*SubscriptionAddonRateCardItemLink)
	for i := range nodes {
		fk := nodes[i].SubscriptionItemID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subscriptionitem.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscription_item_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sarcilq.querySpec()
	if len(sarcilq.modifiers) > 0 {
		_spec.Modifiers = sarcilq.modifiers
	}
	_spec.Node.Columns = sarcilq.ctx.Fields
	if len(sarcilq.ctx.Fields) > 0 {
		_spec.Unique = sarcilq.ctx.Unique != nil && *sarcilq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sarcilq.driver, _spec)
}

func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(subscriptionaddonratecarditemlink.Table, subscriptionaddonratecarditemlink.Columns, sqlgraph.NewFieldSpec(subscriptionaddonratecarditemlink.FieldID, field.TypeString))
	_spec.From = sarcilq.sql
	if unique := sarcilq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sarcilq.path != nil {
		_spec.Unique = true
	}
	if fields := sarcilq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionaddonratecarditemlink.FieldID)
		for i := range fields {
			if fields[i] != subscriptionaddonratecarditemlink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sarcilq.withSubscriptionAddonRateCard != nil {
			_spec.Node.AddColumnOnce(subscriptionaddonratecarditemlink.FieldSubscriptionAddonRateCardID)
		}
		if sarcilq.withSubscriptionItem != nil {
			_spec.Node.AddColumnOnce(subscriptionaddonratecarditemlink.FieldSubscriptionItemID)
		}
	}
	if ps := sarcilq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sarcilq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sarcilq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sarcilq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sarcilq.driver.Dialect())
	t1 := builder.Table(subscriptionaddonratecarditemlink.Table)
	columns := sarcilq.ctx.Fields
	if len(columns) == 0 {
		columns = subscriptionaddonratecarditemlink.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sarcilq.sql != nil {
		selector = sarcilq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sarcilq.ctx.Unique != nil && *sarcilq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range sarcilq.modifiers {
		m(selector)
	}
	for _, p := range sarcilq.predicates {
		p(selector)
	}
	for _, p := range sarcilq.order {
		p(selector)
	}
	if offset := sarcilq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sarcilq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) ForUpdate(opts ...sql.LockOption) *SubscriptionAddonRateCardItemLinkQuery {
	if sarcilq.driver.Dialect() == dialect.Postgres {
		sarcilq.Unique(false)
	}
	sarcilq.modifiers = append(sarcilq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return sarcilq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (sarcilq *SubscriptionAddonRateCardItemLinkQuery) ForShare(opts ...sql.LockOption) *SubscriptionAddonRateCardItemLinkQuery {
	if sarcilq.driver.Dialect() == dialect.Postgres {
		sarcilq.Unique(false)
	}
	sarcilq.modifiers = append(sarcilq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return sarcilq
}

// SubscriptionAddonRateCardItemLinkGroupBy is the group-by builder for SubscriptionAddonRateCardItemLink entities.
type SubscriptionAddonRateCardItemLinkGroupBy struct {
	selector
	build *SubscriptionAddonRateCardItemLinkQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sarcilgb *SubscriptionAddonRateCardItemLinkGroupBy) Aggregate(fns ...AggregateFunc) *SubscriptionAddonRateCardItemLinkGroupBy {
	sarcilgb.fns = append(sarcilgb.fns, fns...)
	return sarcilgb
}

// Scan applies the selector query and scans the result into the given value.
func (sarcilgb *SubscriptionAddonRateCardItemLinkGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sarcilgb.build.ctx, ent.OpQueryGroupBy)
	if err := sarcilgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscriptionAddonRateCardItemLinkQuery, *SubscriptionAddonRateCardItemLinkGroupBy](ctx, sarcilgb.build, sarcilgb, sarcilgb.build.inters, v)
}

func (sarcilgb *SubscriptionAddonRateCardItemLinkGroupBy) sqlScan(ctx context.Context, root *SubscriptionAddonRateCardItemLinkQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sarcilgb.fns))
	for _, fn := range sarcilgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sarcilgb.flds)+len(sarcilgb.fns))
		for _, f := range *sarcilgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sarcilgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sarcilgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SubscriptionAddonRateCardItemLinkSelect is the builder for selecting fields of SubscriptionAddonRateCardItemLink entities.
type SubscriptionAddonRateCardItemLinkSelect struct {
	*SubscriptionAddonRateCardItemLinkQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sarcils *SubscriptionAddonRateCardItemLinkSelect) Aggregate(fns ...AggregateFunc) *SubscriptionAddonRateCardItemLinkSelect {
	sarcils.fns = append(sarcils.fns, fns...)
	return sarcils
}

// Scan applies the selector query and scans the result into the given value.
func (sarcils *SubscriptionAddonRateCardItemLinkSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sarcils.ctx, ent.OpQuerySelect)
	if err := sarcils.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscriptionAddonRateCardItemLinkQuery, *SubscriptionAddonRateCardItemLinkSelect](ctx, sarcils.SubscriptionAddonRateCardItemLinkQuery, sarcils, sarcils.inters, v)
}

func (sarcils *SubscriptionAddonRateCardItemLinkSelect) sqlScan(ctx context.Context, root *SubscriptionAddonRateCardItemLinkQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sarcils.fns))
	for _, fn := range sarcils.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sarcils.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sarcils.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
