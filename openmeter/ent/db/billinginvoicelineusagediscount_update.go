// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicelineusagediscount"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingInvoiceLineUsageDiscountUpdate is the builder for updating BillingInvoiceLineUsageDiscount entities.
type BillingInvoiceLineUsageDiscountUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceLineUsageDiscountMutation
}

// Where appends a list predicates to the BillingInvoiceLineUsageDiscountUpdate builder.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) Where(ps ...predicate.BillingInvoiceLineUsageDiscount) *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.Where(ps...)
	return biludu
}

// SetUpdatedAt sets the "updated_at" field.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetUpdatedAt(t time.Time) *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.SetUpdatedAt(t)
	return biludu
}

// SetDeletedAt sets the "deleted_at" field.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetDeletedAt(t time.Time) *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.SetDeletedAt(t)
	return biludu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceLineUsageDiscountUpdate {
	if t != nil {
		biludu.SetDeletedAt(*t)
	}
	return biludu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) ClearDeletedAt() *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.ClearDeletedAt()
	return biludu
}

// SetLineID sets the "line_id" field.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetLineID(s string) *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.SetLineID(s)
	return biludu
}

// SetNillableLineID sets the "line_id" field if the given value is not nil.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetNillableLineID(s *string) *BillingInvoiceLineUsageDiscountUpdate {
	if s != nil {
		biludu.SetLineID(*s)
	}
	return biludu
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetChildUniqueReferenceID(s string) *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.SetChildUniqueReferenceID(s)
	return biludu
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetNillableChildUniqueReferenceID(s *string) *BillingInvoiceLineUsageDiscountUpdate {
	if s != nil {
		biludu.SetChildUniqueReferenceID(*s)
	}
	return biludu
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) ClearChildUniqueReferenceID() *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.ClearChildUniqueReferenceID()
	return biludu
}

// SetDescription sets the "description" field.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetDescription(s string) *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.SetDescription(s)
	return biludu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetNillableDescription(s *string) *BillingInvoiceLineUsageDiscountUpdate {
	if s != nil {
		biludu.SetDescription(*s)
	}
	return biludu
}

// ClearDescription clears the value of the "description" field.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) ClearDescription() *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.ClearDescription()
	return biludu
}

// SetReason sets the "reason" field.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetReason(brt billing.DiscountReasonType) *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.SetReason(brt)
	return biludu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetNillableReason(brt *billing.DiscountReasonType) *BillingInvoiceLineUsageDiscountUpdate {
	if brt != nil {
		biludu.SetReason(*brt)
	}
	return biludu
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetInvoicingAppExternalID(s string) *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.SetInvoicingAppExternalID(s)
	return biludu
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetNillableInvoicingAppExternalID(s *string) *BillingInvoiceLineUsageDiscountUpdate {
	if s != nil {
		biludu.SetInvoicingAppExternalID(*s)
	}
	return biludu
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) ClearInvoicingAppExternalID() *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.ClearInvoicingAppExternalID()
	return biludu
}

// SetQuantity sets the "quantity" field.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetQuantity(a alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.SetQuantity(a)
	return biludu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetNillableQuantity(a *alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountUpdate {
	if a != nil {
		biludu.SetQuantity(*a)
	}
	return biludu
}

// SetPreLinePeriodQuantity sets the "pre_line_period_quantity" field.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetPreLinePeriodQuantity(a alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.SetPreLinePeriodQuantity(a)
	return biludu
}

// SetNillablePreLinePeriodQuantity sets the "pre_line_period_quantity" field if the given value is not nil.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetNillablePreLinePeriodQuantity(a *alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountUpdate {
	if a != nil {
		biludu.SetPreLinePeriodQuantity(*a)
	}
	return biludu
}

// ClearPreLinePeriodQuantity clears the value of the "pre_line_period_quantity" field.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) ClearPreLinePeriodQuantity() *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.ClearPreLinePeriodQuantity()
	return biludu
}

// SetReasonDetails sets the "reason_details" field.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetReasonDetails(br *billing.DiscountReason) *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.SetReasonDetails(br)
	return biludu
}

// ClearReasonDetails clears the value of the "reason_details" field.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) ClearReasonDetails() *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.ClearReasonDetails()
	return biludu
}

// SetBillingInvoiceLineID sets the "billing_invoice_line" edge to the BillingInvoiceLine entity by ID.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetBillingInvoiceLineID(id string) *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.SetBillingInvoiceLineID(id)
	return biludu
}

// SetBillingInvoiceLine sets the "billing_invoice_line" edge to the BillingInvoiceLine entity.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SetBillingInvoiceLine(b *BillingInvoiceLine) *BillingInvoiceLineUsageDiscountUpdate {
	return biludu.SetBillingInvoiceLineID(b.ID)
}

// Mutation returns the BillingInvoiceLineUsageDiscountMutation object of the builder.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) Mutation() *BillingInvoiceLineUsageDiscountMutation {
	return biludu.mutation
}

// ClearBillingInvoiceLine clears the "billing_invoice_line" edge to the BillingInvoiceLine entity.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) ClearBillingInvoiceLine() *BillingInvoiceLineUsageDiscountUpdate {
	biludu.mutation.ClearBillingInvoiceLine()
	return biludu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) Save(ctx context.Context) (int, error) {
	biludu.defaults()
	return withHooks(ctx, biludu.sqlSave, biludu.mutation, biludu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) SaveX(ctx context.Context) int {
	affected, err := biludu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) Exec(ctx context.Context) error {
	_, err := biludu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) ExecX(ctx context.Context) {
	if err := biludu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) defaults() {
	if _, ok := biludu.mutation.UpdatedAt(); !ok {
		v := billinginvoicelineusagediscount.UpdateDefaultUpdatedAt()
		biludu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biludu *BillingInvoiceLineUsageDiscountUpdate) check() error {
	if v, ok := biludu.mutation.Reason(); ok {
		if err := billinginvoicelineusagediscount.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLineUsageDiscount.reason": %w`, err)}
		}
	}
	if v, ok := biludu.mutation.ReasonDetails(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "reason_details", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLineUsageDiscount.reason_details": %w`, err)}
		}
	}
	if biludu.mutation.BillingInvoiceLineCleared() && len(biludu.mutation.BillingInvoiceLineIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceLineUsageDiscount.billing_invoice_line"`)
	}
	return nil
}

func (biludu *BillingInvoiceLineUsageDiscountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := biludu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoicelineusagediscount.Table, billinginvoicelineusagediscount.Columns, sqlgraph.NewFieldSpec(billinginvoicelineusagediscount.FieldID, field.TypeString))
	if ps := biludu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biludu.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biludu.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldDeletedAt, field.TypeTime, value)
	}
	if biludu.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoicelineusagediscount.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := biludu.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldChildUniqueReferenceID, field.TypeString, value)
	}
	if biludu.mutation.ChildUniqueReferenceIDCleared() {
		_spec.ClearField(billinginvoicelineusagediscount.FieldChildUniqueReferenceID, field.TypeString)
	}
	if value, ok := biludu.mutation.Description(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldDescription, field.TypeString, value)
	}
	if biludu.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoicelineusagediscount.FieldDescription, field.TypeString)
	}
	if value, ok := biludu.mutation.Reason(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldReason, field.TypeEnum, value)
	}
	if value, ok := biludu.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldInvoicingAppExternalID, field.TypeString, value)
	}
	if biludu.mutation.InvoicingAppExternalIDCleared() {
		_spec.ClearField(billinginvoicelineusagediscount.FieldInvoicingAppExternalID, field.TypeString)
	}
	if value, ok := biludu.mutation.Quantity(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldQuantity, field.TypeOther, value)
	}
	if value, ok := biludu.mutation.PreLinePeriodQuantity(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldPreLinePeriodQuantity, field.TypeOther, value)
	}
	if biludu.mutation.PreLinePeriodQuantityCleared() {
		_spec.ClearField(billinginvoicelineusagediscount.FieldPreLinePeriodQuantity, field.TypeOther)
	}
	if value, ok := biludu.mutation.ReasonDetails(); ok {
		vv, err := billinginvoicelineusagediscount.ValueScanner.ReasonDetails.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(billinginvoicelineusagediscount.FieldReasonDetails, field.TypeString, vv)
	}
	if biludu.mutation.ReasonDetailsCleared() {
		_spec.ClearField(billinginvoicelineusagediscount.FieldReasonDetails, field.TypeString)
	}
	if biludu.mutation.BillingInvoiceLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicelineusagediscount.BillingInvoiceLineTable,
			Columns: []string{billinginvoicelineusagediscount.BillingInvoiceLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biludu.mutation.BillingInvoiceLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicelineusagediscount.BillingInvoiceLineTable,
			Columns: []string{billinginvoicelineusagediscount.BillingInvoiceLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, biludu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicelineusagediscount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	biludu.mutation.done = true
	return n, nil
}

// BillingInvoiceLineUsageDiscountUpdateOne is the builder for updating a single BillingInvoiceLineUsageDiscount entity.
type BillingInvoiceLineUsageDiscountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceLineUsageDiscountMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetUpdatedAt(t time.Time) *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.SetUpdatedAt(t)
	return biluduo
}

// SetDeletedAt sets the "deleted_at" field.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetDeletedAt(t time.Time) *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.SetDeletedAt(t)
	return biluduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingInvoiceLineUsageDiscountUpdateOne {
	if t != nil {
		biluduo.SetDeletedAt(*t)
	}
	return biluduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) ClearDeletedAt() *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.ClearDeletedAt()
	return biluduo
}

// SetLineID sets the "line_id" field.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetLineID(s string) *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.SetLineID(s)
	return biluduo
}

// SetNillableLineID sets the "line_id" field if the given value is not nil.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetNillableLineID(s *string) *BillingInvoiceLineUsageDiscountUpdateOne {
	if s != nil {
		biluduo.SetLineID(*s)
	}
	return biluduo
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetChildUniqueReferenceID(s string) *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.SetChildUniqueReferenceID(s)
	return biluduo
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetNillableChildUniqueReferenceID(s *string) *BillingInvoiceLineUsageDiscountUpdateOne {
	if s != nil {
		biluduo.SetChildUniqueReferenceID(*s)
	}
	return biluduo
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) ClearChildUniqueReferenceID() *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.ClearChildUniqueReferenceID()
	return biluduo
}

// SetDescription sets the "description" field.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetDescription(s string) *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.SetDescription(s)
	return biluduo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetNillableDescription(s *string) *BillingInvoiceLineUsageDiscountUpdateOne {
	if s != nil {
		biluduo.SetDescription(*s)
	}
	return biluduo
}

// ClearDescription clears the value of the "description" field.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) ClearDescription() *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.ClearDescription()
	return biluduo
}

// SetReason sets the "reason" field.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetReason(brt billing.DiscountReasonType) *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.SetReason(brt)
	return biluduo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetNillableReason(brt *billing.DiscountReasonType) *BillingInvoiceLineUsageDiscountUpdateOne {
	if brt != nil {
		biluduo.SetReason(*brt)
	}
	return biluduo
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetInvoicingAppExternalID(s string) *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.SetInvoicingAppExternalID(s)
	return biluduo
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetNillableInvoicingAppExternalID(s *string) *BillingInvoiceLineUsageDiscountUpdateOne {
	if s != nil {
		biluduo.SetInvoicingAppExternalID(*s)
	}
	return biluduo
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) ClearInvoicingAppExternalID() *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.ClearInvoicingAppExternalID()
	return biluduo
}

// SetQuantity sets the "quantity" field.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetQuantity(a alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.SetQuantity(a)
	return biluduo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetNillableQuantity(a *alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountUpdateOne {
	if a != nil {
		biluduo.SetQuantity(*a)
	}
	return biluduo
}

// SetPreLinePeriodQuantity sets the "pre_line_period_quantity" field.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetPreLinePeriodQuantity(a alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.SetPreLinePeriodQuantity(a)
	return biluduo
}

// SetNillablePreLinePeriodQuantity sets the "pre_line_period_quantity" field if the given value is not nil.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetNillablePreLinePeriodQuantity(a *alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountUpdateOne {
	if a != nil {
		biluduo.SetPreLinePeriodQuantity(*a)
	}
	return biluduo
}

// ClearPreLinePeriodQuantity clears the value of the "pre_line_period_quantity" field.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) ClearPreLinePeriodQuantity() *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.ClearPreLinePeriodQuantity()
	return biluduo
}

// SetReasonDetails sets the "reason_details" field.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetReasonDetails(br *billing.DiscountReason) *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.SetReasonDetails(br)
	return biluduo
}

// ClearReasonDetails clears the value of the "reason_details" field.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) ClearReasonDetails() *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.ClearReasonDetails()
	return biluduo
}

// SetBillingInvoiceLineID sets the "billing_invoice_line" edge to the BillingInvoiceLine entity by ID.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetBillingInvoiceLineID(id string) *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.SetBillingInvoiceLineID(id)
	return biluduo
}

// SetBillingInvoiceLine sets the "billing_invoice_line" edge to the BillingInvoiceLine entity.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SetBillingInvoiceLine(b *BillingInvoiceLine) *BillingInvoiceLineUsageDiscountUpdateOne {
	return biluduo.SetBillingInvoiceLineID(b.ID)
}

// Mutation returns the BillingInvoiceLineUsageDiscountMutation object of the builder.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) Mutation() *BillingInvoiceLineUsageDiscountMutation {
	return biluduo.mutation
}

// ClearBillingInvoiceLine clears the "billing_invoice_line" edge to the BillingInvoiceLine entity.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) ClearBillingInvoiceLine() *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.ClearBillingInvoiceLine()
	return biluduo
}

// Where appends a list predicates to the BillingInvoiceLineUsageDiscountUpdate builder.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) Where(ps ...predicate.BillingInvoiceLineUsageDiscount) *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.mutation.Where(ps...)
	return biluduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) Select(field string, fields ...string) *BillingInvoiceLineUsageDiscountUpdateOne {
	biluduo.fields = append([]string{field}, fields...)
	return biluduo
}

// Save executes the query and returns the updated BillingInvoiceLineUsageDiscount entity.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) Save(ctx context.Context) (*BillingInvoiceLineUsageDiscount, error) {
	biluduo.defaults()
	return withHooks(ctx, biluduo.sqlSave, biluduo.mutation, biluduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) SaveX(ctx context.Context) *BillingInvoiceLineUsageDiscount {
	node, err := biluduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) Exec(ctx context.Context) error {
	_, err := biluduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) ExecX(ctx context.Context) {
	if err := biluduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) defaults() {
	if _, ok := biluduo.mutation.UpdatedAt(); !ok {
		v := billinginvoicelineusagediscount.UpdateDefaultUpdatedAt()
		biluduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) check() error {
	if v, ok := biluduo.mutation.Reason(); ok {
		if err := billinginvoicelineusagediscount.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLineUsageDiscount.reason": %w`, err)}
		}
	}
	if v, ok := biluduo.mutation.ReasonDetails(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "reason_details", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLineUsageDiscount.reason_details": %w`, err)}
		}
	}
	if biluduo.mutation.BillingInvoiceLineCleared() && len(biluduo.mutation.BillingInvoiceLineIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceLineUsageDiscount.billing_invoice_line"`)
	}
	return nil
}

func (biluduo *BillingInvoiceLineUsageDiscountUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoiceLineUsageDiscount, err error) {
	if err := biluduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoicelineusagediscount.Table, billinginvoicelineusagediscount.Columns, sqlgraph.NewFieldSpec(billinginvoicelineusagediscount.FieldID, field.TypeString))
	id, ok := biluduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoiceLineUsageDiscount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := biluduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoicelineusagediscount.FieldID)
		for _, f := range fields {
			if !billinginvoicelineusagediscount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoicelineusagediscount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := biluduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biluduo.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biluduo.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldDeletedAt, field.TypeTime, value)
	}
	if biluduo.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoicelineusagediscount.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := biluduo.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldChildUniqueReferenceID, field.TypeString, value)
	}
	if biluduo.mutation.ChildUniqueReferenceIDCleared() {
		_spec.ClearField(billinginvoicelineusagediscount.FieldChildUniqueReferenceID, field.TypeString)
	}
	if value, ok := biluduo.mutation.Description(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldDescription, field.TypeString, value)
	}
	if biluduo.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoicelineusagediscount.FieldDescription, field.TypeString)
	}
	if value, ok := biluduo.mutation.Reason(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldReason, field.TypeEnum, value)
	}
	if value, ok := biluduo.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldInvoicingAppExternalID, field.TypeString, value)
	}
	if biluduo.mutation.InvoicingAppExternalIDCleared() {
		_spec.ClearField(billinginvoicelineusagediscount.FieldInvoicingAppExternalID, field.TypeString)
	}
	if value, ok := biluduo.mutation.Quantity(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldQuantity, field.TypeOther, value)
	}
	if value, ok := biluduo.mutation.PreLinePeriodQuantity(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldPreLinePeriodQuantity, field.TypeOther, value)
	}
	if biluduo.mutation.PreLinePeriodQuantityCleared() {
		_spec.ClearField(billinginvoicelineusagediscount.FieldPreLinePeriodQuantity, field.TypeOther)
	}
	if value, ok := biluduo.mutation.ReasonDetails(); ok {
		vv, err := billinginvoicelineusagediscount.ValueScanner.ReasonDetails.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(billinginvoicelineusagediscount.FieldReasonDetails, field.TypeString, vv)
	}
	if biluduo.mutation.ReasonDetailsCleared() {
		_spec.ClearField(billinginvoicelineusagediscount.FieldReasonDetails, field.TypeString)
	}
	if biluduo.mutation.BillingInvoiceLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicelineusagediscount.BillingInvoiceLineTable,
			Columns: []string{billinginvoicelineusagediscount.BillingInvoiceLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biluduo.mutation.BillingInvoiceLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicelineusagediscount.BillingInvoiceLineTable,
			Columns: []string{billinginvoicelineusagediscount.BillingInvoiceLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingInvoiceLineUsageDiscount{config: biluduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biluduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicelineusagediscount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	biluduo.mutation.done = true
	return _node, nil
}
