// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonratecarditemlink"
)

// SubscriptionAddonRateCardQuery is the builder for querying SubscriptionAddonRateCard entities.
type SubscriptionAddonRateCardQuery struct {
	config
	ctx                   *QueryContext
	order                 []subscriptionaddonratecard.OrderOption
	inters                []Interceptor
	predicates            []predicate.SubscriptionAddonRateCard
	withSubscriptionAddon *SubscriptionAddonQuery
	withItems             *SubscriptionAddonRateCardItemLinkQuery
	withAddonRatecard     *AddonRateCardQuery
	modifiers             []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubscriptionAddonRateCardQuery builder.
func (sarcq *SubscriptionAddonRateCardQuery) Where(ps ...predicate.SubscriptionAddonRateCard) *SubscriptionAddonRateCardQuery {
	sarcq.predicates = append(sarcq.predicates, ps...)
	return sarcq
}

// Limit the number of records to be returned by this query.
func (sarcq *SubscriptionAddonRateCardQuery) Limit(limit int) *SubscriptionAddonRateCardQuery {
	sarcq.ctx.Limit = &limit
	return sarcq
}

// Offset to start from.
func (sarcq *SubscriptionAddonRateCardQuery) Offset(offset int) *SubscriptionAddonRateCardQuery {
	sarcq.ctx.Offset = &offset
	return sarcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sarcq *SubscriptionAddonRateCardQuery) Unique(unique bool) *SubscriptionAddonRateCardQuery {
	sarcq.ctx.Unique = &unique
	return sarcq
}

// Order specifies how the records should be ordered.
func (sarcq *SubscriptionAddonRateCardQuery) Order(o ...subscriptionaddonratecard.OrderOption) *SubscriptionAddonRateCardQuery {
	sarcq.order = append(sarcq.order, o...)
	return sarcq
}

// QuerySubscriptionAddon chains the current query on the "subscription_addon" edge.
func (sarcq *SubscriptionAddonRateCardQuery) QuerySubscriptionAddon() *SubscriptionAddonQuery {
	query := (&SubscriptionAddonClient{config: sarcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sarcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sarcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionaddonratecard.Table, subscriptionaddonratecard.FieldID, selector),
			sqlgraph.To(subscriptionaddon.Table, subscriptionaddon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionaddonratecard.SubscriptionAddonTable, subscriptionaddonratecard.SubscriptionAddonColumn),
		)
		fromU = sqlgraph.SetNeighbors(sarcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryItems chains the current query on the "items" edge.
func (sarcq *SubscriptionAddonRateCardQuery) QueryItems() *SubscriptionAddonRateCardItemLinkQuery {
	query := (&SubscriptionAddonRateCardItemLinkClient{config: sarcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sarcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sarcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionaddonratecard.Table, subscriptionaddonratecard.FieldID, selector),
			sqlgraph.To(subscriptionaddonratecarditemlink.Table, subscriptionaddonratecarditemlink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscriptionaddonratecard.ItemsTable, subscriptionaddonratecard.ItemsColumn),
		)
		fromU = sqlgraph.SetNeighbors(sarcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAddonRatecard chains the current query on the "addon_ratecard" edge.
func (sarcq *SubscriptionAddonRateCardQuery) QueryAddonRatecard() *AddonRateCardQuery {
	query := (&AddonRateCardClient{config: sarcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sarcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sarcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionaddonratecard.Table, subscriptionaddonratecard.FieldID, selector),
			sqlgraph.To(addonratecard.Table, addonratecard.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionaddonratecard.AddonRatecardTable, subscriptionaddonratecard.AddonRatecardColumn),
		)
		fromU = sqlgraph.SetNeighbors(sarcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SubscriptionAddonRateCard entity from the query.
// Returns a *NotFoundError when no SubscriptionAddonRateCard was found.
func (sarcq *SubscriptionAddonRateCardQuery) First(ctx context.Context) (*SubscriptionAddonRateCard, error) {
	nodes, err := sarcq.Limit(1).All(setContextOp(ctx, sarcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{subscriptionaddonratecard.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sarcq *SubscriptionAddonRateCardQuery) FirstX(ctx context.Context) *SubscriptionAddonRateCard {
	node, err := sarcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SubscriptionAddonRateCard ID from the query.
// Returns a *NotFoundError when no SubscriptionAddonRateCard ID was found.
func (sarcq *SubscriptionAddonRateCardQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sarcq.Limit(1).IDs(setContextOp(ctx, sarcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{subscriptionaddonratecard.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sarcq *SubscriptionAddonRateCardQuery) FirstIDX(ctx context.Context) string {
	id, err := sarcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SubscriptionAddonRateCard entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SubscriptionAddonRateCard entity is found.
// Returns a *NotFoundError when no SubscriptionAddonRateCard entities are found.
func (sarcq *SubscriptionAddonRateCardQuery) Only(ctx context.Context) (*SubscriptionAddonRateCard, error) {
	nodes, err := sarcq.Limit(2).All(setContextOp(ctx, sarcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{subscriptionaddonratecard.Label}
	default:
		return nil, &NotSingularError{subscriptionaddonratecard.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sarcq *SubscriptionAddonRateCardQuery) OnlyX(ctx context.Context) *SubscriptionAddonRateCard {
	node, err := sarcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SubscriptionAddonRateCard ID in the query.
// Returns a *NotSingularError when more than one SubscriptionAddonRateCard ID is found.
// Returns a *NotFoundError when no entities are found.
func (sarcq *SubscriptionAddonRateCardQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sarcq.Limit(2).IDs(setContextOp(ctx, sarcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{subscriptionaddonratecard.Label}
	default:
		err = &NotSingularError{subscriptionaddonratecard.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sarcq *SubscriptionAddonRateCardQuery) OnlyIDX(ctx context.Context) string {
	id, err := sarcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SubscriptionAddonRateCards.
func (sarcq *SubscriptionAddonRateCardQuery) All(ctx context.Context) ([]*SubscriptionAddonRateCard, error) {
	ctx = setContextOp(ctx, sarcq.ctx, ent.OpQueryAll)
	if err := sarcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SubscriptionAddonRateCard, *SubscriptionAddonRateCardQuery]()
	return withInterceptors[[]*SubscriptionAddonRateCard](ctx, sarcq, qr, sarcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sarcq *SubscriptionAddonRateCardQuery) AllX(ctx context.Context) []*SubscriptionAddonRateCard {
	nodes, err := sarcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SubscriptionAddonRateCard IDs.
func (sarcq *SubscriptionAddonRateCardQuery) IDs(ctx context.Context) (ids []string, err error) {
	if sarcq.ctx.Unique == nil && sarcq.path != nil {
		sarcq.Unique(true)
	}
	ctx = setContextOp(ctx, sarcq.ctx, ent.OpQueryIDs)
	if err = sarcq.Select(subscriptionaddonratecard.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sarcq *SubscriptionAddonRateCardQuery) IDsX(ctx context.Context) []string {
	ids, err := sarcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sarcq *SubscriptionAddonRateCardQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sarcq.ctx, ent.OpQueryCount)
	if err := sarcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sarcq, querierCount[*SubscriptionAddonRateCardQuery](), sarcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sarcq *SubscriptionAddonRateCardQuery) CountX(ctx context.Context) int {
	count, err := sarcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sarcq *SubscriptionAddonRateCardQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sarcq.ctx, ent.OpQueryExist)
	switch _, err := sarcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sarcq *SubscriptionAddonRateCardQuery) ExistX(ctx context.Context) bool {
	exist, err := sarcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubscriptionAddonRateCardQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sarcq *SubscriptionAddonRateCardQuery) Clone() *SubscriptionAddonRateCardQuery {
	if sarcq == nil {
		return nil
	}
	return &SubscriptionAddonRateCardQuery{
		config:                sarcq.config,
		ctx:                   sarcq.ctx.Clone(),
		order:                 append([]subscriptionaddonratecard.OrderOption{}, sarcq.order...),
		inters:                append([]Interceptor{}, sarcq.inters...),
		predicates:            append([]predicate.SubscriptionAddonRateCard{}, sarcq.predicates...),
		withSubscriptionAddon: sarcq.withSubscriptionAddon.Clone(),
		withItems:             sarcq.withItems.Clone(),
		withAddonRatecard:     sarcq.withAddonRatecard.Clone(),
		// clone intermediate query.
		sql:  sarcq.sql.Clone(),
		path: sarcq.path,
	}
}

// WithSubscriptionAddon tells the query-builder to eager-load the nodes that are connected to
// the "subscription_addon" edge. The optional arguments are used to configure the query builder of the edge.
func (sarcq *SubscriptionAddonRateCardQuery) WithSubscriptionAddon(opts ...func(*SubscriptionAddonQuery)) *SubscriptionAddonRateCardQuery {
	query := (&SubscriptionAddonClient{config: sarcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sarcq.withSubscriptionAddon = query
	return sarcq
}

// WithItems tells the query-builder to eager-load the nodes that are connected to
// the "items" edge. The optional arguments are used to configure the query builder of the edge.
func (sarcq *SubscriptionAddonRateCardQuery) WithItems(opts ...func(*SubscriptionAddonRateCardItemLinkQuery)) *SubscriptionAddonRateCardQuery {
	query := (&SubscriptionAddonRateCardItemLinkClient{config: sarcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sarcq.withItems = query
	return sarcq
}

// WithAddonRatecard tells the query-builder to eager-load the nodes that are connected to
// the "addon_ratecard" edge. The optional arguments are used to configure the query builder of the edge.
func (sarcq *SubscriptionAddonRateCardQuery) WithAddonRatecard(opts ...func(*AddonRateCardQuery)) *SubscriptionAddonRateCardQuery {
	query := (&AddonRateCardClient{config: sarcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sarcq.withAddonRatecard = query
	return sarcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SubscriptionAddonRateCard.Query().
//		GroupBy(subscriptionaddonratecard.FieldNamespace).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (sarcq *SubscriptionAddonRateCardQuery) GroupBy(field string, fields ...string) *SubscriptionAddonRateCardGroupBy {
	sarcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SubscriptionAddonRateCardGroupBy{build: sarcq}
	grbuild.flds = &sarcq.ctx.Fields
	grbuild.label = subscriptionaddonratecard.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//	}
//
//	client.SubscriptionAddonRateCard.Query().
//		Select(subscriptionaddonratecard.FieldNamespace).
//		Scan(ctx, &v)
func (sarcq *SubscriptionAddonRateCardQuery) Select(fields ...string) *SubscriptionAddonRateCardSelect {
	sarcq.ctx.Fields = append(sarcq.ctx.Fields, fields...)
	sbuild := &SubscriptionAddonRateCardSelect{SubscriptionAddonRateCardQuery: sarcq}
	sbuild.label = subscriptionaddonratecard.Label
	sbuild.flds, sbuild.scan = &sarcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SubscriptionAddonRateCardSelect configured with the given aggregations.
func (sarcq *SubscriptionAddonRateCardQuery) Aggregate(fns ...AggregateFunc) *SubscriptionAddonRateCardSelect {
	return sarcq.Select().Aggregate(fns...)
}

func (sarcq *SubscriptionAddonRateCardQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sarcq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sarcq); err != nil {
				return err
			}
		}
	}
	for _, f := range sarcq.ctx.Fields {
		if !subscriptionaddonratecard.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if sarcq.path != nil {
		prev, err := sarcq.path(ctx)
		if err != nil {
			return err
		}
		sarcq.sql = prev
	}
	return nil
}

func (sarcq *SubscriptionAddonRateCardQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SubscriptionAddonRateCard, error) {
	var (
		nodes       = []*SubscriptionAddonRateCard{}
		_spec       = sarcq.querySpec()
		loadedTypes = [3]bool{
			sarcq.withSubscriptionAddon != nil,
			sarcq.withItems != nil,
			sarcq.withAddonRatecard != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SubscriptionAddonRateCard).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SubscriptionAddonRateCard{config: sarcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sarcq.modifiers) > 0 {
		_spec.Modifiers = sarcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sarcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sarcq.withSubscriptionAddon; query != nil {
		if err := sarcq.loadSubscriptionAddon(ctx, query, nodes, nil,
			func(n *SubscriptionAddonRateCard, e *SubscriptionAddon) { n.Edges.SubscriptionAddon = e }); err != nil {
			return nil, err
		}
	}
	if query := sarcq.withItems; query != nil {
		if err := sarcq.loadItems(ctx, query, nodes,
			func(n *SubscriptionAddonRateCard) { n.Edges.Items = []*SubscriptionAddonRateCardItemLink{} },
			func(n *SubscriptionAddonRateCard, e *SubscriptionAddonRateCardItemLink) {
				n.Edges.Items = append(n.Edges.Items, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := sarcq.withAddonRatecard; query != nil {
		if err := sarcq.loadAddonRatecard(ctx, query, nodes, nil,
			func(n *SubscriptionAddonRateCard, e *AddonRateCard) { n.Edges.AddonRatecard = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sarcq *SubscriptionAddonRateCardQuery) loadSubscriptionAddon(ctx context.Context, query *SubscriptionAddonQuery, nodes []*SubscriptionAddonRateCard, init func(*SubscriptionAddonRateCard), assign func(*SubscriptionAddonRateCard, *SubscriptionAddon)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*SubscriptionAddonRateCard)
	for i := range nodes {
		fk := nodes[i].SubscriptionAddonID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subscriptionaddon.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscription_addon_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sarcq *SubscriptionAddonRateCardQuery) loadItems(ctx context.Context, query *SubscriptionAddonRateCardItemLinkQuery, nodes []*SubscriptionAddonRateCard, init func(*SubscriptionAddonRateCard), assign func(*SubscriptionAddonRateCard, *SubscriptionAddonRateCardItemLink)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*SubscriptionAddonRateCard)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(subscriptionaddonratecarditemlink.FieldSubscriptionAddonRateCardID)
	}
	query.Where(predicate.SubscriptionAddonRateCardItemLink(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(subscriptionaddonratecard.ItemsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SubscriptionAddonRateCardID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "subscription_addon_rate_card_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sarcq *SubscriptionAddonRateCardQuery) loadAddonRatecard(ctx context.Context, query *AddonRateCardQuery, nodes []*SubscriptionAddonRateCard, init func(*SubscriptionAddonRateCard), assign func(*SubscriptionAddonRateCard, *AddonRateCard)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*SubscriptionAddonRateCard)
	for i := range nodes {
		fk := nodes[i].AddonRatecardID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(addonratecard.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "addon_ratecard_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sarcq *SubscriptionAddonRateCardQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sarcq.querySpec()
	if len(sarcq.modifiers) > 0 {
		_spec.Modifiers = sarcq.modifiers
	}
	_spec.Node.Columns = sarcq.ctx.Fields
	if len(sarcq.ctx.Fields) > 0 {
		_spec.Unique = sarcq.ctx.Unique != nil && *sarcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sarcq.driver, _spec)
}

func (sarcq *SubscriptionAddonRateCardQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(subscriptionaddonratecard.Table, subscriptionaddonratecard.Columns, sqlgraph.NewFieldSpec(subscriptionaddonratecard.FieldID, field.TypeString))
	_spec.From = sarcq.sql
	if unique := sarcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sarcq.path != nil {
		_spec.Unique = true
	}
	if fields := sarcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionaddonratecard.FieldID)
		for i := range fields {
			if fields[i] != subscriptionaddonratecard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sarcq.withSubscriptionAddon != nil {
			_spec.Node.AddColumnOnce(subscriptionaddonratecard.FieldSubscriptionAddonID)
		}
		if sarcq.withAddonRatecard != nil {
			_spec.Node.AddColumnOnce(subscriptionaddonratecard.FieldAddonRatecardID)
		}
	}
	if ps := sarcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sarcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sarcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sarcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sarcq *SubscriptionAddonRateCardQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sarcq.driver.Dialect())
	t1 := builder.Table(subscriptionaddonratecard.Table)
	columns := sarcq.ctx.Fields
	if len(columns) == 0 {
		columns = subscriptionaddonratecard.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sarcq.sql != nil {
		selector = sarcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sarcq.ctx.Unique != nil && *sarcq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range sarcq.modifiers {
		m(selector)
	}
	for _, p := range sarcq.predicates {
		p(selector)
	}
	for _, p := range sarcq.order {
		p(selector)
	}
	if offset := sarcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sarcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (sarcq *SubscriptionAddonRateCardQuery) ForUpdate(opts ...sql.LockOption) *SubscriptionAddonRateCardQuery {
	if sarcq.driver.Dialect() == dialect.Postgres {
		sarcq.Unique(false)
	}
	sarcq.modifiers = append(sarcq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return sarcq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (sarcq *SubscriptionAddonRateCardQuery) ForShare(opts ...sql.LockOption) *SubscriptionAddonRateCardQuery {
	if sarcq.driver.Dialect() == dialect.Postgres {
		sarcq.Unique(false)
	}
	sarcq.modifiers = append(sarcq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return sarcq
}

// SubscriptionAddonRateCardGroupBy is the group-by builder for SubscriptionAddonRateCard entities.
type SubscriptionAddonRateCardGroupBy struct {
	selector
	build *SubscriptionAddonRateCardQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sarcgb *SubscriptionAddonRateCardGroupBy) Aggregate(fns ...AggregateFunc) *SubscriptionAddonRateCardGroupBy {
	sarcgb.fns = append(sarcgb.fns, fns...)
	return sarcgb
}

// Scan applies the selector query and scans the result into the given value.
func (sarcgb *SubscriptionAddonRateCardGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sarcgb.build.ctx, ent.OpQueryGroupBy)
	if err := sarcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscriptionAddonRateCardQuery, *SubscriptionAddonRateCardGroupBy](ctx, sarcgb.build, sarcgb, sarcgb.build.inters, v)
}

func (sarcgb *SubscriptionAddonRateCardGroupBy) sqlScan(ctx context.Context, root *SubscriptionAddonRateCardQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sarcgb.fns))
	for _, fn := range sarcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sarcgb.flds)+len(sarcgb.fns))
		for _, f := range *sarcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sarcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sarcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SubscriptionAddonRateCardSelect is the builder for selecting fields of SubscriptionAddonRateCard entities.
type SubscriptionAddonRateCardSelect struct {
	*SubscriptionAddonRateCardQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sarcs *SubscriptionAddonRateCardSelect) Aggregate(fns ...AggregateFunc) *SubscriptionAddonRateCardSelect {
	sarcs.fns = append(sarcs.fns, fns...)
	return sarcs
}

// Scan applies the selector query and scans the result into the given value.
func (sarcs *SubscriptionAddonRateCardSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sarcs.ctx, ent.OpQuerySelect)
	if err := sarcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscriptionAddonRateCardQuery, *SubscriptionAddonRateCardSelect](ctx, sarcs.SubscriptionAddonRateCardQuery, sarcs, sarcs.inters, v)
}

func (sarcs *SubscriptionAddonRateCardSelect) sqlScan(ctx context.Context, root *SubscriptionAddonRateCardQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sarcs.fns))
	for _, fn := range sarcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sarcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sarcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
