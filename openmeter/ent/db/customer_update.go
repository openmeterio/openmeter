// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustomer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomeroverride"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customersubjects"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/pkg/currencyx"
	"github.com/openmeterio/openmeter/pkg/models"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (_u *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *CustomerUpdate) SetMetadata(v map[string]string) *CustomerUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *CustomerUpdate) ClearMetadata() *CustomerUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CustomerUpdate) SetUpdatedAt(v time.Time) *CustomerUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *CustomerUpdate) SetDeletedAt(v time.Time) *CustomerUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *CustomerUpdate) SetNillableDeletedAt(v *time.Time) *CustomerUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *CustomerUpdate) ClearDeletedAt() *CustomerUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *CustomerUpdate) SetName(v string) *CustomerUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CustomerUpdate) SetNillableName(v *string) *CustomerUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *CustomerUpdate) SetDescription(v string) *CustomerUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *CustomerUpdate) SetNillableDescription(v *string) *CustomerUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *CustomerUpdate) ClearDescription() *CustomerUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetBillingAddressCountry sets the "billing_address_country" field.
func (_u *CustomerUpdate) SetBillingAddressCountry(v models.CountryCode) *CustomerUpdate {
	_u.mutation.SetBillingAddressCountry(v)
	return _u
}

// SetNillableBillingAddressCountry sets the "billing_address_country" field if the given value is not nil.
func (_u *CustomerUpdate) SetNillableBillingAddressCountry(v *models.CountryCode) *CustomerUpdate {
	if v != nil {
		_u.SetBillingAddressCountry(*v)
	}
	return _u
}

// ClearBillingAddressCountry clears the value of the "billing_address_country" field.
func (_u *CustomerUpdate) ClearBillingAddressCountry() *CustomerUpdate {
	_u.mutation.ClearBillingAddressCountry()
	return _u
}

// SetBillingAddressPostalCode sets the "billing_address_postal_code" field.
func (_u *CustomerUpdate) SetBillingAddressPostalCode(v string) *CustomerUpdate {
	_u.mutation.SetBillingAddressPostalCode(v)
	return _u
}

// SetNillableBillingAddressPostalCode sets the "billing_address_postal_code" field if the given value is not nil.
func (_u *CustomerUpdate) SetNillableBillingAddressPostalCode(v *string) *CustomerUpdate {
	if v != nil {
		_u.SetBillingAddressPostalCode(*v)
	}
	return _u
}

// ClearBillingAddressPostalCode clears the value of the "billing_address_postal_code" field.
func (_u *CustomerUpdate) ClearBillingAddressPostalCode() *CustomerUpdate {
	_u.mutation.ClearBillingAddressPostalCode()
	return _u
}

// SetBillingAddressState sets the "billing_address_state" field.
func (_u *CustomerUpdate) SetBillingAddressState(v string) *CustomerUpdate {
	_u.mutation.SetBillingAddressState(v)
	return _u
}

// SetNillableBillingAddressState sets the "billing_address_state" field if the given value is not nil.
func (_u *CustomerUpdate) SetNillableBillingAddressState(v *string) *CustomerUpdate {
	if v != nil {
		_u.SetBillingAddressState(*v)
	}
	return _u
}

// ClearBillingAddressState clears the value of the "billing_address_state" field.
func (_u *CustomerUpdate) ClearBillingAddressState() *CustomerUpdate {
	_u.mutation.ClearBillingAddressState()
	return _u
}

// SetBillingAddressCity sets the "billing_address_city" field.
func (_u *CustomerUpdate) SetBillingAddressCity(v string) *CustomerUpdate {
	_u.mutation.SetBillingAddressCity(v)
	return _u
}

// SetNillableBillingAddressCity sets the "billing_address_city" field if the given value is not nil.
func (_u *CustomerUpdate) SetNillableBillingAddressCity(v *string) *CustomerUpdate {
	if v != nil {
		_u.SetBillingAddressCity(*v)
	}
	return _u
}

// ClearBillingAddressCity clears the value of the "billing_address_city" field.
func (_u *CustomerUpdate) ClearBillingAddressCity() *CustomerUpdate {
	_u.mutation.ClearBillingAddressCity()
	return _u
}

// SetBillingAddressLine1 sets the "billing_address_line1" field.
func (_u *CustomerUpdate) SetBillingAddressLine1(v string) *CustomerUpdate {
	_u.mutation.SetBillingAddressLine1(v)
	return _u
}

// SetNillableBillingAddressLine1 sets the "billing_address_line1" field if the given value is not nil.
func (_u *CustomerUpdate) SetNillableBillingAddressLine1(v *string) *CustomerUpdate {
	if v != nil {
		_u.SetBillingAddressLine1(*v)
	}
	return _u
}

// ClearBillingAddressLine1 clears the value of the "billing_address_line1" field.
func (_u *CustomerUpdate) ClearBillingAddressLine1() *CustomerUpdate {
	_u.mutation.ClearBillingAddressLine1()
	return _u
}

// SetBillingAddressLine2 sets the "billing_address_line2" field.
func (_u *CustomerUpdate) SetBillingAddressLine2(v string) *CustomerUpdate {
	_u.mutation.SetBillingAddressLine2(v)
	return _u
}

// SetNillableBillingAddressLine2 sets the "billing_address_line2" field if the given value is not nil.
func (_u *CustomerUpdate) SetNillableBillingAddressLine2(v *string) *CustomerUpdate {
	if v != nil {
		_u.SetBillingAddressLine2(*v)
	}
	return _u
}

// ClearBillingAddressLine2 clears the value of the "billing_address_line2" field.
func (_u *CustomerUpdate) ClearBillingAddressLine2() *CustomerUpdate {
	_u.mutation.ClearBillingAddressLine2()
	return _u
}

// SetBillingAddressPhoneNumber sets the "billing_address_phone_number" field.
func (_u *CustomerUpdate) SetBillingAddressPhoneNumber(v string) *CustomerUpdate {
	_u.mutation.SetBillingAddressPhoneNumber(v)
	return _u
}

// SetNillableBillingAddressPhoneNumber sets the "billing_address_phone_number" field if the given value is not nil.
func (_u *CustomerUpdate) SetNillableBillingAddressPhoneNumber(v *string) *CustomerUpdate {
	if v != nil {
		_u.SetBillingAddressPhoneNumber(*v)
	}
	return _u
}

// ClearBillingAddressPhoneNumber clears the value of the "billing_address_phone_number" field.
func (_u *CustomerUpdate) ClearBillingAddressPhoneNumber() *CustomerUpdate {
	_u.mutation.ClearBillingAddressPhoneNumber()
	return _u
}

// SetAnnotations sets the "annotations" field.
func (_u *CustomerUpdate) SetAnnotations(v models.Annotations) *CustomerUpdate {
	_u.mutation.SetAnnotations(v)
	return _u
}

// ClearAnnotations clears the value of the "annotations" field.
func (_u *CustomerUpdate) ClearAnnotations() *CustomerUpdate {
	_u.mutation.ClearAnnotations()
	return _u
}

// SetKey sets the "key" field.
func (_u *CustomerUpdate) SetKey(v string) *CustomerUpdate {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *CustomerUpdate) SetNillableKey(v *string) *CustomerUpdate {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// ClearKey clears the value of the "key" field.
func (_u *CustomerUpdate) ClearKey() *CustomerUpdate {
	_u.mutation.ClearKey()
	return _u
}

// SetPrimaryEmail sets the "primary_email" field.
func (_u *CustomerUpdate) SetPrimaryEmail(v string) *CustomerUpdate {
	_u.mutation.SetPrimaryEmail(v)
	return _u
}

// SetNillablePrimaryEmail sets the "primary_email" field if the given value is not nil.
func (_u *CustomerUpdate) SetNillablePrimaryEmail(v *string) *CustomerUpdate {
	if v != nil {
		_u.SetPrimaryEmail(*v)
	}
	return _u
}

// ClearPrimaryEmail clears the value of the "primary_email" field.
func (_u *CustomerUpdate) ClearPrimaryEmail() *CustomerUpdate {
	_u.mutation.ClearPrimaryEmail()
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *CustomerUpdate) SetCurrency(v currencyx.Code) *CustomerUpdate {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *CustomerUpdate) SetNillableCurrency(v *currencyx.Code) *CustomerUpdate {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// ClearCurrency clears the value of the "currency" field.
func (_u *CustomerUpdate) ClearCurrency() *CustomerUpdate {
	_u.mutation.ClearCurrency()
	return _u
}

// AddAppIDs adds the "apps" edge to the AppCustomer entity by IDs.
func (_u *CustomerUpdate) AddAppIDs(ids ...int) *CustomerUpdate {
	_u.mutation.AddAppIDs(ids...)
	return _u
}

// AddApps adds the "apps" edges to the AppCustomer entity.
func (_u *CustomerUpdate) AddApps(v ...*AppCustomer) *CustomerUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAppIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the CustomerSubjects entity by IDs.
func (_u *CustomerUpdate) AddSubjectIDs(ids ...int) *CustomerUpdate {
	_u.mutation.AddSubjectIDs(ids...)
	return _u
}

// AddSubjects adds the "subjects" edges to the CustomerSubjects entity.
func (_u *CustomerUpdate) AddSubjects(v ...*CustomerSubjects) *CustomerUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubjectIDs(ids...)
}

// SetBillingCustomerOverrideID sets the "billing_customer_override" edge to the BillingCustomerOverride entity by ID.
func (_u *CustomerUpdate) SetBillingCustomerOverrideID(id string) *CustomerUpdate {
	_u.mutation.SetBillingCustomerOverrideID(id)
	return _u
}

// SetNillableBillingCustomerOverrideID sets the "billing_customer_override" edge to the BillingCustomerOverride entity by ID if the given value is not nil.
func (_u *CustomerUpdate) SetNillableBillingCustomerOverrideID(id *string) *CustomerUpdate {
	if id != nil {
		_u = _u.SetBillingCustomerOverrideID(*id)
	}
	return _u
}

// SetBillingCustomerOverride sets the "billing_customer_override" edge to the BillingCustomerOverride entity.
func (_u *CustomerUpdate) SetBillingCustomerOverride(v *BillingCustomerOverride) *CustomerUpdate {
	return _u.SetBillingCustomerOverrideID(v.ID)
}

// AddBillingInvoiceIDs adds the "billing_invoice" edge to the BillingInvoice entity by IDs.
func (_u *CustomerUpdate) AddBillingInvoiceIDs(ids ...string) *CustomerUpdate {
	_u.mutation.AddBillingInvoiceIDs(ids...)
	return _u
}

// AddBillingInvoice adds the "billing_invoice" edges to the BillingInvoice entity.
func (_u *CustomerUpdate) AddBillingInvoice(v ...*BillingInvoice) *CustomerUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBillingInvoiceIDs(ids...)
}

// AddSubscriptionIDs adds the "subscription" edge to the Subscription entity by IDs.
func (_u *CustomerUpdate) AddSubscriptionIDs(ids ...string) *CustomerUpdate {
	_u.mutation.AddSubscriptionIDs(ids...)
	return _u
}

// AddSubscription adds the "subscription" edges to the Subscription entity.
func (_u *CustomerUpdate) AddSubscription(v ...*Subscription) *CustomerUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubscriptionIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (_u *CustomerUpdate) Mutation() *CustomerMutation {
	return _u.mutation
}

// ClearApps clears all "apps" edges to the AppCustomer entity.
func (_u *CustomerUpdate) ClearApps() *CustomerUpdate {
	_u.mutation.ClearApps()
	return _u
}

// RemoveAppIDs removes the "apps" edge to AppCustomer entities by IDs.
func (_u *CustomerUpdate) RemoveAppIDs(ids ...int) *CustomerUpdate {
	_u.mutation.RemoveAppIDs(ids...)
	return _u
}

// RemoveApps removes "apps" edges to AppCustomer entities.
func (_u *CustomerUpdate) RemoveApps(v ...*AppCustomer) *CustomerUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAppIDs(ids...)
}

// ClearSubjects clears all "subjects" edges to the CustomerSubjects entity.
func (_u *CustomerUpdate) ClearSubjects() *CustomerUpdate {
	_u.mutation.ClearSubjects()
	return _u
}

// RemoveSubjectIDs removes the "subjects" edge to CustomerSubjects entities by IDs.
func (_u *CustomerUpdate) RemoveSubjectIDs(ids ...int) *CustomerUpdate {
	_u.mutation.RemoveSubjectIDs(ids...)
	return _u
}

// RemoveSubjects removes "subjects" edges to CustomerSubjects entities.
func (_u *CustomerUpdate) RemoveSubjects(v ...*CustomerSubjects) *CustomerUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubjectIDs(ids...)
}

// ClearBillingCustomerOverride clears the "billing_customer_override" edge to the BillingCustomerOverride entity.
func (_u *CustomerUpdate) ClearBillingCustomerOverride() *CustomerUpdate {
	_u.mutation.ClearBillingCustomerOverride()
	return _u
}

// ClearBillingInvoice clears all "billing_invoice" edges to the BillingInvoice entity.
func (_u *CustomerUpdate) ClearBillingInvoice() *CustomerUpdate {
	_u.mutation.ClearBillingInvoice()
	return _u
}

// RemoveBillingInvoiceIDs removes the "billing_invoice" edge to BillingInvoice entities by IDs.
func (_u *CustomerUpdate) RemoveBillingInvoiceIDs(ids ...string) *CustomerUpdate {
	_u.mutation.RemoveBillingInvoiceIDs(ids...)
	return _u
}

// RemoveBillingInvoice removes "billing_invoice" edges to BillingInvoice entities.
func (_u *CustomerUpdate) RemoveBillingInvoice(v ...*BillingInvoice) *CustomerUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBillingInvoiceIDs(ids...)
}

// ClearSubscription clears all "subscription" edges to the Subscription entity.
func (_u *CustomerUpdate) ClearSubscription() *CustomerUpdate {
	_u.mutation.ClearSubscription()
	return _u
}

// RemoveSubscriptionIDs removes the "subscription" edge to Subscription entities by IDs.
func (_u *CustomerUpdate) RemoveSubscriptionIDs(ids ...string) *CustomerUpdate {
	_u.mutation.RemoveSubscriptionIDs(ids...)
	return _u
}

// RemoveSubscription removes "subscription" edges to Subscription entities.
func (_u *CustomerUpdate) RemoveSubscription(v ...*Subscription) *CustomerUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubscriptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CustomerUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CustomerUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CustomerUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := customer.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CustomerUpdate) check() error {
	if v, ok := _u.mutation.BillingAddressCountry(); ok {
		if err := customer.BillingAddressCountryValidator(string(v)); err != nil {
			return &ValidationError{Name: "billing_address_country", err: fmt.Errorf(`db: validator failed for field "Customer.billing_address_country": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Currency(); ok {
		if err := customer.CurrencyValidator(string(v)); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`db: validator failed for field "Customer.currency": %w`, err)}
		}
	}
	return nil
}

func (_u *CustomerUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(customer.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(customer.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(customer.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(customer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(customer.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(customer.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAddressCountry(); ok {
		_spec.SetField(customer.FieldBillingAddressCountry, field.TypeString, value)
	}
	if _u.mutation.BillingAddressCountryCleared() {
		_spec.ClearField(customer.FieldBillingAddressCountry, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAddressPostalCode(); ok {
		_spec.SetField(customer.FieldBillingAddressPostalCode, field.TypeString, value)
	}
	if _u.mutation.BillingAddressPostalCodeCleared() {
		_spec.ClearField(customer.FieldBillingAddressPostalCode, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAddressState(); ok {
		_spec.SetField(customer.FieldBillingAddressState, field.TypeString, value)
	}
	if _u.mutation.BillingAddressStateCleared() {
		_spec.ClearField(customer.FieldBillingAddressState, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAddressCity(); ok {
		_spec.SetField(customer.FieldBillingAddressCity, field.TypeString, value)
	}
	if _u.mutation.BillingAddressCityCleared() {
		_spec.ClearField(customer.FieldBillingAddressCity, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAddressLine1(); ok {
		_spec.SetField(customer.FieldBillingAddressLine1, field.TypeString, value)
	}
	if _u.mutation.BillingAddressLine1Cleared() {
		_spec.ClearField(customer.FieldBillingAddressLine1, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAddressLine2(); ok {
		_spec.SetField(customer.FieldBillingAddressLine2, field.TypeString, value)
	}
	if _u.mutation.BillingAddressLine2Cleared() {
		_spec.ClearField(customer.FieldBillingAddressLine2, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAddressPhoneNumber(); ok {
		_spec.SetField(customer.FieldBillingAddressPhoneNumber, field.TypeString, value)
	}
	if _u.mutation.BillingAddressPhoneNumberCleared() {
		_spec.ClearField(customer.FieldBillingAddressPhoneNumber, field.TypeString)
	}
	if value, ok := _u.mutation.Annotations(); ok {
		_spec.SetField(customer.FieldAnnotations, field.TypeJSON, value)
	}
	if _u.mutation.AnnotationsCleared() {
		_spec.ClearField(customer.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(customer.FieldKey, field.TypeString, value)
	}
	if _u.mutation.KeyCleared() {
		_spec.ClearField(customer.FieldKey, field.TypeString)
	}
	if value, ok := _u.mutation.PrimaryEmail(); ok {
		_spec.SetField(customer.FieldPrimaryEmail, field.TypeString, value)
	}
	if _u.mutation.PrimaryEmailCleared() {
		_spec.ClearField(customer.FieldPrimaryEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(customer.FieldCurrency, field.TypeString, value)
	}
	if _u.mutation.CurrencyCleared() {
		_spec.ClearField(customer.FieldCurrency, field.TypeString)
	}
	if _u.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AppsTable,
			Columns: []string{customer.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAppsIDs(); len(nodes) > 0 && !_u.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AppsTable,
			Columns: []string{customer.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AppsTable,
			Columns: []string{customer.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubjectsTable,
			Columns: []string{customer.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersubjects.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubjectsIDs(); len(nodes) > 0 && !_u.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubjectsTable,
			Columns: []string{customer.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersubjects.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubjectsTable,
			Columns: []string{customer.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersubjects.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BillingCustomerOverrideCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BillingCustomerOverrideTable,
			Columns: []string{customer.BillingCustomerOverrideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingCustomerOverrideIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BillingCustomerOverrideTable,
			Columns: []string{customer.BillingCustomerOverrideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BillingInvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.BillingInvoiceTable,
			Columns: []string{customer.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBillingInvoiceIDs(); len(nodes) > 0 && !_u.mutation.BillingInvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.BillingInvoiceTable,
			Columns: []string{customer.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.BillingInvoiceTable,
			Columns: []string{customer.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubscriptionTable,
			Columns: []string{customer.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubscriptionIDs(); len(nodes) > 0 && !_u.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubscriptionTable,
			Columns: []string{customer.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubscriptionTable,
			Columns: []string{customer.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetMetadata sets the "metadata" field.
func (_u *CustomerUpdateOne) SetMetadata(v map[string]string) *CustomerUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *CustomerUpdateOne) ClearMetadata() *CustomerUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CustomerUpdateOne) SetUpdatedAt(v time.Time) *CustomerUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *CustomerUpdateOne) SetDeletedAt(v time.Time) *CustomerUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *CustomerUpdateOne) SetNillableDeletedAt(v *time.Time) *CustomerUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *CustomerUpdateOne) ClearDeletedAt() *CustomerUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *CustomerUpdateOne) SetName(v string) *CustomerUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CustomerUpdateOne) SetNillableName(v *string) *CustomerUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *CustomerUpdateOne) SetDescription(v string) *CustomerUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *CustomerUpdateOne) SetNillableDescription(v *string) *CustomerUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *CustomerUpdateOne) ClearDescription() *CustomerUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetBillingAddressCountry sets the "billing_address_country" field.
func (_u *CustomerUpdateOne) SetBillingAddressCountry(v models.CountryCode) *CustomerUpdateOne {
	_u.mutation.SetBillingAddressCountry(v)
	return _u
}

// SetNillableBillingAddressCountry sets the "billing_address_country" field if the given value is not nil.
func (_u *CustomerUpdateOne) SetNillableBillingAddressCountry(v *models.CountryCode) *CustomerUpdateOne {
	if v != nil {
		_u.SetBillingAddressCountry(*v)
	}
	return _u
}

// ClearBillingAddressCountry clears the value of the "billing_address_country" field.
func (_u *CustomerUpdateOne) ClearBillingAddressCountry() *CustomerUpdateOne {
	_u.mutation.ClearBillingAddressCountry()
	return _u
}

// SetBillingAddressPostalCode sets the "billing_address_postal_code" field.
func (_u *CustomerUpdateOne) SetBillingAddressPostalCode(v string) *CustomerUpdateOne {
	_u.mutation.SetBillingAddressPostalCode(v)
	return _u
}

// SetNillableBillingAddressPostalCode sets the "billing_address_postal_code" field if the given value is not nil.
func (_u *CustomerUpdateOne) SetNillableBillingAddressPostalCode(v *string) *CustomerUpdateOne {
	if v != nil {
		_u.SetBillingAddressPostalCode(*v)
	}
	return _u
}

// ClearBillingAddressPostalCode clears the value of the "billing_address_postal_code" field.
func (_u *CustomerUpdateOne) ClearBillingAddressPostalCode() *CustomerUpdateOne {
	_u.mutation.ClearBillingAddressPostalCode()
	return _u
}

// SetBillingAddressState sets the "billing_address_state" field.
func (_u *CustomerUpdateOne) SetBillingAddressState(v string) *CustomerUpdateOne {
	_u.mutation.SetBillingAddressState(v)
	return _u
}

// SetNillableBillingAddressState sets the "billing_address_state" field if the given value is not nil.
func (_u *CustomerUpdateOne) SetNillableBillingAddressState(v *string) *CustomerUpdateOne {
	if v != nil {
		_u.SetBillingAddressState(*v)
	}
	return _u
}

// ClearBillingAddressState clears the value of the "billing_address_state" field.
func (_u *CustomerUpdateOne) ClearBillingAddressState() *CustomerUpdateOne {
	_u.mutation.ClearBillingAddressState()
	return _u
}

// SetBillingAddressCity sets the "billing_address_city" field.
func (_u *CustomerUpdateOne) SetBillingAddressCity(v string) *CustomerUpdateOne {
	_u.mutation.SetBillingAddressCity(v)
	return _u
}

// SetNillableBillingAddressCity sets the "billing_address_city" field if the given value is not nil.
func (_u *CustomerUpdateOne) SetNillableBillingAddressCity(v *string) *CustomerUpdateOne {
	if v != nil {
		_u.SetBillingAddressCity(*v)
	}
	return _u
}

// ClearBillingAddressCity clears the value of the "billing_address_city" field.
func (_u *CustomerUpdateOne) ClearBillingAddressCity() *CustomerUpdateOne {
	_u.mutation.ClearBillingAddressCity()
	return _u
}

// SetBillingAddressLine1 sets the "billing_address_line1" field.
func (_u *CustomerUpdateOne) SetBillingAddressLine1(v string) *CustomerUpdateOne {
	_u.mutation.SetBillingAddressLine1(v)
	return _u
}

// SetNillableBillingAddressLine1 sets the "billing_address_line1" field if the given value is not nil.
func (_u *CustomerUpdateOne) SetNillableBillingAddressLine1(v *string) *CustomerUpdateOne {
	if v != nil {
		_u.SetBillingAddressLine1(*v)
	}
	return _u
}

// ClearBillingAddressLine1 clears the value of the "billing_address_line1" field.
func (_u *CustomerUpdateOne) ClearBillingAddressLine1() *CustomerUpdateOne {
	_u.mutation.ClearBillingAddressLine1()
	return _u
}

// SetBillingAddressLine2 sets the "billing_address_line2" field.
func (_u *CustomerUpdateOne) SetBillingAddressLine2(v string) *CustomerUpdateOne {
	_u.mutation.SetBillingAddressLine2(v)
	return _u
}

// SetNillableBillingAddressLine2 sets the "billing_address_line2" field if the given value is not nil.
func (_u *CustomerUpdateOne) SetNillableBillingAddressLine2(v *string) *CustomerUpdateOne {
	if v != nil {
		_u.SetBillingAddressLine2(*v)
	}
	return _u
}

// ClearBillingAddressLine2 clears the value of the "billing_address_line2" field.
func (_u *CustomerUpdateOne) ClearBillingAddressLine2() *CustomerUpdateOne {
	_u.mutation.ClearBillingAddressLine2()
	return _u
}

// SetBillingAddressPhoneNumber sets the "billing_address_phone_number" field.
func (_u *CustomerUpdateOne) SetBillingAddressPhoneNumber(v string) *CustomerUpdateOne {
	_u.mutation.SetBillingAddressPhoneNumber(v)
	return _u
}

// SetNillableBillingAddressPhoneNumber sets the "billing_address_phone_number" field if the given value is not nil.
func (_u *CustomerUpdateOne) SetNillableBillingAddressPhoneNumber(v *string) *CustomerUpdateOne {
	if v != nil {
		_u.SetBillingAddressPhoneNumber(*v)
	}
	return _u
}

// ClearBillingAddressPhoneNumber clears the value of the "billing_address_phone_number" field.
func (_u *CustomerUpdateOne) ClearBillingAddressPhoneNumber() *CustomerUpdateOne {
	_u.mutation.ClearBillingAddressPhoneNumber()
	return _u
}

// SetAnnotations sets the "annotations" field.
func (_u *CustomerUpdateOne) SetAnnotations(v models.Annotations) *CustomerUpdateOne {
	_u.mutation.SetAnnotations(v)
	return _u
}

// ClearAnnotations clears the value of the "annotations" field.
func (_u *CustomerUpdateOne) ClearAnnotations() *CustomerUpdateOne {
	_u.mutation.ClearAnnotations()
	return _u
}

// SetKey sets the "key" field.
func (_u *CustomerUpdateOne) SetKey(v string) *CustomerUpdateOne {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *CustomerUpdateOne) SetNillableKey(v *string) *CustomerUpdateOne {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// ClearKey clears the value of the "key" field.
func (_u *CustomerUpdateOne) ClearKey() *CustomerUpdateOne {
	_u.mutation.ClearKey()
	return _u
}

// SetPrimaryEmail sets the "primary_email" field.
func (_u *CustomerUpdateOne) SetPrimaryEmail(v string) *CustomerUpdateOne {
	_u.mutation.SetPrimaryEmail(v)
	return _u
}

// SetNillablePrimaryEmail sets the "primary_email" field if the given value is not nil.
func (_u *CustomerUpdateOne) SetNillablePrimaryEmail(v *string) *CustomerUpdateOne {
	if v != nil {
		_u.SetPrimaryEmail(*v)
	}
	return _u
}

// ClearPrimaryEmail clears the value of the "primary_email" field.
func (_u *CustomerUpdateOne) ClearPrimaryEmail() *CustomerUpdateOne {
	_u.mutation.ClearPrimaryEmail()
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *CustomerUpdateOne) SetCurrency(v currencyx.Code) *CustomerUpdateOne {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *CustomerUpdateOne) SetNillableCurrency(v *currencyx.Code) *CustomerUpdateOne {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// ClearCurrency clears the value of the "currency" field.
func (_u *CustomerUpdateOne) ClearCurrency() *CustomerUpdateOne {
	_u.mutation.ClearCurrency()
	return _u
}

// AddAppIDs adds the "apps" edge to the AppCustomer entity by IDs.
func (_u *CustomerUpdateOne) AddAppIDs(ids ...int) *CustomerUpdateOne {
	_u.mutation.AddAppIDs(ids...)
	return _u
}

// AddApps adds the "apps" edges to the AppCustomer entity.
func (_u *CustomerUpdateOne) AddApps(v ...*AppCustomer) *CustomerUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAppIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the CustomerSubjects entity by IDs.
func (_u *CustomerUpdateOne) AddSubjectIDs(ids ...int) *CustomerUpdateOne {
	_u.mutation.AddSubjectIDs(ids...)
	return _u
}

// AddSubjects adds the "subjects" edges to the CustomerSubjects entity.
func (_u *CustomerUpdateOne) AddSubjects(v ...*CustomerSubjects) *CustomerUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubjectIDs(ids...)
}

// SetBillingCustomerOverrideID sets the "billing_customer_override" edge to the BillingCustomerOverride entity by ID.
func (_u *CustomerUpdateOne) SetBillingCustomerOverrideID(id string) *CustomerUpdateOne {
	_u.mutation.SetBillingCustomerOverrideID(id)
	return _u
}

// SetNillableBillingCustomerOverrideID sets the "billing_customer_override" edge to the BillingCustomerOverride entity by ID if the given value is not nil.
func (_u *CustomerUpdateOne) SetNillableBillingCustomerOverrideID(id *string) *CustomerUpdateOne {
	if id != nil {
		_u = _u.SetBillingCustomerOverrideID(*id)
	}
	return _u
}

// SetBillingCustomerOverride sets the "billing_customer_override" edge to the BillingCustomerOverride entity.
func (_u *CustomerUpdateOne) SetBillingCustomerOverride(v *BillingCustomerOverride) *CustomerUpdateOne {
	return _u.SetBillingCustomerOverrideID(v.ID)
}

// AddBillingInvoiceIDs adds the "billing_invoice" edge to the BillingInvoice entity by IDs.
func (_u *CustomerUpdateOne) AddBillingInvoiceIDs(ids ...string) *CustomerUpdateOne {
	_u.mutation.AddBillingInvoiceIDs(ids...)
	return _u
}

// AddBillingInvoice adds the "billing_invoice" edges to the BillingInvoice entity.
func (_u *CustomerUpdateOne) AddBillingInvoice(v ...*BillingInvoice) *CustomerUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBillingInvoiceIDs(ids...)
}

// AddSubscriptionIDs adds the "subscription" edge to the Subscription entity by IDs.
func (_u *CustomerUpdateOne) AddSubscriptionIDs(ids ...string) *CustomerUpdateOne {
	_u.mutation.AddSubscriptionIDs(ids...)
	return _u
}

// AddSubscription adds the "subscription" edges to the Subscription entity.
func (_u *CustomerUpdateOne) AddSubscription(v ...*Subscription) *CustomerUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubscriptionIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (_u *CustomerUpdateOne) Mutation() *CustomerMutation {
	return _u.mutation
}

// ClearApps clears all "apps" edges to the AppCustomer entity.
func (_u *CustomerUpdateOne) ClearApps() *CustomerUpdateOne {
	_u.mutation.ClearApps()
	return _u
}

// RemoveAppIDs removes the "apps" edge to AppCustomer entities by IDs.
func (_u *CustomerUpdateOne) RemoveAppIDs(ids ...int) *CustomerUpdateOne {
	_u.mutation.RemoveAppIDs(ids...)
	return _u
}

// RemoveApps removes "apps" edges to AppCustomer entities.
func (_u *CustomerUpdateOne) RemoveApps(v ...*AppCustomer) *CustomerUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAppIDs(ids...)
}

// ClearSubjects clears all "subjects" edges to the CustomerSubjects entity.
func (_u *CustomerUpdateOne) ClearSubjects() *CustomerUpdateOne {
	_u.mutation.ClearSubjects()
	return _u
}

// RemoveSubjectIDs removes the "subjects" edge to CustomerSubjects entities by IDs.
func (_u *CustomerUpdateOne) RemoveSubjectIDs(ids ...int) *CustomerUpdateOne {
	_u.mutation.RemoveSubjectIDs(ids...)
	return _u
}

// RemoveSubjects removes "subjects" edges to CustomerSubjects entities.
func (_u *CustomerUpdateOne) RemoveSubjects(v ...*CustomerSubjects) *CustomerUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubjectIDs(ids...)
}

// ClearBillingCustomerOverride clears the "billing_customer_override" edge to the BillingCustomerOverride entity.
func (_u *CustomerUpdateOne) ClearBillingCustomerOverride() *CustomerUpdateOne {
	_u.mutation.ClearBillingCustomerOverride()
	return _u
}

// ClearBillingInvoice clears all "billing_invoice" edges to the BillingInvoice entity.
func (_u *CustomerUpdateOne) ClearBillingInvoice() *CustomerUpdateOne {
	_u.mutation.ClearBillingInvoice()
	return _u
}

// RemoveBillingInvoiceIDs removes the "billing_invoice" edge to BillingInvoice entities by IDs.
func (_u *CustomerUpdateOne) RemoveBillingInvoiceIDs(ids ...string) *CustomerUpdateOne {
	_u.mutation.RemoveBillingInvoiceIDs(ids...)
	return _u
}

// RemoveBillingInvoice removes "billing_invoice" edges to BillingInvoice entities.
func (_u *CustomerUpdateOne) RemoveBillingInvoice(v ...*BillingInvoice) *CustomerUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBillingInvoiceIDs(ids...)
}

// ClearSubscription clears all "subscription" edges to the Subscription entity.
func (_u *CustomerUpdateOne) ClearSubscription() *CustomerUpdateOne {
	_u.mutation.ClearSubscription()
	return _u
}

// RemoveSubscriptionIDs removes the "subscription" edge to Subscription entities by IDs.
func (_u *CustomerUpdateOne) RemoveSubscriptionIDs(ids ...string) *CustomerUpdateOne {
	_u.mutation.RemoveSubscriptionIDs(ids...)
	return _u
}

// RemoveSubscription removes "subscription" edges to Subscription entities.
func (_u *CustomerUpdateOne) RemoveSubscription(v ...*Subscription) *CustomerUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubscriptionIDs(ids...)
}

// Where appends a list predicates to the CustomerUpdate builder.
func (_u *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Customer entity.
func (_u *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CustomerUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := customer.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CustomerUpdateOne) check() error {
	if v, ok := _u.mutation.BillingAddressCountry(); ok {
		if err := customer.BillingAddressCountryValidator(string(v)); err != nil {
			return &ValidationError{Name: "billing_address_country", err: fmt.Errorf(`db: validator failed for field "Customer.billing_address_country": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Currency(); ok {
		if err := customer.CurrencyValidator(string(v)); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`db: validator failed for field "Customer.currency": %w`, err)}
		}
	}
	return nil
}

func (_u *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(customer.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(customer.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(customer.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(customer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(customer.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(customer.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAddressCountry(); ok {
		_spec.SetField(customer.FieldBillingAddressCountry, field.TypeString, value)
	}
	if _u.mutation.BillingAddressCountryCleared() {
		_spec.ClearField(customer.FieldBillingAddressCountry, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAddressPostalCode(); ok {
		_spec.SetField(customer.FieldBillingAddressPostalCode, field.TypeString, value)
	}
	if _u.mutation.BillingAddressPostalCodeCleared() {
		_spec.ClearField(customer.FieldBillingAddressPostalCode, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAddressState(); ok {
		_spec.SetField(customer.FieldBillingAddressState, field.TypeString, value)
	}
	if _u.mutation.BillingAddressStateCleared() {
		_spec.ClearField(customer.FieldBillingAddressState, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAddressCity(); ok {
		_spec.SetField(customer.FieldBillingAddressCity, field.TypeString, value)
	}
	if _u.mutation.BillingAddressCityCleared() {
		_spec.ClearField(customer.FieldBillingAddressCity, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAddressLine1(); ok {
		_spec.SetField(customer.FieldBillingAddressLine1, field.TypeString, value)
	}
	if _u.mutation.BillingAddressLine1Cleared() {
		_spec.ClearField(customer.FieldBillingAddressLine1, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAddressLine2(); ok {
		_spec.SetField(customer.FieldBillingAddressLine2, field.TypeString, value)
	}
	if _u.mutation.BillingAddressLine2Cleared() {
		_spec.ClearField(customer.FieldBillingAddressLine2, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAddressPhoneNumber(); ok {
		_spec.SetField(customer.FieldBillingAddressPhoneNumber, field.TypeString, value)
	}
	if _u.mutation.BillingAddressPhoneNumberCleared() {
		_spec.ClearField(customer.FieldBillingAddressPhoneNumber, field.TypeString)
	}
	if value, ok := _u.mutation.Annotations(); ok {
		_spec.SetField(customer.FieldAnnotations, field.TypeJSON, value)
	}
	if _u.mutation.AnnotationsCleared() {
		_spec.ClearField(customer.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(customer.FieldKey, field.TypeString, value)
	}
	if _u.mutation.KeyCleared() {
		_spec.ClearField(customer.FieldKey, field.TypeString)
	}
	if value, ok := _u.mutation.PrimaryEmail(); ok {
		_spec.SetField(customer.FieldPrimaryEmail, field.TypeString, value)
	}
	if _u.mutation.PrimaryEmailCleared() {
		_spec.ClearField(customer.FieldPrimaryEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(customer.FieldCurrency, field.TypeString, value)
	}
	if _u.mutation.CurrencyCleared() {
		_spec.ClearField(customer.FieldCurrency, field.TypeString)
	}
	if _u.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AppsTable,
			Columns: []string{customer.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAppsIDs(); len(nodes) > 0 && !_u.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AppsTable,
			Columns: []string{customer.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AppsTable,
			Columns: []string{customer.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubjectsTable,
			Columns: []string{customer.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersubjects.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubjectsIDs(); len(nodes) > 0 && !_u.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubjectsTable,
			Columns: []string{customer.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersubjects.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubjectsTable,
			Columns: []string{customer.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersubjects.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BillingCustomerOverrideCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BillingCustomerOverrideTable,
			Columns: []string{customer.BillingCustomerOverrideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingCustomerOverrideIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BillingCustomerOverrideTable,
			Columns: []string{customer.BillingCustomerOverrideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BillingInvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.BillingInvoiceTable,
			Columns: []string{customer.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBillingInvoiceIDs(); len(nodes) > 0 && !_u.mutation.BillingInvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.BillingInvoiceTable,
			Columns: []string{customer.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.BillingInvoiceTable,
			Columns: []string{customer.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubscriptionTable,
			Columns: []string{customer.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubscriptionIDs(); len(nodes) > 0 && !_u.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubscriptionTable,
			Columns: []string{customer.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubscriptionTable,
			Columns: []string{customer.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Customer{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
