// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustomer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomeroverride"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customersubjects"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/pkg/currencyx"
	"github.com/openmeterio/openmeter/pkg/models"
	"github.com/openmeterio/openmeter/pkg/timezone"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetMetadata sets the "metadata" field.
func (cu *CustomerUpdate) SetMetadata(m map[string]string) *CustomerUpdate {
	cu.mutation.SetMetadata(m)
	return cu
}

// ClearMetadata clears the value of the "metadata" field.
func (cu *CustomerUpdate) ClearMetadata() *CustomerUpdate {
	cu.mutation.ClearMetadata()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CustomerUpdate) SetUpdatedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CustomerUpdate) SetDeletedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableDeletedAt(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CustomerUpdate) ClearDeletedAt() *CustomerUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetName sets the "name" field.
func (cu *CustomerUpdate) SetName(s string) *CustomerUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *CustomerUpdate) SetDescription(s string) *CustomerUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableDescription(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CustomerUpdate) ClearDescription() *CustomerUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetBillingAddressCountry sets the "billing_address_country" field.
func (cu *CustomerUpdate) SetBillingAddressCountry(mc models.CountryCode) *CustomerUpdate {
	cu.mutation.SetBillingAddressCountry(mc)
	return cu
}

// SetNillableBillingAddressCountry sets the "billing_address_country" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableBillingAddressCountry(mc *models.CountryCode) *CustomerUpdate {
	if mc != nil {
		cu.SetBillingAddressCountry(*mc)
	}
	return cu
}

// ClearBillingAddressCountry clears the value of the "billing_address_country" field.
func (cu *CustomerUpdate) ClearBillingAddressCountry() *CustomerUpdate {
	cu.mutation.ClearBillingAddressCountry()
	return cu
}

// SetBillingAddressPostalCode sets the "billing_address_postal_code" field.
func (cu *CustomerUpdate) SetBillingAddressPostalCode(s string) *CustomerUpdate {
	cu.mutation.SetBillingAddressPostalCode(s)
	return cu
}

// SetNillableBillingAddressPostalCode sets the "billing_address_postal_code" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableBillingAddressPostalCode(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetBillingAddressPostalCode(*s)
	}
	return cu
}

// ClearBillingAddressPostalCode clears the value of the "billing_address_postal_code" field.
func (cu *CustomerUpdate) ClearBillingAddressPostalCode() *CustomerUpdate {
	cu.mutation.ClearBillingAddressPostalCode()
	return cu
}

// SetBillingAddressState sets the "billing_address_state" field.
func (cu *CustomerUpdate) SetBillingAddressState(s string) *CustomerUpdate {
	cu.mutation.SetBillingAddressState(s)
	return cu
}

// SetNillableBillingAddressState sets the "billing_address_state" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableBillingAddressState(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetBillingAddressState(*s)
	}
	return cu
}

// ClearBillingAddressState clears the value of the "billing_address_state" field.
func (cu *CustomerUpdate) ClearBillingAddressState() *CustomerUpdate {
	cu.mutation.ClearBillingAddressState()
	return cu
}

// SetBillingAddressCity sets the "billing_address_city" field.
func (cu *CustomerUpdate) SetBillingAddressCity(s string) *CustomerUpdate {
	cu.mutation.SetBillingAddressCity(s)
	return cu
}

// SetNillableBillingAddressCity sets the "billing_address_city" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableBillingAddressCity(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetBillingAddressCity(*s)
	}
	return cu
}

// ClearBillingAddressCity clears the value of the "billing_address_city" field.
func (cu *CustomerUpdate) ClearBillingAddressCity() *CustomerUpdate {
	cu.mutation.ClearBillingAddressCity()
	return cu
}

// SetBillingAddressLine1 sets the "billing_address_line1" field.
func (cu *CustomerUpdate) SetBillingAddressLine1(s string) *CustomerUpdate {
	cu.mutation.SetBillingAddressLine1(s)
	return cu
}

// SetNillableBillingAddressLine1 sets the "billing_address_line1" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableBillingAddressLine1(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetBillingAddressLine1(*s)
	}
	return cu
}

// ClearBillingAddressLine1 clears the value of the "billing_address_line1" field.
func (cu *CustomerUpdate) ClearBillingAddressLine1() *CustomerUpdate {
	cu.mutation.ClearBillingAddressLine1()
	return cu
}

// SetBillingAddressLine2 sets the "billing_address_line2" field.
func (cu *CustomerUpdate) SetBillingAddressLine2(s string) *CustomerUpdate {
	cu.mutation.SetBillingAddressLine2(s)
	return cu
}

// SetNillableBillingAddressLine2 sets the "billing_address_line2" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableBillingAddressLine2(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetBillingAddressLine2(*s)
	}
	return cu
}

// ClearBillingAddressLine2 clears the value of the "billing_address_line2" field.
func (cu *CustomerUpdate) ClearBillingAddressLine2() *CustomerUpdate {
	cu.mutation.ClearBillingAddressLine2()
	return cu
}

// SetBillingAddressPhoneNumber sets the "billing_address_phone_number" field.
func (cu *CustomerUpdate) SetBillingAddressPhoneNumber(s string) *CustomerUpdate {
	cu.mutation.SetBillingAddressPhoneNumber(s)
	return cu
}

// SetNillableBillingAddressPhoneNumber sets the "billing_address_phone_number" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableBillingAddressPhoneNumber(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetBillingAddressPhoneNumber(*s)
	}
	return cu
}

// ClearBillingAddressPhoneNumber clears the value of the "billing_address_phone_number" field.
func (cu *CustomerUpdate) ClearBillingAddressPhoneNumber() *CustomerUpdate {
	cu.mutation.ClearBillingAddressPhoneNumber()
	return cu
}

// SetPrimaryEmail sets the "primary_email" field.
func (cu *CustomerUpdate) SetPrimaryEmail(s string) *CustomerUpdate {
	cu.mutation.SetPrimaryEmail(s)
	return cu
}

// SetNillablePrimaryEmail sets the "primary_email" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillablePrimaryEmail(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetPrimaryEmail(*s)
	}
	return cu
}

// ClearPrimaryEmail clears the value of the "primary_email" field.
func (cu *CustomerUpdate) ClearPrimaryEmail() *CustomerUpdate {
	cu.mutation.ClearPrimaryEmail()
	return cu
}

// SetTimezone sets the "timezone" field.
func (cu *CustomerUpdate) SetTimezone(t timezone.Timezone) *CustomerUpdate {
	cu.mutation.SetTimezone(t)
	return cu
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableTimezone(t *timezone.Timezone) *CustomerUpdate {
	if t != nil {
		cu.SetTimezone(*t)
	}
	return cu
}

// ClearTimezone clears the value of the "timezone" field.
func (cu *CustomerUpdate) ClearTimezone() *CustomerUpdate {
	cu.mutation.ClearTimezone()
	return cu
}

// SetCurrency sets the "currency" field.
func (cu *CustomerUpdate) SetCurrency(c currencyx.Code) *CustomerUpdate {
	cu.mutation.SetCurrency(c)
	return cu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCurrency(c *currencyx.Code) *CustomerUpdate {
	if c != nil {
		cu.SetCurrency(*c)
	}
	return cu
}

// ClearCurrency clears the value of the "currency" field.
func (cu *CustomerUpdate) ClearCurrency() *CustomerUpdate {
	cu.mutation.ClearCurrency()
	return cu
}

// AddAppIDs adds the "apps" edge to the AppCustomer entity by IDs.
func (cu *CustomerUpdate) AddAppIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddAppIDs(ids...)
	return cu
}

// AddApps adds the "apps" edges to the AppCustomer entity.
func (cu *CustomerUpdate) AddApps(a ...*AppCustomer) *CustomerUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAppIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the CustomerSubjects entity by IDs.
func (cu *CustomerUpdate) AddSubjectIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddSubjectIDs(ids...)
	return cu
}

// AddSubjects adds the "subjects" edges to the CustomerSubjects entity.
func (cu *CustomerUpdate) AddSubjects(c ...*CustomerSubjects) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddSubjectIDs(ids...)
}

// SetBillingCustomerOverrideID sets the "billing_customer_override" edge to the BillingCustomerOverride entity by ID.
func (cu *CustomerUpdate) SetBillingCustomerOverrideID(id string) *CustomerUpdate {
	cu.mutation.SetBillingCustomerOverrideID(id)
	return cu
}

// SetNillableBillingCustomerOverrideID sets the "billing_customer_override" edge to the BillingCustomerOverride entity by ID if the given value is not nil.
func (cu *CustomerUpdate) SetNillableBillingCustomerOverrideID(id *string) *CustomerUpdate {
	if id != nil {
		cu = cu.SetBillingCustomerOverrideID(*id)
	}
	return cu
}

// SetBillingCustomerOverride sets the "billing_customer_override" edge to the BillingCustomerOverride entity.
func (cu *CustomerUpdate) SetBillingCustomerOverride(b *BillingCustomerOverride) *CustomerUpdate {
	return cu.SetBillingCustomerOverrideID(b.ID)
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// ClearApps clears all "apps" edges to the AppCustomer entity.
func (cu *CustomerUpdate) ClearApps() *CustomerUpdate {
	cu.mutation.ClearApps()
	return cu
}

// RemoveAppIDs removes the "apps" edge to AppCustomer entities by IDs.
func (cu *CustomerUpdate) RemoveAppIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveAppIDs(ids...)
	return cu
}

// RemoveApps removes "apps" edges to AppCustomer entities.
func (cu *CustomerUpdate) RemoveApps(a ...*AppCustomer) *CustomerUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAppIDs(ids...)
}

// ClearSubjects clears all "subjects" edges to the CustomerSubjects entity.
func (cu *CustomerUpdate) ClearSubjects() *CustomerUpdate {
	cu.mutation.ClearSubjects()
	return cu
}

// RemoveSubjectIDs removes the "subjects" edge to CustomerSubjects entities by IDs.
func (cu *CustomerUpdate) RemoveSubjectIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveSubjectIDs(ids...)
	return cu
}

// RemoveSubjects removes "subjects" edges to CustomerSubjects entities.
func (cu *CustomerUpdate) RemoveSubjects(c ...*CustomerSubjects) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveSubjectIDs(ids...)
}

// ClearBillingCustomerOverride clears the "billing_customer_override" edge to the BillingCustomerOverride entity.
func (cu *CustomerUpdate) ClearBillingCustomerOverride() *CustomerUpdate {
	cu.mutation.ClearBillingCustomerOverride()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CustomerUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := customer.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CustomerUpdate) check() error {
	if v, ok := cu.mutation.BillingAddressCountry(); ok {
		if err := customer.BillingAddressCountryValidator(string(v)); err != nil {
			return &ValidationError{Name: "billing_address_country", err: fmt.Errorf(`db: validator failed for field "Customer.billing_address_country": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Currency(); ok {
		if err := customer.CurrencyValidator(string(v)); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`db: validator failed for field "Customer.currency": %w`, err)}
		}
	}
	return nil
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Metadata(); ok {
		_spec.SetField(customer.FieldMetadata, field.TypeJSON, value)
	}
	if cu.mutation.MetadataCleared() {
		_spec.ClearField(customer.FieldMetadata, field.TypeJSON)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(customer.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(customer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(customer.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(customer.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.BillingAddressCountry(); ok {
		_spec.SetField(customer.FieldBillingAddressCountry, field.TypeString, value)
	}
	if cu.mutation.BillingAddressCountryCleared() {
		_spec.ClearField(customer.FieldBillingAddressCountry, field.TypeString)
	}
	if value, ok := cu.mutation.BillingAddressPostalCode(); ok {
		_spec.SetField(customer.FieldBillingAddressPostalCode, field.TypeString, value)
	}
	if cu.mutation.BillingAddressPostalCodeCleared() {
		_spec.ClearField(customer.FieldBillingAddressPostalCode, field.TypeString)
	}
	if value, ok := cu.mutation.BillingAddressState(); ok {
		_spec.SetField(customer.FieldBillingAddressState, field.TypeString, value)
	}
	if cu.mutation.BillingAddressStateCleared() {
		_spec.ClearField(customer.FieldBillingAddressState, field.TypeString)
	}
	if value, ok := cu.mutation.BillingAddressCity(); ok {
		_spec.SetField(customer.FieldBillingAddressCity, field.TypeString, value)
	}
	if cu.mutation.BillingAddressCityCleared() {
		_spec.ClearField(customer.FieldBillingAddressCity, field.TypeString)
	}
	if value, ok := cu.mutation.BillingAddressLine1(); ok {
		_spec.SetField(customer.FieldBillingAddressLine1, field.TypeString, value)
	}
	if cu.mutation.BillingAddressLine1Cleared() {
		_spec.ClearField(customer.FieldBillingAddressLine1, field.TypeString)
	}
	if value, ok := cu.mutation.BillingAddressLine2(); ok {
		_spec.SetField(customer.FieldBillingAddressLine2, field.TypeString, value)
	}
	if cu.mutation.BillingAddressLine2Cleared() {
		_spec.ClearField(customer.FieldBillingAddressLine2, field.TypeString)
	}
	if value, ok := cu.mutation.BillingAddressPhoneNumber(); ok {
		_spec.SetField(customer.FieldBillingAddressPhoneNumber, field.TypeString, value)
	}
	if cu.mutation.BillingAddressPhoneNumberCleared() {
		_spec.ClearField(customer.FieldBillingAddressPhoneNumber, field.TypeString)
	}
	if value, ok := cu.mutation.PrimaryEmail(); ok {
		_spec.SetField(customer.FieldPrimaryEmail, field.TypeString, value)
	}
	if cu.mutation.PrimaryEmailCleared() {
		_spec.ClearField(customer.FieldPrimaryEmail, field.TypeString)
	}
	if value, ok := cu.mutation.Timezone(); ok {
		_spec.SetField(customer.FieldTimezone, field.TypeString, value)
	}
	if cu.mutation.TimezoneCleared() {
		_spec.ClearField(customer.FieldTimezone, field.TypeString)
	}
	if value, ok := cu.mutation.Currency(); ok {
		_spec.SetField(customer.FieldCurrency, field.TypeString, value)
	}
	if cu.mutation.CurrencyCleared() {
		_spec.ClearField(customer.FieldCurrency, field.TypeString)
	}
	if cu.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AppsTable,
			Columns: []string{customer.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAppsIDs(); len(nodes) > 0 && !cu.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AppsTable,
			Columns: []string{customer.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AppsTable,
			Columns: []string{customer.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubjectsTable,
			Columns: []string{customer.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersubjects.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedSubjectsIDs(); len(nodes) > 0 && !cu.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubjectsTable,
			Columns: []string{customer.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersubjects.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubjectsTable,
			Columns: []string{customer.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersubjects.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.BillingCustomerOverrideCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BillingCustomerOverrideTable,
			Columns: []string{customer.BillingCustomerOverrideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BillingCustomerOverrideIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BillingCustomerOverrideTable,
			Columns: []string{customer.BillingCustomerOverrideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetMetadata sets the "metadata" field.
func (cuo *CustomerUpdateOne) SetMetadata(m map[string]string) *CustomerUpdateOne {
	cuo.mutation.SetMetadata(m)
	return cuo
}

// ClearMetadata clears the value of the "metadata" field.
func (cuo *CustomerUpdateOne) ClearMetadata() *CustomerUpdateOne {
	cuo.mutation.ClearMetadata()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CustomerUpdateOne) SetUpdatedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CustomerUpdateOne) SetDeletedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableDeletedAt(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CustomerUpdateOne) ClearDeletedAt() *CustomerUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetName sets the "name" field.
func (cuo *CustomerUpdateOne) SetName(s string) *CustomerUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CustomerUpdateOne) SetDescription(s string) *CustomerUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableDescription(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CustomerUpdateOne) ClearDescription() *CustomerUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetBillingAddressCountry sets the "billing_address_country" field.
func (cuo *CustomerUpdateOne) SetBillingAddressCountry(mc models.CountryCode) *CustomerUpdateOne {
	cuo.mutation.SetBillingAddressCountry(mc)
	return cuo
}

// SetNillableBillingAddressCountry sets the "billing_address_country" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableBillingAddressCountry(mc *models.CountryCode) *CustomerUpdateOne {
	if mc != nil {
		cuo.SetBillingAddressCountry(*mc)
	}
	return cuo
}

// ClearBillingAddressCountry clears the value of the "billing_address_country" field.
func (cuo *CustomerUpdateOne) ClearBillingAddressCountry() *CustomerUpdateOne {
	cuo.mutation.ClearBillingAddressCountry()
	return cuo
}

// SetBillingAddressPostalCode sets the "billing_address_postal_code" field.
func (cuo *CustomerUpdateOne) SetBillingAddressPostalCode(s string) *CustomerUpdateOne {
	cuo.mutation.SetBillingAddressPostalCode(s)
	return cuo
}

// SetNillableBillingAddressPostalCode sets the "billing_address_postal_code" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableBillingAddressPostalCode(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetBillingAddressPostalCode(*s)
	}
	return cuo
}

// ClearBillingAddressPostalCode clears the value of the "billing_address_postal_code" field.
func (cuo *CustomerUpdateOne) ClearBillingAddressPostalCode() *CustomerUpdateOne {
	cuo.mutation.ClearBillingAddressPostalCode()
	return cuo
}

// SetBillingAddressState sets the "billing_address_state" field.
func (cuo *CustomerUpdateOne) SetBillingAddressState(s string) *CustomerUpdateOne {
	cuo.mutation.SetBillingAddressState(s)
	return cuo
}

// SetNillableBillingAddressState sets the "billing_address_state" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableBillingAddressState(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetBillingAddressState(*s)
	}
	return cuo
}

// ClearBillingAddressState clears the value of the "billing_address_state" field.
func (cuo *CustomerUpdateOne) ClearBillingAddressState() *CustomerUpdateOne {
	cuo.mutation.ClearBillingAddressState()
	return cuo
}

// SetBillingAddressCity sets the "billing_address_city" field.
func (cuo *CustomerUpdateOne) SetBillingAddressCity(s string) *CustomerUpdateOne {
	cuo.mutation.SetBillingAddressCity(s)
	return cuo
}

// SetNillableBillingAddressCity sets the "billing_address_city" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableBillingAddressCity(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetBillingAddressCity(*s)
	}
	return cuo
}

// ClearBillingAddressCity clears the value of the "billing_address_city" field.
func (cuo *CustomerUpdateOne) ClearBillingAddressCity() *CustomerUpdateOne {
	cuo.mutation.ClearBillingAddressCity()
	return cuo
}

// SetBillingAddressLine1 sets the "billing_address_line1" field.
func (cuo *CustomerUpdateOne) SetBillingAddressLine1(s string) *CustomerUpdateOne {
	cuo.mutation.SetBillingAddressLine1(s)
	return cuo
}

// SetNillableBillingAddressLine1 sets the "billing_address_line1" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableBillingAddressLine1(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetBillingAddressLine1(*s)
	}
	return cuo
}

// ClearBillingAddressLine1 clears the value of the "billing_address_line1" field.
func (cuo *CustomerUpdateOne) ClearBillingAddressLine1() *CustomerUpdateOne {
	cuo.mutation.ClearBillingAddressLine1()
	return cuo
}

// SetBillingAddressLine2 sets the "billing_address_line2" field.
func (cuo *CustomerUpdateOne) SetBillingAddressLine2(s string) *CustomerUpdateOne {
	cuo.mutation.SetBillingAddressLine2(s)
	return cuo
}

// SetNillableBillingAddressLine2 sets the "billing_address_line2" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableBillingAddressLine2(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetBillingAddressLine2(*s)
	}
	return cuo
}

// ClearBillingAddressLine2 clears the value of the "billing_address_line2" field.
func (cuo *CustomerUpdateOne) ClearBillingAddressLine2() *CustomerUpdateOne {
	cuo.mutation.ClearBillingAddressLine2()
	return cuo
}

// SetBillingAddressPhoneNumber sets the "billing_address_phone_number" field.
func (cuo *CustomerUpdateOne) SetBillingAddressPhoneNumber(s string) *CustomerUpdateOne {
	cuo.mutation.SetBillingAddressPhoneNumber(s)
	return cuo
}

// SetNillableBillingAddressPhoneNumber sets the "billing_address_phone_number" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableBillingAddressPhoneNumber(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetBillingAddressPhoneNumber(*s)
	}
	return cuo
}

// ClearBillingAddressPhoneNumber clears the value of the "billing_address_phone_number" field.
func (cuo *CustomerUpdateOne) ClearBillingAddressPhoneNumber() *CustomerUpdateOne {
	cuo.mutation.ClearBillingAddressPhoneNumber()
	return cuo
}

// SetPrimaryEmail sets the "primary_email" field.
func (cuo *CustomerUpdateOne) SetPrimaryEmail(s string) *CustomerUpdateOne {
	cuo.mutation.SetPrimaryEmail(s)
	return cuo
}

// SetNillablePrimaryEmail sets the "primary_email" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillablePrimaryEmail(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetPrimaryEmail(*s)
	}
	return cuo
}

// ClearPrimaryEmail clears the value of the "primary_email" field.
func (cuo *CustomerUpdateOne) ClearPrimaryEmail() *CustomerUpdateOne {
	cuo.mutation.ClearPrimaryEmail()
	return cuo
}

// SetTimezone sets the "timezone" field.
func (cuo *CustomerUpdateOne) SetTimezone(t timezone.Timezone) *CustomerUpdateOne {
	cuo.mutation.SetTimezone(t)
	return cuo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableTimezone(t *timezone.Timezone) *CustomerUpdateOne {
	if t != nil {
		cuo.SetTimezone(*t)
	}
	return cuo
}

// ClearTimezone clears the value of the "timezone" field.
func (cuo *CustomerUpdateOne) ClearTimezone() *CustomerUpdateOne {
	cuo.mutation.ClearTimezone()
	return cuo
}

// SetCurrency sets the "currency" field.
func (cuo *CustomerUpdateOne) SetCurrency(c currencyx.Code) *CustomerUpdateOne {
	cuo.mutation.SetCurrency(c)
	return cuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCurrency(c *currencyx.Code) *CustomerUpdateOne {
	if c != nil {
		cuo.SetCurrency(*c)
	}
	return cuo
}

// ClearCurrency clears the value of the "currency" field.
func (cuo *CustomerUpdateOne) ClearCurrency() *CustomerUpdateOne {
	cuo.mutation.ClearCurrency()
	return cuo
}

// AddAppIDs adds the "apps" edge to the AppCustomer entity by IDs.
func (cuo *CustomerUpdateOne) AddAppIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddAppIDs(ids...)
	return cuo
}

// AddApps adds the "apps" edges to the AppCustomer entity.
func (cuo *CustomerUpdateOne) AddApps(a ...*AppCustomer) *CustomerUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAppIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the CustomerSubjects entity by IDs.
func (cuo *CustomerUpdateOne) AddSubjectIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddSubjectIDs(ids...)
	return cuo
}

// AddSubjects adds the "subjects" edges to the CustomerSubjects entity.
func (cuo *CustomerUpdateOne) AddSubjects(c ...*CustomerSubjects) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddSubjectIDs(ids...)
}

// SetBillingCustomerOverrideID sets the "billing_customer_override" edge to the BillingCustomerOverride entity by ID.
func (cuo *CustomerUpdateOne) SetBillingCustomerOverrideID(id string) *CustomerUpdateOne {
	cuo.mutation.SetBillingCustomerOverrideID(id)
	return cuo
}

// SetNillableBillingCustomerOverrideID sets the "billing_customer_override" edge to the BillingCustomerOverride entity by ID if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableBillingCustomerOverrideID(id *string) *CustomerUpdateOne {
	if id != nil {
		cuo = cuo.SetBillingCustomerOverrideID(*id)
	}
	return cuo
}

// SetBillingCustomerOverride sets the "billing_customer_override" edge to the BillingCustomerOverride entity.
func (cuo *CustomerUpdateOne) SetBillingCustomerOverride(b *BillingCustomerOverride) *CustomerUpdateOne {
	return cuo.SetBillingCustomerOverrideID(b.ID)
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// ClearApps clears all "apps" edges to the AppCustomer entity.
func (cuo *CustomerUpdateOne) ClearApps() *CustomerUpdateOne {
	cuo.mutation.ClearApps()
	return cuo
}

// RemoveAppIDs removes the "apps" edge to AppCustomer entities by IDs.
func (cuo *CustomerUpdateOne) RemoveAppIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveAppIDs(ids...)
	return cuo
}

// RemoveApps removes "apps" edges to AppCustomer entities.
func (cuo *CustomerUpdateOne) RemoveApps(a ...*AppCustomer) *CustomerUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAppIDs(ids...)
}

// ClearSubjects clears all "subjects" edges to the CustomerSubjects entity.
func (cuo *CustomerUpdateOne) ClearSubjects() *CustomerUpdateOne {
	cuo.mutation.ClearSubjects()
	return cuo
}

// RemoveSubjectIDs removes the "subjects" edge to CustomerSubjects entities by IDs.
func (cuo *CustomerUpdateOne) RemoveSubjectIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveSubjectIDs(ids...)
	return cuo
}

// RemoveSubjects removes "subjects" edges to CustomerSubjects entities.
func (cuo *CustomerUpdateOne) RemoveSubjects(c ...*CustomerSubjects) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveSubjectIDs(ids...)
}

// ClearBillingCustomerOverride clears the "billing_customer_override" edge to the BillingCustomerOverride entity.
func (cuo *CustomerUpdateOne) ClearBillingCustomerOverride() *CustomerUpdateOne {
	cuo.mutation.ClearBillingCustomerOverride()
	return cuo
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CustomerUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := customer.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CustomerUpdateOne) check() error {
	if v, ok := cuo.mutation.BillingAddressCountry(); ok {
		if err := customer.BillingAddressCountryValidator(string(v)); err != nil {
			return &ValidationError{Name: "billing_address_country", err: fmt.Errorf(`db: validator failed for field "Customer.billing_address_country": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Currency(); ok {
		if err := customer.CurrencyValidator(string(v)); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`db: validator failed for field "Customer.currency": %w`, err)}
		}
	}
	return nil
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Metadata(); ok {
		_spec.SetField(customer.FieldMetadata, field.TypeJSON, value)
	}
	if cuo.mutation.MetadataCleared() {
		_spec.ClearField(customer.FieldMetadata, field.TypeJSON)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(customer.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(customer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(customer.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(customer.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.BillingAddressCountry(); ok {
		_spec.SetField(customer.FieldBillingAddressCountry, field.TypeString, value)
	}
	if cuo.mutation.BillingAddressCountryCleared() {
		_spec.ClearField(customer.FieldBillingAddressCountry, field.TypeString)
	}
	if value, ok := cuo.mutation.BillingAddressPostalCode(); ok {
		_spec.SetField(customer.FieldBillingAddressPostalCode, field.TypeString, value)
	}
	if cuo.mutation.BillingAddressPostalCodeCleared() {
		_spec.ClearField(customer.FieldBillingAddressPostalCode, field.TypeString)
	}
	if value, ok := cuo.mutation.BillingAddressState(); ok {
		_spec.SetField(customer.FieldBillingAddressState, field.TypeString, value)
	}
	if cuo.mutation.BillingAddressStateCleared() {
		_spec.ClearField(customer.FieldBillingAddressState, field.TypeString)
	}
	if value, ok := cuo.mutation.BillingAddressCity(); ok {
		_spec.SetField(customer.FieldBillingAddressCity, field.TypeString, value)
	}
	if cuo.mutation.BillingAddressCityCleared() {
		_spec.ClearField(customer.FieldBillingAddressCity, field.TypeString)
	}
	if value, ok := cuo.mutation.BillingAddressLine1(); ok {
		_spec.SetField(customer.FieldBillingAddressLine1, field.TypeString, value)
	}
	if cuo.mutation.BillingAddressLine1Cleared() {
		_spec.ClearField(customer.FieldBillingAddressLine1, field.TypeString)
	}
	if value, ok := cuo.mutation.BillingAddressLine2(); ok {
		_spec.SetField(customer.FieldBillingAddressLine2, field.TypeString, value)
	}
	if cuo.mutation.BillingAddressLine2Cleared() {
		_spec.ClearField(customer.FieldBillingAddressLine2, field.TypeString)
	}
	if value, ok := cuo.mutation.BillingAddressPhoneNumber(); ok {
		_spec.SetField(customer.FieldBillingAddressPhoneNumber, field.TypeString, value)
	}
	if cuo.mutation.BillingAddressPhoneNumberCleared() {
		_spec.ClearField(customer.FieldBillingAddressPhoneNumber, field.TypeString)
	}
	if value, ok := cuo.mutation.PrimaryEmail(); ok {
		_spec.SetField(customer.FieldPrimaryEmail, field.TypeString, value)
	}
	if cuo.mutation.PrimaryEmailCleared() {
		_spec.ClearField(customer.FieldPrimaryEmail, field.TypeString)
	}
	if value, ok := cuo.mutation.Timezone(); ok {
		_spec.SetField(customer.FieldTimezone, field.TypeString, value)
	}
	if cuo.mutation.TimezoneCleared() {
		_spec.ClearField(customer.FieldTimezone, field.TypeString)
	}
	if value, ok := cuo.mutation.Currency(); ok {
		_spec.SetField(customer.FieldCurrency, field.TypeString, value)
	}
	if cuo.mutation.CurrencyCleared() {
		_spec.ClearField(customer.FieldCurrency, field.TypeString)
	}
	if cuo.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AppsTable,
			Columns: []string{customer.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAppsIDs(); len(nodes) > 0 && !cuo.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AppsTable,
			Columns: []string{customer.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.AppsTable,
			Columns: []string{customer.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubjectsTable,
			Columns: []string{customer.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersubjects.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedSubjectsIDs(); len(nodes) > 0 && !cuo.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubjectsTable,
			Columns: []string{customer.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersubjects.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubjectsTable,
			Columns: []string{customer.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersubjects.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.BillingCustomerOverrideCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BillingCustomerOverrideTable,
			Columns: []string{customer.BillingCustomerOverrideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BillingCustomerOverrideIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   customer.BillingCustomerOverrideTable,
			Columns: []string{customer.BillingCustomerOverrideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
