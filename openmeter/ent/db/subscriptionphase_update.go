// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicesplitlinegroup"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionphase"
)

// SubscriptionPhaseUpdate is the builder for updating SubscriptionPhase entities.
type SubscriptionPhaseUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionPhaseMutation
}

// Where appends a list predicates to the SubscriptionPhaseUpdate builder.
func (_u *SubscriptionPhaseUpdate) Where(ps ...predicate.SubscriptionPhase) *SubscriptionPhaseUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubscriptionPhaseUpdate) SetUpdatedAt(v time.Time) *SubscriptionPhaseUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SubscriptionPhaseUpdate) SetDeletedAt(v time.Time) *SubscriptionPhaseUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SubscriptionPhaseUpdate) SetNillableDeletedAt(v *time.Time) *SubscriptionPhaseUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SubscriptionPhaseUpdate) ClearDeletedAt() *SubscriptionPhaseUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *SubscriptionPhaseUpdate) SetMetadata(v map[string]string) *SubscriptionPhaseUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SubscriptionPhaseUpdate) ClearMetadata() *SubscriptionPhaseUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetName sets the "name" field.
func (_u *SubscriptionPhaseUpdate) SetName(v string) *SubscriptionPhaseUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SubscriptionPhaseUpdate) SetNillableName(v *string) *SubscriptionPhaseUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *SubscriptionPhaseUpdate) SetDescription(v string) *SubscriptionPhaseUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *SubscriptionPhaseUpdate) SetNillableDescription(v *string) *SubscriptionPhaseUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *SubscriptionPhaseUpdate) ClearDescription() *SubscriptionPhaseUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetSortHint sets the "sort_hint" field.
func (_u *SubscriptionPhaseUpdate) SetSortHint(v uint8) *SubscriptionPhaseUpdate {
	_u.mutation.ResetSortHint()
	_u.mutation.SetSortHint(v)
	return _u
}

// SetNillableSortHint sets the "sort_hint" field if the given value is not nil.
func (_u *SubscriptionPhaseUpdate) SetNillableSortHint(v *uint8) *SubscriptionPhaseUpdate {
	if v != nil {
		_u.SetSortHint(*v)
	}
	return _u
}

// AddSortHint adds value to the "sort_hint" field.
func (_u *SubscriptionPhaseUpdate) AddSortHint(v int8) *SubscriptionPhaseUpdate {
	_u.mutation.AddSortHint(v)
	return _u
}

// ClearSortHint clears the value of the "sort_hint" field.
func (_u *SubscriptionPhaseUpdate) ClearSortHint() *SubscriptionPhaseUpdate {
	_u.mutation.ClearSortHint()
	return _u
}

// AddItemIDs adds the "items" edge to the SubscriptionItem entity by IDs.
func (_u *SubscriptionPhaseUpdate) AddItemIDs(ids ...string) *SubscriptionPhaseUpdate {
	_u.mutation.AddItemIDs(ids...)
	return _u
}

// AddItems adds the "items" edges to the SubscriptionItem entity.
func (_u *SubscriptionPhaseUpdate) AddItems(v ...*SubscriptionItem) *SubscriptionPhaseUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddItemIDs(ids...)
}

// AddBillingLineIDs adds the "billing_lines" edge to the BillingInvoiceLine entity by IDs.
func (_u *SubscriptionPhaseUpdate) AddBillingLineIDs(ids ...string) *SubscriptionPhaseUpdate {
	_u.mutation.AddBillingLineIDs(ids...)
	return _u
}

// AddBillingLines adds the "billing_lines" edges to the BillingInvoiceLine entity.
func (_u *SubscriptionPhaseUpdate) AddBillingLines(v ...*BillingInvoiceLine) *SubscriptionPhaseUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBillingLineIDs(ids...)
}

// AddBillingSplitLineGroupIDs adds the "billing_split_line_groups" edge to the BillingInvoiceSplitLineGroup entity by IDs.
func (_u *SubscriptionPhaseUpdate) AddBillingSplitLineGroupIDs(ids ...string) *SubscriptionPhaseUpdate {
	_u.mutation.AddBillingSplitLineGroupIDs(ids...)
	return _u
}

// AddBillingSplitLineGroups adds the "billing_split_line_groups" edges to the BillingInvoiceSplitLineGroup entity.
func (_u *SubscriptionPhaseUpdate) AddBillingSplitLineGroups(v ...*BillingInvoiceSplitLineGroup) *SubscriptionPhaseUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBillingSplitLineGroupIDs(ids...)
}

// Mutation returns the SubscriptionPhaseMutation object of the builder.
func (_u *SubscriptionPhaseUpdate) Mutation() *SubscriptionPhaseMutation {
	return _u.mutation
}

// ClearItems clears all "items" edges to the SubscriptionItem entity.
func (_u *SubscriptionPhaseUpdate) ClearItems() *SubscriptionPhaseUpdate {
	_u.mutation.ClearItems()
	return _u
}

// RemoveItemIDs removes the "items" edge to SubscriptionItem entities by IDs.
func (_u *SubscriptionPhaseUpdate) RemoveItemIDs(ids ...string) *SubscriptionPhaseUpdate {
	_u.mutation.RemoveItemIDs(ids...)
	return _u
}

// RemoveItems removes "items" edges to SubscriptionItem entities.
func (_u *SubscriptionPhaseUpdate) RemoveItems(v ...*SubscriptionItem) *SubscriptionPhaseUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveItemIDs(ids...)
}

// ClearBillingLines clears all "billing_lines" edges to the BillingInvoiceLine entity.
func (_u *SubscriptionPhaseUpdate) ClearBillingLines() *SubscriptionPhaseUpdate {
	_u.mutation.ClearBillingLines()
	return _u
}

// RemoveBillingLineIDs removes the "billing_lines" edge to BillingInvoiceLine entities by IDs.
func (_u *SubscriptionPhaseUpdate) RemoveBillingLineIDs(ids ...string) *SubscriptionPhaseUpdate {
	_u.mutation.RemoveBillingLineIDs(ids...)
	return _u
}

// RemoveBillingLines removes "billing_lines" edges to BillingInvoiceLine entities.
func (_u *SubscriptionPhaseUpdate) RemoveBillingLines(v ...*BillingInvoiceLine) *SubscriptionPhaseUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBillingLineIDs(ids...)
}

// ClearBillingSplitLineGroups clears all "billing_split_line_groups" edges to the BillingInvoiceSplitLineGroup entity.
func (_u *SubscriptionPhaseUpdate) ClearBillingSplitLineGroups() *SubscriptionPhaseUpdate {
	_u.mutation.ClearBillingSplitLineGroups()
	return _u
}

// RemoveBillingSplitLineGroupIDs removes the "billing_split_line_groups" edge to BillingInvoiceSplitLineGroup entities by IDs.
func (_u *SubscriptionPhaseUpdate) RemoveBillingSplitLineGroupIDs(ids ...string) *SubscriptionPhaseUpdate {
	_u.mutation.RemoveBillingSplitLineGroupIDs(ids...)
	return _u
}

// RemoveBillingSplitLineGroups removes "billing_split_line_groups" edges to BillingInvoiceSplitLineGroup entities.
func (_u *SubscriptionPhaseUpdate) RemoveBillingSplitLineGroups(v ...*BillingInvoiceSplitLineGroup) *SubscriptionPhaseUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBillingSplitLineGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SubscriptionPhaseUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubscriptionPhaseUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SubscriptionPhaseUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubscriptionPhaseUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubscriptionPhaseUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := subscriptionphase.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubscriptionPhaseUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := subscriptionphase.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "SubscriptionPhase.name": %w`, err)}
		}
	}
	if _u.mutation.SubscriptionCleared() && len(_u.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionPhase.subscription"`)
	}
	return nil
}

func (_u *SubscriptionPhaseUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionphase.Table, subscriptionphase.Columns, sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionphase.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionphase.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subscriptionphase.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(subscriptionphase.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionphase.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(subscriptionphase.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(subscriptionphase.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(subscriptionphase.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.SortHint(); ok {
		_spec.SetField(subscriptionphase.FieldSortHint, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedSortHint(); ok {
		_spec.AddField(subscriptionphase.FieldSortHint, field.TypeUint8, value)
	}
	if _u.mutation.SortHintCleared() {
		_spec.ClearField(subscriptionphase.FieldSortHint, field.TypeUint8)
	}
	if _u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.ItemsTable,
			Columns: []string{subscriptionphase.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedItemsIDs(); len(nodes) > 0 && !_u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.ItemsTable,
			Columns: []string{subscriptionphase.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.ItemsTable,
			Columns: []string{subscriptionphase.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BillingLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.BillingLinesTable,
			Columns: []string{subscriptionphase.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBillingLinesIDs(); len(nodes) > 0 && !_u.mutation.BillingLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.BillingLinesTable,
			Columns: []string{subscriptionphase.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.BillingLinesTable,
			Columns: []string{subscriptionphase.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BillingSplitLineGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.BillingSplitLineGroupsTable,
			Columns: []string{subscriptionphase.BillingSplitLineGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBillingSplitLineGroupsIDs(); len(nodes) > 0 && !_u.mutation.BillingSplitLineGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.BillingSplitLineGroupsTable,
			Columns: []string{subscriptionphase.BillingSplitLineGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingSplitLineGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.BillingSplitLineGroupsTable,
			Columns: []string{subscriptionphase.BillingSplitLineGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionphase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SubscriptionPhaseUpdateOne is the builder for updating a single SubscriptionPhase entity.
type SubscriptionPhaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionPhaseMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubscriptionPhaseUpdateOne) SetUpdatedAt(v time.Time) *SubscriptionPhaseUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SubscriptionPhaseUpdateOne) SetDeletedAt(v time.Time) *SubscriptionPhaseUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SubscriptionPhaseUpdateOne) SetNillableDeletedAt(v *time.Time) *SubscriptionPhaseUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SubscriptionPhaseUpdateOne) ClearDeletedAt() *SubscriptionPhaseUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *SubscriptionPhaseUpdateOne) SetMetadata(v map[string]string) *SubscriptionPhaseUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SubscriptionPhaseUpdateOne) ClearMetadata() *SubscriptionPhaseUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetName sets the "name" field.
func (_u *SubscriptionPhaseUpdateOne) SetName(v string) *SubscriptionPhaseUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SubscriptionPhaseUpdateOne) SetNillableName(v *string) *SubscriptionPhaseUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *SubscriptionPhaseUpdateOne) SetDescription(v string) *SubscriptionPhaseUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *SubscriptionPhaseUpdateOne) SetNillableDescription(v *string) *SubscriptionPhaseUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *SubscriptionPhaseUpdateOne) ClearDescription() *SubscriptionPhaseUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetSortHint sets the "sort_hint" field.
func (_u *SubscriptionPhaseUpdateOne) SetSortHint(v uint8) *SubscriptionPhaseUpdateOne {
	_u.mutation.ResetSortHint()
	_u.mutation.SetSortHint(v)
	return _u
}

// SetNillableSortHint sets the "sort_hint" field if the given value is not nil.
func (_u *SubscriptionPhaseUpdateOne) SetNillableSortHint(v *uint8) *SubscriptionPhaseUpdateOne {
	if v != nil {
		_u.SetSortHint(*v)
	}
	return _u
}

// AddSortHint adds value to the "sort_hint" field.
func (_u *SubscriptionPhaseUpdateOne) AddSortHint(v int8) *SubscriptionPhaseUpdateOne {
	_u.mutation.AddSortHint(v)
	return _u
}

// ClearSortHint clears the value of the "sort_hint" field.
func (_u *SubscriptionPhaseUpdateOne) ClearSortHint() *SubscriptionPhaseUpdateOne {
	_u.mutation.ClearSortHint()
	return _u
}

// AddItemIDs adds the "items" edge to the SubscriptionItem entity by IDs.
func (_u *SubscriptionPhaseUpdateOne) AddItemIDs(ids ...string) *SubscriptionPhaseUpdateOne {
	_u.mutation.AddItemIDs(ids...)
	return _u
}

// AddItems adds the "items" edges to the SubscriptionItem entity.
func (_u *SubscriptionPhaseUpdateOne) AddItems(v ...*SubscriptionItem) *SubscriptionPhaseUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddItemIDs(ids...)
}

// AddBillingLineIDs adds the "billing_lines" edge to the BillingInvoiceLine entity by IDs.
func (_u *SubscriptionPhaseUpdateOne) AddBillingLineIDs(ids ...string) *SubscriptionPhaseUpdateOne {
	_u.mutation.AddBillingLineIDs(ids...)
	return _u
}

// AddBillingLines adds the "billing_lines" edges to the BillingInvoiceLine entity.
func (_u *SubscriptionPhaseUpdateOne) AddBillingLines(v ...*BillingInvoiceLine) *SubscriptionPhaseUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBillingLineIDs(ids...)
}

// AddBillingSplitLineGroupIDs adds the "billing_split_line_groups" edge to the BillingInvoiceSplitLineGroup entity by IDs.
func (_u *SubscriptionPhaseUpdateOne) AddBillingSplitLineGroupIDs(ids ...string) *SubscriptionPhaseUpdateOne {
	_u.mutation.AddBillingSplitLineGroupIDs(ids...)
	return _u
}

// AddBillingSplitLineGroups adds the "billing_split_line_groups" edges to the BillingInvoiceSplitLineGroup entity.
func (_u *SubscriptionPhaseUpdateOne) AddBillingSplitLineGroups(v ...*BillingInvoiceSplitLineGroup) *SubscriptionPhaseUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBillingSplitLineGroupIDs(ids...)
}

// Mutation returns the SubscriptionPhaseMutation object of the builder.
func (_u *SubscriptionPhaseUpdateOne) Mutation() *SubscriptionPhaseMutation {
	return _u.mutation
}

// ClearItems clears all "items" edges to the SubscriptionItem entity.
func (_u *SubscriptionPhaseUpdateOne) ClearItems() *SubscriptionPhaseUpdateOne {
	_u.mutation.ClearItems()
	return _u
}

// RemoveItemIDs removes the "items" edge to SubscriptionItem entities by IDs.
func (_u *SubscriptionPhaseUpdateOne) RemoveItemIDs(ids ...string) *SubscriptionPhaseUpdateOne {
	_u.mutation.RemoveItemIDs(ids...)
	return _u
}

// RemoveItems removes "items" edges to SubscriptionItem entities.
func (_u *SubscriptionPhaseUpdateOne) RemoveItems(v ...*SubscriptionItem) *SubscriptionPhaseUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveItemIDs(ids...)
}

// ClearBillingLines clears all "billing_lines" edges to the BillingInvoiceLine entity.
func (_u *SubscriptionPhaseUpdateOne) ClearBillingLines() *SubscriptionPhaseUpdateOne {
	_u.mutation.ClearBillingLines()
	return _u
}

// RemoveBillingLineIDs removes the "billing_lines" edge to BillingInvoiceLine entities by IDs.
func (_u *SubscriptionPhaseUpdateOne) RemoveBillingLineIDs(ids ...string) *SubscriptionPhaseUpdateOne {
	_u.mutation.RemoveBillingLineIDs(ids...)
	return _u
}

// RemoveBillingLines removes "billing_lines" edges to BillingInvoiceLine entities.
func (_u *SubscriptionPhaseUpdateOne) RemoveBillingLines(v ...*BillingInvoiceLine) *SubscriptionPhaseUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBillingLineIDs(ids...)
}

// ClearBillingSplitLineGroups clears all "billing_split_line_groups" edges to the BillingInvoiceSplitLineGroup entity.
func (_u *SubscriptionPhaseUpdateOne) ClearBillingSplitLineGroups() *SubscriptionPhaseUpdateOne {
	_u.mutation.ClearBillingSplitLineGroups()
	return _u
}

// RemoveBillingSplitLineGroupIDs removes the "billing_split_line_groups" edge to BillingInvoiceSplitLineGroup entities by IDs.
func (_u *SubscriptionPhaseUpdateOne) RemoveBillingSplitLineGroupIDs(ids ...string) *SubscriptionPhaseUpdateOne {
	_u.mutation.RemoveBillingSplitLineGroupIDs(ids...)
	return _u
}

// RemoveBillingSplitLineGroups removes "billing_split_line_groups" edges to BillingInvoiceSplitLineGroup entities.
func (_u *SubscriptionPhaseUpdateOne) RemoveBillingSplitLineGroups(v ...*BillingInvoiceSplitLineGroup) *SubscriptionPhaseUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBillingSplitLineGroupIDs(ids...)
}

// Where appends a list predicates to the SubscriptionPhaseUpdate builder.
func (_u *SubscriptionPhaseUpdateOne) Where(ps ...predicate.SubscriptionPhase) *SubscriptionPhaseUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SubscriptionPhaseUpdateOne) Select(field string, fields ...string) *SubscriptionPhaseUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SubscriptionPhase entity.
func (_u *SubscriptionPhaseUpdateOne) Save(ctx context.Context) (*SubscriptionPhase, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubscriptionPhaseUpdateOne) SaveX(ctx context.Context) *SubscriptionPhase {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SubscriptionPhaseUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubscriptionPhaseUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubscriptionPhaseUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := subscriptionphase.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubscriptionPhaseUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := subscriptionphase.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "SubscriptionPhase.name": %w`, err)}
		}
	}
	if _u.mutation.SubscriptionCleared() && len(_u.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionPhase.subscription"`)
	}
	return nil
}

func (_u *SubscriptionPhaseUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionPhase, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionphase.Table, subscriptionphase.Columns, sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "SubscriptionPhase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionphase.FieldID)
		for _, f := range fields {
			if !subscriptionphase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != subscriptionphase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionphase.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionphase.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subscriptionphase.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(subscriptionphase.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionphase.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(subscriptionphase.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(subscriptionphase.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(subscriptionphase.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.SortHint(); ok {
		_spec.SetField(subscriptionphase.FieldSortHint, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedSortHint(); ok {
		_spec.AddField(subscriptionphase.FieldSortHint, field.TypeUint8, value)
	}
	if _u.mutation.SortHintCleared() {
		_spec.ClearField(subscriptionphase.FieldSortHint, field.TypeUint8)
	}
	if _u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.ItemsTable,
			Columns: []string{subscriptionphase.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedItemsIDs(); len(nodes) > 0 && !_u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.ItemsTable,
			Columns: []string{subscriptionphase.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.ItemsTable,
			Columns: []string{subscriptionphase.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BillingLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.BillingLinesTable,
			Columns: []string{subscriptionphase.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBillingLinesIDs(); len(nodes) > 0 && !_u.mutation.BillingLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.BillingLinesTable,
			Columns: []string{subscriptionphase.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.BillingLinesTable,
			Columns: []string{subscriptionphase.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BillingSplitLineGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.BillingSplitLineGroupsTable,
			Columns: []string{subscriptionphase.BillingSplitLineGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBillingSplitLineGroupsIDs(); len(nodes) > 0 && !_u.mutation.BillingSplitLineGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.BillingSplitLineGroupsTable,
			Columns: []string{subscriptionphase.BillingSplitLineGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingSplitLineGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionphase.BillingSplitLineGroupsTable,
			Columns: []string{subscriptionphase.BillingSplitLineGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubscriptionPhase{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionphase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
