// Code generated by ent, DO NOT EDIT.

package customer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/pkg/currencyx"
	"github.com/openmeterio/openmeter/pkg/models"
	"github.com/openmeterio/openmeter/pkg/timezone"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldNamespace, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldDescription, v))
}

// BillingAddressCountry applies equality check predicate on the "billing_address_country" field. It's identical to BillingAddressCountryEQ.
func BillingAddressCountry(v models.CountryCode) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldEQ(FieldBillingAddressCountry, vc))
}

// BillingAddressPostalCode applies equality check predicate on the "billing_address_postal_code" field. It's identical to BillingAddressPostalCodeEQ.
func BillingAddressPostalCode(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldBillingAddressPostalCode, v))
}

// BillingAddressState applies equality check predicate on the "billing_address_state" field. It's identical to BillingAddressStateEQ.
func BillingAddressState(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldBillingAddressState, v))
}

// BillingAddressCity applies equality check predicate on the "billing_address_city" field. It's identical to BillingAddressCityEQ.
func BillingAddressCity(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldBillingAddressCity, v))
}

// BillingAddressLine1 applies equality check predicate on the "billing_address_line1" field. It's identical to BillingAddressLine1EQ.
func BillingAddressLine1(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldBillingAddressLine1, v))
}

// BillingAddressLine2 applies equality check predicate on the "billing_address_line2" field. It's identical to BillingAddressLine2EQ.
func BillingAddressLine2(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldBillingAddressLine2, v))
}

// BillingAddressPhoneNumber applies equality check predicate on the "billing_address_phone_number" field. It's identical to BillingAddressPhoneNumberEQ.
func BillingAddressPhoneNumber(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldBillingAddressPhoneNumber, v))
}

// PrimaryEmail applies equality check predicate on the "primary_email" field. It's identical to PrimaryEmailEQ.
func PrimaryEmail(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldPrimaryEmail, v))
}

// Timezone applies equality check predicate on the "timezone" field. It's identical to TimezoneEQ.
func Timezone(v timezone.Timezone) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldEQ(FieldTimezone, vc))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v currencyx.Code) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldEQ(FieldCurrency, vc))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldNamespace, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldDescription, v))
}

// BillingAddressCountryEQ applies the EQ predicate on the "billing_address_country" field.
func BillingAddressCountryEQ(v models.CountryCode) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldEQ(FieldBillingAddressCountry, vc))
}

// BillingAddressCountryNEQ applies the NEQ predicate on the "billing_address_country" field.
func BillingAddressCountryNEQ(v models.CountryCode) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldNEQ(FieldBillingAddressCountry, vc))
}

// BillingAddressCountryIn applies the In predicate on the "billing_address_country" field.
func BillingAddressCountryIn(vs ...models.CountryCode) predicate.Customer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Customer(sql.FieldIn(FieldBillingAddressCountry, v...))
}

// BillingAddressCountryNotIn applies the NotIn predicate on the "billing_address_country" field.
func BillingAddressCountryNotIn(vs ...models.CountryCode) predicate.Customer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Customer(sql.FieldNotIn(FieldBillingAddressCountry, v...))
}

// BillingAddressCountryGT applies the GT predicate on the "billing_address_country" field.
func BillingAddressCountryGT(v models.CountryCode) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldGT(FieldBillingAddressCountry, vc))
}

// BillingAddressCountryGTE applies the GTE predicate on the "billing_address_country" field.
func BillingAddressCountryGTE(v models.CountryCode) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldGTE(FieldBillingAddressCountry, vc))
}

// BillingAddressCountryLT applies the LT predicate on the "billing_address_country" field.
func BillingAddressCountryLT(v models.CountryCode) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldLT(FieldBillingAddressCountry, vc))
}

// BillingAddressCountryLTE applies the LTE predicate on the "billing_address_country" field.
func BillingAddressCountryLTE(v models.CountryCode) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldLTE(FieldBillingAddressCountry, vc))
}

// BillingAddressCountryContains applies the Contains predicate on the "billing_address_country" field.
func BillingAddressCountryContains(v models.CountryCode) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldContains(FieldBillingAddressCountry, vc))
}

// BillingAddressCountryHasPrefix applies the HasPrefix predicate on the "billing_address_country" field.
func BillingAddressCountryHasPrefix(v models.CountryCode) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldHasPrefix(FieldBillingAddressCountry, vc))
}

// BillingAddressCountryHasSuffix applies the HasSuffix predicate on the "billing_address_country" field.
func BillingAddressCountryHasSuffix(v models.CountryCode) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldHasSuffix(FieldBillingAddressCountry, vc))
}

// BillingAddressCountryIsNil applies the IsNil predicate on the "billing_address_country" field.
func BillingAddressCountryIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldBillingAddressCountry))
}

// BillingAddressCountryNotNil applies the NotNil predicate on the "billing_address_country" field.
func BillingAddressCountryNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldBillingAddressCountry))
}

// BillingAddressCountryEqualFold applies the EqualFold predicate on the "billing_address_country" field.
func BillingAddressCountryEqualFold(v models.CountryCode) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldEqualFold(FieldBillingAddressCountry, vc))
}

// BillingAddressCountryContainsFold applies the ContainsFold predicate on the "billing_address_country" field.
func BillingAddressCountryContainsFold(v models.CountryCode) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldContainsFold(FieldBillingAddressCountry, vc))
}

// BillingAddressPostalCodeEQ applies the EQ predicate on the "billing_address_postal_code" field.
func BillingAddressPostalCodeEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldBillingAddressPostalCode, v))
}

// BillingAddressPostalCodeNEQ applies the NEQ predicate on the "billing_address_postal_code" field.
func BillingAddressPostalCodeNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldBillingAddressPostalCode, v))
}

// BillingAddressPostalCodeIn applies the In predicate on the "billing_address_postal_code" field.
func BillingAddressPostalCodeIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldBillingAddressPostalCode, vs...))
}

// BillingAddressPostalCodeNotIn applies the NotIn predicate on the "billing_address_postal_code" field.
func BillingAddressPostalCodeNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldBillingAddressPostalCode, vs...))
}

// BillingAddressPostalCodeGT applies the GT predicate on the "billing_address_postal_code" field.
func BillingAddressPostalCodeGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldBillingAddressPostalCode, v))
}

// BillingAddressPostalCodeGTE applies the GTE predicate on the "billing_address_postal_code" field.
func BillingAddressPostalCodeGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldBillingAddressPostalCode, v))
}

// BillingAddressPostalCodeLT applies the LT predicate on the "billing_address_postal_code" field.
func BillingAddressPostalCodeLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldBillingAddressPostalCode, v))
}

// BillingAddressPostalCodeLTE applies the LTE predicate on the "billing_address_postal_code" field.
func BillingAddressPostalCodeLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldBillingAddressPostalCode, v))
}

// BillingAddressPostalCodeContains applies the Contains predicate on the "billing_address_postal_code" field.
func BillingAddressPostalCodeContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldBillingAddressPostalCode, v))
}

// BillingAddressPostalCodeHasPrefix applies the HasPrefix predicate on the "billing_address_postal_code" field.
func BillingAddressPostalCodeHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldBillingAddressPostalCode, v))
}

// BillingAddressPostalCodeHasSuffix applies the HasSuffix predicate on the "billing_address_postal_code" field.
func BillingAddressPostalCodeHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldBillingAddressPostalCode, v))
}

// BillingAddressPostalCodeIsNil applies the IsNil predicate on the "billing_address_postal_code" field.
func BillingAddressPostalCodeIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldBillingAddressPostalCode))
}

// BillingAddressPostalCodeNotNil applies the NotNil predicate on the "billing_address_postal_code" field.
func BillingAddressPostalCodeNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldBillingAddressPostalCode))
}

// BillingAddressPostalCodeEqualFold applies the EqualFold predicate on the "billing_address_postal_code" field.
func BillingAddressPostalCodeEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldBillingAddressPostalCode, v))
}

// BillingAddressPostalCodeContainsFold applies the ContainsFold predicate on the "billing_address_postal_code" field.
func BillingAddressPostalCodeContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldBillingAddressPostalCode, v))
}

// BillingAddressStateEQ applies the EQ predicate on the "billing_address_state" field.
func BillingAddressStateEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldBillingAddressState, v))
}

// BillingAddressStateNEQ applies the NEQ predicate on the "billing_address_state" field.
func BillingAddressStateNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldBillingAddressState, v))
}

// BillingAddressStateIn applies the In predicate on the "billing_address_state" field.
func BillingAddressStateIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldBillingAddressState, vs...))
}

// BillingAddressStateNotIn applies the NotIn predicate on the "billing_address_state" field.
func BillingAddressStateNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldBillingAddressState, vs...))
}

// BillingAddressStateGT applies the GT predicate on the "billing_address_state" field.
func BillingAddressStateGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldBillingAddressState, v))
}

// BillingAddressStateGTE applies the GTE predicate on the "billing_address_state" field.
func BillingAddressStateGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldBillingAddressState, v))
}

// BillingAddressStateLT applies the LT predicate on the "billing_address_state" field.
func BillingAddressStateLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldBillingAddressState, v))
}

// BillingAddressStateLTE applies the LTE predicate on the "billing_address_state" field.
func BillingAddressStateLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldBillingAddressState, v))
}

// BillingAddressStateContains applies the Contains predicate on the "billing_address_state" field.
func BillingAddressStateContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldBillingAddressState, v))
}

// BillingAddressStateHasPrefix applies the HasPrefix predicate on the "billing_address_state" field.
func BillingAddressStateHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldBillingAddressState, v))
}

// BillingAddressStateHasSuffix applies the HasSuffix predicate on the "billing_address_state" field.
func BillingAddressStateHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldBillingAddressState, v))
}

// BillingAddressStateIsNil applies the IsNil predicate on the "billing_address_state" field.
func BillingAddressStateIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldBillingAddressState))
}

// BillingAddressStateNotNil applies the NotNil predicate on the "billing_address_state" field.
func BillingAddressStateNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldBillingAddressState))
}

// BillingAddressStateEqualFold applies the EqualFold predicate on the "billing_address_state" field.
func BillingAddressStateEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldBillingAddressState, v))
}

// BillingAddressStateContainsFold applies the ContainsFold predicate on the "billing_address_state" field.
func BillingAddressStateContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldBillingAddressState, v))
}

// BillingAddressCityEQ applies the EQ predicate on the "billing_address_city" field.
func BillingAddressCityEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldBillingAddressCity, v))
}

// BillingAddressCityNEQ applies the NEQ predicate on the "billing_address_city" field.
func BillingAddressCityNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldBillingAddressCity, v))
}

// BillingAddressCityIn applies the In predicate on the "billing_address_city" field.
func BillingAddressCityIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldBillingAddressCity, vs...))
}

// BillingAddressCityNotIn applies the NotIn predicate on the "billing_address_city" field.
func BillingAddressCityNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldBillingAddressCity, vs...))
}

// BillingAddressCityGT applies the GT predicate on the "billing_address_city" field.
func BillingAddressCityGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldBillingAddressCity, v))
}

// BillingAddressCityGTE applies the GTE predicate on the "billing_address_city" field.
func BillingAddressCityGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldBillingAddressCity, v))
}

// BillingAddressCityLT applies the LT predicate on the "billing_address_city" field.
func BillingAddressCityLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldBillingAddressCity, v))
}

// BillingAddressCityLTE applies the LTE predicate on the "billing_address_city" field.
func BillingAddressCityLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldBillingAddressCity, v))
}

// BillingAddressCityContains applies the Contains predicate on the "billing_address_city" field.
func BillingAddressCityContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldBillingAddressCity, v))
}

// BillingAddressCityHasPrefix applies the HasPrefix predicate on the "billing_address_city" field.
func BillingAddressCityHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldBillingAddressCity, v))
}

// BillingAddressCityHasSuffix applies the HasSuffix predicate on the "billing_address_city" field.
func BillingAddressCityHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldBillingAddressCity, v))
}

// BillingAddressCityIsNil applies the IsNil predicate on the "billing_address_city" field.
func BillingAddressCityIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldBillingAddressCity))
}

// BillingAddressCityNotNil applies the NotNil predicate on the "billing_address_city" field.
func BillingAddressCityNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldBillingAddressCity))
}

// BillingAddressCityEqualFold applies the EqualFold predicate on the "billing_address_city" field.
func BillingAddressCityEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldBillingAddressCity, v))
}

// BillingAddressCityContainsFold applies the ContainsFold predicate on the "billing_address_city" field.
func BillingAddressCityContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldBillingAddressCity, v))
}

// BillingAddressLine1EQ applies the EQ predicate on the "billing_address_line1" field.
func BillingAddressLine1EQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldBillingAddressLine1, v))
}

// BillingAddressLine1NEQ applies the NEQ predicate on the "billing_address_line1" field.
func BillingAddressLine1NEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldBillingAddressLine1, v))
}

// BillingAddressLine1In applies the In predicate on the "billing_address_line1" field.
func BillingAddressLine1In(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldBillingAddressLine1, vs...))
}

// BillingAddressLine1NotIn applies the NotIn predicate on the "billing_address_line1" field.
func BillingAddressLine1NotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldBillingAddressLine1, vs...))
}

// BillingAddressLine1GT applies the GT predicate on the "billing_address_line1" field.
func BillingAddressLine1GT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldBillingAddressLine1, v))
}

// BillingAddressLine1GTE applies the GTE predicate on the "billing_address_line1" field.
func BillingAddressLine1GTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldBillingAddressLine1, v))
}

// BillingAddressLine1LT applies the LT predicate on the "billing_address_line1" field.
func BillingAddressLine1LT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldBillingAddressLine1, v))
}

// BillingAddressLine1LTE applies the LTE predicate on the "billing_address_line1" field.
func BillingAddressLine1LTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldBillingAddressLine1, v))
}

// BillingAddressLine1Contains applies the Contains predicate on the "billing_address_line1" field.
func BillingAddressLine1Contains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldBillingAddressLine1, v))
}

// BillingAddressLine1HasPrefix applies the HasPrefix predicate on the "billing_address_line1" field.
func BillingAddressLine1HasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldBillingAddressLine1, v))
}

// BillingAddressLine1HasSuffix applies the HasSuffix predicate on the "billing_address_line1" field.
func BillingAddressLine1HasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldBillingAddressLine1, v))
}

// BillingAddressLine1IsNil applies the IsNil predicate on the "billing_address_line1" field.
func BillingAddressLine1IsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldBillingAddressLine1))
}

// BillingAddressLine1NotNil applies the NotNil predicate on the "billing_address_line1" field.
func BillingAddressLine1NotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldBillingAddressLine1))
}

// BillingAddressLine1EqualFold applies the EqualFold predicate on the "billing_address_line1" field.
func BillingAddressLine1EqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldBillingAddressLine1, v))
}

// BillingAddressLine1ContainsFold applies the ContainsFold predicate on the "billing_address_line1" field.
func BillingAddressLine1ContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldBillingAddressLine1, v))
}

// BillingAddressLine2EQ applies the EQ predicate on the "billing_address_line2" field.
func BillingAddressLine2EQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldBillingAddressLine2, v))
}

// BillingAddressLine2NEQ applies the NEQ predicate on the "billing_address_line2" field.
func BillingAddressLine2NEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldBillingAddressLine2, v))
}

// BillingAddressLine2In applies the In predicate on the "billing_address_line2" field.
func BillingAddressLine2In(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldBillingAddressLine2, vs...))
}

// BillingAddressLine2NotIn applies the NotIn predicate on the "billing_address_line2" field.
func BillingAddressLine2NotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldBillingAddressLine2, vs...))
}

// BillingAddressLine2GT applies the GT predicate on the "billing_address_line2" field.
func BillingAddressLine2GT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldBillingAddressLine2, v))
}

// BillingAddressLine2GTE applies the GTE predicate on the "billing_address_line2" field.
func BillingAddressLine2GTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldBillingAddressLine2, v))
}

// BillingAddressLine2LT applies the LT predicate on the "billing_address_line2" field.
func BillingAddressLine2LT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldBillingAddressLine2, v))
}

// BillingAddressLine2LTE applies the LTE predicate on the "billing_address_line2" field.
func BillingAddressLine2LTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldBillingAddressLine2, v))
}

// BillingAddressLine2Contains applies the Contains predicate on the "billing_address_line2" field.
func BillingAddressLine2Contains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldBillingAddressLine2, v))
}

// BillingAddressLine2HasPrefix applies the HasPrefix predicate on the "billing_address_line2" field.
func BillingAddressLine2HasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldBillingAddressLine2, v))
}

// BillingAddressLine2HasSuffix applies the HasSuffix predicate on the "billing_address_line2" field.
func BillingAddressLine2HasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldBillingAddressLine2, v))
}

// BillingAddressLine2IsNil applies the IsNil predicate on the "billing_address_line2" field.
func BillingAddressLine2IsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldBillingAddressLine2))
}

// BillingAddressLine2NotNil applies the NotNil predicate on the "billing_address_line2" field.
func BillingAddressLine2NotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldBillingAddressLine2))
}

// BillingAddressLine2EqualFold applies the EqualFold predicate on the "billing_address_line2" field.
func BillingAddressLine2EqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldBillingAddressLine2, v))
}

// BillingAddressLine2ContainsFold applies the ContainsFold predicate on the "billing_address_line2" field.
func BillingAddressLine2ContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldBillingAddressLine2, v))
}

// BillingAddressPhoneNumberEQ applies the EQ predicate on the "billing_address_phone_number" field.
func BillingAddressPhoneNumberEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldBillingAddressPhoneNumber, v))
}

// BillingAddressPhoneNumberNEQ applies the NEQ predicate on the "billing_address_phone_number" field.
func BillingAddressPhoneNumberNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldBillingAddressPhoneNumber, v))
}

// BillingAddressPhoneNumberIn applies the In predicate on the "billing_address_phone_number" field.
func BillingAddressPhoneNumberIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldBillingAddressPhoneNumber, vs...))
}

// BillingAddressPhoneNumberNotIn applies the NotIn predicate on the "billing_address_phone_number" field.
func BillingAddressPhoneNumberNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldBillingAddressPhoneNumber, vs...))
}

// BillingAddressPhoneNumberGT applies the GT predicate on the "billing_address_phone_number" field.
func BillingAddressPhoneNumberGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldBillingAddressPhoneNumber, v))
}

// BillingAddressPhoneNumberGTE applies the GTE predicate on the "billing_address_phone_number" field.
func BillingAddressPhoneNumberGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldBillingAddressPhoneNumber, v))
}

// BillingAddressPhoneNumberLT applies the LT predicate on the "billing_address_phone_number" field.
func BillingAddressPhoneNumberLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldBillingAddressPhoneNumber, v))
}

// BillingAddressPhoneNumberLTE applies the LTE predicate on the "billing_address_phone_number" field.
func BillingAddressPhoneNumberLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldBillingAddressPhoneNumber, v))
}

// BillingAddressPhoneNumberContains applies the Contains predicate on the "billing_address_phone_number" field.
func BillingAddressPhoneNumberContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldBillingAddressPhoneNumber, v))
}

// BillingAddressPhoneNumberHasPrefix applies the HasPrefix predicate on the "billing_address_phone_number" field.
func BillingAddressPhoneNumberHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldBillingAddressPhoneNumber, v))
}

// BillingAddressPhoneNumberHasSuffix applies the HasSuffix predicate on the "billing_address_phone_number" field.
func BillingAddressPhoneNumberHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldBillingAddressPhoneNumber, v))
}

// BillingAddressPhoneNumberIsNil applies the IsNil predicate on the "billing_address_phone_number" field.
func BillingAddressPhoneNumberIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldBillingAddressPhoneNumber))
}

// BillingAddressPhoneNumberNotNil applies the NotNil predicate on the "billing_address_phone_number" field.
func BillingAddressPhoneNumberNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldBillingAddressPhoneNumber))
}

// BillingAddressPhoneNumberEqualFold applies the EqualFold predicate on the "billing_address_phone_number" field.
func BillingAddressPhoneNumberEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldBillingAddressPhoneNumber, v))
}

// BillingAddressPhoneNumberContainsFold applies the ContainsFold predicate on the "billing_address_phone_number" field.
func BillingAddressPhoneNumberContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldBillingAddressPhoneNumber, v))
}

// PrimaryEmailEQ applies the EQ predicate on the "primary_email" field.
func PrimaryEmailEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldPrimaryEmail, v))
}

// PrimaryEmailNEQ applies the NEQ predicate on the "primary_email" field.
func PrimaryEmailNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldPrimaryEmail, v))
}

// PrimaryEmailIn applies the In predicate on the "primary_email" field.
func PrimaryEmailIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldPrimaryEmail, vs...))
}

// PrimaryEmailNotIn applies the NotIn predicate on the "primary_email" field.
func PrimaryEmailNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldPrimaryEmail, vs...))
}

// PrimaryEmailGT applies the GT predicate on the "primary_email" field.
func PrimaryEmailGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldPrimaryEmail, v))
}

// PrimaryEmailGTE applies the GTE predicate on the "primary_email" field.
func PrimaryEmailGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldPrimaryEmail, v))
}

// PrimaryEmailLT applies the LT predicate on the "primary_email" field.
func PrimaryEmailLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldPrimaryEmail, v))
}

// PrimaryEmailLTE applies the LTE predicate on the "primary_email" field.
func PrimaryEmailLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldPrimaryEmail, v))
}

// PrimaryEmailContains applies the Contains predicate on the "primary_email" field.
func PrimaryEmailContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldPrimaryEmail, v))
}

// PrimaryEmailHasPrefix applies the HasPrefix predicate on the "primary_email" field.
func PrimaryEmailHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldPrimaryEmail, v))
}

// PrimaryEmailHasSuffix applies the HasSuffix predicate on the "primary_email" field.
func PrimaryEmailHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldPrimaryEmail, v))
}

// PrimaryEmailIsNil applies the IsNil predicate on the "primary_email" field.
func PrimaryEmailIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldPrimaryEmail))
}

// PrimaryEmailNotNil applies the NotNil predicate on the "primary_email" field.
func PrimaryEmailNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldPrimaryEmail))
}

// PrimaryEmailEqualFold applies the EqualFold predicate on the "primary_email" field.
func PrimaryEmailEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldPrimaryEmail, v))
}

// PrimaryEmailContainsFold applies the ContainsFold predicate on the "primary_email" field.
func PrimaryEmailContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldPrimaryEmail, v))
}

// TimezoneEQ applies the EQ predicate on the "timezone" field.
func TimezoneEQ(v timezone.Timezone) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldEQ(FieldTimezone, vc))
}

// TimezoneNEQ applies the NEQ predicate on the "timezone" field.
func TimezoneNEQ(v timezone.Timezone) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldNEQ(FieldTimezone, vc))
}

// TimezoneIn applies the In predicate on the "timezone" field.
func TimezoneIn(vs ...timezone.Timezone) predicate.Customer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Customer(sql.FieldIn(FieldTimezone, v...))
}

// TimezoneNotIn applies the NotIn predicate on the "timezone" field.
func TimezoneNotIn(vs ...timezone.Timezone) predicate.Customer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Customer(sql.FieldNotIn(FieldTimezone, v...))
}

// TimezoneGT applies the GT predicate on the "timezone" field.
func TimezoneGT(v timezone.Timezone) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldGT(FieldTimezone, vc))
}

// TimezoneGTE applies the GTE predicate on the "timezone" field.
func TimezoneGTE(v timezone.Timezone) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldGTE(FieldTimezone, vc))
}

// TimezoneLT applies the LT predicate on the "timezone" field.
func TimezoneLT(v timezone.Timezone) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldLT(FieldTimezone, vc))
}

// TimezoneLTE applies the LTE predicate on the "timezone" field.
func TimezoneLTE(v timezone.Timezone) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldLTE(FieldTimezone, vc))
}

// TimezoneContains applies the Contains predicate on the "timezone" field.
func TimezoneContains(v timezone.Timezone) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldContains(FieldTimezone, vc))
}

// TimezoneHasPrefix applies the HasPrefix predicate on the "timezone" field.
func TimezoneHasPrefix(v timezone.Timezone) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldHasPrefix(FieldTimezone, vc))
}

// TimezoneHasSuffix applies the HasSuffix predicate on the "timezone" field.
func TimezoneHasSuffix(v timezone.Timezone) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldHasSuffix(FieldTimezone, vc))
}

// TimezoneIsNil applies the IsNil predicate on the "timezone" field.
func TimezoneIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldTimezone))
}

// TimezoneNotNil applies the NotNil predicate on the "timezone" field.
func TimezoneNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldTimezone))
}

// TimezoneEqualFold applies the EqualFold predicate on the "timezone" field.
func TimezoneEqualFold(v timezone.Timezone) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldEqualFold(FieldTimezone, vc))
}

// TimezoneContainsFold applies the ContainsFold predicate on the "timezone" field.
func TimezoneContainsFold(v timezone.Timezone) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldContainsFold(FieldTimezone, vc))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v currencyx.Code) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldEQ(FieldCurrency, vc))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v currencyx.Code) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldNEQ(FieldCurrency, vc))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...currencyx.Code) predicate.Customer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Customer(sql.FieldIn(FieldCurrency, v...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...currencyx.Code) predicate.Customer {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Customer(sql.FieldNotIn(FieldCurrency, v...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v currencyx.Code) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldGT(FieldCurrency, vc))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v currencyx.Code) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldGTE(FieldCurrency, vc))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v currencyx.Code) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldLT(FieldCurrency, vc))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v currencyx.Code) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldLTE(FieldCurrency, vc))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v currencyx.Code) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldContains(FieldCurrency, vc))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v currencyx.Code) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldHasPrefix(FieldCurrency, vc))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v currencyx.Code) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldHasSuffix(FieldCurrency, vc))
}

// CurrencyIsNil applies the IsNil predicate on the "currency" field.
func CurrencyIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldCurrency))
}

// CurrencyNotNil applies the NotNil predicate on the "currency" field.
func CurrencyNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldCurrency))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v currencyx.Code) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldEqualFold(FieldCurrency, vc))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v currencyx.Code) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldContainsFold(FieldCurrency, vc))
}

// HasApps applies the HasEdge predicate on the "apps" edge.
func HasApps() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppsTable, AppsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppsWith applies the HasEdge predicate on the "apps" edge with a given conditions (other predicates).
func HasAppsWith(preds ...predicate.AppCustomer) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newAppsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubjects applies the HasEdge predicate on the "subjects" edge.
func HasSubjects() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubjectsTable, SubjectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubjectsWith applies the HasEdge predicate on the "subjects" edge with a given conditions (other predicates).
func HasSubjectsWith(preds ...predicate.CustomerSubjects) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newSubjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBillingCustomerOverride applies the HasEdge predicate on the "billing_customer_override" edge.
func HasBillingCustomerOverride() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BillingCustomerOverrideTable, BillingCustomerOverrideColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBillingCustomerOverrideWith applies the HasEdge predicate on the "billing_customer_override" edge with a given conditions (other predicates).
func HasBillingCustomerOverrideWith(preds ...predicate.BillingCustomerOverride) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newBillingCustomerOverrideStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Customer) predicate.Customer {
	return predicate.Customer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Customer) predicate.Customer {
	return predicate.Customer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Customer) predicate.Customer {
	return predicate.Customer(sql.NotPredicates(p))
}
