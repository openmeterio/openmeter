// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicemanuallineconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingInvoiceManualLineConfigDelete is the builder for deleting a BillingInvoiceManualLineConfig entity.
type BillingInvoiceManualLineConfigDelete struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceManualLineConfigMutation
}

// Where appends a list predicates to the BillingInvoiceManualLineConfigDelete builder.
func (bimlcd *BillingInvoiceManualLineConfigDelete) Where(ps ...predicate.BillingInvoiceManualLineConfig) *BillingInvoiceManualLineConfigDelete {
	bimlcd.mutation.Where(ps...)
	return bimlcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bimlcd *BillingInvoiceManualLineConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bimlcd.sqlExec, bimlcd.mutation, bimlcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bimlcd *BillingInvoiceManualLineConfigDelete) ExecX(ctx context.Context) int {
	n, err := bimlcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bimlcd *BillingInvoiceManualLineConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(billinginvoicemanuallineconfig.Table, sqlgraph.NewFieldSpec(billinginvoicemanuallineconfig.FieldID, field.TypeString))
	if ps := bimlcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bimlcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bimlcd.mutation.done = true
	return affected, err
}

// BillingInvoiceManualLineConfigDeleteOne is the builder for deleting a single BillingInvoiceManualLineConfig entity.
type BillingInvoiceManualLineConfigDeleteOne struct {
	bimlcd *BillingInvoiceManualLineConfigDelete
}

// Where appends a list predicates to the BillingInvoiceManualLineConfigDelete builder.
func (bimlcdo *BillingInvoiceManualLineConfigDeleteOne) Where(ps ...predicate.BillingInvoiceManualLineConfig) *BillingInvoiceManualLineConfigDeleteOne {
	bimlcdo.bimlcd.mutation.Where(ps...)
	return bimlcdo
}

// Exec executes the deletion query.
func (bimlcdo *BillingInvoiceManualLineConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := bimlcdo.bimlcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{billinginvoicemanuallineconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bimlcdo *BillingInvoiceManualLineConfigDeleteOne) ExecX(ctx context.Context) {
	if err := bimlcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
