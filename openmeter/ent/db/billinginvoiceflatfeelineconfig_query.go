// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceflatfeelineconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingInvoiceFlatFeeLineConfigQuery is the builder for querying BillingInvoiceFlatFeeLineConfig entities.
type BillingInvoiceFlatFeeLineConfigQuery struct {
	config
	ctx        *QueryContext
	order      []billinginvoiceflatfeelineconfig.OrderOption
	inters     []Interceptor
	predicates []predicate.BillingInvoiceFlatFeeLineConfig
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BillingInvoiceFlatFeeLineConfigQuery builder.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) Where(ps ...predicate.BillingInvoiceFlatFeeLineConfig) *BillingInvoiceFlatFeeLineConfigQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) Limit(limit int) *BillingInvoiceFlatFeeLineConfigQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) Offset(offset int) *BillingInvoiceFlatFeeLineConfigQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) Unique(unique bool) *BillingInvoiceFlatFeeLineConfigQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) Order(o ...billinginvoiceflatfeelineconfig.OrderOption) *BillingInvoiceFlatFeeLineConfigQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// First returns the first BillingInvoiceFlatFeeLineConfig entity from the query.
// Returns a *NotFoundError when no BillingInvoiceFlatFeeLineConfig was found.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) First(ctx context.Context) (*BillingInvoiceFlatFeeLineConfig, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{billinginvoiceflatfeelineconfig.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) FirstX(ctx context.Context) *BillingInvoiceFlatFeeLineConfig {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BillingInvoiceFlatFeeLineConfig ID from the query.
// Returns a *NotFoundError when no BillingInvoiceFlatFeeLineConfig ID was found.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{billinginvoiceflatfeelineconfig.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) FirstIDX(ctx context.Context) string {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BillingInvoiceFlatFeeLineConfig entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BillingInvoiceFlatFeeLineConfig entity is found.
// Returns a *NotFoundError when no BillingInvoiceFlatFeeLineConfig entities are found.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) Only(ctx context.Context) (*BillingInvoiceFlatFeeLineConfig, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{billinginvoiceflatfeelineconfig.Label}
	default:
		return nil, &NotSingularError{billinginvoiceflatfeelineconfig.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) OnlyX(ctx context.Context) *BillingInvoiceFlatFeeLineConfig {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BillingInvoiceFlatFeeLineConfig ID in the query.
// Returns a *NotSingularError when more than one BillingInvoiceFlatFeeLineConfig ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{billinginvoiceflatfeelineconfig.Label}
	default:
		err = &NotSingularError{billinginvoiceflatfeelineconfig.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) OnlyIDX(ctx context.Context) string {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BillingInvoiceFlatFeeLineConfigs.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) All(ctx context.Context) ([]*BillingInvoiceFlatFeeLineConfig, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BillingInvoiceFlatFeeLineConfig, *BillingInvoiceFlatFeeLineConfigQuery]()
	return withInterceptors[[]*BillingInvoiceFlatFeeLineConfig](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) AllX(ctx context.Context) []*BillingInvoiceFlatFeeLineConfig {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BillingInvoiceFlatFeeLineConfig IDs.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) IDs(ctx context.Context) (ids []string, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(billinginvoiceflatfeelineconfig.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) IDsX(ctx context.Context) []string {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*BillingInvoiceFlatFeeLineConfigQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BillingInvoiceFlatFeeLineConfigQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) Clone() *BillingInvoiceFlatFeeLineConfigQuery {
	if _q == nil {
		return nil
	}
	return &BillingInvoiceFlatFeeLineConfigQuery{
		config:     _q.config,
		ctx:        _q.ctx.Clone(),
		order:      append([]billinginvoiceflatfeelineconfig.OrderOption{}, _q.order...),
		inters:     append([]Interceptor{}, _q.inters...),
		predicates: append([]predicate.BillingInvoiceFlatFeeLineConfig{}, _q.predicates...),
		// clone intermediate query.
		sql:  _q.sql.Clone(),
		path: _q.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BillingInvoiceFlatFeeLineConfig.Query().
//		GroupBy(billinginvoiceflatfeelineconfig.FieldNamespace).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (_q *BillingInvoiceFlatFeeLineConfigQuery) GroupBy(field string, fields ...string) *BillingInvoiceFlatFeeLineConfigGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BillingInvoiceFlatFeeLineConfigGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = billinginvoiceflatfeelineconfig.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//	}
//
//	client.BillingInvoiceFlatFeeLineConfig.Query().
//		Select(billinginvoiceflatfeelineconfig.FieldNamespace).
//		Scan(ctx, &v)
func (_q *BillingInvoiceFlatFeeLineConfigQuery) Select(fields ...string) *BillingInvoiceFlatFeeLineConfigSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &BillingInvoiceFlatFeeLineConfigSelect{BillingInvoiceFlatFeeLineConfigQuery: _q}
	sbuild.label = billinginvoiceflatfeelineconfig.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BillingInvoiceFlatFeeLineConfigSelect configured with the given aggregations.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) Aggregate(fns ...AggregateFunc) *BillingInvoiceFlatFeeLineConfigSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *BillingInvoiceFlatFeeLineConfigQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !billinginvoiceflatfeelineconfig.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *BillingInvoiceFlatFeeLineConfigQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BillingInvoiceFlatFeeLineConfig, error) {
	var (
		nodes = []*BillingInvoiceFlatFeeLineConfig{}
		_spec = _q.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BillingInvoiceFlatFeeLineConfig).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BillingInvoiceFlatFeeLineConfig{config: _q.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (_q *BillingInvoiceFlatFeeLineConfigQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *BillingInvoiceFlatFeeLineConfigQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(billinginvoiceflatfeelineconfig.Table, billinginvoiceflatfeelineconfig.Columns, sqlgraph.NewFieldSpec(billinginvoiceflatfeelineconfig.FieldID, field.TypeString))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoiceflatfeelineconfig.FieldID)
		for i := range fields {
			if fields[i] != billinginvoiceflatfeelineconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *BillingInvoiceFlatFeeLineConfigQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(billinginvoiceflatfeelineconfig.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = billinginvoiceflatfeelineconfig.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range _q.modifiers {
		m(selector)
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) ForUpdate(opts ...sql.LockOption) *BillingInvoiceFlatFeeLineConfigQuery {
	if _q.driver.Dialect() == dialect.Postgres {
		_q.Unique(false)
	}
	_q.modifiers = append(_q.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return _q
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (_q *BillingInvoiceFlatFeeLineConfigQuery) ForShare(opts ...sql.LockOption) *BillingInvoiceFlatFeeLineConfigQuery {
	if _q.driver.Dialect() == dialect.Postgres {
		_q.Unique(false)
	}
	_q.modifiers = append(_q.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return _q
}

// BillingInvoiceFlatFeeLineConfigGroupBy is the group-by builder for BillingInvoiceFlatFeeLineConfig entities.
type BillingInvoiceFlatFeeLineConfigGroupBy struct {
	selector
	build *BillingInvoiceFlatFeeLineConfigQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *BillingInvoiceFlatFeeLineConfigGroupBy) Aggregate(fns ...AggregateFunc) *BillingInvoiceFlatFeeLineConfigGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *BillingInvoiceFlatFeeLineConfigGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BillingInvoiceFlatFeeLineConfigQuery, *BillingInvoiceFlatFeeLineConfigGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *BillingInvoiceFlatFeeLineConfigGroupBy) sqlScan(ctx context.Context, root *BillingInvoiceFlatFeeLineConfigQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BillingInvoiceFlatFeeLineConfigSelect is the builder for selecting fields of BillingInvoiceFlatFeeLineConfig entities.
type BillingInvoiceFlatFeeLineConfigSelect struct {
	*BillingInvoiceFlatFeeLineConfigQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *BillingInvoiceFlatFeeLineConfigSelect) Aggregate(fns ...AggregateFunc) *BillingInvoiceFlatFeeLineConfigSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *BillingInvoiceFlatFeeLineConfigSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BillingInvoiceFlatFeeLineConfigQuery, *BillingInvoiceFlatFeeLineConfigSelect](ctx, _s.BillingInvoiceFlatFeeLineConfigQuery, _s, _s.inters, v)
}

func (_s *BillingInvoiceFlatFeeLineConfigSelect) sqlScan(ctx context.Context, root *BillingInvoiceFlatFeeLineConfigQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
