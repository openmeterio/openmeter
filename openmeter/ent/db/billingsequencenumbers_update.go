// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsequencenumbers"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingSequenceNumbersUpdate is the builder for updating BillingSequenceNumbers entities.
type BillingSequenceNumbersUpdate struct {
	config
	hooks    []Hook
	mutation *BillingSequenceNumbersMutation
}

// Where appends a list predicates to the BillingSequenceNumbersUpdate builder.
func (bsnu *BillingSequenceNumbersUpdate) Where(ps ...predicate.BillingSequenceNumbers) *BillingSequenceNumbersUpdate {
	bsnu.mutation.Where(ps...)
	return bsnu
}

// SetScope sets the "scope" field.
func (bsnu *BillingSequenceNumbersUpdate) SetScope(s string) *BillingSequenceNumbersUpdate {
	bsnu.mutation.SetScope(s)
	return bsnu
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (bsnu *BillingSequenceNumbersUpdate) SetNillableScope(s *string) *BillingSequenceNumbersUpdate {
	if s != nil {
		bsnu.SetScope(*s)
	}
	return bsnu
}

// SetLast sets the "last" field.
func (bsnu *BillingSequenceNumbersUpdate) SetLast(a alpacadecimal.Decimal) *BillingSequenceNumbersUpdate {
	bsnu.mutation.SetLast(a)
	return bsnu
}

// SetNillableLast sets the "last" field if the given value is not nil.
func (bsnu *BillingSequenceNumbersUpdate) SetNillableLast(a *alpacadecimal.Decimal) *BillingSequenceNumbersUpdate {
	if a != nil {
		bsnu.SetLast(*a)
	}
	return bsnu
}

// Mutation returns the BillingSequenceNumbersMutation object of the builder.
func (bsnu *BillingSequenceNumbersUpdate) Mutation() *BillingSequenceNumbersMutation {
	return bsnu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bsnu *BillingSequenceNumbersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bsnu.sqlSave, bsnu.mutation, bsnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsnu *BillingSequenceNumbersUpdate) SaveX(ctx context.Context) int {
	affected, err := bsnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bsnu *BillingSequenceNumbersUpdate) Exec(ctx context.Context) error {
	_, err := bsnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsnu *BillingSequenceNumbersUpdate) ExecX(ctx context.Context) {
	if err := bsnu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bsnu *BillingSequenceNumbersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(billingsequencenumbers.Table, billingsequencenumbers.Columns, sqlgraph.NewFieldSpec(billingsequencenumbers.FieldID, field.TypeInt))
	if ps := bsnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsnu.mutation.Scope(); ok {
		_spec.SetField(billingsequencenumbers.FieldScope, field.TypeString, value)
	}
	if value, ok := bsnu.mutation.Last(); ok {
		_spec.SetField(billingsequencenumbers.FieldLast, field.TypeOther, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bsnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingsequencenumbers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bsnu.mutation.done = true
	return n, nil
}

// BillingSequenceNumbersUpdateOne is the builder for updating a single BillingSequenceNumbers entity.
type BillingSequenceNumbersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingSequenceNumbersMutation
}

// SetScope sets the "scope" field.
func (bsnuo *BillingSequenceNumbersUpdateOne) SetScope(s string) *BillingSequenceNumbersUpdateOne {
	bsnuo.mutation.SetScope(s)
	return bsnuo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (bsnuo *BillingSequenceNumbersUpdateOne) SetNillableScope(s *string) *BillingSequenceNumbersUpdateOne {
	if s != nil {
		bsnuo.SetScope(*s)
	}
	return bsnuo
}

// SetLast sets the "last" field.
func (bsnuo *BillingSequenceNumbersUpdateOne) SetLast(a alpacadecimal.Decimal) *BillingSequenceNumbersUpdateOne {
	bsnuo.mutation.SetLast(a)
	return bsnuo
}

// SetNillableLast sets the "last" field if the given value is not nil.
func (bsnuo *BillingSequenceNumbersUpdateOne) SetNillableLast(a *alpacadecimal.Decimal) *BillingSequenceNumbersUpdateOne {
	if a != nil {
		bsnuo.SetLast(*a)
	}
	return bsnuo
}

// Mutation returns the BillingSequenceNumbersMutation object of the builder.
func (bsnuo *BillingSequenceNumbersUpdateOne) Mutation() *BillingSequenceNumbersMutation {
	return bsnuo.mutation
}

// Where appends a list predicates to the BillingSequenceNumbersUpdate builder.
func (bsnuo *BillingSequenceNumbersUpdateOne) Where(ps ...predicate.BillingSequenceNumbers) *BillingSequenceNumbersUpdateOne {
	bsnuo.mutation.Where(ps...)
	return bsnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bsnuo *BillingSequenceNumbersUpdateOne) Select(field string, fields ...string) *BillingSequenceNumbersUpdateOne {
	bsnuo.fields = append([]string{field}, fields...)
	return bsnuo
}

// Save executes the query and returns the updated BillingSequenceNumbers entity.
func (bsnuo *BillingSequenceNumbersUpdateOne) Save(ctx context.Context) (*BillingSequenceNumbers, error) {
	return withHooks(ctx, bsnuo.sqlSave, bsnuo.mutation, bsnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsnuo *BillingSequenceNumbersUpdateOne) SaveX(ctx context.Context) *BillingSequenceNumbers {
	node, err := bsnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bsnuo *BillingSequenceNumbersUpdateOne) Exec(ctx context.Context) error {
	_, err := bsnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsnuo *BillingSequenceNumbersUpdateOne) ExecX(ctx context.Context) {
	if err := bsnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bsnuo *BillingSequenceNumbersUpdateOne) sqlSave(ctx context.Context) (_node *BillingSequenceNumbers, err error) {
	_spec := sqlgraph.NewUpdateSpec(billingsequencenumbers.Table, billingsequencenumbers.Columns, sqlgraph.NewFieldSpec(billingsequencenumbers.FieldID, field.TypeInt))
	id, ok := bsnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingSequenceNumbers.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bsnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingsequencenumbers.FieldID)
		for _, f := range fields {
			if !billingsequencenumbers.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billingsequencenumbers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bsnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsnuo.mutation.Scope(); ok {
		_spec.SetField(billingsequencenumbers.FieldScope, field.TypeString, value)
	}
	if value, ok := bsnuo.mutation.Last(); ok {
		_spec.SetField(billingsequencenumbers.FieldLast, field.TypeOther, value)
	}
	_node = &BillingSequenceNumbers{config: bsnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bsnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingsequencenumbers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bsnuo.mutation.done = true
	return _node, nil
}
