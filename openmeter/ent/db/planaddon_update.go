// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planaddon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// PlanAddonUpdate is the builder for updating PlanAddon entities.
type PlanAddonUpdate struct {
	config
	hooks    []Hook
	mutation *PlanAddonMutation
}

// Where appends a list predicates to the PlanAddonUpdate builder.
func (pau *PlanAddonUpdate) Where(ps ...predicate.PlanAddon) *PlanAddonUpdate {
	pau.mutation.Where(ps...)
	return pau
}

// SetMetadata sets the "metadata" field.
func (pau *PlanAddonUpdate) SetMetadata(m map[string]string) *PlanAddonUpdate {
	pau.mutation.SetMetadata(m)
	return pau
}

// ClearMetadata clears the value of the "metadata" field.
func (pau *PlanAddonUpdate) ClearMetadata() *PlanAddonUpdate {
	pau.mutation.ClearMetadata()
	return pau
}

// SetAnnotations sets the "annotations" field.
func (pau *PlanAddonUpdate) SetAnnotations(m map[string]interface{}) *PlanAddonUpdate {
	pau.mutation.SetAnnotations(m)
	return pau
}

// ClearAnnotations clears the value of the "annotations" field.
func (pau *PlanAddonUpdate) ClearAnnotations() *PlanAddonUpdate {
	pau.mutation.ClearAnnotations()
	return pau
}

// SetUpdatedAt sets the "updated_at" field.
func (pau *PlanAddonUpdate) SetUpdatedAt(t time.Time) *PlanAddonUpdate {
	pau.mutation.SetUpdatedAt(t)
	return pau
}

// SetDeletedAt sets the "deleted_at" field.
func (pau *PlanAddonUpdate) SetDeletedAt(t time.Time) *PlanAddonUpdate {
	pau.mutation.SetDeletedAt(t)
	return pau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pau *PlanAddonUpdate) SetNillableDeletedAt(t *time.Time) *PlanAddonUpdate {
	if t != nil {
		pau.SetDeletedAt(*t)
	}
	return pau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pau *PlanAddonUpdate) ClearDeletedAt() *PlanAddonUpdate {
	pau.mutation.ClearDeletedAt()
	return pau
}

// SetFromPlanPhase sets the "from_plan_phase" field.
func (pau *PlanAddonUpdate) SetFromPlanPhase(s string) *PlanAddonUpdate {
	pau.mutation.SetFromPlanPhase(s)
	return pau
}

// SetNillableFromPlanPhase sets the "from_plan_phase" field if the given value is not nil.
func (pau *PlanAddonUpdate) SetNillableFromPlanPhase(s *string) *PlanAddonUpdate {
	if s != nil {
		pau.SetFromPlanPhase(*s)
	}
	return pau
}

// SetMaxQuantity sets the "max_quantity" field.
func (pau *PlanAddonUpdate) SetMaxQuantity(i int) *PlanAddonUpdate {
	pau.mutation.ResetMaxQuantity()
	pau.mutation.SetMaxQuantity(i)
	return pau
}

// SetNillableMaxQuantity sets the "max_quantity" field if the given value is not nil.
func (pau *PlanAddonUpdate) SetNillableMaxQuantity(i *int) *PlanAddonUpdate {
	if i != nil {
		pau.SetMaxQuantity(*i)
	}
	return pau
}

// AddMaxQuantity adds i to the "max_quantity" field.
func (pau *PlanAddonUpdate) AddMaxQuantity(i int) *PlanAddonUpdate {
	pau.mutation.AddMaxQuantity(i)
	return pau
}

// ClearMaxQuantity clears the value of the "max_quantity" field.
func (pau *PlanAddonUpdate) ClearMaxQuantity() *PlanAddonUpdate {
	pau.mutation.ClearMaxQuantity()
	return pau
}

// Mutation returns the PlanAddonMutation object of the builder.
func (pau *PlanAddonUpdate) Mutation() *PlanAddonMutation {
	return pau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pau *PlanAddonUpdate) Save(ctx context.Context) (int, error) {
	pau.defaults()
	return withHooks(ctx, pau.sqlSave, pau.mutation, pau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pau *PlanAddonUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *PlanAddonUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *PlanAddonUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pau *PlanAddonUpdate) defaults() {
	if _, ok := pau.mutation.UpdatedAt(); !ok {
		v := planaddon.UpdateDefaultUpdatedAt()
		pau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pau *PlanAddonUpdate) check() error {
	if pau.mutation.PlanCleared() && len(pau.mutation.PlanIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlanAddon.plan"`)
	}
	if pau.mutation.AddonCleared() && len(pau.mutation.AddonIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlanAddon.addon"`)
	}
	return nil
}

func (pau *PlanAddonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(planaddon.Table, planaddon.Columns, sqlgraph.NewFieldSpec(planaddon.FieldID, field.TypeString))
	if ps := pau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pau.mutation.Metadata(); ok {
		_spec.SetField(planaddon.FieldMetadata, field.TypeJSON, value)
	}
	if pau.mutation.MetadataCleared() {
		_spec.ClearField(planaddon.FieldMetadata, field.TypeJSON)
	}
	if value, ok := pau.mutation.Annotations(); ok {
		_spec.SetField(planaddon.FieldAnnotations, field.TypeJSON, value)
	}
	if pau.mutation.AnnotationsCleared() {
		_spec.ClearField(planaddon.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := pau.mutation.UpdatedAt(); ok {
		_spec.SetField(planaddon.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pau.mutation.DeletedAt(); ok {
		_spec.SetField(planaddon.FieldDeletedAt, field.TypeTime, value)
	}
	if pau.mutation.DeletedAtCleared() {
		_spec.ClearField(planaddon.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pau.mutation.FromPlanPhase(); ok {
		_spec.SetField(planaddon.FieldFromPlanPhase, field.TypeString, value)
	}
	if value, ok := pau.mutation.MaxQuantity(); ok {
		_spec.SetField(planaddon.FieldMaxQuantity, field.TypeInt, value)
	}
	if value, ok := pau.mutation.AddedMaxQuantity(); ok {
		_spec.AddField(planaddon.FieldMaxQuantity, field.TypeInt, value)
	}
	if pau.mutation.MaxQuantityCleared() {
		_spec.ClearField(planaddon.FieldMaxQuantity, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{planaddon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pau.mutation.done = true
	return n, nil
}

// PlanAddonUpdateOne is the builder for updating a single PlanAddon entity.
type PlanAddonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlanAddonMutation
}

// SetMetadata sets the "metadata" field.
func (pauo *PlanAddonUpdateOne) SetMetadata(m map[string]string) *PlanAddonUpdateOne {
	pauo.mutation.SetMetadata(m)
	return pauo
}

// ClearMetadata clears the value of the "metadata" field.
func (pauo *PlanAddonUpdateOne) ClearMetadata() *PlanAddonUpdateOne {
	pauo.mutation.ClearMetadata()
	return pauo
}

// SetAnnotations sets the "annotations" field.
func (pauo *PlanAddonUpdateOne) SetAnnotations(m map[string]interface{}) *PlanAddonUpdateOne {
	pauo.mutation.SetAnnotations(m)
	return pauo
}

// ClearAnnotations clears the value of the "annotations" field.
func (pauo *PlanAddonUpdateOne) ClearAnnotations() *PlanAddonUpdateOne {
	pauo.mutation.ClearAnnotations()
	return pauo
}

// SetUpdatedAt sets the "updated_at" field.
func (pauo *PlanAddonUpdateOne) SetUpdatedAt(t time.Time) *PlanAddonUpdateOne {
	pauo.mutation.SetUpdatedAt(t)
	return pauo
}

// SetDeletedAt sets the "deleted_at" field.
func (pauo *PlanAddonUpdateOne) SetDeletedAt(t time.Time) *PlanAddonUpdateOne {
	pauo.mutation.SetDeletedAt(t)
	return pauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pauo *PlanAddonUpdateOne) SetNillableDeletedAt(t *time.Time) *PlanAddonUpdateOne {
	if t != nil {
		pauo.SetDeletedAt(*t)
	}
	return pauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pauo *PlanAddonUpdateOne) ClearDeletedAt() *PlanAddonUpdateOne {
	pauo.mutation.ClearDeletedAt()
	return pauo
}

// SetFromPlanPhase sets the "from_plan_phase" field.
func (pauo *PlanAddonUpdateOne) SetFromPlanPhase(s string) *PlanAddonUpdateOne {
	pauo.mutation.SetFromPlanPhase(s)
	return pauo
}

// SetNillableFromPlanPhase sets the "from_plan_phase" field if the given value is not nil.
func (pauo *PlanAddonUpdateOne) SetNillableFromPlanPhase(s *string) *PlanAddonUpdateOne {
	if s != nil {
		pauo.SetFromPlanPhase(*s)
	}
	return pauo
}

// SetMaxQuantity sets the "max_quantity" field.
func (pauo *PlanAddonUpdateOne) SetMaxQuantity(i int) *PlanAddonUpdateOne {
	pauo.mutation.ResetMaxQuantity()
	pauo.mutation.SetMaxQuantity(i)
	return pauo
}

// SetNillableMaxQuantity sets the "max_quantity" field if the given value is not nil.
func (pauo *PlanAddonUpdateOne) SetNillableMaxQuantity(i *int) *PlanAddonUpdateOne {
	if i != nil {
		pauo.SetMaxQuantity(*i)
	}
	return pauo
}

// AddMaxQuantity adds i to the "max_quantity" field.
func (pauo *PlanAddonUpdateOne) AddMaxQuantity(i int) *PlanAddonUpdateOne {
	pauo.mutation.AddMaxQuantity(i)
	return pauo
}

// ClearMaxQuantity clears the value of the "max_quantity" field.
func (pauo *PlanAddonUpdateOne) ClearMaxQuantity() *PlanAddonUpdateOne {
	pauo.mutation.ClearMaxQuantity()
	return pauo
}

// Mutation returns the PlanAddonMutation object of the builder.
func (pauo *PlanAddonUpdateOne) Mutation() *PlanAddonMutation {
	return pauo.mutation
}

// Where appends a list predicates to the PlanAddonUpdate builder.
func (pauo *PlanAddonUpdateOne) Where(ps ...predicate.PlanAddon) *PlanAddonUpdateOne {
	pauo.mutation.Where(ps...)
	return pauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pauo *PlanAddonUpdateOne) Select(field string, fields ...string) *PlanAddonUpdateOne {
	pauo.fields = append([]string{field}, fields...)
	return pauo
}

// Save executes the query and returns the updated PlanAddon entity.
func (pauo *PlanAddonUpdateOne) Save(ctx context.Context) (*PlanAddon, error) {
	pauo.defaults()
	return withHooks(ctx, pauo.sqlSave, pauo.mutation, pauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *PlanAddonUpdateOne) SaveX(ctx context.Context) *PlanAddon {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *PlanAddonUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *PlanAddonUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pauo *PlanAddonUpdateOne) defaults() {
	if _, ok := pauo.mutation.UpdatedAt(); !ok {
		v := planaddon.UpdateDefaultUpdatedAt()
		pauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pauo *PlanAddonUpdateOne) check() error {
	if pauo.mutation.PlanCleared() && len(pauo.mutation.PlanIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlanAddon.plan"`)
	}
	if pauo.mutation.AddonCleared() && len(pauo.mutation.AddonIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlanAddon.addon"`)
	}
	return nil
}

func (pauo *PlanAddonUpdateOne) sqlSave(ctx context.Context) (_node *PlanAddon, err error) {
	if err := pauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(planaddon.Table, planaddon.Columns, sqlgraph.NewFieldSpec(planaddon.FieldID, field.TypeString))
	id, ok := pauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "PlanAddon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, planaddon.FieldID)
		for _, f := range fields {
			if !planaddon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != planaddon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pauo.mutation.Metadata(); ok {
		_spec.SetField(planaddon.FieldMetadata, field.TypeJSON, value)
	}
	if pauo.mutation.MetadataCleared() {
		_spec.ClearField(planaddon.FieldMetadata, field.TypeJSON)
	}
	if value, ok := pauo.mutation.Annotations(); ok {
		_spec.SetField(planaddon.FieldAnnotations, field.TypeJSON, value)
	}
	if pauo.mutation.AnnotationsCleared() {
		_spec.ClearField(planaddon.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := pauo.mutation.UpdatedAt(); ok {
		_spec.SetField(planaddon.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pauo.mutation.DeletedAt(); ok {
		_spec.SetField(planaddon.FieldDeletedAt, field.TypeTime, value)
	}
	if pauo.mutation.DeletedAtCleared() {
		_spec.ClearField(planaddon.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pauo.mutation.FromPlanPhase(); ok {
		_spec.SetField(planaddon.FieldFromPlanPhase, field.TypeString, value)
	}
	if value, ok := pauo.mutation.MaxQuantity(); ok {
		_spec.SetField(planaddon.FieldMaxQuantity, field.TypeInt, value)
	}
	if value, ok := pauo.mutation.AddedMaxQuantity(); ok {
		_spec.AddField(planaddon.FieldMaxQuantity, field.TypeInt, value)
	}
	if pauo.mutation.MaxQuantityCleared() {
		_spec.ClearField(planaddon.FieldMaxQuantity, field.TypeInt)
	}
	_node = &PlanAddon{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{planaddon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pauo.mutation.done = true
	return _node, nil
}
