// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planaddon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/pkg/models"
)

// PlanAddonUpdate is the builder for updating PlanAddon entities.
type PlanAddonUpdate struct {
	config
	hooks    []Hook
	mutation *PlanAddonMutation
}

// Where appends a list predicates to the PlanAddonUpdate builder.
func (_u *PlanAddonUpdate) Where(ps ...predicate.PlanAddon) *PlanAddonUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *PlanAddonUpdate) SetMetadata(v map[string]string) *PlanAddonUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *PlanAddonUpdate) ClearMetadata() *PlanAddonUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetAnnotations sets the "annotations" field.
func (_u *PlanAddonUpdate) SetAnnotations(v models.Annotations) *PlanAddonUpdate {
	_u.mutation.SetAnnotations(v)
	return _u
}

// ClearAnnotations clears the value of the "annotations" field.
func (_u *PlanAddonUpdate) ClearAnnotations() *PlanAddonUpdate {
	_u.mutation.ClearAnnotations()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PlanAddonUpdate) SetUpdatedAt(v time.Time) *PlanAddonUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *PlanAddonUpdate) SetDeletedAt(v time.Time) *PlanAddonUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *PlanAddonUpdate) SetNillableDeletedAt(v *time.Time) *PlanAddonUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *PlanAddonUpdate) ClearDeletedAt() *PlanAddonUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetFromPlanPhase sets the "from_plan_phase" field.
func (_u *PlanAddonUpdate) SetFromPlanPhase(v string) *PlanAddonUpdate {
	_u.mutation.SetFromPlanPhase(v)
	return _u
}

// SetNillableFromPlanPhase sets the "from_plan_phase" field if the given value is not nil.
func (_u *PlanAddonUpdate) SetNillableFromPlanPhase(v *string) *PlanAddonUpdate {
	if v != nil {
		_u.SetFromPlanPhase(*v)
	}
	return _u
}

// SetMaxQuantity sets the "max_quantity" field.
func (_u *PlanAddonUpdate) SetMaxQuantity(v int) *PlanAddonUpdate {
	_u.mutation.ResetMaxQuantity()
	_u.mutation.SetMaxQuantity(v)
	return _u
}

// SetNillableMaxQuantity sets the "max_quantity" field if the given value is not nil.
func (_u *PlanAddonUpdate) SetNillableMaxQuantity(v *int) *PlanAddonUpdate {
	if v != nil {
		_u.SetMaxQuantity(*v)
	}
	return _u
}

// AddMaxQuantity adds value to the "max_quantity" field.
func (_u *PlanAddonUpdate) AddMaxQuantity(v int) *PlanAddonUpdate {
	_u.mutation.AddMaxQuantity(v)
	return _u
}

// ClearMaxQuantity clears the value of the "max_quantity" field.
func (_u *PlanAddonUpdate) ClearMaxQuantity() *PlanAddonUpdate {
	_u.mutation.ClearMaxQuantity()
	return _u
}

// Mutation returns the PlanAddonMutation object of the builder.
func (_u *PlanAddonUpdate) Mutation() *PlanAddonMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PlanAddonUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PlanAddonUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PlanAddonUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PlanAddonUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PlanAddonUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := planaddon.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PlanAddonUpdate) check() error {
	if _u.mutation.PlanCleared() && len(_u.mutation.PlanIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlanAddon.plan"`)
	}
	if _u.mutation.AddonCleared() && len(_u.mutation.AddonIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlanAddon.addon"`)
	}
	return nil
}

func (_u *PlanAddonUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(planaddon.Table, planaddon.Columns, sqlgraph.NewFieldSpec(planaddon.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(planaddon.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(planaddon.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Annotations(); ok {
		_spec.SetField(planaddon.FieldAnnotations, field.TypeJSON, value)
	}
	if _u.mutation.AnnotationsCleared() {
		_spec.ClearField(planaddon.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(planaddon.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(planaddon.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(planaddon.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.FromPlanPhase(); ok {
		_spec.SetField(planaddon.FieldFromPlanPhase, field.TypeString, value)
	}
	if value, ok := _u.mutation.MaxQuantity(); ok {
		_spec.SetField(planaddon.FieldMaxQuantity, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMaxQuantity(); ok {
		_spec.AddField(planaddon.FieldMaxQuantity, field.TypeInt, value)
	}
	if _u.mutation.MaxQuantityCleared() {
		_spec.ClearField(planaddon.FieldMaxQuantity, field.TypeInt)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{planaddon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PlanAddonUpdateOne is the builder for updating a single PlanAddon entity.
type PlanAddonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlanAddonMutation
}

// SetMetadata sets the "metadata" field.
func (_u *PlanAddonUpdateOne) SetMetadata(v map[string]string) *PlanAddonUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *PlanAddonUpdateOne) ClearMetadata() *PlanAddonUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetAnnotations sets the "annotations" field.
func (_u *PlanAddonUpdateOne) SetAnnotations(v models.Annotations) *PlanAddonUpdateOne {
	_u.mutation.SetAnnotations(v)
	return _u
}

// ClearAnnotations clears the value of the "annotations" field.
func (_u *PlanAddonUpdateOne) ClearAnnotations() *PlanAddonUpdateOne {
	_u.mutation.ClearAnnotations()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PlanAddonUpdateOne) SetUpdatedAt(v time.Time) *PlanAddonUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *PlanAddonUpdateOne) SetDeletedAt(v time.Time) *PlanAddonUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *PlanAddonUpdateOne) SetNillableDeletedAt(v *time.Time) *PlanAddonUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *PlanAddonUpdateOne) ClearDeletedAt() *PlanAddonUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetFromPlanPhase sets the "from_plan_phase" field.
func (_u *PlanAddonUpdateOne) SetFromPlanPhase(v string) *PlanAddonUpdateOne {
	_u.mutation.SetFromPlanPhase(v)
	return _u
}

// SetNillableFromPlanPhase sets the "from_plan_phase" field if the given value is not nil.
func (_u *PlanAddonUpdateOne) SetNillableFromPlanPhase(v *string) *PlanAddonUpdateOne {
	if v != nil {
		_u.SetFromPlanPhase(*v)
	}
	return _u
}

// SetMaxQuantity sets the "max_quantity" field.
func (_u *PlanAddonUpdateOne) SetMaxQuantity(v int) *PlanAddonUpdateOne {
	_u.mutation.ResetMaxQuantity()
	_u.mutation.SetMaxQuantity(v)
	return _u
}

// SetNillableMaxQuantity sets the "max_quantity" field if the given value is not nil.
func (_u *PlanAddonUpdateOne) SetNillableMaxQuantity(v *int) *PlanAddonUpdateOne {
	if v != nil {
		_u.SetMaxQuantity(*v)
	}
	return _u
}

// AddMaxQuantity adds value to the "max_quantity" field.
func (_u *PlanAddonUpdateOne) AddMaxQuantity(v int) *PlanAddonUpdateOne {
	_u.mutation.AddMaxQuantity(v)
	return _u
}

// ClearMaxQuantity clears the value of the "max_quantity" field.
func (_u *PlanAddonUpdateOne) ClearMaxQuantity() *PlanAddonUpdateOne {
	_u.mutation.ClearMaxQuantity()
	return _u
}

// Mutation returns the PlanAddonMutation object of the builder.
func (_u *PlanAddonUpdateOne) Mutation() *PlanAddonMutation {
	return _u.mutation
}

// Where appends a list predicates to the PlanAddonUpdate builder.
func (_u *PlanAddonUpdateOne) Where(ps ...predicate.PlanAddon) *PlanAddonUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PlanAddonUpdateOne) Select(field string, fields ...string) *PlanAddonUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PlanAddon entity.
func (_u *PlanAddonUpdateOne) Save(ctx context.Context) (*PlanAddon, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PlanAddonUpdateOne) SaveX(ctx context.Context) *PlanAddon {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PlanAddonUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PlanAddonUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PlanAddonUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := planaddon.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PlanAddonUpdateOne) check() error {
	if _u.mutation.PlanCleared() && len(_u.mutation.PlanIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlanAddon.plan"`)
	}
	if _u.mutation.AddonCleared() && len(_u.mutation.AddonIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "PlanAddon.addon"`)
	}
	return nil
}

func (_u *PlanAddonUpdateOne) sqlSave(ctx context.Context) (_node *PlanAddon, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(planaddon.Table, planaddon.Columns, sqlgraph.NewFieldSpec(planaddon.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "PlanAddon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, planaddon.FieldID)
		for _, f := range fields {
			if !planaddon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != planaddon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(planaddon.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(planaddon.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Annotations(); ok {
		_spec.SetField(planaddon.FieldAnnotations, field.TypeJSON, value)
	}
	if _u.mutation.AnnotationsCleared() {
		_spec.ClearField(planaddon.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(planaddon.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(planaddon.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(planaddon.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.FromPlanPhase(); ok {
		_spec.SetField(planaddon.FieldFromPlanPhase, field.TypeString, value)
	}
	if value, ok := _u.mutation.MaxQuantity(); ok {
		_spec.SetField(planaddon.FieldMaxQuantity, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMaxQuantity(); ok {
		_spec.AddField(planaddon.FieldMaxQuantity, field.TypeInt, value)
	}
	if _u.mutation.MaxQuantityCleared() {
		_spec.ClearField(planaddon.FieldMaxQuantity, field.TypeInt)
	}
	_node = &PlanAddon{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{planaddon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
