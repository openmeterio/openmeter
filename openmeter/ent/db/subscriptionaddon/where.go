// Code generated by ent, DO NOT EDIT.

package subscriptionaddon

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContainsFold(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldNamespace, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldDeletedAt, v))
}

// AddonID applies equality check predicate on the "addon_id" field. It's identical to AddonIDEQ.
func AddonID(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldAddonID, v))
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldSubscriptionID, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContainsFold(FieldNamespace, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotNull(FieldDeletedAt))
}

// AddonIDEQ applies the EQ predicate on the "addon_id" field.
func AddonIDEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldAddonID, v))
}

// AddonIDNEQ applies the NEQ predicate on the "addon_id" field.
func AddonIDNEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldAddonID, v))
}

// AddonIDIn applies the In predicate on the "addon_id" field.
func AddonIDIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldAddonID, vs...))
}

// AddonIDNotIn applies the NotIn predicate on the "addon_id" field.
func AddonIDNotIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldAddonID, vs...))
}

// AddonIDGT applies the GT predicate on the "addon_id" field.
func AddonIDGT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldAddonID, v))
}

// AddonIDGTE applies the GTE predicate on the "addon_id" field.
func AddonIDGTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldAddonID, v))
}

// AddonIDLT applies the LT predicate on the "addon_id" field.
func AddonIDLT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldAddonID, v))
}

// AddonIDLTE applies the LTE predicate on the "addon_id" field.
func AddonIDLTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldAddonID, v))
}

// AddonIDContains applies the Contains predicate on the "addon_id" field.
func AddonIDContains(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContains(FieldAddonID, v))
}

// AddonIDHasPrefix applies the HasPrefix predicate on the "addon_id" field.
func AddonIDHasPrefix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasPrefix(FieldAddonID, v))
}

// AddonIDHasSuffix applies the HasSuffix predicate on the "addon_id" field.
func AddonIDHasSuffix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasSuffix(FieldAddonID, v))
}

// AddonIDEqualFold applies the EqualFold predicate on the "addon_id" field.
func AddonIDEqualFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEqualFold(FieldAddonID, v))
}

// AddonIDContainsFold applies the ContainsFold predicate on the "addon_id" field.
func AddonIDContainsFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContainsFold(FieldAddonID, v))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDGT applies the GT predicate on the "subscription_id" field.
func SubscriptionIDGT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGT(FieldSubscriptionID, v))
}

// SubscriptionIDGTE applies the GTE predicate on the "subscription_id" field.
func SubscriptionIDGTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldGTE(FieldSubscriptionID, v))
}

// SubscriptionIDLT applies the LT predicate on the "subscription_id" field.
func SubscriptionIDLT(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLT(FieldSubscriptionID, v))
}

// SubscriptionIDLTE applies the LTE predicate on the "subscription_id" field.
func SubscriptionIDLTE(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldLTE(FieldSubscriptionID, v))
}

// SubscriptionIDContains applies the Contains predicate on the "subscription_id" field.
func SubscriptionIDContains(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContains(FieldSubscriptionID, v))
}

// SubscriptionIDHasPrefix applies the HasPrefix predicate on the "subscription_id" field.
func SubscriptionIDHasPrefix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasPrefix(FieldSubscriptionID, v))
}

// SubscriptionIDHasSuffix applies the HasSuffix predicate on the "subscription_id" field.
func SubscriptionIDHasSuffix(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldHasSuffix(FieldSubscriptionID, v))
}

// SubscriptionIDEqualFold applies the EqualFold predicate on the "subscription_id" field.
func SubscriptionIDEqualFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldEqualFold(FieldSubscriptionID, v))
}

// SubscriptionIDContainsFold applies the ContainsFold predicate on the "subscription_id" field.
func SubscriptionIDContainsFold(v string) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.FieldContainsFold(FieldSubscriptionID, v))
}

// HasSubscription applies the HasEdge predicate on the "subscription" edge.
func HasSubscription() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionTable, SubscriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionWith applies the HasEdge predicate on the "subscription" edge with a given conditions (other predicates).
func HasSubscriptionWith(preds ...predicate.Subscription) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(func(s *sql.Selector) {
		step := newSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRateCards applies the HasEdge predicate on the "rate_cards" edge.
func HasRateCards() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RateCardsTable, RateCardsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRateCardsWith applies the HasEdge predicate on the "rate_cards" edge with a given conditions (other predicates).
func HasRateCardsWith(preds ...predicate.SubscriptionAddonRateCard) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(func(s *sql.Selector) {
		step := newRateCardsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuantities applies the HasEdge predicate on the "quantities" edge.
func HasQuantities() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuantitiesTable, QuantitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuantitiesWith applies the HasEdge predicate on the "quantities" edge with a given conditions (other predicates).
func HasQuantitiesWith(preds ...predicate.SubscriptionAddonQuantity) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(func(s *sql.Selector) {
		step := newQuantitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAddon applies the HasEdge predicate on the "addon" edge.
func HasAddon() predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AddonTable, AddonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddonWith applies the HasEdge predicate on the "addon" edge with a given conditions (other predicates).
func HasAddonWith(preds ...predicate.Addon) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(func(s *sql.Selector) {
		step := newAddonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubscriptionAddon) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubscriptionAddon) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubscriptionAddon) predicate.SubscriptionAddon {
	return predicate.SubscriptionAddon(sql.NotPredicates(p))
}
