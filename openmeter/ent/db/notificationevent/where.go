// Code generated by ent, DO NOT EDIT.

package notificationevent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/notification"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldContainsFold(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldNamespace, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// RuleID applies equality check predicate on the "rule_id" field. It's identical to RuleIDEQ.
func RuleID(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldRuleID, v))
}

// Payload applies equality check predicate on the "payload" field. It's identical to PayloadEQ.
func Payload(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldPayload, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldContainsFold(FieldNamespace, v))
}

// AnnotationsIsNil applies the IsNil predicate on the "annotations" field.
func AnnotationsIsNil() predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIsNull(FieldAnnotations))
}

// AnnotationsNotNil applies the NotNil predicate on the "annotations" field.
func AnnotationsNotNil() predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotNull(FieldAnnotations))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldCreatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v notification.EventType) predicate.NotificationEvent {
	vc := v
	return predicate.NotificationEvent(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v notification.EventType) predicate.NotificationEvent {
	vc := v
	return predicate.NotificationEvent(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...notification.EventType) predicate.NotificationEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NotificationEvent(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...notification.EventType) predicate.NotificationEvent {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NotificationEvent(sql.FieldNotIn(FieldType, v...))
}

// RuleIDEQ applies the EQ predicate on the "rule_id" field.
func RuleIDEQ(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldRuleID, v))
}

// RuleIDNEQ applies the NEQ predicate on the "rule_id" field.
func RuleIDNEQ(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldRuleID, v))
}

// RuleIDIn applies the In predicate on the "rule_id" field.
func RuleIDIn(vs ...string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldRuleID, vs...))
}

// RuleIDNotIn applies the NotIn predicate on the "rule_id" field.
func RuleIDNotIn(vs ...string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldRuleID, vs...))
}

// RuleIDGT applies the GT predicate on the "rule_id" field.
func RuleIDGT(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldRuleID, v))
}

// RuleIDGTE applies the GTE predicate on the "rule_id" field.
func RuleIDGTE(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldRuleID, v))
}

// RuleIDLT applies the LT predicate on the "rule_id" field.
func RuleIDLT(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldRuleID, v))
}

// RuleIDLTE applies the LTE predicate on the "rule_id" field.
func RuleIDLTE(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldRuleID, v))
}

// RuleIDContains applies the Contains predicate on the "rule_id" field.
func RuleIDContains(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldContains(FieldRuleID, v))
}

// RuleIDHasPrefix applies the HasPrefix predicate on the "rule_id" field.
func RuleIDHasPrefix(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldHasPrefix(FieldRuleID, v))
}

// RuleIDHasSuffix applies the HasSuffix predicate on the "rule_id" field.
func RuleIDHasSuffix(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldHasSuffix(FieldRuleID, v))
}

// RuleIDEqualFold applies the EqualFold predicate on the "rule_id" field.
func RuleIDEqualFold(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEqualFold(FieldRuleID, v))
}

// RuleIDContainsFold applies the ContainsFold predicate on the "rule_id" field.
func RuleIDContainsFold(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldContainsFold(FieldRuleID, v))
}

// PayloadEQ applies the EQ predicate on the "payload" field.
func PayloadEQ(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEQ(FieldPayload, v))
}

// PayloadNEQ applies the NEQ predicate on the "payload" field.
func PayloadNEQ(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNEQ(FieldPayload, v))
}

// PayloadIn applies the In predicate on the "payload" field.
func PayloadIn(vs ...string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldIn(FieldPayload, vs...))
}

// PayloadNotIn applies the NotIn predicate on the "payload" field.
func PayloadNotIn(vs ...string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldNotIn(FieldPayload, vs...))
}

// PayloadGT applies the GT predicate on the "payload" field.
func PayloadGT(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGT(FieldPayload, v))
}

// PayloadGTE applies the GTE predicate on the "payload" field.
func PayloadGTE(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldGTE(FieldPayload, v))
}

// PayloadLT applies the LT predicate on the "payload" field.
func PayloadLT(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLT(FieldPayload, v))
}

// PayloadLTE applies the LTE predicate on the "payload" field.
func PayloadLTE(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldLTE(FieldPayload, v))
}

// PayloadContains applies the Contains predicate on the "payload" field.
func PayloadContains(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldContains(FieldPayload, v))
}

// PayloadHasPrefix applies the HasPrefix predicate on the "payload" field.
func PayloadHasPrefix(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldHasPrefix(FieldPayload, v))
}

// PayloadHasSuffix applies the HasSuffix predicate on the "payload" field.
func PayloadHasSuffix(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldHasSuffix(FieldPayload, v))
}

// PayloadEqualFold applies the EqualFold predicate on the "payload" field.
func PayloadEqualFold(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldEqualFold(FieldPayload, v))
}

// PayloadContainsFold applies the ContainsFold predicate on the "payload" field.
func PayloadContainsFold(v string) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.FieldContainsFold(FieldPayload, v))
}

// HasDeliveryStatuses applies the HasEdge predicate on the "delivery_statuses" edge.
func HasDeliveryStatuses() predicate.NotificationEvent {
	return predicate.NotificationEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DeliveryStatusesTable, DeliveryStatusesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryStatusesWith applies the HasEdge predicate on the "delivery_statuses" edge with a given conditions (other predicates).
func HasDeliveryStatusesWith(preds ...predicate.NotificationEventDeliveryStatus) predicate.NotificationEvent {
	return predicate.NotificationEvent(func(s *sql.Selector) {
		step := newDeliveryStatusesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRules applies the HasEdge predicate on the "rules" edge.
func HasRules() predicate.NotificationEvent {
	return predicate.NotificationEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RulesTable, RulesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRulesWith applies the HasEdge predicate on the "rules" edge with a given conditions (other predicates).
func HasRulesWith(preds ...predicate.NotificationRule) predicate.NotificationEvent {
	return predicate.NotificationEvent(func(s *sql.Selector) {
		step := newRulesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NotificationEvent) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NotificationEvent) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NotificationEvent) predicate.NotificationEvent {
	return predicate.NotificationEvent(sql.NotPredicates(p))
}
