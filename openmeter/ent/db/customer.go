// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomeroverride"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
	"github.com/openmeterio/openmeter/pkg/currencyx"
	"github.com/openmeterio/openmeter/pkg/models"
)

// Customer is the model entity for the Customer schema.
type Customer struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// BillingAddressCountry holds the value of the "billing_address_country" field.
	BillingAddressCountry *models.CountryCode `json:"billing_address_country,omitempty"`
	// BillingAddressPostalCode holds the value of the "billing_address_postal_code" field.
	BillingAddressPostalCode *string `json:"billing_address_postal_code,omitempty"`
	// BillingAddressState holds the value of the "billing_address_state" field.
	BillingAddressState *string `json:"billing_address_state,omitempty"`
	// BillingAddressCity holds the value of the "billing_address_city" field.
	BillingAddressCity *string `json:"billing_address_city,omitempty"`
	// BillingAddressLine1 holds the value of the "billing_address_line1" field.
	BillingAddressLine1 *string `json:"billing_address_line1,omitempty"`
	// BillingAddressLine2 holds the value of the "billing_address_line2" field.
	BillingAddressLine2 *string `json:"billing_address_line2,omitempty"`
	// BillingAddressPhoneNumber holds the value of the "billing_address_phone_number" field.
	BillingAddressPhoneNumber *string `json:"billing_address_phone_number,omitempty"`
	// Annotations holds the value of the "annotations" field.
	Annotations models.Annotations `json:"annotations,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// PrimaryEmail holds the value of the "primary_email" field.
	PrimaryEmail *string `json:"primary_email,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency *currencyx.Code `json:"currency,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerQuery when eager-loading is set.
	Edges        CustomerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CustomerEdges holds the relations/edges for other nodes in the graph.
type CustomerEdges struct {
	// Apps holds the value of the apps edge.
	Apps []*AppCustomer `json:"apps,omitempty"`
	// Subjects holds the value of the subjects edge.
	Subjects []*CustomerSubjects `json:"subjects,omitempty"`
	// BillingCustomerOverride holds the value of the billing_customer_override edge.
	BillingCustomerOverride *BillingCustomerOverride `json:"billing_customer_override,omitempty"`
	// BillingInvoice holds the value of the billing_invoice edge.
	BillingInvoice []*BillingInvoice `json:"billing_invoice,omitempty"`
	// Subscription holds the value of the subscription edge.
	Subscription []*Subscription `json:"subscription,omitempty"`
	// Entitlements holds the value of the entitlements edge.
	Entitlements []*Entitlement `json:"entitlements,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// AppsOrErr returns the Apps value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) AppsOrErr() ([]*AppCustomer, error) {
	if e.loadedTypes[0] {
		return e.Apps, nil
	}
	return nil, &NotLoadedError{edge: "apps"}
}

// SubjectsOrErr returns the Subjects value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) SubjectsOrErr() ([]*CustomerSubjects, error) {
	if e.loadedTypes[1] {
		return e.Subjects, nil
	}
	return nil, &NotLoadedError{edge: "subjects"}
}

// BillingCustomerOverrideOrErr returns the BillingCustomerOverride value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEdges) BillingCustomerOverrideOrErr() (*BillingCustomerOverride, error) {
	if e.BillingCustomerOverride != nil {
		return e.BillingCustomerOverride, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: billingcustomeroverride.Label}
	}
	return nil, &NotLoadedError{edge: "billing_customer_override"}
}

// BillingInvoiceOrErr returns the BillingInvoice value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) BillingInvoiceOrErr() ([]*BillingInvoice, error) {
	if e.loadedTypes[3] {
		return e.BillingInvoice, nil
	}
	return nil, &NotLoadedError{edge: "billing_invoice"}
}

// SubscriptionOrErr returns the Subscription value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) SubscriptionOrErr() ([]*Subscription, error) {
	if e.loadedTypes[4] {
		return e.Subscription, nil
	}
	return nil, &NotLoadedError{edge: "subscription"}
}

// EntitlementsOrErr returns the Entitlements value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) EntitlementsOrErr() ([]*Entitlement, error) {
	if e.loadedTypes[5] {
		return e.Entitlements, nil
	}
	return nil, &NotLoadedError{edge: "entitlements"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Customer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customer.FieldMetadata, customer.FieldAnnotations:
			values[i] = new([]byte)
		case customer.FieldID, customer.FieldNamespace, customer.FieldName, customer.FieldDescription, customer.FieldBillingAddressCountry, customer.FieldBillingAddressPostalCode, customer.FieldBillingAddressState, customer.FieldBillingAddressCity, customer.FieldBillingAddressLine1, customer.FieldBillingAddressLine2, customer.FieldBillingAddressPhoneNumber, customer.FieldKey, customer.FieldPrimaryEmail, customer.FieldCurrency:
			values[i] = new(sql.NullString)
		case customer.FieldCreatedAt, customer.FieldUpdatedAt, customer.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Customer fields.
func (_m *Customer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customer.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case customer.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				_m.Namespace = value.String
			}
		case customer.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case customer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case customer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case customer.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case customer.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case customer.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = new(string)
				*_m.Description = value.String
			}
		case customer.FieldBillingAddressCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_address_country", values[i])
			} else if value.Valid {
				_m.BillingAddressCountry = new(models.CountryCode)
				*_m.BillingAddressCountry = models.CountryCode(value.String)
			}
		case customer.FieldBillingAddressPostalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_address_postal_code", values[i])
			} else if value.Valid {
				_m.BillingAddressPostalCode = new(string)
				*_m.BillingAddressPostalCode = value.String
			}
		case customer.FieldBillingAddressState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_address_state", values[i])
			} else if value.Valid {
				_m.BillingAddressState = new(string)
				*_m.BillingAddressState = value.String
			}
		case customer.FieldBillingAddressCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_address_city", values[i])
			} else if value.Valid {
				_m.BillingAddressCity = new(string)
				*_m.BillingAddressCity = value.String
			}
		case customer.FieldBillingAddressLine1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_address_line1", values[i])
			} else if value.Valid {
				_m.BillingAddressLine1 = new(string)
				*_m.BillingAddressLine1 = value.String
			}
		case customer.FieldBillingAddressLine2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_address_line2", values[i])
			} else if value.Valid {
				_m.BillingAddressLine2 = new(string)
				*_m.BillingAddressLine2 = value.String
			}
		case customer.FieldBillingAddressPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_address_phone_number", values[i])
			} else if value.Valid {
				_m.BillingAddressPhoneNumber = new(string)
				*_m.BillingAddressPhoneNumber = value.String
			}
		case customer.FieldAnnotations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field annotations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Annotations); err != nil {
					return fmt.Errorf("unmarshal field annotations: %w", err)
				}
			}
		case customer.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				_m.Key = value.String
			}
		case customer.FieldPrimaryEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary_email", values[i])
			} else if value.Valid {
				_m.PrimaryEmail = new(string)
				*_m.PrimaryEmail = value.String
			}
		case customer.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				_m.Currency = new(currencyx.Code)
				*_m.Currency = currencyx.Code(value.String)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Customer.
// This includes values selected through modifiers, order, etc.
func (_m *Customer) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryApps queries the "apps" edge of the Customer entity.
func (_m *Customer) QueryApps() *AppCustomerQuery {
	return NewCustomerClient(_m.config).QueryApps(_m)
}

// QuerySubjects queries the "subjects" edge of the Customer entity.
func (_m *Customer) QuerySubjects() *CustomerSubjectsQuery {
	return NewCustomerClient(_m.config).QuerySubjects(_m)
}

// QueryBillingCustomerOverride queries the "billing_customer_override" edge of the Customer entity.
func (_m *Customer) QueryBillingCustomerOverride() *BillingCustomerOverrideQuery {
	return NewCustomerClient(_m.config).QueryBillingCustomerOverride(_m)
}

// QueryBillingInvoice queries the "billing_invoice" edge of the Customer entity.
func (_m *Customer) QueryBillingInvoice() *BillingInvoiceQuery {
	return NewCustomerClient(_m.config).QueryBillingInvoice(_m)
}

// QuerySubscription queries the "subscription" edge of the Customer entity.
func (_m *Customer) QuerySubscription() *SubscriptionQuery {
	return NewCustomerClient(_m.config).QuerySubscription(_m)
}

// QueryEntitlements queries the "entitlements" edge of the Customer entity.
func (_m *Customer) QueryEntitlements() *EntitlementQuery {
	return NewCustomerClient(_m.config).QueryEntitlements(_m)
}

// Update returns a builder for updating this Customer.
// Note that you need to call Customer.Unwrap() before calling this method if this Customer
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Customer) Update() *CustomerUpdateOne {
	return NewCustomerClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Customer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Customer) Unwrap() *Customer {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("db: Customer is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Customer) String() string {
	var builder strings.Builder
	builder.WriteString("Customer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("namespace=")
	builder.WriteString(_m.Namespace)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	if v := _m.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.BillingAddressCountry; v != nil {
		builder.WriteString("billing_address_country=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.BillingAddressPostalCode; v != nil {
		builder.WriteString("billing_address_postal_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.BillingAddressState; v != nil {
		builder.WriteString("billing_address_state=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.BillingAddressCity; v != nil {
		builder.WriteString("billing_address_city=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.BillingAddressLine1; v != nil {
		builder.WriteString("billing_address_line1=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.BillingAddressLine2; v != nil {
		builder.WriteString("billing_address_line2=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.BillingAddressPhoneNumber; v != nil {
		builder.WriteString("billing_address_phone_number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("annotations=")
	builder.WriteString(fmt.Sprintf("%v", _m.Annotations))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(_m.Key)
	builder.WriteString(", ")
	if v := _m.PrimaryEmail; v != nil {
		builder.WriteString("primary_email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Currency; v != nil {
		builder.WriteString("currency=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Customers is a parsable slice of Customer.
type Customers []*Customer
