// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	billingentity "github.com/openmeterio/openmeter/openmeter/billing/entity"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceitem"
	"github.com/openmeterio/openmeter/pkg/currencyx"
)

// BillingInvoiceItemCreate is the builder for creating a BillingInvoiceItem entity.
type BillingInvoiceItemCreate struct {
	config
	mutation *BillingInvoiceItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (biic *BillingInvoiceItemCreate) SetNamespace(s string) *BillingInvoiceItemCreate {
	biic.mutation.SetNamespace(s)
	return biic
}

// SetCreatedAt sets the "created_at" field.
func (biic *BillingInvoiceItemCreate) SetCreatedAt(t time.Time) *BillingInvoiceItemCreate {
	biic.mutation.SetCreatedAt(t)
	return biic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (biic *BillingInvoiceItemCreate) SetNillableCreatedAt(t *time.Time) *BillingInvoiceItemCreate {
	if t != nil {
		biic.SetCreatedAt(*t)
	}
	return biic
}

// SetUpdatedAt sets the "updated_at" field.
func (biic *BillingInvoiceItemCreate) SetUpdatedAt(t time.Time) *BillingInvoiceItemCreate {
	biic.mutation.SetUpdatedAt(t)
	return biic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (biic *BillingInvoiceItemCreate) SetNillableUpdatedAt(t *time.Time) *BillingInvoiceItemCreate {
	if t != nil {
		biic.SetUpdatedAt(*t)
	}
	return biic
}

// SetDeletedAt sets the "deleted_at" field.
func (biic *BillingInvoiceItemCreate) SetDeletedAt(t time.Time) *BillingInvoiceItemCreate {
	biic.mutation.SetDeletedAt(t)
	return biic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biic *BillingInvoiceItemCreate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceItemCreate {
	if t != nil {
		biic.SetDeletedAt(*t)
	}
	return biic
}

// SetMetadata sets the "metadata" field.
func (biic *BillingInvoiceItemCreate) SetMetadata(m map[string]string) *BillingInvoiceItemCreate {
	biic.mutation.SetMetadata(m)
	return biic
}

// SetInvoiceID sets the "invoice_id" field.
func (biic *BillingInvoiceItemCreate) SetInvoiceID(s string) *BillingInvoiceItemCreate {
	biic.mutation.SetInvoiceID(s)
	return biic
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (biic *BillingInvoiceItemCreate) SetNillableInvoiceID(s *string) *BillingInvoiceItemCreate {
	if s != nil {
		biic.SetInvoiceID(*s)
	}
	return biic
}

// SetCustomerID sets the "customer_id" field.
func (biic *BillingInvoiceItemCreate) SetCustomerID(s string) *BillingInvoiceItemCreate {
	biic.mutation.SetCustomerID(s)
	return biic
}

// SetPeriodStart sets the "period_start" field.
func (biic *BillingInvoiceItemCreate) SetPeriodStart(t time.Time) *BillingInvoiceItemCreate {
	biic.mutation.SetPeriodStart(t)
	return biic
}

// SetPeriodEnd sets the "period_end" field.
func (biic *BillingInvoiceItemCreate) SetPeriodEnd(t time.Time) *BillingInvoiceItemCreate {
	biic.mutation.SetPeriodEnd(t)
	return biic
}

// SetInvoiceAt sets the "invoice_at" field.
func (biic *BillingInvoiceItemCreate) SetInvoiceAt(t time.Time) *BillingInvoiceItemCreate {
	biic.mutation.SetInvoiceAt(t)
	return biic
}

// SetType sets the "type" field.
func (biic *BillingInvoiceItemCreate) SetType(bit billingentity.InvoiceItemType) *BillingInvoiceItemCreate {
	biic.mutation.SetType(bit)
	return biic
}

// SetName sets the "name" field.
func (biic *BillingInvoiceItemCreate) SetName(s string) *BillingInvoiceItemCreate {
	biic.mutation.SetName(s)
	return biic
}

// SetQuantity sets the "quantity" field.
func (biic *BillingInvoiceItemCreate) SetQuantity(a alpacadecimal.Decimal) *BillingInvoiceItemCreate {
	biic.mutation.SetQuantity(a)
	return biic
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (biic *BillingInvoiceItemCreate) SetNillableQuantity(a *alpacadecimal.Decimal) *BillingInvoiceItemCreate {
	if a != nil {
		biic.SetQuantity(*a)
	}
	return biic
}

// SetUnitPrice sets the "unit_price" field.
func (biic *BillingInvoiceItemCreate) SetUnitPrice(a alpacadecimal.Decimal) *BillingInvoiceItemCreate {
	biic.mutation.SetUnitPrice(a)
	return biic
}

// SetCurrency sets the "currency" field.
func (biic *BillingInvoiceItemCreate) SetCurrency(c currencyx.Code) *BillingInvoiceItemCreate {
	biic.mutation.SetCurrency(c)
	return biic
}

// SetTaxCodeOverride sets the "tax_code_override" field.
func (biic *BillingInvoiceItemCreate) SetTaxCodeOverride(bo billingentity.TaxOverrides) *BillingInvoiceItemCreate {
	biic.mutation.SetTaxCodeOverride(bo)
	return biic
}

// SetID sets the "id" field.
func (biic *BillingInvoiceItemCreate) SetID(s string) *BillingInvoiceItemCreate {
	biic.mutation.SetID(s)
	return biic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (biic *BillingInvoiceItemCreate) SetNillableID(s *string) *BillingInvoiceItemCreate {
	if s != nil {
		biic.SetID(*s)
	}
	return biic
}

// SetBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID.
func (biic *BillingInvoiceItemCreate) SetBillingInvoiceID(id string) *BillingInvoiceItemCreate {
	biic.mutation.SetBillingInvoiceID(id)
	return biic
}

// SetNillableBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID if the given value is not nil.
func (biic *BillingInvoiceItemCreate) SetNillableBillingInvoiceID(id *string) *BillingInvoiceItemCreate {
	if id != nil {
		biic = biic.SetBillingInvoiceID(*id)
	}
	return biic
}

// SetBillingInvoice sets the "billing_invoice" edge to the BillingInvoice entity.
func (biic *BillingInvoiceItemCreate) SetBillingInvoice(b *BillingInvoice) *BillingInvoiceItemCreate {
	return biic.SetBillingInvoiceID(b.ID)
}

// Mutation returns the BillingInvoiceItemMutation object of the builder.
func (biic *BillingInvoiceItemCreate) Mutation() *BillingInvoiceItemMutation {
	return biic.mutation
}

// Save creates the BillingInvoiceItem in the database.
func (biic *BillingInvoiceItemCreate) Save(ctx context.Context) (*BillingInvoiceItem, error) {
	biic.defaults()
	return withHooks(ctx, biic.sqlSave, biic.mutation, biic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (biic *BillingInvoiceItemCreate) SaveX(ctx context.Context) *BillingInvoiceItem {
	v, err := biic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (biic *BillingInvoiceItemCreate) Exec(ctx context.Context) error {
	_, err := biic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biic *BillingInvoiceItemCreate) ExecX(ctx context.Context) {
	if err := biic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biic *BillingInvoiceItemCreate) defaults() {
	if _, ok := biic.mutation.CreatedAt(); !ok {
		v := billinginvoiceitem.DefaultCreatedAt()
		biic.mutation.SetCreatedAt(v)
	}
	if _, ok := biic.mutation.UpdatedAt(); !ok {
		v := billinginvoiceitem.DefaultUpdatedAt()
		biic.mutation.SetUpdatedAt(v)
	}
	if _, ok := biic.mutation.ID(); !ok {
		v := billinginvoiceitem.DefaultID()
		biic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biic *BillingInvoiceItemCreate) check() error {
	if _, ok := biic.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingInvoiceItem.namespace"`)}
	}
	if v, ok := biic.mutation.Namespace(); ok {
		if err := billinginvoiceitem.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceItem.namespace": %w`, err)}
		}
	}
	if _, ok := biic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingInvoiceItem.created_at"`)}
	}
	if _, ok := biic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingInvoiceItem.updated_at"`)}
	}
	if _, ok := biic.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`db: missing required field "BillingInvoiceItem.customer_id"`)}
	}
	if v, ok := biic.mutation.CustomerID(); ok {
		if err := billinginvoiceitem.CustomerIDValidator(v); err != nil {
			return &ValidationError{Name: "customer_id", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceItem.customer_id": %w`, err)}
		}
	}
	if _, ok := biic.mutation.PeriodStart(); !ok {
		return &ValidationError{Name: "period_start", err: errors.New(`db: missing required field "BillingInvoiceItem.period_start"`)}
	}
	if _, ok := biic.mutation.PeriodEnd(); !ok {
		return &ValidationError{Name: "period_end", err: errors.New(`db: missing required field "BillingInvoiceItem.period_end"`)}
	}
	if _, ok := biic.mutation.InvoiceAt(); !ok {
		return &ValidationError{Name: "invoice_at", err: errors.New(`db: missing required field "BillingInvoiceItem.invoice_at"`)}
	}
	if _, ok := biic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "BillingInvoiceItem.type"`)}
	}
	if v, ok := biic.mutation.GetType(); ok {
		if err := billinginvoiceitem.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceItem.type": %w`, err)}
		}
	}
	if _, ok := biic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "BillingInvoiceItem.name"`)}
	}
	if v, ok := biic.mutation.Name(); ok {
		if err := billinginvoiceitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceItem.name": %w`, err)}
		}
	}
	if _, ok := biic.mutation.UnitPrice(); !ok {
		return &ValidationError{Name: "unit_price", err: errors.New(`db: missing required field "BillingInvoiceItem.unit_price"`)}
	}
	if _, ok := biic.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`db: missing required field "BillingInvoiceItem.currency"`)}
	}
	if v, ok := biic.mutation.Currency(); ok {
		if err := billinginvoiceitem.CurrencyValidator(string(v)); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceItem.currency": %w`, err)}
		}
	}
	if _, ok := biic.mutation.TaxCodeOverride(); !ok {
		return &ValidationError{Name: "tax_code_override", err: errors.New(`db: missing required field "BillingInvoiceItem.tax_code_override"`)}
	}
	return nil
}

func (biic *BillingInvoiceItemCreate) sqlSave(ctx context.Context) (*BillingInvoiceItem, error) {
	if err := biic.check(); err != nil {
		return nil, err
	}
	_node, _spec := biic.createSpec()
	if err := sqlgraph.CreateNode(ctx, biic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingInvoiceItem.ID type: %T", _spec.ID.Value)
		}
	}
	biic.mutation.id = &_node.ID
	biic.mutation.done = true
	return _node, nil
}

func (biic *BillingInvoiceItemCreate) createSpec() (*BillingInvoiceItem, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingInvoiceItem{config: biic.config}
		_spec = sqlgraph.NewCreateSpec(billinginvoiceitem.Table, sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString))
	)
	_spec.OnConflict = biic.conflict
	if id, ok := biic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := biic.mutation.Namespace(); ok {
		_spec.SetField(billinginvoiceitem.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := biic.mutation.CreatedAt(); ok {
		_spec.SetField(billinginvoiceitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := biic.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoiceitem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := biic.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoiceitem.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := biic.mutation.Metadata(); ok {
		_spec.SetField(billinginvoiceitem.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := biic.mutation.CustomerID(); ok {
		_spec.SetField(billinginvoiceitem.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = value
	}
	if value, ok := biic.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoiceitem.FieldPeriodStart, field.TypeTime, value)
		_node.PeriodStart = value
	}
	if value, ok := biic.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoiceitem.FieldPeriodEnd, field.TypeTime, value)
		_node.PeriodEnd = value
	}
	if value, ok := biic.mutation.InvoiceAt(); ok {
		_spec.SetField(billinginvoiceitem.FieldInvoiceAt, field.TypeTime, value)
		_node.InvoiceAt = value
	}
	if value, ok := biic.mutation.GetType(); ok {
		_spec.SetField(billinginvoiceitem.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := biic.mutation.Name(); ok {
		_spec.SetField(billinginvoiceitem.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := biic.mutation.Quantity(); ok {
		_spec.SetField(billinginvoiceitem.FieldQuantity, field.TypeOther, value)
		_node.Quantity = &value
	}
	if value, ok := biic.mutation.UnitPrice(); ok {
		_spec.SetField(billinginvoiceitem.FieldUnitPrice, field.TypeOther, value)
		_node.UnitPrice = value
	}
	if value, ok := biic.mutation.Currency(); ok {
		_spec.SetField(billinginvoiceitem.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := biic.mutation.TaxCodeOverride(); ok {
		_spec.SetField(billinginvoiceitem.FieldTaxCodeOverride, field.TypeJSON, value)
		_node.TaxCodeOverride = value
	}
	if nodes := biic.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceitem.BillingInvoiceTable,
			Columns: []string{billinginvoiceitem.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InvoiceID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceItem.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceItemUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (biic *BillingInvoiceItemCreate) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceItemUpsertOne {
	biic.conflict = opts
	return &BillingInvoiceItemUpsertOne{
		create: biic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (biic *BillingInvoiceItemCreate) OnConflictColumns(columns ...string) *BillingInvoiceItemUpsertOne {
	biic.conflict = append(biic.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceItemUpsertOne{
		create: biic,
	}
}

type (
	// BillingInvoiceItemUpsertOne is the builder for "upsert"-ing
	//  one BillingInvoiceItem node.
	BillingInvoiceItemUpsertOne struct {
		create *BillingInvoiceItemCreate
	}

	// BillingInvoiceItemUpsert is the "OnConflict" setter.
	BillingInvoiceItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceItemUpsert) SetUpdatedAt(v time.Time) *BillingInvoiceItemUpsert {
	u.Set(billinginvoiceitem.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsert) UpdateUpdatedAt() *BillingInvoiceItemUpsert {
	u.SetExcluded(billinginvoiceitem.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceItemUpsert) SetDeletedAt(v time.Time) *BillingInvoiceItemUpsert {
	u.Set(billinginvoiceitem.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsert) UpdateDeletedAt() *BillingInvoiceItemUpsert {
	u.SetExcluded(billinginvoiceitem.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceItemUpsert) ClearDeletedAt() *BillingInvoiceItemUpsert {
	u.SetNull(billinginvoiceitem.FieldDeletedAt)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceItemUpsert) SetMetadata(v map[string]string) *BillingInvoiceItemUpsert {
	u.Set(billinginvoiceitem.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsert) UpdateMetadata() *BillingInvoiceItemUpsert {
	u.SetExcluded(billinginvoiceitem.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceItemUpsert) ClearMetadata() *BillingInvoiceItemUpsert {
	u.SetNull(billinginvoiceitem.FieldMetadata)
	return u
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceItemUpsert) SetInvoiceID(v string) *BillingInvoiceItemUpsert {
	u.Set(billinginvoiceitem.FieldInvoiceID, v)
	return u
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsert) UpdateInvoiceID() *BillingInvoiceItemUpsert {
	u.SetExcluded(billinginvoiceitem.FieldInvoiceID)
	return u
}

// ClearInvoiceID clears the value of the "invoice_id" field.
func (u *BillingInvoiceItemUpsert) ClearInvoiceID() *BillingInvoiceItemUpsert {
	u.SetNull(billinginvoiceitem.FieldInvoiceID)
	return u
}

// SetPeriodStart sets the "period_start" field.
func (u *BillingInvoiceItemUpsert) SetPeriodStart(v time.Time) *BillingInvoiceItemUpsert {
	u.Set(billinginvoiceitem.FieldPeriodStart, v)
	return u
}

// UpdatePeriodStart sets the "period_start" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsert) UpdatePeriodStart() *BillingInvoiceItemUpsert {
	u.SetExcluded(billinginvoiceitem.FieldPeriodStart)
	return u
}

// SetPeriodEnd sets the "period_end" field.
func (u *BillingInvoiceItemUpsert) SetPeriodEnd(v time.Time) *BillingInvoiceItemUpsert {
	u.Set(billinginvoiceitem.FieldPeriodEnd, v)
	return u
}

// UpdatePeriodEnd sets the "period_end" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsert) UpdatePeriodEnd() *BillingInvoiceItemUpsert {
	u.SetExcluded(billinginvoiceitem.FieldPeriodEnd)
	return u
}

// SetInvoiceAt sets the "invoice_at" field.
func (u *BillingInvoiceItemUpsert) SetInvoiceAt(v time.Time) *BillingInvoiceItemUpsert {
	u.Set(billinginvoiceitem.FieldInvoiceAt, v)
	return u
}

// UpdateInvoiceAt sets the "invoice_at" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsert) UpdateInvoiceAt() *BillingInvoiceItemUpsert {
	u.SetExcluded(billinginvoiceitem.FieldInvoiceAt)
	return u
}

// SetType sets the "type" field.
func (u *BillingInvoiceItemUpsert) SetType(v billingentity.InvoiceItemType) *BillingInvoiceItemUpsert {
	u.Set(billinginvoiceitem.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsert) UpdateType() *BillingInvoiceItemUpsert {
	u.SetExcluded(billinginvoiceitem.FieldType)
	return u
}

// SetName sets the "name" field.
func (u *BillingInvoiceItemUpsert) SetName(v string) *BillingInvoiceItemUpsert {
	u.Set(billinginvoiceitem.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsert) UpdateName() *BillingInvoiceItemUpsert {
	u.SetExcluded(billinginvoiceitem.FieldName)
	return u
}

// SetQuantity sets the "quantity" field.
func (u *BillingInvoiceItemUpsert) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceItemUpsert {
	u.Set(billinginvoiceitem.FieldQuantity, v)
	return u
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsert) UpdateQuantity() *BillingInvoiceItemUpsert {
	u.SetExcluded(billinginvoiceitem.FieldQuantity)
	return u
}

// ClearQuantity clears the value of the "quantity" field.
func (u *BillingInvoiceItemUpsert) ClearQuantity() *BillingInvoiceItemUpsert {
	u.SetNull(billinginvoiceitem.FieldQuantity)
	return u
}

// SetUnitPrice sets the "unit_price" field.
func (u *BillingInvoiceItemUpsert) SetUnitPrice(v alpacadecimal.Decimal) *BillingInvoiceItemUpsert {
	u.Set(billinginvoiceitem.FieldUnitPrice, v)
	return u
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsert) UpdateUnitPrice() *BillingInvoiceItemUpsert {
	u.SetExcluded(billinginvoiceitem.FieldUnitPrice)
	return u
}

// SetTaxCodeOverride sets the "tax_code_override" field.
func (u *BillingInvoiceItemUpsert) SetTaxCodeOverride(v billingentity.TaxOverrides) *BillingInvoiceItemUpsert {
	u.Set(billinginvoiceitem.FieldTaxCodeOverride, v)
	return u
}

// UpdateTaxCodeOverride sets the "tax_code_override" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsert) UpdateTaxCodeOverride() *BillingInvoiceItemUpsert {
	u.SetExcluded(billinginvoiceitem.FieldTaxCodeOverride)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoiceitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceItemUpsertOne) UpdateNewValues() *BillingInvoiceItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billinginvoiceitem.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billinginvoiceitem.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billinginvoiceitem.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CustomerID(); exists {
			s.SetIgnore(billinginvoiceitem.FieldCustomerID)
		}
		if _, exists := u.create.mutation.Currency(); exists {
			s.SetIgnore(billinginvoiceitem.FieldCurrency)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingInvoiceItemUpsertOne) Ignore() *BillingInvoiceItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceItemUpsertOne) DoNothing() *BillingInvoiceItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceItemCreate.OnConflict
// documentation for more info.
func (u *BillingInvoiceItemUpsertOne) Update(set func(*BillingInvoiceItemUpsert)) *BillingInvoiceItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceItemUpsertOne) SetUpdatedAt(v time.Time) *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertOne) UpdateUpdatedAt() *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceItemUpsertOne) SetDeletedAt(v time.Time) *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertOne) UpdateDeletedAt() *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceItemUpsertOne) ClearDeletedAt() *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceItemUpsertOne) SetMetadata(v map[string]string) *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertOne) UpdateMetadata() *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceItemUpsertOne) ClearMetadata() *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.ClearMetadata()
	})
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceItemUpsertOne) SetInvoiceID(v string) *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetInvoiceID(v)
	})
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertOne) UpdateInvoiceID() *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateInvoiceID()
	})
}

// ClearInvoiceID clears the value of the "invoice_id" field.
func (u *BillingInvoiceItemUpsertOne) ClearInvoiceID() *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.ClearInvoiceID()
	})
}

// SetPeriodStart sets the "period_start" field.
func (u *BillingInvoiceItemUpsertOne) SetPeriodStart(v time.Time) *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetPeriodStart(v)
	})
}

// UpdatePeriodStart sets the "period_start" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertOne) UpdatePeriodStart() *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdatePeriodStart()
	})
}

// SetPeriodEnd sets the "period_end" field.
func (u *BillingInvoiceItemUpsertOne) SetPeriodEnd(v time.Time) *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetPeriodEnd(v)
	})
}

// UpdatePeriodEnd sets the "period_end" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertOne) UpdatePeriodEnd() *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdatePeriodEnd()
	})
}

// SetInvoiceAt sets the "invoice_at" field.
func (u *BillingInvoiceItemUpsertOne) SetInvoiceAt(v time.Time) *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetInvoiceAt(v)
	})
}

// UpdateInvoiceAt sets the "invoice_at" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertOne) UpdateInvoiceAt() *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateInvoiceAt()
	})
}

// SetType sets the "type" field.
func (u *BillingInvoiceItemUpsertOne) SetType(v billingentity.InvoiceItemType) *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertOne) UpdateType() *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *BillingInvoiceItemUpsertOne) SetName(v string) *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertOne) UpdateName() *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateName()
	})
}

// SetQuantity sets the "quantity" field.
func (u *BillingInvoiceItemUpsertOne) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertOne) UpdateQuantity() *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateQuantity()
	})
}

// ClearQuantity clears the value of the "quantity" field.
func (u *BillingInvoiceItemUpsertOne) ClearQuantity() *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.ClearQuantity()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *BillingInvoiceItemUpsertOne) SetUnitPrice(v alpacadecimal.Decimal) *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertOne) UpdateUnitPrice() *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateUnitPrice()
	})
}

// SetTaxCodeOverride sets the "tax_code_override" field.
func (u *BillingInvoiceItemUpsertOne) SetTaxCodeOverride(v billingentity.TaxOverrides) *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetTaxCodeOverride(v)
	})
}

// UpdateTaxCodeOverride sets the "tax_code_override" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertOne) UpdateTaxCodeOverride() *BillingInvoiceItemUpsertOne {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateTaxCodeOverride()
	})
}

// Exec executes the query.
func (u *BillingInvoiceItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingInvoiceItemUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingInvoiceItemUpsertOne.ID is not supported by MySQL driver. Use BillingInvoiceItemUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingInvoiceItemUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingInvoiceItemCreateBulk is the builder for creating many BillingInvoiceItem entities in bulk.
type BillingInvoiceItemCreateBulk struct {
	config
	err      error
	builders []*BillingInvoiceItemCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingInvoiceItem entities in the database.
func (biicb *BillingInvoiceItemCreateBulk) Save(ctx context.Context) ([]*BillingInvoiceItem, error) {
	if biicb.err != nil {
		return nil, biicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(biicb.builders))
	nodes := make([]*BillingInvoiceItem, len(biicb.builders))
	mutators := make([]Mutator, len(biicb.builders))
	for i := range biicb.builders {
		func(i int, root context.Context) {
			builder := biicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingInvoiceItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, biicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = biicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, biicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, biicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (biicb *BillingInvoiceItemCreateBulk) SaveX(ctx context.Context) []*BillingInvoiceItem {
	v, err := biicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (biicb *BillingInvoiceItemCreateBulk) Exec(ctx context.Context) error {
	_, err := biicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biicb *BillingInvoiceItemCreateBulk) ExecX(ctx context.Context) {
	if err := biicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceItemUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (biicb *BillingInvoiceItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceItemUpsertBulk {
	biicb.conflict = opts
	return &BillingInvoiceItemUpsertBulk{
		create: biicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (biicb *BillingInvoiceItemCreateBulk) OnConflictColumns(columns ...string) *BillingInvoiceItemUpsertBulk {
	biicb.conflict = append(biicb.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceItemUpsertBulk{
		create: biicb,
	}
}

// BillingInvoiceItemUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingInvoiceItem nodes.
type BillingInvoiceItemUpsertBulk struct {
	create *BillingInvoiceItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingInvoiceItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoiceitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceItemUpsertBulk) UpdateNewValues() *BillingInvoiceItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billinginvoiceitem.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billinginvoiceitem.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billinginvoiceitem.FieldCreatedAt)
			}
			if _, exists := b.mutation.CustomerID(); exists {
				s.SetIgnore(billinginvoiceitem.FieldCustomerID)
			}
			if _, exists := b.mutation.Currency(); exists {
				s.SetIgnore(billinginvoiceitem.FieldCurrency)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingInvoiceItemUpsertBulk) Ignore() *BillingInvoiceItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceItemUpsertBulk) DoNothing() *BillingInvoiceItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceItemCreateBulk.OnConflict
// documentation for more info.
func (u *BillingInvoiceItemUpsertBulk) Update(set func(*BillingInvoiceItemUpsert)) *BillingInvoiceItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceItemUpsertBulk) SetUpdatedAt(v time.Time) *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertBulk) UpdateUpdatedAt() *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceItemUpsertBulk) SetDeletedAt(v time.Time) *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertBulk) UpdateDeletedAt() *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceItemUpsertBulk) ClearDeletedAt() *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceItemUpsertBulk) SetMetadata(v map[string]string) *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertBulk) UpdateMetadata() *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceItemUpsertBulk) ClearMetadata() *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.ClearMetadata()
	})
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceItemUpsertBulk) SetInvoiceID(v string) *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetInvoiceID(v)
	})
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertBulk) UpdateInvoiceID() *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateInvoiceID()
	})
}

// ClearInvoiceID clears the value of the "invoice_id" field.
func (u *BillingInvoiceItemUpsertBulk) ClearInvoiceID() *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.ClearInvoiceID()
	})
}

// SetPeriodStart sets the "period_start" field.
func (u *BillingInvoiceItemUpsertBulk) SetPeriodStart(v time.Time) *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetPeriodStart(v)
	})
}

// UpdatePeriodStart sets the "period_start" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertBulk) UpdatePeriodStart() *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdatePeriodStart()
	})
}

// SetPeriodEnd sets the "period_end" field.
func (u *BillingInvoiceItemUpsertBulk) SetPeriodEnd(v time.Time) *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetPeriodEnd(v)
	})
}

// UpdatePeriodEnd sets the "period_end" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertBulk) UpdatePeriodEnd() *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdatePeriodEnd()
	})
}

// SetInvoiceAt sets the "invoice_at" field.
func (u *BillingInvoiceItemUpsertBulk) SetInvoiceAt(v time.Time) *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetInvoiceAt(v)
	})
}

// UpdateInvoiceAt sets the "invoice_at" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertBulk) UpdateInvoiceAt() *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateInvoiceAt()
	})
}

// SetType sets the "type" field.
func (u *BillingInvoiceItemUpsertBulk) SetType(v billingentity.InvoiceItemType) *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertBulk) UpdateType() *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *BillingInvoiceItemUpsertBulk) SetName(v string) *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertBulk) UpdateName() *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateName()
	})
}

// SetQuantity sets the "quantity" field.
func (u *BillingInvoiceItemUpsertBulk) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertBulk) UpdateQuantity() *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateQuantity()
	})
}

// ClearQuantity clears the value of the "quantity" field.
func (u *BillingInvoiceItemUpsertBulk) ClearQuantity() *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.ClearQuantity()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *BillingInvoiceItemUpsertBulk) SetUnitPrice(v alpacadecimal.Decimal) *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertBulk) UpdateUnitPrice() *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateUnitPrice()
	})
}

// SetTaxCodeOverride sets the "tax_code_override" field.
func (u *BillingInvoiceItemUpsertBulk) SetTaxCodeOverride(v billingentity.TaxOverrides) *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.SetTaxCodeOverride(v)
	})
}

// UpdateTaxCodeOverride sets the "tax_code_override" field to the value that was provided on create.
func (u *BillingInvoiceItemUpsertBulk) UpdateTaxCodeOverride() *BillingInvoiceItemUpsertBulk {
	return u.Update(func(s *BillingInvoiceItemUpsert) {
		s.UpdateTaxCodeOverride()
	})
}

// Exec executes the query.
func (u *BillingInvoiceItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingInvoiceItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
