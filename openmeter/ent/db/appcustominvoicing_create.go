// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	dbapp "github.com/openmeterio/openmeter/openmeter/ent/db/app"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustominvoicing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustominvoicingcustomer"
)

// AppCustomInvoicingCreate is the builder for creating a AppCustomInvoicing entity.
type AppCustomInvoicingCreate struct {
	config
	mutation *AppCustomInvoicingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (_c *AppCustomInvoicingCreate) SetNamespace(v string) *AppCustomInvoicingCreate {
	_c.mutation.SetNamespace(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *AppCustomInvoicingCreate) SetCreatedAt(v time.Time) *AppCustomInvoicingCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *AppCustomInvoicingCreate) SetNillableCreatedAt(v *time.Time) *AppCustomInvoicingCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *AppCustomInvoicingCreate) SetUpdatedAt(v time.Time) *AppCustomInvoicingCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *AppCustomInvoicingCreate) SetNillableUpdatedAt(v *time.Time) *AppCustomInvoicingCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *AppCustomInvoicingCreate) SetDeletedAt(v time.Time) *AppCustomInvoicingCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *AppCustomInvoicingCreate) SetNillableDeletedAt(v *time.Time) *AppCustomInvoicingCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetEnableDraftSyncHook sets the "enable_draft_sync_hook" field.
func (_c *AppCustomInvoicingCreate) SetEnableDraftSyncHook(v bool) *AppCustomInvoicingCreate {
	_c.mutation.SetEnableDraftSyncHook(v)
	return _c
}

// SetNillableEnableDraftSyncHook sets the "enable_draft_sync_hook" field if the given value is not nil.
func (_c *AppCustomInvoicingCreate) SetNillableEnableDraftSyncHook(v *bool) *AppCustomInvoicingCreate {
	if v != nil {
		_c.SetEnableDraftSyncHook(*v)
	}
	return _c
}

// SetEnableIssuingSyncHook sets the "enable_issuing_sync_hook" field.
func (_c *AppCustomInvoicingCreate) SetEnableIssuingSyncHook(v bool) *AppCustomInvoicingCreate {
	_c.mutation.SetEnableIssuingSyncHook(v)
	return _c
}

// SetNillableEnableIssuingSyncHook sets the "enable_issuing_sync_hook" field if the given value is not nil.
func (_c *AppCustomInvoicingCreate) SetNillableEnableIssuingSyncHook(v *bool) *AppCustomInvoicingCreate {
	if v != nil {
		_c.SetEnableIssuingSyncHook(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *AppCustomInvoicingCreate) SetID(v string) *AppCustomInvoicingCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *AppCustomInvoicingCreate) SetNillableID(v *string) *AppCustomInvoicingCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddCustomerAppIDs adds the "customer_apps" edge to the AppCustomInvoicingCustomer entity by IDs.
func (_c *AppCustomInvoicingCreate) AddCustomerAppIDs(ids ...int) *AppCustomInvoicingCreate {
	_c.mutation.AddCustomerAppIDs(ids...)
	return _c
}

// AddCustomerApps adds the "customer_apps" edges to the AppCustomInvoicingCustomer entity.
func (_c *AppCustomInvoicingCreate) AddCustomerApps(v ...*AppCustomInvoicingCustomer) *AppCustomInvoicingCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCustomerAppIDs(ids...)
}

// SetAppID sets the "app" edge to the App entity by ID.
func (_c *AppCustomInvoicingCreate) SetAppID(id string) *AppCustomInvoicingCreate {
	_c.mutation.SetAppID(id)
	return _c
}

// SetNillableAppID sets the "app" edge to the App entity by ID if the given value is not nil.
func (_c *AppCustomInvoicingCreate) SetNillableAppID(id *string) *AppCustomInvoicingCreate {
	if id != nil {
		_c = _c.SetAppID(*id)
	}
	return _c
}

// SetApp sets the "app" edge to the App entity.
func (_c *AppCustomInvoicingCreate) SetApp(v *App) *AppCustomInvoicingCreate {
	return _c.SetAppID(v.ID)
}

// Mutation returns the AppCustomInvoicingMutation object of the builder.
func (_c *AppCustomInvoicingCreate) Mutation() *AppCustomInvoicingMutation {
	return _c.mutation
}

// Save creates the AppCustomInvoicing in the database.
func (_c *AppCustomInvoicingCreate) Save(ctx context.Context) (*AppCustomInvoicing, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AppCustomInvoicingCreate) SaveX(ctx context.Context) *AppCustomInvoicing {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AppCustomInvoicingCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AppCustomInvoicingCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AppCustomInvoicingCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := appcustominvoicing.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := appcustominvoicing.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.EnableDraftSyncHook(); !ok {
		v := appcustominvoicing.DefaultEnableDraftSyncHook
		_c.mutation.SetEnableDraftSyncHook(v)
	}
	if _, ok := _c.mutation.EnableIssuingSyncHook(); !ok {
		v := appcustominvoicing.DefaultEnableIssuingSyncHook
		_c.mutation.SetEnableIssuingSyncHook(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := appcustominvoicing.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AppCustomInvoicingCreate) check() error {
	if _, ok := _c.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "AppCustomInvoicing.namespace"`)}
	}
	if v, ok := _c.mutation.Namespace(); ok {
		if err := appcustominvoicing.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "AppCustomInvoicing.namespace": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "AppCustomInvoicing.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "AppCustomInvoicing.updated_at"`)}
	}
	if _, ok := _c.mutation.EnableDraftSyncHook(); !ok {
		return &ValidationError{Name: "enable_draft_sync_hook", err: errors.New(`db: missing required field "AppCustomInvoicing.enable_draft_sync_hook"`)}
	}
	if _, ok := _c.mutation.EnableIssuingSyncHook(); !ok {
		return &ValidationError{Name: "enable_issuing_sync_hook", err: errors.New(`db: missing required field "AppCustomInvoicing.enable_issuing_sync_hook"`)}
	}
	return nil
}

func (_c *AppCustomInvoicingCreate) sqlSave(ctx context.Context) (*AppCustomInvoicing, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AppCustomInvoicing.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AppCustomInvoicingCreate) createSpec() (*AppCustomInvoicing, *sqlgraph.CreateSpec) {
	var (
		_node = &AppCustomInvoicing{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(appcustominvoicing.Table, sqlgraph.NewFieldSpec(appcustominvoicing.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Namespace(); ok {
		_spec.SetField(appcustominvoicing.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(appcustominvoicing.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(appcustominvoicing.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(appcustominvoicing.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.EnableDraftSyncHook(); ok {
		_spec.SetField(appcustominvoicing.FieldEnableDraftSyncHook, field.TypeBool, value)
		_node.EnableDraftSyncHook = value
	}
	if value, ok := _c.mutation.EnableIssuingSyncHook(); ok {
		_spec.SetField(appcustominvoicing.FieldEnableIssuingSyncHook, field.TypeBool, value)
		_node.EnableIssuingSyncHook = value
	}
	if nodes := _c.mutation.CustomerAppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appcustominvoicing.CustomerAppsTable,
			Columns: []string{appcustominvoicing.CustomerAppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustominvoicingcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appcustominvoicing.AppTable,
			Columns: []string{appcustominvoicing.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dbapp.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppCustomInvoicing.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppCustomInvoicingUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *AppCustomInvoicingCreate) OnConflict(opts ...sql.ConflictOption) *AppCustomInvoicingUpsertOne {
	_c.conflict = opts
	return &AppCustomInvoicingUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppCustomInvoicing.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AppCustomInvoicingCreate) OnConflictColumns(columns ...string) *AppCustomInvoicingUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AppCustomInvoicingUpsertOne{
		create: _c,
	}
}

type (
	// AppCustomInvoicingUpsertOne is the builder for "upsert"-ing
	//  one AppCustomInvoicing node.
	AppCustomInvoicingUpsertOne struct {
		create *AppCustomInvoicingCreate
	}

	// AppCustomInvoicingUpsert is the "OnConflict" setter.
	AppCustomInvoicingUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AppCustomInvoicingUpsert) SetUpdatedAt(v time.Time) *AppCustomInvoicingUpsert {
	u.Set(appcustominvoicing.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppCustomInvoicingUpsert) UpdateUpdatedAt() *AppCustomInvoicingUpsert {
	u.SetExcluded(appcustominvoicing.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppCustomInvoicingUpsert) SetDeletedAt(v time.Time) *AppCustomInvoicingUpsert {
	u.Set(appcustominvoicing.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppCustomInvoicingUpsert) UpdateDeletedAt() *AppCustomInvoicingUpsert {
	u.SetExcluded(appcustominvoicing.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AppCustomInvoicingUpsert) ClearDeletedAt() *AppCustomInvoicingUpsert {
	u.SetNull(appcustominvoicing.FieldDeletedAt)
	return u
}

// SetEnableDraftSyncHook sets the "enable_draft_sync_hook" field.
func (u *AppCustomInvoicingUpsert) SetEnableDraftSyncHook(v bool) *AppCustomInvoicingUpsert {
	u.Set(appcustominvoicing.FieldEnableDraftSyncHook, v)
	return u
}

// UpdateEnableDraftSyncHook sets the "enable_draft_sync_hook" field to the value that was provided on create.
func (u *AppCustomInvoicingUpsert) UpdateEnableDraftSyncHook() *AppCustomInvoicingUpsert {
	u.SetExcluded(appcustominvoicing.FieldEnableDraftSyncHook)
	return u
}

// SetEnableIssuingSyncHook sets the "enable_issuing_sync_hook" field.
func (u *AppCustomInvoicingUpsert) SetEnableIssuingSyncHook(v bool) *AppCustomInvoicingUpsert {
	u.Set(appcustominvoicing.FieldEnableIssuingSyncHook, v)
	return u
}

// UpdateEnableIssuingSyncHook sets the "enable_issuing_sync_hook" field to the value that was provided on create.
func (u *AppCustomInvoicingUpsert) UpdateEnableIssuingSyncHook() *AppCustomInvoicingUpsert {
	u.SetExcluded(appcustominvoicing.FieldEnableIssuingSyncHook)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppCustomInvoicing.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appcustominvoicing.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppCustomInvoicingUpsertOne) UpdateNewValues() *AppCustomInvoicingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appcustominvoicing.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(appcustominvoicing.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(appcustominvoicing.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppCustomInvoicing.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppCustomInvoicingUpsertOne) Ignore() *AppCustomInvoicingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppCustomInvoicingUpsertOne) DoNothing() *AppCustomInvoicingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCustomInvoicingCreate.OnConflict
// documentation for more info.
func (u *AppCustomInvoicingUpsertOne) Update(set func(*AppCustomInvoicingUpsert)) *AppCustomInvoicingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppCustomInvoicingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppCustomInvoicingUpsertOne) SetUpdatedAt(v time.Time) *AppCustomInvoicingUpsertOne {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppCustomInvoicingUpsertOne) UpdateUpdatedAt() *AppCustomInvoicingUpsertOne {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppCustomInvoicingUpsertOne) SetDeletedAt(v time.Time) *AppCustomInvoicingUpsertOne {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppCustomInvoicingUpsertOne) UpdateDeletedAt() *AppCustomInvoicingUpsertOne {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AppCustomInvoicingUpsertOne) ClearDeletedAt() *AppCustomInvoicingUpsertOne {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.ClearDeletedAt()
	})
}

// SetEnableDraftSyncHook sets the "enable_draft_sync_hook" field.
func (u *AppCustomInvoicingUpsertOne) SetEnableDraftSyncHook(v bool) *AppCustomInvoicingUpsertOne {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.SetEnableDraftSyncHook(v)
	})
}

// UpdateEnableDraftSyncHook sets the "enable_draft_sync_hook" field to the value that was provided on create.
func (u *AppCustomInvoicingUpsertOne) UpdateEnableDraftSyncHook() *AppCustomInvoicingUpsertOne {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.UpdateEnableDraftSyncHook()
	})
}

// SetEnableIssuingSyncHook sets the "enable_issuing_sync_hook" field.
func (u *AppCustomInvoicingUpsertOne) SetEnableIssuingSyncHook(v bool) *AppCustomInvoicingUpsertOne {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.SetEnableIssuingSyncHook(v)
	})
}

// UpdateEnableIssuingSyncHook sets the "enable_issuing_sync_hook" field to the value that was provided on create.
func (u *AppCustomInvoicingUpsertOne) UpdateEnableIssuingSyncHook() *AppCustomInvoicingUpsertOne {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.UpdateEnableIssuingSyncHook()
	})
}

// Exec executes the query.
func (u *AppCustomInvoicingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for AppCustomInvoicingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppCustomInvoicingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppCustomInvoicingUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: AppCustomInvoicingUpsertOne.ID is not supported by MySQL driver. Use AppCustomInvoicingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppCustomInvoicingUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppCustomInvoicingCreateBulk is the builder for creating many AppCustomInvoicing entities in bulk.
type AppCustomInvoicingCreateBulk struct {
	config
	err      error
	builders []*AppCustomInvoicingCreate
	conflict []sql.ConflictOption
}

// Save creates the AppCustomInvoicing entities in the database.
func (_c *AppCustomInvoicingCreateBulk) Save(ctx context.Context) ([]*AppCustomInvoicing, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*AppCustomInvoicing, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppCustomInvoicingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AppCustomInvoicingCreateBulk) SaveX(ctx context.Context) []*AppCustomInvoicing {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AppCustomInvoicingCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AppCustomInvoicingCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppCustomInvoicing.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppCustomInvoicingUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *AppCustomInvoicingCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppCustomInvoicingUpsertBulk {
	_c.conflict = opts
	return &AppCustomInvoicingUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppCustomInvoicing.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AppCustomInvoicingCreateBulk) OnConflictColumns(columns ...string) *AppCustomInvoicingUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AppCustomInvoicingUpsertBulk{
		create: _c,
	}
}

// AppCustomInvoicingUpsertBulk is the builder for "upsert"-ing
// a bulk of AppCustomInvoicing nodes.
type AppCustomInvoicingUpsertBulk struct {
	create *AppCustomInvoicingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppCustomInvoicing.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appcustominvoicing.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppCustomInvoicingUpsertBulk) UpdateNewValues() *AppCustomInvoicingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appcustominvoicing.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(appcustominvoicing.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(appcustominvoicing.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppCustomInvoicing.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppCustomInvoicingUpsertBulk) Ignore() *AppCustomInvoicingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppCustomInvoicingUpsertBulk) DoNothing() *AppCustomInvoicingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCustomInvoicingCreateBulk.OnConflict
// documentation for more info.
func (u *AppCustomInvoicingUpsertBulk) Update(set func(*AppCustomInvoicingUpsert)) *AppCustomInvoicingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppCustomInvoicingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppCustomInvoicingUpsertBulk) SetUpdatedAt(v time.Time) *AppCustomInvoicingUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppCustomInvoicingUpsertBulk) UpdateUpdatedAt() *AppCustomInvoicingUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppCustomInvoicingUpsertBulk) SetDeletedAt(v time.Time) *AppCustomInvoicingUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppCustomInvoicingUpsertBulk) UpdateDeletedAt() *AppCustomInvoicingUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AppCustomInvoicingUpsertBulk) ClearDeletedAt() *AppCustomInvoicingUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.ClearDeletedAt()
	})
}

// SetEnableDraftSyncHook sets the "enable_draft_sync_hook" field.
func (u *AppCustomInvoicingUpsertBulk) SetEnableDraftSyncHook(v bool) *AppCustomInvoicingUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.SetEnableDraftSyncHook(v)
	})
}

// UpdateEnableDraftSyncHook sets the "enable_draft_sync_hook" field to the value that was provided on create.
func (u *AppCustomInvoicingUpsertBulk) UpdateEnableDraftSyncHook() *AppCustomInvoicingUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.UpdateEnableDraftSyncHook()
	})
}

// SetEnableIssuingSyncHook sets the "enable_issuing_sync_hook" field.
func (u *AppCustomInvoicingUpsertBulk) SetEnableIssuingSyncHook(v bool) *AppCustomInvoicingUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.SetEnableIssuingSyncHook(v)
	})
}

// UpdateEnableIssuingSyncHook sets the "enable_issuing_sync_hook" field to the value that was provided on create.
func (u *AppCustomInvoicingUpsertBulk) UpdateEnableIssuingSyncHook() *AppCustomInvoicingUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingUpsert) {
		s.UpdateEnableIssuingSyncHook()
	})
}

// Exec executes the query.
func (u *AppCustomInvoicingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the AppCustomInvoicingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for AppCustomInvoicingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppCustomInvoicingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
