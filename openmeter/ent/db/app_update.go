// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	appentitybase "github.com/openmeterio/openmeter/openmeter/app/entity/base"
	"github.com/openmeterio/openmeter/openmeter/ent/db/app"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustomer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingprofile"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// AppUpdate is the builder for updating App entities.
type AppUpdate struct {
	config
	hooks    []Hook
	mutation *AppMutation
}

// Where appends a list predicates to the AppUpdate builder.
func (au *AppUpdate) Where(ps ...predicate.App) *AppUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetMetadata sets the "metadata" field.
func (au *AppUpdate) SetMetadata(m map[string]string) *AppUpdate {
	au.mutation.SetMetadata(m)
	return au
}

// ClearMetadata clears the value of the "metadata" field.
func (au *AppUpdate) ClearMetadata() *AppUpdate {
	au.mutation.ClearMetadata()
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AppUpdate) SetUpdatedAt(t time.Time) *AppUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AppUpdate) SetDeletedAt(t time.Time) *AppUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AppUpdate) SetNillableDeletedAt(t *time.Time) *AppUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AppUpdate) ClearDeletedAt() *AppUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetName sets the "name" field.
func (au *AppUpdate) SetName(s string) *AppUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AppUpdate) SetNillableName(s *string) *AppUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *AppUpdate) SetDescription(s string) *AppUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AppUpdate) SetNillableDescription(s *string) *AppUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AppUpdate) ClearDescription() *AppUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetStatus sets the "status" field.
func (au *AppUpdate) SetStatus(as appentitybase.AppStatus) *AppUpdate {
	au.mutation.SetStatus(as)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AppUpdate) SetNillableStatus(as *appentitybase.AppStatus) *AppUpdate {
	if as != nil {
		au.SetStatus(*as)
	}
	return au
}

// SetIsDefault sets the "is_default" field.
func (au *AppUpdate) SetIsDefault(b bool) *AppUpdate {
	au.mutation.SetIsDefault(b)
	return au
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (au *AppUpdate) SetNillableIsDefault(b *bool) *AppUpdate {
	if b != nil {
		au.SetIsDefault(*b)
	}
	return au
}

// AddCustomerAppIDs adds the "customer_apps" edge to the AppCustomer entity by IDs.
func (au *AppUpdate) AddCustomerAppIDs(ids ...int) *AppUpdate {
	au.mutation.AddCustomerAppIDs(ids...)
	return au
}

// AddCustomerApps adds the "customer_apps" edges to the AppCustomer entity.
func (au *AppUpdate) AddCustomerApps(a ...*AppCustomer) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddCustomerAppIDs(ids...)
}

// AddTaxAppIDs adds the "tax_app" edge to the BillingProfile entity by IDs.
func (au *AppUpdate) AddTaxAppIDs(ids ...string) *AppUpdate {
	au.mutation.AddTaxAppIDs(ids...)
	return au
}

// AddTaxApp adds the "tax_app" edges to the BillingProfile entity.
func (au *AppUpdate) AddTaxApp(b ...*BillingProfile) *AppUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return au.AddTaxAppIDs(ids...)
}

// AddInvoicingAppIDs adds the "invoicing_app" edge to the BillingProfile entity by IDs.
func (au *AppUpdate) AddInvoicingAppIDs(ids ...string) *AppUpdate {
	au.mutation.AddInvoicingAppIDs(ids...)
	return au
}

// AddInvoicingApp adds the "invoicing_app" edges to the BillingProfile entity.
func (au *AppUpdate) AddInvoicingApp(b ...*BillingProfile) *AppUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return au.AddInvoicingAppIDs(ids...)
}

// AddPaymentAppIDs adds the "payment_app" edge to the BillingProfile entity by IDs.
func (au *AppUpdate) AddPaymentAppIDs(ids ...string) *AppUpdate {
	au.mutation.AddPaymentAppIDs(ids...)
	return au
}

// AddPaymentApp adds the "payment_app" edges to the BillingProfile entity.
func (au *AppUpdate) AddPaymentApp(b ...*BillingProfile) *AppUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return au.AddPaymentAppIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (au *AppUpdate) Mutation() *AppMutation {
	return au.mutation
}

// ClearCustomerApps clears all "customer_apps" edges to the AppCustomer entity.
func (au *AppUpdate) ClearCustomerApps() *AppUpdate {
	au.mutation.ClearCustomerApps()
	return au
}

// RemoveCustomerAppIDs removes the "customer_apps" edge to AppCustomer entities by IDs.
func (au *AppUpdate) RemoveCustomerAppIDs(ids ...int) *AppUpdate {
	au.mutation.RemoveCustomerAppIDs(ids...)
	return au
}

// RemoveCustomerApps removes "customer_apps" edges to AppCustomer entities.
func (au *AppUpdate) RemoveCustomerApps(a ...*AppCustomer) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveCustomerAppIDs(ids...)
}

// ClearTaxApp clears all "tax_app" edges to the BillingProfile entity.
func (au *AppUpdate) ClearTaxApp() *AppUpdate {
	au.mutation.ClearTaxApp()
	return au
}

// RemoveTaxAppIDs removes the "tax_app" edge to BillingProfile entities by IDs.
func (au *AppUpdate) RemoveTaxAppIDs(ids ...string) *AppUpdate {
	au.mutation.RemoveTaxAppIDs(ids...)
	return au
}

// RemoveTaxApp removes "tax_app" edges to BillingProfile entities.
func (au *AppUpdate) RemoveTaxApp(b ...*BillingProfile) *AppUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return au.RemoveTaxAppIDs(ids...)
}

// ClearInvoicingApp clears all "invoicing_app" edges to the BillingProfile entity.
func (au *AppUpdate) ClearInvoicingApp() *AppUpdate {
	au.mutation.ClearInvoicingApp()
	return au
}

// RemoveInvoicingAppIDs removes the "invoicing_app" edge to BillingProfile entities by IDs.
func (au *AppUpdate) RemoveInvoicingAppIDs(ids ...string) *AppUpdate {
	au.mutation.RemoveInvoicingAppIDs(ids...)
	return au
}

// RemoveInvoicingApp removes "invoicing_app" edges to BillingProfile entities.
func (au *AppUpdate) RemoveInvoicingApp(b ...*BillingProfile) *AppUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return au.RemoveInvoicingAppIDs(ids...)
}

// ClearPaymentApp clears all "payment_app" edges to the BillingProfile entity.
func (au *AppUpdate) ClearPaymentApp() *AppUpdate {
	au.mutation.ClearPaymentApp()
	return au
}

// RemovePaymentAppIDs removes the "payment_app" edge to BillingProfile entities by IDs.
func (au *AppUpdate) RemovePaymentAppIDs(ids ...string) *AppUpdate {
	au.mutation.RemovePaymentAppIDs(ids...)
	return au
}

// RemovePaymentApp removes "payment_app" edges to BillingProfile entities.
func (au *AppUpdate) RemovePaymentApp(b ...*BillingProfile) *AppUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return au.RemovePaymentAppIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AppUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AppUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := app.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *AppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(app.Table, app.Columns, sqlgraph.NewFieldSpec(app.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Metadata(); ok {
		_spec.SetField(app.FieldMetadata, field.TypeJSON, value)
	}
	if au.mutation.MetadataCleared() {
		_spec.ClearField(app.FieldMetadata, field.TypeJSON)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(app.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(app.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(app.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(app.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(app.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(app.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(app.FieldStatus, field.TypeString, value)
	}
	if value, ok := au.mutation.IsDefault(); ok {
		_spec.SetField(app.FieldIsDefault, field.TypeBool, value)
	}
	if au.mutation.CustomerAppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.CustomerAppsTable,
			Columns: []string{app.CustomerAppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCustomerAppsIDs(); len(nodes) > 0 && !au.mutation.CustomerAppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.CustomerAppsTable,
			Columns: []string{app.CustomerAppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CustomerAppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.CustomerAppsTable,
			Columns: []string{app.CustomerAppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TaxAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.TaxAppTable,
			Columns: []string{app.TaxAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTaxAppIDs(); len(nodes) > 0 && !au.mutation.TaxAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.TaxAppTable,
			Columns: []string{app.TaxAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TaxAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.TaxAppTable,
			Columns: []string{app.TaxAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.InvoicingAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.InvoicingAppTable,
			Columns: []string{app.InvoicingAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedInvoicingAppIDs(); len(nodes) > 0 && !au.mutation.InvoicingAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.InvoicingAppTable,
			Columns: []string{app.InvoicingAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.InvoicingAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.InvoicingAppTable,
			Columns: []string{app.InvoicingAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PaymentAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PaymentAppTable,
			Columns: []string{app.PaymentAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPaymentAppIDs(); len(nodes) > 0 && !au.mutation.PaymentAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PaymentAppTable,
			Columns: []string{app.PaymentAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PaymentAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PaymentAppTable,
			Columns: []string{app.PaymentAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AppUpdateOne is the builder for updating a single App entity.
type AppUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppMutation
}

// SetMetadata sets the "metadata" field.
func (auo *AppUpdateOne) SetMetadata(m map[string]string) *AppUpdateOne {
	auo.mutation.SetMetadata(m)
	return auo
}

// ClearMetadata clears the value of the "metadata" field.
func (auo *AppUpdateOne) ClearMetadata() *AppUpdateOne {
	auo.mutation.ClearMetadata()
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AppUpdateOne) SetUpdatedAt(t time.Time) *AppUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AppUpdateOne) SetDeletedAt(t time.Time) *AppUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableDeletedAt(t *time.Time) *AppUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AppUpdateOne) ClearDeletedAt() *AppUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetName sets the "name" field.
func (auo *AppUpdateOne) SetName(s string) *AppUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableName(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *AppUpdateOne) SetDescription(s string) *AppUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableDescription(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AppUpdateOne) ClearDescription() *AppUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetStatus sets the "status" field.
func (auo *AppUpdateOne) SetStatus(as appentitybase.AppStatus) *AppUpdateOne {
	auo.mutation.SetStatus(as)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableStatus(as *appentitybase.AppStatus) *AppUpdateOne {
	if as != nil {
		auo.SetStatus(*as)
	}
	return auo
}

// SetIsDefault sets the "is_default" field.
func (auo *AppUpdateOne) SetIsDefault(b bool) *AppUpdateOne {
	auo.mutation.SetIsDefault(b)
	return auo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableIsDefault(b *bool) *AppUpdateOne {
	if b != nil {
		auo.SetIsDefault(*b)
	}
	return auo
}

// AddCustomerAppIDs adds the "customer_apps" edge to the AppCustomer entity by IDs.
func (auo *AppUpdateOne) AddCustomerAppIDs(ids ...int) *AppUpdateOne {
	auo.mutation.AddCustomerAppIDs(ids...)
	return auo
}

// AddCustomerApps adds the "customer_apps" edges to the AppCustomer entity.
func (auo *AppUpdateOne) AddCustomerApps(a ...*AppCustomer) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddCustomerAppIDs(ids...)
}

// AddTaxAppIDs adds the "tax_app" edge to the BillingProfile entity by IDs.
func (auo *AppUpdateOne) AddTaxAppIDs(ids ...string) *AppUpdateOne {
	auo.mutation.AddTaxAppIDs(ids...)
	return auo
}

// AddTaxApp adds the "tax_app" edges to the BillingProfile entity.
func (auo *AppUpdateOne) AddTaxApp(b ...*BillingProfile) *AppUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return auo.AddTaxAppIDs(ids...)
}

// AddInvoicingAppIDs adds the "invoicing_app" edge to the BillingProfile entity by IDs.
func (auo *AppUpdateOne) AddInvoicingAppIDs(ids ...string) *AppUpdateOne {
	auo.mutation.AddInvoicingAppIDs(ids...)
	return auo
}

// AddInvoicingApp adds the "invoicing_app" edges to the BillingProfile entity.
func (auo *AppUpdateOne) AddInvoicingApp(b ...*BillingProfile) *AppUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return auo.AddInvoicingAppIDs(ids...)
}

// AddPaymentAppIDs adds the "payment_app" edge to the BillingProfile entity by IDs.
func (auo *AppUpdateOne) AddPaymentAppIDs(ids ...string) *AppUpdateOne {
	auo.mutation.AddPaymentAppIDs(ids...)
	return auo
}

// AddPaymentApp adds the "payment_app" edges to the BillingProfile entity.
func (auo *AppUpdateOne) AddPaymentApp(b ...*BillingProfile) *AppUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return auo.AddPaymentAppIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (auo *AppUpdateOne) Mutation() *AppMutation {
	return auo.mutation
}

// ClearCustomerApps clears all "customer_apps" edges to the AppCustomer entity.
func (auo *AppUpdateOne) ClearCustomerApps() *AppUpdateOne {
	auo.mutation.ClearCustomerApps()
	return auo
}

// RemoveCustomerAppIDs removes the "customer_apps" edge to AppCustomer entities by IDs.
func (auo *AppUpdateOne) RemoveCustomerAppIDs(ids ...int) *AppUpdateOne {
	auo.mutation.RemoveCustomerAppIDs(ids...)
	return auo
}

// RemoveCustomerApps removes "customer_apps" edges to AppCustomer entities.
func (auo *AppUpdateOne) RemoveCustomerApps(a ...*AppCustomer) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveCustomerAppIDs(ids...)
}

// ClearTaxApp clears all "tax_app" edges to the BillingProfile entity.
func (auo *AppUpdateOne) ClearTaxApp() *AppUpdateOne {
	auo.mutation.ClearTaxApp()
	return auo
}

// RemoveTaxAppIDs removes the "tax_app" edge to BillingProfile entities by IDs.
func (auo *AppUpdateOne) RemoveTaxAppIDs(ids ...string) *AppUpdateOne {
	auo.mutation.RemoveTaxAppIDs(ids...)
	return auo
}

// RemoveTaxApp removes "tax_app" edges to BillingProfile entities.
func (auo *AppUpdateOne) RemoveTaxApp(b ...*BillingProfile) *AppUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return auo.RemoveTaxAppIDs(ids...)
}

// ClearInvoicingApp clears all "invoicing_app" edges to the BillingProfile entity.
func (auo *AppUpdateOne) ClearInvoicingApp() *AppUpdateOne {
	auo.mutation.ClearInvoicingApp()
	return auo
}

// RemoveInvoicingAppIDs removes the "invoicing_app" edge to BillingProfile entities by IDs.
func (auo *AppUpdateOne) RemoveInvoicingAppIDs(ids ...string) *AppUpdateOne {
	auo.mutation.RemoveInvoicingAppIDs(ids...)
	return auo
}

// RemoveInvoicingApp removes "invoicing_app" edges to BillingProfile entities.
func (auo *AppUpdateOne) RemoveInvoicingApp(b ...*BillingProfile) *AppUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return auo.RemoveInvoicingAppIDs(ids...)
}

// ClearPaymentApp clears all "payment_app" edges to the BillingProfile entity.
func (auo *AppUpdateOne) ClearPaymentApp() *AppUpdateOne {
	auo.mutation.ClearPaymentApp()
	return auo
}

// RemovePaymentAppIDs removes the "payment_app" edge to BillingProfile entities by IDs.
func (auo *AppUpdateOne) RemovePaymentAppIDs(ids ...string) *AppUpdateOne {
	auo.mutation.RemovePaymentAppIDs(ids...)
	return auo
}

// RemovePaymentApp removes "payment_app" edges to BillingProfile entities.
func (auo *AppUpdateOne) RemovePaymentApp(b ...*BillingProfile) *AppUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return auo.RemovePaymentAppIDs(ids...)
}

// Where appends a list predicates to the AppUpdate builder.
func (auo *AppUpdateOne) Where(ps ...predicate.App) *AppUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AppUpdateOne) Select(field string, fields ...string) *AppUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated App entity.
func (auo *AppUpdateOne) Save(ctx context.Context) (*App, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppUpdateOne) SaveX(ctx context.Context) *App {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AppUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := app.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *AppUpdateOne) sqlSave(ctx context.Context) (_node *App, err error) {
	_spec := sqlgraph.NewUpdateSpec(app.Table, app.Columns, sqlgraph.NewFieldSpec(app.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "App.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, app.FieldID)
		for _, f := range fields {
			if !app.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != app.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Metadata(); ok {
		_spec.SetField(app.FieldMetadata, field.TypeJSON, value)
	}
	if auo.mutation.MetadataCleared() {
		_spec.ClearField(app.FieldMetadata, field.TypeJSON)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(app.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(app.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(app.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(app.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(app.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(app.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(app.FieldStatus, field.TypeString, value)
	}
	if value, ok := auo.mutation.IsDefault(); ok {
		_spec.SetField(app.FieldIsDefault, field.TypeBool, value)
	}
	if auo.mutation.CustomerAppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.CustomerAppsTable,
			Columns: []string{app.CustomerAppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCustomerAppsIDs(); len(nodes) > 0 && !auo.mutation.CustomerAppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.CustomerAppsTable,
			Columns: []string{app.CustomerAppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CustomerAppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.CustomerAppsTable,
			Columns: []string{app.CustomerAppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TaxAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.TaxAppTable,
			Columns: []string{app.TaxAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTaxAppIDs(); len(nodes) > 0 && !auo.mutation.TaxAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.TaxAppTable,
			Columns: []string{app.TaxAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TaxAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.TaxAppTable,
			Columns: []string{app.TaxAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.InvoicingAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.InvoicingAppTable,
			Columns: []string{app.InvoicingAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedInvoicingAppIDs(); len(nodes) > 0 && !auo.mutation.InvoicingAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.InvoicingAppTable,
			Columns: []string{app.InvoicingAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.InvoicingAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.InvoicingAppTable,
			Columns: []string{app.InvoicingAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PaymentAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PaymentAppTable,
			Columns: []string{app.PaymentAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPaymentAppIDs(); len(nodes) > 0 && !auo.mutation.PaymentAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PaymentAppTable,
			Columns: []string{app.PaymentAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PaymentAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PaymentAppTable,
			Columns: []string{app.PaymentAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &App{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
