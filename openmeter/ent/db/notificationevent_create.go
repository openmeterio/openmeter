// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationevent"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationeventdeliverystatus"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationrule"
	"github.com/openmeterio/openmeter/openmeter/notification"
	"github.com/openmeterio/openmeter/pkg/models"
)

// NotificationEventCreate is the builder for creating a NotificationEvent entity.
type NotificationEventCreate struct {
	config
	mutation *NotificationEventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (_c *NotificationEventCreate) SetNamespace(v string) *NotificationEventCreate {
	_c.mutation.SetNamespace(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *NotificationEventCreate) SetCreatedAt(v time.Time) *NotificationEventCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *NotificationEventCreate) SetNillableCreatedAt(v *time.Time) *NotificationEventCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetType sets the "type" field.
func (_c *NotificationEventCreate) SetType(v notification.EventType) *NotificationEventCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetRuleID sets the "rule_id" field.
func (_c *NotificationEventCreate) SetRuleID(v string) *NotificationEventCreate {
	_c.mutation.SetRuleID(v)
	return _c
}

// SetPayload sets the "payload" field.
func (_c *NotificationEventCreate) SetPayload(v string) *NotificationEventCreate {
	_c.mutation.SetPayload(v)
	return _c
}

// SetAnnotations sets the "annotations" field.
func (_c *NotificationEventCreate) SetAnnotations(v models.Annotations) *NotificationEventCreate {
	_c.mutation.SetAnnotations(v)
	return _c
}

// SetID sets the "id" field.
func (_c *NotificationEventCreate) SetID(v string) *NotificationEventCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *NotificationEventCreate) SetNillableID(v *string) *NotificationEventCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddDeliveryStatusIDs adds the "delivery_statuses" edge to the NotificationEventDeliveryStatus entity by IDs.
func (_c *NotificationEventCreate) AddDeliveryStatusIDs(ids ...string) *NotificationEventCreate {
	_c.mutation.AddDeliveryStatusIDs(ids...)
	return _c
}

// AddDeliveryStatuses adds the "delivery_statuses" edges to the NotificationEventDeliveryStatus entity.
func (_c *NotificationEventCreate) AddDeliveryStatuses(v ...*NotificationEventDeliveryStatus) *NotificationEventCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddDeliveryStatusIDs(ids...)
}

// SetRulesID sets the "rules" edge to the NotificationRule entity by ID.
func (_c *NotificationEventCreate) SetRulesID(id string) *NotificationEventCreate {
	_c.mutation.SetRulesID(id)
	return _c
}

// SetRules sets the "rules" edge to the NotificationRule entity.
func (_c *NotificationEventCreate) SetRules(v *NotificationRule) *NotificationEventCreate {
	return _c.SetRulesID(v.ID)
}

// Mutation returns the NotificationEventMutation object of the builder.
func (_c *NotificationEventCreate) Mutation() *NotificationEventMutation {
	return _c.mutation
}

// Save creates the NotificationEvent in the database.
func (_c *NotificationEventCreate) Save(ctx context.Context) (*NotificationEvent, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *NotificationEventCreate) SaveX(ctx context.Context) *NotificationEvent {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NotificationEventCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NotificationEventCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *NotificationEventCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := notificationevent.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := notificationevent.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *NotificationEventCreate) check() error {
	if _, ok := _c.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "NotificationEvent.namespace"`)}
	}
	if v, ok := _c.mutation.Namespace(); ok {
		if err := notificationevent.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "NotificationEvent.namespace": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "NotificationEvent.created_at"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "NotificationEvent.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := notificationevent.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "NotificationEvent.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.RuleID(); !ok {
		return &ValidationError{Name: "rule_id", err: errors.New(`db: missing required field "NotificationEvent.rule_id"`)}
	}
	if _, ok := _c.mutation.Payload(); !ok {
		return &ValidationError{Name: "payload", err: errors.New(`db: missing required field "NotificationEvent.payload"`)}
	}
	if len(_c.mutation.RulesIDs()) == 0 {
		return &ValidationError{Name: "rules", err: errors.New(`db: missing required edge "NotificationEvent.rules"`)}
	}
	return nil
}

func (_c *NotificationEventCreate) sqlSave(ctx context.Context) (*NotificationEvent, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := _c.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected NotificationEvent.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *NotificationEventCreate) createSpec() (*NotificationEvent, *sqlgraph.CreateSpec, error) {
	var (
		_node = &NotificationEvent{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(notificationevent.Table, sqlgraph.NewFieldSpec(notificationevent.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Namespace(); ok {
		_spec.SetField(notificationevent.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(notificationevent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(notificationevent.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Payload(); ok {
		_spec.SetField(notificationevent.FieldPayload, field.TypeString, value)
		_node.Payload = value
	}
	if value, ok := _c.mutation.Annotations(); ok {
		vv, err := notificationevent.ValueScanner.Annotations.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(notificationevent.FieldAnnotations, field.TypeString, vv)
		_node.Annotations = value
	}
	if nodes := _c.mutation.DeliveryStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   notificationevent.DeliveryStatusesTable,
			Columns: notificationevent.DeliveryStatusesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationeventdeliverystatus.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationevent.RulesTable,
			Columns: []string{notificationevent.RulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RuleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationEvent.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationEventUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *NotificationEventCreate) OnConflict(opts ...sql.ConflictOption) *NotificationEventUpsertOne {
	_c.conflict = opts
	return &NotificationEventUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *NotificationEventCreate) OnConflictColumns(columns ...string) *NotificationEventUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &NotificationEventUpsertOne{
		create: _c,
	}
}

type (
	// NotificationEventUpsertOne is the builder for "upsert"-ing
	//  one NotificationEvent node.
	NotificationEventUpsertOne struct {
		create *NotificationEventCreate
	}

	// NotificationEventUpsert is the "OnConflict" setter.
	NotificationEventUpsert struct {
		*sql.UpdateSet
	}
)

// SetPayload sets the "payload" field.
func (u *NotificationEventUpsert) SetPayload(v string) *NotificationEventUpsert {
	u.Set(notificationevent.FieldPayload, v)
	return u
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdatePayload() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldPayload)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *NotificationEventUpsert) SetAnnotations(v models.Annotations) *NotificationEventUpsert {
	u.Set(notificationevent.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *NotificationEventUpsert) UpdateAnnotations() *NotificationEventUpsert {
	u.SetExcluded(notificationevent.FieldAnnotations)
	return u
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *NotificationEventUpsert) ClearAnnotations() *NotificationEventUpsert {
	u.SetNull(notificationevent.FieldAnnotations)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NotificationEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationevent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationEventUpsertOne) UpdateNewValues() *NotificationEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(notificationevent.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(notificationevent.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(notificationevent.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(notificationevent.FieldType)
		}
		if _, exists := u.create.mutation.RuleID(); exists {
			s.SetIgnore(notificationevent.FieldRuleID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationEvent.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NotificationEventUpsertOne) Ignore() *NotificationEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationEventUpsertOne) DoNothing() *NotificationEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationEventCreate.OnConflict
// documentation for more info.
func (u *NotificationEventUpsertOne) Update(set func(*NotificationEventUpsert)) *NotificationEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationEventUpsert{UpdateSet: update})
	}))
	return u
}

// SetPayload sets the "payload" field.
func (u *NotificationEventUpsertOne) SetPayload(v string) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetPayload(v)
	})
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdatePayload() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdatePayload()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *NotificationEventUpsertOne) SetAnnotations(v models.Annotations) *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *NotificationEventUpsertOne) UpdateAnnotations() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *NotificationEventUpsertOne) ClearAnnotations() *NotificationEventUpsertOne {
	return u.Update(func(s *NotificationEventUpsert) {
		s.ClearAnnotations()
	})
}

// Exec executes the query.
func (u *NotificationEventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for NotificationEventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationEventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotificationEventUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: NotificationEventUpsertOne.ID is not supported by MySQL driver. Use NotificationEventUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotificationEventUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotificationEventCreateBulk is the builder for creating many NotificationEvent entities in bulk.
type NotificationEventCreateBulk struct {
	config
	err      error
	builders []*NotificationEventCreate
	conflict []sql.ConflictOption
}

// Save creates the NotificationEvent entities in the database.
func (_c *NotificationEventCreateBulk) Save(ctx context.Context) ([]*NotificationEvent, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*NotificationEvent, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *NotificationEventCreateBulk) SaveX(ctx context.Context) []*NotificationEvent {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NotificationEventCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NotificationEventCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationEvent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationEventUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *NotificationEventCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotificationEventUpsertBulk {
	_c.conflict = opts
	return &NotificationEventUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *NotificationEventCreateBulk) OnConflictColumns(columns ...string) *NotificationEventUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &NotificationEventUpsertBulk{
		create: _c,
	}
}

// NotificationEventUpsertBulk is the builder for "upsert"-ing
// a bulk of NotificationEvent nodes.
type NotificationEventUpsertBulk struct {
	create *NotificationEventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NotificationEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationevent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationEventUpsertBulk) UpdateNewValues() *NotificationEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(notificationevent.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(notificationevent.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(notificationevent.FieldCreatedAt)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(notificationevent.FieldType)
			}
			if _, exists := b.mutation.RuleID(); exists {
				s.SetIgnore(notificationevent.FieldRuleID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationEvent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NotificationEventUpsertBulk) Ignore() *NotificationEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationEventUpsertBulk) DoNothing() *NotificationEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationEventCreateBulk.OnConflict
// documentation for more info.
func (u *NotificationEventUpsertBulk) Update(set func(*NotificationEventUpsert)) *NotificationEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationEventUpsert{UpdateSet: update})
	}))
	return u
}

// SetPayload sets the "payload" field.
func (u *NotificationEventUpsertBulk) SetPayload(v string) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetPayload(v)
	})
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdatePayload() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdatePayload()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *NotificationEventUpsertBulk) SetAnnotations(v models.Annotations) *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *NotificationEventUpsertBulk) UpdateAnnotations() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *NotificationEventUpsertBulk) ClearAnnotations() *NotificationEventUpsertBulk {
	return u.Update(func(s *NotificationEventUpsert) {
		s.ClearAnnotations()
	})
}

// Exec executes the query.
func (u *NotificationEventUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the NotificationEventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for NotificationEventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationEventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
