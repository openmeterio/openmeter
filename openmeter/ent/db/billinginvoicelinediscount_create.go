// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicelinediscount"
)

// BillingInvoiceLineDiscountCreate is the builder for creating a BillingInvoiceLineDiscount entity.
type BillingInvoiceLineDiscountCreate struct {
	config
	mutation *BillingInvoiceLineDiscountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (_c *BillingInvoiceLineDiscountCreate) SetNamespace(v string) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetNamespace(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BillingInvoiceLineDiscountCreate) SetCreatedAt(v time.Time) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BillingInvoiceLineDiscountCreate) SetNillableCreatedAt(v *time.Time) *BillingInvoiceLineDiscountCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BillingInvoiceLineDiscountCreate) SetUpdatedAt(v time.Time) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BillingInvoiceLineDiscountCreate) SetNillableUpdatedAt(v *time.Time) *BillingInvoiceLineDiscountCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *BillingInvoiceLineDiscountCreate) SetDeletedAt(v time.Time) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *BillingInvoiceLineDiscountCreate) SetNillableDeletedAt(v *time.Time) *BillingInvoiceLineDiscountCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetLineID sets the "line_id" field.
func (_c *BillingInvoiceLineDiscountCreate) SetLineID(v string) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetLineID(v)
	return _c
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (_c *BillingInvoiceLineDiscountCreate) SetChildUniqueReferenceID(v string) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetChildUniqueReferenceID(v)
	return _c
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (_c *BillingInvoiceLineDiscountCreate) SetNillableChildUniqueReferenceID(v *string) *BillingInvoiceLineDiscountCreate {
	if v != nil {
		_c.SetChildUniqueReferenceID(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *BillingInvoiceLineDiscountCreate) SetDescription(v string) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *BillingInvoiceLineDiscountCreate) SetNillableDescription(v *string) *BillingInvoiceLineDiscountCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetReason sets the "reason" field.
func (_c *BillingInvoiceLineDiscountCreate) SetReason(v billing.DiscountReasonType) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetReason(v)
	return _c
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (_c *BillingInvoiceLineDiscountCreate) SetInvoicingAppExternalID(v string) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetInvoicingAppExternalID(v)
	return _c
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (_c *BillingInvoiceLineDiscountCreate) SetNillableInvoicingAppExternalID(v *string) *BillingInvoiceLineDiscountCreate {
	if v != nil {
		_c.SetInvoicingAppExternalID(*v)
	}
	return _c
}

// SetAmount sets the "amount" field.
func (_c *BillingInvoiceLineDiscountCreate) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetAmount(v)
	return _c
}

// SetRoundingAmount sets the "rounding_amount" field.
func (_c *BillingInvoiceLineDiscountCreate) SetRoundingAmount(v alpacadecimal.Decimal) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetRoundingAmount(v)
	return _c
}

// SetNillableRoundingAmount sets the "rounding_amount" field if the given value is not nil.
func (_c *BillingInvoiceLineDiscountCreate) SetNillableRoundingAmount(v *alpacadecimal.Decimal) *BillingInvoiceLineDiscountCreate {
	if v != nil {
		_c.SetRoundingAmount(*v)
	}
	return _c
}

// SetSourceDiscount sets the "source_discount" field.
func (_c *BillingInvoiceLineDiscountCreate) SetSourceDiscount(v *billing.DiscountReason) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetSourceDiscount(v)
	return _c
}

// SetType sets the "type" field.
func (_c *BillingInvoiceLineDiscountCreate) SetType(v string) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *BillingInvoiceLineDiscountCreate) SetNillableType(v *string) *BillingInvoiceLineDiscountCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetQuantity sets the "quantity" field.
func (_c *BillingInvoiceLineDiscountCreate) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetQuantity(v)
	return _c
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (_c *BillingInvoiceLineDiscountCreate) SetNillableQuantity(v *alpacadecimal.Decimal) *BillingInvoiceLineDiscountCreate {
	if v != nil {
		_c.SetQuantity(*v)
	}
	return _c
}

// SetPreLinePeriodQuantity sets the "pre_line_period_quantity" field.
func (_c *BillingInvoiceLineDiscountCreate) SetPreLinePeriodQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetPreLinePeriodQuantity(v)
	return _c
}

// SetNillablePreLinePeriodQuantity sets the "pre_line_period_quantity" field if the given value is not nil.
func (_c *BillingInvoiceLineDiscountCreate) SetNillablePreLinePeriodQuantity(v *alpacadecimal.Decimal) *BillingInvoiceLineDiscountCreate {
	if v != nil {
		_c.SetPreLinePeriodQuantity(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *BillingInvoiceLineDiscountCreate) SetID(v string) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *BillingInvoiceLineDiscountCreate) SetNillableID(v *string) *BillingInvoiceLineDiscountCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetBillingInvoiceLineID sets the "billing_invoice_line" edge to the BillingInvoiceLine entity by ID.
func (_c *BillingInvoiceLineDiscountCreate) SetBillingInvoiceLineID(id string) *BillingInvoiceLineDiscountCreate {
	_c.mutation.SetBillingInvoiceLineID(id)
	return _c
}

// SetBillingInvoiceLine sets the "billing_invoice_line" edge to the BillingInvoiceLine entity.
func (_c *BillingInvoiceLineDiscountCreate) SetBillingInvoiceLine(v *BillingInvoiceLine) *BillingInvoiceLineDiscountCreate {
	return _c.SetBillingInvoiceLineID(v.ID)
}

// Mutation returns the BillingInvoiceLineDiscountMutation object of the builder.
func (_c *BillingInvoiceLineDiscountCreate) Mutation() *BillingInvoiceLineDiscountMutation {
	return _c.mutation
}

// Save creates the BillingInvoiceLineDiscount in the database.
func (_c *BillingInvoiceLineDiscountCreate) Save(ctx context.Context) (*BillingInvoiceLineDiscount, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BillingInvoiceLineDiscountCreate) SaveX(ctx context.Context) *BillingInvoiceLineDiscount {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BillingInvoiceLineDiscountCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BillingInvoiceLineDiscountCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BillingInvoiceLineDiscountCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := billinginvoicelinediscount.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := billinginvoicelinediscount.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := billinginvoicelinediscount.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BillingInvoiceLineDiscountCreate) check() error {
	if _, ok := _c.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingInvoiceLineDiscount.namespace"`)}
	}
	if v, ok := _c.mutation.Namespace(); ok {
		if err := billinginvoicelinediscount.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLineDiscount.namespace": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingInvoiceLineDiscount.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingInvoiceLineDiscount.updated_at"`)}
	}
	if _, ok := _c.mutation.LineID(); !ok {
		return &ValidationError{Name: "line_id", err: errors.New(`db: missing required field "BillingInvoiceLineDiscount.line_id"`)}
	}
	if _, ok := _c.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`db: missing required field "BillingInvoiceLineDiscount.reason"`)}
	}
	if v, ok := _c.mutation.Reason(); ok {
		if err := billinginvoicelinediscount.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLineDiscount.reason": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`db: missing required field "BillingInvoiceLineDiscount.amount"`)}
	}
	if v, ok := _c.mutation.SourceDiscount(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "source_discount", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLineDiscount.source_discount": %w`, err)}
		}
	}
	if len(_c.mutation.BillingInvoiceLineIDs()) == 0 {
		return &ValidationError{Name: "billing_invoice_line", err: errors.New(`db: missing required edge "BillingInvoiceLineDiscount.billing_invoice_line"`)}
	}
	return nil
}

func (_c *BillingInvoiceLineDiscountCreate) sqlSave(ctx context.Context) (*BillingInvoiceLineDiscount, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := _c.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingInvoiceLineDiscount.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BillingInvoiceLineDiscountCreate) createSpec() (*BillingInvoiceLineDiscount, *sqlgraph.CreateSpec, error) {
	var (
		_node = &BillingInvoiceLineDiscount{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(billinginvoicelinediscount.Table, sqlgraph.NewFieldSpec(billinginvoicelinediscount.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Namespace(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldChildUniqueReferenceID, field.TypeString, value)
		_node.ChildUniqueReferenceID = &value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.Reason(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldReason, field.TypeEnum, value)
		_node.Reason = value
	}
	if value, ok := _c.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldInvoicingAppExternalID, field.TypeString, value)
		_node.InvoicingAppExternalID = &value
	}
	if value, ok := _c.mutation.Amount(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldAmount, field.TypeOther, value)
		_node.Amount = value
	}
	if value, ok := _c.mutation.RoundingAmount(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldRoundingAmount, field.TypeOther, value)
		_node.RoundingAmount = &value
	}
	if value, ok := _c.mutation.SourceDiscount(); ok {
		vv, err := billinginvoicelinediscount.ValueScanner.SourceDiscount.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(billinginvoicelinediscount.FieldSourceDiscount, field.TypeString, vv)
		_node.SourceDiscount = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldType, field.TypeString, value)
		_node.Type = &value
	}
	if value, ok := _c.mutation.Quantity(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldQuantity, field.TypeOther, value)
		_node.Quantity = &value
	}
	if value, ok := _c.mutation.PreLinePeriodQuantity(); ok {
		_spec.SetField(billinginvoicelinediscount.FieldPreLinePeriodQuantity, field.TypeOther, value)
		_node.PreLinePeriodQuantity = &value
	}
	if nodes := _c.mutation.BillingInvoiceLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicelinediscount.BillingInvoiceLineTable,
			Columns: []string{billinginvoicelinediscount.BillingInvoiceLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LineID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceLineDiscount.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceLineDiscountUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *BillingInvoiceLineDiscountCreate) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceLineDiscountUpsertOne {
	_c.conflict = opts
	return &BillingInvoiceLineDiscountUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceLineDiscount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BillingInvoiceLineDiscountCreate) OnConflictColumns(columns ...string) *BillingInvoiceLineDiscountUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceLineDiscountUpsertOne{
		create: _c,
	}
}

type (
	// BillingInvoiceLineDiscountUpsertOne is the builder for "upsert"-ing
	//  one BillingInvoiceLineDiscount node.
	BillingInvoiceLineDiscountUpsertOne struct {
		create *BillingInvoiceLineDiscountCreate
	}

	// BillingInvoiceLineDiscountUpsert is the "OnConflict" setter.
	BillingInvoiceLineDiscountUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceLineDiscountUpsert) SetUpdatedAt(v time.Time) *BillingInvoiceLineDiscountUpsert {
	u.Set(billinginvoicelinediscount.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsert) UpdateUpdatedAt() *BillingInvoiceLineDiscountUpsert {
	u.SetExcluded(billinginvoicelinediscount.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceLineDiscountUpsert) SetDeletedAt(v time.Time) *BillingInvoiceLineDiscountUpsert {
	u.Set(billinginvoicelinediscount.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsert) UpdateDeletedAt() *BillingInvoiceLineDiscountUpsert {
	u.SetExcluded(billinginvoicelinediscount.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceLineDiscountUpsert) ClearDeletedAt() *BillingInvoiceLineDiscountUpsert {
	u.SetNull(billinginvoicelinediscount.FieldDeletedAt)
	return u
}

// SetLineID sets the "line_id" field.
func (u *BillingInvoiceLineDiscountUpsert) SetLineID(v string) *BillingInvoiceLineDiscountUpsert {
	u.Set(billinginvoicelinediscount.FieldLineID, v)
	return u
}

// UpdateLineID sets the "line_id" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsert) UpdateLineID() *BillingInvoiceLineDiscountUpsert {
	u.SetExcluded(billinginvoicelinediscount.FieldLineID)
	return u
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (u *BillingInvoiceLineDiscountUpsert) SetChildUniqueReferenceID(v string) *BillingInvoiceLineDiscountUpsert {
	u.Set(billinginvoicelinediscount.FieldChildUniqueReferenceID, v)
	return u
}

// UpdateChildUniqueReferenceID sets the "child_unique_reference_id" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsert) UpdateChildUniqueReferenceID() *BillingInvoiceLineDiscountUpsert {
	u.SetExcluded(billinginvoicelinediscount.FieldChildUniqueReferenceID)
	return u
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (u *BillingInvoiceLineDiscountUpsert) ClearChildUniqueReferenceID() *BillingInvoiceLineDiscountUpsert {
	u.SetNull(billinginvoicelinediscount.FieldChildUniqueReferenceID)
	return u
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceLineDiscountUpsert) SetDescription(v string) *BillingInvoiceLineDiscountUpsert {
	u.Set(billinginvoicelinediscount.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsert) UpdateDescription() *BillingInvoiceLineDiscountUpsert {
	u.SetExcluded(billinginvoicelinediscount.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceLineDiscountUpsert) ClearDescription() *BillingInvoiceLineDiscountUpsert {
	u.SetNull(billinginvoicelinediscount.FieldDescription)
	return u
}

// SetReason sets the "reason" field.
func (u *BillingInvoiceLineDiscountUpsert) SetReason(v billing.DiscountReasonType) *BillingInvoiceLineDiscountUpsert {
	u.Set(billinginvoicelinediscount.FieldReason, v)
	return u
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsert) UpdateReason() *BillingInvoiceLineDiscountUpsert {
	u.SetExcluded(billinginvoicelinediscount.FieldReason)
	return u
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineDiscountUpsert) SetInvoicingAppExternalID(v string) *BillingInvoiceLineDiscountUpsert {
	u.Set(billinginvoicelinediscount.FieldInvoicingAppExternalID, v)
	return u
}

// UpdateInvoicingAppExternalID sets the "invoicing_app_external_id" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsert) UpdateInvoicingAppExternalID() *BillingInvoiceLineDiscountUpsert {
	u.SetExcluded(billinginvoicelinediscount.FieldInvoicingAppExternalID)
	return u
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineDiscountUpsert) ClearInvoicingAppExternalID() *BillingInvoiceLineDiscountUpsert {
	u.SetNull(billinginvoicelinediscount.FieldInvoicingAppExternalID)
	return u
}

// SetAmount sets the "amount" field.
func (u *BillingInvoiceLineDiscountUpsert) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpsert {
	u.Set(billinginvoicelinediscount.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsert) UpdateAmount() *BillingInvoiceLineDiscountUpsert {
	u.SetExcluded(billinginvoicelinediscount.FieldAmount)
	return u
}

// SetRoundingAmount sets the "rounding_amount" field.
func (u *BillingInvoiceLineDiscountUpsert) SetRoundingAmount(v alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpsert {
	u.Set(billinginvoicelinediscount.FieldRoundingAmount, v)
	return u
}

// UpdateRoundingAmount sets the "rounding_amount" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsert) UpdateRoundingAmount() *BillingInvoiceLineDiscountUpsert {
	u.SetExcluded(billinginvoicelinediscount.FieldRoundingAmount)
	return u
}

// ClearRoundingAmount clears the value of the "rounding_amount" field.
func (u *BillingInvoiceLineDiscountUpsert) ClearRoundingAmount() *BillingInvoiceLineDiscountUpsert {
	u.SetNull(billinginvoicelinediscount.FieldRoundingAmount)
	return u
}

// SetSourceDiscount sets the "source_discount" field.
func (u *BillingInvoiceLineDiscountUpsert) SetSourceDiscount(v *billing.DiscountReason) *BillingInvoiceLineDiscountUpsert {
	u.Set(billinginvoicelinediscount.FieldSourceDiscount, v)
	return u
}

// UpdateSourceDiscount sets the "source_discount" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsert) UpdateSourceDiscount() *BillingInvoiceLineDiscountUpsert {
	u.SetExcluded(billinginvoicelinediscount.FieldSourceDiscount)
	return u
}

// ClearSourceDiscount clears the value of the "source_discount" field.
func (u *BillingInvoiceLineDiscountUpsert) ClearSourceDiscount() *BillingInvoiceLineDiscountUpsert {
	u.SetNull(billinginvoicelinediscount.FieldSourceDiscount)
	return u
}

// SetType sets the "type" field.
func (u *BillingInvoiceLineDiscountUpsert) SetType(v string) *BillingInvoiceLineDiscountUpsert {
	u.Set(billinginvoicelinediscount.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsert) UpdateType() *BillingInvoiceLineDiscountUpsert {
	u.SetExcluded(billinginvoicelinediscount.FieldType)
	return u
}

// ClearType clears the value of the "type" field.
func (u *BillingInvoiceLineDiscountUpsert) ClearType() *BillingInvoiceLineDiscountUpsert {
	u.SetNull(billinginvoicelinediscount.FieldType)
	return u
}

// SetQuantity sets the "quantity" field.
func (u *BillingInvoiceLineDiscountUpsert) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpsert {
	u.Set(billinginvoicelinediscount.FieldQuantity, v)
	return u
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsert) UpdateQuantity() *BillingInvoiceLineDiscountUpsert {
	u.SetExcluded(billinginvoicelinediscount.FieldQuantity)
	return u
}

// ClearQuantity clears the value of the "quantity" field.
func (u *BillingInvoiceLineDiscountUpsert) ClearQuantity() *BillingInvoiceLineDiscountUpsert {
	u.SetNull(billinginvoicelinediscount.FieldQuantity)
	return u
}

// SetPreLinePeriodQuantity sets the "pre_line_period_quantity" field.
func (u *BillingInvoiceLineDiscountUpsert) SetPreLinePeriodQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpsert {
	u.Set(billinginvoicelinediscount.FieldPreLinePeriodQuantity, v)
	return u
}

// UpdatePreLinePeriodQuantity sets the "pre_line_period_quantity" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsert) UpdatePreLinePeriodQuantity() *BillingInvoiceLineDiscountUpsert {
	u.SetExcluded(billinginvoicelinediscount.FieldPreLinePeriodQuantity)
	return u
}

// ClearPreLinePeriodQuantity clears the value of the "pre_line_period_quantity" field.
func (u *BillingInvoiceLineDiscountUpsert) ClearPreLinePeriodQuantity() *BillingInvoiceLineDiscountUpsert {
	u.SetNull(billinginvoicelinediscount.FieldPreLinePeriodQuantity)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceLineDiscount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoicelinediscount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceLineDiscountUpsertOne) UpdateNewValues() *BillingInvoiceLineDiscountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billinginvoicelinediscount.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billinginvoicelinediscount.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billinginvoicelinediscount.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceLineDiscount.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingInvoiceLineDiscountUpsertOne) Ignore() *BillingInvoiceLineDiscountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceLineDiscountUpsertOne) DoNothing() *BillingInvoiceLineDiscountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceLineDiscountCreate.OnConflict
// documentation for more info.
func (u *BillingInvoiceLineDiscountUpsertOne) Update(set func(*BillingInvoiceLineDiscountUpsert)) *BillingInvoiceLineDiscountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceLineDiscountUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceLineDiscountUpsertOne) SetUpdatedAt(v time.Time) *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertOne) UpdateUpdatedAt() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceLineDiscountUpsertOne) SetDeletedAt(v time.Time) *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertOne) UpdateDeletedAt() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceLineDiscountUpsertOne) ClearDeletedAt() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLineID sets the "line_id" field.
func (u *BillingInvoiceLineDiscountUpsertOne) SetLineID(v string) *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetLineID(v)
	})
}

// UpdateLineID sets the "line_id" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertOne) UpdateLineID() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateLineID()
	})
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (u *BillingInvoiceLineDiscountUpsertOne) SetChildUniqueReferenceID(v string) *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetChildUniqueReferenceID(v)
	})
}

// UpdateChildUniqueReferenceID sets the "child_unique_reference_id" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertOne) UpdateChildUniqueReferenceID() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateChildUniqueReferenceID()
	})
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (u *BillingInvoiceLineDiscountUpsertOne) ClearChildUniqueReferenceID() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearChildUniqueReferenceID()
	})
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceLineDiscountUpsertOne) SetDescription(v string) *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertOne) UpdateDescription() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceLineDiscountUpsertOne) ClearDescription() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearDescription()
	})
}

// SetReason sets the "reason" field.
func (u *BillingInvoiceLineDiscountUpsertOne) SetReason(v billing.DiscountReasonType) *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertOne) UpdateReason() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateReason()
	})
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineDiscountUpsertOne) SetInvoicingAppExternalID(v string) *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetInvoicingAppExternalID(v)
	})
}

// UpdateInvoicingAppExternalID sets the "invoicing_app_external_id" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertOne) UpdateInvoicingAppExternalID() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateInvoicingAppExternalID()
	})
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineDiscountUpsertOne) ClearInvoicingAppExternalID() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearInvoicingAppExternalID()
	})
}

// SetAmount sets the "amount" field.
func (u *BillingInvoiceLineDiscountUpsertOne) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertOne) UpdateAmount() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateAmount()
	})
}

// SetRoundingAmount sets the "rounding_amount" field.
func (u *BillingInvoiceLineDiscountUpsertOne) SetRoundingAmount(v alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetRoundingAmount(v)
	})
}

// UpdateRoundingAmount sets the "rounding_amount" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertOne) UpdateRoundingAmount() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateRoundingAmount()
	})
}

// ClearRoundingAmount clears the value of the "rounding_amount" field.
func (u *BillingInvoiceLineDiscountUpsertOne) ClearRoundingAmount() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearRoundingAmount()
	})
}

// SetSourceDiscount sets the "source_discount" field.
func (u *BillingInvoiceLineDiscountUpsertOne) SetSourceDiscount(v *billing.DiscountReason) *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetSourceDiscount(v)
	})
}

// UpdateSourceDiscount sets the "source_discount" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertOne) UpdateSourceDiscount() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateSourceDiscount()
	})
}

// ClearSourceDiscount clears the value of the "source_discount" field.
func (u *BillingInvoiceLineDiscountUpsertOne) ClearSourceDiscount() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearSourceDiscount()
	})
}

// SetType sets the "type" field.
func (u *BillingInvoiceLineDiscountUpsertOne) SetType(v string) *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertOne) UpdateType() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *BillingInvoiceLineDiscountUpsertOne) ClearType() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearType()
	})
}

// SetQuantity sets the "quantity" field.
func (u *BillingInvoiceLineDiscountUpsertOne) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertOne) UpdateQuantity() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateQuantity()
	})
}

// ClearQuantity clears the value of the "quantity" field.
func (u *BillingInvoiceLineDiscountUpsertOne) ClearQuantity() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearQuantity()
	})
}

// SetPreLinePeriodQuantity sets the "pre_line_period_quantity" field.
func (u *BillingInvoiceLineDiscountUpsertOne) SetPreLinePeriodQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetPreLinePeriodQuantity(v)
	})
}

// UpdatePreLinePeriodQuantity sets the "pre_line_period_quantity" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertOne) UpdatePreLinePeriodQuantity() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdatePreLinePeriodQuantity()
	})
}

// ClearPreLinePeriodQuantity clears the value of the "pre_line_period_quantity" field.
func (u *BillingInvoiceLineDiscountUpsertOne) ClearPreLinePeriodQuantity() *BillingInvoiceLineDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearPreLinePeriodQuantity()
	})
}

// Exec executes the query.
func (u *BillingInvoiceLineDiscountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceLineDiscountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceLineDiscountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingInvoiceLineDiscountUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingInvoiceLineDiscountUpsertOne.ID is not supported by MySQL driver. Use BillingInvoiceLineDiscountUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingInvoiceLineDiscountUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingInvoiceLineDiscountCreateBulk is the builder for creating many BillingInvoiceLineDiscount entities in bulk.
type BillingInvoiceLineDiscountCreateBulk struct {
	config
	err      error
	builders []*BillingInvoiceLineDiscountCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingInvoiceLineDiscount entities in the database.
func (_c *BillingInvoiceLineDiscountCreateBulk) Save(ctx context.Context) ([]*BillingInvoiceLineDiscount, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BillingInvoiceLineDiscount, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingInvoiceLineDiscountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BillingInvoiceLineDiscountCreateBulk) SaveX(ctx context.Context) []*BillingInvoiceLineDiscount {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BillingInvoiceLineDiscountCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BillingInvoiceLineDiscountCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceLineDiscount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceLineDiscountUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *BillingInvoiceLineDiscountCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceLineDiscountUpsertBulk {
	_c.conflict = opts
	return &BillingInvoiceLineDiscountUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceLineDiscount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BillingInvoiceLineDiscountCreateBulk) OnConflictColumns(columns ...string) *BillingInvoiceLineDiscountUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceLineDiscountUpsertBulk{
		create: _c,
	}
}

// BillingInvoiceLineDiscountUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingInvoiceLineDiscount nodes.
type BillingInvoiceLineDiscountUpsertBulk struct {
	create *BillingInvoiceLineDiscountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingInvoiceLineDiscount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoicelinediscount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceLineDiscountUpsertBulk) UpdateNewValues() *BillingInvoiceLineDiscountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billinginvoicelinediscount.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billinginvoicelinediscount.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billinginvoicelinediscount.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceLineDiscount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingInvoiceLineDiscountUpsertBulk) Ignore() *BillingInvoiceLineDiscountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceLineDiscountUpsertBulk) DoNothing() *BillingInvoiceLineDiscountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceLineDiscountCreateBulk.OnConflict
// documentation for more info.
func (u *BillingInvoiceLineDiscountUpsertBulk) Update(set func(*BillingInvoiceLineDiscountUpsert)) *BillingInvoiceLineDiscountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceLineDiscountUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) SetUpdatedAt(v time.Time) *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertBulk) UpdateUpdatedAt() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) SetDeletedAt(v time.Time) *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertBulk) UpdateDeletedAt() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) ClearDeletedAt() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLineID sets the "line_id" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) SetLineID(v string) *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetLineID(v)
	})
}

// UpdateLineID sets the "line_id" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertBulk) UpdateLineID() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateLineID()
	})
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) SetChildUniqueReferenceID(v string) *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetChildUniqueReferenceID(v)
	})
}

// UpdateChildUniqueReferenceID sets the "child_unique_reference_id" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertBulk) UpdateChildUniqueReferenceID() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateChildUniqueReferenceID()
	})
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) ClearChildUniqueReferenceID() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearChildUniqueReferenceID()
	})
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) SetDescription(v string) *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertBulk) UpdateDescription() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) ClearDescription() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearDescription()
	})
}

// SetReason sets the "reason" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) SetReason(v billing.DiscountReasonType) *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertBulk) UpdateReason() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateReason()
	})
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) SetInvoicingAppExternalID(v string) *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetInvoicingAppExternalID(v)
	})
}

// UpdateInvoicingAppExternalID sets the "invoicing_app_external_id" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertBulk) UpdateInvoicingAppExternalID() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateInvoicingAppExternalID()
	})
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) ClearInvoicingAppExternalID() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearInvoicingAppExternalID()
	})
}

// SetAmount sets the "amount" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertBulk) UpdateAmount() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateAmount()
	})
}

// SetRoundingAmount sets the "rounding_amount" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) SetRoundingAmount(v alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetRoundingAmount(v)
	})
}

// UpdateRoundingAmount sets the "rounding_amount" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertBulk) UpdateRoundingAmount() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateRoundingAmount()
	})
}

// ClearRoundingAmount clears the value of the "rounding_amount" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) ClearRoundingAmount() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearRoundingAmount()
	})
}

// SetSourceDiscount sets the "source_discount" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) SetSourceDiscount(v *billing.DiscountReason) *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetSourceDiscount(v)
	})
}

// UpdateSourceDiscount sets the "source_discount" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertBulk) UpdateSourceDiscount() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateSourceDiscount()
	})
}

// ClearSourceDiscount clears the value of the "source_discount" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) ClearSourceDiscount() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearSourceDiscount()
	})
}

// SetType sets the "type" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) SetType(v string) *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertBulk) UpdateType() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) ClearType() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearType()
	})
}

// SetQuantity sets the "quantity" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertBulk) UpdateQuantity() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdateQuantity()
	})
}

// ClearQuantity clears the value of the "quantity" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) ClearQuantity() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearQuantity()
	})
}

// SetPreLinePeriodQuantity sets the "pre_line_period_quantity" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) SetPreLinePeriodQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.SetPreLinePeriodQuantity(v)
	})
}

// UpdatePreLinePeriodQuantity sets the "pre_line_period_quantity" field to the value that was provided on create.
func (u *BillingInvoiceLineDiscountUpsertBulk) UpdatePreLinePeriodQuantity() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.UpdatePreLinePeriodQuantity()
	})
}

// ClearPreLinePeriodQuantity clears the value of the "pre_line_period_quantity" field.
func (u *BillingInvoiceLineDiscountUpsertBulk) ClearPreLinePeriodQuantity() *BillingInvoiceLineDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineDiscountUpsert) {
		s.ClearPreLinePeriodQuantity()
	})
}

// Exec executes the query.
func (u *BillingInvoiceLineDiscountUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingInvoiceLineDiscountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceLineDiscountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceLineDiscountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
