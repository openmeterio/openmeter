// Code generated by ent, DO NOT EDIT.

package subscriptionaddonratecard

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subscriptionaddonratecard type in the database.
	Label = "subscription_addon_rate_card"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldSubscriptionAddonID holds the string denoting the subscription_addon_id field in the database.
	FieldSubscriptionAddonID = "subscription_addon_id"
	// FieldAddonRatecardID holds the string denoting the addon_ratecard_id field in the database.
	FieldAddonRatecardID = "addon_ratecard_id"
	// EdgeSubscriptionAddon holds the string denoting the subscription_addon edge name in mutations.
	EdgeSubscriptionAddon = "subscription_addon"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// EdgeAddonRatecard holds the string denoting the addon_ratecard edge name in mutations.
	EdgeAddonRatecard = "addon_ratecard"
	// Table holds the table name of the subscriptionaddonratecard in the database.
	Table = "subscription_addon_rate_cards"
	// SubscriptionAddonTable is the table that holds the subscription_addon relation/edge.
	SubscriptionAddonTable = "subscription_addon_rate_cards"
	// SubscriptionAddonInverseTable is the table name for the SubscriptionAddon entity.
	// It exists in this package in order to avoid circular dependency with the "subscriptionaddon" package.
	SubscriptionAddonInverseTable = "subscription_addons"
	// SubscriptionAddonColumn is the table column denoting the subscription_addon relation/edge.
	SubscriptionAddonColumn = "subscription_addon_id"
	// ItemsTable is the table that holds the items relation/edge.
	ItemsTable = "subscription_addon_rate_card_item_links"
	// ItemsInverseTable is the table name for the SubscriptionAddonRateCardItemLink entity.
	// It exists in this package in order to avoid circular dependency with the "subscriptionaddonratecarditemlink" package.
	ItemsInverseTable = "subscription_addon_rate_card_item_links"
	// ItemsColumn is the table column denoting the items relation/edge.
	ItemsColumn = "subscription_addon_rate_card_id"
	// AddonRatecardTable is the table that holds the addon_ratecard relation/edge.
	AddonRatecardTable = "subscription_addon_rate_cards"
	// AddonRatecardInverseTable is the table name for the AddonRateCard entity.
	// It exists in this package in order to avoid circular dependency with the "addonratecard" package.
	AddonRatecardInverseTable = "addon_rate_cards"
	// AddonRatecardColumn is the table column denoting the addon_ratecard relation/edge.
	AddonRatecardColumn = "addon_ratecard_id"
)

// Columns holds all SQL columns for subscriptionaddonratecard fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldMetadata,
	FieldSubscriptionAddonID,
	FieldAddonRatecardID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// SubscriptionAddonIDValidator is a validator for the "subscription_addon_id" field. It is called by the builders before save.
	SubscriptionAddonIDValidator func(string) error
	// AddonRatecardIDValidator is a validator for the "addon_ratecard_id" field. It is called by the builders before save.
	AddonRatecardIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the SubscriptionAddonRateCard queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// BySubscriptionAddonID orders the results by the subscription_addon_id field.
func BySubscriptionAddonID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionAddonID, opts...).ToFunc()
}

// ByAddonRatecardID orders the results by the addon_ratecard_id field.
func ByAddonRatecardID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddonRatecardID, opts...).ToFunc()
}

// BySubscriptionAddonField orders the results by subscription_addon field.
func BySubscriptionAddonField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriptionAddonStep(), sql.OrderByField(field, opts...))
	}
}

// ByItemsCount orders the results by items count.
func ByItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newItemsStep(), opts...)
	}
}

// ByItems orders the results by items terms.
func ByItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAddonRatecardField orders the results by addon_ratecard field.
func ByAddonRatecardField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddonRatecardStep(), sql.OrderByField(field, opts...))
	}
}
func newSubscriptionAddonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriptionAddonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionAddonTable, SubscriptionAddonColumn),
	)
}
func newItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
	)
}
func newAddonRatecardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddonRatecardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AddonRatecardTable, AddonRatecardColumn),
	)
}
