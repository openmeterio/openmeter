// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/app"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingprofile"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
	"github.com/openmeterio/openmeter/pkg/currencyx"
	"github.com/openmeterio/openmeter/pkg/models"
)

// BillingInvoice is the model entity for the BillingInvoice schema.
type BillingInvoice struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// SupplierAddressCountry holds the value of the "supplier_address_country" field.
	SupplierAddressCountry *models.CountryCode `json:"supplier_address_country,omitempty"`
	// SupplierAddressPostalCode holds the value of the "supplier_address_postal_code" field.
	SupplierAddressPostalCode *string `json:"supplier_address_postal_code,omitempty"`
	// SupplierAddressState holds the value of the "supplier_address_state" field.
	SupplierAddressState *string `json:"supplier_address_state,omitempty"`
	// SupplierAddressCity holds the value of the "supplier_address_city" field.
	SupplierAddressCity *string `json:"supplier_address_city,omitempty"`
	// SupplierAddressLine1 holds the value of the "supplier_address_line1" field.
	SupplierAddressLine1 *string `json:"supplier_address_line1,omitempty"`
	// SupplierAddressLine2 holds the value of the "supplier_address_line2" field.
	SupplierAddressLine2 *string `json:"supplier_address_line2,omitempty"`
	// SupplierAddressPhoneNumber holds the value of the "supplier_address_phone_number" field.
	SupplierAddressPhoneNumber *string `json:"supplier_address_phone_number,omitempty"`
	// CustomerAddressCountry holds the value of the "customer_address_country" field.
	CustomerAddressCountry *models.CountryCode `json:"customer_address_country,omitempty"`
	// CustomerAddressPostalCode holds the value of the "customer_address_postal_code" field.
	CustomerAddressPostalCode *string `json:"customer_address_postal_code,omitempty"`
	// CustomerAddressState holds the value of the "customer_address_state" field.
	CustomerAddressState *string `json:"customer_address_state,omitempty"`
	// CustomerAddressCity holds the value of the "customer_address_city" field.
	CustomerAddressCity *string `json:"customer_address_city,omitempty"`
	// CustomerAddressLine1 holds the value of the "customer_address_line1" field.
	CustomerAddressLine1 *string `json:"customer_address_line1,omitempty"`
	// CustomerAddressLine2 holds the value of the "customer_address_line2" field.
	CustomerAddressLine2 *string `json:"customer_address_line2,omitempty"`
	// CustomerAddressPhoneNumber holds the value of the "customer_address_phone_number" field.
	CustomerAddressPhoneNumber *string `json:"customer_address_phone_number,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount alpacadecimal.Decimal `json:"amount,omitempty"`
	// TaxesTotal holds the value of the "taxes_total" field.
	TaxesTotal alpacadecimal.Decimal `json:"taxes_total,omitempty"`
	// TaxesInclusiveTotal holds the value of the "taxes_inclusive_total" field.
	TaxesInclusiveTotal alpacadecimal.Decimal `json:"taxes_inclusive_total,omitempty"`
	// TaxesExclusiveTotal holds the value of the "taxes_exclusive_total" field.
	TaxesExclusiveTotal alpacadecimal.Decimal `json:"taxes_exclusive_total,omitempty"`
	// ChargesTotal holds the value of the "charges_total" field.
	ChargesTotal alpacadecimal.Decimal `json:"charges_total,omitempty"`
	// DiscountsTotal holds the value of the "discounts_total" field.
	DiscountsTotal alpacadecimal.Decimal `json:"discounts_total,omitempty"`
	// Total holds the value of the "total" field.
	Total alpacadecimal.Decimal `json:"total,omitempty"`
	// SupplierName holds the value of the "supplier_name" field.
	SupplierName string `json:"supplier_name,omitempty"`
	// SupplierTaxCode holds the value of the "supplier_tax_code" field.
	SupplierTaxCode *string `json:"supplier_tax_code,omitempty"`
	// CustomerName holds the value of the "customer_name" field.
	CustomerName string `json:"customer_name,omitempty"`
	// CustomerUsageAttribution holds the value of the "customer_usage_attribution" field.
	CustomerUsageAttribution *billing.VersionedCustomerUsageAttribution `json:"customer_usage_attribution,omitempty"`
	// Number holds the value of the "number" field.
	Number *string `json:"number,omitempty"`
	// Type holds the value of the "type" field.
	Type billing.InvoiceType `json:"type,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID string `json:"customer_id,omitempty"`
	// SourceBillingProfileID holds the value of the "source_billing_profile_id" field.
	SourceBillingProfileID string `json:"source_billing_profile_id,omitempty"`
	// VoidedAt holds the value of the "voided_at" field.
	VoidedAt *time.Time `json:"voided_at,omitempty"`
	// IssuedAt holds the value of the "issued_at" field.
	IssuedAt *time.Time `json:"issued_at,omitempty"`
	// DraftUntil holds the value of the "draft_until" field.
	DraftUntil *time.Time `json:"draft_until,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency currencyx.Code `json:"currency,omitempty"`
	// DueAt holds the value of the "due_at" field.
	DueAt *time.Time `json:"due_at,omitempty"`
	// Status holds the value of the "status" field.
	Status billing.InvoiceStatus `json:"status,omitempty"`
	// WorkflowConfigID holds the value of the "workflow_config_id" field.
	WorkflowConfigID string `json:"workflow_config_id,omitempty"`
	// TaxAppID holds the value of the "tax_app_id" field.
	TaxAppID string `json:"tax_app_id,omitempty"`
	// InvoicingAppID holds the value of the "invoicing_app_id" field.
	InvoicingAppID string `json:"invoicing_app_id,omitempty"`
	// PaymentAppID holds the value of the "payment_app_id" field.
	PaymentAppID string `json:"payment_app_id,omitempty"`
	// InvoicingAppExternalID holds the value of the "invoicing_app_external_id" field.
	InvoicingAppExternalID *string `json:"invoicing_app_external_id,omitempty"`
	// PaymentAppExternalID holds the value of the "payment_app_external_id" field.
	PaymentAppExternalID *string `json:"payment_app_external_id,omitempty"`
	// PeriodStart holds the value of the "period_start" field.
	PeriodStart *time.Time `json:"period_start,omitempty"`
	// PeriodEnd holds the value of the "period_end" field.
	PeriodEnd *time.Time `json:"period_end,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingInvoiceQuery when eager-loading is set.
	Edges        BillingInvoiceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillingInvoiceEdges holds the relations/edges for other nodes in the graph.
type BillingInvoiceEdges struct {
	// SourceBillingProfile holds the value of the source_billing_profile edge.
	SourceBillingProfile *BillingProfile `json:"source_billing_profile,omitempty"`
	// BillingWorkflowConfig holds the value of the billing_workflow_config edge.
	BillingWorkflowConfig *BillingWorkflowConfig `json:"billing_workflow_config,omitempty"`
	// BillingInvoiceLines holds the value of the billing_invoice_lines edge.
	BillingInvoiceLines []*BillingInvoiceLine `json:"billing_invoice_lines,omitempty"`
	// BillingInvoiceValidationIssues holds the value of the billing_invoice_validation_issues edge.
	BillingInvoiceValidationIssues []*BillingInvoiceValidationIssue `json:"billing_invoice_validation_issues,omitempty"`
	// BillingInvoiceCustomer holds the value of the billing_invoice_customer edge.
	BillingInvoiceCustomer *Customer `json:"billing_invoice_customer,omitempty"`
	// TaxApp holds the value of the tax_app edge.
	TaxApp *App `json:"tax_app,omitempty"`
	// InvoicingApp holds the value of the invoicing_app edge.
	InvoicingApp *App `json:"invoicing_app,omitempty"`
	// PaymentApp holds the value of the payment_app edge.
	PaymentApp *App `json:"payment_app,omitempty"`
	// InvoiceDiscounts holds the value of the invoice_discounts edge.
	InvoiceDiscounts []*BillingInvoiceDiscount `json:"invoice_discounts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// SourceBillingProfileOrErr returns the SourceBillingProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceEdges) SourceBillingProfileOrErr() (*BillingProfile, error) {
	if e.SourceBillingProfile != nil {
		return e.SourceBillingProfile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: billingprofile.Label}
	}
	return nil, &NotLoadedError{edge: "source_billing_profile"}
}

// BillingWorkflowConfigOrErr returns the BillingWorkflowConfig value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceEdges) BillingWorkflowConfigOrErr() (*BillingWorkflowConfig, error) {
	if e.BillingWorkflowConfig != nil {
		return e.BillingWorkflowConfig, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: billingworkflowconfig.Label}
	}
	return nil, &NotLoadedError{edge: "billing_workflow_config"}
}

// BillingInvoiceLinesOrErr returns the BillingInvoiceLines value or an error if the edge
// was not loaded in eager-loading.
func (e BillingInvoiceEdges) BillingInvoiceLinesOrErr() ([]*BillingInvoiceLine, error) {
	if e.loadedTypes[2] {
		return e.BillingInvoiceLines, nil
	}
	return nil, &NotLoadedError{edge: "billing_invoice_lines"}
}

// BillingInvoiceValidationIssuesOrErr returns the BillingInvoiceValidationIssues value or an error if the edge
// was not loaded in eager-loading.
func (e BillingInvoiceEdges) BillingInvoiceValidationIssuesOrErr() ([]*BillingInvoiceValidationIssue, error) {
	if e.loadedTypes[3] {
		return e.BillingInvoiceValidationIssues, nil
	}
	return nil, &NotLoadedError{edge: "billing_invoice_validation_issues"}
}

// BillingInvoiceCustomerOrErr returns the BillingInvoiceCustomer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceEdges) BillingInvoiceCustomerOrErr() (*Customer, error) {
	if e.BillingInvoiceCustomer != nil {
		return e.BillingInvoiceCustomer, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "billing_invoice_customer"}
}

// TaxAppOrErr returns the TaxApp value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceEdges) TaxAppOrErr() (*App, error) {
	if e.TaxApp != nil {
		return e.TaxApp, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: app.Label}
	}
	return nil, &NotLoadedError{edge: "tax_app"}
}

// InvoicingAppOrErr returns the InvoicingApp value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceEdges) InvoicingAppOrErr() (*App, error) {
	if e.InvoicingApp != nil {
		return e.InvoicingApp, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: app.Label}
	}
	return nil, &NotLoadedError{edge: "invoicing_app"}
}

// PaymentAppOrErr returns the PaymentApp value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceEdges) PaymentAppOrErr() (*App, error) {
	if e.PaymentApp != nil {
		return e.PaymentApp, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: app.Label}
	}
	return nil, &NotLoadedError{edge: "payment_app"}
}

// InvoiceDiscountsOrErr returns the InvoiceDiscounts value or an error if the edge
// was not loaded in eager-loading.
func (e BillingInvoiceEdges) InvoiceDiscountsOrErr() ([]*BillingInvoiceDiscount, error) {
	if e.loadedTypes[8] {
		return e.InvoiceDiscounts, nil
	}
	return nil, &NotLoadedError{edge: "invoice_discounts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingInvoice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billinginvoice.FieldMetadata, billinginvoice.FieldCustomerUsageAttribution:
			values[i] = new([]byte)
		case billinginvoice.FieldAmount, billinginvoice.FieldTaxesTotal, billinginvoice.FieldTaxesInclusiveTotal, billinginvoice.FieldTaxesExclusiveTotal, billinginvoice.FieldChargesTotal, billinginvoice.FieldDiscountsTotal, billinginvoice.FieldTotal:
			values[i] = new(alpacadecimal.Decimal)
		case billinginvoice.FieldID, billinginvoice.FieldNamespace, billinginvoice.FieldSupplierAddressCountry, billinginvoice.FieldSupplierAddressPostalCode, billinginvoice.FieldSupplierAddressState, billinginvoice.FieldSupplierAddressCity, billinginvoice.FieldSupplierAddressLine1, billinginvoice.FieldSupplierAddressLine2, billinginvoice.FieldSupplierAddressPhoneNumber, billinginvoice.FieldCustomerAddressCountry, billinginvoice.FieldCustomerAddressPostalCode, billinginvoice.FieldCustomerAddressState, billinginvoice.FieldCustomerAddressCity, billinginvoice.FieldCustomerAddressLine1, billinginvoice.FieldCustomerAddressLine2, billinginvoice.FieldCustomerAddressPhoneNumber, billinginvoice.FieldSupplierName, billinginvoice.FieldSupplierTaxCode, billinginvoice.FieldCustomerName, billinginvoice.FieldNumber, billinginvoice.FieldType, billinginvoice.FieldDescription, billinginvoice.FieldCustomerID, billinginvoice.FieldSourceBillingProfileID, billinginvoice.FieldCurrency, billinginvoice.FieldStatus, billinginvoice.FieldWorkflowConfigID, billinginvoice.FieldTaxAppID, billinginvoice.FieldInvoicingAppID, billinginvoice.FieldPaymentAppID, billinginvoice.FieldInvoicingAppExternalID, billinginvoice.FieldPaymentAppExternalID:
			values[i] = new(sql.NullString)
		case billinginvoice.FieldCreatedAt, billinginvoice.FieldUpdatedAt, billinginvoice.FieldDeletedAt, billinginvoice.FieldVoidedAt, billinginvoice.FieldIssuedAt, billinginvoice.FieldDraftUntil, billinginvoice.FieldDueAt, billinginvoice.FieldPeriodStart, billinginvoice.FieldPeriodEnd:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingInvoice fields.
func (bi *BillingInvoice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billinginvoice.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bi.ID = value.String
			}
		case billinginvoice.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				bi.Namespace = value.String
			}
		case billinginvoice.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bi.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case billinginvoice.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bi.CreatedAt = value.Time
			}
		case billinginvoice.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bi.UpdatedAt = value.Time
			}
		case billinginvoice.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bi.DeletedAt = new(time.Time)
				*bi.DeletedAt = value.Time
			}
		case billinginvoice.FieldSupplierAddressCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supplier_address_country", values[i])
			} else if value.Valid {
				bi.SupplierAddressCountry = new(models.CountryCode)
				*bi.SupplierAddressCountry = models.CountryCode(value.String)
			}
		case billinginvoice.FieldSupplierAddressPostalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supplier_address_postal_code", values[i])
			} else if value.Valid {
				bi.SupplierAddressPostalCode = new(string)
				*bi.SupplierAddressPostalCode = value.String
			}
		case billinginvoice.FieldSupplierAddressState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supplier_address_state", values[i])
			} else if value.Valid {
				bi.SupplierAddressState = new(string)
				*bi.SupplierAddressState = value.String
			}
		case billinginvoice.FieldSupplierAddressCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supplier_address_city", values[i])
			} else if value.Valid {
				bi.SupplierAddressCity = new(string)
				*bi.SupplierAddressCity = value.String
			}
		case billinginvoice.FieldSupplierAddressLine1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supplier_address_line1", values[i])
			} else if value.Valid {
				bi.SupplierAddressLine1 = new(string)
				*bi.SupplierAddressLine1 = value.String
			}
		case billinginvoice.FieldSupplierAddressLine2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supplier_address_line2", values[i])
			} else if value.Valid {
				bi.SupplierAddressLine2 = new(string)
				*bi.SupplierAddressLine2 = value.String
			}
		case billinginvoice.FieldSupplierAddressPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supplier_address_phone_number", values[i])
			} else if value.Valid {
				bi.SupplierAddressPhoneNumber = new(string)
				*bi.SupplierAddressPhoneNumber = value.String
			}
		case billinginvoice.FieldCustomerAddressCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_address_country", values[i])
			} else if value.Valid {
				bi.CustomerAddressCountry = new(models.CountryCode)
				*bi.CustomerAddressCountry = models.CountryCode(value.String)
			}
		case billinginvoice.FieldCustomerAddressPostalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_address_postal_code", values[i])
			} else if value.Valid {
				bi.CustomerAddressPostalCode = new(string)
				*bi.CustomerAddressPostalCode = value.String
			}
		case billinginvoice.FieldCustomerAddressState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_address_state", values[i])
			} else if value.Valid {
				bi.CustomerAddressState = new(string)
				*bi.CustomerAddressState = value.String
			}
		case billinginvoice.FieldCustomerAddressCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_address_city", values[i])
			} else if value.Valid {
				bi.CustomerAddressCity = new(string)
				*bi.CustomerAddressCity = value.String
			}
		case billinginvoice.FieldCustomerAddressLine1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_address_line1", values[i])
			} else if value.Valid {
				bi.CustomerAddressLine1 = new(string)
				*bi.CustomerAddressLine1 = value.String
			}
		case billinginvoice.FieldCustomerAddressLine2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_address_line2", values[i])
			} else if value.Valid {
				bi.CustomerAddressLine2 = new(string)
				*bi.CustomerAddressLine2 = value.String
			}
		case billinginvoice.FieldCustomerAddressPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_address_phone_number", values[i])
			} else if value.Valid {
				bi.CustomerAddressPhoneNumber = new(string)
				*bi.CustomerAddressPhoneNumber = value.String
			}
		case billinginvoice.FieldAmount:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				bi.Amount = *value
			}
		case billinginvoice.FieldTaxesTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field taxes_total", values[i])
			} else if value != nil {
				bi.TaxesTotal = *value
			}
		case billinginvoice.FieldTaxesInclusiveTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field taxes_inclusive_total", values[i])
			} else if value != nil {
				bi.TaxesInclusiveTotal = *value
			}
		case billinginvoice.FieldTaxesExclusiveTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field taxes_exclusive_total", values[i])
			} else if value != nil {
				bi.TaxesExclusiveTotal = *value
			}
		case billinginvoice.FieldChargesTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field charges_total", values[i])
			} else if value != nil {
				bi.ChargesTotal = *value
			}
		case billinginvoice.FieldDiscountsTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field discounts_total", values[i])
			} else if value != nil {
				bi.DiscountsTotal = *value
			}
		case billinginvoice.FieldTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value != nil {
				bi.Total = *value
			}
		case billinginvoice.FieldSupplierName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supplier_name", values[i])
			} else if value.Valid {
				bi.SupplierName = value.String
			}
		case billinginvoice.FieldSupplierTaxCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supplier_tax_code", values[i])
			} else if value.Valid {
				bi.SupplierTaxCode = new(string)
				*bi.SupplierTaxCode = value.String
			}
		case billinginvoice.FieldCustomerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_name", values[i])
			} else if value.Valid {
				bi.CustomerName = value.String
			}
		case billinginvoice.FieldCustomerUsageAttribution:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field customer_usage_attribution", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bi.CustomerUsageAttribution); err != nil {
					return fmt.Errorf("unmarshal field customer_usage_attribution: %w", err)
				}
			}
		case billinginvoice.FieldNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				bi.Number = new(string)
				*bi.Number = value.String
			}
		case billinginvoice.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				bi.Type = billing.InvoiceType(value.String)
			}
		case billinginvoice.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				bi.Description = new(string)
				*bi.Description = value.String
			}
		case billinginvoice.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				bi.CustomerID = value.String
			}
		case billinginvoice.FieldSourceBillingProfileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_billing_profile_id", values[i])
			} else if value.Valid {
				bi.SourceBillingProfileID = value.String
			}
		case billinginvoice.FieldVoidedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field voided_at", values[i])
			} else if value.Valid {
				bi.VoidedAt = new(time.Time)
				*bi.VoidedAt = value.Time
			}
		case billinginvoice.FieldIssuedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field issued_at", values[i])
			} else if value.Valid {
				bi.IssuedAt = new(time.Time)
				*bi.IssuedAt = value.Time
			}
		case billinginvoice.FieldDraftUntil:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field draft_until", values[i])
			} else if value.Valid {
				bi.DraftUntil = new(time.Time)
				*bi.DraftUntil = value.Time
			}
		case billinginvoice.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				bi.Currency = currencyx.Code(value.String)
			}
		case billinginvoice.FieldDueAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_at", values[i])
			} else if value.Valid {
				bi.DueAt = new(time.Time)
				*bi.DueAt = value.Time
			}
		case billinginvoice.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				bi.Status = billing.InvoiceStatus(value.String)
			}
		case billinginvoice.FieldWorkflowConfigID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_config_id", values[i])
			} else if value.Valid {
				bi.WorkflowConfigID = value.String
			}
		case billinginvoice.FieldTaxAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_app_id", values[i])
			} else if value.Valid {
				bi.TaxAppID = value.String
			}
		case billinginvoice.FieldInvoicingAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoicing_app_id", values[i])
			} else if value.Valid {
				bi.InvoicingAppID = value.String
			}
		case billinginvoice.FieldPaymentAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_app_id", values[i])
			} else if value.Valid {
				bi.PaymentAppID = value.String
			}
		case billinginvoice.FieldInvoicingAppExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoicing_app_external_id", values[i])
			} else if value.Valid {
				bi.InvoicingAppExternalID = new(string)
				*bi.InvoicingAppExternalID = value.String
			}
		case billinginvoice.FieldPaymentAppExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_app_external_id", values[i])
			} else if value.Valid {
				bi.PaymentAppExternalID = new(string)
				*bi.PaymentAppExternalID = value.String
			}
		case billinginvoice.FieldPeriodStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_start", values[i])
			} else if value.Valid {
				bi.PeriodStart = new(time.Time)
				*bi.PeriodStart = value.Time
			}
		case billinginvoice.FieldPeriodEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_end", values[i])
			} else if value.Valid {
				bi.PeriodEnd = new(time.Time)
				*bi.PeriodEnd = value.Time
			}
		default:
			bi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingInvoice.
// This includes values selected through modifiers, order, etc.
func (bi *BillingInvoice) Value(name string) (ent.Value, error) {
	return bi.selectValues.Get(name)
}

// QuerySourceBillingProfile queries the "source_billing_profile" edge of the BillingInvoice entity.
func (bi *BillingInvoice) QuerySourceBillingProfile() *BillingProfileQuery {
	return NewBillingInvoiceClient(bi.config).QuerySourceBillingProfile(bi)
}

// QueryBillingWorkflowConfig queries the "billing_workflow_config" edge of the BillingInvoice entity.
func (bi *BillingInvoice) QueryBillingWorkflowConfig() *BillingWorkflowConfigQuery {
	return NewBillingInvoiceClient(bi.config).QueryBillingWorkflowConfig(bi)
}

// QueryBillingInvoiceLines queries the "billing_invoice_lines" edge of the BillingInvoice entity.
func (bi *BillingInvoice) QueryBillingInvoiceLines() *BillingInvoiceLineQuery {
	return NewBillingInvoiceClient(bi.config).QueryBillingInvoiceLines(bi)
}

// QueryBillingInvoiceValidationIssues queries the "billing_invoice_validation_issues" edge of the BillingInvoice entity.
func (bi *BillingInvoice) QueryBillingInvoiceValidationIssues() *BillingInvoiceValidationIssueQuery {
	return NewBillingInvoiceClient(bi.config).QueryBillingInvoiceValidationIssues(bi)
}

// QueryBillingInvoiceCustomer queries the "billing_invoice_customer" edge of the BillingInvoice entity.
func (bi *BillingInvoice) QueryBillingInvoiceCustomer() *CustomerQuery {
	return NewBillingInvoiceClient(bi.config).QueryBillingInvoiceCustomer(bi)
}

// QueryTaxApp queries the "tax_app" edge of the BillingInvoice entity.
func (bi *BillingInvoice) QueryTaxApp() *AppQuery {
	return NewBillingInvoiceClient(bi.config).QueryTaxApp(bi)
}

// QueryInvoicingApp queries the "invoicing_app" edge of the BillingInvoice entity.
func (bi *BillingInvoice) QueryInvoicingApp() *AppQuery {
	return NewBillingInvoiceClient(bi.config).QueryInvoicingApp(bi)
}

// QueryPaymentApp queries the "payment_app" edge of the BillingInvoice entity.
func (bi *BillingInvoice) QueryPaymentApp() *AppQuery {
	return NewBillingInvoiceClient(bi.config).QueryPaymentApp(bi)
}

// QueryInvoiceDiscounts queries the "invoice_discounts" edge of the BillingInvoice entity.
func (bi *BillingInvoice) QueryInvoiceDiscounts() *BillingInvoiceDiscountQuery {
	return NewBillingInvoiceClient(bi.config).QueryInvoiceDiscounts(bi)
}

// Update returns a builder for updating this BillingInvoice.
// Note that you need to call BillingInvoice.Unwrap() before calling this method if this BillingInvoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (bi *BillingInvoice) Update() *BillingInvoiceUpdateOne {
	return NewBillingInvoiceClient(bi.config).UpdateOne(bi)
}

// Unwrap unwraps the BillingInvoice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bi *BillingInvoice) Unwrap() *BillingInvoice {
	_tx, ok := bi.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingInvoice is not a transactional entity")
	}
	bi.config.driver = _tx.drv
	return bi
}

// String implements the fmt.Stringer.
func (bi *BillingInvoice) String() string {
	var builder strings.Builder
	builder.WriteString("BillingInvoice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bi.ID))
	builder.WriteString("namespace=")
	builder.WriteString(bi.Namespace)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", bi.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bi.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := bi.SupplierAddressCountry; v != nil {
		builder.WriteString("supplier_address_country=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bi.SupplierAddressPostalCode; v != nil {
		builder.WriteString("supplier_address_postal_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := bi.SupplierAddressState; v != nil {
		builder.WriteString("supplier_address_state=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := bi.SupplierAddressCity; v != nil {
		builder.WriteString("supplier_address_city=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := bi.SupplierAddressLine1; v != nil {
		builder.WriteString("supplier_address_line1=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := bi.SupplierAddressLine2; v != nil {
		builder.WriteString("supplier_address_line2=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := bi.SupplierAddressPhoneNumber; v != nil {
		builder.WriteString("supplier_address_phone_number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := bi.CustomerAddressCountry; v != nil {
		builder.WriteString("customer_address_country=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := bi.CustomerAddressPostalCode; v != nil {
		builder.WriteString("customer_address_postal_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := bi.CustomerAddressState; v != nil {
		builder.WriteString("customer_address_state=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := bi.CustomerAddressCity; v != nil {
		builder.WriteString("customer_address_city=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := bi.CustomerAddressLine1; v != nil {
		builder.WriteString("customer_address_line1=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := bi.CustomerAddressLine2; v != nil {
		builder.WriteString("customer_address_line2=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := bi.CustomerAddressPhoneNumber; v != nil {
		builder.WriteString("customer_address_phone_number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", bi.Amount))
	builder.WriteString(", ")
	builder.WriteString("taxes_total=")
	builder.WriteString(fmt.Sprintf("%v", bi.TaxesTotal))
	builder.WriteString(", ")
	builder.WriteString("taxes_inclusive_total=")
	builder.WriteString(fmt.Sprintf("%v", bi.TaxesInclusiveTotal))
	builder.WriteString(", ")
	builder.WriteString("taxes_exclusive_total=")
	builder.WriteString(fmt.Sprintf("%v", bi.TaxesExclusiveTotal))
	builder.WriteString(", ")
	builder.WriteString("charges_total=")
	builder.WriteString(fmt.Sprintf("%v", bi.ChargesTotal))
	builder.WriteString(", ")
	builder.WriteString("discounts_total=")
	builder.WriteString(fmt.Sprintf("%v", bi.DiscountsTotal))
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", bi.Total))
	builder.WriteString(", ")
	builder.WriteString("supplier_name=")
	builder.WriteString(bi.SupplierName)
	builder.WriteString(", ")
	if v := bi.SupplierTaxCode; v != nil {
		builder.WriteString("supplier_tax_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("customer_name=")
	builder.WriteString(bi.CustomerName)
	builder.WriteString(", ")
	builder.WriteString("customer_usage_attribution=")
	builder.WriteString(fmt.Sprintf("%v", bi.CustomerUsageAttribution))
	builder.WriteString(", ")
	if v := bi.Number; v != nil {
		builder.WriteString("number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", bi.Type))
	builder.WriteString(", ")
	if v := bi.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(bi.CustomerID)
	builder.WriteString(", ")
	builder.WriteString("source_billing_profile_id=")
	builder.WriteString(bi.SourceBillingProfileID)
	builder.WriteString(", ")
	if v := bi.VoidedAt; v != nil {
		builder.WriteString("voided_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := bi.IssuedAt; v != nil {
		builder.WriteString("issued_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := bi.DraftUntil; v != nil {
		builder.WriteString("draft_until=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(fmt.Sprintf("%v", bi.Currency))
	builder.WriteString(", ")
	if v := bi.DueAt; v != nil {
		builder.WriteString("due_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", bi.Status))
	builder.WriteString(", ")
	builder.WriteString("workflow_config_id=")
	builder.WriteString(bi.WorkflowConfigID)
	builder.WriteString(", ")
	builder.WriteString("tax_app_id=")
	builder.WriteString(bi.TaxAppID)
	builder.WriteString(", ")
	builder.WriteString("invoicing_app_id=")
	builder.WriteString(bi.InvoicingAppID)
	builder.WriteString(", ")
	builder.WriteString("payment_app_id=")
	builder.WriteString(bi.PaymentAppID)
	builder.WriteString(", ")
	if v := bi.InvoicingAppExternalID; v != nil {
		builder.WriteString("invoicing_app_external_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := bi.PaymentAppExternalID; v != nil {
		builder.WriteString("payment_app_external_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := bi.PeriodStart; v != nil {
		builder.WriteString("period_start=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := bi.PeriodEnd; v != nil {
		builder.WriteString("period_end=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BillingInvoices is a parsable slice of BillingInvoice.
type BillingInvoices []*BillingInvoice
