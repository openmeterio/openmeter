// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	billingentity "github.com/openmeterio/openmeter/openmeter/billing/entity"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingprofile"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfig"
)

// BillingInvoice is the model entity for the BillingInvoice schema.
type BillingInvoice struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Series holds the value of the "series" field.
	Series *string `json:"series,omitempty"`
	// Code holds the value of the "code" field.
	Code *string `json:"code,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID string `json:"customer_id,omitempty"`
	// BillingProfileID holds the value of the "billing_profile_id" field.
	BillingProfileID string `json:"billing_profile_id,omitempty"`
	// VoidedAt holds the value of the "voided_at" field.
	VoidedAt time.Time `json:"voided_at,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// DueDate holds the value of the "due_date" field.
	DueDate time.Time `json:"due_date,omitempty"`
	// Status holds the value of the "status" field.
	Status billingentity.InvoiceStatus `json:"status,omitempty"`
	// WorkflowConfigID holds the value of the "workflow_config_id" field.
	WorkflowConfigID string `json:"workflow_config_id,omitempty"`
	// PeriodStart holds the value of the "period_start" field.
	PeriodStart time.Time `json:"period_start,omitempty"`
	// PeriodEnd holds the value of the "period_end" field.
	PeriodEnd time.Time `json:"period_end,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingInvoiceQuery when eager-loading is set.
	Edges        BillingInvoiceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillingInvoiceEdges holds the relations/edges for other nodes in the graph.
type BillingInvoiceEdges struct {
	// BillingProfile holds the value of the billing_profile edge.
	BillingProfile *BillingProfile `json:"billing_profile,omitempty"`
	// BillingWorkflowConfig holds the value of the billing_workflow_config edge.
	BillingWorkflowConfig *BillingWorkflowConfig `json:"billing_workflow_config,omitempty"`
	// BillingInvoiceItems holds the value of the billing_invoice_items edge.
	BillingInvoiceItems []*BillingInvoiceItem `json:"billing_invoice_items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// BillingProfileOrErr returns the BillingProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceEdges) BillingProfileOrErr() (*BillingProfile, error) {
	if e.BillingProfile != nil {
		return e.BillingProfile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: billingprofile.Label}
	}
	return nil, &NotLoadedError{edge: "billing_profile"}
}

// BillingWorkflowConfigOrErr returns the BillingWorkflowConfig value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceEdges) BillingWorkflowConfigOrErr() (*BillingWorkflowConfig, error) {
	if e.BillingWorkflowConfig != nil {
		return e.BillingWorkflowConfig, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: billingworkflowconfig.Label}
	}
	return nil, &NotLoadedError{edge: "billing_workflow_config"}
}

// BillingInvoiceItemsOrErr returns the BillingInvoiceItems value or an error if the edge
// was not loaded in eager-loading.
func (e BillingInvoiceEdges) BillingInvoiceItemsOrErr() ([]*BillingInvoiceItem, error) {
	if e.loadedTypes[2] {
		return e.BillingInvoiceItems, nil
	}
	return nil, &NotLoadedError{edge: "billing_invoice_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingInvoice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billinginvoice.FieldMetadata:
			values[i] = new([]byte)
		case billinginvoice.FieldID, billinginvoice.FieldNamespace, billinginvoice.FieldSeries, billinginvoice.FieldCode, billinginvoice.FieldCustomerID, billinginvoice.FieldBillingProfileID, billinginvoice.FieldCurrency, billinginvoice.FieldStatus, billinginvoice.FieldWorkflowConfigID:
			values[i] = new(sql.NullString)
		case billinginvoice.FieldCreatedAt, billinginvoice.FieldUpdatedAt, billinginvoice.FieldDeletedAt, billinginvoice.FieldVoidedAt, billinginvoice.FieldDueDate, billinginvoice.FieldPeriodStart, billinginvoice.FieldPeriodEnd:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingInvoice fields.
func (bi *BillingInvoice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billinginvoice.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bi.ID = value.String
			}
		case billinginvoice.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				bi.Namespace = value.String
			}
		case billinginvoice.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bi.CreatedAt = value.Time
			}
		case billinginvoice.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bi.UpdatedAt = value.Time
			}
		case billinginvoice.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bi.DeletedAt = new(time.Time)
				*bi.DeletedAt = value.Time
			}
		case billinginvoice.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bi.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case billinginvoice.FieldSeries:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field series", values[i])
			} else if value.Valid {
				bi.Series = new(string)
				*bi.Series = value.String
			}
		case billinginvoice.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				bi.Code = new(string)
				*bi.Code = value.String
			}
		case billinginvoice.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				bi.CustomerID = value.String
			}
		case billinginvoice.FieldBillingProfileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_profile_id", values[i])
			} else if value.Valid {
				bi.BillingProfileID = value.String
			}
		case billinginvoice.FieldVoidedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field voided_at", values[i])
			} else if value.Valid {
				bi.VoidedAt = value.Time
			}
		case billinginvoice.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				bi.Currency = value.String
			}
		case billinginvoice.FieldDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[i])
			} else if value.Valid {
				bi.DueDate = value.Time
			}
		case billinginvoice.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				bi.Status = billingentity.InvoiceStatus(value.String)
			}
		case billinginvoice.FieldWorkflowConfigID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_config_id", values[i])
			} else if value.Valid {
				bi.WorkflowConfigID = value.String
			}
		case billinginvoice.FieldPeriodStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_start", values[i])
			} else if value.Valid {
				bi.PeriodStart = value.Time
			}
		case billinginvoice.FieldPeriodEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_end", values[i])
			} else if value.Valid {
				bi.PeriodEnd = value.Time
			}
		default:
			bi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingInvoice.
// This includes values selected through modifiers, order, etc.
func (bi *BillingInvoice) Value(name string) (ent.Value, error) {
	return bi.selectValues.Get(name)
}

// QueryBillingProfile queries the "billing_profile" edge of the BillingInvoice entity.
func (bi *BillingInvoice) QueryBillingProfile() *BillingProfileQuery {
	return NewBillingInvoiceClient(bi.config).QueryBillingProfile(bi)
}

// QueryBillingWorkflowConfig queries the "billing_workflow_config" edge of the BillingInvoice entity.
func (bi *BillingInvoice) QueryBillingWorkflowConfig() *BillingWorkflowConfigQuery {
	return NewBillingInvoiceClient(bi.config).QueryBillingWorkflowConfig(bi)
}

// QueryBillingInvoiceItems queries the "billing_invoice_items" edge of the BillingInvoice entity.
func (bi *BillingInvoice) QueryBillingInvoiceItems() *BillingInvoiceItemQuery {
	return NewBillingInvoiceClient(bi.config).QueryBillingInvoiceItems(bi)
}

// Update returns a builder for updating this BillingInvoice.
// Note that you need to call BillingInvoice.Unwrap() before calling this method if this BillingInvoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (bi *BillingInvoice) Update() *BillingInvoiceUpdateOne {
	return NewBillingInvoiceClient(bi.config).UpdateOne(bi)
}

// Unwrap unwraps the BillingInvoice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bi *BillingInvoice) Unwrap() *BillingInvoice {
	_tx, ok := bi.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingInvoice is not a transactional entity")
	}
	bi.config.driver = _tx.drv
	return bi
}

// String implements the fmt.Stringer.
func (bi *BillingInvoice) String() string {
	var builder strings.Builder
	builder.WriteString("BillingInvoice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bi.ID))
	builder.WriteString("namespace=")
	builder.WriteString(bi.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bi.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", bi.Metadata))
	builder.WriteString(", ")
	if v := bi.Series; v != nil {
		builder.WriteString("series=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := bi.Code; v != nil {
		builder.WriteString("code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(bi.CustomerID)
	builder.WriteString(", ")
	builder.WriteString("billing_profile_id=")
	builder.WriteString(bi.BillingProfileID)
	builder.WriteString(", ")
	builder.WriteString("voided_at=")
	builder.WriteString(bi.VoidedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(bi.Currency)
	builder.WriteString(", ")
	builder.WriteString("due_date=")
	builder.WriteString(bi.DueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", bi.Status))
	builder.WriteString(", ")
	builder.WriteString("workflow_config_id=")
	builder.WriteString(bi.WorkflowConfigID)
	builder.WriteString(", ")
	builder.WriteString("period_start=")
	builder.WriteString(bi.PeriodStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("period_end=")
	builder.WriteString(bi.PeriodEnd.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BillingInvoices is a parsable slice of BillingInvoice.
type BillingInvoices []*BillingInvoice
