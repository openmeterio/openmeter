// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicediscount"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingInvoiceDiscountDelete is the builder for deleting a BillingInvoiceDiscount entity.
type BillingInvoiceDiscountDelete struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceDiscountMutation
}

// Where appends a list predicates to the BillingInvoiceDiscountDelete builder.
func (bidd *BillingInvoiceDiscountDelete) Where(ps ...predicate.BillingInvoiceDiscount) *BillingInvoiceDiscountDelete {
	bidd.mutation.Where(ps...)
	return bidd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bidd *BillingInvoiceDiscountDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bidd.sqlExec, bidd.mutation, bidd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bidd *BillingInvoiceDiscountDelete) ExecX(ctx context.Context) int {
	n, err := bidd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bidd *BillingInvoiceDiscountDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(billinginvoicediscount.Table, sqlgraph.NewFieldSpec(billinginvoicediscount.FieldID, field.TypeString))
	if ps := bidd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bidd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bidd.mutation.done = true
	return affected, err
}

// BillingInvoiceDiscountDeleteOne is the builder for deleting a single BillingInvoiceDiscount entity.
type BillingInvoiceDiscountDeleteOne struct {
	bidd *BillingInvoiceDiscountDelete
}

// Where appends a list predicates to the BillingInvoiceDiscountDelete builder.
func (biddo *BillingInvoiceDiscountDeleteOne) Where(ps ...predicate.BillingInvoiceDiscount) *BillingInvoiceDiscountDeleteOne {
	biddo.bidd.mutation.Where(ps...)
	return biddo
}

// Exec executes the deletion query.
func (biddo *BillingInvoiceDiscountDeleteOne) Exec(ctx context.Context) error {
	n, err := biddo.bidd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{billinginvoicediscount.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (biddo *BillingInvoiceDiscountDeleteOne) ExecX(ctx context.Context) {
	if err := biddo.Exec(ctx); err != nil {
		panic(err)
	}
}
