// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomeroverride"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingprofile"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/isodate"
)

// BillingCustomerOverrideUpdate is the builder for updating BillingCustomerOverride entities.
type BillingCustomerOverrideUpdate struct {
	config
	hooks    []Hook
	mutation *BillingCustomerOverrideMutation
}

// Where appends a list predicates to the BillingCustomerOverrideUpdate builder.
func (_u *BillingCustomerOverrideUpdate) Where(ps ...predicate.BillingCustomerOverride) *BillingCustomerOverrideUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BillingCustomerOverrideUpdate) SetUpdatedAt(v time.Time) *BillingCustomerOverrideUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *BillingCustomerOverrideUpdate) SetDeletedAt(v time.Time) *BillingCustomerOverrideUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdate) SetNillableDeletedAt(v *time.Time) *BillingCustomerOverrideUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *BillingCustomerOverrideUpdate) ClearDeletedAt() *BillingCustomerOverrideUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetBillingProfileID sets the "billing_profile_id" field.
func (_u *BillingCustomerOverrideUpdate) SetBillingProfileID(v string) *BillingCustomerOverrideUpdate {
	_u.mutation.SetBillingProfileID(v)
	return _u
}

// SetNillableBillingProfileID sets the "billing_profile_id" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdate) SetNillableBillingProfileID(v *string) *BillingCustomerOverrideUpdate {
	if v != nil {
		_u.SetBillingProfileID(*v)
	}
	return _u
}

// ClearBillingProfileID clears the value of the "billing_profile_id" field.
func (_u *BillingCustomerOverrideUpdate) ClearBillingProfileID() *BillingCustomerOverrideUpdate {
	_u.mutation.ClearBillingProfileID()
	return _u
}

// SetCollectionAlignment sets the "collection_alignment" field.
func (_u *BillingCustomerOverrideUpdate) SetCollectionAlignment(v billing.AlignmentKind) *BillingCustomerOverrideUpdate {
	_u.mutation.SetCollectionAlignment(v)
	return _u
}

// SetNillableCollectionAlignment sets the "collection_alignment" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdate) SetNillableCollectionAlignment(v *billing.AlignmentKind) *BillingCustomerOverrideUpdate {
	if v != nil {
		_u.SetCollectionAlignment(*v)
	}
	return _u
}

// ClearCollectionAlignment clears the value of the "collection_alignment" field.
func (_u *BillingCustomerOverrideUpdate) ClearCollectionAlignment() *BillingCustomerOverrideUpdate {
	_u.mutation.ClearCollectionAlignment()
	return _u
}

// SetLineCollectionPeriod sets the "line_collection_period" field.
func (_u *BillingCustomerOverrideUpdate) SetLineCollectionPeriod(v isodate.String) *BillingCustomerOverrideUpdate {
	_u.mutation.SetLineCollectionPeriod(v)
	return _u
}

// SetNillableLineCollectionPeriod sets the "line_collection_period" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdate) SetNillableLineCollectionPeriod(v *isodate.String) *BillingCustomerOverrideUpdate {
	if v != nil {
		_u.SetLineCollectionPeriod(*v)
	}
	return _u
}

// ClearLineCollectionPeriod clears the value of the "line_collection_period" field.
func (_u *BillingCustomerOverrideUpdate) ClearLineCollectionPeriod() *BillingCustomerOverrideUpdate {
	_u.mutation.ClearLineCollectionPeriod()
	return _u
}

// SetInvoiceAutoAdvance sets the "invoice_auto_advance" field.
func (_u *BillingCustomerOverrideUpdate) SetInvoiceAutoAdvance(v bool) *BillingCustomerOverrideUpdate {
	_u.mutation.SetInvoiceAutoAdvance(v)
	return _u
}

// SetNillableInvoiceAutoAdvance sets the "invoice_auto_advance" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdate) SetNillableInvoiceAutoAdvance(v *bool) *BillingCustomerOverrideUpdate {
	if v != nil {
		_u.SetInvoiceAutoAdvance(*v)
	}
	return _u
}

// ClearInvoiceAutoAdvance clears the value of the "invoice_auto_advance" field.
func (_u *BillingCustomerOverrideUpdate) ClearInvoiceAutoAdvance() *BillingCustomerOverrideUpdate {
	_u.mutation.ClearInvoiceAutoAdvance()
	return _u
}

// SetInvoiceDraftPeriod sets the "invoice_draft_period" field.
func (_u *BillingCustomerOverrideUpdate) SetInvoiceDraftPeriod(v isodate.String) *BillingCustomerOverrideUpdate {
	_u.mutation.SetInvoiceDraftPeriod(v)
	return _u
}

// SetNillableInvoiceDraftPeriod sets the "invoice_draft_period" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdate) SetNillableInvoiceDraftPeriod(v *isodate.String) *BillingCustomerOverrideUpdate {
	if v != nil {
		_u.SetInvoiceDraftPeriod(*v)
	}
	return _u
}

// ClearInvoiceDraftPeriod clears the value of the "invoice_draft_period" field.
func (_u *BillingCustomerOverrideUpdate) ClearInvoiceDraftPeriod() *BillingCustomerOverrideUpdate {
	_u.mutation.ClearInvoiceDraftPeriod()
	return _u
}

// SetInvoiceDueAfter sets the "invoice_due_after" field.
func (_u *BillingCustomerOverrideUpdate) SetInvoiceDueAfter(v isodate.String) *BillingCustomerOverrideUpdate {
	_u.mutation.SetInvoiceDueAfter(v)
	return _u
}

// SetNillableInvoiceDueAfter sets the "invoice_due_after" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdate) SetNillableInvoiceDueAfter(v *isodate.String) *BillingCustomerOverrideUpdate {
	if v != nil {
		_u.SetInvoiceDueAfter(*v)
	}
	return _u
}

// ClearInvoiceDueAfter clears the value of the "invoice_due_after" field.
func (_u *BillingCustomerOverrideUpdate) ClearInvoiceDueAfter() *BillingCustomerOverrideUpdate {
	_u.mutation.ClearInvoiceDueAfter()
	return _u
}

// SetInvoiceCollectionMethod sets the "invoice_collection_method" field.
func (_u *BillingCustomerOverrideUpdate) SetInvoiceCollectionMethod(v billing.CollectionMethod) *BillingCustomerOverrideUpdate {
	_u.mutation.SetInvoiceCollectionMethod(v)
	return _u
}

// SetNillableInvoiceCollectionMethod sets the "invoice_collection_method" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdate) SetNillableInvoiceCollectionMethod(v *billing.CollectionMethod) *BillingCustomerOverrideUpdate {
	if v != nil {
		_u.SetInvoiceCollectionMethod(*v)
	}
	return _u
}

// ClearInvoiceCollectionMethod clears the value of the "invoice_collection_method" field.
func (_u *BillingCustomerOverrideUpdate) ClearInvoiceCollectionMethod() *BillingCustomerOverrideUpdate {
	_u.mutation.ClearInvoiceCollectionMethod()
	return _u
}

// SetInvoiceProgressiveBilling sets the "invoice_progressive_billing" field.
func (_u *BillingCustomerOverrideUpdate) SetInvoiceProgressiveBilling(v bool) *BillingCustomerOverrideUpdate {
	_u.mutation.SetInvoiceProgressiveBilling(v)
	return _u
}

// SetNillableInvoiceProgressiveBilling sets the "invoice_progressive_billing" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdate) SetNillableInvoiceProgressiveBilling(v *bool) *BillingCustomerOverrideUpdate {
	if v != nil {
		_u.SetInvoiceProgressiveBilling(*v)
	}
	return _u
}

// ClearInvoiceProgressiveBilling clears the value of the "invoice_progressive_billing" field.
func (_u *BillingCustomerOverrideUpdate) ClearInvoiceProgressiveBilling() *BillingCustomerOverrideUpdate {
	_u.mutation.ClearInvoiceProgressiveBilling()
	return _u
}

// SetInvoiceDefaultTaxConfig sets the "invoice_default_tax_config" field.
func (_u *BillingCustomerOverrideUpdate) SetInvoiceDefaultTaxConfig(v productcatalog.TaxConfig) *BillingCustomerOverrideUpdate {
	_u.mutation.SetInvoiceDefaultTaxConfig(v)
	return _u
}

// SetNillableInvoiceDefaultTaxConfig sets the "invoice_default_tax_config" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdate) SetNillableInvoiceDefaultTaxConfig(v *productcatalog.TaxConfig) *BillingCustomerOverrideUpdate {
	if v != nil {
		_u.SetInvoiceDefaultTaxConfig(*v)
	}
	return _u
}

// ClearInvoiceDefaultTaxConfig clears the value of the "invoice_default_tax_config" field.
func (_u *BillingCustomerOverrideUpdate) ClearInvoiceDefaultTaxConfig() *BillingCustomerOverrideUpdate {
	_u.mutation.ClearInvoiceDefaultTaxConfig()
	return _u
}

// SetBillingProfile sets the "billing_profile" edge to the BillingProfile entity.
func (_u *BillingCustomerOverrideUpdate) SetBillingProfile(v *BillingProfile) *BillingCustomerOverrideUpdate {
	return _u.SetBillingProfileID(v.ID)
}

// Mutation returns the BillingCustomerOverrideMutation object of the builder.
func (_u *BillingCustomerOverrideUpdate) Mutation() *BillingCustomerOverrideMutation {
	return _u.mutation
}

// ClearBillingProfile clears the "billing_profile" edge to the BillingProfile entity.
func (_u *BillingCustomerOverrideUpdate) ClearBillingProfile() *BillingCustomerOverrideUpdate {
	_u.mutation.ClearBillingProfile()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BillingCustomerOverrideUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BillingCustomerOverrideUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BillingCustomerOverrideUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BillingCustomerOverrideUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BillingCustomerOverrideUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := billingcustomeroverride.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BillingCustomerOverrideUpdate) check() error {
	if v, ok := _u.mutation.CollectionAlignment(); ok {
		if err := billingcustomeroverride.CollectionAlignmentValidator(v); err != nil {
			return &ValidationError{Name: "collection_alignment", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.collection_alignment": %w`, err)}
		}
	}
	if v, ok := _u.mutation.InvoiceCollectionMethod(); ok {
		if err := billingcustomeroverride.InvoiceCollectionMethodValidator(v); err != nil {
			return &ValidationError{Name: "invoice_collection_method", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.invoice_collection_method": %w`, err)}
		}
	}
	if v, ok := _u.mutation.InvoiceDefaultTaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "invoice_default_tax_config", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.invoice_default_tax_config": %w`, err)}
		}
	}
	if _u.mutation.CustomerCleared() && len(_u.mutation.CustomerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingCustomerOverride.customer"`)
	}
	return nil
}

func (_u *BillingCustomerOverrideUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingcustomeroverride.Table, billingcustomeroverride.Columns, sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(billingcustomeroverride.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CollectionAlignment(); ok {
		_spec.SetField(billingcustomeroverride.FieldCollectionAlignment, field.TypeEnum, value)
	}
	if _u.mutation.CollectionAlignmentCleared() {
		_spec.ClearField(billingcustomeroverride.FieldCollectionAlignment, field.TypeEnum)
	}
	if value, ok := _u.mutation.LineCollectionPeriod(); ok {
		_spec.SetField(billingcustomeroverride.FieldLineCollectionPeriod, field.TypeString, value)
	}
	if _u.mutation.LineCollectionPeriodCleared() {
		_spec.ClearField(billingcustomeroverride.FieldLineCollectionPeriod, field.TypeString)
	}
	if value, ok := _u.mutation.InvoiceAutoAdvance(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceAutoAdvance, field.TypeBool, value)
	}
	if _u.mutation.InvoiceAutoAdvanceCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceAutoAdvance, field.TypeBool)
	}
	if value, ok := _u.mutation.InvoiceDraftPeriod(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceDraftPeriod, field.TypeString, value)
	}
	if _u.mutation.InvoiceDraftPeriodCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceDraftPeriod, field.TypeString)
	}
	if value, ok := _u.mutation.InvoiceDueAfter(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceDueAfter, field.TypeString, value)
	}
	if _u.mutation.InvoiceDueAfterCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceDueAfter, field.TypeString)
	}
	if value, ok := _u.mutation.InvoiceCollectionMethod(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceCollectionMethod, field.TypeEnum, value)
	}
	if _u.mutation.InvoiceCollectionMethodCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceCollectionMethod, field.TypeEnum)
	}
	if value, ok := _u.mutation.InvoiceProgressiveBilling(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceProgressiveBilling, field.TypeBool, value)
	}
	if _u.mutation.InvoiceProgressiveBillingCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceProgressiveBilling, field.TypeBool)
	}
	if value, ok := _u.mutation.InvoiceDefaultTaxConfig(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceDefaultTaxConfig, field.TypeJSON, value)
	}
	if _u.mutation.InvoiceDefaultTaxConfigCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceDefaultTaxConfig, field.TypeJSON)
	}
	if _u.mutation.BillingProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingcustomeroverride.BillingProfileTable,
			Columns: []string{billingcustomeroverride.BillingProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingcustomeroverride.BillingProfileTable,
			Columns: []string{billingcustomeroverride.BillingProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingcustomeroverride.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BillingCustomerOverrideUpdateOne is the builder for updating a single BillingCustomerOverride entity.
type BillingCustomerOverrideUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingCustomerOverrideMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BillingCustomerOverrideUpdateOne) SetUpdatedAt(v time.Time) *BillingCustomerOverrideUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *BillingCustomerOverrideUpdateOne) SetDeletedAt(v time.Time) *BillingCustomerOverrideUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdateOne) SetNillableDeletedAt(v *time.Time) *BillingCustomerOverrideUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *BillingCustomerOverrideUpdateOne) ClearDeletedAt() *BillingCustomerOverrideUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetBillingProfileID sets the "billing_profile_id" field.
func (_u *BillingCustomerOverrideUpdateOne) SetBillingProfileID(v string) *BillingCustomerOverrideUpdateOne {
	_u.mutation.SetBillingProfileID(v)
	return _u
}

// SetNillableBillingProfileID sets the "billing_profile_id" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdateOne) SetNillableBillingProfileID(v *string) *BillingCustomerOverrideUpdateOne {
	if v != nil {
		_u.SetBillingProfileID(*v)
	}
	return _u
}

// ClearBillingProfileID clears the value of the "billing_profile_id" field.
func (_u *BillingCustomerOverrideUpdateOne) ClearBillingProfileID() *BillingCustomerOverrideUpdateOne {
	_u.mutation.ClearBillingProfileID()
	return _u
}

// SetCollectionAlignment sets the "collection_alignment" field.
func (_u *BillingCustomerOverrideUpdateOne) SetCollectionAlignment(v billing.AlignmentKind) *BillingCustomerOverrideUpdateOne {
	_u.mutation.SetCollectionAlignment(v)
	return _u
}

// SetNillableCollectionAlignment sets the "collection_alignment" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdateOne) SetNillableCollectionAlignment(v *billing.AlignmentKind) *BillingCustomerOverrideUpdateOne {
	if v != nil {
		_u.SetCollectionAlignment(*v)
	}
	return _u
}

// ClearCollectionAlignment clears the value of the "collection_alignment" field.
func (_u *BillingCustomerOverrideUpdateOne) ClearCollectionAlignment() *BillingCustomerOverrideUpdateOne {
	_u.mutation.ClearCollectionAlignment()
	return _u
}

// SetLineCollectionPeriod sets the "line_collection_period" field.
func (_u *BillingCustomerOverrideUpdateOne) SetLineCollectionPeriod(v isodate.String) *BillingCustomerOverrideUpdateOne {
	_u.mutation.SetLineCollectionPeriod(v)
	return _u
}

// SetNillableLineCollectionPeriod sets the "line_collection_period" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdateOne) SetNillableLineCollectionPeriod(v *isodate.String) *BillingCustomerOverrideUpdateOne {
	if v != nil {
		_u.SetLineCollectionPeriod(*v)
	}
	return _u
}

// ClearLineCollectionPeriod clears the value of the "line_collection_period" field.
func (_u *BillingCustomerOverrideUpdateOne) ClearLineCollectionPeriod() *BillingCustomerOverrideUpdateOne {
	_u.mutation.ClearLineCollectionPeriod()
	return _u
}

// SetInvoiceAutoAdvance sets the "invoice_auto_advance" field.
func (_u *BillingCustomerOverrideUpdateOne) SetInvoiceAutoAdvance(v bool) *BillingCustomerOverrideUpdateOne {
	_u.mutation.SetInvoiceAutoAdvance(v)
	return _u
}

// SetNillableInvoiceAutoAdvance sets the "invoice_auto_advance" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdateOne) SetNillableInvoiceAutoAdvance(v *bool) *BillingCustomerOverrideUpdateOne {
	if v != nil {
		_u.SetInvoiceAutoAdvance(*v)
	}
	return _u
}

// ClearInvoiceAutoAdvance clears the value of the "invoice_auto_advance" field.
func (_u *BillingCustomerOverrideUpdateOne) ClearInvoiceAutoAdvance() *BillingCustomerOverrideUpdateOne {
	_u.mutation.ClearInvoiceAutoAdvance()
	return _u
}

// SetInvoiceDraftPeriod sets the "invoice_draft_period" field.
func (_u *BillingCustomerOverrideUpdateOne) SetInvoiceDraftPeriod(v isodate.String) *BillingCustomerOverrideUpdateOne {
	_u.mutation.SetInvoiceDraftPeriod(v)
	return _u
}

// SetNillableInvoiceDraftPeriod sets the "invoice_draft_period" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdateOne) SetNillableInvoiceDraftPeriod(v *isodate.String) *BillingCustomerOverrideUpdateOne {
	if v != nil {
		_u.SetInvoiceDraftPeriod(*v)
	}
	return _u
}

// ClearInvoiceDraftPeriod clears the value of the "invoice_draft_period" field.
func (_u *BillingCustomerOverrideUpdateOne) ClearInvoiceDraftPeriod() *BillingCustomerOverrideUpdateOne {
	_u.mutation.ClearInvoiceDraftPeriod()
	return _u
}

// SetInvoiceDueAfter sets the "invoice_due_after" field.
func (_u *BillingCustomerOverrideUpdateOne) SetInvoiceDueAfter(v isodate.String) *BillingCustomerOverrideUpdateOne {
	_u.mutation.SetInvoiceDueAfter(v)
	return _u
}

// SetNillableInvoiceDueAfter sets the "invoice_due_after" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdateOne) SetNillableInvoiceDueAfter(v *isodate.String) *BillingCustomerOverrideUpdateOne {
	if v != nil {
		_u.SetInvoiceDueAfter(*v)
	}
	return _u
}

// ClearInvoiceDueAfter clears the value of the "invoice_due_after" field.
func (_u *BillingCustomerOverrideUpdateOne) ClearInvoiceDueAfter() *BillingCustomerOverrideUpdateOne {
	_u.mutation.ClearInvoiceDueAfter()
	return _u
}

// SetInvoiceCollectionMethod sets the "invoice_collection_method" field.
func (_u *BillingCustomerOverrideUpdateOne) SetInvoiceCollectionMethod(v billing.CollectionMethod) *BillingCustomerOverrideUpdateOne {
	_u.mutation.SetInvoiceCollectionMethod(v)
	return _u
}

// SetNillableInvoiceCollectionMethod sets the "invoice_collection_method" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdateOne) SetNillableInvoiceCollectionMethod(v *billing.CollectionMethod) *BillingCustomerOverrideUpdateOne {
	if v != nil {
		_u.SetInvoiceCollectionMethod(*v)
	}
	return _u
}

// ClearInvoiceCollectionMethod clears the value of the "invoice_collection_method" field.
func (_u *BillingCustomerOverrideUpdateOne) ClearInvoiceCollectionMethod() *BillingCustomerOverrideUpdateOne {
	_u.mutation.ClearInvoiceCollectionMethod()
	return _u
}

// SetInvoiceProgressiveBilling sets the "invoice_progressive_billing" field.
func (_u *BillingCustomerOverrideUpdateOne) SetInvoiceProgressiveBilling(v bool) *BillingCustomerOverrideUpdateOne {
	_u.mutation.SetInvoiceProgressiveBilling(v)
	return _u
}

// SetNillableInvoiceProgressiveBilling sets the "invoice_progressive_billing" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdateOne) SetNillableInvoiceProgressiveBilling(v *bool) *BillingCustomerOverrideUpdateOne {
	if v != nil {
		_u.SetInvoiceProgressiveBilling(*v)
	}
	return _u
}

// ClearInvoiceProgressiveBilling clears the value of the "invoice_progressive_billing" field.
func (_u *BillingCustomerOverrideUpdateOne) ClearInvoiceProgressiveBilling() *BillingCustomerOverrideUpdateOne {
	_u.mutation.ClearInvoiceProgressiveBilling()
	return _u
}

// SetInvoiceDefaultTaxConfig sets the "invoice_default_tax_config" field.
func (_u *BillingCustomerOverrideUpdateOne) SetInvoiceDefaultTaxConfig(v productcatalog.TaxConfig) *BillingCustomerOverrideUpdateOne {
	_u.mutation.SetInvoiceDefaultTaxConfig(v)
	return _u
}

// SetNillableInvoiceDefaultTaxConfig sets the "invoice_default_tax_config" field if the given value is not nil.
func (_u *BillingCustomerOverrideUpdateOne) SetNillableInvoiceDefaultTaxConfig(v *productcatalog.TaxConfig) *BillingCustomerOverrideUpdateOne {
	if v != nil {
		_u.SetInvoiceDefaultTaxConfig(*v)
	}
	return _u
}

// ClearInvoiceDefaultTaxConfig clears the value of the "invoice_default_tax_config" field.
func (_u *BillingCustomerOverrideUpdateOne) ClearInvoiceDefaultTaxConfig() *BillingCustomerOverrideUpdateOne {
	_u.mutation.ClearInvoiceDefaultTaxConfig()
	return _u
}

// SetBillingProfile sets the "billing_profile" edge to the BillingProfile entity.
func (_u *BillingCustomerOverrideUpdateOne) SetBillingProfile(v *BillingProfile) *BillingCustomerOverrideUpdateOne {
	return _u.SetBillingProfileID(v.ID)
}

// Mutation returns the BillingCustomerOverrideMutation object of the builder.
func (_u *BillingCustomerOverrideUpdateOne) Mutation() *BillingCustomerOverrideMutation {
	return _u.mutation
}

// ClearBillingProfile clears the "billing_profile" edge to the BillingProfile entity.
func (_u *BillingCustomerOverrideUpdateOne) ClearBillingProfile() *BillingCustomerOverrideUpdateOne {
	_u.mutation.ClearBillingProfile()
	return _u
}

// Where appends a list predicates to the BillingCustomerOverrideUpdate builder.
func (_u *BillingCustomerOverrideUpdateOne) Where(ps ...predicate.BillingCustomerOverride) *BillingCustomerOverrideUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BillingCustomerOverrideUpdateOne) Select(field string, fields ...string) *BillingCustomerOverrideUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BillingCustomerOverride entity.
func (_u *BillingCustomerOverrideUpdateOne) Save(ctx context.Context) (*BillingCustomerOverride, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BillingCustomerOverrideUpdateOne) SaveX(ctx context.Context) *BillingCustomerOverride {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BillingCustomerOverrideUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BillingCustomerOverrideUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BillingCustomerOverrideUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := billingcustomeroverride.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BillingCustomerOverrideUpdateOne) check() error {
	if v, ok := _u.mutation.CollectionAlignment(); ok {
		if err := billingcustomeroverride.CollectionAlignmentValidator(v); err != nil {
			return &ValidationError{Name: "collection_alignment", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.collection_alignment": %w`, err)}
		}
	}
	if v, ok := _u.mutation.InvoiceCollectionMethod(); ok {
		if err := billingcustomeroverride.InvoiceCollectionMethodValidator(v); err != nil {
			return &ValidationError{Name: "invoice_collection_method", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.invoice_collection_method": %w`, err)}
		}
	}
	if v, ok := _u.mutation.InvoiceDefaultTaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "invoice_default_tax_config", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.invoice_default_tax_config": %w`, err)}
		}
	}
	if _u.mutation.CustomerCleared() && len(_u.mutation.CustomerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingCustomerOverride.customer"`)
	}
	return nil
}

func (_u *BillingCustomerOverrideUpdateOne) sqlSave(ctx context.Context) (_node *BillingCustomerOverride, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingcustomeroverride.Table, billingcustomeroverride.Columns, sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingCustomerOverride.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingcustomeroverride.FieldID)
		for _, f := range fields {
			if !billingcustomeroverride.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billingcustomeroverride.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(billingcustomeroverride.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CollectionAlignment(); ok {
		_spec.SetField(billingcustomeroverride.FieldCollectionAlignment, field.TypeEnum, value)
	}
	if _u.mutation.CollectionAlignmentCleared() {
		_spec.ClearField(billingcustomeroverride.FieldCollectionAlignment, field.TypeEnum)
	}
	if value, ok := _u.mutation.LineCollectionPeriod(); ok {
		_spec.SetField(billingcustomeroverride.FieldLineCollectionPeriod, field.TypeString, value)
	}
	if _u.mutation.LineCollectionPeriodCleared() {
		_spec.ClearField(billingcustomeroverride.FieldLineCollectionPeriod, field.TypeString)
	}
	if value, ok := _u.mutation.InvoiceAutoAdvance(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceAutoAdvance, field.TypeBool, value)
	}
	if _u.mutation.InvoiceAutoAdvanceCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceAutoAdvance, field.TypeBool)
	}
	if value, ok := _u.mutation.InvoiceDraftPeriod(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceDraftPeriod, field.TypeString, value)
	}
	if _u.mutation.InvoiceDraftPeriodCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceDraftPeriod, field.TypeString)
	}
	if value, ok := _u.mutation.InvoiceDueAfter(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceDueAfter, field.TypeString, value)
	}
	if _u.mutation.InvoiceDueAfterCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceDueAfter, field.TypeString)
	}
	if value, ok := _u.mutation.InvoiceCollectionMethod(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceCollectionMethod, field.TypeEnum, value)
	}
	if _u.mutation.InvoiceCollectionMethodCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceCollectionMethod, field.TypeEnum)
	}
	if value, ok := _u.mutation.InvoiceProgressiveBilling(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceProgressiveBilling, field.TypeBool, value)
	}
	if _u.mutation.InvoiceProgressiveBillingCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceProgressiveBilling, field.TypeBool)
	}
	if value, ok := _u.mutation.InvoiceDefaultTaxConfig(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceDefaultTaxConfig, field.TypeJSON, value)
	}
	if _u.mutation.InvoiceDefaultTaxConfigCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceDefaultTaxConfig, field.TypeJSON)
	}
	if _u.mutation.BillingProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingcustomeroverride.BillingProfileTable,
			Columns: []string{billingcustomeroverride.BillingProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingcustomeroverride.BillingProfileTable,
			Columns: []string{billingcustomeroverride.BillingProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingCustomerOverride{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingcustomeroverride.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
