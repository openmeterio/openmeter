// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomeroverride"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingprofile"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingCustomerOverrideUpdate is the builder for updating BillingCustomerOverride entities.
type BillingCustomerOverrideUpdate struct {
	config
	hooks    []Hook
	mutation *BillingCustomerOverrideMutation
}

// Where appends a list predicates to the BillingCustomerOverrideUpdate builder.
func (bcou *BillingCustomerOverrideUpdate) Where(ps ...predicate.BillingCustomerOverride) *BillingCustomerOverrideUpdate {
	bcou.mutation.Where(ps...)
	return bcou
}

// SetUpdatedAt sets the "updated_at" field.
func (bcou *BillingCustomerOverrideUpdate) SetUpdatedAt(t time.Time) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetUpdatedAt(t)
	return bcou
}

// SetDeletedAt sets the "deleted_at" field.
func (bcou *BillingCustomerOverrideUpdate) SetDeletedAt(t time.Time) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetDeletedAt(t)
	return bcou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillableDeletedAt(t *time.Time) *BillingCustomerOverrideUpdate {
	if t != nil {
		bcou.SetDeletedAt(*t)
	}
	return bcou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bcou *BillingCustomerOverrideUpdate) ClearDeletedAt() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearDeletedAt()
	return bcou
}

// SetBillingProfileID sets the "billing_profile_id" field.
func (bcou *BillingCustomerOverrideUpdate) SetBillingProfileID(s string) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetBillingProfileID(s)
	return bcou
}

// SetNillableBillingProfileID sets the "billing_profile_id" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillableBillingProfileID(s *string) *BillingCustomerOverrideUpdate {
	if s != nil {
		bcou.SetBillingProfileID(*s)
	}
	return bcou
}

// ClearBillingProfileID clears the value of the "billing_profile_id" field.
func (bcou *BillingCustomerOverrideUpdate) ClearBillingProfileID() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearBillingProfileID()
	return bcou
}

// SetCollectionAlignment sets the "collection_alignment" field.
func (bcou *BillingCustomerOverrideUpdate) SetCollectionAlignment(bk billing.AlignmentKind) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetCollectionAlignment(bk)
	return bcou
}

// SetNillableCollectionAlignment sets the "collection_alignment" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillableCollectionAlignment(bk *billing.AlignmentKind) *BillingCustomerOverrideUpdate {
	if bk != nil {
		bcou.SetCollectionAlignment(*bk)
	}
	return bcou
}

// ClearCollectionAlignment clears the value of the "collection_alignment" field.
func (bcou *BillingCustomerOverrideUpdate) ClearCollectionAlignment() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearCollectionAlignment()
	return bcou
}

// SetItemCollectionPeriodSeconds sets the "item_collection_period_seconds" field.
func (bcou *BillingCustomerOverrideUpdate) SetItemCollectionPeriodSeconds(i int64) *BillingCustomerOverrideUpdate {
	bcou.mutation.ResetItemCollectionPeriodSeconds()
	bcou.mutation.SetItemCollectionPeriodSeconds(i)
	return bcou
}

// SetNillableItemCollectionPeriodSeconds sets the "item_collection_period_seconds" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillableItemCollectionPeriodSeconds(i *int64) *BillingCustomerOverrideUpdate {
	if i != nil {
		bcou.SetItemCollectionPeriodSeconds(*i)
	}
	return bcou
}

// AddItemCollectionPeriodSeconds adds i to the "item_collection_period_seconds" field.
func (bcou *BillingCustomerOverrideUpdate) AddItemCollectionPeriodSeconds(i int64) *BillingCustomerOverrideUpdate {
	bcou.mutation.AddItemCollectionPeriodSeconds(i)
	return bcou
}

// ClearItemCollectionPeriodSeconds clears the value of the "item_collection_period_seconds" field.
func (bcou *BillingCustomerOverrideUpdate) ClearItemCollectionPeriodSeconds() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearItemCollectionPeriodSeconds()
	return bcou
}

// SetInvoiceAutoAdvance sets the "invoice_auto_advance" field.
func (bcou *BillingCustomerOverrideUpdate) SetInvoiceAutoAdvance(b bool) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetInvoiceAutoAdvance(b)
	return bcou
}

// SetNillableInvoiceAutoAdvance sets the "invoice_auto_advance" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillableInvoiceAutoAdvance(b *bool) *BillingCustomerOverrideUpdate {
	if b != nil {
		bcou.SetInvoiceAutoAdvance(*b)
	}
	return bcou
}

// ClearInvoiceAutoAdvance clears the value of the "invoice_auto_advance" field.
func (bcou *BillingCustomerOverrideUpdate) ClearInvoiceAutoAdvance() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearInvoiceAutoAdvance()
	return bcou
}

// SetInvoiceDraftPeriodSeconds sets the "invoice_draft_period_seconds" field.
func (bcou *BillingCustomerOverrideUpdate) SetInvoiceDraftPeriodSeconds(i int64) *BillingCustomerOverrideUpdate {
	bcou.mutation.ResetInvoiceDraftPeriodSeconds()
	bcou.mutation.SetInvoiceDraftPeriodSeconds(i)
	return bcou
}

// SetNillableInvoiceDraftPeriodSeconds sets the "invoice_draft_period_seconds" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillableInvoiceDraftPeriodSeconds(i *int64) *BillingCustomerOverrideUpdate {
	if i != nil {
		bcou.SetInvoiceDraftPeriodSeconds(*i)
	}
	return bcou
}

// AddInvoiceDraftPeriodSeconds adds i to the "invoice_draft_period_seconds" field.
func (bcou *BillingCustomerOverrideUpdate) AddInvoiceDraftPeriodSeconds(i int64) *BillingCustomerOverrideUpdate {
	bcou.mutation.AddInvoiceDraftPeriodSeconds(i)
	return bcou
}

// ClearInvoiceDraftPeriodSeconds clears the value of the "invoice_draft_period_seconds" field.
func (bcou *BillingCustomerOverrideUpdate) ClearInvoiceDraftPeriodSeconds() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearInvoiceDraftPeriodSeconds()
	return bcou
}

// SetInvoiceDueAfterSeconds sets the "invoice_due_after_seconds" field.
func (bcou *BillingCustomerOverrideUpdate) SetInvoiceDueAfterSeconds(i int64) *BillingCustomerOverrideUpdate {
	bcou.mutation.ResetInvoiceDueAfterSeconds()
	bcou.mutation.SetInvoiceDueAfterSeconds(i)
	return bcou
}

// SetNillableInvoiceDueAfterSeconds sets the "invoice_due_after_seconds" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillableInvoiceDueAfterSeconds(i *int64) *BillingCustomerOverrideUpdate {
	if i != nil {
		bcou.SetInvoiceDueAfterSeconds(*i)
	}
	return bcou
}

// AddInvoiceDueAfterSeconds adds i to the "invoice_due_after_seconds" field.
func (bcou *BillingCustomerOverrideUpdate) AddInvoiceDueAfterSeconds(i int64) *BillingCustomerOverrideUpdate {
	bcou.mutation.AddInvoiceDueAfterSeconds(i)
	return bcou
}

// ClearInvoiceDueAfterSeconds clears the value of the "invoice_due_after_seconds" field.
func (bcou *BillingCustomerOverrideUpdate) ClearInvoiceDueAfterSeconds() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearInvoiceDueAfterSeconds()
	return bcou
}

// SetInvoiceCollectionMethod sets the "invoice_collection_method" field.
func (bcou *BillingCustomerOverrideUpdate) SetInvoiceCollectionMethod(bm billing.CollectionMethod) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetInvoiceCollectionMethod(bm)
	return bcou
}

// SetNillableInvoiceCollectionMethod sets the "invoice_collection_method" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillableInvoiceCollectionMethod(bm *billing.CollectionMethod) *BillingCustomerOverrideUpdate {
	if bm != nil {
		bcou.SetInvoiceCollectionMethod(*bm)
	}
	return bcou
}

// ClearInvoiceCollectionMethod clears the value of the "invoice_collection_method" field.
func (bcou *BillingCustomerOverrideUpdate) ClearInvoiceCollectionMethod() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearInvoiceCollectionMethod()
	return bcou
}

// SetInvoiceItemResolution sets the "invoice_item_resolution" field.
func (bcou *BillingCustomerOverrideUpdate) SetInvoiceItemResolution(br billing.GranularityResolution) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetInvoiceItemResolution(br)
	return bcou
}

// SetNillableInvoiceItemResolution sets the "invoice_item_resolution" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillableInvoiceItemResolution(br *billing.GranularityResolution) *BillingCustomerOverrideUpdate {
	if br != nil {
		bcou.SetInvoiceItemResolution(*br)
	}
	return bcou
}

// ClearInvoiceItemResolution clears the value of the "invoice_item_resolution" field.
func (bcou *BillingCustomerOverrideUpdate) ClearInvoiceItemResolution() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearInvoiceItemResolution()
	return bcou
}

// SetInvoiceItemPerSubject sets the "invoice_item_per_subject" field.
func (bcou *BillingCustomerOverrideUpdate) SetInvoiceItemPerSubject(b bool) *BillingCustomerOverrideUpdate {
	bcou.mutation.SetInvoiceItemPerSubject(b)
	return bcou
}

// SetNillableInvoiceItemPerSubject sets the "invoice_item_per_subject" field if the given value is not nil.
func (bcou *BillingCustomerOverrideUpdate) SetNillableInvoiceItemPerSubject(b *bool) *BillingCustomerOverrideUpdate {
	if b != nil {
		bcou.SetInvoiceItemPerSubject(*b)
	}
	return bcou
}

// ClearInvoiceItemPerSubject clears the value of the "invoice_item_per_subject" field.
func (bcou *BillingCustomerOverrideUpdate) ClearInvoiceItemPerSubject() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearInvoiceItemPerSubject()
	return bcou
}

// SetBillingProfile sets the "billing_profile" edge to the BillingProfile entity.
func (bcou *BillingCustomerOverrideUpdate) SetBillingProfile(b *BillingProfile) *BillingCustomerOverrideUpdate {
	return bcou.SetBillingProfileID(b.ID)
}

// Mutation returns the BillingCustomerOverrideMutation object of the builder.
func (bcou *BillingCustomerOverrideUpdate) Mutation() *BillingCustomerOverrideMutation {
	return bcou.mutation
}

// ClearBillingProfile clears the "billing_profile" edge to the BillingProfile entity.
func (bcou *BillingCustomerOverrideUpdate) ClearBillingProfile() *BillingCustomerOverrideUpdate {
	bcou.mutation.ClearBillingProfile()
	return bcou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bcou *BillingCustomerOverrideUpdate) Save(ctx context.Context) (int, error) {
	bcou.defaults()
	return withHooks(ctx, bcou.sqlSave, bcou.mutation, bcou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcou *BillingCustomerOverrideUpdate) SaveX(ctx context.Context) int {
	affected, err := bcou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bcou *BillingCustomerOverrideUpdate) Exec(ctx context.Context) error {
	_, err := bcou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcou *BillingCustomerOverrideUpdate) ExecX(ctx context.Context) {
	if err := bcou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcou *BillingCustomerOverrideUpdate) defaults() {
	if _, ok := bcou.mutation.UpdatedAt(); !ok {
		v := billingcustomeroverride.UpdateDefaultUpdatedAt()
		bcou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcou *BillingCustomerOverrideUpdate) check() error {
	if v, ok := bcou.mutation.CollectionAlignment(); ok {
		if err := billingcustomeroverride.CollectionAlignmentValidator(v); err != nil {
			return &ValidationError{Name: "collection_alignment", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.collection_alignment": %w`, err)}
		}
	}
	if v, ok := bcou.mutation.InvoiceCollectionMethod(); ok {
		if err := billingcustomeroverride.InvoiceCollectionMethodValidator(v); err != nil {
			return &ValidationError{Name: "invoice_collection_method", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.invoice_collection_method": %w`, err)}
		}
	}
	if v, ok := bcou.mutation.InvoiceItemResolution(); ok {
		if err := billingcustomeroverride.InvoiceItemResolutionValidator(v); err != nil {
			return &ValidationError{Name: "invoice_item_resolution", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.invoice_item_resolution": %w`, err)}
		}
	}
	if bcou.mutation.CustomerCleared() && len(bcou.mutation.CustomerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingCustomerOverride.customer"`)
	}
	return nil
}

func (bcou *BillingCustomerOverrideUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bcou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingcustomeroverride.Table, billingcustomeroverride.Columns, sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString))
	if ps := bcou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcou.mutation.UpdatedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bcou.mutation.DeletedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldDeletedAt, field.TypeTime, value)
	}
	if bcou.mutation.DeletedAtCleared() {
		_spec.ClearField(billingcustomeroverride.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bcou.mutation.CollectionAlignment(); ok {
		_spec.SetField(billingcustomeroverride.FieldCollectionAlignment, field.TypeEnum, value)
	}
	if bcou.mutation.CollectionAlignmentCleared() {
		_spec.ClearField(billingcustomeroverride.FieldCollectionAlignment, field.TypeEnum)
	}
	if value, ok := bcou.mutation.ItemCollectionPeriodSeconds(); ok {
		_spec.SetField(billingcustomeroverride.FieldItemCollectionPeriodSeconds, field.TypeInt64, value)
	}
	if value, ok := bcou.mutation.AddedItemCollectionPeriodSeconds(); ok {
		_spec.AddField(billingcustomeroverride.FieldItemCollectionPeriodSeconds, field.TypeInt64, value)
	}
	if bcou.mutation.ItemCollectionPeriodSecondsCleared() {
		_spec.ClearField(billingcustomeroverride.FieldItemCollectionPeriodSeconds, field.TypeInt64)
	}
	if value, ok := bcou.mutation.InvoiceAutoAdvance(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceAutoAdvance, field.TypeBool, value)
	}
	if bcou.mutation.InvoiceAutoAdvanceCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceAutoAdvance, field.TypeBool)
	}
	if value, ok := bcou.mutation.InvoiceDraftPeriodSeconds(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceDraftPeriodSeconds, field.TypeInt64, value)
	}
	if value, ok := bcou.mutation.AddedInvoiceDraftPeriodSeconds(); ok {
		_spec.AddField(billingcustomeroverride.FieldInvoiceDraftPeriodSeconds, field.TypeInt64, value)
	}
	if bcou.mutation.InvoiceDraftPeriodSecondsCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceDraftPeriodSeconds, field.TypeInt64)
	}
	if value, ok := bcou.mutation.InvoiceDueAfterSeconds(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceDueAfterSeconds, field.TypeInt64, value)
	}
	if value, ok := bcou.mutation.AddedInvoiceDueAfterSeconds(); ok {
		_spec.AddField(billingcustomeroverride.FieldInvoiceDueAfterSeconds, field.TypeInt64, value)
	}
	if bcou.mutation.InvoiceDueAfterSecondsCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceDueAfterSeconds, field.TypeInt64)
	}
	if value, ok := bcou.mutation.InvoiceCollectionMethod(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceCollectionMethod, field.TypeEnum, value)
	}
	if bcou.mutation.InvoiceCollectionMethodCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceCollectionMethod, field.TypeEnum)
	}
	if value, ok := bcou.mutation.InvoiceItemResolution(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceItemResolution, field.TypeEnum, value)
	}
	if bcou.mutation.InvoiceItemResolutionCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceItemResolution, field.TypeEnum)
	}
	if value, ok := bcou.mutation.InvoiceItemPerSubject(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceItemPerSubject, field.TypeBool, value)
	}
	if bcou.mutation.InvoiceItemPerSubjectCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceItemPerSubject, field.TypeBool)
	}
	if bcou.mutation.BillingProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingcustomeroverride.BillingProfileTable,
			Columns: []string{billingcustomeroverride.BillingProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcou.mutation.BillingProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingcustomeroverride.BillingProfileTable,
			Columns: []string{billingcustomeroverride.BillingProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bcou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingcustomeroverride.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bcou.mutation.done = true
	return n, nil
}

// BillingCustomerOverrideUpdateOne is the builder for updating a single BillingCustomerOverride entity.
type BillingCustomerOverrideUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingCustomerOverrideMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetUpdatedAt(t time.Time) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetUpdatedAt(t)
	return bcouo
}

// SetDeletedAt sets the "deleted_at" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetDeletedAt(t time.Time) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetDeletedAt(t)
	return bcouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingCustomerOverrideUpdateOne {
	if t != nil {
		bcouo.SetDeletedAt(*t)
	}
	return bcouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearDeletedAt() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearDeletedAt()
	return bcouo
}

// SetBillingProfileID sets the "billing_profile_id" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetBillingProfileID(s string) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetBillingProfileID(s)
	return bcouo
}

// SetNillableBillingProfileID sets the "billing_profile_id" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillableBillingProfileID(s *string) *BillingCustomerOverrideUpdateOne {
	if s != nil {
		bcouo.SetBillingProfileID(*s)
	}
	return bcouo
}

// ClearBillingProfileID clears the value of the "billing_profile_id" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearBillingProfileID() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearBillingProfileID()
	return bcouo
}

// SetCollectionAlignment sets the "collection_alignment" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetCollectionAlignment(bk billing.AlignmentKind) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetCollectionAlignment(bk)
	return bcouo
}

// SetNillableCollectionAlignment sets the "collection_alignment" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillableCollectionAlignment(bk *billing.AlignmentKind) *BillingCustomerOverrideUpdateOne {
	if bk != nil {
		bcouo.SetCollectionAlignment(*bk)
	}
	return bcouo
}

// ClearCollectionAlignment clears the value of the "collection_alignment" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearCollectionAlignment() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearCollectionAlignment()
	return bcouo
}

// SetItemCollectionPeriodSeconds sets the "item_collection_period_seconds" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetItemCollectionPeriodSeconds(i int64) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ResetItemCollectionPeriodSeconds()
	bcouo.mutation.SetItemCollectionPeriodSeconds(i)
	return bcouo
}

// SetNillableItemCollectionPeriodSeconds sets the "item_collection_period_seconds" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillableItemCollectionPeriodSeconds(i *int64) *BillingCustomerOverrideUpdateOne {
	if i != nil {
		bcouo.SetItemCollectionPeriodSeconds(*i)
	}
	return bcouo
}

// AddItemCollectionPeriodSeconds adds i to the "item_collection_period_seconds" field.
func (bcouo *BillingCustomerOverrideUpdateOne) AddItemCollectionPeriodSeconds(i int64) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.AddItemCollectionPeriodSeconds(i)
	return bcouo
}

// ClearItemCollectionPeriodSeconds clears the value of the "item_collection_period_seconds" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearItemCollectionPeriodSeconds() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearItemCollectionPeriodSeconds()
	return bcouo
}

// SetInvoiceAutoAdvance sets the "invoice_auto_advance" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetInvoiceAutoAdvance(b bool) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetInvoiceAutoAdvance(b)
	return bcouo
}

// SetNillableInvoiceAutoAdvance sets the "invoice_auto_advance" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillableInvoiceAutoAdvance(b *bool) *BillingCustomerOverrideUpdateOne {
	if b != nil {
		bcouo.SetInvoiceAutoAdvance(*b)
	}
	return bcouo
}

// ClearInvoiceAutoAdvance clears the value of the "invoice_auto_advance" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearInvoiceAutoAdvance() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearInvoiceAutoAdvance()
	return bcouo
}

// SetInvoiceDraftPeriodSeconds sets the "invoice_draft_period_seconds" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetInvoiceDraftPeriodSeconds(i int64) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ResetInvoiceDraftPeriodSeconds()
	bcouo.mutation.SetInvoiceDraftPeriodSeconds(i)
	return bcouo
}

// SetNillableInvoiceDraftPeriodSeconds sets the "invoice_draft_period_seconds" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillableInvoiceDraftPeriodSeconds(i *int64) *BillingCustomerOverrideUpdateOne {
	if i != nil {
		bcouo.SetInvoiceDraftPeriodSeconds(*i)
	}
	return bcouo
}

// AddInvoiceDraftPeriodSeconds adds i to the "invoice_draft_period_seconds" field.
func (bcouo *BillingCustomerOverrideUpdateOne) AddInvoiceDraftPeriodSeconds(i int64) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.AddInvoiceDraftPeriodSeconds(i)
	return bcouo
}

// ClearInvoiceDraftPeriodSeconds clears the value of the "invoice_draft_period_seconds" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearInvoiceDraftPeriodSeconds() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearInvoiceDraftPeriodSeconds()
	return bcouo
}

// SetInvoiceDueAfterSeconds sets the "invoice_due_after_seconds" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetInvoiceDueAfterSeconds(i int64) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ResetInvoiceDueAfterSeconds()
	bcouo.mutation.SetInvoiceDueAfterSeconds(i)
	return bcouo
}

// SetNillableInvoiceDueAfterSeconds sets the "invoice_due_after_seconds" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillableInvoiceDueAfterSeconds(i *int64) *BillingCustomerOverrideUpdateOne {
	if i != nil {
		bcouo.SetInvoiceDueAfterSeconds(*i)
	}
	return bcouo
}

// AddInvoiceDueAfterSeconds adds i to the "invoice_due_after_seconds" field.
func (bcouo *BillingCustomerOverrideUpdateOne) AddInvoiceDueAfterSeconds(i int64) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.AddInvoiceDueAfterSeconds(i)
	return bcouo
}

// ClearInvoiceDueAfterSeconds clears the value of the "invoice_due_after_seconds" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearInvoiceDueAfterSeconds() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearInvoiceDueAfterSeconds()
	return bcouo
}

// SetInvoiceCollectionMethod sets the "invoice_collection_method" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetInvoiceCollectionMethod(bm billing.CollectionMethod) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetInvoiceCollectionMethod(bm)
	return bcouo
}

// SetNillableInvoiceCollectionMethod sets the "invoice_collection_method" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillableInvoiceCollectionMethod(bm *billing.CollectionMethod) *BillingCustomerOverrideUpdateOne {
	if bm != nil {
		bcouo.SetInvoiceCollectionMethod(*bm)
	}
	return bcouo
}

// ClearInvoiceCollectionMethod clears the value of the "invoice_collection_method" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearInvoiceCollectionMethod() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearInvoiceCollectionMethod()
	return bcouo
}

// SetInvoiceItemResolution sets the "invoice_item_resolution" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetInvoiceItemResolution(br billing.GranularityResolution) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetInvoiceItemResolution(br)
	return bcouo
}

// SetNillableInvoiceItemResolution sets the "invoice_item_resolution" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillableInvoiceItemResolution(br *billing.GranularityResolution) *BillingCustomerOverrideUpdateOne {
	if br != nil {
		bcouo.SetInvoiceItemResolution(*br)
	}
	return bcouo
}

// ClearInvoiceItemResolution clears the value of the "invoice_item_resolution" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearInvoiceItemResolution() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearInvoiceItemResolution()
	return bcouo
}

// SetInvoiceItemPerSubject sets the "invoice_item_per_subject" field.
func (bcouo *BillingCustomerOverrideUpdateOne) SetInvoiceItemPerSubject(b bool) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.SetInvoiceItemPerSubject(b)
	return bcouo
}

// SetNillableInvoiceItemPerSubject sets the "invoice_item_per_subject" field if the given value is not nil.
func (bcouo *BillingCustomerOverrideUpdateOne) SetNillableInvoiceItemPerSubject(b *bool) *BillingCustomerOverrideUpdateOne {
	if b != nil {
		bcouo.SetInvoiceItemPerSubject(*b)
	}
	return bcouo
}

// ClearInvoiceItemPerSubject clears the value of the "invoice_item_per_subject" field.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearInvoiceItemPerSubject() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearInvoiceItemPerSubject()
	return bcouo
}

// SetBillingProfile sets the "billing_profile" edge to the BillingProfile entity.
func (bcouo *BillingCustomerOverrideUpdateOne) SetBillingProfile(b *BillingProfile) *BillingCustomerOverrideUpdateOne {
	return bcouo.SetBillingProfileID(b.ID)
}

// Mutation returns the BillingCustomerOverrideMutation object of the builder.
func (bcouo *BillingCustomerOverrideUpdateOne) Mutation() *BillingCustomerOverrideMutation {
	return bcouo.mutation
}

// ClearBillingProfile clears the "billing_profile" edge to the BillingProfile entity.
func (bcouo *BillingCustomerOverrideUpdateOne) ClearBillingProfile() *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.ClearBillingProfile()
	return bcouo
}

// Where appends a list predicates to the BillingCustomerOverrideUpdate builder.
func (bcouo *BillingCustomerOverrideUpdateOne) Where(ps ...predicate.BillingCustomerOverride) *BillingCustomerOverrideUpdateOne {
	bcouo.mutation.Where(ps...)
	return bcouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bcouo *BillingCustomerOverrideUpdateOne) Select(field string, fields ...string) *BillingCustomerOverrideUpdateOne {
	bcouo.fields = append([]string{field}, fields...)
	return bcouo
}

// Save executes the query and returns the updated BillingCustomerOverride entity.
func (bcouo *BillingCustomerOverrideUpdateOne) Save(ctx context.Context) (*BillingCustomerOverride, error) {
	bcouo.defaults()
	return withHooks(ctx, bcouo.sqlSave, bcouo.mutation, bcouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcouo *BillingCustomerOverrideUpdateOne) SaveX(ctx context.Context) *BillingCustomerOverride {
	node, err := bcouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bcouo *BillingCustomerOverrideUpdateOne) Exec(ctx context.Context) error {
	_, err := bcouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcouo *BillingCustomerOverrideUpdateOne) ExecX(ctx context.Context) {
	if err := bcouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcouo *BillingCustomerOverrideUpdateOne) defaults() {
	if _, ok := bcouo.mutation.UpdatedAt(); !ok {
		v := billingcustomeroverride.UpdateDefaultUpdatedAt()
		bcouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcouo *BillingCustomerOverrideUpdateOne) check() error {
	if v, ok := bcouo.mutation.CollectionAlignment(); ok {
		if err := billingcustomeroverride.CollectionAlignmentValidator(v); err != nil {
			return &ValidationError{Name: "collection_alignment", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.collection_alignment": %w`, err)}
		}
	}
	if v, ok := bcouo.mutation.InvoiceCollectionMethod(); ok {
		if err := billingcustomeroverride.InvoiceCollectionMethodValidator(v); err != nil {
			return &ValidationError{Name: "invoice_collection_method", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.invoice_collection_method": %w`, err)}
		}
	}
	if v, ok := bcouo.mutation.InvoiceItemResolution(); ok {
		if err := billingcustomeroverride.InvoiceItemResolutionValidator(v); err != nil {
			return &ValidationError{Name: "invoice_item_resolution", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.invoice_item_resolution": %w`, err)}
		}
	}
	if bcouo.mutation.CustomerCleared() && len(bcouo.mutation.CustomerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingCustomerOverride.customer"`)
	}
	return nil
}

func (bcouo *BillingCustomerOverrideUpdateOne) sqlSave(ctx context.Context) (_node *BillingCustomerOverride, err error) {
	if err := bcouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingcustomeroverride.Table, billingcustomeroverride.Columns, sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString))
	id, ok := bcouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingCustomerOverride.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bcouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingcustomeroverride.FieldID)
		for _, f := range fields {
			if !billingcustomeroverride.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billingcustomeroverride.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bcouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcouo.mutation.UpdatedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bcouo.mutation.DeletedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldDeletedAt, field.TypeTime, value)
	}
	if bcouo.mutation.DeletedAtCleared() {
		_spec.ClearField(billingcustomeroverride.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bcouo.mutation.CollectionAlignment(); ok {
		_spec.SetField(billingcustomeroverride.FieldCollectionAlignment, field.TypeEnum, value)
	}
	if bcouo.mutation.CollectionAlignmentCleared() {
		_spec.ClearField(billingcustomeroverride.FieldCollectionAlignment, field.TypeEnum)
	}
	if value, ok := bcouo.mutation.ItemCollectionPeriodSeconds(); ok {
		_spec.SetField(billingcustomeroverride.FieldItemCollectionPeriodSeconds, field.TypeInt64, value)
	}
	if value, ok := bcouo.mutation.AddedItemCollectionPeriodSeconds(); ok {
		_spec.AddField(billingcustomeroverride.FieldItemCollectionPeriodSeconds, field.TypeInt64, value)
	}
	if bcouo.mutation.ItemCollectionPeriodSecondsCleared() {
		_spec.ClearField(billingcustomeroverride.FieldItemCollectionPeriodSeconds, field.TypeInt64)
	}
	if value, ok := bcouo.mutation.InvoiceAutoAdvance(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceAutoAdvance, field.TypeBool, value)
	}
	if bcouo.mutation.InvoiceAutoAdvanceCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceAutoAdvance, field.TypeBool)
	}
	if value, ok := bcouo.mutation.InvoiceDraftPeriodSeconds(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceDraftPeriodSeconds, field.TypeInt64, value)
	}
	if value, ok := bcouo.mutation.AddedInvoiceDraftPeriodSeconds(); ok {
		_spec.AddField(billingcustomeroverride.FieldInvoiceDraftPeriodSeconds, field.TypeInt64, value)
	}
	if bcouo.mutation.InvoiceDraftPeriodSecondsCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceDraftPeriodSeconds, field.TypeInt64)
	}
	if value, ok := bcouo.mutation.InvoiceDueAfterSeconds(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceDueAfterSeconds, field.TypeInt64, value)
	}
	if value, ok := bcouo.mutation.AddedInvoiceDueAfterSeconds(); ok {
		_spec.AddField(billingcustomeroverride.FieldInvoiceDueAfterSeconds, field.TypeInt64, value)
	}
	if bcouo.mutation.InvoiceDueAfterSecondsCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceDueAfterSeconds, field.TypeInt64)
	}
	if value, ok := bcouo.mutation.InvoiceCollectionMethod(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceCollectionMethod, field.TypeEnum, value)
	}
	if bcouo.mutation.InvoiceCollectionMethodCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceCollectionMethod, field.TypeEnum)
	}
	if value, ok := bcouo.mutation.InvoiceItemResolution(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceItemResolution, field.TypeEnum, value)
	}
	if bcouo.mutation.InvoiceItemResolutionCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceItemResolution, field.TypeEnum)
	}
	if value, ok := bcouo.mutation.InvoiceItemPerSubject(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceItemPerSubject, field.TypeBool, value)
	}
	if bcouo.mutation.InvoiceItemPerSubjectCleared() {
		_spec.ClearField(billingcustomeroverride.FieldInvoiceItemPerSubject, field.TypeBool)
	}
	if bcouo.mutation.BillingProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingcustomeroverride.BillingProfileTable,
			Columns: []string{billingcustomeroverride.BillingProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcouo.mutation.BillingProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingcustomeroverride.BillingProfileTable,
			Columns: []string{billingcustomeroverride.BillingProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingCustomerOverride{config: bcouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bcouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingcustomeroverride.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bcouo.mutation.done = true
	return _node, nil
}
