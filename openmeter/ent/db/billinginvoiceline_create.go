// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicediscount"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceflatfeelineconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicelinediscount"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceusagebasedlineconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionphase"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/currencyx"
)

// BillingInvoiceLineCreate is the builder for creating a BillingInvoiceLine entity.
type BillingInvoiceLineCreate struct {
	config
	mutation *BillingInvoiceLineMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (bilc *BillingInvoiceLineCreate) SetNamespace(s string) *BillingInvoiceLineCreate {
	bilc.mutation.SetNamespace(s)
	return bilc
}

// SetMetadata sets the "metadata" field.
func (bilc *BillingInvoiceLineCreate) SetMetadata(m map[string]string) *BillingInvoiceLineCreate {
	bilc.mutation.SetMetadata(m)
	return bilc
}

// SetCreatedAt sets the "created_at" field.
func (bilc *BillingInvoiceLineCreate) SetCreatedAt(t time.Time) *BillingInvoiceLineCreate {
	bilc.mutation.SetCreatedAt(t)
	return bilc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bilc *BillingInvoiceLineCreate) SetNillableCreatedAt(t *time.Time) *BillingInvoiceLineCreate {
	if t != nil {
		bilc.SetCreatedAt(*t)
	}
	return bilc
}

// SetUpdatedAt sets the "updated_at" field.
func (bilc *BillingInvoiceLineCreate) SetUpdatedAt(t time.Time) *BillingInvoiceLineCreate {
	bilc.mutation.SetUpdatedAt(t)
	return bilc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bilc *BillingInvoiceLineCreate) SetNillableUpdatedAt(t *time.Time) *BillingInvoiceLineCreate {
	if t != nil {
		bilc.SetUpdatedAt(*t)
	}
	return bilc
}

// SetDeletedAt sets the "deleted_at" field.
func (bilc *BillingInvoiceLineCreate) SetDeletedAt(t time.Time) *BillingInvoiceLineCreate {
	bilc.mutation.SetDeletedAt(t)
	return bilc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bilc *BillingInvoiceLineCreate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceLineCreate {
	if t != nil {
		bilc.SetDeletedAt(*t)
	}
	return bilc
}

// SetName sets the "name" field.
func (bilc *BillingInvoiceLineCreate) SetName(s string) *BillingInvoiceLineCreate {
	bilc.mutation.SetName(s)
	return bilc
}

// SetDescription sets the "description" field.
func (bilc *BillingInvoiceLineCreate) SetDescription(s string) *BillingInvoiceLineCreate {
	bilc.mutation.SetDescription(s)
	return bilc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bilc *BillingInvoiceLineCreate) SetNillableDescription(s *string) *BillingInvoiceLineCreate {
	if s != nil {
		bilc.SetDescription(*s)
	}
	return bilc
}

// SetAmount sets the "amount" field.
func (bilc *BillingInvoiceLineCreate) SetAmount(a alpacadecimal.Decimal) *BillingInvoiceLineCreate {
	bilc.mutation.SetAmount(a)
	return bilc
}

// SetTaxesTotal sets the "taxes_total" field.
func (bilc *BillingInvoiceLineCreate) SetTaxesTotal(a alpacadecimal.Decimal) *BillingInvoiceLineCreate {
	bilc.mutation.SetTaxesTotal(a)
	return bilc
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (bilc *BillingInvoiceLineCreate) SetTaxesInclusiveTotal(a alpacadecimal.Decimal) *BillingInvoiceLineCreate {
	bilc.mutation.SetTaxesInclusiveTotal(a)
	return bilc
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (bilc *BillingInvoiceLineCreate) SetTaxesExclusiveTotal(a alpacadecimal.Decimal) *BillingInvoiceLineCreate {
	bilc.mutation.SetTaxesExclusiveTotal(a)
	return bilc
}

// SetChargesTotal sets the "charges_total" field.
func (bilc *BillingInvoiceLineCreate) SetChargesTotal(a alpacadecimal.Decimal) *BillingInvoiceLineCreate {
	bilc.mutation.SetChargesTotal(a)
	return bilc
}

// SetDiscountsTotal sets the "discounts_total" field.
func (bilc *BillingInvoiceLineCreate) SetDiscountsTotal(a alpacadecimal.Decimal) *BillingInvoiceLineCreate {
	bilc.mutation.SetDiscountsTotal(a)
	return bilc
}

// SetTotal sets the "total" field.
func (bilc *BillingInvoiceLineCreate) SetTotal(a alpacadecimal.Decimal) *BillingInvoiceLineCreate {
	bilc.mutation.SetTotal(a)
	return bilc
}

// SetInvoiceID sets the "invoice_id" field.
func (bilc *BillingInvoiceLineCreate) SetInvoiceID(s string) *BillingInvoiceLineCreate {
	bilc.mutation.SetInvoiceID(s)
	return bilc
}

// SetParentLineID sets the "parent_line_id" field.
func (bilc *BillingInvoiceLineCreate) SetParentLineID(s string) *BillingInvoiceLineCreate {
	bilc.mutation.SetParentLineID(s)
	return bilc
}

// SetNillableParentLineID sets the "parent_line_id" field if the given value is not nil.
func (bilc *BillingInvoiceLineCreate) SetNillableParentLineID(s *string) *BillingInvoiceLineCreate {
	if s != nil {
		bilc.SetParentLineID(*s)
	}
	return bilc
}

// SetPeriodStart sets the "period_start" field.
func (bilc *BillingInvoiceLineCreate) SetPeriodStart(t time.Time) *BillingInvoiceLineCreate {
	bilc.mutation.SetPeriodStart(t)
	return bilc
}

// SetPeriodEnd sets the "period_end" field.
func (bilc *BillingInvoiceLineCreate) SetPeriodEnd(t time.Time) *BillingInvoiceLineCreate {
	bilc.mutation.SetPeriodEnd(t)
	return bilc
}

// SetInvoiceAt sets the "invoice_at" field.
func (bilc *BillingInvoiceLineCreate) SetInvoiceAt(t time.Time) *BillingInvoiceLineCreate {
	bilc.mutation.SetInvoiceAt(t)
	return bilc
}

// SetType sets the "type" field.
func (bilc *BillingInvoiceLineCreate) SetType(blt billing.InvoiceLineType) *BillingInvoiceLineCreate {
	bilc.mutation.SetType(blt)
	return bilc
}

// SetStatus sets the "status" field.
func (bilc *BillingInvoiceLineCreate) SetStatus(bls billing.InvoiceLineStatus) *BillingInvoiceLineCreate {
	bilc.mutation.SetStatus(bls)
	return bilc
}

// SetCurrency sets the "currency" field.
func (bilc *BillingInvoiceLineCreate) SetCurrency(c currencyx.Code) *BillingInvoiceLineCreate {
	bilc.mutation.SetCurrency(c)
	return bilc
}

// SetQuantity sets the "quantity" field.
func (bilc *BillingInvoiceLineCreate) SetQuantity(a alpacadecimal.Decimal) *BillingInvoiceLineCreate {
	bilc.mutation.SetQuantity(a)
	return bilc
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (bilc *BillingInvoiceLineCreate) SetNillableQuantity(a *alpacadecimal.Decimal) *BillingInvoiceLineCreate {
	if a != nil {
		bilc.SetQuantity(*a)
	}
	return bilc
}

// SetTaxConfig sets the "tax_config" field.
func (bilc *BillingInvoiceLineCreate) SetTaxConfig(pc productcatalog.TaxConfig) *BillingInvoiceLineCreate {
	bilc.mutation.SetTaxConfig(pc)
	return bilc
}

// SetNillableTaxConfig sets the "tax_config" field if the given value is not nil.
func (bilc *BillingInvoiceLineCreate) SetNillableTaxConfig(pc *productcatalog.TaxConfig) *BillingInvoiceLineCreate {
	if pc != nil {
		bilc.SetTaxConfig(*pc)
	}
	return bilc
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (bilc *BillingInvoiceLineCreate) SetInvoicingAppExternalID(s string) *BillingInvoiceLineCreate {
	bilc.mutation.SetInvoicingAppExternalID(s)
	return bilc
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (bilc *BillingInvoiceLineCreate) SetNillableInvoicingAppExternalID(s *string) *BillingInvoiceLineCreate {
	if s != nil {
		bilc.SetInvoicingAppExternalID(*s)
	}
	return bilc
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (bilc *BillingInvoiceLineCreate) SetChildUniqueReferenceID(s string) *BillingInvoiceLineCreate {
	bilc.mutation.SetChildUniqueReferenceID(s)
	return bilc
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (bilc *BillingInvoiceLineCreate) SetNillableChildUniqueReferenceID(s *string) *BillingInvoiceLineCreate {
	if s != nil {
		bilc.SetChildUniqueReferenceID(*s)
	}
	return bilc
}

// SetSubscriptionID sets the "subscription_id" field.
func (bilc *BillingInvoiceLineCreate) SetSubscriptionID(s string) *BillingInvoiceLineCreate {
	bilc.mutation.SetSubscriptionID(s)
	return bilc
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (bilc *BillingInvoiceLineCreate) SetNillableSubscriptionID(s *string) *BillingInvoiceLineCreate {
	if s != nil {
		bilc.SetSubscriptionID(*s)
	}
	return bilc
}

// SetSubscriptionPhaseID sets the "subscription_phase_id" field.
func (bilc *BillingInvoiceLineCreate) SetSubscriptionPhaseID(s string) *BillingInvoiceLineCreate {
	bilc.mutation.SetSubscriptionPhaseID(s)
	return bilc
}

// SetNillableSubscriptionPhaseID sets the "subscription_phase_id" field if the given value is not nil.
func (bilc *BillingInvoiceLineCreate) SetNillableSubscriptionPhaseID(s *string) *BillingInvoiceLineCreate {
	if s != nil {
		bilc.SetSubscriptionPhaseID(*s)
	}
	return bilc
}

// SetSubscriptionItemID sets the "subscription_item_id" field.
func (bilc *BillingInvoiceLineCreate) SetSubscriptionItemID(s string) *BillingInvoiceLineCreate {
	bilc.mutation.SetSubscriptionItemID(s)
	return bilc
}

// SetNillableSubscriptionItemID sets the "subscription_item_id" field if the given value is not nil.
func (bilc *BillingInvoiceLineCreate) SetNillableSubscriptionItemID(s *string) *BillingInvoiceLineCreate {
	if s != nil {
		bilc.SetSubscriptionItemID(*s)
	}
	return bilc
}

// SetID sets the "id" field.
func (bilc *BillingInvoiceLineCreate) SetID(s string) *BillingInvoiceLineCreate {
	bilc.mutation.SetID(s)
	return bilc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bilc *BillingInvoiceLineCreate) SetNillableID(s *string) *BillingInvoiceLineCreate {
	if s != nil {
		bilc.SetID(*s)
	}
	return bilc
}

// SetBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID.
func (bilc *BillingInvoiceLineCreate) SetBillingInvoiceID(id string) *BillingInvoiceLineCreate {
	bilc.mutation.SetBillingInvoiceID(id)
	return bilc
}

// SetBillingInvoice sets the "billing_invoice" edge to the BillingInvoice entity.
func (bilc *BillingInvoiceLineCreate) SetBillingInvoice(b *BillingInvoice) *BillingInvoiceLineCreate {
	return bilc.SetBillingInvoiceID(b.ID)
}

// SetFlatFeeLineID sets the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity by ID.
func (bilc *BillingInvoiceLineCreate) SetFlatFeeLineID(id string) *BillingInvoiceLineCreate {
	bilc.mutation.SetFlatFeeLineID(id)
	return bilc
}

// SetNillableFlatFeeLineID sets the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity by ID if the given value is not nil.
func (bilc *BillingInvoiceLineCreate) SetNillableFlatFeeLineID(id *string) *BillingInvoiceLineCreate {
	if id != nil {
		bilc = bilc.SetFlatFeeLineID(*id)
	}
	return bilc
}

// SetFlatFeeLine sets the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity.
func (bilc *BillingInvoiceLineCreate) SetFlatFeeLine(b *BillingInvoiceFlatFeeLineConfig) *BillingInvoiceLineCreate {
	return bilc.SetFlatFeeLineID(b.ID)
}

// SetUsageBasedLineID sets the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity by ID.
func (bilc *BillingInvoiceLineCreate) SetUsageBasedLineID(id string) *BillingInvoiceLineCreate {
	bilc.mutation.SetUsageBasedLineID(id)
	return bilc
}

// SetNillableUsageBasedLineID sets the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity by ID if the given value is not nil.
func (bilc *BillingInvoiceLineCreate) SetNillableUsageBasedLineID(id *string) *BillingInvoiceLineCreate {
	if id != nil {
		bilc = bilc.SetUsageBasedLineID(*id)
	}
	return bilc
}

// SetUsageBasedLine sets the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity.
func (bilc *BillingInvoiceLineCreate) SetUsageBasedLine(b *BillingInvoiceUsageBasedLineConfig) *BillingInvoiceLineCreate {
	return bilc.SetUsageBasedLineID(b.ID)
}

// SetParentLine sets the "parent_line" edge to the BillingInvoiceLine entity.
func (bilc *BillingInvoiceLineCreate) SetParentLine(b *BillingInvoiceLine) *BillingInvoiceLineCreate {
	return bilc.SetParentLineID(b.ID)
}

// AddDetailedLineIDs adds the "detailed_lines" edge to the BillingInvoiceLine entity by IDs.
func (bilc *BillingInvoiceLineCreate) AddDetailedLineIDs(ids ...string) *BillingInvoiceLineCreate {
	bilc.mutation.AddDetailedLineIDs(ids...)
	return bilc
}

// AddDetailedLines adds the "detailed_lines" edges to the BillingInvoiceLine entity.
func (bilc *BillingInvoiceLineCreate) AddDetailedLines(b ...*BillingInvoiceLine) *BillingInvoiceLineCreate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bilc.AddDetailedLineIDs(ids...)
}

// AddLineDiscountIDs adds the "line_discounts" edge to the BillingInvoiceLineDiscount entity by IDs.
func (bilc *BillingInvoiceLineCreate) AddLineDiscountIDs(ids ...string) *BillingInvoiceLineCreate {
	bilc.mutation.AddLineDiscountIDs(ids...)
	return bilc
}

// AddLineDiscounts adds the "line_discounts" edges to the BillingInvoiceLineDiscount entity.
func (bilc *BillingInvoiceLineCreate) AddLineDiscounts(b ...*BillingInvoiceLineDiscount) *BillingInvoiceLineCreate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bilc.AddLineDiscountIDs(ids...)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (bilc *BillingInvoiceLineCreate) SetSubscription(s *Subscription) *BillingInvoiceLineCreate {
	return bilc.SetSubscriptionID(s.ID)
}

// SetSubscriptionPhase sets the "subscription_phase" edge to the SubscriptionPhase entity.
func (bilc *BillingInvoiceLineCreate) SetSubscriptionPhase(s *SubscriptionPhase) *BillingInvoiceLineCreate {
	return bilc.SetSubscriptionPhaseID(s.ID)
}

// SetSubscriptionItem sets the "subscription_item" edge to the SubscriptionItem entity.
func (bilc *BillingInvoiceLineCreate) SetSubscriptionItem(s *SubscriptionItem) *BillingInvoiceLineCreate {
	return bilc.SetSubscriptionItemID(s.ID)
}

// SetInvoiceDiscountsID sets the "invoice_discounts" edge to the BillingInvoiceDiscount entity by ID.
func (bilc *BillingInvoiceLineCreate) SetInvoiceDiscountsID(id string) *BillingInvoiceLineCreate {
	bilc.mutation.SetInvoiceDiscountsID(id)
	return bilc
}

// SetNillableInvoiceDiscountsID sets the "invoice_discounts" edge to the BillingInvoiceDiscount entity by ID if the given value is not nil.
func (bilc *BillingInvoiceLineCreate) SetNillableInvoiceDiscountsID(id *string) *BillingInvoiceLineCreate {
	if id != nil {
		bilc = bilc.SetInvoiceDiscountsID(*id)
	}
	return bilc
}

// SetInvoiceDiscounts sets the "invoice_discounts" edge to the BillingInvoiceDiscount entity.
func (bilc *BillingInvoiceLineCreate) SetInvoiceDiscounts(b *BillingInvoiceDiscount) *BillingInvoiceLineCreate {
	return bilc.SetInvoiceDiscountsID(b.ID)
}

// Mutation returns the BillingInvoiceLineMutation object of the builder.
func (bilc *BillingInvoiceLineCreate) Mutation() *BillingInvoiceLineMutation {
	return bilc.mutation
}

// Save creates the BillingInvoiceLine in the database.
func (bilc *BillingInvoiceLineCreate) Save(ctx context.Context) (*BillingInvoiceLine, error) {
	bilc.defaults()
	return withHooks(ctx, bilc.sqlSave, bilc.mutation, bilc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bilc *BillingInvoiceLineCreate) SaveX(ctx context.Context) *BillingInvoiceLine {
	v, err := bilc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bilc *BillingInvoiceLineCreate) Exec(ctx context.Context) error {
	_, err := bilc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bilc *BillingInvoiceLineCreate) ExecX(ctx context.Context) {
	if err := bilc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bilc *BillingInvoiceLineCreate) defaults() {
	if _, ok := bilc.mutation.CreatedAt(); !ok {
		v := billinginvoiceline.DefaultCreatedAt()
		bilc.mutation.SetCreatedAt(v)
	}
	if _, ok := bilc.mutation.UpdatedAt(); !ok {
		v := billinginvoiceline.DefaultUpdatedAt()
		bilc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bilc.mutation.ID(); !ok {
		v := billinginvoiceline.DefaultID()
		bilc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bilc *BillingInvoiceLineCreate) check() error {
	if _, ok := bilc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingInvoiceLine.namespace"`)}
	}
	if v, ok := bilc.mutation.Namespace(); ok {
		if err := billinginvoiceline.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLine.namespace": %w`, err)}
		}
	}
	if _, ok := bilc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingInvoiceLine.created_at"`)}
	}
	if _, ok := bilc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingInvoiceLine.updated_at"`)}
	}
	if _, ok := bilc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "BillingInvoiceLine.name"`)}
	}
	if _, ok := bilc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`db: missing required field "BillingInvoiceLine.amount"`)}
	}
	if _, ok := bilc.mutation.TaxesTotal(); !ok {
		return &ValidationError{Name: "taxes_total", err: errors.New(`db: missing required field "BillingInvoiceLine.taxes_total"`)}
	}
	if _, ok := bilc.mutation.TaxesInclusiveTotal(); !ok {
		return &ValidationError{Name: "taxes_inclusive_total", err: errors.New(`db: missing required field "BillingInvoiceLine.taxes_inclusive_total"`)}
	}
	if _, ok := bilc.mutation.TaxesExclusiveTotal(); !ok {
		return &ValidationError{Name: "taxes_exclusive_total", err: errors.New(`db: missing required field "BillingInvoiceLine.taxes_exclusive_total"`)}
	}
	if _, ok := bilc.mutation.ChargesTotal(); !ok {
		return &ValidationError{Name: "charges_total", err: errors.New(`db: missing required field "BillingInvoiceLine.charges_total"`)}
	}
	if _, ok := bilc.mutation.DiscountsTotal(); !ok {
		return &ValidationError{Name: "discounts_total", err: errors.New(`db: missing required field "BillingInvoiceLine.discounts_total"`)}
	}
	if _, ok := bilc.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`db: missing required field "BillingInvoiceLine.total"`)}
	}
	if _, ok := bilc.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice_id", err: errors.New(`db: missing required field "BillingInvoiceLine.invoice_id"`)}
	}
	if _, ok := bilc.mutation.PeriodStart(); !ok {
		return &ValidationError{Name: "period_start", err: errors.New(`db: missing required field "BillingInvoiceLine.period_start"`)}
	}
	if _, ok := bilc.mutation.PeriodEnd(); !ok {
		return &ValidationError{Name: "period_end", err: errors.New(`db: missing required field "BillingInvoiceLine.period_end"`)}
	}
	if _, ok := bilc.mutation.InvoiceAt(); !ok {
		return &ValidationError{Name: "invoice_at", err: errors.New(`db: missing required field "BillingInvoiceLine.invoice_at"`)}
	}
	if _, ok := bilc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "BillingInvoiceLine.type"`)}
	}
	if v, ok := bilc.mutation.GetType(); ok {
		if err := billinginvoiceline.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLine.type": %w`, err)}
		}
	}
	if _, ok := bilc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "BillingInvoiceLine.status"`)}
	}
	if v, ok := bilc.mutation.Status(); ok {
		if err := billinginvoiceline.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLine.status": %w`, err)}
		}
	}
	if _, ok := bilc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`db: missing required field "BillingInvoiceLine.currency"`)}
	}
	if v, ok := bilc.mutation.Currency(); ok {
		if err := billinginvoiceline.CurrencyValidator(string(v)); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLine.currency": %w`, err)}
		}
	}
	if v, ok := bilc.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLine.tax_config": %w`, err)}
		}
	}
	if len(bilc.mutation.BillingInvoiceIDs()) == 0 {
		return &ValidationError{Name: "billing_invoice", err: errors.New(`db: missing required edge "BillingInvoiceLine.billing_invoice"`)}
	}
	return nil
}

func (bilc *BillingInvoiceLineCreate) sqlSave(ctx context.Context) (*BillingInvoiceLine, error) {
	if err := bilc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bilc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bilc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingInvoiceLine.ID type: %T", _spec.ID.Value)
		}
	}
	bilc.mutation.id = &_node.ID
	bilc.mutation.done = true
	return _node, nil
}

func (bilc *BillingInvoiceLineCreate) createSpec() (*BillingInvoiceLine, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingInvoiceLine{config: bilc.config}
		_spec = sqlgraph.NewCreateSpec(billinginvoiceline.Table, sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString))
	)
	_spec.OnConflict = bilc.conflict
	if id, ok := bilc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bilc.mutation.Namespace(); ok {
		_spec.SetField(billinginvoiceline.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := bilc.mutation.Metadata(); ok {
		_spec.SetField(billinginvoiceline.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := bilc.mutation.CreatedAt(); ok {
		_spec.SetField(billinginvoiceline.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bilc.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoiceline.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bilc.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoiceline.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bilc.mutation.Name(); ok {
		_spec.SetField(billinginvoiceline.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bilc.mutation.Description(); ok {
		_spec.SetField(billinginvoiceline.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := bilc.mutation.Amount(); ok {
		_spec.SetField(billinginvoiceline.FieldAmount, field.TypeOther, value)
		_node.Amount = value
	}
	if value, ok := bilc.mutation.TaxesTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxesTotal, field.TypeOther, value)
		_node.TaxesTotal = value
	}
	if value, ok := bilc.mutation.TaxesInclusiveTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxesInclusiveTotal, field.TypeOther, value)
		_node.TaxesInclusiveTotal = value
	}
	if value, ok := bilc.mutation.TaxesExclusiveTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxesExclusiveTotal, field.TypeOther, value)
		_node.TaxesExclusiveTotal = value
	}
	if value, ok := bilc.mutation.ChargesTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldChargesTotal, field.TypeOther, value)
		_node.ChargesTotal = value
	}
	if value, ok := bilc.mutation.DiscountsTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldDiscountsTotal, field.TypeOther, value)
		_node.DiscountsTotal = value
	}
	if value, ok := bilc.mutation.Total(); ok {
		_spec.SetField(billinginvoiceline.FieldTotal, field.TypeOther, value)
		_node.Total = value
	}
	if value, ok := bilc.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoiceline.FieldPeriodStart, field.TypeTime, value)
		_node.PeriodStart = value
	}
	if value, ok := bilc.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoiceline.FieldPeriodEnd, field.TypeTime, value)
		_node.PeriodEnd = value
	}
	if value, ok := bilc.mutation.InvoiceAt(); ok {
		_spec.SetField(billinginvoiceline.FieldInvoiceAt, field.TypeTime, value)
		_node.InvoiceAt = value
	}
	if value, ok := bilc.mutation.GetType(); ok {
		_spec.SetField(billinginvoiceline.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := bilc.mutation.Status(); ok {
		_spec.SetField(billinginvoiceline.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := bilc.mutation.Currency(); ok {
		_spec.SetField(billinginvoiceline.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := bilc.mutation.Quantity(); ok {
		_spec.SetField(billinginvoiceline.FieldQuantity, field.TypeOther, value)
		_node.Quantity = &value
	}
	if value, ok := bilc.mutation.TaxConfig(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxConfig, field.TypeJSON, value)
		_node.TaxConfig = value
	}
	if value, ok := bilc.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoiceline.FieldInvoicingAppExternalID, field.TypeString, value)
		_node.InvoicingAppExternalID = &value
	}
	if value, ok := bilc.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoiceline.FieldChildUniqueReferenceID, field.TypeString, value)
		_node.ChildUniqueReferenceID = &value
	}
	if nodes := bilc.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.BillingInvoiceTable,
			Columns: []string{billinginvoiceline.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InvoiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bilc.mutation.FlatFeeLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.FlatFeeLineTable,
			Columns: []string{billinginvoiceline.FlatFeeLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceflatfeelineconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.fee_line_config_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bilc.mutation.UsageBasedLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.UsageBasedLineTable,
			Columns: []string{billinginvoiceline.UsageBasedLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceusagebasedlineconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.usage_based_line_config_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bilc.mutation.ParentLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.ParentLineTable,
			Columns: []string{billinginvoiceline.ParentLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentLineID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bilc.mutation.DetailedLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.DetailedLinesTable,
			Columns: []string{billinginvoiceline.DetailedLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bilc.mutation.LineDiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineDiscountsTable,
			Columns: []string{billinginvoiceline.LineDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelinediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bilc.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionTable,
			Columns: []string{billinginvoiceline.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bilc.mutation.SubscriptionPhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionPhaseTable,
			Columns: []string{billinginvoiceline.SubscriptionPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionPhaseID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bilc.mutation.SubscriptionItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionItemTable,
			Columns: []string{billinginvoiceline.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionItemID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bilc.mutation.InvoiceDiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.InvoiceDiscountsTable,
			Columns: []string{billinginvoiceline.InvoiceDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.line_ids = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceLine.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceLineUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bilc *BillingInvoiceLineCreate) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceLineUpsertOne {
	bilc.conflict = opts
	return &BillingInvoiceLineUpsertOne{
		create: bilc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceLine.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bilc *BillingInvoiceLineCreate) OnConflictColumns(columns ...string) *BillingInvoiceLineUpsertOne {
	bilc.conflict = append(bilc.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceLineUpsertOne{
		create: bilc,
	}
}

type (
	// BillingInvoiceLineUpsertOne is the builder for "upsert"-ing
	//  one BillingInvoiceLine node.
	BillingInvoiceLineUpsertOne struct {
		create *BillingInvoiceLineCreate
	}

	// BillingInvoiceLineUpsert is the "OnConflict" setter.
	BillingInvoiceLineUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceLineUpsert) SetMetadata(v map[string]string) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateMetadata() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceLineUpsert) ClearMetadata() *BillingInvoiceLineUpsert {
	u.SetNull(billinginvoiceline.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceLineUpsert) SetUpdatedAt(v time.Time) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateUpdatedAt() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceLineUpsert) SetDeletedAt(v time.Time) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateDeletedAt() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceLineUpsert) ClearDeletedAt() *BillingInvoiceLineUpsert {
	u.SetNull(billinginvoiceline.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *BillingInvoiceLineUpsert) SetName(v string) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateName() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceLineUpsert) SetDescription(v string) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateDescription() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceLineUpsert) ClearDescription() *BillingInvoiceLineUpsert {
	u.SetNull(billinginvoiceline.FieldDescription)
	return u
}

// SetAmount sets the "amount" field.
func (u *BillingInvoiceLineUpsert) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateAmount() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldAmount)
	return u
}

// SetTaxesTotal sets the "taxes_total" field.
func (u *BillingInvoiceLineUpsert) SetTaxesTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldTaxesTotal, v)
	return u
}

// UpdateTaxesTotal sets the "taxes_total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateTaxesTotal() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldTaxesTotal)
	return u
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (u *BillingInvoiceLineUpsert) SetTaxesInclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldTaxesInclusiveTotal, v)
	return u
}

// UpdateTaxesInclusiveTotal sets the "taxes_inclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateTaxesInclusiveTotal() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldTaxesInclusiveTotal)
	return u
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (u *BillingInvoiceLineUpsert) SetTaxesExclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldTaxesExclusiveTotal, v)
	return u
}

// UpdateTaxesExclusiveTotal sets the "taxes_exclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateTaxesExclusiveTotal() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldTaxesExclusiveTotal)
	return u
}

// SetChargesTotal sets the "charges_total" field.
func (u *BillingInvoiceLineUpsert) SetChargesTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldChargesTotal, v)
	return u
}

// UpdateChargesTotal sets the "charges_total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateChargesTotal() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldChargesTotal)
	return u
}

// SetDiscountsTotal sets the "discounts_total" field.
func (u *BillingInvoiceLineUpsert) SetDiscountsTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldDiscountsTotal, v)
	return u
}

// UpdateDiscountsTotal sets the "discounts_total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateDiscountsTotal() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldDiscountsTotal)
	return u
}

// SetTotal sets the "total" field.
func (u *BillingInvoiceLineUpsert) SetTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldTotal, v)
	return u
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateTotal() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldTotal)
	return u
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceLineUpsert) SetInvoiceID(v string) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldInvoiceID, v)
	return u
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateInvoiceID() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldInvoiceID)
	return u
}

// SetParentLineID sets the "parent_line_id" field.
func (u *BillingInvoiceLineUpsert) SetParentLineID(v string) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldParentLineID, v)
	return u
}

// UpdateParentLineID sets the "parent_line_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateParentLineID() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldParentLineID)
	return u
}

// ClearParentLineID clears the value of the "parent_line_id" field.
func (u *BillingInvoiceLineUpsert) ClearParentLineID() *BillingInvoiceLineUpsert {
	u.SetNull(billinginvoiceline.FieldParentLineID)
	return u
}

// SetPeriodStart sets the "period_start" field.
func (u *BillingInvoiceLineUpsert) SetPeriodStart(v time.Time) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldPeriodStart, v)
	return u
}

// UpdatePeriodStart sets the "period_start" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdatePeriodStart() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldPeriodStart)
	return u
}

// SetPeriodEnd sets the "period_end" field.
func (u *BillingInvoiceLineUpsert) SetPeriodEnd(v time.Time) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldPeriodEnd, v)
	return u
}

// UpdatePeriodEnd sets the "period_end" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdatePeriodEnd() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldPeriodEnd)
	return u
}

// SetInvoiceAt sets the "invoice_at" field.
func (u *BillingInvoiceLineUpsert) SetInvoiceAt(v time.Time) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldInvoiceAt, v)
	return u
}

// UpdateInvoiceAt sets the "invoice_at" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateInvoiceAt() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldInvoiceAt)
	return u
}

// SetStatus sets the "status" field.
func (u *BillingInvoiceLineUpsert) SetStatus(v billing.InvoiceLineStatus) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateStatus() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldStatus)
	return u
}

// SetQuantity sets the "quantity" field.
func (u *BillingInvoiceLineUpsert) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldQuantity, v)
	return u
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateQuantity() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldQuantity)
	return u
}

// ClearQuantity clears the value of the "quantity" field.
func (u *BillingInvoiceLineUpsert) ClearQuantity() *BillingInvoiceLineUpsert {
	u.SetNull(billinginvoiceline.FieldQuantity)
	return u
}

// SetTaxConfig sets the "tax_config" field.
func (u *BillingInvoiceLineUpsert) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldTaxConfig, v)
	return u
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateTaxConfig() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldTaxConfig)
	return u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *BillingInvoiceLineUpsert) ClearTaxConfig() *BillingInvoiceLineUpsert {
	u.SetNull(billinginvoiceline.FieldTaxConfig)
	return u
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineUpsert) SetInvoicingAppExternalID(v string) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldInvoicingAppExternalID, v)
	return u
}

// UpdateInvoicingAppExternalID sets the "invoicing_app_external_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateInvoicingAppExternalID() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldInvoicingAppExternalID)
	return u
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineUpsert) ClearInvoicingAppExternalID() *BillingInvoiceLineUpsert {
	u.SetNull(billinginvoiceline.FieldInvoicingAppExternalID)
	return u
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (u *BillingInvoiceLineUpsert) SetChildUniqueReferenceID(v string) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldChildUniqueReferenceID, v)
	return u
}

// UpdateChildUniqueReferenceID sets the "child_unique_reference_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateChildUniqueReferenceID() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldChildUniqueReferenceID)
	return u
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (u *BillingInvoiceLineUpsert) ClearChildUniqueReferenceID() *BillingInvoiceLineUpsert {
	u.SetNull(billinginvoiceline.FieldChildUniqueReferenceID)
	return u
}

// SetSubscriptionID sets the "subscription_id" field.
func (u *BillingInvoiceLineUpsert) SetSubscriptionID(v string) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldSubscriptionID, v)
	return u
}

// UpdateSubscriptionID sets the "subscription_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateSubscriptionID() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldSubscriptionID)
	return u
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (u *BillingInvoiceLineUpsert) ClearSubscriptionID() *BillingInvoiceLineUpsert {
	u.SetNull(billinginvoiceline.FieldSubscriptionID)
	return u
}

// SetSubscriptionPhaseID sets the "subscription_phase_id" field.
func (u *BillingInvoiceLineUpsert) SetSubscriptionPhaseID(v string) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldSubscriptionPhaseID, v)
	return u
}

// UpdateSubscriptionPhaseID sets the "subscription_phase_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateSubscriptionPhaseID() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldSubscriptionPhaseID)
	return u
}

// ClearSubscriptionPhaseID clears the value of the "subscription_phase_id" field.
func (u *BillingInvoiceLineUpsert) ClearSubscriptionPhaseID() *BillingInvoiceLineUpsert {
	u.SetNull(billinginvoiceline.FieldSubscriptionPhaseID)
	return u
}

// SetSubscriptionItemID sets the "subscription_item_id" field.
func (u *BillingInvoiceLineUpsert) SetSubscriptionItemID(v string) *BillingInvoiceLineUpsert {
	u.Set(billinginvoiceline.FieldSubscriptionItemID, v)
	return u
}

// UpdateSubscriptionItemID sets the "subscription_item_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsert) UpdateSubscriptionItemID() *BillingInvoiceLineUpsert {
	u.SetExcluded(billinginvoiceline.FieldSubscriptionItemID)
	return u
}

// ClearSubscriptionItemID clears the value of the "subscription_item_id" field.
func (u *BillingInvoiceLineUpsert) ClearSubscriptionItemID() *BillingInvoiceLineUpsert {
	u.SetNull(billinginvoiceline.FieldSubscriptionItemID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceLine.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoiceline.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceLineUpsertOne) UpdateNewValues() *BillingInvoiceLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billinginvoiceline.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billinginvoiceline.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billinginvoiceline.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(billinginvoiceline.FieldType)
		}
		if _, exists := u.create.mutation.Currency(); exists {
			s.SetIgnore(billinginvoiceline.FieldCurrency)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceLine.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingInvoiceLineUpsertOne) Ignore() *BillingInvoiceLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceLineUpsertOne) DoNothing() *BillingInvoiceLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceLineCreate.OnConflict
// documentation for more info.
func (u *BillingInvoiceLineUpsertOne) Update(set func(*BillingInvoiceLineUpsert)) *BillingInvoiceLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceLineUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceLineUpsertOne) SetMetadata(v map[string]string) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateMetadata() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceLineUpsertOne) ClearMetadata() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceLineUpsertOne) SetUpdatedAt(v time.Time) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateUpdatedAt() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceLineUpsertOne) SetDeletedAt(v time.Time) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateDeletedAt() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceLineUpsertOne) ClearDeletedAt() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *BillingInvoiceLineUpsertOne) SetName(v string) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateName() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceLineUpsertOne) SetDescription(v string) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateDescription() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceLineUpsertOne) ClearDescription() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearDescription()
	})
}

// SetAmount sets the "amount" field.
func (u *BillingInvoiceLineUpsertOne) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateAmount() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateAmount()
	})
}

// SetTaxesTotal sets the "taxes_total" field.
func (u *BillingInvoiceLineUpsertOne) SetTaxesTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetTaxesTotal(v)
	})
}

// UpdateTaxesTotal sets the "taxes_total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateTaxesTotal() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateTaxesTotal()
	})
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (u *BillingInvoiceLineUpsertOne) SetTaxesInclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetTaxesInclusiveTotal(v)
	})
}

// UpdateTaxesInclusiveTotal sets the "taxes_inclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateTaxesInclusiveTotal() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateTaxesInclusiveTotal()
	})
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (u *BillingInvoiceLineUpsertOne) SetTaxesExclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetTaxesExclusiveTotal(v)
	})
}

// UpdateTaxesExclusiveTotal sets the "taxes_exclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateTaxesExclusiveTotal() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateTaxesExclusiveTotal()
	})
}

// SetChargesTotal sets the "charges_total" field.
func (u *BillingInvoiceLineUpsertOne) SetChargesTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetChargesTotal(v)
	})
}

// UpdateChargesTotal sets the "charges_total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateChargesTotal() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateChargesTotal()
	})
}

// SetDiscountsTotal sets the "discounts_total" field.
func (u *BillingInvoiceLineUpsertOne) SetDiscountsTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetDiscountsTotal(v)
	})
}

// UpdateDiscountsTotal sets the "discounts_total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateDiscountsTotal() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateDiscountsTotal()
	})
}

// SetTotal sets the "total" field.
func (u *BillingInvoiceLineUpsertOne) SetTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateTotal() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateTotal()
	})
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceLineUpsertOne) SetInvoiceID(v string) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetInvoiceID(v)
	})
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateInvoiceID() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateInvoiceID()
	})
}

// SetParentLineID sets the "parent_line_id" field.
func (u *BillingInvoiceLineUpsertOne) SetParentLineID(v string) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetParentLineID(v)
	})
}

// UpdateParentLineID sets the "parent_line_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateParentLineID() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateParentLineID()
	})
}

// ClearParentLineID clears the value of the "parent_line_id" field.
func (u *BillingInvoiceLineUpsertOne) ClearParentLineID() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearParentLineID()
	})
}

// SetPeriodStart sets the "period_start" field.
func (u *BillingInvoiceLineUpsertOne) SetPeriodStart(v time.Time) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetPeriodStart(v)
	})
}

// UpdatePeriodStart sets the "period_start" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdatePeriodStart() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdatePeriodStart()
	})
}

// SetPeriodEnd sets the "period_end" field.
func (u *BillingInvoiceLineUpsertOne) SetPeriodEnd(v time.Time) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetPeriodEnd(v)
	})
}

// UpdatePeriodEnd sets the "period_end" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdatePeriodEnd() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdatePeriodEnd()
	})
}

// SetInvoiceAt sets the "invoice_at" field.
func (u *BillingInvoiceLineUpsertOne) SetInvoiceAt(v time.Time) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetInvoiceAt(v)
	})
}

// UpdateInvoiceAt sets the "invoice_at" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateInvoiceAt() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateInvoiceAt()
	})
}

// SetStatus sets the "status" field.
func (u *BillingInvoiceLineUpsertOne) SetStatus(v billing.InvoiceLineStatus) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateStatus() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateStatus()
	})
}

// SetQuantity sets the "quantity" field.
func (u *BillingInvoiceLineUpsertOne) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateQuantity() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateQuantity()
	})
}

// ClearQuantity clears the value of the "quantity" field.
func (u *BillingInvoiceLineUpsertOne) ClearQuantity() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearQuantity()
	})
}

// SetTaxConfig sets the "tax_config" field.
func (u *BillingInvoiceLineUpsertOne) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetTaxConfig(v)
	})
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateTaxConfig() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateTaxConfig()
	})
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *BillingInvoiceLineUpsertOne) ClearTaxConfig() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearTaxConfig()
	})
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineUpsertOne) SetInvoicingAppExternalID(v string) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetInvoicingAppExternalID(v)
	})
}

// UpdateInvoicingAppExternalID sets the "invoicing_app_external_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateInvoicingAppExternalID() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateInvoicingAppExternalID()
	})
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineUpsertOne) ClearInvoicingAppExternalID() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearInvoicingAppExternalID()
	})
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (u *BillingInvoiceLineUpsertOne) SetChildUniqueReferenceID(v string) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetChildUniqueReferenceID(v)
	})
}

// UpdateChildUniqueReferenceID sets the "child_unique_reference_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateChildUniqueReferenceID() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateChildUniqueReferenceID()
	})
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (u *BillingInvoiceLineUpsertOne) ClearChildUniqueReferenceID() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearChildUniqueReferenceID()
	})
}

// SetSubscriptionID sets the "subscription_id" field.
func (u *BillingInvoiceLineUpsertOne) SetSubscriptionID(v string) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetSubscriptionID(v)
	})
}

// UpdateSubscriptionID sets the "subscription_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateSubscriptionID() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateSubscriptionID()
	})
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (u *BillingInvoiceLineUpsertOne) ClearSubscriptionID() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearSubscriptionID()
	})
}

// SetSubscriptionPhaseID sets the "subscription_phase_id" field.
func (u *BillingInvoiceLineUpsertOne) SetSubscriptionPhaseID(v string) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetSubscriptionPhaseID(v)
	})
}

// UpdateSubscriptionPhaseID sets the "subscription_phase_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateSubscriptionPhaseID() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateSubscriptionPhaseID()
	})
}

// ClearSubscriptionPhaseID clears the value of the "subscription_phase_id" field.
func (u *BillingInvoiceLineUpsertOne) ClearSubscriptionPhaseID() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearSubscriptionPhaseID()
	})
}

// SetSubscriptionItemID sets the "subscription_item_id" field.
func (u *BillingInvoiceLineUpsertOne) SetSubscriptionItemID(v string) *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetSubscriptionItemID(v)
	})
}

// UpdateSubscriptionItemID sets the "subscription_item_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertOne) UpdateSubscriptionItemID() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateSubscriptionItemID()
	})
}

// ClearSubscriptionItemID clears the value of the "subscription_item_id" field.
func (u *BillingInvoiceLineUpsertOne) ClearSubscriptionItemID() *BillingInvoiceLineUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearSubscriptionItemID()
	})
}

// Exec executes the query.
func (u *BillingInvoiceLineUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceLineCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceLineUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingInvoiceLineUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingInvoiceLineUpsertOne.ID is not supported by MySQL driver. Use BillingInvoiceLineUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingInvoiceLineUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingInvoiceLineCreateBulk is the builder for creating many BillingInvoiceLine entities in bulk.
type BillingInvoiceLineCreateBulk struct {
	config
	err      error
	builders []*BillingInvoiceLineCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingInvoiceLine entities in the database.
func (bilcb *BillingInvoiceLineCreateBulk) Save(ctx context.Context) ([]*BillingInvoiceLine, error) {
	if bilcb.err != nil {
		return nil, bilcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bilcb.builders))
	nodes := make([]*BillingInvoiceLine, len(bilcb.builders))
	mutators := make([]Mutator, len(bilcb.builders))
	for i := range bilcb.builders {
		func(i int, root context.Context) {
			builder := bilcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingInvoiceLineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bilcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bilcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bilcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bilcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bilcb *BillingInvoiceLineCreateBulk) SaveX(ctx context.Context) []*BillingInvoiceLine {
	v, err := bilcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bilcb *BillingInvoiceLineCreateBulk) Exec(ctx context.Context) error {
	_, err := bilcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bilcb *BillingInvoiceLineCreateBulk) ExecX(ctx context.Context) {
	if err := bilcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceLine.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceLineUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bilcb *BillingInvoiceLineCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceLineUpsertBulk {
	bilcb.conflict = opts
	return &BillingInvoiceLineUpsertBulk{
		create: bilcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceLine.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bilcb *BillingInvoiceLineCreateBulk) OnConflictColumns(columns ...string) *BillingInvoiceLineUpsertBulk {
	bilcb.conflict = append(bilcb.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceLineUpsertBulk{
		create: bilcb,
	}
}

// BillingInvoiceLineUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingInvoiceLine nodes.
type BillingInvoiceLineUpsertBulk struct {
	create *BillingInvoiceLineCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingInvoiceLine.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoiceline.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceLineUpsertBulk) UpdateNewValues() *BillingInvoiceLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billinginvoiceline.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billinginvoiceline.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billinginvoiceline.FieldCreatedAt)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(billinginvoiceline.FieldType)
			}
			if _, exists := b.mutation.Currency(); exists {
				s.SetIgnore(billinginvoiceline.FieldCurrency)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceLine.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingInvoiceLineUpsertBulk) Ignore() *BillingInvoiceLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceLineUpsertBulk) DoNothing() *BillingInvoiceLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceLineCreateBulk.OnConflict
// documentation for more info.
func (u *BillingInvoiceLineUpsertBulk) Update(set func(*BillingInvoiceLineUpsert)) *BillingInvoiceLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceLineUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceLineUpsertBulk) SetMetadata(v map[string]string) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateMetadata() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceLineUpsertBulk) ClearMetadata() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceLineUpsertBulk) SetUpdatedAt(v time.Time) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateUpdatedAt() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceLineUpsertBulk) SetDeletedAt(v time.Time) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateDeletedAt() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceLineUpsertBulk) ClearDeletedAt() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *BillingInvoiceLineUpsertBulk) SetName(v string) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateName() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceLineUpsertBulk) SetDescription(v string) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateDescription() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceLineUpsertBulk) ClearDescription() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearDescription()
	})
}

// SetAmount sets the "amount" field.
func (u *BillingInvoiceLineUpsertBulk) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateAmount() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateAmount()
	})
}

// SetTaxesTotal sets the "taxes_total" field.
func (u *BillingInvoiceLineUpsertBulk) SetTaxesTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetTaxesTotal(v)
	})
}

// UpdateTaxesTotal sets the "taxes_total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateTaxesTotal() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateTaxesTotal()
	})
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (u *BillingInvoiceLineUpsertBulk) SetTaxesInclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetTaxesInclusiveTotal(v)
	})
}

// UpdateTaxesInclusiveTotal sets the "taxes_inclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateTaxesInclusiveTotal() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateTaxesInclusiveTotal()
	})
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (u *BillingInvoiceLineUpsertBulk) SetTaxesExclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetTaxesExclusiveTotal(v)
	})
}

// UpdateTaxesExclusiveTotal sets the "taxes_exclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateTaxesExclusiveTotal() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateTaxesExclusiveTotal()
	})
}

// SetChargesTotal sets the "charges_total" field.
func (u *BillingInvoiceLineUpsertBulk) SetChargesTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetChargesTotal(v)
	})
}

// UpdateChargesTotal sets the "charges_total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateChargesTotal() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateChargesTotal()
	})
}

// SetDiscountsTotal sets the "discounts_total" field.
func (u *BillingInvoiceLineUpsertBulk) SetDiscountsTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetDiscountsTotal(v)
	})
}

// UpdateDiscountsTotal sets the "discounts_total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateDiscountsTotal() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateDiscountsTotal()
	})
}

// SetTotal sets the "total" field.
func (u *BillingInvoiceLineUpsertBulk) SetTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateTotal() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateTotal()
	})
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceLineUpsertBulk) SetInvoiceID(v string) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetInvoiceID(v)
	})
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateInvoiceID() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateInvoiceID()
	})
}

// SetParentLineID sets the "parent_line_id" field.
func (u *BillingInvoiceLineUpsertBulk) SetParentLineID(v string) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetParentLineID(v)
	})
}

// UpdateParentLineID sets the "parent_line_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateParentLineID() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateParentLineID()
	})
}

// ClearParentLineID clears the value of the "parent_line_id" field.
func (u *BillingInvoiceLineUpsertBulk) ClearParentLineID() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearParentLineID()
	})
}

// SetPeriodStart sets the "period_start" field.
func (u *BillingInvoiceLineUpsertBulk) SetPeriodStart(v time.Time) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetPeriodStart(v)
	})
}

// UpdatePeriodStart sets the "period_start" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdatePeriodStart() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdatePeriodStart()
	})
}

// SetPeriodEnd sets the "period_end" field.
func (u *BillingInvoiceLineUpsertBulk) SetPeriodEnd(v time.Time) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetPeriodEnd(v)
	})
}

// UpdatePeriodEnd sets the "period_end" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdatePeriodEnd() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdatePeriodEnd()
	})
}

// SetInvoiceAt sets the "invoice_at" field.
func (u *BillingInvoiceLineUpsertBulk) SetInvoiceAt(v time.Time) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetInvoiceAt(v)
	})
}

// UpdateInvoiceAt sets the "invoice_at" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateInvoiceAt() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateInvoiceAt()
	})
}

// SetStatus sets the "status" field.
func (u *BillingInvoiceLineUpsertBulk) SetStatus(v billing.InvoiceLineStatus) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateStatus() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateStatus()
	})
}

// SetQuantity sets the "quantity" field.
func (u *BillingInvoiceLineUpsertBulk) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateQuantity() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateQuantity()
	})
}

// ClearQuantity clears the value of the "quantity" field.
func (u *BillingInvoiceLineUpsertBulk) ClearQuantity() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearQuantity()
	})
}

// SetTaxConfig sets the "tax_config" field.
func (u *BillingInvoiceLineUpsertBulk) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetTaxConfig(v)
	})
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateTaxConfig() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateTaxConfig()
	})
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *BillingInvoiceLineUpsertBulk) ClearTaxConfig() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearTaxConfig()
	})
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineUpsertBulk) SetInvoicingAppExternalID(v string) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetInvoicingAppExternalID(v)
	})
}

// UpdateInvoicingAppExternalID sets the "invoicing_app_external_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateInvoicingAppExternalID() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateInvoicingAppExternalID()
	})
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineUpsertBulk) ClearInvoicingAppExternalID() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearInvoicingAppExternalID()
	})
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (u *BillingInvoiceLineUpsertBulk) SetChildUniqueReferenceID(v string) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetChildUniqueReferenceID(v)
	})
}

// UpdateChildUniqueReferenceID sets the "child_unique_reference_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateChildUniqueReferenceID() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateChildUniqueReferenceID()
	})
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (u *BillingInvoiceLineUpsertBulk) ClearChildUniqueReferenceID() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearChildUniqueReferenceID()
	})
}

// SetSubscriptionID sets the "subscription_id" field.
func (u *BillingInvoiceLineUpsertBulk) SetSubscriptionID(v string) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetSubscriptionID(v)
	})
}

// UpdateSubscriptionID sets the "subscription_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateSubscriptionID() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateSubscriptionID()
	})
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (u *BillingInvoiceLineUpsertBulk) ClearSubscriptionID() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearSubscriptionID()
	})
}

// SetSubscriptionPhaseID sets the "subscription_phase_id" field.
func (u *BillingInvoiceLineUpsertBulk) SetSubscriptionPhaseID(v string) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetSubscriptionPhaseID(v)
	})
}

// UpdateSubscriptionPhaseID sets the "subscription_phase_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateSubscriptionPhaseID() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateSubscriptionPhaseID()
	})
}

// ClearSubscriptionPhaseID clears the value of the "subscription_phase_id" field.
func (u *BillingInvoiceLineUpsertBulk) ClearSubscriptionPhaseID() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearSubscriptionPhaseID()
	})
}

// SetSubscriptionItemID sets the "subscription_item_id" field.
func (u *BillingInvoiceLineUpsertBulk) SetSubscriptionItemID(v string) *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.SetSubscriptionItemID(v)
	})
}

// UpdateSubscriptionItemID sets the "subscription_item_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUpsertBulk) UpdateSubscriptionItemID() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.UpdateSubscriptionItemID()
	})
}

// ClearSubscriptionItemID clears the value of the "subscription_item_id" field.
func (u *BillingInvoiceLineUpsertBulk) ClearSubscriptionItemID() *BillingInvoiceLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUpsert) {
		s.ClearSubscriptionItemID()
	})
}

// Exec executes the query.
func (u *BillingInvoiceLineUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingInvoiceLineCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceLineCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceLineUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
