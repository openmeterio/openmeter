// Code generated by ent, DO NOT EDIT.

package dbmeter

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/meter"
)

const (
	// Label holds the string label denoting the meter type in the database.
	Label = "meter"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldValueProperty holds the string denoting the value_property field in the database.
	FieldValueProperty = "value_property"
	// FieldGroupBy holds the string denoting the group_by field in the database.
	FieldGroupBy = "group_by"
	// FieldAggregation holds the string denoting the aggregation field in the database.
	FieldAggregation = "aggregation"
	// FieldEventFrom holds the string denoting the event_from field in the database.
	FieldEventFrom = "event_from"
	// Table holds the table name of the meter in the database.
	Table = "meters"
)

// Columns holds all SQL columns for meter fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldDescription,
	FieldKey,
	FieldEventType,
	FieldValueProperty,
	FieldGroupBy,
	FieldAggregation,
	FieldEventFrom,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
	// EventTypeValidator is a validator for the "event_type" field. It is called by the builders before save.
	EventTypeValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// AggregationValidator is a validator for the "aggregation" field enum values. It is called by the builders before save.
func AggregationValidator(a meter.MeterAggregation) error {
	switch a {
	case "SUM", "COUNT", "AVG", "MIN", "MAX", "UNIQUE_COUNT", "LATEST":
		return nil
	default:
		return fmt.Errorf("dbmeter: invalid enum value for aggregation field: %q", a)
	}
}

// OrderOption defines the ordering options for the Meter queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByValueProperty orders the results by the value_property field.
func ByValueProperty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValueProperty, opts...).ToFunc()
}

// ByAggregation orders the results by the aggregation field.
func ByAggregation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAggregation, opts...).ToFunc()
}

// ByEventFrom orders the results by the event_from field.
func ByEventFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventFrom, opts...).ToFunc()
}
