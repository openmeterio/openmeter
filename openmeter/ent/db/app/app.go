// Code generated by ent, DO NOT EDIT.

package app

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the app type in the database.
	Label = "app"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldIsDefault holds the string denoting the is_default field in the database.
	FieldIsDefault = "is_default"
	// EdgeCustomerApps holds the string denoting the customer_apps edge name in mutations.
	EdgeCustomerApps = "customer_apps"
	// EdgeBillingProfileTaxApp holds the string denoting the billing_profile_tax_app edge name in mutations.
	EdgeBillingProfileTaxApp = "billing_profile_tax_app"
	// EdgeBillingProfileInvoicingApp holds the string denoting the billing_profile_invoicing_app edge name in mutations.
	EdgeBillingProfileInvoicingApp = "billing_profile_invoicing_app"
	// EdgeBillingProfilePaymentApp holds the string denoting the billing_profile_payment_app edge name in mutations.
	EdgeBillingProfilePaymentApp = "billing_profile_payment_app"
	// EdgeBillingInvoiceTaxApp holds the string denoting the billing_invoice_tax_app edge name in mutations.
	EdgeBillingInvoiceTaxApp = "billing_invoice_tax_app"
	// EdgeBillingInvoiceInvoicingApp holds the string denoting the billing_invoice_invoicing_app edge name in mutations.
	EdgeBillingInvoiceInvoicingApp = "billing_invoice_invoicing_app"
	// EdgeBillingInvoicePaymentApp holds the string denoting the billing_invoice_payment_app edge name in mutations.
	EdgeBillingInvoicePaymentApp = "billing_invoice_payment_app"
	// Table holds the table name of the app in the database.
	Table = "apps"
	// CustomerAppsTable is the table that holds the customer_apps relation/edge.
	CustomerAppsTable = "app_customers"
	// CustomerAppsInverseTable is the table name for the AppCustomer entity.
	// It exists in this package in order to avoid circular dependency with the "appcustomer" package.
	CustomerAppsInverseTable = "app_customers"
	// CustomerAppsColumn is the table column denoting the customer_apps relation/edge.
	CustomerAppsColumn = "app_id"
	// BillingProfileTaxAppTable is the table that holds the billing_profile_tax_app relation/edge.
	BillingProfileTaxAppTable = "billing_profiles"
	// BillingProfileTaxAppInverseTable is the table name for the BillingProfile entity.
	// It exists in this package in order to avoid circular dependency with the "billingprofile" package.
	BillingProfileTaxAppInverseTable = "billing_profiles"
	// BillingProfileTaxAppColumn is the table column denoting the billing_profile_tax_app relation/edge.
	BillingProfileTaxAppColumn = "tax_app_id"
	// BillingProfileInvoicingAppTable is the table that holds the billing_profile_invoicing_app relation/edge.
	BillingProfileInvoicingAppTable = "billing_profiles"
	// BillingProfileInvoicingAppInverseTable is the table name for the BillingProfile entity.
	// It exists in this package in order to avoid circular dependency with the "billingprofile" package.
	BillingProfileInvoicingAppInverseTable = "billing_profiles"
	// BillingProfileInvoicingAppColumn is the table column denoting the billing_profile_invoicing_app relation/edge.
	BillingProfileInvoicingAppColumn = "invoicing_app_id"
	// BillingProfilePaymentAppTable is the table that holds the billing_profile_payment_app relation/edge.
	BillingProfilePaymentAppTable = "billing_profiles"
	// BillingProfilePaymentAppInverseTable is the table name for the BillingProfile entity.
	// It exists in this package in order to avoid circular dependency with the "billingprofile" package.
	BillingProfilePaymentAppInverseTable = "billing_profiles"
	// BillingProfilePaymentAppColumn is the table column denoting the billing_profile_payment_app relation/edge.
	BillingProfilePaymentAppColumn = "payment_app_id"
	// BillingInvoiceTaxAppTable is the table that holds the billing_invoice_tax_app relation/edge.
	BillingInvoiceTaxAppTable = "billing_invoices"
	// BillingInvoiceTaxAppInverseTable is the table name for the BillingInvoice entity.
	// It exists in this package in order to avoid circular dependency with the "billinginvoice" package.
	BillingInvoiceTaxAppInverseTable = "billing_invoices"
	// BillingInvoiceTaxAppColumn is the table column denoting the billing_invoice_tax_app relation/edge.
	BillingInvoiceTaxAppColumn = "tax_app_id"
	// BillingInvoiceInvoicingAppTable is the table that holds the billing_invoice_invoicing_app relation/edge.
	BillingInvoiceInvoicingAppTable = "billing_invoices"
	// BillingInvoiceInvoicingAppInverseTable is the table name for the BillingInvoice entity.
	// It exists in this package in order to avoid circular dependency with the "billinginvoice" package.
	BillingInvoiceInvoicingAppInverseTable = "billing_invoices"
	// BillingInvoiceInvoicingAppColumn is the table column denoting the billing_invoice_invoicing_app relation/edge.
	BillingInvoiceInvoicingAppColumn = "invoicing_app_id"
	// BillingInvoicePaymentAppTable is the table that holds the billing_invoice_payment_app relation/edge.
	BillingInvoicePaymentAppTable = "billing_invoices"
	// BillingInvoicePaymentAppInverseTable is the table name for the BillingInvoice entity.
	// It exists in this package in order to avoid circular dependency with the "billinginvoice" package.
	BillingInvoicePaymentAppInverseTable = "billing_invoices"
	// BillingInvoicePaymentAppColumn is the table column denoting the billing_invoice_payment_app relation/edge.
	BillingInvoicePaymentAppColumn = "payment_app_id"
)

// Columns holds all SQL columns for app fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldDescription,
	FieldType,
	FieldStatus,
	FieldIsDefault,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsDefault holds the default value on creation for the "is_default" field.
	DefaultIsDefault bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the App queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByIsDefault orders the results by the is_default field.
func ByIsDefault(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDefault, opts...).ToFunc()
}

// ByCustomerAppsCount orders the results by customer_apps count.
func ByCustomerAppsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCustomerAppsStep(), opts...)
	}
}

// ByCustomerApps orders the results by customer_apps terms.
func ByCustomerApps(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerAppsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBillingProfileTaxAppCount orders the results by billing_profile_tax_app count.
func ByBillingProfileTaxAppCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBillingProfileTaxAppStep(), opts...)
	}
}

// ByBillingProfileTaxApp orders the results by billing_profile_tax_app terms.
func ByBillingProfileTaxApp(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingProfileTaxAppStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBillingProfileInvoicingAppCount orders the results by billing_profile_invoicing_app count.
func ByBillingProfileInvoicingAppCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBillingProfileInvoicingAppStep(), opts...)
	}
}

// ByBillingProfileInvoicingApp orders the results by billing_profile_invoicing_app terms.
func ByBillingProfileInvoicingApp(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingProfileInvoicingAppStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBillingProfilePaymentAppCount orders the results by billing_profile_payment_app count.
func ByBillingProfilePaymentAppCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBillingProfilePaymentAppStep(), opts...)
	}
}

// ByBillingProfilePaymentApp orders the results by billing_profile_payment_app terms.
func ByBillingProfilePaymentApp(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingProfilePaymentAppStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBillingInvoiceTaxAppCount orders the results by billing_invoice_tax_app count.
func ByBillingInvoiceTaxAppCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBillingInvoiceTaxAppStep(), opts...)
	}
}

// ByBillingInvoiceTaxApp orders the results by billing_invoice_tax_app terms.
func ByBillingInvoiceTaxApp(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingInvoiceTaxAppStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBillingInvoiceInvoicingAppCount orders the results by billing_invoice_invoicing_app count.
func ByBillingInvoiceInvoicingAppCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBillingInvoiceInvoicingAppStep(), opts...)
	}
}

// ByBillingInvoiceInvoicingApp orders the results by billing_invoice_invoicing_app terms.
func ByBillingInvoiceInvoicingApp(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingInvoiceInvoicingAppStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBillingInvoicePaymentAppCount orders the results by billing_invoice_payment_app count.
func ByBillingInvoicePaymentAppCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBillingInvoicePaymentAppStep(), opts...)
	}
}

// ByBillingInvoicePaymentApp orders the results by billing_invoice_payment_app terms.
func ByBillingInvoicePaymentApp(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingInvoicePaymentAppStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCustomerAppsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerAppsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CustomerAppsTable, CustomerAppsColumn),
	)
}
func newBillingProfileTaxAppStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingProfileTaxAppInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BillingProfileTaxAppTable, BillingProfileTaxAppColumn),
	)
}
func newBillingProfileInvoicingAppStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingProfileInvoicingAppInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BillingProfileInvoicingAppTable, BillingProfileInvoicingAppColumn),
	)
}
func newBillingProfilePaymentAppStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingProfilePaymentAppInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BillingProfilePaymentAppTable, BillingProfilePaymentAppColumn),
	)
}
func newBillingInvoiceTaxAppStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingInvoiceTaxAppInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BillingInvoiceTaxAppTable, BillingInvoiceTaxAppColumn),
	)
}
func newBillingInvoiceInvoicingAppStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingInvoiceInvoicingAppInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BillingInvoiceInvoicingAppTable, BillingInvoiceInvoicingAppColumn),
	)
}
func newBillingInvoicePaymentAppStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingInvoicePaymentAppInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BillingInvoicePaymentAppTable, BillingInvoicePaymentAppColumn),
	)
}
