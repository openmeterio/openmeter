// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicesplitlinegroup"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionphase"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/currencyx"
)

// BillingInvoiceSplitLineGroupCreate is the builder for creating a BillingInvoiceSplitLineGroup entity.
type BillingInvoiceSplitLineGroupCreate struct {
	config
	mutation *BillingInvoiceSplitLineGroupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetNamespace(v string) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetNamespace(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetMetadata(v map[string]string) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetCreatedAt(v time.Time) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BillingInvoiceSplitLineGroupCreate) SetNillableCreatedAt(v *time.Time) *BillingInvoiceSplitLineGroupCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetUpdatedAt(v time.Time) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BillingInvoiceSplitLineGroupCreate) SetNillableUpdatedAt(v *time.Time) *BillingInvoiceSplitLineGroupCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetDeletedAt(v time.Time) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *BillingInvoiceSplitLineGroupCreate) SetNillableDeletedAt(v *time.Time) *BillingInvoiceSplitLineGroupCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetName(v string) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetDescription(v string) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *BillingInvoiceSplitLineGroupCreate) SetNillableDescription(v *string) *BillingInvoiceSplitLineGroupCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetCurrency sets the "currency" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetCurrency(v currencyx.Code) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetCurrency(v)
	return _c
}

// SetTaxConfig sets the "tax_config" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetTaxConfig(v)
	return _c
}

// SetNillableTaxConfig sets the "tax_config" field if the given value is not nil.
func (_c *BillingInvoiceSplitLineGroupCreate) SetNillableTaxConfig(v *productcatalog.TaxConfig) *BillingInvoiceSplitLineGroupCreate {
	if v != nil {
		_c.SetTaxConfig(*v)
	}
	return _c
}

// SetServicePeriodStart sets the "service_period_start" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetServicePeriodStart(v time.Time) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetServicePeriodStart(v)
	return _c
}

// SetServicePeriodEnd sets the "service_period_end" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetServicePeriodEnd(v time.Time) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetServicePeriodEnd(v)
	return _c
}

// SetUniqueReferenceID sets the "unique_reference_id" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetUniqueReferenceID(v string) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetUniqueReferenceID(v)
	return _c
}

// SetNillableUniqueReferenceID sets the "unique_reference_id" field if the given value is not nil.
func (_c *BillingInvoiceSplitLineGroupCreate) SetNillableUniqueReferenceID(v *string) *BillingInvoiceSplitLineGroupCreate {
	if v != nil {
		_c.SetUniqueReferenceID(*v)
	}
	return _c
}

// SetRatecardDiscounts sets the "ratecard_discounts" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetRatecardDiscounts(v *billing.Discounts) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetRatecardDiscounts(v)
	return _c
}

// SetFeatureKey sets the "feature_key" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetFeatureKey(v string) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetFeatureKey(v)
	return _c
}

// SetNillableFeatureKey sets the "feature_key" field if the given value is not nil.
func (_c *BillingInvoiceSplitLineGroupCreate) SetNillableFeatureKey(v *string) *BillingInvoiceSplitLineGroupCreate {
	if v != nil {
		_c.SetFeatureKey(*v)
	}
	return _c
}

// SetPrice sets the "price" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetPrice(v *productcatalog.Price) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetPrice(v)
	return _c
}

// SetSubscriptionID sets the "subscription_id" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetSubscriptionID(v string) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetSubscriptionID(v)
	return _c
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (_c *BillingInvoiceSplitLineGroupCreate) SetNillableSubscriptionID(v *string) *BillingInvoiceSplitLineGroupCreate {
	if v != nil {
		_c.SetSubscriptionID(*v)
	}
	return _c
}

// SetSubscriptionPhaseID sets the "subscription_phase_id" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetSubscriptionPhaseID(v string) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetSubscriptionPhaseID(v)
	return _c
}

// SetNillableSubscriptionPhaseID sets the "subscription_phase_id" field if the given value is not nil.
func (_c *BillingInvoiceSplitLineGroupCreate) SetNillableSubscriptionPhaseID(v *string) *BillingInvoiceSplitLineGroupCreate {
	if v != nil {
		_c.SetSubscriptionPhaseID(*v)
	}
	return _c
}

// SetSubscriptionItemID sets the "subscription_item_id" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetSubscriptionItemID(v string) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetSubscriptionItemID(v)
	return _c
}

// SetNillableSubscriptionItemID sets the "subscription_item_id" field if the given value is not nil.
func (_c *BillingInvoiceSplitLineGroupCreate) SetNillableSubscriptionItemID(v *string) *BillingInvoiceSplitLineGroupCreate {
	if v != nil {
		_c.SetSubscriptionItemID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *BillingInvoiceSplitLineGroupCreate) SetID(v string) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *BillingInvoiceSplitLineGroupCreate) SetNillableID(v *string) *BillingInvoiceSplitLineGroupCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddBillingInvoiceLineIDs adds the "billing_invoice_lines" edge to the BillingInvoiceLine entity by IDs.
func (_c *BillingInvoiceSplitLineGroupCreate) AddBillingInvoiceLineIDs(ids ...string) *BillingInvoiceSplitLineGroupCreate {
	_c.mutation.AddBillingInvoiceLineIDs(ids...)
	return _c
}

// AddBillingInvoiceLines adds the "billing_invoice_lines" edges to the BillingInvoiceLine entity.
func (_c *BillingInvoiceSplitLineGroupCreate) AddBillingInvoiceLines(v ...*BillingInvoiceLine) *BillingInvoiceSplitLineGroupCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddBillingInvoiceLineIDs(ids...)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (_c *BillingInvoiceSplitLineGroupCreate) SetSubscription(v *Subscription) *BillingInvoiceSplitLineGroupCreate {
	return _c.SetSubscriptionID(v.ID)
}

// SetSubscriptionPhase sets the "subscription_phase" edge to the SubscriptionPhase entity.
func (_c *BillingInvoiceSplitLineGroupCreate) SetSubscriptionPhase(v *SubscriptionPhase) *BillingInvoiceSplitLineGroupCreate {
	return _c.SetSubscriptionPhaseID(v.ID)
}

// SetSubscriptionItem sets the "subscription_item" edge to the SubscriptionItem entity.
func (_c *BillingInvoiceSplitLineGroupCreate) SetSubscriptionItem(v *SubscriptionItem) *BillingInvoiceSplitLineGroupCreate {
	return _c.SetSubscriptionItemID(v.ID)
}

// Mutation returns the BillingInvoiceSplitLineGroupMutation object of the builder.
func (_c *BillingInvoiceSplitLineGroupCreate) Mutation() *BillingInvoiceSplitLineGroupMutation {
	return _c.mutation
}

// Save creates the BillingInvoiceSplitLineGroup in the database.
func (_c *BillingInvoiceSplitLineGroupCreate) Save(ctx context.Context) (*BillingInvoiceSplitLineGroup, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BillingInvoiceSplitLineGroupCreate) SaveX(ctx context.Context) *BillingInvoiceSplitLineGroup {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BillingInvoiceSplitLineGroupCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BillingInvoiceSplitLineGroupCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BillingInvoiceSplitLineGroupCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := billinginvoicesplitlinegroup.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := billinginvoicesplitlinegroup.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := billinginvoicesplitlinegroup.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BillingInvoiceSplitLineGroupCreate) check() error {
	if _, ok := _c.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingInvoiceSplitLineGroup.namespace"`)}
	}
	if v, ok := _c.mutation.Namespace(); ok {
		if err := billinginvoicesplitlinegroup.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceSplitLineGroup.namespace": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingInvoiceSplitLineGroup.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingInvoiceSplitLineGroup.updated_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "BillingInvoiceSplitLineGroup.name"`)}
	}
	if _, ok := _c.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`db: missing required field "BillingInvoiceSplitLineGroup.currency"`)}
	}
	if v, ok := _c.mutation.Currency(); ok {
		if err := billinginvoicesplitlinegroup.CurrencyValidator(string(v)); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceSplitLineGroup.currency": %w`, err)}
		}
	}
	if v, ok := _c.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceSplitLineGroup.tax_config": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ServicePeriodStart(); !ok {
		return &ValidationError{Name: "service_period_start", err: errors.New(`db: missing required field "BillingInvoiceSplitLineGroup.service_period_start"`)}
	}
	if _, ok := _c.mutation.ServicePeriodEnd(); !ok {
		return &ValidationError{Name: "service_period_end", err: errors.New(`db: missing required field "BillingInvoiceSplitLineGroup.service_period_end"`)}
	}
	if _, ok := _c.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`db: missing required field "BillingInvoiceSplitLineGroup.price"`)}
	}
	if v, ok := _c.mutation.Price(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceSplitLineGroup.price": %w`, err)}
		}
	}
	return nil
}

func (_c *BillingInvoiceSplitLineGroupCreate) sqlSave(ctx context.Context) (*BillingInvoiceSplitLineGroup, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := _c.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingInvoiceSplitLineGroup.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BillingInvoiceSplitLineGroupCreate) createSpec() (*BillingInvoiceSplitLineGroup, *sqlgraph.CreateSpec, error) {
	var (
		_node = &BillingInvoiceSplitLineGroup{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(billinginvoicesplitlinegroup.Table, sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Namespace(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.Currency(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := _c.mutation.TaxConfig(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldTaxConfig, field.TypeJSON, value)
		_node.TaxConfig = value
	}
	if value, ok := _c.mutation.ServicePeriodStart(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldServicePeriodStart, field.TypeTime, value)
		_node.ServicePeriodStart = value
	}
	if value, ok := _c.mutation.ServicePeriodEnd(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldServicePeriodEnd, field.TypeTime, value)
		_node.ServicePeriodEnd = value
	}
	if value, ok := _c.mutation.UniqueReferenceID(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldUniqueReferenceID, field.TypeString, value)
		_node.UniqueReferenceID = &value
	}
	if value, ok := _c.mutation.RatecardDiscounts(); ok {
		vv, err := billinginvoicesplitlinegroup.ValueScanner.RatecardDiscounts.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(billinginvoicesplitlinegroup.FieldRatecardDiscounts, field.TypeString, vv)
		_node.RatecardDiscounts = value
	}
	if value, ok := _c.mutation.FeatureKey(); ok {
		_spec.SetField(billinginvoicesplitlinegroup.FieldFeatureKey, field.TypeString, value)
		_node.FeatureKey = &value
	}
	if value, ok := _c.mutation.Price(); ok {
		vv, err := billinginvoicesplitlinegroup.ValueScanner.Price.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(billinginvoicesplitlinegroup.FieldPrice, field.TypeString, vv)
		_node.Price = value
	}
	if nodes := _c.mutation.BillingInvoiceLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicesplitlinegroup.BillingInvoiceLinesTable,
			Columns: []string{billinginvoicesplitlinegroup.BillingInvoiceLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicesplitlinegroup.SubscriptionTable,
			Columns: []string{billinginvoicesplitlinegroup.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubscriptionPhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicesplitlinegroup.SubscriptionPhaseTable,
			Columns: []string{billinginvoicesplitlinegroup.SubscriptionPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionPhaseID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubscriptionItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicesplitlinegroup.SubscriptionItemTable,
			Columns: []string{billinginvoicesplitlinegroup.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionItemID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceSplitLineGroup.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceSplitLineGroupUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *BillingInvoiceSplitLineGroupCreate) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceSplitLineGroupUpsertOne {
	_c.conflict = opts
	return &BillingInvoiceSplitLineGroupUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceSplitLineGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BillingInvoiceSplitLineGroupCreate) OnConflictColumns(columns ...string) *BillingInvoiceSplitLineGroupUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceSplitLineGroupUpsertOne{
		create: _c,
	}
}

type (
	// BillingInvoiceSplitLineGroupUpsertOne is the builder for "upsert"-ing
	//  one BillingInvoiceSplitLineGroup node.
	BillingInvoiceSplitLineGroupUpsertOne struct {
		create *BillingInvoiceSplitLineGroupCreate
	}

	// BillingInvoiceSplitLineGroupUpsert is the "OnConflict" setter.
	BillingInvoiceSplitLineGroupUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceSplitLineGroupUpsert) SetMetadata(v map[string]string) *BillingInvoiceSplitLineGroupUpsert {
	u.Set(billinginvoicesplitlinegroup.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsert) UpdateMetadata() *BillingInvoiceSplitLineGroupUpsert {
	u.SetExcluded(billinginvoicesplitlinegroup.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceSplitLineGroupUpsert) ClearMetadata() *BillingInvoiceSplitLineGroupUpsert {
	u.SetNull(billinginvoicesplitlinegroup.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceSplitLineGroupUpsert) SetUpdatedAt(v time.Time) *BillingInvoiceSplitLineGroupUpsert {
	u.Set(billinginvoicesplitlinegroup.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsert) UpdateUpdatedAt() *BillingInvoiceSplitLineGroupUpsert {
	u.SetExcluded(billinginvoicesplitlinegroup.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceSplitLineGroupUpsert) SetDeletedAt(v time.Time) *BillingInvoiceSplitLineGroupUpsert {
	u.Set(billinginvoicesplitlinegroup.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsert) UpdateDeletedAt() *BillingInvoiceSplitLineGroupUpsert {
	u.SetExcluded(billinginvoicesplitlinegroup.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceSplitLineGroupUpsert) ClearDeletedAt() *BillingInvoiceSplitLineGroupUpsert {
	u.SetNull(billinginvoicesplitlinegroup.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *BillingInvoiceSplitLineGroupUpsert) SetName(v string) *BillingInvoiceSplitLineGroupUpsert {
	u.Set(billinginvoicesplitlinegroup.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsert) UpdateName() *BillingInvoiceSplitLineGroupUpsert {
	u.SetExcluded(billinginvoicesplitlinegroup.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceSplitLineGroupUpsert) SetDescription(v string) *BillingInvoiceSplitLineGroupUpsert {
	u.Set(billinginvoicesplitlinegroup.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsert) UpdateDescription() *BillingInvoiceSplitLineGroupUpsert {
	u.SetExcluded(billinginvoicesplitlinegroup.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceSplitLineGroupUpsert) ClearDescription() *BillingInvoiceSplitLineGroupUpsert {
	u.SetNull(billinginvoicesplitlinegroup.FieldDescription)
	return u
}

// SetTaxConfig sets the "tax_config" field.
func (u *BillingInvoiceSplitLineGroupUpsert) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceSplitLineGroupUpsert {
	u.Set(billinginvoicesplitlinegroup.FieldTaxConfig, v)
	return u
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsert) UpdateTaxConfig() *BillingInvoiceSplitLineGroupUpsert {
	u.SetExcluded(billinginvoicesplitlinegroup.FieldTaxConfig)
	return u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *BillingInvoiceSplitLineGroupUpsert) ClearTaxConfig() *BillingInvoiceSplitLineGroupUpsert {
	u.SetNull(billinginvoicesplitlinegroup.FieldTaxConfig)
	return u
}

// SetServicePeriodStart sets the "service_period_start" field.
func (u *BillingInvoiceSplitLineGroupUpsert) SetServicePeriodStart(v time.Time) *BillingInvoiceSplitLineGroupUpsert {
	u.Set(billinginvoicesplitlinegroup.FieldServicePeriodStart, v)
	return u
}

// UpdateServicePeriodStart sets the "service_period_start" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsert) UpdateServicePeriodStart() *BillingInvoiceSplitLineGroupUpsert {
	u.SetExcluded(billinginvoicesplitlinegroup.FieldServicePeriodStart)
	return u
}

// SetServicePeriodEnd sets the "service_period_end" field.
func (u *BillingInvoiceSplitLineGroupUpsert) SetServicePeriodEnd(v time.Time) *BillingInvoiceSplitLineGroupUpsert {
	u.Set(billinginvoicesplitlinegroup.FieldServicePeriodEnd, v)
	return u
}

// UpdateServicePeriodEnd sets the "service_period_end" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsert) UpdateServicePeriodEnd() *BillingInvoiceSplitLineGroupUpsert {
	u.SetExcluded(billinginvoicesplitlinegroup.FieldServicePeriodEnd)
	return u
}

// SetRatecardDiscounts sets the "ratecard_discounts" field.
func (u *BillingInvoiceSplitLineGroupUpsert) SetRatecardDiscounts(v *billing.Discounts) *BillingInvoiceSplitLineGroupUpsert {
	u.Set(billinginvoicesplitlinegroup.FieldRatecardDiscounts, v)
	return u
}

// UpdateRatecardDiscounts sets the "ratecard_discounts" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsert) UpdateRatecardDiscounts() *BillingInvoiceSplitLineGroupUpsert {
	u.SetExcluded(billinginvoicesplitlinegroup.FieldRatecardDiscounts)
	return u
}

// ClearRatecardDiscounts clears the value of the "ratecard_discounts" field.
func (u *BillingInvoiceSplitLineGroupUpsert) ClearRatecardDiscounts() *BillingInvoiceSplitLineGroupUpsert {
	u.SetNull(billinginvoicesplitlinegroup.FieldRatecardDiscounts)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceSplitLineGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoicesplitlinegroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceSplitLineGroupUpsertOne) UpdateNewValues() *BillingInvoiceSplitLineGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billinginvoicesplitlinegroup.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billinginvoicesplitlinegroup.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billinginvoicesplitlinegroup.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Currency(); exists {
			s.SetIgnore(billinginvoicesplitlinegroup.FieldCurrency)
		}
		if _, exists := u.create.mutation.UniqueReferenceID(); exists {
			s.SetIgnore(billinginvoicesplitlinegroup.FieldUniqueReferenceID)
		}
		if _, exists := u.create.mutation.FeatureKey(); exists {
			s.SetIgnore(billinginvoicesplitlinegroup.FieldFeatureKey)
		}
		if _, exists := u.create.mutation.Price(); exists {
			s.SetIgnore(billinginvoicesplitlinegroup.FieldPrice)
		}
		if _, exists := u.create.mutation.SubscriptionID(); exists {
			s.SetIgnore(billinginvoicesplitlinegroup.FieldSubscriptionID)
		}
		if _, exists := u.create.mutation.SubscriptionPhaseID(); exists {
			s.SetIgnore(billinginvoicesplitlinegroup.FieldSubscriptionPhaseID)
		}
		if _, exists := u.create.mutation.SubscriptionItemID(); exists {
			s.SetIgnore(billinginvoicesplitlinegroup.FieldSubscriptionItemID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceSplitLineGroup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingInvoiceSplitLineGroupUpsertOne) Ignore() *BillingInvoiceSplitLineGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceSplitLineGroupUpsertOne) DoNothing() *BillingInvoiceSplitLineGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceSplitLineGroupCreate.OnConflict
// documentation for more info.
func (u *BillingInvoiceSplitLineGroupUpsertOne) Update(set func(*BillingInvoiceSplitLineGroupUpsert)) *BillingInvoiceSplitLineGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceSplitLineGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceSplitLineGroupUpsertOne) SetMetadata(v map[string]string) *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertOne) UpdateMetadata() *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceSplitLineGroupUpsertOne) ClearMetadata() *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceSplitLineGroupUpsertOne) SetUpdatedAt(v time.Time) *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertOne) UpdateUpdatedAt() *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceSplitLineGroupUpsertOne) SetDeletedAt(v time.Time) *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertOne) UpdateDeletedAt() *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceSplitLineGroupUpsertOne) ClearDeletedAt() *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *BillingInvoiceSplitLineGroupUpsertOne) SetName(v string) *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertOne) UpdateName() *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceSplitLineGroupUpsertOne) SetDescription(v string) *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertOne) UpdateDescription() *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceSplitLineGroupUpsertOne) ClearDescription() *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.ClearDescription()
	})
}

// SetTaxConfig sets the "tax_config" field.
func (u *BillingInvoiceSplitLineGroupUpsertOne) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetTaxConfig(v)
	})
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertOne) UpdateTaxConfig() *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateTaxConfig()
	})
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *BillingInvoiceSplitLineGroupUpsertOne) ClearTaxConfig() *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.ClearTaxConfig()
	})
}

// SetServicePeriodStart sets the "service_period_start" field.
func (u *BillingInvoiceSplitLineGroupUpsertOne) SetServicePeriodStart(v time.Time) *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetServicePeriodStart(v)
	})
}

// UpdateServicePeriodStart sets the "service_period_start" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertOne) UpdateServicePeriodStart() *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateServicePeriodStart()
	})
}

// SetServicePeriodEnd sets the "service_period_end" field.
func (u *BillingInvoiceSplitLineGroupUpsertOne) SetServicePeriodEnd(v time.Time) *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetServicePeriodEnd(v)
	})
}

// UpdateServicePeriodEnd sets the "service_period_end" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertOne) UpdateServicePeriodEnd() *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateServicePeriodEnd()
	})
}

// SetRatecardDiscounts sets the "ratecard_discounts" field.
func (u *BillingInvoiceSplitLineGroupUpsertOne) SetRatecardDiscounts(v *billing.Discounts) *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetRatecardDiscounts(v)
	})
}

// UpdateRatecardDiscounts sets the "ratecard_discounts" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertOne) UpdateRatecardDiscounts() *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateRatecardDiscounts()
	})
}

// ClearRatecardDiscounts clears the value of the "ratecard_discounts" field.
func (u *BillingInvoiceSplitLineGroupUpsertOne) ClearRatecardDiscounts() *BillingInvoiceSplitLineGroupUpsertOne {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.ClearRatecardDiscounts()
	})
}

// Exec executes the query.
func (u *BillingInvoiceSplitLineGroupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceSplitLineGroupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceSplitLineGroupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingInvoiceSplitLineGroupUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingInvoiceSplitLineGroupUpsertOne.ID is not supported by MySQL driver. Use BillingInvoiceSplitLineGroupUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingInvoiceSplitLineGroupUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingInvoiceSplitLineGroupCreateBulk is the builder for creating many BillingInvoiceSplitLineGroup entities in bulk.
type BillingInvoiceSplitLineGroupCreateBulk struct {
	config
	err      error
	builders []*BillingInvoiceSplitLineGroupCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingInvoiceSplitLineGroup entities in the database.
func (_c *BillingInvoiceSplitLineGroupCreateBulk) Save(ctx context.Context) ([]*BillingInvoiceSplitLineGroup, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BillingInvoiceSplitLineGroup, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingInvoiceSplitLineGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BillingInvoiceSplitLineGroupCreateBulk) SaveX(ctx context.Context) []*BillingInvoiceSplitLineGroup {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BillingInvoiceSplitLineGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BillingInvoiceSplitLineGroupCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceSplitLineGroup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceSplitLineGroupUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *BillingInvoiceSplitLineGroupCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceSplitLineGroupUpsertBulk {
	_c.conflict = opts
	return &BillingInvoiceSplitLineGroupUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceSplitLineGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BillingInvoiceSplitLineGroupCreateBulk) OnConflictColumns(columns ...string) *BillingInvoiceSplitLineGroupUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceSplitLineGroupUpsertBulk{
		create: _c,
	}
}

// BillingInvoiceSplitLineGroupUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingInvoiceSplitLineGroup nodes.
type BillingInvoiceSplitLineGroupUpsertBulk struct {
	create *BillingInvoiceSplitLineGroupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingInvoiceSplitLineGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoicesplitlinegroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceSplitLineGroupUpsertBulk) UpdateNewValues() *BillingInvoiceSplitLineGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billinginvoicesplitlinegroup.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billinginvoicesplitlinegroup.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billinginvoicesplitlinegroup.FieldCreatedAt)
			}
			if _, exists := b.mutation.Currency(); exists {
				s.SetIgnore(billinginvoicesplitlinegroup.FieldCurrency)
			}
			if _, exists := b.mutation.UniqueReferenceID(); exists {
				s.SetIgnore(billinginvoicesplitlinegroup.FieldUniqueReferenceID)
			}
			if _, exists := b.mutation.FeatureKey(); exists {
				s.SetIgnore(billinginvoicesplitlinegroup.FieldFeatureKey)
			}
			if _, exists := b.mutation.Price(); exists {
				s.SetIgnore(billinginvoicesplitlinegroup.FieldPrice)
			}
			if _, exists := b.mutation.SubscriptionID(); exists {
				s.SetIgnore(billinginvoicesplitlinegroup.FieldSubscriptionID)
			}
			if _, exists := b.mutation.SubscriptionPhaseID(); exists {
				s.SetIgnore(billinginvoicesplitlinegroup.FieldSubscriptionPhaseID)
			}
			if _, exists := b.mutation.SubscriptionItemID(); exists {
				s.SetIgnore(billinginvoicesplitlinegroup.FieldSubscriptionItemID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceSplitLineGroup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingInvoiceSplitLineGroupUpsertBulk) Ignore() *BillingInvoiceSplitLineGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) DoNothing() *BillingInvoiceSplitLineGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceSplitLineGroupCreateBulk.OnConflict
// documentation for more info.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) Update(set func(*BillingInvoiceSplitLineGroupUpsert)) *BillingInvoiceSplitLineGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceSplitLineGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) SetMetadata(v map[string]string) *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) UpdateMetadata() *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) ClearMetadata() *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) SetUpdatedAt(v time.Time) *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) UpdateUpdatedAt() *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) SetDeletedAt(v time.Time) *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) UpdateDeletedAt() *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) ClearDeletedAt() *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) SetName(v string) *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) UpdateName() *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) SetDescription(v string) *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) UpdateDescription() *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) ClearDescription() *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.ClearDescription()
	})
}

// SetTaxConfig sets the "tax_config" field.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetTaxConfig(v)
	})
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) UpdateTaxConfig() *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateTaxConfig()
	})
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) ClearTaxConfig() *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.ClearTaxConfig()
	})
}

// SetServicePeriodStart sets the "service_period_start" field.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) SetServicePeriodStart(v time.Time) *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetServicePeriodStart(v)
	})
}

// UpdateServicePeriodStart sets the "service_period_start" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) UpdateServicePeriodStart() *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateServicePeriodStart()
	})
}

// SetServicePeriodEnd sets the "service_period_end" field.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) SetServicePeriodEnd(v time.Time) *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetServicePeriodEnd(v)
	})
}

// UpdateServicePeriodEnd sets the "service_period_end" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) UpdateServicePeriodEnd() *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateServicePeriodEnd()
	})
}

// SetRatecardDiscounts sets the "ratecard_discounts" field.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) SetRatecardDiscounts(v *billing.Discounts) *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.SetRatecardDiscounts(v)
	})
}

// UpdateRatecardDiscounts sets the "ratecard_discounts" field to the value that was provided on create.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) UpdateRatecardDiscounts() *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.UpdateRatecardDiscounts()
	})
}

// ClearRatecardDiscounts clears the value of the "ratecard_discounts" field.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) ClearRatecardDiscounts() *BillingInvoiceSplitLineGroupUpsertBulk {
	return u.Update(func(s *BillingInvoiceSplitLineGroupUpsert) {
		s.ClearRatecardDiscounts()
	})
}

// Exec executes the query.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingInvoiceSplitLineGroupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceSplitLineGroupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceSplitLineGroupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
