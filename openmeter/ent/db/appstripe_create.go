// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/app"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appstripe"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appstripecustomer"
)

// AppStripeCreate is the builder for creating a AppStripe entity.
type AppStripeCreate struct {
	config
	mutation *AppStripeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (asc *AppStripeCreate) SetNamespace(s string) *AppStripeCreate {
	asc.mutation.SetNamespace(s)
	return asc
}

// SetCreatedAt sets the "created_at" field.
func (asc *AppStripeCreate) SetCreatedAt(t time.Time) *AppStripeCreate {
	asc.mutation.SetCreatedAt(t)
	return asc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asc *AppStripeCreate) SetNillableCreatedAt(t *time.Time) *AppStripeCreate {
	if t != nil {
		asc.SetCreatedAt(*t)
	}
	return asc
}

// SetUpdatedAt sets the "updated_at" field.
func (asc *AppStripeCreate) SetUpdatedAt(t time.Time) *AppStripeCreate {
	asc.mutation.SetUpdatedAt(t)
	return asc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asc *AppStripeCreate) SetNillableUpdatedAt(t *time.Time) *AppStripeCreate {
	if t != nil {
		asc.SetUpdatedAt(*t)
	}
	return asc
}

// SetDeletedAt sets the "deleted_at" field.
func (asc *AppStripeCreate) SetDeletedAt(t time.Time) *AppStripeCreate {
	asc.mutation.SetDeletedAt(t)
	return asc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (asc *AppStripeCreate) SetNillableDeletedAt(t *time.Time) *AppStripeCreate {
	if t != nil {
		asc.SetDeletedAt(*t)
	}
	return asc
}

// SetStripeAccountID sets the "stripe_account_id" field.
func (asc *AppStripeCreate) SetStripeAccountID(s string) *AppStripeCreate {
	asc.mutation.SetStripeAccountID(s)
	return asc
}

// SetStripeLivemode sets the "stripe_livemode" field.
func (asc *AppStripeCreate) SetStripeLivemode(b bool) *AppStripeCreate {
	asc.mutation.SetStripeLivemode(b)
	return asc
}

// SetAPIKey sets the "api_key" field.
func (asc *AppStripeCreate) SetAPIKey(s string) *AppStripeCreate {
	asc.mutation.SetAPIKey(s)
	return asc
}

// SetStripeWebhookID sets the "stripe_webhook_id" field.
func (asc *AppStripeCreate) SetStripeWebhookID(s string) *AppStripeCreate {
	asc.mutation.SetStripeWebhookID(s)
	return asc
}

// SetWebhookSecret sets the "webhook_secret" field.
func (asc *AppStripeCreate) SetWebhookSecret(s string) *AppStripeCreate {
	asc.mutation.SetWebhookSecret(s)
	return asc
}

// SetID sets the "id" field.
func (asc *AppStripeCreate) SetID(s string) *AppStripeCreate {
	asc.mutation.SetID(s)
	return asc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (asc *AppStripeCreate) SetNillableID(s *string) *AppStripeCreate {
	if s != nil {
		asc.SetID(*s)
	}
	return asc
}

// AddCustomerAppIDs adds the "customer_apps" edge to the AppStripeCustomer entity by IDs.
func (asc *AppStripeCreate) AddCustomerAppIDs(ids ...int) *AppStripeCreate {
	asc.mutation.AddCustomerAppIDs(ids...)
	return asc
}

// AddCustomerApps adds the "customer_apps" edges to the AppStripeCustomer entity.
func (asc *AppStripeCreate) AddCustomerApps(a ...*AppStripeCustomer) *AppStripeCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return asc.AddCustomerAppIDs(ids...)
}

// SetAppID sets the "app" edge to the App entity by ID.
func (asc *AppStripeCreate) SetAppID(id string) *AppStripeCreate {
	asc.mutation.SetAppID(id)
	return asc
}

// SetNillableAppID sets the "app" edge to the App entity by ID if the given value is not nil.
func (asc *AppStripeCreate) SetNillableAppID(id *string) *AppStripeCreate {
	if id != nil {
		asc = asc.SetAppID(*id)
	}
	return asc
}

// SetApp sets the "app" edge to the App entity.
func (asc *AppStripeCreate) SetApp(a *App) *AppStripeCreate {
	return asc.SetAppID(a.ID)
}

// Mutation returns the AppStripeMutation object of the builder.
func (asc *AppStripeCreate) Mutation() *AppStripeMutation {
	return asc.mutation
}

// Save creates the AppStripe in the database.
func (asc *AppStripeCreate) Save(ctx context.Context) (*AppStripe, error) {
	asc.defaults()
	return withHooks(ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AppStripeCreate) SaveX(ctx context.Context) *AppStripe {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AppStripeCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AppStripeCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *AppStripeCreate) defaults() {
	if _, ok := asc.mutation.CreatedAt(); !ok {
		v := appstripe.DefaultCreatedAt()
		asc.mutation.SetCreatedAt(v)
	}
	if _, ok := asc.mutation.UpdatedAt(); !ok {
		v := appstripe.DefaultUpdatedAt()
		asc.mutation.SetUpdatedAt(v)
	}
	if _, ok := asc.mutation.ID(); !ok {
		v := appstripe.DefaultID()
		asc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AppStripeCreate) check() error {
	if _, ok := asc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "AppStripe.namespace"`)}
	}
	if v, ok := asc.mutation.Namespace(); ok {
		if err := appstripe.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "AppStripe.namespace": %w`, err)}
		}
	}
	if _, ok := asc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "AppStripe.created_at"`)}
	}
	if _, ok := asc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "AppStripe.updated_at"`)}
	}
	if _, ok := asc.mutation.StripeAccountID(); !ok {
		return &ValidationError{Name: "stripe_account_id", err: errors.New(`db: missing required field "AppStripe.stripe_account_id"`)}
	}
	if _, ok := asc.mutation.StripeLivemode(); !ok {
		return &ValidationError{Name: "stripe_livemode", err: errors.New(`db: missing required field "AppStripe.stripe_livemode"`)}
	}
	if _, ok := asc.mutation.APIKey(); !ok {
		return &ValidationError{Name: "api_key", err: errors.New(`db: missing required field "AppStripe.api_key"`)}
	}
	if v, ok := asc.mutation.APIKey(); ok {
		if err := appstripe.APIKeyValidator(v); err != nil {
			return &ValidationError{Name: "api_key", err: fmt.Errorf(`db: validator failed for field "AppStripe.api_key": %w`, err)}
		}
	}
	if _, ok := asc.mutation.StripeWebhookID(); !ok {
		return &ValidationError{Name: "stripe_webhook_id", err: errors.New(`db: missing required field "AppStripe.stripe_webhook_id"`)}
	}
	if v, ok := asc.mutation.StripeWebhookID(); ok {
		if err := appstripe.StripeWebhookIDValidator(v); err != nil {
			return &ValidationError{Name: "stripe_webhook_id", err: fmt.Errorf(`db: validator failed for field "AppStripe.stripe_webhook_id": %w`, err)}
		}
	}
	if _, ok := asc.mutation.WebhookSecret(); !ok {
		return &ValidationError{Name: "webhook_secret", err: errors.New(`db: missing required field "AppStripe.webhook_secret"`)}
	}
	if v, ok := asc.mutation.WebhookSecret(); ok {
		if err := appstripe.WebhookSecretValidator(v); err != nil {
			return &ValidationError{Name: "webhook_secret", err: fmt.Errorf(`db: validator failed for field "AppStripe.webhook_secret": %w`, err)}
		}
	}
	return nil
}

func (asc *AppStripeCreate) sqlSave(ctx context.Context) (*AppStripe, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AppStripe.ID type: %T", _spec.ID.Value)
		}
	}
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *AppStripeCreate) createSpec() (*AppStripe, *sqlgraph.CreateSpec) {
	var (
		_node = &AppStripe{config: asc.config}
		_spec = sqlgraph.NewCreateSpec(appstripe.Table, sqlgraph.NewFieldSpec(appstripe.FieldID, field.TypeString))
	)
	_spec.OnConflict = asc.conflict
	if id, ok := asc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := asc.mutation.Namespace(); ok {
		_spec.SetField(appstripe.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := asc.mutation.CreatedAt(); ok {
		_spec.SetField(appstripe.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := asc.mutation.UpdatedAt(); ok {
		_spec.SetField(appstripe.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := asc.mutation.DeletedAt(); ok {
		_spec.SetField(appstripe.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := asc.mutation.StripeAccountID(); ok {
		_spec.SetField(appstripe.FieldStripeAccountID, field.TypeString, value)
		_node.StripeAccountID = value
	}
	if value, ok := asc.mutation.StripeLivemode(); ok {
		_spec.SetField(appstripe.FieldStripeLivemode, field.TypeBool, value)
		_node.StripeLivemode = value
	}
	if value, ok := asc.mutation.APIKey(); ok {
		_spec.SetField(appstripe.FieldAPIKey, field.TypeString, value)
		_node.APIKey = value
	}
	if value, ok := asc.mutation.StripeWebhookID(); ok {
		_spec.SetField(appstripe.FieldStripeWebhookID, field.TypeString, value)
		_node.StripeWebhookID = value
	}
	if value, ok := asc.mutation.WebhookSecret(); ok {
		_spec.SetField(appstripe.FieldWebhookSecret, field.TypeString, value)
		_node.WebhookSecret = value
	}
	if nodes := asc.mutation.CustomerAppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appstripe.CustomerAppsTable,
			Columns: []string{appstripe.CustomerAppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appstripecustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := asc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appstripe.AppTable,
			Columns: []string{appstripe.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppStripe.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppStripeUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (asc *AppStripeCreate) OnConflict(opts ...sql.ConflictOption) *AppStripeUpsertOne {
	asc.conflict = opts
	return &AppStripeUpsertOne{
		create: asc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppStripe.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (asc *AppStripeCreate) OnConflictColumns(columns ...string) *AppStripeUpsertOne {
	asc.conflict = append(asc.conflict, sql.ConflictColumns(columns...))
	return &AppStripeUpsertOne{
		create: asc,
	}
}

type (
	// AppStripeUpsertOne is the builder for "upsert"-ing
	//  one AppStripe node.
	AppStripeUpsertOne struct {
		create *AppStripeCreate
	}

	// AppStripeUpsert is the "OnConflict" setter.
	AppStripeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AppStripeUpsert) SetUpdatedAt(v time.Time) *AppStripeUpsert {
	u.Set(appstripe.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppStripeUpsert) UpdateUpdatedAt() *AppStripeUpsert {
	u.SetExcluded(appstripe.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppStripeUpsert) SetDeletedAt(v time.Time) *AppStripeUpsert {
	u.Set(appstripe.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppStripeUpsert) UpdateDeletedAt() *AppStripeUpsert {
	u.SetExcluded(appstripe.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AppStripeUpsert) ClearDeletedAt() *AppStripeUpsert {
	u.SetNull(appstripe.FieldDeletedAt)
	return u
}

// SetAPIKey sets the "api_key" field.
func (u *AppStripeUpsert) SetAPIKey(v string) *AppStripeUpsert {
	u.Set(appstripe.FieldAPIKey, v)
	return u
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *AppStripeUpsert) UpdateAPIKey() *AppStripeUpsert {
	u.SetExcluded(appstripe.FieldAPIKey)
	return u
}

// SetStripeWebhookID sets the "stripe_webhook_id" field.
func (u *AppStripeUpsert) SetStripeWebhookID(v string) *AppStripeUpsert {
	u.Set(appstripe.FieldStripeWebhookID, v)
	return u
}

// UpdateStripeWebhookID sets the "stripe_webhook_id" field to the value that was provided on create.
func (u *AppStripeUpsert) UpdateStripeWebhookID() *AppStripeUpsert {
	u.SetExcluded(appstripe.FieldStripeWebhookID)
	return u
}

// SetWebhookSecret sets the "webhook_secret" field.
func (u *AppStripeUpsert) SetWebhookSecret(v string) *AppStripeUpsert {
	u.Set(appstripe.FieldWebhookSecret, v)
	return u
}

// UpdateWebhookSecret sets the "webhook_secret" field to the value that was provided on create.
func (u *AppStripeUpsert) UpdateWebhookSecret() *AppStripeUpsert {
	u.SetExcluded(appstripe.FieldWebhookSecret)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppStripe.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appstripe.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppStripeUpsertOne) UpdateNewValues() *AppStripeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appstripe.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(appstripe.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(appstripe.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.StripeAccountID(); exists {
			s.SetIgnore(appstripe.FieldStripeAccountID)
		}
		if _, exists := u.create.mutation.StripeLivemode(); exists {
			s.SetIgnore(appstripe.FieldStripeLivemode)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppStripe.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppStripeUpsertOne) Ignore() *AppStripeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppStripeUpsertOne) DoNothing() *AppStripeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppStripeCreate.OnConflict
// documentation for more info.
func (u *AppStripeUpsertOne) Update(set func(*AppStripeUpsert)) *AppStripeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppStripeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppStripeUpsertOne) SetUpdatedAt(v time.Time) *AppStripeUpsertOne {
	return u.Update(func(s *AppStripeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppStripeUpsertOne) UpdateUpdatedAt() *AppStripeUpsertOne {
	return u.Update(func(s *AppStripeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppStripeUpsertOne) SetDeletedAt(v time.Time) *AppStripeUpsertOne {
	return u.Update(func(s *AppStripeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppStripeUpsertOne) UpdateDeletedAt() *AppStripeUpsertOne {
	return u.Update(func(s *AppStripeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AppStripeUpsertOne) ClearDeletedAt() *AppStripeUpsertOne {
	return u.Update(func(s *AppStripeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *AppStripeUpsertOne) SetAPIKey(v string) *AppStripeUpsertOne {
	return u.Update(func(s *AppStripeUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *AppStripeUpsertOne) UpdateAPIKey() *AppStripeUpsertOne {
	return u.Update(func(s *AppStripeUpsert) {
		s.UpdateAPIKey()
	})
}

// SetStripeWebhookID sets the "stripe_webhook_id" field.
func (u *AppStripeUpsertOne) SetStripeWebhookID(v string) *AppStripeUpsertOne {
	return u.Update(func(s *AppStripeUpsert) {
		s.SetStripeWebhookID(v)
	})
}

// UpdateStripeWebhookID sets the "stripe_webhook_id" field to the value that was provided on create.
func (u *AppStripeUpsertOne) UpdateStripeWebhookID() *AppStripeUpsertOne {
	return u.Update(func(s *AppStripeUpsert) {
		s.UpdateStripeWebhookID()
	})
}

// SetWebhookSecret sets the "webhook_secret" field.
func (u *AppStripeUpsertOne) SetWebhookSecret(v string) *AppStripeUpsertOne {
	return u.Update(func(s *AppStripeUpsert) {
		s.SetWebhookSecret(v)
	})
}

// UpdateWebhookSecret sets the "webhook_secret" field to the value that was provided on create.
func (u *AppStripeUpsertOne) UpdateWebhookSecret() *AppStripeUpsertOne {
	return u.Update(func(s *AppStripeUpsert) {
		s.UpdateWebhookSecret()
	})
}

// Exec executes the query.
func (u *AppStripeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for AppStripeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppStripeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppStripeUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: AppStripeUpsertOne.ID is not supported by MySQL driver. Use AppStripeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppStripeUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppStripeCreateBulk is the builder for creating many AppStripe entities in bulk.
type AppStripeCreateBulk struct {
	config
	err      error
	builders []*AppStripeCreate
	conflict []sql.ConflictOption
}

// Save creates the AppStripe entities in the database.
func (ascb *AppStripeCreateBulk) Save(ctx context.Context) ([]*AppStripe, error) {
	if ascb.err != nil {
		return nil, ascb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AppStripe, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppStripeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ascb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AppStripeCreateBulk) SaveX(ctx context.Context) []*AppStripe {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AppStripeCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AppStripeCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppStripe.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppStripeUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (ascb *AppStripeCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppStripeUpsertBulk {
	ascb.conflict = opts
	return &AppStripeUpsertBulk{
		create: ascb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppStripe.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ascb *AppStripeCreateBulk) OnConflictColumns(columns ...string) *AppStripeUpsertBulk {
	ascb.conflict = append(ascb.conflict, sql.ConflictColumns(columns...))
	return &AppStripeUpsertBulk{
		create: ascb,
	}
}

// AppStripeUpsertBulk is the builder for "upsert"-ing
// a bulk of AppStripe nodes.
type AppStripeUpsertBulk struct {
	create *AppStripeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppStripe.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appstripe.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppStripeUpsertBulk) UpdateNewValues() *AppStripeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appstripe.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(appstripe.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(appstripe.FieldCreatedAt)
			}
			if _, exists := b.mutation.StripeAccountID(); exists {
				s.SetIgnore(appstripe.FieldStripeAccountID)
			}
			if _, exists := b.mutation.StripeLivemode(); exists {
				s.SetIgnore(appstripe.FieldStripeLivemode)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppStripe.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppStripeUpsertBulk) Ignore() *AppStripeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppStripeUpsertBulk) DoNothing() *AppStripeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppStripeCreateBulk.OnConflict
// documentation for more info.
func (u *AppStripeUpsertBulk) Update(set func(*AppStripeUpsert)) *AppStripeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppStripeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppStripeUpsertBulk) SetUpdatedAt(v time.Time) *AppStripeUpsertBulk {
	return u.Update(func(s *AppStripeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppStripeUpsertBulk) UpdateUpdatedAt() *AppStripeUpsertBulk {
	return u.Update(func(s *AppStripeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppStripeUpsertBulk) SetDeletedAt(v time.Time) *AppStripeUpsertBulk {
	return u.Update(func(s *AppStripeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppStripeUpsertBulk) UpdateDeletedAt() *AppStripeUpsertBulk {
	return u.Update(func(s *AppStripeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AppStripeUpsertBulk) ClearDeletedAt() *AppStripeUpsertBulk {
	return u.Update(func(s *AppStripeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *AppStripeUpsertBulk) SetAPIKey(v string) *AppStripeUpsertBulk {
	return u.Update(func(s *AppStripeUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *AppStripeUpsertBulk) UpdateAPIKey() *AppStripeUpsertBulk {
	return u.Update(func(s *AppStripeUpsert) {
		s.UpdateAPIKey()
	})
}

// SetStripeWebhookID sets the "stripe_webhook_id" field.
func (u *AppStripeUpsertBulk) SetStripeWebhookID(v string) *AppStripeUpsertBulk {
	return u.Update(func(s *AppStripeUpsert) {
		s.SetStripeWebhookID(v)
	})
}

// UpdateStripeWebhookID sets the "stripe_webhook_id" field to the value that was provided on create.
func (u *AppStripeUpsertBulk) UpdateStripeWebhookID() *AppStripeUpsertBulk {
	return u.Update(func(s *AppStripeUpsert) {
		s.UpdateStripeWebhookID()
	})
}

// SetWebhookSecret sets the "webhook_secret" field.
func (u *AppStripeUpsertBulk) SetWebhookSecret(v string) *AppStripeUpsertBulk {
	return u.Update(func(s *AppStripeUpsert) {
		s.SetWebhookSecret(v)
	})
}

// UpdateWebhookSecret sets the "webhook_secret" field to the value that was provided on create.
func (u *AppStripeUpsertBulk) UpdateWebhookSecret() *AppStripeUpsertBulk {
	return u.Update(func(s *AppStripeUpsert) {
		s.UpdateWebhookSecret()
	})
}

// Exec executes the query.
func (u *AppStripeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the AppStripeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for AppStripeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppStripeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
