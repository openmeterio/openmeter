// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustominvoicingcustomer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// AppCustomInvoicingCustomerUpdate is the builder for updating AppCustomInvoicingCustomer entities.
type AppCustomInvoicingCustomerUpdate struct {
	config
	hooks    []Hook
	mutation *AppCustomInvoicingCustomerMutation
}

// Where appends a list predicates to the AppCustomInvoicingCustomerUpdate builder.
func (acicu *AppCustomInvoicingCustomerUpdate) Where(ps ...predicate.AppCustomInvoicingCustomer) *AppCustomInvoicingCustomerUpdate {
	acicu.mutation.Where(ps...)
	return acicu
}

// SetUpdatedAt sets the "updated_at" field.
func (acicu *AppCustomInvoicingCustomerUpdate) SetUpdatedAt(t time.Time) *AppCustomInvoicingCustomerUpdate {
	acicu.mutation.SetUpdatedAt(t)
	return acicu
}

// SetDeletedAt sets the "deleted_at" field.
func (acicu *AppCustomInvoicingCustomerUpdate) SetDeletedAt(t time.Time) *AppCustomInvoicingCustomerUpdate {
	acicu.mutation.SetDeletedAt(t)
	return acicu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acicu *AppCustomInvoicingCustomerUpdate) SetNillableDeletedAt(t *time.Time) *AppCustomInvoicingCustomerUpdate {
	if t != nil {
		acicu.SetDeletedAt(*t)
	}
	return acicu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (acicu *AppCustomInvoicingCustomerUpdate) ClearDeletedAt() *AppCustomInvoicingCustomerUpdate {
	acicu.mutation.ClearDeletedAt()
	return acicu
}

// SetMetadata sets the "metadata" field.
func (acicu *AppCustomInvoicingCustomerUpdate) SetMetadata(m map[string]string) *AppCustomInvoicingCustomerUpdate {
	acicu.mutation.SetMetadata(m)
	return acicu
}

// ClearMetadata clears the value of the "metadata" field.
func (acicu *AppCustomInvoicingCustomerUpdate) ClearMetadata() *AppCustomInvoicingCustomerUpdate {
	acicu.mutation.ClearMetadata()
	return acicu
}

// Mutation returns the AppCustomInvoicingCustomerMutation object of the builder.
func (acicu *AppCustomInvoicingCustomerUpdate) Mutation() *AppCustomInvoicingCustomerMutation {
	return acicu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acicu *AppCustomInvoicingCustomerUpdate) Save(ctx context.Context) (int, error) {
	acicu.defaults()
	return withHooks(ctx, acicu.sqlSave, acicu.mutation, acicu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acicu *AppCustomInvoicingCustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := acicu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acicu *AppCustomInvoicingCustomerUpdate) Exec(ctx context.Context) error {
	_, err := acicu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acicu *AppCustomInvoicingCustomerUpdate) ExecX(ctx context.Context) {
	if err := acicu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acicu *AppCustomInvoicingCustomerUpdate) defaults() {
	if _, ok := acicu.mutation.UpdatedAt(); !ok {
		v := appcustominvoicingcustomer.UpdateDefaultUpdatedAt()
		acicu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acicu *AppCustomInvoicingCustomerUpdate) check() error {
	if acicu.mutation.CustomInvoicingAppCleared() && len(acicu.mutation.CustomInvoicingAppIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "AppCustomInvoicingCustomer.custom_invoicing_app"`)
	}
	if acicu.mutation.CustomerCleared() && len(acicu.mutation.CustomerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "AppCustomInvoicingCustomer.customer"`)
	}
	return nil
}

func (acicu *AppCustomInvoicingCustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := acicu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(appcustominvoicingcustomer.Table, appcustominvoicingcustomer.Columns, sqlgraph.NewFieldSpec(appcustominvoicingcustomer.FieldID, field.TypeInt))
	if ps := acicu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acicu.mutation.UpdatedAt(); ok {
		_spec.SetField(appcustominvoicingcustomer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acicu.mutation.DeletedAt(); ok {
		_spec.SetField(appcustominvoicingcustomer.FieldDeletedAt, field.TypeTime, value)
	}
	if acicu.mutation.DeletedAtCleared() {
		_spec.ClearField(appcustominvoicingcustomer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := acicu.mutation.Metadata(); ok {
		_spec.SetField(appcustominvoicingcustomer.FieldMetadata, field.TypeJSON, value)
	}
	if acicu.mutation.MetadataCleared() {
		_spec.ClearField(appcustominvoicingcustomer.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acicu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appcustominvoicingcustomer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acicu.mutation.done = true
	return n, nil
}

// AppCustomInvoicingCustomerUpdateOne is the builder for updating a single AppCustomInvoicingCustomer entity.
type AppCustomInvoicingCustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppCustomInvoicingCustomerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (acicuo *AppCustomInvoicingCustomerUpdateOne) SetUpdatedAt(t time.Time) *AppCustomInvoicingCustomerUpdateOne {
	acicuo.mutation.SetUpdatedAt(t)
	return acicuo
}

// SetDeletedAt sets the "deleted_at" field.
func (acicuo *AppCustomInvoicingCustomerUpdateOne) SetDeletedAt(t time.Time) *AppCustomInvoicingCustomerUpdateOne {
	acicuo.mutation.SetDeletedAt(t)
	return acicuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acicuo *AppCustomInvoicingCustomerUpdateOne) SetNillableDeletedAt(t *time.Time) *AppCustomInvoicingCustomerUpdateOne {
	if t != nil {
		acicuo.SetDeletedAt(*t)
	}
	return acicuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (acicuo *AppCustomInvoicingCustomerUpdateOne) ClearDeletedAt() *AppCustomInvoicingCustomerUpdateOne {
	acicuo.mutation.ClearDeletedAt()
	return acicuo
}

// SetMetadata sets the "metadata" field.
func (acicuo *AppCustomInvoicingCustomerUpdateOne) SetMetadata(m map[string]string) *AppCustomInvoicingCustomerUpdateOne {
	acicuo.mutation.SetMetadata(m)
	return acicuo
}

// ClearMetadata clears the value of the "metadata" field.
func (acicuo *AppCustomInvoicingCustomerUpdateOne) ClearMetadata() *AppCustomInvoicingCustomerUpdateOne {
	acicuo.mutation.ClearMetadata()
	return acicuo
}

// Mutation returns the AppCustomInvoicingCustomerMutation object of the builder.
func (acicuo *AppCustomInvoicingCustomerUpdateOne) Mutation() *AppCustomInvoicingCustomerMutation {
	return acicuo.mutation
}

// Where appends a list predicates to the AppCustomInvoicingCustomerUpdate builder.
func (acicuo *AppCustomInvoicingCustomerUpdateOne) Where(ps ...predicate.AppCustomInvoicingCustomer) *AppCustomInvoicingCustomerUpdateOne {
	acicuo.mutation.Where(ps...)
	return acicuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acicuo *AppCustomInvoicingCustomerUpdateOne) Select(field string, fields ...string) *AppCustomInvoicingCustomerUpdateOne {
	acicuo.fields = append([]string{field}, fields...)
	return acicuo
}

// Save executes the query and returns the updated AppCustomInvoicingCustomer entity.
func (acicuo *AppCustomInvoicingCustomerUpdateOne) Save(ctx context.Context) (*AppCustomInvoicingCustomer, error) {
	acicuo.defaults()
	return withHooks(ctx, acicuo.sqlSave, acicuo.mutation, acicuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acicuo *AppCustomInvoicingCustomerUpdateOne) SaveX(ctx context.Context) *AppCustomInvoicingCustomer {
	node, err := acicuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acicuo *AppCustomInvoicingCustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := acicuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acicuo *AppCustomInvoicingCustomerUpdateOne) ExecX(ctx context.Context) {
	if err := acicuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acicuo *AppCustomInvoicingCustomerUpdateOne) defaults() {
	if _, ok := acicuo.mutation.UpdatedAt(); !ok {
		v := appcustominvoicingcustomer.UpdateDefaultUpdatedAt()
		acicuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acicuo *AppCustomInvoicingCustomerUpdateOne) check() error {
	if acicuo.mutation.CustomInvoicingAppCleared() && len(acicuo.mutation.CustomInvoicingAppIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "AppCustomInvoicingCustomer.custom_invoicing_app"`)
	}
	if acicuo.mutation.CustomerCleared() && len(acicuo.mutation.CustomerIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "AppCustomInvoicingCustomer.customer"`)
	}
	return nil
}

func (acicuo *AppCustomInvoicingCustomerUpdateOne) sqlSave(ctx context.Context) (_node *AppCustomInvoicingCustomer, err error) {
	if err := acicuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appcustominvoicingcustomer.Table, appcustominvoicingcustomer.Columns, sqlgraph.NewFieldSpec(appcustominvoicingcustomer.FieldID, field.TypeInt))
	id, ok := acicuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "AppCustomInvoicingCustomer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acicuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appcustominvoicingcustomer.FieldID)
		for _, f := range fields {
			if !appcustominvoicingcustomer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != appcustominvoicingcustomer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acicuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acicuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appcustominvoicingcustomer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acicuo.mutation.DeletedAt(); ok {
		_spec.SetField(appcustominvoicingcustomer.FieldDeletedAt, field.TypeTime, value)
	}
	if acicuo.mutation.DeletedAtCleared() {
		_spec.ClearField(appcustominvoicingcustomer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := acicuo.mutation.Metadata(); ok {
		_spec.SetField(appcustominvoicingcustomer.FieldMetadata, field.TypeJSON, value)
	}
	if acicuo.mutation.MetadataCleared() {
		_spec.ClearField(appcustominvoicingcustomer.FieldMetadata, field.TypeJSON)
	}
	_node = &AppCustomInvoicingCustomer{config: acicuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acicuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appcustominvoicingcustomer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acicuo.mutation.done = true
	return _node, nil
}
