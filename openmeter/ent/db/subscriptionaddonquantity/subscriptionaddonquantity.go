// Code generated by ent, DO NOT EDIT.

package subscriptionaddonquantity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subscriptionaddonquantity type in the database.
	Label = "subscription_addon_quantity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldActiveFrom holds the string denoting the active_from field in the database.
	FieldActiveFrom = "active_from"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldSubscriptionAddonID holds the string denoting the subscription_addon_id field in the database.
	FieldSubscriptionAddonID = "subscription_addon_id"
	// EdgeSubscriptionAddon holds the string denoting the subscription_addon edge name in mutations.
	EdgeSubscriptionAddon = "subscription_addon"
	// Table holds the table name of the subscriptionaddonquantity in the database.
	Table = "subscription_addon_quantities"
	// SubscriptionAddonTable is the table that holds the subscription_addon relation/edge.
	SubscriptionAddonTable = "subscription_addon_quantities"
	// SubscriptionAddonInverseTable is the table name for the SubscriptionAddon entity.
	// It exists in this package in order to avoid circular dependency with the "subscriptionaddon" package.
	SubscriptionAddonInverseTable = "subscription_addons"
	// SubscriptionAddonColumn is the table column denoting the subscription_addon relation/edge.
	SubscriptionAddonColumn = "subscription_addon_id"
)

// Columns holds all SQL columns for subscriptionaddonquantity fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldActiveFrom,
	FieldQuantity,
	FieldSubscriptionAddonID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultActiveFrom holds the default value on creation for the "active_from" field.
	DefaultActiveFrom func() time.Time
	// DefaultQuantity holds the default value on creation for the "quantity" field.
	DefaultQuantity int
	// QuantityValidator is a validator for the "quantity" field. It is called by the builders before save.
	QuantityValidator func(int) error
	// SubscriptionAddonIDValidator is a validator for the "subscription_addon_id" field. It is called by the builders before save.
	SubscriptionAddonIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the SubscriptionAddonQuantity queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByActiveFrom orders the results by the active_from field.
func ByActiveFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActiveFrom, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// BySubscriptionAddonID orders the results by the subscription_addon_id field.
func BySubscriptionAddonID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionAddonID, opts...).ToFunc()
}

// BySubscriptionAddonField orders the results by subscription_addon field.
func BySubscriptionAddonField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriptionAddonStep(), sql.OrderByField(field, opts...))
	}
}
func newSubscriptionAddonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriptionAddonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionAddonTable, SubscriptionAddonColumn),
	)
}
