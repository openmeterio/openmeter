// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicesplitlinegroup"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionphase"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/currencyx"
)

// BillingInvoiceSplitLineGroup is the model entity for the BillingInvoiceSplitLineGroup schema.
type BillingInvoiceSplitLineGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency currencyx.Code `json:"currency,omitempty"`
	// TaxConfig holds the value of the "tax_config" field.
	TaxConfig productcatalog.TaxConfig `json:"tax_config,omitempty"`
	// ServicePeriodStart holds the value of the "service_period_start" field.
	ServicePeriodStart time.Time `json:"service_period_start,omitempty"`
	// ServicePeriodEnd holds the value of the "service_period_end" field.
	ServicePeriodEnd time.Time `json:"service_period_end,omitempty"`
	// UniqueReferenceID holds the value of the "unique_reference_id" field.
	UniqueReferenceID *string `json:"unique_reference_id,omitempty"`
	// RatecardDiscounts holds the value of the "ratecard_discounts" field.
	RatecardDiscounts *billing.Discounts `json:"ratecard_discounts,omitempty"`
	// FeatureKey holds the value of the "feature_key" field.
	FeatureKey *string `json:"feature_key,omitempty"`
	// Price holds the value of the "price" field.
	Price *productcatalog.Price `json:"price,omitempty"`
	// SubscriptionID holds the value of the "subscription_id" field.
	SubscriptionID *string `json:"subscription_id,omitempty"`
	// SubscriptionPhaseID holds the value of the "subscription_phase_id" field.
	SubscriptionPhaseID *string `json:"subscription_phase_id,omitempty"`
	// SubscriptionItemID holds the value of the "subscription_item_id" field.
	SubscriptionItemID *string `json:"subscription_item_id,omitempty"`
	// SubscriptionBillingPeriodFrom holds the value of the "subscription_billing_period_from" field.
	SubscriptionBillingPeriodFrom *time.Time `json:"subscription_billing_period_from,omitempty"`
	// SubscriptionBillingPeriodTo holds the value of the "subscription_billing_period_to" field.
	SubscriptionBillingPeriodTo *time.Time `json:"subscription_billing_period_to,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingInvoiceSplitLineGroupQuery when eager-loading is set.
	Edges        BillingInvoiceSplitLineGroupEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillingInvoiceSplitLineGroupEdges holds the relations/edges for other nodes in the graph.
type BillingInvoiceSplitLineGroupEdges struct {
	// BillingInvoiceLines holds the value of the billing_invoice_lines edge.
	BillingInvoiceLines []*BillingInvoiceLine `json:"billing_invoice_lines,omitempty"`
	// Subscription holds the value of the subscription edge.
	Subscription *Subscription `json:"subscription,omitempty"`
	// SubscriptionPhase holds the value of the subscription_phase edge.
	SubscriptionPhase *SubscriptionPhase `json:"subscription_phase,omitempty"`
	// SubscriptionItem holds the value of the subscription_item edge.
	SubscriptionItem *SubscriptionItem `json:"subscription_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// BillingInvoiceLinesOrErr returns the BillingInvoiceLines value or an error if the edge
// was not loaded in eager-loading.
func (e BillingInvoiceSplitLineGroupEdges) BillingInvoiceLinesOrErr() ([]*BillingInvoiceLine, error) {
	if e.loadedTypes[0] {
		return e.BillingInvoiceLines, nil
	}
	return nil, &NotLoadedError{edge: "billing_invoice_lines"}
}

// SubscriptionOrErr returns the Subscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceSplitLineGroupEdges) SubscriptionOrErr() (*Subscription, error) {
	if e.Subscription != nil {
		return e.Subscription, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: subscription.Label}
	}
	return nil, &NotLoadedError{edge: "subscription"}
}

// SubscriptionPhaseOrErr returns the SubscriptionPhase value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceSplitLineGroupEdges) SubscriptionPhaseOrErr() (*SubscriptionPhase, error) {
	if e.SubscriptionPhase != nil {
		return e.SubscriptionPhase, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: subscriptionphase.Label}
	}
	return nil, &NotLoadedError{edge: "subscription_phase"}
}

// SubscriptionItemOrErr returns the SubscriptionItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceSplitLineGroupEdges) SubscriptionItemOrErr() (*SubscriptionItem, error) {
	if e.SubscriptionItem != nil {
		return e.SubscriptionItem, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: subscriptionitem.Label}
	}
	return nil, &NotLoadedError{edge: "subscription_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingInvoiceSplitLineGroup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billinginvoicesplitlinegroup.FieldMetadata, billinginvoicesplitlinegroup.FieldTaxConfig:
			values[i] = new([]byte)
		case billinginvoicesplitlinegroup.FieldID, billinginvoicesplitlinegroup.FieldNamespace, billinginvoicesplitlinegroup.FieldName, billinginvoicesplitlinegroup.FieldDescription, billinginvoicesplitlinegroup.FieldCurrency, billinginvoicesplitlinegroup.FieldUniqueReferenceID, billinginvoicesplitlinegroup.FieldFeatureKey, billinginvoicesplitlinegroup.FieldSubscriptionID, billinginvoicesplitlinegroup.FieldSubscriptionPhaseID, billinginvoicesplitlinegroup.FieldSubscriptionItemID:
			values[i] = new(sql.NullString)
		case billinginvoicesplitlinegroup.FieldCreatedAt, billinginvoicesplitlinegroup.FieldUpdatedAt, billinginvoicesplitlinegroup.FieldDeletedAt, billinginvoicesplitlinegroup.FieldServicePeriodStart, billinginvoicesplitlinegroup.FieldServicePeriodEnd, billinginvoicesplitlinegroup.FieldSubscriptionBillingPeriodFrom, billinginvoicesplitlinegroup.FieldSubscriptionBillingPeriodTo:
			values[i] = new(sql.NullTime)
		case billinginvoicesplitlinegroup.FieldRatecardDiscounts:
			values[i] = billinginvoicesplitlinegroup.ValueScanner.RatecardDiscounts.ScanValue()
		case billinginvoicesplitlinegroup.FieldPrice:
			values[i] = billinginvoicesplitlinegroup.ValueScanner.Price.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingInvoiceSplitLineGroup fields.
func (_m *BillingInvoiceSplitLineGroup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billinginvoicesplitlinegroup.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case billinginvoicesplitlinegroup.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				_m.Namespace = value.String
			}
		case billinginvoicesplitlinegroup.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case billinginvoicesplitlinegroup.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case billinginvoicesplitlinegroup.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case billinginvoicesplitlinegroup.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case billinginvoicesplitlinegroup.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case billinginvoicesplitlinegroup.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = new(string)
				*_m.Description = value.String
			}
		case billinginvoicesplitlinegroup.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				_m.Currency = currencyx.Code(value.String)
			}
		case billinginvoicesplitlinegroup.FieldTaxConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tax_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.TaxConfig); err != nil {
					return fmt.Errorf("unmarshal field tax_config: %w", err)
				}
			}
		case billinginvoicesplitlinegroup.FieldServicePeriodStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field service_period_start", values[i])
			} else if value.Valid {
				_m.ServicePeriodStart = value.Time
			}
		case billinginvoicesplitlinegroup.FieldServicePeriodEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field service_period_end", values[i])
			} else if value.Valid {
				_m.ServicePeriodEnd = value.Time
			}
		case billinginvoicesplitlinegroup.FieldUniqueReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unique_reference_id", values[i])
			} else if value.Valid {
				_m.UniqueReferenceID = new(string)
				*_m.UniqueReferenceID = value.String
			}
		case billinginvoicesplitlinegroup.FieldRatecardDiscounts:
			if value, err := billinginvoicesplitlinegroup.ValueScanner.RatecardDiscounts.FromValue(values[i]); err != nil {
				return err
			} else {
				_m.RatecardDiscounts = value
			}
		case billinginvoicesplitlinegroup.FieldFeatureKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feature_key", values[i])
			} else if value.Valid {
				_m.FeatureKey = new(string)
				*_m.FeatureKey = value.String
			}
		case billinginvoicesplitlinegroup.FieldPrice:
			if value, err := billinginvoicesplitlinegroup.ValueScanner.Price.FromValue(values[i]); err != nil {
				return err
			} else {
				_m.Price = value
			}
		case billinginvoicesplitlinegroup.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_id", values[i])
			} else if value.Valid {
				_m.SubscriptionID = new(string)
				*_m.SubscriptionID = value.String
			}
		case billinginvoicesplitlinegroup.FieldSubscriptionPhaseID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_phase_id", values[i])
			} else if value.Valid {
				_m.SubscriptionPhaseID = new(string)
				*_m.SubscriptionPhaseID = value.String
			}
		case billinginvoicesplitlinegroup.FieldSubscriptionItemID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_item_id", values[i])
			} else if value.Valid {
				_m.SubscriptionItemID = new(string)
				*_m.SubscriptionItemID = value.String
			}
		case billinginvoicesplitlinegroup.FieldSubscriptionBillingPeriodFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_billing_period_from", values[i])
			} else if value.Valid {
				_m.SubscriptionBillingPeriodFrom = new(time.Time)
				*_m.SubscriptionBillingPeriodFrom = value.Time
			}
		case billinginvoicesplitlinegroup.FieldSubscriptionBillingPeriodTo:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_billing_period_to", values[i])
			} else if value.Valid {
				_m.SubscriptionBillingPeriodTo = new(time.Time)
				*_m.SubscriptionBillingPeriodTo = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingInvoiceSplitLineGroup.
// This includes values selected through modifiers, order, etc.
func (_m *BillingInvoiceSplitLineGroup) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryBillingInvoiceLines queries the "billing_invoice_lines" edge of the BillingInvoiceSplitLineGroup entity.
func (_m *BillingInvoiceSplitLineGroup) QueryBillingInvoiceLines() *BillingInvoiceLineQuery {
	return NewBillingInvoiceSplitLineGroupClient(_m.config).QueryBillingInvoiceLines(_m)
}

// QuerySubscription queries the "subscription" edge of the BillingInvoiceSplitLineGroup entity.
func (_m *BillingInvoiceSplitLineGroup) QuerySubscription() *SubscriptionQuery {
	return NewBillingInvoiceSplitLineGroupClient(_m.config).QuerySubscription(_m)
}

// QuerySubscriptionPhase queries the "subscription_phase" edge of the BillingInvoiceSplitLineGroup entity.
func (_m *BillingInvoiceSplitLineGroup) QuerySubscriptionPhase() *SubscriptionPhaseQuery {
	return NewBillingInvoiceSplitLineGroupClient(_m.config).QuerySubscriptionPhase(_m)
}

// QuerySubscriptionItem queries the "subscription_item" edge of the BillingInvoiceSplitLineGroup entity.
func (_m *BillingInvoiceSplitLineGroup) QuerySubscriptionItem() *SubscriptionItemQuery {
	return NewBillingInvoiceSplitLineGroupClient(_m.config).QuerySubscriptionItem(_m)
}

// Update returns a builder for updating this BillingInvoiceSplitLineGroup.
// Note that you need to call BillingInvoiceSplitLineGroup.Unwrap() before calling this method if this BillingInvoiceSplitLineGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BillingInvoiceSplitLineGroup) Update() *BillingInvoiceSplitLineGroupUpdateOne {
	return NewBillingInvoiceSplitLineGroupClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BillingInvoiceSplitLineGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BillingInvoiceSplitLineGroup) Unwrap() *BillingInvoiceSplitLineGroup {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingInvoiceSplitLineGroup is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BillingInvoiceSplitLineGroup) String() string {
	var builder strings.Builder
	builder.WriteString("BillingInvoiceSplitLineGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("namespace=")
	builder.WriteString(_m.Namespace)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	if v := _m.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(fmt.Sprintf("%v", _m.Currency))
	builder.WriteString(", ")
	builder.WriteString("tax_config=")
	builder.WriteString(fmt.Sprintf("%v", _m.TaxConfig))
	builder.WriteString(", ")
	builder.WriteString("service_period_start=")
	builder.WriteString(_m.ServicePeriodStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("service_period_end=")
	builder.WriteString(_m.ServicePeriodEnd.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.UniqueReferenceID; v != nil {
		builder.WriteString("unique_reference_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.RatecardDiscounts; v != nil {
		builder.WriteString("ratecard_discounts=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.FeatureKey; v != nil {
		builder.WriteString("feature_key=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", _m.Price))
	builder.WriteString(", ")
	if v := _m.SubscriptionID; v != nil {
		builder.WriteString("subscription_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.SubscriptionPhaseID; v != nil {
		builder.WriteString("subscription_phase_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.SubscriptionItemID; v != nil {
		builder.WriteString("subscription_item_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.SubscriptionBillingPeriodFrom; v != nil {
		builder.WriteString("subscription_billing_period_from=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.SubscriptionBillingPeriodTo; v != nil {
		builder.WriteString("subscription_billing_period_to=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BillingInvoiceSplitLineGroups is a parsable slice of BillingInvoiceSplitLineGroup.
type BillingInvoiceSplitLineGroups []*BillingInvoiceSplitLineGroup
