// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	dbapp "github.com/openmeterio/openmeter/openmeter/ent/db/app"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomeroverride"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingprofile"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingProfileQuery is the builder for querying BillingProfile entities.
type BillingProfileQuery struct {
	config
	ctx                         *QueryContext
	order                       []billingprofile.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.BillingProfile
	withBillingInvoices         *BillingInvoiceQuery
	withBillingCustomerOverride *BillingCustomerOverrideQuery
	withWorkflowConfig          *BillingWorkflowConfigQuery
	withTaxApp                  *AppQuery
	withInvoicingApp            *AppQuery
	withPaymentApp              *AppQuery
	modifiers                   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BillingProfileQuery builder.
func (_q *BillingProfileQuery) Where(ps ...predicate.BillingProfile) *BillingProfileQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *BillingProfileQuery) Limit(limit int) *BillingProfileQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *BillingProfileQuery) Offset(offset int) *BillingProfileQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *BillingProfileQuery) Unique(unique bool) *BillingProfileQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *BillingProfileQuery) Order(o ...billingprofile.OrderOption) *BillingProfileQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryBillingInvoices chains the current query on the "billing_invoices" edge.
func (_q *BillingProfileQuery) QueryBillingInvoices() *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(billingprofile.Table, billingprofile.FieldID, selector),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, billingprofile.BillingInvoicesTable, billingprofile.BillingInvoicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBillingCustomerOverride chains the current query on the "billing_customer_override" edge.
func (_q *BillingProfileQuery) QueryBillingCustomerOverride() *BillingCustomerOverrideQuery {
	query := (&BillingCustomerOverrideClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(billingprofile.Table, billingprofile.FieldID, selector),
			sqlgraph.To(billingcustomeroverride.Table, billingcustomeroverride.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, billingprofile.BillingCustomerOverrideTable, billingprofile.BillingCustomerOverrideColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkflowConfig chains the current query on the "workflow_config" edge.
func (_q *BillingProfileQuery) QueryWorkflowConfig() *BillingWorkflowConfigQuery {
	query := (&BillingWorkflowConfigClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(billingprofile.Table, billingprofile.FieldID, selector),
			sqlgraph.To(billingworkflowconfig.Table, billingworkflowconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, billingprofile.WorkflowConfigTable, billingprofile.WorkflowConfigColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaxApp chains the current query on the "tax_app" edge.
func (_q *BillingProfileQuery) QueryTaxApp() *AppQuery {
	query := (&AppClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(billingprofile.Table, billingprofile.FieldID, selector),
			sqlgraph.To(dbapp.Table, dbapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billingprofile.TaxAppTable, billingprofile.TaxAppColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvoicingApp chains the current query on the "invoicing_app" edge.
func (_q *BillingProfileQuery) QueryInvoicingApp() *AppQuery {
	query := (&AppClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(billingprofile.Table, billingprofile.FieldID, selector),
			sqlgraph.To(dbapp.Table, dbapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billingprofile.InvoicingAppTable, billingprofile.InvoicingAppColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPaymentApp chains the current query on the "payment_app" edge.
func (_q *BillingProfileQuery) QueryPaymentApp() *AppQuery {
	query := (&AppClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(billingprofile.Table, billingprofile.FieldID, selector),
			sqlgraph.To(dbapp.Table, dbapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billingprofile.PaymentAppTable, billingprofile.PaymentAppColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BillingProfile entity from the query.
// Returns a *NotFoundError when no BillingProfile was found.
func (_q *BillingProfileQuery) First(ctx context.Context) (*BillingProfile, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{billingprofile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *BillingProfileQuery) FirstX(ctx context.Context) *BillingProfile {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BillingProfile ID from the query.
// Returns a *NotFoundError when no BillingProfile ID was found.
func (_q *BillingProfileQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{billingprofile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *BillingProfileQuery) FirstIDX(ctx context.Context) string {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BillingProfile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BillingProfile entity is found.
// Returns a *NotFoundError when no BillingProfile entities are found.
func (_q *BillingProfileQuery) Only(ctx context.Context) (*BillingProfile, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{billingprofile.Label}
	default:
		return nil, &NotSingularError{billingprofile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *BillingProfileQuery) OnlyX(ctx context.Context) *BillingProfile {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BillingProfile ID in the query.
// Returns a *NotSingularError when more than one BillingProfile ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *BillingProfileQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{billingprofile.Label}
	default:
		err = &NotSingularError{billingprofile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *BillingProfileQuery) OnlyIDX(ctx context.Context) string {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BillingProfiles.
func (_q *BillingProfileQuery) All(ctx context.Context) ([]*BillingProfile, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BillingProfile, *BillingProfileQuery]()
	return withInterceptors[[]*BillingProfile](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *BillingProfileQuery) AllX(ctx context.Context) []*BillingProfile {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BillingProfile IDs.
func (_q *BillingProfileQuery) IDs(ctx context.Context) (ids []string, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(billingprofile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *BillingProfileQuery) IDsX(ctx context.Context) []string {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *BillingProfileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*BillingProfileQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *BillingProfileQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *BillingProfileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *BillingProfileQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BillingProfileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *BillingProfileQuery) Clone() *BillingProfileQuery {
	if _q == nil {
		return nil
	}
	return &BillingProfileQuery{
		config:                      _q.config,
		ctx:                         _q.ctx.Clone(),
		order:                       append([]billingprofile.OrderOption{}, _q.order...),
		inters:                      append([]Interceptor{}, _q.inters...),
		predicates:                  append([]predicate.BillingProfile{}, _q.predicates...),
		withBillingInvoices:         _q.withBillingInvoices.Clone(),
		withBillingCustomerOverride: _q.withBillingCustomerOverride.Clone(),
		withWorkflowConfig:          _q.withWorkflowConfig.Clone(),
		withTaxApp:                  _q.withTaxApp.Clone(),
		withInvoicingApp:            _q.withInvoicingApp.Clone(),
		withPaymentApp:              _q.withPaymentApp.Clone(),
		// clone intermediate query.
		sql:  _q.sql.Clone(),
		path: _q.path,
	}
}

// WithBillingInvoices tells the query-builder to eager-load the nodes that are connected to
// the "billing_invoices" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *BillingProfileQuery) WithBillingInvoices(opts ...func(*BillingInvoiceQuery)) *BillingProfileQuery {
	query := (&BillingInvoiceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withBillingInvoices = query
	return _q
}

// WithBillingCustomerOverride tells the query-builder to eager-load the nodes that are connected to
// the "billing_customer_override" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *BillingProfileQuery) WithBillingCustomerOverride(opts ...func(*BillingCustomerOverrideQuery)) *BillingProfileQuery {
	query := (&BillingCustomerOverrideClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withBillingCustomerOverride = query
	return _q
}

// WithWorkflowConfig tells the query-builder to eager-load the nodes that are connected to
// the "workflow_config" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *BillingProfileQuery) WithWorkflowConfig(opts ...func(*BillingWorkflowConfigQuery)) *BillingProfileQuery {
	query := (&BillingWorkflowConfigClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withWorkflowConfig = query
	return _q
}

// WithTaxApp tells the query-builder to eager-load the nodes that are connected to
// the "tax_app" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *BillingProfileQuery) WithTaxApp(opts ...func(*AppQuery)) *BillingProfileQuery {
	query := (&AppClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withTaxApp = query
	return _q
}

// WithInvoicingApp tells the query-builder to eager-load the nodes that are connected to
// the "invoicing_app" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *BillingProfileQuery) WithInvoicingApp(opts ...func(*AppQuery)) *BillingProfileQuery {
	query := (&AppClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withInvoicingApp = query
	return _q
}

// WithPaymentApp tells the query-builder to eager-load the nodes that are connected to
// the "payment_app" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *BillingProfileQuery) WithPaymentApp(opts ...func(*AppQuery)) *BillingProfileQuery {
	query := (&AppClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withPaymentApp = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BillingProfile.Query().
//		GroupBy(billingprofile.FieldNamespace).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (_q *BillingProfileQuery) GroupBy(field string, fields ...string) *BillingProfileGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BillingProfileGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = billingprofile.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Namespace string `json:"namespace,omitempty"`
//	}
//
//	client.BillingProfile.Query().
//		Select(billingprofile.FieldNamespace).
//		Scan(ctx, &v)
func (_q *BillingProfileQuery) Select(fields ...string) *BillingProfileSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &BillingProfileSelect{BillingProfileQuery: _q}
	sbuild.label = billingprofile.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BillingProfileSelect configured with the given aggregations.
func (_q *BillingProfileQuery) Aggregate(fns ...AggregateFunc) *BillingProfileSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *BillingProfileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !billingprofile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *BillingProfileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BillingProfile, error) {
	var (
		nodes       = []*BillingProfile{}
		_spec       = _q.querySpec()
		loadedTypes = [6]bool{
			_q.withBillingInvoices != nil,
			_q.withBillingCustomerOverride != nil,
			_q.withWorkflowConfig != nil,
			_q.withTaxApp != nil,
			_q.withInvoicingApp != nil,
			_q.withPaymentApp != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BillingProfile).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BillingProfile{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withBillingInvoices; query != nil {
		if err := _q.loadBillingInvoices(ctx, query, nodes,
			func(n *BillingProfile) { n.Edges.BillingInvoices = []*BillingInvoice{} },
			func(n *BillingProfile, e *BillingInvoice) {
				n.Edges.BillingInvoices = append(n.Edges.BillingInvoices, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withBillingCustomerOverride; query != nil {
		if err := _q.loadBillingCustomerOverride(ctx, query, nodes,
			func(n *BillingProfile) { n.Edges.BillingCustomerOverride = []*BillingCustomerOverride{} },
			func(n *BillingProfile, e *BillingCustomerOverride) {
				n.Edges.BillingCustomerOverride = append(n.Edges.BillingCustomerOverride, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withWorkflowConfig; query != nil {
		if err := _q.loadWorkflowConfig(ctx, query, nodes, nil,
			func(n *BillingProfile, e *BillingWorkflowConfig) { n.Edges.WorkflowConfig = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withTaxApp; query != nil {
		if err := _q.loadTaxApp(ctx, query, nodes, nil,
			func(n *BillingProfile, e *App) { n.Edges.TaxApp = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withInvoicingApp; query != nil {
		if err := _q.loadInvoicingApp(ctx, query, nodes, nil,
			func(n *BillingProfile, e *App) { n.Edges.InvoicingApp = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withPaymentApp; query != nil {
		if err := _q.loadPaymentApp(ctx, query, nodes, nil,
			func(n *BillingProfile, e *App) { n.Edges.PaymentApp = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *BillingProfileQuery) loadBillingInvoices(ctx context.Context, query *BillingInvoiceQuery, nodes []*BillingProfile, init func(*BillingProfile), assign func(*BillingProfile, *BillingInvoice)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*BillingProfile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(billinginvoice.FieldSourceBillingProfileID)
	}
	query.Where(predicate.BillingInvoice(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(billingprofile.BillingInvoicesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SourceBillingProfileID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "source_billing_profile_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *BillingProfileQuery) loadBillingCustomerOverride(ctx context.Context, query *BillingCustomerOverrideQuery, nodes []*BillingProfile, init func(*BillingProfile), assign func(*BillingProfile, *BillingCustomerOverride)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*BillingProfile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(billingcustomeroverride.FieldBillingProfileID)
	}
	query.Where(predicate.BillingCustomerOverride(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(billingprofile.BillingCustomerOverrideColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.BillingProfileID
		if fk == nil {
			return fmt.Errorf(`foreign-key "billing_profile_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "billing_profile_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *BillingProfileQuery) loadWorkflowConfig(ctx context.Context, query *BillingWorkflowConfigQuery, nodes []*BillingProfile, init func(*BillingProfile), assign func(*BillingProfile, *BillingWorkflowConfig)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*BillingProfile)
	for i := range nodes {
		fk := nodes[i].WorkflowConfigID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(billingworkflowconfig.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workflow_config_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *BillingProfileQuery) loadTaxApp(ctx context.Context, query *AppQuery, nodes []*BillingProfile, init func(*BillingProfile), assign func(*BillingProfile, *App)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*BillingProfile)
	for i := range nodes {
		fk := nodes[i].TaxAppID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(dbapp.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tax_app_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *BillingProfileQuery) loadInvoicingApp(ctx context.Context, query *AppQuery, nodes []*BillingProfile, init func(*BillingProfile), assign func(*BillingProfile, *App)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*BillingProfile)
	for i := range nodes {
		fk := nodes[i].InvoicingAppID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(dbapp.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "invoicing_app_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *BillingProfileQuery) loadPaymentApp(ctx context.Context, query *AppQuery, nodes []*BillingProfile, init func(*BillingProfile), assign func(*BillingProfile, *App)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*BillingProfile)
	for i := range nodes {
		fk := nodes[i].PaymentAppID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(dbapp.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "payment_app_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (_q *BillingProfileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *BillingProfileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(billingprofile.Table, billingprofile.Columns, sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingprofile.FieldID)
		for i := range fields {
			if fields[i] != billingprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if _q.withWorkflowConfig != nil {
			_spec.Node.AddColumnOnce(billingprofile.FieldWorkflowConfigID)
		}
		if _q.withTaxApp != nil {
			_spec.Node.AddColumnOnce(billingprofile.FieldTaxAppID)
		}
		if _q.withInvoicingApp != nil {
			_spec.Node.AddColumnOnce(billingprofile.FieldInvoicingAppID)
		}
		if _q.withPaymentApp != nil {
			_spec.Node.AddColumnOnce(billingprofile.FieldPaymentAppID)
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *BillingProfileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(billingprofile.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = billingprofile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range _q.modifiers {
		m(selector)
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (_q *BillingProfileQuery) ForUpdate(opts ...sql.LockOption) *BillingProfileQuery {
	if _q.driver.Dialect() == dialect.Postgres {
		_q.Unique(false)
	}
	_q.modifiers = append(_q.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return _q
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (_q *BillingProfileQuery) ForShare(opts ...sql.LockOption) *BillingProfileQuery {
	if _q.driver.Dialect() == dialect.Postgres {
		_q.Unique(false)
	}
	_q.modifiers = append(_q.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return _q
}

// BillingProfileGroupBy is the group-by builder for BillingProfile entities.
type BillingProfileGroupBy struct {
	selector
	build *BillingProfileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bpgb *BillingProfileGroupBy) Aggregate(fns ...AggregateFunc) *BillingProfileGroupBy {
	bpgb.fns = append(bpgb.fns, fns...)
	return bpgb
}

// Scan applies the selector query and scans the result into the given value.
func (bpgb *BillingProfileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bpgb.build.ctx, ent.OpQueryGroupBy)
	if err := bpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BillingProfileQuery, *BillingProfileGroupBy](ctx, bpgb.build, bpgb, bpgb.build.inters, v)
}

func (bpgb *BillingProfileGroupBy) sqlScan(ctx context.Context, root *BillingProfileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bpgb.fns))
	for _, fn := range bpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bpgb.flds)+len(bpgb.fns))
		for _, f := range *bpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BillingProfileSelect is the builder for selecting fields of BillingProfile entities.
type BillingProfileSelect struct {
	*BillingProfileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bps *BillingProfileSelect) Aggregate(fns ...AggregateFunc) *BillingProfileSelect {
	bps.fns = append(bps.fns, fns...)
	return bps
}

// Scan applies the selector query and scans the result into the given value.
func (bps *BillingProfileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bps.ctx, ent.OpQuerySelect)
	if err := bps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BillingProfileQuery, *BillingProfileSelect](ctx, bps.BillingProfileQuery, bps, bps.inters, v)
}

func (bps *BillingProfileSelect) sqlScan(ctx context.Context, root *BillingProfileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bps.fns))
	for _, fn := range bps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
