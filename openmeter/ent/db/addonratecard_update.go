// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/feature"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/datetime"
)

// AddonRateCardUpdate is the builder for updating AddonRateCard entities.
type AddonRateCardUpdate struct {
	config
	hooks    []Hook
	mutation *AddonRateCardMutation
}

// Where appends a list predicates to the AddonRateCardUpdate builder.
func (_u *AddonRateCardUpdate) Where(ps ...predicate.AddonRateCard) *AddonRateCardUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *AddonRateCardUpdate) SetMetadata(v map[string]string) *AddonRateCardUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *AddonRateCardUpdate) ClearMetadata() *AddonRateCardUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AddonRateCardUpdate) SetUpdatedAt(v time.Time) *AddonRateCardUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *AddonRateCardUpdate) SetDeletedAt(v time.Time) *AddonRateCardUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *AddonRateCardUpdate) SetNillableDeletedAt(v *time.Time) *AddonRateCardUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *AddonRateCardUpdate) ClearDeletedAt() *AddonRateCardUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *AddonRateCardUpdate) SetName(v string) *AddonRateCardUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *AddonRateCardUpdate) SetNillableName(v *string) *AddonRateCardUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *AddonRateCardUpdate) SetDescription(v string) *AddonRateCardUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *AddonRateCardUpdate) SetNillableDescription(v *string) *AddonRateCardUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *AddonRateCardUpdate) ClearDescription() *AddonRateCardUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetFeatureKey sets the "feature_key" field.
func (_u *AddonRateCardUpdate) SetFeatureKey(v string) *AddonRateCardUpdate {
	_u.mutation.SetFeatureKey(v)
	return _u
}

// SetNillableFeatureKey sets the "feature_key" field if the given value is not nil.
func (_u *AddonRateCardUpdate) SetNillableFeatureKey(v *string) *AddonRateCardUpdate {
	if v != nil {
		_u.SetFeatureKey(*v)
	}
	return _u
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (_u *AddonRateCardUpdate) ClearFeatureKey() *AddonRateCardUpdate {
	_u.mutation.ClearFeatureKey()
	return _u
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (_u *AddonRateCardUpdate) SetEntitlementTemplate(v *productcatalog.EntitlementTemplate) *AddonRateCardUpdate {
	_u.mutation.SetEntitlementTemplate(v)
	return _u
}

// ClearEntitlementTemplate clears the value of the "entitlement_template" field.
func (_u *AddonRateCardUpdate) ClearEntitlementTemplate() *AddonRateCardUpdate {
	_u.mutation.ClearEntitlementTemplate()
	return _u
}

// SetTaxConfig sets the "tax_config" field.
func (_u *AddonRateCardUpdate) SetTaxConfig(v *productcatalog.TaxConfig) *AddonRateCardUpdate {
	_u.mutation.SetTaxConfig(v)
	return _u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (_u *AddonRateCardUpdate) ClearTaxConfig() *AddonRateCardUpdate {
	_u.mutation.ClearTaxConfig()
	return _u
}

// SetBillingCadence sets the "billing_cadence" field.
func (_u *AddonRateCardUpdate) SetBillingCadence(v datetime.ISODurationString) *AddonRateCardUpdate {
	_u.mutation.SetBillingCadence(v)
	return _u
}

// SetNillableBillingCadence sets the "billing_cadence" field if the given value is not nil.
func (_u *AddonRateCardUpdate) SetNillableBillingCadence(v *datetime.ISODurationString) *AddonRateCardUpdate {
	if v != nil {
		_u.SetBillingCadence(*v)
	}
	return _u
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (_u *AddonRateCardUpdate) ClearBillingCadence() *AddonRateCardUpdate {
	_u.mutation.ClearBillingCadence()
	return _u
}

// SetPrice sets the "price" field.
func (_u *AddonRateCardUpdate) SetPrice(v *productcatalog.Price) *AddonRateCardUpdate {
	_u.mutation.SetPrice(v)
	return _u
}

// ClearPrice clears the value of the "price" field.
func (_u *AddonRateCardUpdate) ClearPrice() *AddonRateCardUpdate {
	_u.mutation.ClearPrice()
	return _u
}

// SetDiscounts sets the "discounts" field.
func (_u *AddonRateCardUpdate) SetDiscounts(v *productcatalog.Discounts) *AddonRateCardUpdate {
	_u.mutation.SetDiscounts(v)
	return _u
}

// ClearDiscounts clears the value of the "discounts" field.
func (_u *AddonRateCardUpdate) ClearDiscounts() *AddonRateCardUpdate {
	_u.mutation.ClearDiscounts()
	return _u
}

// SetAddonID sets the "addon_id" field.
func (_u *AddonRateCardUpdate) SetAddonID(v string) *AddonRateCardUpdate {
	_u.mutation.SetAddonID(v)
	return _u
}

// SetNillableAddonID sets the "addon_id" field if the given value is not nil.
func (_u *AddonRateCardUpdate) SetNillableAddonID(v *string) *AddonRateCardUpdate {
	if v != nil {
		_u.SetAddonID(*v)
	}
	return _u
}

// SetFeatureID sets the "feature_id" field.
func (_u *AddonRateCardUpdate) SetFeatureID(v string) *AddonRateCardUpdate {
	_u.mutation.SetFeatureID(v)
	return _u
}

// SetNillableFeatureID sets the "feature_id" field if the given value is not nil.
func (_u *AddonRateCardUpdate) SetNillableFeatureID(v *string) *AddonRateCardUpdate {
	if v != nil {
		_u.SetFeatureID(*v)
	}
	return _u
}

// ClearFeatureID clears the value of the "feature_id" field.
func (_u *AddonRateCardUpdate) ClearFeatureID() *AddonRateCardUpdate {
	_u.mutation.ClearFeatureID()
	return _u
}

// SetAddon sets the "addon" edge to the Addon entity.
func (_u *AddonRateCardUpdate) SetAddon(v *Addon) *AddonRateCardUpdate {
	return _u.SetAddonID(v.ID)
}

// SetFeaturesID sets the "features" edge to the Feature entity by ID.
func (_u *AddonRateCardUpdate) SetFeaturesID(id string) *AddonRateCardUpdate {
	_u.mutation.SetFeaturesID(id)
	return _u
}

// SetNillableFeaturesID sets the "features" edge to the Feature entity by ID if the given value is not nil.
func (_u *AddonRateCardUpdate) SetNillableFeaturesID(id *string) *AddonRateCardUpdate {
	if id != nil {
		_u = _u.SetFeaturesID(*id)
	}
	return _u
}

// SetFeatures sets the "features" edge to the Feature entity.
func (_u *AddonRateCardUpdate) SetFeatures(v *Feature) *AddonRateCardUpdate {
	return _u.SetFeaturesID(v.ID)
}

// Mutation returns the AddonRateCardMutation object of the builder.
func (_u *AddonRateCardUpdate) Mutation() *AddonRateCardMutation {
	return _u.mutation
}

// ClearAddon clears the "addon" edge to the Addon entity.
func (_u *AddonRateCardUpdate) ClearAddon() *AddonRateCardUpdate {
	_u.mutation.ClearAddon()
	return _u
}

// ClearFeatures clears the "features" edge to the Feature entity.
func (_u *AddonRateCardUpdate) ClearFeatures() *AddonRateCardUpdate {
	_u.mutation.ClearFeatures()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AddonRateCardUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AddonRateCardUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AddonRateCardUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AddonRateCardUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AddonRateCardUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := addonratecard.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AddonRateCardUpdate) check() error {
	if v, ok := _u.mutation.EntitlementTemplate(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "entitlement_template", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.entitlement_template": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.tax_config": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Price(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.price": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Discounts(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "discounts", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.discounts": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AddonID(); ok {
		if err := addonratecard.AddonIDValidator(v); err != nil {
			return &ValidationError{Name: "addon_id", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.addon_id": %w`, err)}
		}
	}
	if _u.mutation.AddonCleared() && len(_u.mutation.AddonIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "AddonRateCard.addon"`)
	}
	return nil
}

func (_u *AddonRateCardUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(addonratecard.Table, addonratecard.Columns, sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(addonratecard.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(addonratecard.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(addonratecard.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(addonratecard.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(addonratecard.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(addonratecard.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(addonratecard.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(addonratecard.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.FeatureKey(); ok {
		_spec.SetField(addonratecard.FieldFeatureKey, field.TypeString, value)
	}
	if _u.mutation.FeatureKeyCleared() {
		_spec.ClearField(addonratecard.FieldFeatureKey, field.TypeString)
	}
	if value, ok := _u.mutation.EntitlementTemplate(); ok {
		vv, err := addonratecard.ValueScanner.EntitlementTemplate.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(addonratecard.FieldEntitlementTemplate, field.TypeString, vv)
	}
	if _u.mutation.EntitlementTemplateCleared() {
		_spec.ClearField(addonratecard.FieldEntitlementTemplate, field.TypeString)
	}
	if value, ok := _u.mutation.TaxConfig(); ok {
		vv, err := addonratecard.ValueScanner.TaxConfig.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(addonratecard.FieldTaxConfig, field.TypeString, vv)
	}
	if _u.mutation.TaxConfigCleared() {
		_spec.ClearField(addonratecard.FieldTaxConfig, field.TypeString)
	}
	if value, ok := _u.mutation.BillingCadence(); ok {
		_spec.SetField(addonratecard.FieldBillingCadence, field.TypeString, value)
	}
	if _u.mutation.BillingCadenceCleared() {
		_spec.ClearField(addonratecard.FieldBillingCadence, field.TypeString)
	}
	if value, ok := _u.mutation.Price(); ok {
		vv, err := addonratecard.ValueScanner.Price.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(addonratecard.FieldPrice, field.TypeString, vv)
	}
	if _u.mutation.PriceCleared() {
		_spec.ClearField(addonratecard.FieldPrice, field.TypeString)
	}
	if value, ok := _u.mutation.Discounts(); ok {
		vv, err := addonratecard.ValueScanner.Discounts.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(addonratecard.FieldDiscounts, field.TypeString, vv)
	}
	if _u.mutation.DiscountsCleared() {
		_spec.ClearField(addonratecard.FieldDiscounts, field.TypeString)
	}
	if _u.mutation.AddonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addonratecard.AddonTable,
			Columns: []string{addonratecard.AddonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addon.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AddonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addonratecard.AddonTable,
			Columns: []string{addonratecard.AddonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addonratecard.FeaturesTable,
			Columns: []string{addonratecard.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addonratecard.FeaturesTable,
			Columns: []string{addonratecard.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{addonratecard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AddonRateCardUpdateOne is the builder for updating a single AddonRateCard entity.
type AddonRateCardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddonRateCardMutation
}

// SetMetadata sets the "metadata" field.
func (_u *AddonRateCardUpdateOne) SetMetadata(v map[string]string) *AddonRateCardUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *AddonRateCardUpdateOne) ClearMetadata() *AddonRateCardUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AddonRateCardUpdateOne) SetUpdatedAt(v time.Time) *AddonRateCardUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *AddonRateCardUpdateOne) SetDeletedAt(v time.Time) *AddonRateCardUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *AddonRateCardUpdateOne) SetNillableDeletedAt(v *time.Time) *AddonRateCardUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *AddonRateCardUpdateOne) ClearDeletedAt() *AddonRateCardUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *AddonRateCardUpdateOne) SetName(v string) *AddonRateCardUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *AddonRateCardUpdateOne) SetNillableName(v *string) *AddonRateCardUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *AddonRateCardUpdateOne) SetDescription(v string) *AddonRateCardUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *AddonRateCardUpdateOne) SetNillableDescription(v *string) *AddonRateCardUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *AddonRateCardUpdateOne) ClearDescription() *AddonRateCardUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetFeatureKey sets the "feature_key" field.
func (_u *AddonRateCardUpdateOne) SetFeatureKey(v string) *AddonRateCardUpdateOne {
	_u.mutation.SetFeatureKey(v)
	return _u
}

// SetNillableFeatureKey sets the "feature_key" field if the given value is not nil.
func (_u *AddonRateCardUpdateOne) SetNillableFeatureKey(v *string) *AddonRateCardUpdateOne {
	if v != nil {
		_u.SetFeatureKey(*v)
	}
	return _u
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (_u *AddonRateCardUpdateOne) ClearFeatureKey() *AddonRateCardUpdateOne {
	_u.mutation.ClearFeatureKey()
	return _u
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (_u *AddonRateCardUpdateOne) SetEntitlementTemplate(v *productcatalog.EntitlementTemplate) *AddonRateCardUpdateOne {
	_u.mutation.SetEntitlementTemplate(v)
	return _u
}

// ClearEntitlementTemplate clears the value of the "entitlement_template" field.
func (_u *AddonRateCardUpdateOne) ClearEntitlementTemplate() *AddonRateCardUpdateOne {
	_u.mutation.ClearEntitlementTemplate()
	return _u
}

// SetTaxConfig sets the "tax_config" field.
func (_u *AddonRateCardUpdateOne) SetTaxConfig(v *productcatalog.TaxConfig) *AddonRateCardUpdateOne {
	_u.mutation.SetTaxConfig(v)
	return _u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (_u *AddonRateCardUpdateOne) ClearTaxConfig() *AddonRateCardUpdateOne {
	_u.mutation.ClearTaxConfig()
	return _u
}

// SetBillingCadence sets the "billing_cadence" field.
func (_u *AddonRateCardUpdateOne) SetBillingCadence(v datetime.ISODurationString) *AddonRateCardUpdateOne {
	_u.mutation.SetBillingCadence(v)
	return _u
}

// SetNillableBillingCadence sets the "billing_cadence" field if the given value is not nil.
func (_u *AddonRateCardUpdateOne) SetNillableBillingCadence(v *datetime.ISODurationString) *AddonRateCardUpdateOne {
	if v != nil {
		_u.SetBillingCadence(*v)
	}
	return _u
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (_u *AddonRateCardUpdateOne) ClearBillingCadence() *AddonRateCardUpdateOne {
	_u.mutation.ClearBillingCadence()
	return _u
}

// SetPrice sets the "price" field.
func (_u *AddonRateCardUpdateOne) SetPrice(v *productcatalog.Price) *AddonRateCardUpdateOne {
	_u.mutation.SetPrice(v)
	return _u
}

// ClearPrice clears the value of the "price" field.
func (_u *AddonRateCardUpdateOne) ClearPrice() *AddonRateCardUpdateOne {
	_u.mutation.ClearPrice()
	return _u
}

// SetDiscounts sets the "discounts" field.
func (_u *AddonRateCardUpdateOne) SetDiscounts(v *productcatalog.Discounts) *AddonRateCardUpdateOne {
	_u.mutation.SetDiscounts(v)
	return _u
}

// ClearDiscounts clears the value of the "discounts" field.
func (_u *AddonRateCardUpdateOne) ClearDiscounts() *AddonRateCardUpdateOne {
	_u.mutation.ClearDiscounts()
	return _u
}

// SetAddonID sets the "addon_id" field.
func (_u *AddonRateCardUpdateOne) SetAddonID(v string) *AddonRateCardUpdateOne {
	_u.mutation.SetAddonID(v)
	return _u
}

// SetNillableAddonID sets the "addon_id" field if the given value is not nil.
func (_u *AddonRateCardUpdateOne) SetNillableAddonID(v *string) *AddonRateCardUpdateOne {
	if v != nil {
		_u.SetAddonID(*v)
	}
	return _u
}

// SetFeatureID sets the "feature_id" field.
func (_u *AddonRateCardUpdateOne) SetFeatureID(v string) *AddonRateCardUpdateOne {
	_u.mutation.SetFeatureID(v)
	return _u
}

// SetNillableFeatureID sets the "feature_id" field if the given value is not nil.
func (_u *AddonRateCardUpdateOne) SetNillableFeatureID(v *string) *AddonRateCardUpdateOne {
	if v != nil {
		_u.SetFeatureID(*v)
	}
	return _u
}

// ClearFeatureID clears the value of the "feature_id" field.
func (_u *AddonRateCardUpdateOne) ClearFeatureID() *AddonRateCardUpdateOne {
	_u.mutation.ClearFeatureID()
	return _u
}

// SetAddon sets the "addon" edge to the Addon entity.
func (_u *AddonRateCardUpdateOne) SetAddon(v *Addon) *AddonRateCardUpdateOne {
	return _u.SetAddonID(v.ID)
}

// SetFeaturesID sets the "features" edge to the Feature entity by ID.
func (_u *AddonRateCardUpdateOne) SetFeaturesID(id string) *AddonRateCardUpdateOne {
	_u.mutation.SetFeaturesID(id)
	return _u
}

// SetNillableFeaturesID sets the "features" edge to the Feature entity by ID if the given value is not nil.
func (_u *AddonRateCardUpdateOne) SetNillableFeaturesID(id *string) *AddonRateCardUpdateOne {
	if id != nil {
		_u = _u.SetFeaturesID(*id)
	}
	return _u
}

// SetFeatures sets the "features" edge to the Feature entity.
func (_u *AddonRateCardUpdateOne) SetFeatures(v *Feature) *AddonRateCardUpdateOne {
	return _u.SetFeaturesID(v.ID)
}

// Mutation returns the AddonRateCardMutation object of the builder.
func (_u *AddonRateCardUpdateOne) Mutation() *AddonRateCardMutation {
	return _u.mutation
}

// ClearAddon clears the "addon" edge to the Addon entity.
func (_u *AddonRateCardUpdateOne) ClearAddon() *AddonRateCardUpdateOne {
	_u.mutation.ClearAddon()
	return _u
}

// ClearFeatures clears the "features" edge to the Feature entity.
func (_u *AddonRateCardUpdateOne) ClearFeatures() *AddonRateCardUpdateOne {
	_u.mutation.ClearFeatures()
	return _u
}

// Where appends a list predicates to the AddonRateCardUpdate builder.
func (_u *AddonRateCardUpdateOne) Where(ps ...predicate.AddonRateCard) *AddonRateCardUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AddonRateCardUpdateOne) Select(field string, fields ...string) *AddonRateCardUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AddonRateCard entity.
func (_u *AddonRateCardUpdateOne) Save(ctx context.Context) (*AddonRateCard, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AddonRateCardUpdateOne) SaveX(ctx context.Context) *AddonRateCard {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AddonRateCardUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AddonRateCardUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AddonRateCardUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := addonratecard.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AddonRateCardUpdateOne) check() error {
	if v, ok := _u.mutation.EntitlementTemplate(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "entitlement_template", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.entitlement_template": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.tax_config": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Price(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.price": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Discounts(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "discounts", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.discounts": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AddonID(); ok {
		if err := addonratecard.AddonIDValidator(v); err != nil {
			return &ValidationError{Name: "addon_id", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.addon_id": %w`, err)}
		}
	}
	if _u.mutation.AddonCleared() && len(_u.mutation.AddonIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "AddonRateCard.addon"`)
	}
	return nil
}

func (_u *AddonRateCardUpdateOne) sqlSave(ctx context.Context) (_node *AddonRateCard, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(addonratecard.Table, addonratecard.Columns, sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "AddonRateCard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, addonratecard.FieldID)
		for _, f := range fields {
			if !addonratecard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != addonratecard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(addonratecard.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(addonratecard.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(addonratecard.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(addonratecard.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(addonratecard.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(addonratecard.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(addonratecard.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(addonratecard.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.FeatureKey(); ok {
		_spec.SetField(addonratecard.FieldFeatureKey, field.TypeString, value)
	}
	if _u.mutation.FeatureKeyCleared() {
		_spec.ClearField(addonratecard.FieldFeatureKey, field.TypeString)
	}
	if value, ok := _u.mutation.EntitlementTemplate(); ok {
		vv, err := addonratecard.ValueScanner.EntitlementTemplate.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(addonratecard.FieldEntitlementTemplate, field.TypeString, vv)
	}
	if _u.mutation.EntitlementTemplateCleared() {
		_spec.ClearField(addonratecard.FieldEntitlementTemplate, field.TypeString)
	}
	if value, ok := _u.mutation.TaxConfig(); ok {
		vv, err := addonratecard.ValueScanner.TaxConfig.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(addonratecard.FieldTaxConfig, field.TypeString, vv)
	}
	if _u.mutation.TaxConfigCleared() {
		_spec.ClearField(addonratecard.FieldTaxConfig, field.TypeString)
	}
	if value, ok := _u.mutation.BillingCadence(); ok {
		_spec.SetField(addonratecard.FieldBillingCadence, field.TypeString, value)
	}
	if _u.mutation.BillingCadenceCleared() {
		_spec.ClearField(addonratecard.FieldBillingCadence, field.TypeString)
	}
	if value, ok := _u.mutation.Price(); ok {
		vv, err := addonratecard.ValueScanner.Price.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(addonratecard.FieldPrice, field.TypeString, vv)
	}
	if _u.mutation.PriceCleared() {
		_spec.ClearField(addonratecard.FieldPrice, field.TypeString)
	}
	if value, ok := _u.mutation.Discounts(); ok {
		vv, err := addonratecard.ValueScanner.Discounts.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(addonratecard.FieldDiscounts, field.TypeString, vv)
	}
	if _u.mutation.DiscountsCleared() {
		_spec.ClearField(addonratecard.FieldDiscounts, field.TypeString)
	}
	if _u.mutation.AddonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addonratecard.AddonTable,
			Columns: []string{addonratecard.AddonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addon.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AddonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addonratecard.AddonTable,
			Columns: []string{addonratecard.AddonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addonratecard.FeaturesTable,
			Columns: []string{addonratecard.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addonratecard.FeaturesTable,
			Columns: []string{addonratecard.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AddonRateCard{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{addonratecard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
