// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomeroverride"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingprofile"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/isodate"
)

// BillingCustomerOverrideCreate is the builder for creating a BillingCustomerOverride entity.
type BillingCustomerOverrideCreate struct {
	config
	mutation *BillingCustomerOverrideMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (_c *BillingCustomerOverrideCreate) SetNamespace(v string) *BillingCustomerOverrideCreate {
	_c.mutation.SetNamespace(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BillingCustomerOverrideCreate) SetCreatedAt(v time.Time) *BillingCustomerOverrideCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BillingCustomerOverrideCreate) SetNillableCreatedAt(v *time.Time) *BillingCustomerOverrideCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BillingCustomerOverrideCreate) SetUpdatedAt(v time.Time) *BillingCustomerOverrideCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BillingCustomerOverrideCreate) SetNillableUpdatedAt(v *time.Time) *BillingCustomerOverrideCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *BillingCustomerOverrideCreate) SetDeletedAt(v time.Time) *BillingCustomerOverrideCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *BillingCustomerOverrideCreate) SetNillableDeletedAt(v *time.Time) *BillingCustomerOverrideCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetCustomerID sets the "customer_id" field.
func (_c *BillingCustomerOverrideCreate) SetCustomerID(v string) *BillingCustomerOverrideCreate {
	_c.mutation.SetCustomerID(v)
	return _c
}

// SetBillingProfileID sets the "billing_profile_id" field.
func (_c *BillingCustomerOverrideCreate) SetBillingProfileID(v string) *BillingCustomerOverrideCreate {
	_c.mutation.SetBillingProfileID(v)
	return _c
}

// SetNillableBillingProfileID sets the "billing_profile_id" field if the given value is not nil.
func (_c *BillingCustomerOverrideCreate) SetNillableBillingProfileID(v *string) *BillingCustomerOverrideCreate {
	if v != nil {
		_c.SetBillingProfileID(*v)
	}
	return _c
}

// SetCollectionAlignment sets the "collection_alignment" field.
func (_c *BillingCustomerOverrideCreate) SetCollectionAlignment(v billing.AlignmentKind) *BillingCustomerOverrideCreate {
	_c.mutation.SetCollectionAlignment(v)
	return _c
}

// SetNillableCollectionAlignment sets the "collection_alignment" field if the given value is not nil.
func (_c *BillingCustomerOverrideCreate) SetNillableCollectionAlignment(v *billing.AlignmentKind) *BillingCustomerOverrideCreate {
	if v != nil {
		_c.SetCollectionAlignment(*v)
	}
	return _c
}

// SetLineCollectionPeriod sets the "line_collection_period" field.
func (_c *BillingCustomerOverrideCreate) SetLineCollectionPeriod(v isodate.String) *BillingCustomerOverrideCreate {
	_c.mutation.SetLineCollectionPeriod(v)
	return _c
}

// SetNillableLineCollectionPeriod sets the "line_collection_period" field if the given value is not nil.
func (_c *BillingCustomerOverrideCreate) SetNillableLineCollectionPeriod(v *isodate.String) *BillingCustomerOverrideCreate {
	if v != nil {
		_c.SetLineCollectionPeriod(*v)
	}
	return _c
}

// SetInvoiceAutoAdvance sets the "invoice_auto_advance" field.
func (_c *BillingCustomerOverrideCreate) SetInvoiceAutoAdvance(v bool) *BillingCustomerOverrideCreate {
	_c.mutation.SetInvoiceAutoAdvance(v)
	return _c
}

// SetNillableInvoiceAutoAdvance sets the "invoice_auto_advance" field if the given value is not nil.
func (_c *BillingCustomerOverrideCreate) SetNillableInvoiceAutoAdvance(v *bool) *BillingCustomerOverrideCreate {
	if v != nil {
		_c.SetInvoiceAutoAdvance(*v)
	}
	return _c
}

// SetInvoiceDraftPeriod sets the "invoice_draft_period" field.
func (_c *BillingCustomerOverrideCreate) SetInvoiceDraftPeriod(v isodate.String) *BillingCustomerOverrideCreate {
	_c.mutation.SetInvoiceDraftPeriod(v)
	return _c
}

// SetNillableInvoiceDraftPeriod sets the "invoice_draft_period" field if the given value is not nil.
func (_c *BillingCustomerOverrideCreate) SetNillableInvoiceDraftPeriod(v *isodate.String) *BillingCustomerOverrideCreate {
	if v != nil {
		_c.SetInvoiceDraftPeriod(*v)
	}
	return _c
}

// SetInvoiceDueAfter sets the "invoice_due_after" field.
func (_c *BillingCustomerOverrideCreate) SetInvoiceDueAfter(v isodate.String) *BillingCustomerOverrideCreate {
	_c.mutation.SetInvoiceDueAfter(v)
	return _c
}

// SetNillableInvoiceDueAfter sets the "invoice_due_after" field if the given value is not nil.
func (_c *BillingCustomerOverrideCreate) SetNillableInvoiceDueAfter(v *isodate.String) *BillingCustomerOverrideCreate {
	if v != nil {
		_c.SetInvoiceDueAfter(*v)
	}
	return _c
}

// SetInvoiceCollectionMethod sets the "invoice_collection_method" field.
func (_c *BillingCustomerOverrideCreate) SetInvoiceCollectionMethod(v billing.CollectionMethod) *BillingCustomerOverrideCreate {
	_c.mutation.SetInvoiceCollectionMethod(v)
	return _c
}

// SetNillableInvoiceCollectionMethod sets the "invoice_collection_method" field if the given value is not nil.
func (_c *BillingCustomerOverrideCreate) SetNillableInvoiceCollectionMethod(v *billing.CollectionMethod) *BillingCustomerOverrideCreate {
	if v != nil {
		_c.SetInvoiceCollectionMethod(*v)
	}
	return _c
}

// SetInvoiceProgressiveBilling sets the "invoice_progressive_billing" field.
func (_c *BillingCustomerOverrideCreate) SetInvoiceProgressiveBilling(v bool) *BillingCustomerOverrideCreate {
	_c.mutation.SetInvoiceProgressiveBilling(v)
	return _c
}

// SetNillableInvoiceProgressiveBilling sets the "invoice_progressive_billing" field if the given value is not nil.
func (_c *BillingCustomerOverrideCreate) SetNillableInvoiceProgressiveBilling(v *bool) *BillingCustomerOverrideCreate {
	if v != nil {
		_c.SetInvoiceProgressiveBilling(*v)
	}
	return _c
}

// SetInvoiceDefaultTaxConfig sets the "invoice_default_tax_config" field.
func (_c *BillingCustomerOverrideCreate) SetInvoiceDefaultTaxConfig(v productcatalog.TaxConfig) *BillingCustomerOverrideCreate {
	_c.mutation.SetInvoiceDefaultTaxConfig(v)
	return _c
}

// SetNillableInvoiceDefaultTaxConfig sets the "invoice_default_tax_config" field if the given value is not nil.
func (_c *BillingCustomerOverrideCreate) SetNillableInvoiceDefaultTaxConfig(v *productcatalog.TaxConfig) *BillingCustomerOverrideCreate {
	if v != nil {
		_c.SetInvoiceDefaultTaxConfig(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *BillingCustomerOverrideCreate) SetID(v string) *BillingCustomerOverrideCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *BillingCustomerOverrideCreate) SetNillableID(v *string) *BillingCustomerOverrideCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (_c *BillingCustomerOverrideCreate) SetCustomer(v *Customer) *BillingCustomerOverrideCreate {
	return _c.SetCustomerID(v.ID)
}

// SetBillingProfile sets the "billing_profile" edge to the BillingProfile entity.
func (_c *BillingCustomerOverrideCreate) SetBillingProfile(v *BillingProfile) *BillingCustomerOverrideCreate {
	return _c.SetBillingProfileID(v.ID)
}

// Mutation returns the BillingCustomerOverrideMutation object of the builder.
func (_c *BillingCustomerOverrideCreate) Mutation() *BillingCustomerOverrideMutation {
	return _c.mutation
}

// Save creates the BillingCustomerOverride in the database.
func (_c *BillingCustomerOverrideCreate) Save(ctx context.Context) (*BillingCustomerOverride, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BillingCustomerOverrideCreate) SaveX(ctx context.Context) *BillingCustomerOverride {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BillingCustomerOverrideCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BillingCustomerOverrideCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BillingCustomerOverrideCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := billingcustomeroverride.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := billingcustomeroverride.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := billingcustomeroverride.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BillingCustomerOverrideCreate) check() error {
	if _, ok := _c.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingCustomerOverride.namespace"`)}
	}
	if v, ok := _c.mutation.Namespace(); ok {
		if err := billingcustomeroverride.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.namespace": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingCustomerOverride.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingCustomerOverride.updated_at"`)}
	}
	if _, ok := _c.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`db: missing required field "BillingCustomerOverride.customer_id"`)}
	}
	if v, ok := _c.mutation.CollectionAlignment(); ok {
		if err := billingcustomeroverride.CollectionAlignmentValidator(v); err != nil {
			return &ValidationError{Name: "collection_alignment", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.collection_alignment": %w`, err)}
		}
	}
	if v, ok := _c.mutation.InvoiceCollectionMethod(); ok {
		if err := billingcustomeroverride.InvoiceCollectionMethodValidator(v); err != nil {
			return &ValidationError{Name: "invoice_collection_method", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.invoice_collection_method": %w`, err)}
		}
	}
	if v, ok := _c.mutation.InvoiceDefaultTaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "invoice_default_tax_config", err: fmt.Errorf(`db: validator failed for field "BillingCustomerOverride.invoice_default_tax_config": %w`, err)}
		}
	}
	if len(_c.mutation.CustomerIDs()) == 0 {
		return &ValidationError{Name: "customer", err: errors.New(`db: missing required edge "BillingCustomerOverride.customer"`)}
	}
	return nil
}

func (_c *BillingCustomerOverrideCreate) sqlSave(ctx context.Context) (*BillingCustomerOverride, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingCustomerOverride.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BillingCustomerOverrideCreate) createSpec() (*BillingCustomerOverride, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingCustomerOverride{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(billingcustomeroverride.Table, sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Namespace(); ok {
		_spec.SetField(billingcustomeroverride.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(billingcustomeroverride.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.CollectionAlignment(); ok {
		_spec.SetField(billingcustomeroverride.FieldCollectionAlignment, field.TypeEnum, value)
		_node.CollectionAlignment = &value
	}
	if value, ok := _c.mutation.LineCollectionPeriod(); ok {
		_spec.SetField(billingcustomeroverride.FieldLineCollectionPeriod, field.TypeString, value)
		_node.LineCollectionPeriod = &value
	}
	if value, ok := _c.mutation.InvoiceAutoAdvance(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceAutoAdvance, field.TypeBool, value)
		_node.InvoiceAutoAdvance = &value
	}
	if value, ok := _c.mutation.InvoiceDraftPeriod(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceDraftPeriod, field.TypeString, value)
		_node.InvoiceDraftPeriod = &value
	}
	if value, ok := _c.mutation.InvoiceDueAfter(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceDueAfter, field.TypeString, value)
		_node.InvoiceDueAfter = &value
	}
	if value, ok := _c.mutation.InvoiceCollectionMethod(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceCollectionMethod, field.TypeEnum, value)
		_node.InvoiceCollectionMethod = &value
	}
	if value, ok := _c.mutation.InvoiceProgressiveBilling(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceProgressiveBilling, field.TypeBool, value)
		_node.InvoiceProgressiveBilling = &value
	}
	if value, ok := _c.mutation.InvoiceDefaultTaxConfig(); ok {
		_spec.SetField(billingcustomeroverride.FieldInvoiceDefaultTaxConfig, field.TypeJSON, value)
		_node.InvoiceDefaultTaxConfig = value
	}
	if nodes := _c.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingcustomeroverride.CustomerTable,
			Columns: []string{billingcustomeroverride.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BillingProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingcustomeroverride.BillingProfileTable,
			Columns: []string{billingcustomeroverride.BillingProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BillingProfileID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingCustomerOverride.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingCustomerOverrideUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *BillingCustomerOverrideCreate) OnConflict(opts ...sql.ConflictOption) *BillingCustomerOverrideUpsertOne {
	_c.conflict = opts
	return &BillingCustomerOverrideUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingCustomerOverride.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BillingCustomerOverrideCreate) OnConflictColumns(columns ...string) *BillingCustomerOverrideUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BillingCustomerOverrideUpsertOne{
		create: _c,
	}
}

type (
	// BillingCustomerOverrideUpsertOne is the builder for "upsert"-ing
	//  one BillingCustomerOverride node.
	BillingCustomerOverrideUpsertOne struct {
		create *BillingCustomerOverrideCreate
	}

	// BillingCustomerOverrideUpsert is the "OnConflict" setter.
	BillingCustomerOverrideUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingCustomerOverrideUpsert) SetUpdatedAt(v time.Time) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateUpdatedAt() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingCustomerOverrideUpsert) SetDeletedAt(v time.Time) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateDeletedAt() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingCustomerOverrideUpsert) ClearDeletedAt() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldDeletedAt)
	return u
}

// SetBillingProfileID sets the "billing_profile_id" field.
func (u *BillingCustomerOverrideUpsert) SetBillingProfileID(v string) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldBillingProfileID, v)
	return u
}

// UpdateBillingProfileID sets the "billing_profile_id" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateBillingProfileID() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldBillingProfileID)
	return u
}

// ClearBillingProfileID clears the value of the "billing_profile_id" field.
func (u *BillingCustomerOverrideUpsert) ClearBillingProfileID() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldBillingProfileID)
	return u
}

// SetCollectionAlignment sets the "collection_alignment" field.
func (u *BillingCustomerOverrideUpsert) SetCollectionAlignment(v billing.AlignmentKind) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldCollectionAlignment, v)
	return u
}

// UpdateCollectionAlignment sets the "collection_alignment" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateCollectionAlignment() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldCollectionAlignment)
	return u
}

// ClearCollectionAlignment clears the value of the "collection_alignment" field.
func (u *BillingCustomerOverrideUpsert) ClearCollectionAlignment() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldCollectionAlignment)
	return u
}

// SetLineCollectionPeriod sets the "line_collection_period" field.
func (u *BillingCustomerOverrideUpsert) SetLineCollectionPeriod(v isodate.String) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldLineCollectionPeriod, v)
	return u
}

// UpdateLineCollectionPeriod sets the "line_collection_period" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateLineCollectionPeriod() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldLineCollectionPeriod)
	return u
}

// ClearLineCollectionPeriod clears the value of the "line_collection_period" field.
func (u *BillingCustomerOverrideUpsert) ClearLineCollectionPeriod() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldLineCollectionPeriod)
	return u
}

// SetInvoiceAutoAdvance sets the "invoice_auto_advance" field.
func (u *BillingCustomerOverrideUpsert) SetInvoiceAutoAdvance(v bool) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldInvoiceAutoAdvance, v)
	return u
}

// UpdateInvoiceAutoAdvance sets the "invoice_auto_advance" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateInvoiceAutoAdvance() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldInvoiceAutoAdvance)
	return u
}

// ClearInvoiceAutoAdvance clears the value of the "invoice_auto_advance" field.
func (u *BillingCustomerOverrideUpsert) ClearInvoiceAutoAdvance() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldInvoiceAutoAdvance)
	return u
}

// SetInvoiceDraftPeriod sets the "invoice_draft_period" field.
func (u *BillingCustomerOverrideUpsert) SetInvoiceDraftPeriod(v isodate.String) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldInvoiceDraftPeriod, v)
	return u
}

// UpdateInvoiceDraftPeriod sets the "invoice_draft_period" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateInvoiceDraftPeriod() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldInvoiceDraftPeriod)
	return u
}

// ClearInvoiceDraftPeriod clears the value of the "invoice_draft_period" field.
func (u *BillingCustomerOverrideUpsert) ClearInvoiceDraftPeriod() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldInvoiceDraftPeriod)
	return u
}

// SetInvoiceDueAfter sets the "invoice_due_after" field.
func (u *BillingCustomerOverrideUpsert) SetInvoiceDueAfter(v isodate.String) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldInvoiceDueAfter, v)
	return u
}

// UpdateInvoiceDueAfter sets the "invoice_due_after" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateInvoiceDueAfter() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldInvoiceDueAfter)
	return u
}

// ClearInvoiceDueAfter clears the value of the "invoice_due_after" field.
func (u *BillingCustomerOverrideUpsert) ClearInvoiceDueAfter() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldInvoiceDueAfter)
	return u
}

// SetInvoiceCollectionMethod sets the "invoice_collection_method" field.
func (u *BillingCustomerOverrideUpsert) SetInvoiceCollectionMethod(v billing.CollectionMethod) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldInvoiceCollectionMethod, v)
	return u
}

// UpdateInvoiceCollectionMethod sets the "invoice_collection_method" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateInvoiceCollectionMethod() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldInvoiceCollectionMethod)
	return u
}

// ClearInvoiceCollectionMethod clears the value of the "invoice_collection_method" field.
func (u *BillingCustomerOverrideUpsert) ClearInvoiceCollectionMethod() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldInvoiceCollectionMethod)
	return u
}

// SetInvoiceProgressiveBilling sets the "invoice_progressive_billing" field.
func (u *BillingCustomerOverrideUpsert) SetInvoiceProgressiveBilling(v bool) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldInvoiceProgressiveBilling, v)
	return u
}

// UpdateInvoiceProgressiveBilling sets the "invoice_progressive_billing" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateInvoiceProgressiveBilling() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldInvoiceProgressiveBilling)
	return u
}

// ClearInvoiceProgressiveBilling clears the value of the "invoice_progressive_billing" field.
func (u *BillingCustomerOverrideUpsert) ClearInvoiceProgressiveBilling() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldInvoiceProgressiveBilling)
	return u
}

// SetInvoiceDefaultTaxConfig sets the "invoice_default_tax_config" field.
func (u *BillingCustomerOverrideUpsert) SetInvoiceDefaultTaxConfig(v productcatalog.TaxConfig) *BillingCustomerOverrideUpsert {
	u.Set(billingcustomeroverride.FieldInvoiceDefaultTaxConfig, v)
	return u
}

// UpdateInvoiceDefaultTaxConfig sets the "invoice_default_tax_config" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsert) UpdateInvoiceDefaultTaxConfig() *BillingCustomerOverrideUpsert {
	u.SetExcluded(billingcustomeroverride.FieldInvoiceDefaultTaxConfig)
	return u
}

// ClearInvoiceDefaultTaxConfig clears the value of the "invoice_default_tax_config" field.
func (u *BillingCustomerOverrideUpsert) ClearInvoiceDefaultTaxConfig() *BillingCustomerOverrideUpsert {
	u.SetNull(billingcustomeroverride.FieldInvoiceDefaultTaxConfig)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingCustomerOverride.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billingcustomeroverride.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingCustomerOverrideUpsertOne) UpdateNewValues() *BillingCustomerOverrideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billingcustomeroverride.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billingcustomeroverride.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billingcustomeroverride.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CustomerID(); exists {
			s.SetIgnore(billingcustomeroverride.FieldCustomerID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingCustomerOverride.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingCustomerOverrideUpsertOne) Ignore() *BillingCustomerOverrideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingCustomerOverrideUpsertOne) DoNothing() *BillingCustomerOverrideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingCustomerOverrideCreate.OnConflict
// documentation for more info.
func (u *BillingCustomerOverrideUpsertOne) Update(set func(*BillingCustomerOverrideUpsert)) *BillingCustomerOverrideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingCustomerOverrideUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingCustomerOverrideUpsertOne) SetUpdatedAt(v time.Time) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateUpdatedAt() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingCustomerOverrideUpsertOne) SetDeletedAt(v time.Time) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateDeletedAt() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingCustomerOverrideUpsertOne) ClearDeletedAt() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearDeletedAt()
	})
}

// SetBillingProfileID sets the "billing_profile_id" field.
func (u *BillingCustomerOverrideUpsertOne) SetBillingProfileID(v string) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetBillingProfileID(v)
	})
}

// UpdateBillingProfileID sets the "billing_profile_id" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateBillingProfileID() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateBillingProfileID()
	})
}

// ClearBillingProfileID clears the value of the "billing_profile_id" field.
func (u *BillingCustomerOverrideUpsertOne) ClearBillingProfileID() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearBillingProfileID()
	})
}

// SetCollectionAlignment sets the "collection_alignment" field.
func (u *BillingCustomerOverrideUpsertOne) SetCollectionAlignment(v billing.AlignmentKind) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetCollectionAlignment(v)
	})
}

// UpdateCollectionAlignment sets the "collection_alignment" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateCollectionAlignment() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateCollectionAlignment()
	})
}

// ClearCollectionAlignment clears the value of the "collection_alignment" field.
func (u *BillingCustomerOverrideUpsertOne) ClearCollectionAlignment() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearCollectionAlignment()
	})
}

// SetLineCollectionPeriod sets the "line_collection_period" field.
func (u *BillingCustomerOverrideUpsertOne) SetLineCollectionPeriod(v isodate.String) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetLineCollectionPeriod(v)
	})
}

// UpdateLineCollectionPeriod sets the "line_collection_period" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateLineCollectionPeriod() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateLineCollectionPeriod()
	})
}

// ClearLineCollectionPeriod clears the value of the "line_collection_period" field.
func (u *BillingCustomerOverrideUpsertOne) ClearLineCollectionPeriod() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearLineCollectionPeriod()
	})
}

// SetInvoiceAutoAdvance sets the "invoice_auto_advance" field.
func (u *BillingCustomerOverrideUpsertOne) SetInvoiceAutoAdvance(v bool) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetInvoiceAutoAdvance(v)
	})
}

// UpdateInvoiceAutoAdvance sets the "invoice_auto_advance" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateInvoiceAutoAdvance() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateInvoiceAutoAdvance()
	})
}

// ClearInvoiceAutoAdvance clears the value of the "invoice_auto_advance" field.
func (u *BillingCustomerOverrideUpsertOne) ClearInvoiceAutoAdvance() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearInvoiceAutoAdvance()
	})
}

// SetInvoiceDraftPeriod sets the "invoice_draft_period" field.
func (u *BillingCustomerOverrideUpsertOne) SetInvoiceDraftPeriod(v isodate.String) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetInvoiceDraftPeriod(v)
	})
}

// UpdateInvoiceDraftPeriod sets the "invoice_draft_period" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateInvoiceDraftPeriod() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateInvoiceDraftPeriod()
	})
}

// ClearInvoiceDraftPeriod clears the value of the "invoice_draft_period" field.
func (u *BillingCustomerOverrideUpsertOne) ClearInvoiceDraftPeriod() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearInvoiceDraftPeriod()
	})
}

// SetInvoiceDueAfter sets the "invoice_due_after" field.
func (u *BillingCustomerOverrideUpsertOne) SetInvoiceDueAfter(v isodate.String) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetInvoiceDueAfter(v)
	})
}

// UpdateInvoiceDueAfter sets the "invoice_due_after" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateInvoiceDueAfter() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateInvoiceDueAfter()
	})
}

// ClearInvoiceDueAfter clears the value of the "invoice_due_after" field.
func (u *BillingCustomerOverrideUpsertOne) ClearInvoiceDueAfter() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearInvoiceDueAfter()
	})
}

// SetInvoiceCollectionMethod sets the "invoice_collection_method" field.
func (u *BillingCustomerOverrideUpsertOne) SetInvoiceCollectionMethod(v billing.CollectionMethod) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetInvoiceCollectionMethod(v)
	})
}

// UpdateInvoiceCollectionMethod sets the "invoice_collection_method" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateInvoiceCollectionMethod() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateInvoiceCollectionMethod()
	})
}

// ClearInvoiceCollectionMethod clears the value of the "invoice_collection_method" field.
func (u *BillingCustomerOverrideUpsertOne) ClearInvoiceCollectionMethod() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearInvoiceCollectionMethod()
	})
}

// SetInvoiceProgressiveBilling sets the "invoice_progressive_billing" field.
func (u *BillingCustomerOverrideUpsertOne) SetInvoiceProgressiveBilling(v bool) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetInvoiceProgressiveBilling(v)
	})
}

// UpdateInvoiceProgressiveBilling sets the "invoice_progressive_billing" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateInvoiceProgressiveBilling() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateInvoiceProgressiveBilling()
	})
}

// ClearInvoiceProgressiveBilling clears the value of the "invoice_progressive_billing" field.
func (u *BillingCustomerOverrideUpsertOne) ClearInvoiceProgressiveBilling() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearInvoiceProgressiveBilling()
	})
}

// SetInvoiceDefaultTaxConfig sets the "invoice_default_tax_config" field.
func (u *BillingCustomerOverrideUpsertOne) SetInvoiceDefaultTaxConfig(v productcatalog.TaxConfig) *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetInvoiceDefaultTaxConfig(v)
	})
}

// UpdateInvoiceDefaultTaxConfig sets the "invoice_default_tax_config" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertOne) UpdateInvoiceDefaultTaxConfig() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateInvoiceDefaultTaxConfig()
	})
}

// ClearInvoiceDefaultTaxConfig clears the value of the "invoice_default_tax_config" field.
func (u *BillingCustomerOverrideUpsertOne) ClearInvoiceDefaultTaxConfig() *BillingCustomerOverrideUpsertOne {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearInvoiceDefaultTaxConfig()
	})
}

// Exec executes the query.
func (u *BillingCustomerOverrideUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingCustomerOverrideCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingCustomerOverrideUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingCustomerOverrideUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingCustomerOverrideUpsertOne.ID is not supported by MySQL driver. Use BillingCustomerOverrideUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingCustomerOverrideUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingCustomerOverrideCreateBulk is the builder for creating many BillingCustomerOverride entities in bulk.
type BillingCustomerOverrideCreateBulk struct {
	config
	err      error
	builders []*BillingCustomerOverrideCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingCustomerOverride entities in the database.
func (_c *BillingCustomerOverrideCreateBulk) Save(ctx context.Context) ([]*BillingCustomerOverride, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BillingCustomerOverride, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingCustomerOverrideMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BillingCustomerOverrideCreateBulk) SaveX(ctx context.Context) []*BillingCustomerOverride {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BillingCustomerOverrideCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BillingCustomerOverrideCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingCustomerOverride.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingCustomerOverrideUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *BillingCustomerOverrideCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingCustomerOverrideUpsertBulk {
	_c.conflict = opts
	return &BillingCustomerOverrideUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingCustomerOverride.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BillingCustomerOverrideCreateBulk) OnConflictColumns(columns ...string) *BillingCustomerOverrideUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BillingCustomerOverrideUpsertBulk{
		create: _c,
	}
}

// BillingCustomerOverrideUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingCustomerOverride nodes.
type BillingCustomerOverrideUpsertBulk struct {
	create *BillingCustomerOverrideCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingCustomerOverride.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billingcustomeroverride.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingCustomerOverrideUpsertBulk) UpdateNewValues() *BillingCustomerOverrideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billingcustomeroverride.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billingcustomeroverride.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billingcustomeroverride.FieldCreatedAt)
			}
			if _, exists := b.mutation.CustomerID(); exists {
				s.SetIgnore(billingcustomeroverride.FieldCustomerID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingCustomerOverride.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingCustomerOverrideUpsertBulk) Ignore() *BillingCustomerOverrideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingCustomerOverrideUpsertBulk) DoNothing() *BillingCustomerOverrideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingCustomerOverrideCreateBulk.OnConflict
// documentation for more info.
func (u *BillingCustomerOverrideUpsertBulk) Update(set func(*BillingCustomerOverrideUpsert)) *BillingCustomerOverrideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingCustomerOverrideUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingCustomerOverrideUpsertBulk) SetUpdatedAt(v time.Time) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateUpdatedAt() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingCustomerOverrideUpsertBulk) SetDeletedAt(v time.Time) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateDeletedAt() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearDeletedAt() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearDeletedAt()
	})
}

// SetBillingProfileID sets the "billing_profile_id" field.
func (u *BillingCustomerOverrideUpsertBulk) SetBillingProfileID(v string) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetBillingProfileID(v)
	})
}

// UpdateBillingProfileID sets the "billing_profile_id" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateBillingProfileID() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateBillingProfileID()
	})
}

// ClearBillingProfileID clears the value of the "billing_profile_id" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearBillingProfileID() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearBillingProfileID()
	})
}

// SetCollectionAlignment sets the "collection_alignment" field.
func (u *BillingCustomerOverrideUpsertBulk) SetCollectionAlignment(v billing.AlignmentKind) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetCollectionAlignment(v)
	})
}

// UpdateCollectionAlignment sets the "collection_alignment" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateCollectionAlignment() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateCollectionAlignment()
	})
}

// ClearCollectionAlignment clears the value of the "collection_alignment" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearCollectionAlignment() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearCollectionAlignment()
	})
}

// SetLineCollectionPeriod sets the "line_collection_period" field.
func (u *BillingCustomerOverrideUpsertBulk) SetLineCollectionPeriod(v isodate.String) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetLineCollectionPeriod(v)
	})
}

// UpdateLineCollectionPeriod sets the "line_collection_period" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateLineCollectionPeriod() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateLineCollectionPeriod()
	})
}

// ClearLineCollectionPeriod clears the value of the "line_collection_period" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearLineCollectionPeriod() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearLineCollectionPeriod()
	})
}

// SetInvoiceAutoAdvance sets the "invoice_auto_advance" field.
func (u *BillingCustomerOverrideUpsertBulk) SetInvoiceAutoAdvance(v bool) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetInvoiceAutoAdvance(v)
	})
}

// UpdateInvoiceAutoAdvance sets the "invoice_auto_advance" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateInvoiceAutoAdvance() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateInvoiceAutoAdvance()
	})
}

// ClearInvoiceAutoAdvance clears the value of the "invoice_auto_advance" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearInvoiceAutoAdvance() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearInvoiceAutoAdvance()
	})
}

// SetInvoiceDraftPeriod sets the "invoice_draft_period" field.
func (u *BillingCustomerOverrideUpsertBulk) SetInvoiceDraftPeriod(v isodate.String) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetInvoiceDraftPeriod(v)
	})
}

// UpdateInvoiceDraftPeriod sets the "invoice_draft_period" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateInvoiceDraftPeriod() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateInvoiceDraftPeriod()
	})
}

// ClearInvoiceDraftPeriod clears the value of the "invoice_draft_period" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearInvoiceDraftPeriod() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearInvoiceDraftPeriod()
	})
}

// SetInvoiceDueAfter sets the "invoice_due_after" field.
func (u *BillingCustomerOverrideUpsertBulk) SetInvoiceDueAfter(v isodate.String) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetInvoiceDueAfter(v)
	})
}

// UpdateInvoiceDueAfter sets the "invoice_due_after" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateInvoiceDueAfter() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateInvoiceDueAfter()
	})
}

// ClearInvoiceDueAfter clears the value of the "invoice_due_after" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearInvoiceDueAfter() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearInvoiceDueAfter()
	})
}

// SetInvoiceCollectionMethod sets the "invoice_collection_method" field.
func (u *BillingCustomerOverrideUpsertBulk) SetInvoiceCollectionMethod(v billing.CollectionMethod) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetInvoiceCollectionMethod(v)
	})
}

// UpdateInvoiceCollectionMethod sets the "invoice_collection_method" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateInvoiceCollectionMethod() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateInvoiceCollectionMethod()
	})
}

// ClearInvoiceCollectionMethod clears the value of the "invoice_collection_method" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearInvoiceCollectionMethod() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearInvoiceCollectionMethod()
	})
}

// SetInvoiceProgressiveBilling sets the "invoice_progressive_billing" field.
func (u *BillingCustomerOverrideUpsertBulk) SetInvoiceProgressiveBilling(v bool) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetInvoiceProgressiveBilling(v)
	})
}

// UpdateInvoiceProgressiveBilling sets the "invoice_progressive_billing" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateInvoiceProgressiveBilling() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateInvoiceProgressiveBilling()
	})
}

// ClearInvoiceProgressiveBilling clears the value of the "invoice_progressive_billing" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearInvoiceProgressiveBilling() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearInvoiceProgressiveBilling()
	})
}

// SetInvoiceDefaultTaxConfig sets the "invoice_default_tax_config" field.
func (u *BillingCustomerOverrideUpsertBulk) SetInvoiceDefaultTaxConfig(v productcatalog.TaxConfig) *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.SetInvoiceDefaultTaxConfig(v)
	})
}

// UpdateInvoiceDefaultTaxConfig sets the "invoice_default_tax_config" field to the value that was provided on create.
func (u *BillingCustomerOverrideUpsertBulk) UpdateInvoiceDefaultTaxConfig() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.UpdateInvoiceDefaultTaxConfig()
	})
}

// ClearInvoiceDefaultTaxConfig clears the value of the "invoice_default_tax_config" field.
func (u *BillingCustomerOverrideUpsertBulk) ClearInvoiceDefaultTaxConfig() *BillingCustomerOverrideUpsertBulk {
	return u.Update(func(s *BillingCustomerOverrideUpsert) {
		s.ClearInvoiceDefaultTaxConfig()
	})
}

// Exec executes the query.
func (u *BillingCustomerOverrideUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingCustomerOverrideCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingCustomerOverrideCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingCustomerOverrideUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
