// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicemanuallineconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingInvoiceManualLineConfigUpdate is the builder for updating BillingInvoiceManualLineConfig entities.
type BillingInvoiceManualLineConfigUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceManualLineConfigMutation
}

// Where appends a list predicates to the BillingInvoiceManualLineConfigUpdate builder.
func (bimlcu *BillingInvoiceManualLineConfigUpdate) Where(ps ...predicate.BillingInvoiceManualLineConfig) *BillingInvoiceManualLineConfigUpdate {
	bimlcu.mutation.Where(ps...)
	return bimlcu
}

// SetUnitPrice sets the "unit_price" field.
func (bimlcu *BillingInvoiceManualLineConfigUpdate) SetUnitPrice(a alpacadecimal.Decimal) *BillingInvoiceManualLineConfigUpdate {
	bimlcu.mutation.SetUnitPrice(a)
	return bimlcu
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (bimlcu *BillingInvoiceManualLineConfigUpdate) SetNillableUnitPrice(a *alpacadecimal.Decimal) *BillingInvoiceManualLineConfigUpdate {
	if a != nil {
		bimlcu.SetUnitPrice(*a)
	}
	return bimlcu
}

// Mutation returns the BillingInvoiceManualLineConfigMutation object of the builder.
func (bimlcu *BillingInvoiceManualLineConfigUpdate) Mutation() *BillingInvoiceManualLineConfigMutation {
	return bimlcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bimlcu *BillingInvoiceManualLineConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bimlcu.sqlSave, bimlcu.mutation, bimlcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bimlcu *BillingInvoiceManualLineConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := bimlcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bimlcu *BillingInvoiceManualLineConfigUpdate) Exec(ctx context.Context) error {
	_, err := bimlcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bimlcu *BillingInvoiceManualLineConfigUpdate) ExecX(ctx context.Context) {
	if err := bimlcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bimlcu *BillingInvoiceManualLineConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(billinginvoicemanuallineconfig.Table, billinginvoicemanuallineconfig.Columns, sqlgraph.NewFieldSpec(billinginvoicemanuallineconfig.FieldID, field.TypeString))
	if ps := bimlcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bimlcu.mutation.UnitPrice(); ok {
		_spec.SetField(billinginvoicemanuallineconfig.FieldUnitPrice, field.TypeOther, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bimlcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicemanuallineconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bimlcu.mutation.done = true
	return n, nil
}

// BillingInvoiceManualLineConfigUpdateOne is the builder for updating a single BillingInvoiceManualLineConfig entity.
type BillingInvoiceManualLineConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceManualLineConfigMutation
}

// SetUnitPrice sets the "unit_price" field.
func (bimlcuo *BillingInvoiceManualLineConfigUpdateOne) SetUnitPrice(a alpacadecimal.Decimal) *BillingInvoiceManualLineConfigUpdateOne {
	bimlcuo.mutation.SetUnitPrice(a)
	return bimlcuo
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (bimlcuo *BillingInvoiceManualLineConfigUpdateOne) SetNillableUnitPrice(a *alpacadecimal.Decimal) *BillingInvoiceManualLineConfigUpdateOne {
	if a != nil {
		bimlcuo.SetUnitPrice(*a)
	}
	return bimlcuo
}

// Mutation returns the BillingInvoiceManualLineConfigMutation object of the builder.
func (bimlcuo *BillingInvoiceManualLineConfigUpdateOne) Mutation() *BillingInvoiceManualLineConfigMutation {
	return bimlcuo.mutation
}

// Where appends a list predicates to the BillingInvoiceManualLineConfigUpdate builder.
func (bimlcuo *BillingInvoiceManualLineConfigUpdateOne) Where(ps ...predicate.BillingInvoiceManualLineConfig) *BillingInvoiceManualLineConfigUpdateOne {
	bimlcuo.mutation.Where(ps...)
	return bimlcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bimlcuo *BillingInvoiceManualLineConfigUpdateOne) Select(field string, fields ...string) *BillingInvoiceManualLineConfigUpdateOne {
	bimlcuo.fields = append([]string{field}, fields...)
	return bimlcuo
}

// Save executes the query and returns the updated BillingInvoiceManualLineConfig entity.
func (bimlcuo *BillingInvoiceManualLineConfigUpdateOne) Save(ctx context.Context) (*BillingInvoiceManualLineConfig, error) {
	return withHooks(ctx, bimlcuo.sqlSave, bimlcuo.mutation, bimlcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bimlcuo *BillingInvoiceManualLineConfigUpdateOne) SaveX(ctx context.Context) *BillingInvoiceManualLineConfig {
	node, err := bimlcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bimlcuo *BillingInvoiceManualLineConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := bimlcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bimlcuo *BillingInvoiceManualLineConfigUpdateOne) ExecX(ctx context.Context) {
	if err := bimlcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bimlcuo *BillingInvoiceManualLineConfigUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoiceManualLineConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(billinginvoicemanuallineconfig.Table, billinginvoicemanuallineconfig.Columns, sqlgraph.NewFieldSpec(billinginvoicemanuallineconfig.FieldID, field.TypeString))
	id, ok := bimlcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoiceManualLineConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bimlcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoicemanuallineconfig.FieldID)
		for _, f := range fields {
			if !billinginvoicemanuallineconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoicemanuallineconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bimlcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bimlcuo.mutation.UnitPrice(); ok {
		_spec.SetField(billinginvoicemanuallineconfig.FieldUnitPrice, field.TypeOther, value)
	}
	_node = &BillingInvoiceManualLineConfig{config: bimlcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bimlcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicemanuallineconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bimlcuo.mutation.done = true
	return _node, nil
}
