// Code generated by ent, DO NOT EDIT.

package billinginvoicesplitlinegroup

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/pkg/currencyx"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContainsFold(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldNamespace, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldDescription, v))
}

// PeriodStart applies equality check predicate on the "period_start" field. It's identical to PeriodStartEQ.
func PeriodStart(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldPeriodStart, v))
}

// PeriodEnd applies equality check predicate on the "period_end" field. It's identical to PeriodEndEQ.
func PeriodEnd(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldPeriodEnd, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v currencyx.Code) predicate.BillingInvoiceSplitLineGroup {
	vc := string(v)
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldCurrency, vc))
}

// UniqueReferenceID applies equality check predicate on the "unique_reference_id" field. It's identical to UniqueReferenceIDEQ.
func UniqueReferenceID(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldUniqueReferenceID, v))
}

// SubscriptionID applies equality check predicate on the "subscription_id" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionPhaseID applies equality check predicate on the "subscription_phase_id" field. It's identical to SubscriptionPhaseIDEQ.
func SubscriptionPhaseID(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldSubscriptionPhaseID, v))
}

// SubscriptionItemID applies equality check predicate on the "subscription_item_id" field. It's identical to SubscriptionItemIDEQ.
func SubscriptionItemID(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldSubscriptionItemID, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContainsFold(FieldNamespace, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContainsFold(FieldDescription, v))
}

// PeriodStartEQ applies the EQ predicate on the "period_start" field.
func PeriodStartEQ(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldPeriodStart, v))
}

// PeriodStartNEQ applies the NEQ predicate on the "period_start" field.
func PeriodStartNEQ(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNEQ(FieldPeriodStart, v))
}

// PeriodStartIn applies the In predicate on the "period_start" field.
func PeriodStartIn(vs ...time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIn(FieldPeriodStart, vs...))
}

// PeriodStartNotIn applies the NotIn predicate on the "period_start" field.
func PeriodStartNotIn(vs ...time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotIn(FieldPeriodStart, vs...))
}

// PeriodStartGT applies the GT predicate on the "period_start" field.
func PeriodStartGT(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGT(FieldPeriodStart, v))
}

// PeriodStartGTE applies the GTE predicate on the "period_start" field.
func PeriodStartGTE(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGTE(FieldPeriodStart, v))
}

// PeriodStartLT applies the LT predicate on the "period_start" field.
func PeriodStartLT(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLT(FieldPeriodStart, v))
}

// PeriodStartLTE applies the LTE predicate on the "period_start" field.
func PeriodStartLTE(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLTE(FieldPeriodStart, v))
}

// PeriodEndEQ applies the EQ predicate on the "period_end" field.
func PeriodEndEQ(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldPeriodEnd, v))
}

// PeriodEndNEQ applies the NEQ predicate on the "period_end" field.
func PeriodEndNEQ(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNEQ(FieldPeriodEnd, v))
}

// PeriodEndIn applies the In predicate on the "period_end" field.
func PeriodEndIn(vs ...time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIn(FieldPeriodEnd, vs...))
}

// PeriodEndNotIn applies the NotIn predicate on the "period_end" field.
func PeriodEndNotIn(vs ...time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotIn(FieldPeriodEnd, vs...))
}

// PeriodEndGT applies the GT predicate on the "period_end" field.
func PeriodEndGT(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGT(FieldPeriodEnd, v))
}

// PeriodEndGTE applies the GTE predicate on the "period_end" field.
func PeriodEndGTE(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGTE(FieldPeriodEnd, v))
}

// PeriodEndLT applies the LT predicate on the "period_end" field.
func PeriodEndLT(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLT(FieldPeriodEnd, v))
}

// PeriodEndLTE applies the LTE predicate on the "period_end" field.
func PeriodEndLTE(v time.Time) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLTE(FieldPeriodEnd, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v currencyx.Code) predicate.BillingInvoiceSplitLineGroup {
	vc := string(v)
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldCurrency, vc))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v currencyx.Code) predicate.BillingInvoiceSplitLineGroup {
	vc := string(v)
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNEQ(FieldCurrency, vc))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...currencyx.Code) predicate.BillingInvoiceSplitLineGroup {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIn(FieldCurrency, v...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...currencyx.Code) predicate.BillingInvoiceSplitLineGroup {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotIn(FieldCurrency, v...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v currencyx.Code) predicate.BillingInvoiceSplitLineGroup {
	vc := string(v)
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGT(FieldCurrency, vc))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v currencyx.Code) predicate.BillingInvoiceSplitLineGroup {
	vc := string(v)
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGTE(FieldCurrency, vc))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v currencyx.Code) predicate.BillingInvoiceSplitLineGroup {
	vc := string(v)
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLT(FieldCurrency, vc))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v currencyx.Code) predicate.BillingInvoiceSplitLineGroup {
	vc := string(v)
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLTE(FieldCurrency, vc))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v currencyx.Code) predicate.BillingInvoiceSplitLineGroup {
	vc := string(v)
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContains(FieldCurrency, vc))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v currencyx.Code) predicate.BillingInvoiceSplitLineGroup {
	vc := string(v)
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldHasPrefix(FieldCurrency, vc))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v currencyx.Code) predicate.BillingInvoiceSplitLineGroup {
	vc := string(v)
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldHasSuffix(FieldCurrency, vc))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v currencyx.Code) predicate.BillingInvoiceSplitLineGroup {
	vc := string(v)
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEqualFold(FieldCurrency, vc))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v currencyx.Code) predicate.BillingInvoiceSplitLineGroup {
	vc := string(v)
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContainsFold(FieldCurrency, vc))
}

// TaxConfigIsNil applies the IsNil predicate on the "tax_config" field.
func TaxConfigIsNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIsNull(FieldTaxConfig))
}

// TaxConfigNotNil applies the NotNil predicate on the "tax_config" field.
func TaxConfigNotNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotNull(FieldTaxConfig))
}

// UniqueReferenceIDEQ applies the EQ predicate on the "unique_reference_id" field.
func UniqueReferenceIDEQ(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldUniqueReferenceID, v))
}

// UniqueReferenceIDNEQ applies the NEQ predicate on the "unique_reference_id" field.
func UniqueReferenceIDNEQ(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNEQ(FieldUniqueReferenceID, v))
}

// UniqueReferenceIDIn applies the In predicate on the "unique_reference_id" field.
func UniqueReferenceIDIn(vs ...string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIn(FieldUniqueReferenceID, vs...))
}

// UniqueReferenceIDNotIn applies the NotIn predicate on the "unique_reference_id" field.
func UniqueReferenceIDNotIn(vs ...string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotIn(FieldUniqueReferenceID, vs...))
}

// UniqueReferenceIDGT applies the GT predicate on the "unique_reference_id" field.
func UniqueReferenceIDGT(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGT(FieldUniqueReferenceID, v))
}

// UniqueReferenceIDGTE applies the GTE predicate on the "unique_reference_id" field.
func UniqueReferenceIDGTE(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGTE(FieldUniqueReferenceID, v))
}

// UniqueReferenceIDLT applies the LT predicate on the "unique_reference_id" field.
func UniqueReferenceIDLT(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLT(FieldUniqueReferenceID, v))
}

// UniqueReferenceIDLTE applies the LTE predicate on the "unique_reference_id" field.
func UniqueReferenceIDLTE(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLTE(FieldUniqueReferenceID, v))
}

// UniqueReferenceIDContains applies the Contains predicate on the "unique_reference_id" field.
func UniqueReferenceIDContains(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContains(FieldUniqueReferenceID, v))
}

// UniqueReferenceIDHasPrefix applies the HasPrefix predicate on the "unique_reference_id" field.
func UniqueReferenceIDHasPrefix(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldHasPrefix(FieldUniqueReferenceID, v))
}

// UniqueReferenceIDHasSuffix applies the HasSuffix predicate on the "unique_reference_id" field.
func UniqueReferenceIDHasSuffix(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldHasSuffix(FieldUniqueReferenceID, v))
}

// UniqueReferenceIDIsNil applies the IsNil predicate on the "unique_reference_id" field.
func UniqueReferenceIDIsNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIsNull(FieldUniqueReferenceID))
}

// UniqueReferenceIDNotNil applies the NotNil predicate on the "unique_reference_id" field.
func UniqueReferenceIDNotNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotNull(FieldUniqueReferenceID))
}

// UniqueReferenceIDEqualFold applies the EqualFold predicate on the "unique_reference_id" field.
func UniqueReferenceIDEqualFold(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEqualFold(FieldUniqueReferenceID, v))
}

// UniqueReferenceIDContainsFold applies the ContainsFold predicate on the "unique_reference_id" field.
func UniqueReferenceIDContainsFold(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContainsFold(FieldUniqueReferenceID, v))
}

// RatecardDiscountsIsNil applies the IsNil predicate on the "ratecard_discounts" field.
func RatecardDiscountsIsNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIsNull(FieldRatecardDiscounts))
}

// RatecardDiscountsNotNil applies the NotNil predicate on the "ratecard_discounts" field.
func RatecardDiscountsNotNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotNull(FieldRatecardDiscounts))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscription_id" field.
func SubscriptionIDEQ(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscription_id" field.
func SubscriptionIDNEQ(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscription_id" field.
func SubscriptionIDIn(vs ...string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscription_id" field.
func SubscriptionIDNotIn(vs ...string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDGT applies the GT predicate on the "subscription_id" field.
func SubscriptionIDGT(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGT(FieldSubscriptionID, v))
}

// SubscriptionIDGTE applies the GTE predicate on the "subscription_id" field.
func SubscriptionIDGTE(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGTE(FieldSubscriptionID, v))
}

// SubscriptionIDLT applies the LT predicate on the "subscription_id" field.
func SubscriptionIDLT(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLT(FieldSubscriptionID, v))
}

// SubscriptionIDLTE applies the LTE predicate on the "subscription_id" field.
func SubscriptionIDLTE(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLTE(FieldSubscriptionID, v))
}

// SubscriptionIDContains applies the Contains predicate on the "subscription_id" field.
func SubscriptionIDContains(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContains(FieldSubscriptionID, v))
}

// SubscriptionIDHasPrefix applies the HasPrefix predicate on the "subscription_id" field.
func SubscriptionIDHasPrefix(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldHasPrefix(FieldSubscriptionID, v))
}

// SubscriptionIDHasSuffix applies the HasSuffix predicate on the "subscription_id" field.
func SubscriptionIDHasSuffix(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldHasSuffix(FieldSubscriptionID, v))
}

// SubscriptionIDIsNil applies the IsNil predicate on the "subscription_id" field.
func SubscriptionIDIsNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIsNull(FieldSubscriptionID))
}

// SubscriptionIDNotNil applies the NotNil predicate on the "subscription_id" field.
func SubscriptionIDNotNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotNull(FieldSubscriptionID))
}

// SubscriptionIDEqualFold applies the EqualFold predicate on the "subscription_id" field.
func SubscriptionIDEqualFold(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEqualFold(FieldSubscriptionID, v))
}

// SubscriptionIDContainsFold applies the ContainsFold predicate on the "subscription_id" field.
func SubscriptionIDContainsFold(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContainsFold(FieldSubscriptionID, v))
}

// SubscriptionPhaseIDEQ applies the EQ predicate on the "subscription_phase_id" field.
func SubscriptionPhaseIDEQ(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldSubscriptionPhaseID, v))
}

// SubscriptionPhaseIDNEQ applies the NEQ predicate on the "subscription_phase_id" field.
func SubscriptionPhaseIDNEQ(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNEQ(FieldSubscriptionPhaseID, v))
}

// SubscriptionPhaseIDIn applies the In predicate on the "subscription_phase_id" field.
func SubscriptionPhaseIDIn(vs ...string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIn(FieldSubscriptionPhaseID, vs...))
}

// SubscriptionPhaseIDNotIn applies the NotIn predicate on the "subscription_phase_id" field.
func SubscriptionPhaseIDNotIn(vs ...string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotIn(FieldSubscriptionPhaseID, vs...))
}

// SubscriptionPhaseIDGT applies the GT predicate on the "subscription_phase_id" field.
func SubscriptionPhaseIDGT(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGT(FieldSubscriptionPhaseID, v))
}

// SubscriptionPhaseIDGTE applies the GTE predicate on the "subscription_phase_id" field.
func SubscriptionPhaseIDGTE(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGTE(FieldSubscriptionPhaseID, v))
}

// SubscriptionPhaseIDLT applies the LT predicate on the "subscription_phase_id" field.
func SubscriptionPhaseIDLT(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLT(FieldSubscriptionPhaseID, v))
}

// SubscriptionPhaseIDLTE applies the LTE predicate on the "subscription_phase_id" field.
func SubscriptionPhaseIDLTE(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLTE(FieldSubscriptionPhaseID, v))
}

// SubscriptionPhaseIDContains applies the Contains predicate on the "subscription_phase_id" field.
func SubscriptionPhaseIDContains(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContains(FieldSubscriptionPhaseID, v))
}

// SubscriptionPhaseIDHasPrefix applies the HasPrefix predicate on the "subscription_phase_id" field.
func SubscriptionPhaseIDHasPrefix(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldHasPrefix(FieldSubscriptionPhaseID, v))
}

// SubscriptionPhaseIDHasSuffix applies the HasSuffix predicate on the "subscription_phase_id" field.
func SubscriptionPhaseIDHasSuffix(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldHasSuffix(FieldSubscriptionPhaseID, v))
}

// SubscriptionPhaseIDIsNil applies the IsNil predicate on the "subscription_phase_id" field.
func SubscriptionPhaseIDIsNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIsNull(FieldSubscriptionPhaseID))
}

// SubscriptionPhaseIDNotNil applies the NotNil predicate on the "subscription_phase_id" field.
func SubscriptionPhaseIDNotNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotNull(FieldSubscriptionPhaseID))
}

// SubscriptionPhaseIDEqualFold applies the EqualFold predicate on the "subscription_phase_id" field.
func SubscriptionPhaseIDEqualFold(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEqualFold(FieldSubscriptionPhaseID, v))
}

// SubscriptionPhaseIDContainsFold applies the ContainsFold predicate on the "subscription_phase_id" field.
func SubscriptionPhaseIDContainsFold(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContainsFold(FieldSubscriptionPhaseID, v))
}

// SubscriptionItemIDEQ applies the EQ predicate on the "subscription_item_id" field.
func SubscriptionItemIDEQ(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEQ(FieldSubscriptionItemID, v))
}

// SubscriptionItemIDNEQ applies the NEQ predicate on the "subscription_item_id" field.
func SubscriptionItemIDNEQ(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNEQ(FieldSubscriptionItemID, v))
}

// SubscriptionItemIDIn applies the In predicate on the "subscription_item_id" field.
func SubscriptionItemIDIn(vs ...string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIn(FieldSubscriptionItemID, vs...))
}

// SubscriptionItemIDNotIn applies the NotIn predicate on the "subscription_item_id" field.
func SubscriptionItemIDNotIn(vs ...string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotIn(FieldSubscriptionItemID, vs...))
}

// SubscriptionItemIDGT applies the GT predicate on the "subscription_item_id" field.
func SubscriptionItemIDGT(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGT(FieldSubscriptionItemID, v))
}

// SubscriptionItemIDGTE applies the GTE predicate on the "subscription_item_id" field.
func SubscriptionItemIDGTE(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldGTE(FieldSubscriptionItemID, v))
}

// SubscriptionItemIDLT applies the LT predicate on the "subscription_item_id" field.
func SubscriptionItemIDLT(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLT(FieldSubscriptionItemID, v))
}

// SubscriptionItemIDLTE applies the LTE predicate on the "subscription_item_id" field.
func SubscriptionItemIDLTE(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldLTE(FieldSubscriptionItemID, v))
}

// SubscriptionItemIDContains applies the Contains predicate on the "subscription_item_id" field.
func SubscriptionItemIDContains(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContains(FieldSubscriptionItemID, v))
}

// SubscriptionItemIDHasPrefix applies the HasPrefix predicate on the "subscription_item_id" field.
func SubscriptionItemIDHasPrefix(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldHasPrefix(FieldSubscriptionItemID, v))
}

// SubscriptionItemIDHasSuffix applies the HasSuffix predicate on the "subscription_item_id" field.
func SubscriptionItemIDHasSuffix(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldHasSuffix(FieldSubscriptionItemID, v))
}

// SubscriptionItemIDIsNil applies the IsNil predicate on the "subscription_item_id" field.
func SubscriptionItemIDIsNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldIsNull(FieldSubscriptionItemID))
}

// SubscriptionItemIDNotNil applies the NotNil predicate on the "subscription_item_id" field.
func SubscriptionItemIDNotNil() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldNotNull(FieldSubscriptionItemID))
}

// SubscriptionItemIDEqualFold applies the EqualFold predicate on the "subscription_item_id" field.
func SubscriptionItemIDEqualFold(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldEqualFold(FieldSubscriptionItemID, v))
}

// SubscriptionItemIDContainsFold applies the ContainsFold predicate on the "subscription_item_id" field.
func SubscriptionItemIDContainsFold(v string) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.FieldContainsFold(FieldSubscriptionItemID, v))
}

// HasBillingInvoiceLines applies the HasEdge predicate on the "billing_invoice_lines" edge.
func HasBillingInvoiceLines() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BillingInvoiceLinesTable, BillingInvoiceLinesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBillingInvoiceLinesWith applies the HasEdge predicate on the "billing_invoice_lines" edge with a given conditions (other predicates).
func HasBillingInvoiceLinesWith(preds ...predicate.BillingInvoiceLine) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(func(s *sql.Selector) {
		step := newBillingInvoiceLinesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscription applies the HasEdge predicate on the "subscription" edge.
func HasSubscription() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionTable, SubscriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionWith applies the HasEdge predicate on the "subscription" edge with a given conditions (other predicates).
func HasSubscriptionWith(preds ...predicate.Subscription) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(func(s *sql.Selector) {
		step := newSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscriptionPhase applies the HasEdge predicate on the "subscription_phase" edge.
func HasSubscriptionPhase() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionPhaseTable, SubscriptionPhaseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionPhaseWith applies the HasEdge predicate on the "subscription_phase" edge with a given conditions (other predicates).
func HasSubscriptionPhaseWith(preds ...predicate.SubscriptionPhase) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(func(s *sql.Selector) {
		step := newSubscriptionPhaseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscriptionItem applies the HasEdge predicate on the "subscription_item" edge.
func HasSubscriptionItem() predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionItemTable, SubscriptionItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionItemWith applies the HasEdge predicate on the "subscription_item" edge with a given conditions (other predicates).
func HasSubscriptionItemWith(preds ...predicate.SubscriptionItem) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(func(s *sql.Selector) {
		step := newSubscriptionItemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BillingInvoiceSplitLineGroup) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BillingInvoiceSplitLineGroup) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BillingInvoiceSplitLineGroup) predicate.BillingInvoiceSplitLineGroup {
	return predicate.BillingInvoiceSplitLineGroup(sql.NotPredicates(p))
}
