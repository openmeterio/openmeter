// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/credit/grant"
	"github.com/openmeterio/openmeter/openmeter/ent/db/entitlement"
	dbgrant "github.com/openmeterio/openmeter/openmeter/ent/db/grant"
	"github.com/openmeterio/openmeter/pkg/datetime"
)

// GrantCreate is the builder for creating a Grant entity.
type GrantCreate struct {
	config
	mutation *GrantMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (_c *GrantCreate) SetNamespace(v string) *GrantCreate {
	_c.mutation.SetNamespace(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *GrantCreate) SetMetadata(v map[string]string) *GrantCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *GrantCreate) SetCreatedAt(v time.Time) *GrantCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *GrantCreate) SetNillableCreatedAt(v *time.Time) *GrantCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *GrantCreate) SetUpdatedAt(v time.Time) *GrantCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *GrantCreate) SetNillableUpdatedAt(v *time.Time) *GrantCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *GrantCreate) SetDeletedAt(v time.Time) *GrantCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *GrantCreate) SetNillableDeletedAt(v *time.Time) *GrantCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *GrantCreate) SetOwnerID(v string) *GrantCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetAmount sets the "amount" field.
func (_c *GrantCreate) SetAmount(v float64) *GrantCreate {
	_c.mutation.SetAmount(v)
	return _c
}

// SetPriority sets the "priority" field.
func (_c *GrantCreate) SetPriority(v uint8) *GrantCreate {
	_c.mutation.SetPriority(v)
	return _c
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_c *GrantCreate) SetNillablePriority(v *uint8) *GrantCreate {
	if v != nil {
		_c.SetPriority(*v)
	}
	return _c
}

// SetEffectiveAt sets the "effective_at" field.
func (_c *GrantCreate) SetEffectiveAt(v time.Time) *GrantCreate {
	_c.mutation.SetEffectiveAt(v)
	return _c
}

// SetExpiration sets the "expiration" field.
func (_c *GrantCreate) SetExpiration(v grant.ExpirationPeriod) *GrantCreate {
	_c.mutation.SetExpiration(v)
	return _c
}

// SetExpiresAt sets the "expires_at" field.
func (_c *GrantCreate) SetExpiresAt(v time.Time) *GrantCreate {
	_c.mutation.SetExpiresAt(v)
	return _c
}

// SetVoidedAt sets the "voided_at" field.
func (_c *GrantCreate) SetVoidedAt(v time.Time) *GrantCreate {
	_c.mutation.SetVoidedAt(v)
	return _c
}

// SetNillableVoidedAt sets the "voided_at" field if the given value is not nil.
func (_c *GrantCreate) SetNillableVoidedAt(v *time.Time) *GrantCreate {
	if v != nil {
		_c.SetVoidedAt(*v)
	}
	return _c
}

// SetResetMaxRollover sets the "reset_max_rollover" field.
func (_c *GrantCreate) SetResetMaxRollover(v float64) *GrantCreate {
	_c.mutation.SetResetMaxRollover(v)
	return _c
}

// SetResetMinRollover sets the "reset_min_rollover" field.
func (_c *GrantCreate) SetResetMinRollover(v float64) *GrantCreate {
	_c.mutation.SetResetMinRollover(v)
	return _c
}

// SetRecurrencePeriod sets the "recurrence_period" field.
func (_c *GrantCreate) SetRecurrencePeriod(v datetime.ISODurationString) *GrantCreate {
	_c.mutation.SetRecurrencePeriod(v)
	return _c
}

// SetNillableRecurrencePeriod sets the "recurrence_period" field if the given value is not nil.
func (_c *GrantCreate) SetNillableRecurrencePeriod(v *datetime.ISODurationString) *GrantCreate {
	if v != nil {
		_c.SetRecurrencePeriod(*v)
	}
	return _c
}

// SetRecurrenceAnchor sets the "recurrence_anchor" field.
func (_c *GrantCreate) SetRecurrenceAnchor(v time.Time) *GrantCreate {
	_c.mutation.SetRecurrenceAnchor(v)
	return _c
}

// SetNillableRecurrenceAnchor sets the "recurrence_anchor" field if the given value is not nil.
func (_c *GrantCreate) SetNillableRecurrenceAnchor(v *time.Time) *GrantCreate {
	if v != nil {
		_c.SetRecurrenceAnchor(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *GrantCreate) SetID(v string) *GrantCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *GrantCreate) SetNillableID(v *string) *GrantCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetEntitlementID sets the "entitlement" edge to the Entitlement entity by ID.
func (_c *GrantCreate) SetEntitlementID(id string) *GrantCreate {
	_c.mutation.SetEntitlementID(id)
	return _c
}

// SetEntitlement sets the "entitlement" edge to the Entitlement entity.
func (_c *GrantCreate) SetEntitlement(v *Entitlement) *GrantCreate {
	return _c.SetEntitlementID(v.ID)
}

// Mutation returns the GrantMutation object of the builder.
func (_c *GrantCreate) Mutation() *GrantMutation {
	return _c.mutation
}

// Save creates the Grant in the database.
func (_c *GrantCreate) Save(ctx context.Context) (*Grant, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *GrantCreate) SaveX(ctx context.Context) *Grant {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GrantCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GrantCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *GrantCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := dbgrant.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := dbgrant.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Priority(); !ok {
		v := dbgrant.DefaultPriority
		_c.mutation.SetPriority(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := dbgrant.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *GrantCreate) check() error {
	if _, ok := _c.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "Grant.namespace"`)}
	}
	if v, ok := _c.mutation.Namespace(); ok {
		if err := dbgrant.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "Grant.namespace": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Grant.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Grant.updated_at"`)}
	}
	if _, ok := _c.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`db: missing required field "Grant.owner_id"`)}
	}
	if _, ok := _c.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`db: missing required field "Grant.amount"`)}
	}
	if _, ok := _c.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`db: missing required field "Grant.priority"`)}
	}
	if _, ok := _c.mutation.EffectiveAt(); !ok {
		return &ValidationError{Name: "effective_at", err: errors.New(`db: missing required field "Grant.effective_at"`)}
	}
	if _, ok := _c.mutation.Expiration(); !ok {
		return &ValidationError{Name: "expiration", err: errors.New(`db: missing required field "Grant.expiration"`)}
	}
	if _, ok := _c.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`db: missing required field "Grant.expires_at"`)}
	}
	if _, ok := _c.mutation.ResetMaxRollover(); !ok {
		return &ValidationError{Name: "reset_max_rollover", err: errors.New(`db: missing required field "Grant.reset_max_rollover"`)}
	}
	if _, ok := _c.mutation.ResetMinRollover(); !ok {
		return &ValidationError{Name: "reset_min_rollover", err: errors.New(`db: missing required field "Grant.reset_min_rollover"`)}
	}
	if len(_c.mutation.EntitlementIDs()) == 0 {
		return &ValidationError{Name: "entitlement", err: errors.New(`db: missing required edge "Grant.entitlement"`)}
	}
	return nil
}

func (_c *GrantCreate) sqlSave(ctx context.Context) (*Grant, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Grant.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *GrantCreate) createSpec() (*Grant, *sqlgraph.CreateSpec) {
	var (
		_node = &Grant{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(dbgrant.Table, sqlgraph.NewFieldSpec(dbgrant.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Namespace(); ok {
		_spec.SetField(dbgrant.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(dbgrant.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(dbgrant.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(dbgrant.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(dbgrant.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.Amount(); ok {
		_spec.SetField(dbgrant.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := _c.mutation.Priority(); ok {
		_spec.SetField(dbgrant.FieldPriority, field.TypeUint8, value)
		_node.Priority = value
	}
	if value, ok := _c.mutation.EffectiveAt(); ok {
		_spec.SetField(dbgrant.FieldEffectiveAt, field.TypeTime, value)
		_node.EffectiveAt = value
	}
	if value, ok := _c.mutation.Expiration(); ok {
		_spec.SetField(dbgrant.FieldExpiration, field.TypeJSON, value)
		_node.Expiration = value
	}
	if value, ok := _c.mutation.ExpiresAt(); ok {
		_spec.SetField(dbgrant.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := _c.mutation.VoidedAt(); ok {
		_spec.SetField(dbgrant.FieldVoidedAt, field.TypeTime, value)
		_node.VoidedAt = &value
	}
	if value, ok := _c.mutation.ResetMaxRollover(); ok {
		_spec.SetField(dbgrant.FieldResetMaxRollover, field.TypeFloat64, value)
		_node.ResetMaxRollover = value
	}
	if value, ok := _c.mutation.ResetMinRollover(); ok {
		_spec.SetField(dbgrant.FieldResetMinRollover, field.TypeFloat64, value)
		_node.ResetMinRollover = value
	}
	if value, ok := _c.mutation.RecurrencePeriod(); ok {
		_spec.SetField(dbgrant.FieldRecurrencePeriod, field.TypeString, value)
		_node.RecurrencePeriod = &value
	}
	if value, ok := _c.mutation.RecurrenceAnchor(); ok {
		_spec.SetField(dbgrant.FieldRecurrenceAnchor, field.TypeTime, value)
		_node.RecurrenceAnchor = &value
	}
	if nodes := _c.mutation.EntitlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbgrant.EntitlementTable,
			Columns: []string{dbgrant.EntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Grant.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GrantUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *GrantCreate) OnConflict(opts ...sql.ConflictOption) *GrantUpsertOne {
	_c.conflict = opts
	return &GrantUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Grant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *GrantCreate) OnConflictColumns(columns ...string) *GrantUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &GrantUpsertOne{
		create: _c,
	}
}

type (
	// GrantUpsertOne is the builder for "upsert"-ing
	//  one Grant node.
	GrantUpsertOne struct {
		create *GrantCreate
	}

	// GrantUpsert is the "OnConflict" setter.
	GrantUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *GrantUpsert) SetMetadata(v map[string]string) *GrantUpsert {
	u.Set(dbgrant.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *GrantUpsert) UpdateMetadata() *GrantUpsert {
	u.SetExcluded(dbgrant.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *GrantUpsert) ClearMetadata() *GrantUpsert {
	u.SetNull(dbgrant.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GrantUpsert) SetUpdatedAt(v time.Time) *GrantUpsert {
	u.Set(dbgrant.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GrantUpsert) UpdateUpdatedAt() *GrantUpsert {
	u.SetExcluded(dbgrant.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GrantUpsert) SetDeletedAt(v time.Time) *GrantUpsert {
	u.Set(dbgrant.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GrantUpsert) UpdateDeletedAt() *GrantUpsert {
	u.SetExcluded(dbgrant.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GrantUpsert) ClearDeletedAt() *GrantUpsert {
	u.SetNull(dbgrant.FieldDeletedAt)
	return u
}

// SetVoidedAt sets the "voided_at" field.
func (u *GrantUpsert) SetVoidedAt(v time.Time) *GrantUpsert {
	u.Set(dbgrant.FieldVoidedAt, v)
	return u
}

// UpdateVoidedAt sets the "voided_at" field to the value that was provided on create.
func (u *GrantUpsert) UpdateVoidedAt() *GrantUpsert {
	u.SetExcluded(dbgrant.FieldVoidedAt)
	return u
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (u *GrantUpsert) ClearVoidedAt() *GrantUpsert {
	u.SetNull(dbgrant.FieldVoidedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Grant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dbgrant.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GrantUpsertOne) UpdateNewValues() *GrantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(dbgrant.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(dbgrant.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(dbgrant.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.OwnerID(); exists {
			s.SetIgnore(dbgrant.FieldOwnerID)
		}
		if _, exists := u.create.mutation.Amount(); exists {
			s.SetIgnore(dbgrant.FieldAmount)
		}
		if _, exists := u.create.mutation.Priority(); exists {
			s.SetIgnore(dbgrant.FieldPriority)
		}
		if _, exists := u.create.mutation.EffectiveAt(); exists {
			s.SetIgnore(dbgrant.FieldEffectiveAt)
		}
		if _, exists := u.create.mutation.Expiration(); exists {
			s.SetIgnore(dbgrant.FieldExpiration)
		}
		if _, exists := u.create.mutation.ExpiresAt(); exists {
			s.SetIgnore(dbgrant.FieldExpiresAt)
		}
		if _, exists := u.create.mutation.ResetMaxRollover(); exists {
			s.SetIgnore(dbgrant.FieldResetMaxRollover)
		}
		if _, exists := u.create.mutation.ResetMinRollover(); exists {
			s.SetIgnore(dbgrant.FieldResetMinRollover)
		}
		if _, exists := u.create.mutation.RecurrencePeriod(); exists {
			s.SetIgnore(dbgrant.FieldRecurrencePeriod)
		}
		if _, exists := u.create.mutation.RecurrenceAnchor(); exists {
			s.SetIgnore(dbgrant.FieldRecurrenceAnchor)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Grant.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GrantUpsertOne) Ignore() *GrantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GrantUpsertOne) DoNothing() *GrantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GrantCreate.OnConflict
// documentation for more info.
func (u *GrantUpsertOne) Update(set func(*GrantUpsert)) *GrantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GrantUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *GrantUpsertOne) SetMetadata(v map[string]string) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateMetadata() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *GrantUpsertOne) ClearMetadata() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GrantUpsertOne) SetUpdatedAt(v time.Time) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateUpdatedAt() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GrantUpsertOne) SetDeletedAt(v time.Time) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateDeletedAt() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GrantUpsertOne) ClearDeletedAt() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.ClearDeletedAt()
	})
}

// SetVoidedAt sets the "voided_at" field.
func (u *GrantUpsertOne) SetVoidedAt(v time.Time) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetVoidedAt(v)
	})
}

// UpdateVoidedAt sets the "voided_at" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateVoidedAt() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateVoidedAt()
	})
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (u *GrantUpsertOne) ClearVoidedAt() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.ClearVoidedAt()
	})
}

// Exec executes the query.
func (u *GrantUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for GrantCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GrantUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GrantUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: GrantUpsertOne.ID is not supported by MySQL driver. Use GrantUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GrantUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GrantCreateBulk is the builder for creating many Grant entities in bulk.
type GrantCreateBulk struct {
	config
	err      error
	builders []*GrantCreate
	conflict []sql.ConflictOption
}

// Save creates the Grant entities in the database.
func (_c *GrantCreateBulk) Save(ctx context.Context) ([]*Grant, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Grant, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GrantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *GrantCreateBulk) SaveX(ctx context.Context) []*Grant {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GrantCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GrantCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Grant.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GrantUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *GrantCreateBulk) OnConflict(opts ...sql.ConflictOption) *GrantUpsertBulk {
	_c.conflict = opts
	return &GrantUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Grant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *GrantCreateBulk) OnConflictColumns(columns ...string) *GrantUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &GrantUpsertBulk{
		create: _c,
	}
}

// GrantUpsertBulk is the builder for "upsert"-ing
// a bulk of Grant nodes.
type GrantUpsertBulk struct {
	create *GrantCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Grant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dbgrant.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GrantUpsertBulk) UpdateNewValues() *GrantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(dbgrant.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(dbgrant.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(dbgrant.FieldCreatedAt)
			}
			if _, exists := b.mutation.OwnerID(); exists {
				s.SetIgnore(dbgrant.FieldOwnerID)
			}
			if _, exists := b.mutation.Amount(); exists {
				s.SetIgnore(dbgrant.FieldAmount)
			}
			if _, exists := b.mutation.Priority(); exists {
				s.SetIgnore(dbgrant.FieldPriority)
			}
			if _, exists := b.mutation.EffectiveAt(); exists {
				s.SetIgnore(dbgrant.FieldEffectiveAt)
			}
			if _, exists := b.mutation.Expiration(); exists {
				s.SetIgnore(dbgrant.FieldExpiration)
			}
			if _, exists := b.mutation.ExpiresAt(); exists {
				s.SetIgnore(dbgrant.FieldExpiresAt)
			}
			if _, exists := b.mutation.ResetMaxRollover(); exists {
				s.SetIgnore(dbgrant.FieldResetMaxRollover)
			}
			if _, exists := b.mutation.ResetMinRollover(); exists {
				s.SetIgnore(dbgrant.FieldResetMinRollover)
			}
			if _, exists := b.mutation.RecurrencePeriod(); exists {
				s.SetIgnore(dbgrant.FieldRecurrencePeriod)
			}
			if _, exists := b.mutation.RecurrenceAnchor(); exists {
				s.SetIgnore(dbgrant.FieldRecurrenceAnchor)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Grant.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GrantUpsertBulk) Ignore() *GrantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GrantUpsertBulk) DoNothing() *GrantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GrantCreateBulk.OnConflict
// documentation for more info.
func (u *GrantUpsertBulk) Update(set func(*GrantUpsert)) *GrantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GrantUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *GrantUpsertBulk) SetMetadata(v map[string]string) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateMetadata() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *GrantUpsertBulk) ClearMetadata() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GrantUpsertBulk) SetUpdatedAt(v time.Time) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateUpdatedAt() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GrantUpsertBulk) SetDeletedAt(v time.Time) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateDeletedAt() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GrantUpsertBulk) ClearDeletedAt() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.ClearDeletedAt()
	})
}

// SetVoidedAt sets the "voided_at" field.
func (u *GrantUpsertBulk) SetVoidedAt(v time.Time) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetVoidedAt(v)
	})
}

// UpdateVoidedAt sets the "voided_at" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateVoidedAt() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateVoidedAt()
	})
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (u *GrantUpsertBulk) ClearVoidedAt() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.ClearVoidedAt()
	})
}

// Exec executes the query.
func (u *GrantUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the GrantCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for GrantCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GrantUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
