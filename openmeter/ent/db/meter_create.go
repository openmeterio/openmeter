// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	dbmeter "github.com/openmeterio/openmeter/openmeter/ent/db/meter"
	"github.com/openmeterio/openmeter/openmeter/meter"
)

// MeterCreate is the builder for creating a Meter entity.
type MeterCreate struct {
	config
	mutation *MeterMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (_c *MeterCreate) SetNamespace(v string) *MeterCreate {
	_c.mutation.SetNamespace(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *MeterCreate) SetMetadata(v map[string]string) *MeterCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *MeterCreate) SetCreatedAt(v time.Time) *MeterCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *MeterCreate) SetNillableCreatedAt(v *time.Time) *MeterCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *MeterCreate) SetUpdatedAt(v time.Time) *MeterCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *MeterCreate) SetNillableUpdatedAt(v *time.Time) *MeterCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *MeterCreate) SetDeletedAt(v time.Time) *MeterCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *MeterCreate) SetNillableDeletedAt(v *time.Time) *MeterCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *MeterCreate) SetName(v string) *MeterCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *MeterCreate) SetDescription(v string) *MeterCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *MeterCreate) SetNillableDescription(v *string) *MeterCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetKey sets the "key" field.
func (_c *MeterCreate) SetKey(v string) *MeterCreate {
	_c.mutation.SetKey(v)
	return _c
}

// SetEventType sets the "event_type" field.
func (_c *MeterCreate) SetEventType(v string) *MeterCreate {
	_c.mutation.SetEventType(v)
	return _c
}

// SetValueProperty sets the "value_property" field.
func (_c *MeterCreate) SetValueProperty(v string) *MeterCreate {
	_c.mutation.SetValueProperty(v)
	return _c
}

// SetNillableValueProperty sets the "value_property" field if the given value is not nil.
func (_c *MeterCreate) SetNillableValueProperty(v *string) *MeterCreate {
	if v != nil {
		_c.SetValueProperty(*v)
	}
	return _c
}

// SetGroupBy sets the "group_by" field.
func (_c *MeterCreate) SetGroupBy(v map[string]string) *MeterCreate {
	_c.mutation.SetGroupBy(v)
	return _c
}

// SetAggregation sets the "aggregation" field.
func (_c *MeterCreate) SetAggregation(v meter.MeterAggregation) *MeterCreate {
	_c.mutation.SetAggregation(v)
	return _c
}

// SetEventFrom sets the "event_from" field.
func (_c *MeterCreate) SetEventFrom(v time.Time) *MeterCreate {
	_c.mutation.SetEventFrom(v)
	return _c
}

// SetNillableEventFrom sets the "event_from" field if the given value is not nil.
func (_c *MeterCreate) SetNillableEventFrom(v *time.Time) *MeterCreate {
	if v != nil {
		_c.SetEventFrom(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *MeterCreate) SetID(v string) *MeterCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *MeterCreate) SetNillableID(v *string) *MeterCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the MeterMutation object of the builder.
func (_c *MeterCreate) Mutation() *MeterMutation {
	return _c.mutation
}

// Save creates the Meter in the database.
func (_c *MeterCreate) Save(ctx context.Context) (*Meter, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *MeterCreate) SaveX(ctx context.Context) *Meter {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MeterCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MeterCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *MeterCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := dbmeter.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := dbmeter.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := dbmeter.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *MeterCreate) check() error {
	if _, ok := _c.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "Meter.namespace"`)}
	}
	if v, ok := _c.mutation.Namespace(); ok {
		if err := dbmeter.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "Meter.namespace": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Meter.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Meter.updated_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "Meter.name"`)}
	}
	if _, ok := _c.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`db: missing required field "Meter.key"`)}
	}
	if v, ok := _c.mutation.Key(); ok {
		if err := dbmeter.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`db: validator failed for field "Meter.key": %w`, err)}
		}
	}
	if _, ok := _c.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`db: missing required field "Meter.event_type"`)}
	}
	if v, ok := _c.mutation.EventType(); ok {
		if err := dbmeter.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`db: validator failed for field "Meter.event_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Aggregation(); !ok {
		return &ValidationError{Name: "aggregation", err: errors.New(`db: missing required field "Meter.aggregation"`)}
	}
	if v, ok := _c.mutation.Aggregation(); ok {
		if err := dbmeter.AggregationValidator(v); err != nil {
			return &ValidationError{Name: "aggregation", err: fmt.Errorf(`db: validator failed for field "Meter.aggregation": %w`, err)}
		}
	}
	return nil
}

func (_c *MeterCreate) sqlSave(ctx context.Context) (*Meter, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Meter.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *MeterCreate) createSpec() (*Meter, *sqlgraph.CreateSpec) {
	var (
		_node = &Meter{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(dbmeter.Table, sqlgraph.NewFieldSpec(dbmeter.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Namespace(); ok {
		_spec.SetField(dbmeter.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(dbmeter.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(dbmeter.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(dbmeter.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(dbmeter.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(dbmeter.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(dbmeter.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.Key(); ok {
		_spec.SetField(dbmeter.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := _c.mutation.EventType(); ok {
		_spec.SetField(dbmeter.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := _c.mutation.ValueProperty(); ok {
		_spec.SetField(dbmeter.FieldValueProperty, field.TypeString, value)
		_node.ValueProperty = &value
	}
	if value, ok := _c.mutation.GroupBy(); ok {
		_spec.SetField(dbmeter.FieldGroupBy, field.TypeJSON, value)
		_node.GroupBy = value
	}
	if value, ok := _c.mutation.Aggregation(); ok {
		_spec.SetField(dbmeter.FieldAggregation, field.TypeEnum, value)
		_node.Aggregation = value
	}
	if value, ok := _c.mutation.EventFrom(); ok {
		_spec.SetField(dbmeter.FieldEventFrom, field.TypeTime, value)
		_node.EventFrom = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Meter.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MeterUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *MeterCreate) OnConflict(opts ...sql.ConflictOption) *MeterUpsertOne {
	_c.conflict = opts
	return &MeterUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Meter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *MeterCreate) OnConflictColumns(columns ...string) *MeterUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &MeterUpsertOne{
		create: _c,
	}
}

type (
	// MeterUpsertOne is the builder for "upsert"-ing
	//  one Meter node.
	MeterUpsertOne struct {
		create *MeterCreate
	}

	// MeterUpsert is the "OnConflict" setter.
	MeterUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *MeterUpsert) SetMetadata(v map[string]string) *MeterUpsert {
	u.Set(dbmeter.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *MeterUpsert) UpdateMetadata() *MeterUpsert {
	u.SetExcluded(dbmeter.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *MeterUpsert) ClearMetadata() *MeterUpsert {
	u.SetNull(dbmeter.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MeterUpsert) SetUpdatedAt(v time.Time) *MeterUpsert {
	u.Set(dbmeter.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MeterUpsert) UpdateUpdatedAt() *MeterUpsert {
	u.SetExcluded(dbmeter.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MeterUpsert) SetDeletedAt(v time.Time) *MeterUpsert {
	u.Set(dbmeter.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MeterUpsert) UpdateDeletedAt() *MeterUpsert {
	u.SetExcluded(dbmeter.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *MeterUpsert) ClearDeletedAt() *MeterUpsert {
	u.SetNull(dbmeter.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *MeterUpsert) SetName(v string) *MeterUpsert {
	u.Set(dbmeter.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MeterUpsert) UpdateName() *MeterUpsert {
	u.SetExcluded(dbmeter.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *MeterUpsert) SetDescription(v string) *MeterUpsert {
	u.Set(dbmeter.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MeterUpsert) UpdateDescription() *MeterUpsert {
	u.SetExcluded(dbmeter.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *MeterUpsert) ClearDescription() *MeterUpsert {
	u.SetNull(dbmeter.FieldDescription)
	return u
}

// SetValueProperty sets the "value_property" field.
func (u *MeterUpsert) SetValueProperty(v string) *MeterUpsert {
	u.Set(dbmeter.FieldValueProperty, v)
	return u
}

// UpdateValueProperty sets the "value_property" field to the value that was provided on create.
func (u *MeterUpsert) UpdateValueProperty() *MeterUpsert {
	u.SetExcluded(dbmeter.FieldValueProperty)
	return u
}

// ClearValueProperty clears the value of the "value_property" field.
func (u *MeterUpsert) ClearValueProperty() *MeterUpsert {
	u.SetNull(dbmeter.FieldValueProperty)
	return u
}

// SetGroupBy sets the "group_by" field.
func (u *MeterUpsert) SetGroupBy(v map[string]string) *MeterUpsert {
	u.Set(dbmeter.FieldGroupBy, v)
	return u
}

// UpdateGroupBy sets the "group_by" field to the value that was provided on create.
func (u *MeterUpsert) UpdateGroupBy() *MeterUpsert {
	u.SetExcluded(dbmeter.FieldGroupBy)
	return u
}

// ClearGroupBy clears the value of the "group_by" field.
func (u *MeterUpsert) ClearGroupBy() *MeterUpsert {
	u.SetNull(dbmeter.FieldGroupBy)
	return u
}

// SetEventFrom sets the "event_from" field.
func (u *MeterUpsert) SetEventFrom(v time.Time) *MeterUpsert {
	u.Set(dbmeter.FieldEventFrom, v)
	return u
}

// UpdateEventFrom sets the "event_from" field to the value that was provided on create.
func (u *MeterUpsert) UpdateEventFrom() *MeterUpsert {
	u.SetExcluded(dbmeter.FieldEventFrom)
	return u
}

// ClearEventFrom clears the value of the "event_from" field.
func (u *MeterUpsert) ClearEventFrom() *MeterUpsert {
	u.SetNull(dbmeter.FieldEventFrom)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Meter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dbmeter.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MeterUpsertOne) UpdateNewValues() *MeterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(dbmeter.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(dbmeter.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(dbmeter.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Key(); exists {
			s.SetIgnore(dbmeter.FieldKey)
		}
		if _, exists := u.create.mutation.EventType(); exists {
			s.SetIgnore(dbmeter.FieldEventType)
		}
		if _, exists := u.create.mutation.Aggregation(); exists {
			s.SetIgnore(dbmeter.FieldAggregation)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Meter.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MeterUpsertOne) Ignore() *MeterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MeterUpsertOne) DoNothing() *MeterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MeterCreate.OnConflict
// documentation for more info.
func (u *MeterUpsertOne) Update(set func(*MeterUpsert)) *MeterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MeterUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *MeterUpsertOne) SetMetadata(v map[string]string) *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *MeterUpsertOne) UpdateMetadata() *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *MeterUpsertOne) ClearMetadata() *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MeterUpsertOne) SetUpdatedAt(v time.Time) *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MeterUpsertOne) UpdateUpdatedAt() *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MeterUpsertOne) SetDeletedAt(v time.Time) *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MeterUpsertOne) UpdateDeletedAt() *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *MeterUpsertOne) ClearDeletedAt() *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *MeterUpsertOne) SetName(v string) *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MeterUpsertOne) UpdateName() *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *MeterUpsertOne) SetDescription(v string) *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MeterUpsertOne) UpdateDescription() *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *MeterUpsertOne) ClearDescription() *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.ClearDescription()
	})
}

// SetValueProperty sets the "value_property" field.
func (u *MeterUpsertOne) SetValueProperty(v string) *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.SetValueProperty(v)
	})
}

// UpdateValueProperty sets the "value_property" field to the value that was provided on create.
func (u *MeterUpsertOne) UpdateValueProperty() *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.UpdateValueProperty()
	})
}

// ClearValueProperty clears the value of the "value_property" field.
func (u *MeterUpsertOne) ClearValueProperty() *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.ClearValueProperty()
	})
}

// SetGroupBy sets the "group_by" field.
func (u *MeterUpsertOne) SetGroupBy(v map[string]string) *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.SetGroupBy(v)
	})
}

// UpdateGroupBy sets the "group_by" field to the value that was provided on create.
func (u *MeterUpsertOne) UpdateGroupBy() *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.UpdateGroupBy()
	})
}

// ClearGroupBy clears the value of the "group_by" field.
func (u *MeterUpsertOne) ClearGroupBy() *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.ClearGroupBy()
	})
}

// SetEventFrom sets the "event_from" field.
func (u *MeterUpsertOne) SetEventFrom(v time.Time) *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.SetEventFrom(v)
	})
}

// UpdateEventFrom sets the "event_from" field to the value that was provided on create.
func (u *MeterUpsertOne) UpdateEventFrom() *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.UpdateEventFrom()
	})
}

// ClearEventFrom clears the value of the "event_from" field.
func (u *MeterUpsertOne) ClearEventFrom() *MeterUpsertOne {
	return u.Update(func(s *MeterUpsert) {
		s.ClearEventFrom()
	})
}

// Exec executes the query.
func (u *MeterUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for MeterCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MeterUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MeterUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: MeterUpsertOne.ID is not supported by MySQL driver. Use MeterUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MeterUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MeterCreateBulk is the builder for creating many Meter entities in bulk.
type MeterCreateBulk struct {
	config
	err      error
	builders []*MeterCreate
	conflict []sql.ConflictOption
}

// Save creates the Meter entities in the database.
func (_c *MeterCreateBulk) Save(ctx context.Context) ([]*Meter, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Meter, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MeterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *MeterCreateBulk) SaveX(ctx context.Context) []*Meter {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MeterCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MeterCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Meter.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MeterUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *MeterCreateBulk) OnConflict(opts ...sql.ConflictOption) *MeterUpsertBulk {
	_c.conflict = opts
	return &MeterUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Meter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *MeterCreateBulk) OnConflictColumns(columns ...string) *MeterUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &MeterUpsertBulk{
		create: _c,
	}
}

// MeterUpsertBulk is the builder for "upsert"-ing
// a bulk of Meter nodes.
type MeterUpsertBulk struct {
	create *MeterCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Meter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dbmeter.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MeterUpsertBulk) UpdateNewValues() *MeterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(dbmeter.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(dbmeter.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(dbmeter.FieldCreatedAt)
			}
			if _, exists := b.mutation.Key(); exists {
				s.SetIgnore(dbmeter.FieldKey)
			}
			if _, exists := b.mutation.EventType(); exists {
				s.SetIgnore(dbmeter.FieldEventType)
			}
			if _, exists := b.mutation.Aggregation(); exists {
				s.SetIgnore(dbmeter.FieldAggregation)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Meter.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MeterUpsertBulk) Ignore() *MeterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MeterUpsertBulk) DoNothing() *MeterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MeterCreateBulk.OnConflict
// documentation for more info.
func (u *MeterUpsertBulk) Update(set func(*MeterUpsert)) *MeterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MeterUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *MeterUpsertBulk) SetMetadata(v map[string]string) *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *MeterUpsertBulk) UpdateMetadata() *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *MeterUpsertBulk) ClearMetadata() *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MeterUpsertBulk) SetUpdatedAt(v time.Time) *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MeterUpsertBulk) UpdateUpdatedAt() *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MeterUpsertBulk) SetDeletedAt(v time.Time) *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MeterUpsertBulk) UpdateDeletedAt() *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *MeterUpsertBulk) ClearDeletedAt() *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *MeterUpsertBulk) SetName(v string) *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MeterUpsertBulk) UpdateName() *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *MeterUpsertBulk) SetDescription(v string) *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MeterUpsertBulk) UpdateDescription() *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *MeterUpsertBulk) ClearDescription() *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.ClearDescription()
	})
}

// SetValueProperty sets the "value_property" field.
func (u *MeterUpsertBulk) SetValueProperty(v string) *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.SetValueProperty(v)
	})
}

// UpdateValueProperty sets the "value_property" field to the value that was provided on create.
func (u *MeterUpsertBulk) UpdateValueProperty() *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.UpdateValueProperty()
	})
}

// ClearValueProperty clears the value of the "value_property" field.
func (u *MeterUpsertBulk) ClearValueProperty() *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.ClearValueProperty()
	})
}

// SetGroupBy sets the "group_by" field.
func (u *MeterUpsertBulk) SetGroupBy(v map[string]string) *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.SetGroupBy(v)
	})
}

// UpdateGroupBy sets the "group_by" field to the value that was provided on create.
func (u *MeterUpsertBulk) UpdateGroupBy() *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.UpdateGroupBy()
	})
}

// ClearGroupBy clears the value of the "group_by" field.
func (u *MeterUpsertBulk) ClearGroupBy() *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.ClearGroupBy()
	})
}

// SetEventFrom sets the "event_from" field.
func (u *MeterUpsertBulk) SetEventFrom(v time.Time) *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.SetEventFrom(v)
	})
}

// UpdateEventFrom sets the "event_from" field to the value that was provided on create.
func (u *MeterUpsertBulk) UpdateEventFrom() *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.UpdateEventFrom()
	})
}

// ClearEventFrom clears the value of the "event_from" field.
func (u *MeterUpsertBulk) ClearEventFrom() *MeterUpsertBulk {
	return u.Update(func(s *MeterUpsert) {
		s.ClearEventFrom()
	})
}

// Exec executes the query.
func (u *MeterUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the MeterCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for MeterCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MeterUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
