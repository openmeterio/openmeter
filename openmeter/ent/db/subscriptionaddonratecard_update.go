// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonratecarditemlink"
)

// SubscriptionAddonRateCardUpdate is the builder for updating SubscriptionAddonRateCard entities.
type SubscriptionAddonRateCardUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionAddonRateCardMutation
}

// Where appends a list predicates to the SubscriptionAddonRateCardUpdate builder.
func (sarcu *SubscriptionAddonRateCardUpdate) Where(ps ...predicate.SubscriptionAddonRateCard) *SubscriptionAddonRateCardUpdate {
	sarcu.mutation.Where(ps...)
	return sarcu
}

// SetUpdatedAt sets the "updated_at" field.
func (sarcu *SubscriptionAddonRateCardUpdate) SetUpdatedAt(t time.Time) *SubscriptionAddonRateCardUpdate {
	sarcu.mutation.SetUpdatedAt(t)
	return sarcu
}

// SetDeletedAt sets the "deleted_at" field.
func (sarcu *SubscriptionAddonRateCardUpdate) SetDeletedAt(t time.Time) *SubscriptionAddonRateCardUpdate {
	sarcu.mutation.SetDeletedAt(t)
	return sarcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sarcu *SubscriptionAddonRateCardUpdate) SetNillableDeletedAt(t *time.Time) *SubscriptionAddonRateCardUpdate {
	if t != nil {
		sarcu.SetDeletedAt(*t)
	}
	return sarcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sarcu *SubscriptionAddonRateCardUpdate) ClearDeletedAt() *SubscriptionAddonRateCardUpdate {
	sarcu.mutation.ClearDeletedAt()
	return sarcu
}

// SetMetadata sets the "metadata" field.
func (sarcu *SubscriptionAddonRateCardUpdate) SetMetadata(m map[string]string) *SubscriptionAddonRateCardUpdate {
	sarcu.mutation.SetMetadata(m)
	return sarcu
}

// ClearMetadata clears the value of the "metadata" field.
func (sarcu *SubscriptionAddonRateCardUpdate) ClearMetadata() *SubscriptionAddonRateCardUpdate {
	sarcu.mutation.ClearMetadata()
	return sarcu
}

// AddItemIDs adds the "items" edge to the SubscriptionAddonRateCardItemLink entity by IDs.
func (sarcu *SubscriptionAddonRateCardUpdate) AddItemIDs(ids ...string) *SubscriptionAddonRateCardUpdate {
	sarcu.mutation.AddItemIDs(ids...)
	return sarcu
}

// AddItems adds the "items" edges to the SubscriptionAddonRateCardItemLink entity.
func (sarcu *SubscriptionAddonRateCardUpdate) AddItems(s ...*SubscriptionAddonRateCardItemLink) *SubscriptionAddonRateCardUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sarcu.AddItemIDs(ids...)
}

// Mutation returns the SubscriptionAddonRateCardMutation object of the builder.
func (sarcu *SubscriptionAddonRateCardUpdate) Mutation() *SubscriptionAddonRateCardMutation {
	return sarcu.mutation
}

// ClearItems clears all "items" edges to the SubscriptionAddonRateCardItemLink entity.
func (sarcu *SubscriptionAddonRateCardUpdate) ClearItems() *SubscriptionAddonRateCardUpdate {
	sarcu.mutation.ClearItems()
	return sarcu
}

// RemoveItemIDs removes the "items" edge to SubscriptionAddonRateCardItemLink entities by IDs.
func (sarcu *SubscriptionAddonRateCardUpdate) RemoveItemIDs(ids ...string) *SubscriptionAddonRateCardUpdate {
	sarcu.mutation.RemoveItemIDs(ids...)
	return sarcu
}

// RemoveItems removes "items" edges to SubscriptionAddonRateCardItemLink entities.
func (sarcu *SubscriptionAddonRateCardUpdate) RemoveItems(s ...*SubscriptionAddonRateCardItemLink) *SubscriptionAddonRateCardUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sarcu.RemoveItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sarcu *SubscriptionAddonRateCardUpdate) Save(ctx context.Context) (int, error) {
	sarcu.defaults()
	return withHooks(ctx, sarcu.sqlSave, sarcu.mutation, sarcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sarcu *SubscriptionAddonRateCardUpdate) SaveX(ctx context.Context) int {
	affected, err := sarcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sarcu *SubscriptionAddonRateCardUpdate) Exec(ctx context.Context) error {
	_, err := sarcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sarcu *SubscriptionAddonRateCardUpdate) ExecX(ctx context.Context) {
	if err := sarcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sarcu *SubscriptionAddonRateCardUpdate) defaults() {
	if _, ok := sarcu.mutation.UpdatedAt(); !ok {
		v := subscriptionaddonratecard.UpdateDefaultUpdatedAt()
		sarcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sarcu *SubscriptionAddonRateCardUpdate) check() error {
	if sarcu.mutation.SubscriptionAddonCleared() && len(sarcu.mutation.SubscriptionAddonIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionAddonRateCard.subscription_addon"`)
	}
	if sarcu.mutation.AddonRatecardCleared() && len(sarcu.mutation.AddonRatecardIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionAddonRateCard.addon_ratecard"`)
	}
	return nil
}

func (sarcu *SubscriptionAddonRateCardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sarcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionaddonratecard.Table, subscriptionaddonratecard.Columns, sqlgraph.NewFieldSpec(subscriptionaddonratecard.FieldID, field.TypeString))
	if ps := sarcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sarcu.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionaddonratecard.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sarcu.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionaddonratecard.FieldDeletedAt, field.TypeTime, value)
	}
	if sarcu.mutation.DeletedAtCleared() {
		_spec.ClearField(subscriptionaddonratecard.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sarcu.mutation.Metadata(); ok {
		_spec.SetField(subscriptionaddonratecard.FieldMetadata, field.TypeJSON, value)
	}
	if sarcu.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionaddonratecard.FieldMetadata, field.TypeJSON)
	}
	if sarcu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionaddonratecard.ItemsTable,
			Columns: []string{subscriptionaddonratecard.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonratecarditemlink.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sarcu.mutation.RemovedItemsIDs(); len(nodes) > 0 && !sarcu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionaddonratecard.ItemsTable,
			Columns: []string{subscriptionaddonratecard.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonratecarditemlink.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sarcu.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionaddonratecard.ItemsTable,
			Columns: []string{subscriptionaddonratecard.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonratecarditemlink.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sarcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionaddonratecard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sarcu.mutation.done = true
	return n, nil
}

// SubscriptionAddonRateCardUpdateOne is the builder for updating a single SubscriptionAddonRateCard entity.
type SubscriptionAddonRateCardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionAddonRateCardMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionAddonRateCardUpdateOne {
	sarcuo.mutation.SetUpdatedAt(t)
	return sarcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) SetDeletedAt(t time.Time) *SubscriptionAddonRateCardUpdateOne {
	sarcuo.mutation.SetDeletedAt(t)
	return sarcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) SetNillableDeletedAt(t *time.Time) *SubscriptionAddonRateCardUpdateOne {
	if t != nil {
		sarcuo.SetDeletedAt(*t)
	}
	return sarcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) ClearDeletedAt() *SubscriptionAddonRateCardUpdateOne {
	sarcuo.mutation.ClearDeletedAt()
	return sarcuo
}

// SetMetadata sets the "metadata" field.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) SetMetadata(m map[string]string) *SubscriptionAddonRateCardUpdateOne {
	sarcuo.mutation.SetMetadata(m)
	return sarcuo
}

// ClearMetadata clears the value of the "metadata" field.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) ClearMetadata() *SubscriptionAddonRateCardUpdateOne {
	sarcuo.mutation.ClearMetadata()
	return sarcuo
}

// AddItemIDs adds the "items" edge to the SubscriptionAddonRateCardItemLink entity by IDs.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) AddItemIDs(ids ...string) *SubscriptionAddonRateCardUpdateOne {
	sarcuo.mutation.AddItemIDs(ids...)
	return sarcuo
}

// AddItems adds the "items" edges to the SubscriptionAddonRateCardItemLink entity.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) AddItems(s ...*SubscriptionAddonRateCardItemLink) *SubscriptionAddonRateCardUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sarcuo.AddItemIDs(ids...)
}

// Mutation returns the SubscriptionAddonRateCardMutation object of the builder.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) Mutation() *SubscriptionAddonRateCardMutation {
	return sarcuo.mutation
}

// ClearItems clears all "items" edges to the SubscriptionAddonRateCardItemLink entity.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) ClearItems() *SubscriptionAddonRateCardUpdateOne {
	sarcuo.mutation.ClearItems()
	return sarcuo
}

// RemoveItemIDs removes the "items" edge to SubscriptionAddonRateCardItemLink entities by IDs.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) RemoveItemIDs(ids ...string) *SubscriptionAddonRateCardUpdateOne {
	sarcuo.mutation.RemoveItemIDs(ids...)
	return sarcuo
}

// RemoveItems removes "items" edges to SubscriptionAddonRateCardItemLink entities.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) RemoveItems(s ...*SubscriptionAddonRateCardItemLink) *SubscriptionAddonRateCardUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sarcuo.RemoveItemIDs(ids...)
}

// Where appends a list predicates to the SubscriptionAddonRateCardUpdate builder.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) Where(ps ...predicate.SubscriptionAddonRateCard) *SubscriptionAddonRateCardUpdateOne {
	sarcuo.mutation.Where(ps...)
	return sarcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) Select(field string, fields ...string) *SubscriptionAddonRateCardUpdateOne {
	sarcuo.fields = append([]string{field}, fields...)
	return sarcuo
}

// Save executes the query and returns the updated SubscriptionAddonRateCard entity.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) Save(ctx context.Context) (*SubscriptionAddonRateCard, error) {
	sarcuo.defaults()
	return withHooks(ctx, sarcuo.sqlSave, sarcuo.mutation, sarcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) SaveX(ctx context.Context) *SubscriptionAddonRateCard {
	node, err := sarcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) Exec(ctx context.Context) error {
	_, err := sarcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) ExecX(ctx context.Context) {
	if err := sarcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) defaults() {
	if _, ok := sarcuo.mutation.UpdatedAt(); !ok {
		v := subscriptionaddonratecard.UpdateDefaultUpdatedAt()
		sarcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sarcuo *SubscriptionAddonRateCardUpdateOne) check() error {
	if sarcuo.mutation.SubscriptionAddonCleared() && len(sarcuo.mutation.SubscriptionAddonIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionAddonRateCard.subscription_addon"`)
	}
	if sarcuo.mutation.AddonRatecardCleared() && len(sarcuo.mutation.AddonRatecardIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionAddonRateCard.addon_ratecard"`)
	}
	return nil
}

func (sarcuo *SubscriptionAddonRateCardUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionAddonRateCard, err error) {
	if err := sarcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionaddonratecard.Table, subscriptionaddonratecard.Columns, sqlgraph.NewFieldSpec(subscriptionaddonratecard.FieldID, field.TypeString))
	id, ok := sarcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "SubscriptionAddonRateCard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sarcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionaddonratecard.FieldID)
		for _, f := range fields {
			if !subscriptionaddonratecard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != subscriptionaddonratecard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sarcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sarcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionaddonratecard.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sarcuo.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionaddonratecard.FieldDeletedAt, field.TypeTime, value)
	}
	if sarcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(subscriptionaddonratecard.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sarcuo.mutation.Metadata(); ok {
		_spec.SetField(subscriptionaddonratecard.FieldMetadata, field.TypeJSON, value)
	}
	if sarcuo.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionaddonratecard.FieldMetadata, field.TypeJSON)
	}
	if sarcuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionaddonratecard.ItemsTable,
			Columns: []string{subscriptionaddonratecard.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonratecarditemlink.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sarcuo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !sarcuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionaddonratecard.ItemsTable,
			Columns: []string{subscriptionaddonratecard.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonratecarditemlink.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sarcuo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionaddonratecard.ItemsTable,
			Columns: []string{subscriptionaddonratecard.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonratecarditemlink.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubscriptionAddonRateCard{config: sarcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sarcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionaddonratecard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sarcuo.mutation.done = true
	return _node, nil
}
