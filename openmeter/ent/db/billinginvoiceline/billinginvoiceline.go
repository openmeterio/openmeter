// Code generated by ent, DO NOT EDIT.

package billinginvoiceline

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	billingentity "github.com/openmeterio/openmeter/openmeter/billing/entity"
)

const (
	// Label holds the string label denoting the billinginvoiceline type in the database.
	Label = "billing_invoice_line"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldInvoiceID holds the string denoting the invoice_id field in the database.
	FieldInvoiceID = "invoice_id"
	// FieldPeriodStart holds the string denoting the period_start field in the database.
	FieldPeriodStart = "period_start"
	// FieldPeriodEnd holds the string denoting the period_end field in the database.
	FieldPeriodEnd = "period_end"
	// FieldInvoiceAt holds the string denoting the invoice_at field in the database.
	FieldInvoiceAt = "invoice_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldTaxOverrides holds the string denoting the tax_overrides field in the database.
	FieldTaxOverrides = "tax_overrides"
	// EdgeBillingInvoice holds the string denoting the billing_invoice edge name in mutations.
	EdgeBillingInvoice = "billing_invoice"
	// EdgeBillingInvoiceManualLines holds the string denoting the billing_invoice_manual_lines edge name in mutations.
	EdgeBillingInvoiceManualLines = "billing_invoice_manual_lines"
	// Table holds the table name of the billinginvoiceline in the database.
	Table = "billing_invoice_lines"
	// BillingInvoiceTable is the table that holds the billing_invoice relation/edge.
	BillingInvoiceTable = "billing_invoice_lines"
	// BillingInvoiceInverseTable is the table name for the BillingInvoice entity.
	// It exists in this package in order to avoid circular dependency with the "billinginvoice" package.
	BillingInvoiceInverseTable = "billing_invoices"
	// BillingInvoiceColumn is the table column denoting the billing_invoice relation/edge.
	BillingInvoiceColumn = "invoice_id"
	// BillingInvoiceManualLinesTable is the table that holds the billing_invoice_manual_lines relation/edge.
	BillingInvoiceManualLinesTable = "billing_invoice_lines"
	// BillingInvoiceManualLinesInverseTable is the table name for the BillingInvoiceManualLineConfig entity.
	// It exists in this package in order to avoid circular dependency with the "billinginvoicemanuallineconfig" package.
	BillingInvoiceManualLinesInverseTable = "billing_invoice_manual_line_configs"
	// BillingInvoiceManualLinesColumn is the table column denoting the billing_invoice_manual_lines relation/edge.
	BillingInvoiceManualLinesColumn = "manual_line_config_id"
)

// Columns holds all SQL columns for billinginvoiceline fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldDescription,
	FieldInvoiceID,
	FieldPeriodStart,
	FieldPeriodEnd,
	FieldInvoiceAt,
	FieldType,
	FieldStatus,
	FieldCurrency,
	FieldQuantity,
	FieldTaxOverrides,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "billing_invoice_lines"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"manual_line_config_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// CurrencyValidator is a validator for the "currency" field. It is called by the builders before save.
	CurrencyValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type billingentity.InvoiceLineType) error {
	switch _type {
	case "manual_fee", "flat_fee", "usage_based":
		return nil
	default:
		return fmt.Errorf("billinginvoiceline: invalid enum value for type field: %q", _type)
	}
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s billingentity.InvoiceLineStatus) error {
	switch s {
	case "valid", "split":
		return nil
	default:
		return fmt.Errorf("billinginvoiceline: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the BillingInvoiceLine queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByInvoiceID orders the results by the invoice_id field.
func ByInvoiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceID, opts...).ToFunc()
}

// ByPeriodStart orders the results by the period_start field.
func ByPeriodStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriodStart, opts...).ToFunc()
}

// ByPeriodEnd orders the results by the period_end field.
func ByPeriodEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriodEnd, opts...).ToFunc()
}

// ByInvoiceAt orders the results by the invoice_at field.
func ByInvoiceAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceAt, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByBillingInvoiceField orders the results by billing_invoice field.
func ByBillingInvoiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingInvoiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByBillingInvoiceManualLinesField orders the results by billing_invoice_manual_lines field.
func ByBillingInvoiceManualLinesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingInvoiceManualLinesStep(), sql.OrderByField(field, opts...))
	}
}
func newBillingInvoiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingInvoiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BillingInvoiceTable, BillingInvoiceColumn),
	)
}
func newBillingInvoiceManualLinesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingInvoiceManualLinesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BillingInvoiceManualLinesTable, BillingInvoiceManualLinesColumn),
	)
}
