// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicedetailedline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicedetailedlineamountdiscount"
)

// BillingInvoiceDetailedLineAmountDiscount is the model entity for the BillingInvoiceDetailedLineAmountDiscount schema.
type BillingInvoiceDetailedLineAmountDiscount struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// LineID holds the value of the "line_id" field.
	LineID string `json:"line_id,omitempty"`
	// ChildUniqueReferenceID holds the value of the "child_unique_reference_id" field.
	ChildUniqueReferenceID *string `json:"child_unique_reference_id,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason billing.DiscountReasonType `json:"reason,omitempty"`
	// InvoicingAppExternalID holds the value of the "invoicing_app_external_id" field.
	InvoicingAppExternalID *string `json:"invoicing_app_external_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount alpacadecimal.Decimal `json:"amount,omitempty"`
	// RoundingAmount holds the value of the "rounding_amount" field.
	RoundingAmount *alpacadecimal.Decimal `json:"rounding_amount,omitempty"`
	// SourceDiscount holds the value of the "source_discount" field.
	SourceDiscount *billing.DiscountReason `json:"source_discount,omitempty"`
	// Type holds the value of the "type" field.
	//
	// Deprecated: due to split of amount and usage discount tables
	Type *string `json:"type,omitempty"`
	// Quantity holds the value of the "quantity" field.
	//
	// Deprecated: due to split of amount and usage discount tables
	Quantity *alpacadecimal.Decimal `json:"quantity,omitempty"`
	// PreLinePeriodQuantity holds the value of the "pre_line_period_quantity" field.
	//
	// Deprecated: due to split of amount and usage discount tables
	PreLinePeriodQuantity *alpacadecimal.Decimal `json:"pre_line_period_quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingInvoiceDetailedLineAmountDiscountQuery when eager-loading is set.
	Edges        BillingInvoiceDetailedLineAmountDiscountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillingInvoiceDetailedLineAmountDiscountEdges holds the relations/edges for other nodes in the graph.
type BillingInvoiceDetailedLineAmountDiscountEdges struct {
	// BillingInvoiceDetailedLine holds the value of the billing_invoice_detailed_line edge.
	BillingInvoiceDetailedLine *BillingInvoiceDetailedLine `json:"billing_invoice_detailed_line,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BillingInvoiceDetailedLineOrErr returns the BillingInvoiceDetailedLine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceDetailedLineAmountDiscountEdges) BillingInvoiceDetailedLineOrErr() (*BillingInvoiceDetailedLine, error) {
	if e.BillingInvoiceDetailedLine != nil {
		return e.BillingInvoiceDetailedLine, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: billinginvoicedetailedline.Label}
	}
	return nil, &NotLoadedError{edge: "billing_invoice_detailed_line"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingInvoiceDetailedLineAmountDiscount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billinginvoicedetailedlineamountdiscount.FieldRoundingAmount, billinginvoicedetailedlineamountdiscount.FieldQuantity, billinginvoicedetailedlineamountdiscount.FieldPreLinePeriodQuantity:
			values[i] = &sql.NullScanner{S: new(alpacadecimal.Decimal)}
		case billinginvoicedetailedlineamountdiscount.FieldAmount:
			values[i] = new(alpacadecimal.Decimal)
		case billinginvoicedetailedlineamountdiscount.FieldID, billinginvoicedetailedlineamountdiscount.FieldNamespace, billinginvoicedetailedlineamountdiscount.FieldLineID, billinginvoicedetailedlineamountdiscount.FieldChildUniqueReferenceID, billinginvoicedetailedlineamountdiscount.FieldDescription, billinginvoicedetailedlineamountdiscount.FieldReason, billinginvoicedetailedlineamountdiscount.FieldInvoicingAppExternalID, billinginvoicedetailedlineamountdiscount.FieldType:
			values[i] = new(sql.NullString)
		case billinginvoicedetailedlineamountdiscount.FieldCreatedAt, billinginvoicedetailedlineamountdiscount.FieldUpdatedAt, billinginvoicedetailedlineamountdiscount.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case billinginvoicedetailedlineamountdiscount.FieldSourceDiscount:
			values[i] = billinginvoicedetailedlineamountdiscount.ValueScanner.SourceDiscount.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingInvoiceDetailedLineAmountDiscount fields.
func (_m *BillingInvoiceDetailedLineAmountDiscount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billinginvoicedetailedlineamountdiscount.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case billinginvoicedetailedlineamountdiscount.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				_m.Namespace = value.String
			}
		case billinginvoicedetailedlineamountdiscount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case billinginvoicedetailedlineamountdiscount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case billinginvoicedetailedlineamountdiscount.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case billinginvoicedetailedlineamountdiscount.FieldLineID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field line_id", values[i])
			} else if value.Valid {
				_m.LineID = value.String
			}
		case billinginvoicedetailedlineamountdiscount.FieldChildUniqueReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field child_unique_reference_id", values[i])
			} else if value.Valid {
				_m.ChildUniqueReferenceID = new(string)
				*_m.ChildUniqueReferenceID = value.String
			}
		case billinginvoicedetailedlineamountdiscount.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = new(string)
				*_m.Description = value.String
			}
		case billinginvoicedetailedlineamountdiscount.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				_m.Reason = billing.DiscountReasonType(value.String)
			}
		case billinginvoicedetailedlineamountdiscount.FieldInvoicingAppExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoicing_app_external_id", values[i])
			} else if value.Valid {
				_m.InvoicingAppExternalID = new(string)
				*_m.InvoicingAppExternalID = value.String
			}
		case billinginvoicedetailedlineamountdiscount.FieldAmount:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				_m.Amount = *value
			}
		case billinginvoicedetailedlineamountdiscount.FieldRoundingAmount:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field rounding_amount", values[i])
			} else if value.Valid {
				_m.RoundingAmount = new(alpacadecimal.Decimal)
				*_m.RoundingAmount = *value.S.(*alpacadecimal.Decimal)
			}
		case billinginvoicedetailedlineamountdiscount.FieldSourceDiscount:
			if value, err := billinginvoicedetailedlineamountdiscount.ValueScanner.SourceDiscount.FromValue(values[i]); err != nil {
				return err
			} else {
				_m.SourceDiscount = value
			}
		case billinginvoicedetailedlineamountdiscount.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = new(string)
				*_m.Type = value.String
			}
		case billinginvoicedetailedlineamountdiscount.FieldQuantity:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				_m.Quantity = new(alpacadecimal.Decimal)
				*_m.Quantity = *value.S.(*alpacadecimal.Decimal)
			}
		case billinginvoicedetailedlineamountdiscount.FieldPreLinePeriodQuantity:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field pre_line_period_quantity", values[i])
			} else if value.Valid {
				_m.PreLinePeriodQuantity = new(alpacadecimal.Decimal)
				*_m.PreLinePeriodQuantity = *value.S.(*alpacadecimal.Decimal)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingInvoiceDetailedLineAmountDiscount.
// This includes values selected through modifiers, order, etc.
func (_m *BillingInvoiceDetailedLineAmountDiscount) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryBillingInvoiceDetailedLine queries the "billing_invoice_detailed_line" edge of the BillingInvoiceDetailedLineAmountDiscount entity.
func (_m *BillingInvoiceDetailedLineAmountDiscount) QueryBillingInvoiceDetailedLine() *BillingInvoiceDetailedLineQuery {
	return NewBillingInvoiceDetailedLineAmountDiscountClient(_m.config).QueryBillingInvoiceDetailedLine(_m)
}

// Update returns a builder for updating this BillingInvoiceDetailedLineAmountDiscount.
// Note that you need to call BillingInvoiceDetailedLineAmountDiscount.Unwrap() before calling this method if this BillingInvoiceDetailedLineAmountDiscount
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BillingInvoiceDetailedLineAmountDiscount) Update() *BillingInvoiceDetailedLineAmountDiscountUpdateOne {
	return NewBillingInvoiceDetailedLineAmountDiscountClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BillingInvoiceDetailedLineAmountDiscount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BillingInvoiceDetailedLineAmountDiscount) Unwrap() *BillingInvoiceDetailedLineAmountDiscount {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingInvoiceDetailedLineAmountDiscount is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BillingInvoiceDetailedLineAmountDiscount) String() string {
	var builder strings.Builder
	builder.WriteString("BillingInvoiceDetailedLineAmountDiscount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("namespace=")
	builder.WriteString(_m.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("line_id=")
	builder.WriteString(_m.LineID)
	builder.WriteString(", ")
	if v := _m.ChildUniqueReferenceID; v != nil {
		builder.WriteString("child_unique_reference_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(fmt.Sprintf("%v", _m.Reason))
	builder.WriteString(", ")
	if v := _m.InvoicingAppExternalID; v != nil {
		builder.WriteString("invoicing_app_external_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.Amount))
	builder.WriteString(", ")
	if v := _m.RoundingAmount; v != nil {
		builder.WriteString("rounding_amount=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.SourceDiscount; v != nil {
		builder.WriteString("source_discount=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.Type; v != nil {
		builder.WriteString("type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Quantity; v != nil {
		builder.WriteString("quantity=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.PreLinePeriodQuantity; v != nil {
		builder.WriteString("pre_line_period_quantity=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BillingInvoiceDetailedLineAmountDiscounts is a parsable slice of BillingInvoiceDetailedLineAmountDiscount.
type BillingInvoiceDetailedLineAmountDiscounts []*BillingInvoiceDetailedLineAmountDiscount
