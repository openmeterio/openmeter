// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonquantity"
)

// SubscriptionAddonCreate is the builder for creating a SubscriptionAddon entity.
type SubscriptionAddonCreate struct {
	config
	mutation *SubscriptionAddonMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (_c *SubscriptionAddonCreate) SetNamespace(v string) *SubscriptionAddonCreate {
	_c.mutation.SetNamespace(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *SubscriptionAddonCreate) SetMetadata(v map[string]string) *SubscriptionAddonCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *SubscriptionAddonCreate) SetCreatedAt(v time.Time) *SubscriptionAddonCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *SubscriptionAddonCreate) SetNillableCreatedAt(v *time.Time) *SubscriptionAddonCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *SubscriptionAddonCreate) SetUpdatedAt(v time.Time) *SubscriptionAddonCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *SubscriptionAddonCreate) SetNillableUpdatedAt(v *time.Time) *SubscriptionAddonCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *SubscriptionAddonCreate) SetDeletedAt(v time.Time) *SubscriptionAddonCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *SubscriptionAddonCreate) SetNillableDeletedAt(v *time.Time) *SubscriptionAddonCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetAddonID sets the "addon_id" field.
func (_c *SubscriptionAddonCreate) SetAddonID(v string) *SubscriptionAddonCreate {
	_c.mutation.SetAddonID(v)
	return _c
}

// SetSubscriptionID sets the "subscription_id" field.
func (_c *SubscriptionAddonCreate) SetSubscriptionID(v string) *SubscriptionAddonCreate {
	_c.mutation.SetSubscriptionID(v)
	return _c
}

// SetID sets the "id" field.
func (_c *SubscriptionAddonCreate) SetID(v string) *SubscriptionAddonCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *SubscriptionAddonCreate) SetNillableID(v *string) *SubscriptionAddonCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (_c *SubscriptionAddonCreate) SetSubscription(v *Subscription) *SubscriptionAddonCreate {
	return _c.SetSubscriptionID(v.ID)
}

// AddQuantityIDs adds the "quantities" edge to the SubscriptionAddonQuantity entity by IDs.
func (_c *SubscriptionAddonCreate) AddQuantityIDs(ids ...string) *SubscriptionAddonCreate {
	_c.mutation.AddQuantityIDs(ids...)
	return _c
}

// AddQuantities adds the "quantities" edges to the SubscriptionAddonQuantity entity.
func (_c *SubscriptionAddonCreate) AddQuantities(v ...*SubscriptionAddonQuantity) *SubscriptionAddonCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddQuantityIDs(ids...)
}

// SetAddon sets the "addon" edge to the Addon entity.
func (_c *SubscriptionAddonCreate) SetAddon(v *Addon) *SubscriptionAddonCreate {
	return _c.SetAddonID(v.ID)
}

// Mutation returns the SubscriptionAddonMutation object of the builder.
func (_c *SubscriptionAddonCreate) Mutation() *SubscriptionAddonMutation {
	return _c.mutation
}

// Save creates the SubscriptionAddon in the database.
func (_c *SubscriptionAddonCreate) Save(ctx context.Context) (*SubscriptionAddon, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SubscriptionAddonCreate) SaveX(ctx context.Context) *SubscriptionAddon {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SubscriptionAddonCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SubscriptionAddonCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SubscriptionAddonCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := subscriptionaddon.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := subscriptionaddon.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := subscriptionaddon.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SubscriptionAddonCreate) check() error {
	if _, ok := _c.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "SubscriptionAddon.namespace"`)}
	}
	if v, ok := _c.mutation.Namespace(); ok {
		if err := subscriptionaddon.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "SubscriptionAddon.namespace": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "SubscriptionAddon.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "SubscriptionAddon.updated_at"`)}
	}
	if _, ok := _c.mutation.AddonID(); !ok {
		return &ValidationError{Name: "addon_id", err: errors.New(`db: missing required field "SubscriptionAddon.addon_id"`)}
	}
	if v, ok := _c.mutation.AddonID(); ok {
		if err := subscriptionaddon.AddonIDValidator(v); err != nil {
			return &ValidationError{Name: "addon_id", err: fmt.Errorf(`db: validator failed for field "SubscriptionAddon.addon_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.SubscriptionID(); !ok {
		return &ValidationError{Name: "subscription_id", err: errors.New(`db: missing required field "SubscriptionAddon.subscription_id"`)}
	}
	if v, ok := _c.mutation.SubscriptionID(); ok {
		if err := subscriptionaddon.SubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_id", err: fmt.Errorf(`db: validator failed for field "SubscriptionAddon.subscription_id": %w`, err)}
		}
	}
	if len(_c.mutation.SubscriptionIDs()) == 0 {
		return &ValidationError{Name: "subscription", err: errors.New(`db: missing required edge "SubscriptionAddon.subscription"`)}
	}
	if len(_c.mutation.AddonIDs()) == 0 {
		return &ValidationError{Name: "addon", err: errors.New(`db: missing required edge "SubscriptionAddon.addon"`)}
	}
	return nil
}

func (_c *SubscriptionAddonCreate) sqlSave(ctx context.Context) (*SubscriptionAddon, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubscriptionAddon.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SubscriptionAddonCreate) createSpec() (*SubscriptionAddon, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionAddon{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionaddon.Table, sqlgraph.NewFieldSpec(subscriptionaddon.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Namespace(); ok {
		_spec.SetField(subscriptionaddon.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(subscriptionaddon.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptionaddon.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionaddon.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionaddon.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := _c.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionaddon.SubscriptionTable,
			Columns: []string{subscriptionaddon.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.QuantitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionaddon.QuantitiesTable,
			Columns: []string{subscriptionaddon.QuantitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonquantity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AddonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionaddon.AddonTable,
			Columns: []string{subscriptionaddon.AddonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AddonID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionAddon.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionAddonUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *SubscriptionAddonCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionAddonUpsertOne {
	_c.conflict = opts
	return &SubscriptionAddonUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionAddon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SubscriptionAddonCreate) OnConflictColumns(columns ...string) *SubscriptionAddonUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionAddonUpsertOne{
		create: _c,
	}
}

type (
	// SubscriptionAddonUpsertOne is the builder for "upsert"-ing
	//  one SubscriptionAddon node.
	SubscriptionAddonUpsertOne struct {
		create *SubscriptionAddonCreate
	}

	// SubscriptionAddonUpsert is the "OnConflict" setter.
	SubscriptionAddonUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *SubscriptionAddonUpsert) SetMetadata(v map[string]string) *SubscriptionAddonUpsert {
	u.Set(subscriptionaddon.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SubscriptionAddonUpsert) UpdateMetadata() *SubscriptionAddonUpsert {
	u.SetExcluded(subscriptionaddon.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SubscriptionAddonUpsert) ClearMetadata() *SubscriptionAddonUpsert {
	u.SetNull(subscriptionaddon.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionAddonUpsert) SetUpdatedAt(v time.Time) *SubscriptionAddonUpsert {
	u.Set(subscriptionaddon.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionAddonUpsert) UpdateUpdatedAt() *SubscriptionAddonUpsert {
	u.SetExcluded(subscriptionaddon.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionAddonUpsert) SetDeletedAt(v time.Time) *SubscriptionAddonUpsert {
	u.Set(subscriptionaddon.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionAddonUpsert) UpdateDeletedAt() *SubscriptionAddonUpsert {
	u.SetExcluded(subscriptionaddon.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionAddonUpsert) ClearDeletedAt() *SubscriptionAddonUpsert {
	u.SetNull(subscriptionaddon.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SubscriptionAddon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionaddon.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionAddonUpsertOne) UpdateNewValues() *SubscriptionAddonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscriptionaddon.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(subscriptionaddon.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(subscriptionaddon.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.AddonID(); exists {
			s.SetIgnore(subscriptionaddon.FieldAddonID)
		}
		if _, exists := u.create.mutation.SubscriptionID(); exists {
			s.SetIgnore(subscriptionaddon.FieldSubscriptionID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionAddon.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionAddonUpsertOne) Ignore() *SubscriptionAddonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionAddonUpsertOne) DoNothing() *SubscriptionAddonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionAddonCreate.OnConflict
// documentation for more info.
func (u *SubscriptionAddonUpsertOne) Update(set func(*SubscriptionAddonUpsert)) *SubscriptionAddonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionAddonUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *SubscriptionAddonUpsertOne) SetMetadata(v map[string]string) *SubscriptionAddonUpsertOne {
	return u.Update(func(s *SubscriptionAddonUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SubscriptionAddonUpsertOne) UpdateMetadata() *SubscriptionAddonUpsertOne {
	return u.Update(func(s *SubscriptionAddonUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SubscriptionAddonUpsertOne) ClearMetadata() *SubscriptionAddonUpsertOne {
	return u.Update(func(s *SubscriptionAddonUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionAddonUpsertOne) SetUpdatedAt(v time.Time) *SubscriptionAddonUpsertOne {
	return u.Update(func(s *SubscriptionAddonUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionAddonUpsertOne) UpdateUpdatedAt() *SubscriptionAddonUpsertOne {
	return u.Update(func(s *SubscriptionAddonUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionAddonUpsertOne) SetDeletedAt(v time.Time) *SubscriptionAddonUpsertOne {
	return u.Update(func(s *SubscriptionAddonUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionAddonUpsertOne) UpdateDeletedAt() *SubscriptionAddonUpsertOne {
	return u.Update(func(s *SubscriptionAddonUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionAddonUpsertOne) ClearDeletedAt() *SubscriptionAddonUpsertOne {
	return u.Update(func(s *SubscriptionAddonUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SubscriptionAddonUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionAddonCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionAddonUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionAddonUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: SubscriptionAddonUpsertOne.ID is not supported by MySQL driver. Use SubscriptionAddonUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionAddonUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionAddonCreateBulk is the builder for creating many SubscriptionAddon entities in bulk.
type SubscriptionAddonCreateBulk struct {
	config
	err      error
	builders []*SubscriptionAddonCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscriptionAddon entities in the database.
func (_c *SubscriptionAddonCreateBulk) Save(ctx context.Context) ([]*SubscriptionAddon, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*SubscriptionAddon, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionAddonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SubscriptionAddonCreateBulk) SaveX(ctx context.Context) []*SubscriptionAddon {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SubscriptionAddonCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SubscriptionAddonCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionAddon.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionAddonUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *SubscriptionAddonCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionAddonUpsertBulk {
	_c.conflict = opts
	return &SubscriptionAddonUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionAddon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SubscriptionAddonCreateBulk) OnConflictColumns(columns ...string) *SubscriptionAddonUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionAddonUpsertBulk{
		create: _c,
	}
}

// SubscriptionAddonUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscriptionAddon nodes.
type SubscriptionAddonUpsertBulk struct {
	create *SubscriptionAddonCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscriptionAddon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionaddon.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionAddonUpsertBulk) UpdateNewValues() *SubscriptionAddonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscriptionaddon.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(subscriptionaddon.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(subscriptionaddon.FieldCreatedAt)
			}
			if _, exists := b.mutation.AddonID(); exists {
				s.SetIgnore(subscriptionaddon.FieldAddonID)
			}
			if _, exists := b.mutation.SubscriptionID(); exists {
				s.SetIgnore(subscriptionaddon.FieldSubscriptionID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionAddon.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionAddonUpsertBulk) Ignore() *SubscriptionAddonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionAddonUpsertBulk) DoNothing() *SubscriptionAddonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionAddonCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionAddonUpsertBulk) Update(set func(*SubscriptionAddonUpsert)) *SubscriptionAddonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionAddonUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *SubscriptionAddonUpsertBulk) SetMetadata(v map[string]string) *SubscriptionAddonUpsertBulk {
	return u.Update(func(s *SubscriptionAddonUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SubscriptionAddonUpsertBulk) UpdateMetadata() *SubscriptionAddonUpsertBulk {
	return u.Update(func(s *SubscriptionAddonUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SubscriptionAddonUpsertBulk) ClearMetadata() *SubscriptionAddonUpsertBulk {
	return u.Update(func(s *SubscriptionAddonUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionAddonUpsertBulk) SetUpdatedAt(v time.Time) *SubscriptionAddonUpsertBulk {
	return u.Update(func(s *SubscriptionAddonUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionAddonUpsertBulk) UpdateUpdatedAt() *SubscriptionAddonUpsertBulk {
	return u.Update(func(s *SubscriptionAddonUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionAddonUpsertBulk) SetDeletedAt(v time.Time) *SubscriptionAddonUpsertBulk {
	return u.Update(func(s *SubscriptionAddonUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionAddonUpsertBulk) UpdateDeletedAt() *SubscriptionAddonUpsertBulk {
	return u.Update(func(s *SubscriptionAddonUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionAddonUpsertBulk) ClearDeletedAt() *SubscriptionAddonUpsertBulk {
	return u.Update(func(s *SubscriptionAddonUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SubscriptionAddonUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the SubscriptionAddonCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionAddonCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionAddonUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
