// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonquantity"
)

// SubscriptionAddonQuantity is the model entity for the SubscriptionAddonQuantity schema.
type SubscriptionAddonQuantity struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// ActiveFrom holds the value of the "active_from" field.
	ActiveFrom time.Time `json:"active_from,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// SubscriptionAddonID holds the value of the "subscription_addon_id" field.
	SubscriptionAddonID string `json:"subscription_addon_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionAddonQuantityQuery when eager-loading is set.
	Edges        SubscriptionAddonQuantityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubscriptionAddonQuantityEdges holds the relations/edges for other nodes in the graph.
type SubscriptionAddonQuantityEdges struct {
	// SubscriptionAddon holds the value of the subscription_addon edge.
	SubscriptionAddon *SubscriptionAddon `json:"subscription_addon,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SubscriptionAddonOrErr returns the SubscriptionAddon value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionAddonQuantityEdges) SubscriptionAddonOrErr() (*SubscriptionAddon, error) {
	if e.SubscriptionAddon != nil {
		return e.SubscriptionAddon, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: subscriptionaddon.Label}
	}
	return nil, &NotLoadedError{edge: "subscription_addon"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionAddonQuantity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptionaddonquantity.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case subscriptionaddonquantity.FieldID, subscriptionaddonquantity.FieldNamespace, subscriptionaddonquantity.FieldSubscriptionAddonID:
			values[i] = new(sql.NullString)
		case subscriptionaddonquantity.FieldCreatedAt, subscriptionaddonquantity.FieldUpdatedAt, subscriptionaddonquantity.FieldDeletedAt, subscriptionaddonquantity.FieldActiveFrom:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionAddonQuantity fields.
func (saq *SubscriptionAddonQuantity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptionaddonquantity.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				saq.ID = value.String
			}
		case subscriptionaddonquantity.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				saq.Namespace = value.String
			}
		case subscriptionaddonquantity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				saq.CreatedAt = value.Time
			}
		case subscriptionaddonquantity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				saq.UpdatedAt = value.Time
			}
		case subscriptionaddonquantity.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				saq.DeletedAt = new(time.Time)
				*saq.DeletedAt = value.Time
			}
		case subscriptionaddonquantity.FieldActiveFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field active_from", values[i])
			} else if value.Valid {
				saq.ActiveFrom = value.Time
			}
		case subscriptionaddonquantity.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				saq.Quantity = int(value.Int64)
			}
		case subscriptionaddonquantity.FieldSubscriptionAddonID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_addon_id", values[i])
			} else if value.Valid {
				saq.SubscriptionAddonID = value.String
			}
		default:
			saq.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscriptionAddonQuantity.
// This includes values selected through modifiers, order, etc.
func (saq *SubscriptionAddonQuantity) Value(name string) (ent.Value, error) {
	return saq.selectValues.Get(name)
}

// QuerySubscriptionAddon queries the "subscription_addon" edge of the SubscriptionAddonQuantity entity.
func (saq *SubscriptionAddonQuantity) QuerySubscriptionAddon() *SubscriptionAddonQuery {
	return NewSubscriptionAddonQuantityClient(saq.config).QuerySubscriptionAddon(saq)
}

// Update returns a builder for updating this SubscriptionAddonQuantity.
// Note that you need to call SubscriptionAddonQuantity.Unwrap() before calling this method if this SubscriptionAddonQuantity
// was returned from a transaction, and the transaction was committed or rolled back.
func (saq *SubscriptionAddonQuantity) Update() *SubscriptionAddonQuantityUpdateOne {
	return NewSubscriptionAddonQuantityClient(saq.config).UpdateOne(saq)
}

// Unwrap unwraps the SubscriptionAddonQuantity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (saq *SubscriptionAddonQuantity) Unwrap() *SubscriptionAddonQuantity {
	_tx, ok := saq.config.driver.(*txDriver)
	if !ok {
		panic("db: SubscriptionAddonQuantity is not a transactional entity")
	}
	saq.config.driver = _tx.drv
	return saq
}

// String implements the fmt.Stringer.
func (saq *SubscriptionAddonQuantity) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionAddonQuantity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", saq.ID))
	builder.WriteString("namespace=")
	builder.WriteString(saq.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(saq.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(saq.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := saq.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("active_from=")
	builder.WriteString(saq.ActiveFrom.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", saq.Quantity))
	builder.WriteString(", ")
	builder.WriteString("subscription_addon_id=")
	builder.WriteString(saq.SubscriptionAddonID)
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionAddonQuantities is a parsable slice of SubscriptionAddonQuantity.
type SubscriptionAddonQuantities []*SubscriptionAddonQuantity
