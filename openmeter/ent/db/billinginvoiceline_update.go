// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicediscount"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceflatfeelineconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicelinediscount"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceusagebasedlineconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionphase"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
)

// BillingInvoiceLineUpdate is the builder for updating BillingInvoiceLine entities.
type BillingInvoiceLineUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceLineMutation
}

// Where appends a list predicates to the BillingInvoiceLineUpdate builder.
func (bilu *BillingInvoiceLineUpdate) Where(ps ...predicate.BillingInvoiceLine) *BillingInvoiceLineUpdate {
	bilu.mutation.Where(ps...)
	return bilu
}

// SetMetadata sets the "metadata" field.
func (bilu *BillingInvoiceLineUpdate) SetMetadata(m map[string]string) *BillingInvoiceLineUpdate {
	bilu.mutation.SetMetadata(m)
	return bilu
}

// ClearMetadata clears the value of the "metadata" field.
func (bilu *BillingInvoiceLineUpdate) ClearMetadata() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearMetadata()
	return bilu
}

// SetUpdatedAt sets the "updated_at" field.
func (bilu *BillingInvoiceLineUpdate) SetUpdatedAt(t time.Time) *BillingInvoiceLineUpdate {
	bilu.mutation.SetUpdatedAt(t)
	return bilu
}

// SetDeletedAt sets the "deleted_at" field.
func (bilu *BillingInvoiceLineUpdate) SetDeletedAt(t time.Time) *BillingInvoiceLineUpdate {
	bilu.mutation.SetDeletedAt(t)
	return bilu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceLineUpdate {
	if t != nil {
		bilu.SetDeletedAt(*t)
	}
	return bilu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bilu *BillingInvoiceLineUpdate) ClearDeletedAt() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearDeletedAt()
	return bilu
}

// SetName sets the "name" field.
func (bilu *BillingInvoiceLineUpdate) SetName(s string) *BillingInvoiceLineUpdate {
	bilu.mutation.SetName(s)
	return bilu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableName(s *string) *BillingInvoiceLineUpdate {
	if s != nil {
		bilu.SetName(*s)
	}
	return bilu
}

// SetDescription sets the "description" field.
func (bilu *BillingInvoiceLineUpdate) SetDescription(s string) *BillingInvoiceLineUpdate {
	bilu.mutation.SetDescription(s)
	return bilu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableDescription(s *string) *BillingInvoiceLineUpdate {
	if s != nil {
		bilu.SetDescription(*s)
	}
	return bilu
}

// ClearDescription clears the value of the "description" field.
func (bilu *BillingInvoiceLineUpdate) ClearDescription() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearDescription()
	return bilu
}

// SetAmount sets the "amount" field.
func (bilu *BillingInvoiceLineUpdate) SetAmount(a alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	bilu.mutation.SetAmount(a)
	return bilu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableAmount(a *alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	if a != nil {
		bilu.SetAmount(*a)
	}
	return bilu
}

// SetTaxesTotal sets the "taxes_total" field.
func (bilu *BillingInvoiceLineUpdate) SetTaxesTotal(a alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	bilu.mutation.SetTaxesTotal(a)
	return bilu
}

// SetNillableTaxesTotal sets the "taxes_total" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableTaxesTotal(a *alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	if a != nil {
		bilu.SetTaxesTotal(*a)
	}
	return bilu
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (bilu *BillingInvoiceLineUpdate) SetTaxesInclusiveTotal(a alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	bilu.mutation.SetTaxesInclusiveTotal(a)
	return bilu
}

// SetNillableTaxesInclusiveTotal sets the "taxes_inclusive_total" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableTaxesInclusiveTotal(a *alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	if a != nil {
		bilu.SetTaxesInclusiveTotal(*a)
	}
	return bilu
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (bilu *BillingInvoiceLineUpdate) SetTaxesExclusiveTotal(a alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	bilu.mutation.SetTaxesExclusiveTotal(a)
	return bilu
}

// SetNillableTaxesExclusiveTotal sets the "taxes_exclusive_total" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableTaxesExclusiveTotal(a *alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	if a != nil {
		bilu.SetTaxesExclusiveTotal(*a)
	}
	return bilu
}

// SetChargesTotal sets the "charges_total" field.
func (bilu *BillingInvoiceLineUpdate) SetChargesTotal(a alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	bilu.mutation.SetChargesTotal(a)
	return bilu
}

// SetNillableChargesTotal sets the "charges_total" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableChargesTotal(a *alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	if a != nil {
		bilu.SetChargesTotal(*a)
	}
	return bilu
}

// SetDiscountsTotal sets the "discounts_total" field.
func (bilu *BillingInvoiceLineUpdate) SetDiscountsTotal(a alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	bilu.mutation.SetDiscountsTotal(a)
	return bilu
}

// SetNillableDiscountsTotal sets the "discounts_total" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableDiscountsTotal(a *alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	if a != nil {
		bilu.SetDiscountsTotal(*a)
	}
	return bilu
}

// SetTotal sets the "total" field.
func (bilu *BillingInvoiceLineUpdate) SetTotal(a alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	bilu.mutation.SetTotal(a)
	return bilu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableTotal(a *alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	if a != nil {
		bilu.SetTotal(*a)
	}
	return bilu
}

// SetInvoiceID sets the "invoice_id" field.
func (bilu *BillingInvoiceLineUpdate) SetInvoiceID(s string) *BillingInvoiceLineUpdate {
	bilu.mutation.SetInvoiceID(s)
	return bilu
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableInvoiceID(s *string) *BillingInvoiceLineUpdate {
	if s != nil {
		bilu.SetInvoiceID(*s)
	}
	return bilu
}

// SetParentLineID sets the "parent_line_id" field.
func (bilu *BillingInvoiceLineUpdate) SetParentLineID(s string) *BillingInvoiceLineUpdate {
	bilu.mutation.SetParentLineID(s)
	return bilu
}

// SetNillableParentLineID sets the "parent_line_id" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableParentLineID(s *string) *BillingInvoiceLineUpdate {
	if s != nil {
		bilu.SetParentLineID(*s)
	}
	return bilu
}

// ClearParentLineID clears the value of the "parent_line_id" field.
func (bilu *BillingInvoiceLineUpdate) ClearParentLineID() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearParentLineID()
	return bilu
}

// SetPeriodStart sets the "period_start" field.
func (bilu *BillingInvoiceLineUpdate) SetPeriodStart(t time.Time) *BillingInvoiceLineUpdate {
	bilu.mutation.SetPeriodStart(t)
	return bilu
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillablePeriodStart(t *time.Time) *BillingInvoiceLineUpdate {
	if t != nil {
		bilu.SetPeriodStart(*t)
	}
	return bilu
}

// SetPeriodEnd sets the "period_end" field.
func (bilu *BillingInvoiceLineUpdate) SetPeriodEnd(t time.Time) *BillingInvoiceLineUpdate {
	bilu.mutation.SetPeriodEnd(t)
	return bilu
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillablePeriodEnd(t *time.Time) *BillingInvoiceLineUpdate {
	if t != nil {
		bilu.SetPeriodEnd(*t)
	}
	return bilu
}

// SetInvoiceAt sets the "invoice_at" field.
func (bilu *BillingInvoiceLineUpdate) SetInvoiceAt(t time.Time) *BillingInvoiceLineUpdate {
	bilu.mutation.SetInvoiceAt(t)
	return bilu
}

// SetNillableInvoiceAt sets the "invoice_at" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableInvoiceAt(t *time.Time) *BillingInvoiceLineUpdate {
	if t != nil {
		bilu.SetInvoiceAt(*t)
	}
	return bilu
}

// SetStatus sets the "status" field.
func (bilu *BillingInvoiceLineUpdate) SetStatus(bls billing.InvoiceLineStatus) *BillingInvoiceLineUpdate {
	bilu.mutation.SetStatus(bls)
	return bilu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableStatus(bls *billing.InvoiceLineStatus) *BillingInvoiceLineUpdate {
	if bls != nil {
		bilu.SetStatus(*bls)
	}
	return bilu
}

// SetQuantity sets the "quantity" field.
func (bilu *BillingInvoiceLineUpdate) SetQuantity(a alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	bilu.mutation.SetQuantity(a)
	return bilu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableQuantity(a *alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	if a != nil {
		bilu.SetQuantity(*a)
	}
	return bilu
}

// ClearQuantity clears the value of the "quantity" field.
func (bilu *BillingInvoiceLineUpdate) ClearQuantity() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearQuantity()
	return bilu
}

// SetTaxConfig sets the "tax_config" field.
func (bilu *BillingInvoiceLineUpdate) SetTaxConfig(pc productcatalog.TaxConfig) *BillingInvoiceLineUpdate {
	bilu.mutation.SetTaxConfig(pc)
	return bilu
}

// SetNillableTaxConfig sets the "tax_config" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableTaxConfig(pc *productcatalog.TaxConfig) *BillingInvoiceLineUpdate {
	if pc != nil {
		bilu.SetTaxConfig(*pc)
	}
	return bilu
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (bilu *BillingInvoiceLineUpdate) ClearTaxConfig() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearTaxConfig()
	return bilu
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (bilu *BillingInvoiceLineUpdate) SetInvoicingAppExternalID(s string) *BillingInvoiceLineUpdate {
	bilu.mutation.SetInvoicingAppExternalID(s)
	return bilu
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableInvoicingAppExternalID(s *string) *BillingInvoiceLineUpdate {
	if s != nil {
		bilu.SetInvoicingAppExternalID(*s)
	}
	return bilu
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (bilu *BillingInvoiceLineUpdate) ClearInvoicingAppExternalID() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearInvoicingAppExternalID()
	return bilu
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (bilu *BillingInvoiceLineUpdate) SetChildUniqueReferenceID(s string) *BillingInvoiceLineUpdate {
	bilu.mutation.SetChildUniqueReferenceID(s)
	return bilu
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableChildUniqueReferenceID(s *string) *BillingInvoiceLineUpdate {
	if s != nil {
		bilu.SetChildUniqueReferenceID(*s)
	}
	return bilu
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (bilu *BillingInvoiceLineUpdate) ClearChildUniqueReferenceID() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearChildUniqueReferenceID()
	return bilu
}

// SetSubscriptionID sets the "subscription_id" field.
func (bilu *BillingInvoiceLineUpdate) SetSubscriptionID(s string) *BillingInvoiceLineUpdate {
	bilu.mutation.SetSubscriptionID(s)
	return bilu
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableSubscriptionID(s *string) *BillingInvoiceLineUpdate {
	if s != nil {
		bilu.SetSubscriptionID(*s)
	}
	return bilu
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (bilu *BillingInvoiceLineUpdate) ClearSubscriptionID() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearSubscriptionID()
	return bilu
}

// SetSubscriptionPhaseID sets the "subscription_phase_id" field.
func (bilu *BillingInvoiceLineUpdate) SetSubscriptionPhaseID(s string) *BillingInvoiceLineUpdate {
	bilu.mutation.SetSubscriptionPhaseID(s)
	return bilu
}

// SetNillableSubscriptionPhaseID sets the "subscription_phase_id" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableSubscriptionPhaseID(s *string) *BillingInvoiceLineUpdate {
	if s != nil {
		bilu.SetSubscriptionPhaseID(*s)
	}
	return bilu
}

// ClearSubscriptionPhaseID clears the value of the "subscription_phase_id" field.
func (bilu *BillingInvoiceLineUpdate) ClearSubscriptionPhaseID() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearSubscriptionPhaseID()
	return bilu
}

// SetSubscriptionItemID sets the "subscription_item_id" field.
func (bilu *BillingInvoiceLineUpdate) SetSubscriptionItemID(s string) *BillingInvoiceLineUpdate {
	bilu.mutation.SetSubscriptionItemID(s)
	return bilu
}

// SetNillableSubscriptionItemID sets the "subscription_item_id" field if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableSubscriptionItemID(s *string) *BillingInvoiceLineUpdate {
	if s != nil {
		bilu.SetSubscriptionItemID(*s)
	}
	return bilu
}

// ClearSubscriptionItemID clears the value of the "subscription_item_id" field.
func (bilu *BillingInvoiceLineUpdate) ClearSubscriptionItemID() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearSubscriptionItemID()
	return bilu
}

// SetBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID.
func (bilu *BillingInvoiceLineUpdate) SetBillingInvoiceID(id string) *BillingInvoiceLineUpdate {
	bilu.mutation.SetBillingInvoiceID(id)
	return bilu
}

// SetBillingInvoice sets the "billing_invoice" edge to the BillingInvoice entity.
func (bilu *BillingInvoiceLineUpdate) SetBillingInvoice(b *BillingInvoice) *BillingInvoiceLineUpdate {
	return bilu.SetBillingInvoiceID(b.ID)
}

// SetFlatFeeLineID sets the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity by ID.
func (bilu *BillingInvoiceLineUpdate) SetFlatFeeLineID(id string) *BillingInvoiceLineUpdate {
	bilu.mutation.SetFlatFeeLineID(id)
	return bilu
}

// SetNillableFlatFeeLineID sets the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity by ID if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableFlatFeeLineID(id *string) *BillingInvoiceLineUpdate {
	if id != nil {
		bilu = bilu.SetFlatFeeLineID(*id)
	}
	return bilu
}

// SetFlatFeeLine sets the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity.
func (bilu *BillingInvoiceLineUpdate) SetFlatFeeLine(b *BillingInvoiceFlatFeeLineConfig) *BillingInvoiceLineUpdate {
	return bilu.SetFlatFeeLineID(b.ID)
}

// SetUsageBasedLineID sets the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity by ID.
func (bilu *BillingInvoiceLineUpdate) SetUsageBasedLineID(id string) *BillingInvoiceLineUpdate {
	bilu.mutation.SetUsageBasedLineID(id)
	return bilu
}

// SetNillableUsageBasedLineID sets the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity by ID if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableUsageBasedLineID(id *string) *BillingInvoiceLineUpdate {
	if id != nil {
		bilu = bilu.SetUsageBasedLineID(*id)
	}
	return bilu
}

// SetUsageBasedLine sets the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity.
func (bilu *BillingInvoiceLineUpdate) SetUsageBasedLine(b *BillingInvoiceUsageBasedLineConfig) *BillingInvoiceLineUpdate {
	return bilu.SetUsageBasedLineID(b.ID)
}

// SetParentLine sets the "parent_line" edge to the BillingInvoiceLine entity.
func (bilu *BillingInvoiceLineUpdate) SetParentLine(b *BillingInvoiceLine) *BillingInvoiceLineUpdate {
	return bilu.SetParentLineID(b.ID)
}

// AddDetailedLineIDs adds the "detailed_lines" edge to the BillingInvoiceLine entity by IDs.
func (bilu *BillingInvoiceLineUpdate) AddDetailedLineIDs(ids ...string) *BillingInvoiceLineUpdate {
	bilu.mutation.AddDetailedLineIDs(ids...)
	return bilu
}

// AddDetailedLines adds the "detailed_lines" edges to the BillingInvoiceLine entity.
func (bilu *BillingInvoiceLineUpdate) AddDetailedLines(b ...*BillingInvoiceLine) *BillingInvoiceLineUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bilu.AddDetailedLineIDs(ids...)
}

// AddLineDiscountIDs adds the "line_discounts" edge to the BillingInvoiceLineDiscount entity by IDs.
func (bilu *BillingInvoiceLineUpdate) AddLineDiscountIDs(ids ...string) *BillingInvoiceLineUpdate {
	bilu.mutation.AddLineDiscountIDs(ids...)
	return bilu
}

// AddLineDiscounts adds the "line_discounts" edges to the BillingInvoiceLineDiscount entity.
func (bilu *BillingInvoiceLineUpdate) AddLineDiscounts(b ...*BillingInvoiceLineDiscount) *BillingInvoiceLineUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bilu.AddLineDiscountIDs(ids...)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (bilu *BillingInvoiceLineUpdate) SetSubscription(s *Subscription) *BillingInvoiceLineUpdate {
	return bilu.SetSubscriptionID(s.ID)
}

// SetSubscriptionPhase sets the "subscription_phase" edge to the SubscriptionPhase entity.
func (bilu *BillingInvoiceLineUpdate) SetSubscriptionPhase(s *SubscriptionPhase) *BillingInvoiceLineUpdate {
	return bilu.SetSubscriptionPhaseID(s.ID)
}

// SetSubscriptionItem sets the "subscription_item" edge to the SubscriptionItem entity.
func (bilu *BillingInvoiceLineUpdate) SetSubscriptionItem(s *SubscriptionItem) *BillingInvoiceLineUpdate {
	return bilu.SetSubscriptionItemID(s.ID)
}

// SetInvoiceDiscountsID sets the "invoice_discounts" edge to the BillingInvoiceDiscount entity by ID.
func (bilu *BillingInvoiceLineUpdate) SetInvoiceDiscountsID(id string) *BillingInvoiceLineUpdate {
	bilu.mutation.SetInvoiceDiscountsID(id)
	return bilu
}

// SetNillableInvoiceDiscountsID sets the "invoice_discounts" edge to the BillingInvoiceDiscount entity by ID if the given value is not nil.
func (bilu *BillingInvoiceLineUpdate) SetNillableInvoiceDiscountsID(id *string) *BillingInvoiceLineUpdate {
	if id != nil {
		bilu = bilu.SetInvoiceDiscountsID(*id)
	}
	return bilu
}

// SetInvoiceDiscounts sets the "invoice_discounts" edge to the BillingInvoiceDiscount entity.
func (bilu *BillingInvoiceLineUpdate) SetInvoiceDiscounts(b *BillingInvoiceDiscount) *BillingInvoiceLineUpdate {
	return bilu.SetInvoiceDiscountsID(b.ID)
}

// Mutation returns the BillingInvoiceLineMutation object of the builder.
func (bilu *BillingInvoiceLineUpdate) Mutation() *BillingInvoiceLineMutation {
	return bilu.mutation
}

// ClearBillingInvoice clears the "billing_invoice" edge to the BillingInvoice entity.
func (bilu *BillingInvoiceLineUpdate) ClearBillingInvoice() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearBillingInvoice()
	return bilu
}

// ClearFlatFeeLine clears the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity.
func (bilu *BillingInvoiceLineUpdate) ClearFlatFeeLine() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearFlatFeeLine()
	return bilu
}

// ClearUsageBasedLine clears the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity.
func (bilu *BillingInvoiceLineUpdate) ClearUsageBasedLine() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearUsageBasedLine()
	return bilu
}

// ClearParentLine clears the "parent_line" edge to the BillingInvoiceLine entity.
func (bilu *BillingInvoiceLineUpdate) ClearParentLine() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearParentLine()
	return bilu
}

// ClearDetailedLines clears all "detailed_lines" edges to the BillingInvoiceLine entity.
func (bilu *BillingInvoiceLineUpdate) ClearDetailedLines() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearDetailedLines()
	return bilu
}

// RemoveDetailedLineIDs removes the "detailed_lines" edge to BillingInvoiceLine entities by IDs.
func (bilu *BillingInvoiceLineUpdate) RemoveDetailedLineIDs(ids ...string) *BillingInvoiceLineUpdate {
	bilu.mutation.RemoveDetailedLineIDs(ids...)
	return bilu
}

// RemoveDetailedLines removes "detailed_lines" edges to BillingInvoiceLine entities.
func (bilu *BillingInvoiceLineUpdate) RemoveDetailedLines(b ...*BillingInvoiceLine) *BillingInvoiceLineUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bilu.RemoveDetailedLineIDs(ids...)
}

// ClearLineDiscounts clears all "line_discounts" edges to the BillingInvoiceLineDiscount entity.
func (bilu *BillingInvoiceLineUpdate) ClearLineDiscounts() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearLineDiscounts()
	return bilu
}

// RemoveLineDiscountIDs removes the "line_discounts" edge to BillingInvoiceLineDiscount entities by IDs.
func (bilu *BillingInvoiceLineUpdate) RemoveLineDiscountIDs(ids ...string) *BillingInvoiceLineUpdate {
	bilu.mutation.RemoveLineDiscountIDs(ids...)
	return bilu
}

// RemoveLineDiscounts removes "line_discounts" edges to BillingInvoiceLineDiscount entities.
func (bilu *BillingInvoiceLineUpdate) RemoveLineDiscounts(b ...*BillingInvoiceLineDiscount) *BillingInvoiceLineUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bilu.RemoveLineDiscountIDs(ids...)
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (bilu *BillingInvoiceLineUpdate) ClearSubscription() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearSubscription()
	return bilu
}

// ClearSubscriptionPhase clears the "subscription_phase" edge to the SubscriptionPhase entity.
func (bilu *BillingInvoiceLineUpdate) ClearSubscriptionPhase() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearSubscriptionPhase()
	return bilu
}

// ClearSubscriptionItem clears the "subscription_item" edge to the SubscriptionItem entity.
func (bilu *BillingInvoiceLineUpdate) ClearSubscriptionItem() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearSubscriptionItem()
	return bilu
}

// ClearInvoiceDiscounts clears the "invoice_discounts" edge to the BillingInvoiceDiscount entity.
func (bilu *BillingInvoiceLineUpdate) ClearInvoiceDiscounts() *BillingInvoiceLineUpdate {
	bilu.mutation.ClearInvoiceDiscounts()
	return bilu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bilu *BillingInvoiceLineUpdate) Save(ctx context.Context) (int, error) {
	bilu.defaults()
	return withHooks(ctx, bilu.sqlSave, bilu.mutation, bilu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bilu *BillingInvoiceLineUpdate) SaveX(ctx context.Context) int {
	affected, err := bilu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bilu *BillingInvoiceLineUpdate) Exec(ctx context.Context) error {
	_, err := bilu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bilu *BillingInvoiceLineUpdate) ExecX(ctx context.Context) {
	if err := bilu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bilu *BillingInvoiceLineUpdate) defaults() {
	if _, ok := bilu.mutation.UpdatedAt(); !ok {
		v := billinginvoiceline.UpdateDefaultUpdatedAt()
		bilu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bilu *BillingInvoiceLineUpdate) check() error {
	if v, ok := bilu.mutation.Status(); ok {
		if err := billinginvoiceline.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLine.status": %w`, err)}
		}
	}
	if v, ok := bilu.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLine.tax_config": %w`, err)}
		}
	}
	if bilu.mutation.BillingInvoiceCleared() && len(bilu.mutation.BillingInvoiceIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceLine.billing_invoice"`)
	}
	return nil
}

func (bilu *BillingInvoiceLineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bilu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoiceline.Table, billinginvoiceline.Columns, sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString))
	if ps := bilu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bilu.mutation.Metadata(); ok {
		_spec.SetField(billinginvoiceline.FieldMetadata, field.TypeJSON, value)
	}
	if bilu.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoiceline.FieldMetadata, field.TypeJSON)
	}
	if value, ok := bilu.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoiceline.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bilu.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoiceline.FieldDeletedAt, field.TypeTime, value)
	}
	if bilu.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoiceline.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bilu.mutation.Name(); ok {
		_spec.SetField(billinginvoiceline.FieldName, field.TypeString, value)
	}
	if value, ok := bilu.mutation.Description(); ok {
		_spec.SetField(billinginvoiceline.FieldDescription, field.TypeString, value)
	}
	if bilu.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoiceline.FieldDescription, field.TypeString)
	}
	if value, ok := bilu.mutation.Amount(); ok {
		_spec.SetField(billinginvoiceline.FieldAmount, field.TypeOther, value)
	}
	if value, ok := bilu.mutation.TaxesTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxesTotal, field.TypeOther, value)
	}
	if value, ok := bilu.mutation.TaxesInclusiveTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxesInclusiveTotal, field.TypeOther, value)
	}
	if value, ok := bilu.mutation.TaxesExclusiveTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxesExclusiveTotal, field.TypeOther, value)
	}
	if value, ok := bilu.mutation.ChargesTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldChargesTotal, field.TypeOther, value)
	}
	if value, ok := bilu.mutation.DiscountsTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldDiscountsTotal, field.TypeOther, value)
	}
	if value, ok := bilu.mutation.Total(); ok {
		_spec.SetField(billinginvoiceline.FieldTotal, field.TypeOther, value)
	}
	if value, ok := bilu.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoiceline.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := bilu.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoiceline.FieldPeriodEnd, field.TypeTime, value)
	}
	if value, ok := bilu.mutation.InvoiceAt(); ok {
		_spec.SetField(billinginvoiceline.FieldInvoiceAt, field.TypeTime, value)
	}
	if value, ok := bilu.mutation.Status(); ok {
		_spec.SetField(billinginvoiceline.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := bilu.mutation.Quantity(); ok {
		_spec.SetField(billinginvoiceline.FieldQuantity, field.TypeOther, value)
	}
	if bilu.mutation.QuantityCleared() {
		_spec.ClearField(billinginvoiceline.FieldQuantity, field.TypeOther)
	}
	if value, ok := bilu.mutation.TaxConfig(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxConfig, field.TypeJSON, value)
	}
	if bilu.mutation.TaxConfigCleared() {
		_spec.ClearField(billinginvoiceline.FieldTaxConfig, field.TypeJSON)
	}
	if value, ok := bilu.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoiceline.FieldInvoicingAppExternalID, field.TypeString, value)
	}
	if bilu.mutation.InvoicingAppExternalIDCleared() {
		_spec.ClearField(billinginvoiceline.FieldInvoicingAppExternalID, field.TypeString)
	}
	if value, ok := bilu.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoiceline.FieldChildUniqueReferenceID, field.TypeString, value)
	}
	if bilu.mutation.ChildUniqueReferenceIDCleared() {
		_spec.ClearField(billinginvoiceline.FieldChildUniqueReferenceID, field.TypeString)
	}
	if bilu.mutation.BillingInvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.BillingInvoiceTable,
			Columns: []string{billinginvoiceline.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bilu.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.BillingInvoiceTable,
			Columns: []string{billinginvoiceline.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bilu.mutation.FlatFeeLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.FlatFeeLineTable,
			Columns: []string{billinginvoiceline.FlatFeeLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceflatfeelineconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bilu.mutation.FlatFeeLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.FlatFeeLineTable,
			Columns: []string{billinginvoiceline.FlatFeeLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceflatfeelineconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bilu.mutation.UsageBasedLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.UsageBasedLineTable,
			Columns: []string{billinginvoiceline.UsageBasedLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceusagebasedlineconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bilu.mutation.UsageBasedLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.UsageBasedLineTable,
			Columns: []string{billinginvoiceline.UsageBasedLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceusagebasedlineconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bilu.mutation.ParentLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.ParentLineTable,
			Columns: []string{billinginvoiceline.ParentLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bilu.mutation.ParentLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.ParentLineTable,
			Columns: []string{billinginvoiceline.ParentLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bilu.mutation.DetailedLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.DetailedLinesTable,
			Columns: []string{billinginvoiceline.DetailedLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bilu.mutation.RemovedDetailedLinesIDs(); len(nodes) > 0 && !bilu.mutation.DetailedLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.DetailedLinesTable,
			Columns: []string{billinginvoiceline.DetailedLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bilu.mutation.DetailedLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.DetailedLinesTable,
			Columns: []string{billinginvoiceline.DetailedLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bilu.mutation.LineDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineDiscountsTable,
			Columns: []string{billinginvoiceline.LineDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelinediscount.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bilu.mutation.RemovedLineDiscountsIDs(); len(nodes) > 0 && !bilu.mutation.LineDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineDiscountsTable,
			Columns: []string{billinginvoiceline.LineDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelinediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bilu.mutation.LineDiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineDiscountsTable,
			Columns: []string{billinginvoiceline.LineDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelinediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bilu.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionTable,
			Columns: []string{billinginvoiceline.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bilu.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionTable,
			Columns: []string{billinginvoiceline.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bilu.mutation.SubscriptionPhaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionPhaseTable,
			Columns: []string{billinginvoiceline.SubscriptionPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bilu.mutation.SubscriptionPhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionPhaseTable,
			Columns: []string{billinginvoiceline.SubscriptionPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bilu.mutation.SubscriptionItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionItemTable,
			Columns: []string{billinginvoiceline.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bilu.mutation.SubscriptionItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionItemTable,
			Columns: []string{billinginvoiceline.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bilu.mutation.InvoiceDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.InvoiceDiscountsTable,
			Columns: []string{billinginvoiceline.InvoiceDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicediscount.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bilu.mutation.InvoiceDiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.InvoiceDiscountsTable,
			Columns: []string{billinginvoiceline.InvoiceDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bilu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoiceline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bilu.mutation.done = true
	return n, nil
}

// BillingInvoiceLineUpdateOne is the builder for updating a single BillingInvoiceLine entity.
type BillingInvoiceLineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceLineMutation
}

// SetMetadata sets the "metadata" field.
func (biluo *BillingInvoiceLineUpdateOne) SetMetadata(m map[string]string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetMetadata(m)
	return biluo
}

// ClearMetadata clears the value of the "metadata" field.
func (biluo *BillingInvoiceLineUpdateOne) ClearMetadata() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearMetadata()
	return biluo
}

// SetUpdatedAt sets the "updated_at" field.
func (biluo *BillingInvoiceLineUpdateOne) SetUpdatedAt(t time.Time) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetUpdatedAt(t)
	return biluo
}

// SetDeletedAt sets the "deleted_at" field.
func (biluo *BillingInvoiceLineUpdateOne) SetDeletedAt(t time.Time) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetDeletedAt(t)
	return biluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingInvoiceLineUpdateOne {
	if t != nil {
		biluo.SetDeletedAt(*t)
	}
	return biluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (biluo *BillingInvoiceLineUpdateOne) ClearDeletedAt() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearDeletedAt()
	return biluo
}

// SetName sets the "name" field.
func (biluo *BillingInvoiceLineUpdateOne) SetName(s string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetName(s)
	return biluo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableName(s *string) *BillingInvoiceLineUpdateOne {
	if s != nil {
		biluo.SetName(*s)
	}
	return biluo
}

// SetDescription sets the "description" field.
func (biluo *BillingInvoiceLineUpdateOne) SetDescription(s string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetDescription(s)
	return biluo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableDescription(s *string) *BillingInvoiceLineUpdateOne {
	if s != nil {
		biluo.SetDescription(*s)
	}
	return biluo
}

// ClearDescription clears the value of the "description" field.
func (biluo *BillingInvoiceLineUpdateOne) ClearDescription() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearDescription()
	return biluo
}

// SetAmount sets the "amount" field.
func (biluo *BillingInvoiceLineUpdateOne) SetAmount(a alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetAmount(a)
	return biluo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableAmount(a *alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	if a != nil {
		biluo.SetAmount(*a)
	}
	return biluo
}

// SetTaxesTotal sets the "taxes_total" field.
func (biluo *BillingInvoiceLineUpdateOne) SetTaxesTotal(a alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetTaxesTotal(a)
	return biluo
}

// SetNillableTaxesTotal sets the "taxes_total" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableTaxesTotal(a *alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	if a != nil {
		biluo.SetTaxesTotal(*a)
	}
	return biluo
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (biluo *BillingInvoiceLineUpdateOne) SetTaxesInclusiveTotal(a alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetTaxesInclusiveTotal(a)
	return biluo
}

// SetNillableTaxesInclusiveTotal sets the "taxes_inclusive_total" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableTaxesInclusiveTotal(a *alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	if a != nil {
		biluo.SetTaxesInclusiveTotal(*a)
	}
	return biluo
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (biluo *BillingInvoiceLineUpdateOne) SetTaxesExclusiveTotal(a alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetTaxesExclusiveTotal(a)
	return biluo
}

// SetNillableTaxesExclusiveTotal sets the "taxes_exclusive_total" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableTaxesExclusiveTotal(a *alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	if a != nil {
		biluo.SetTaxesExclusiveTotal(*a)
	}
	return biluo
}

// SetChargesTotal sets the "charges_total" field.
func (biluo *BillingInvoiceLineUpdateOne) SetChargesTotal(a alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetChargesTotal(a)
	return biluo
}

// SetNillableChargesTotal sets the "charges_total" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableChargesTotal(a *alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	if a != nil {
		biluo.SetChargesTotal(*a)
	}
	return biluo
}

// SetDiscountsTotal sets the "discounts_total" field.
func (biluo *BillingInvoiceLineUpdateOne) SetDiscountsTotal(a alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetDiscountsTotal(a)
	return biluo
}

// SetNillableDiscountsTotal sets the "discounts_total" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableDiscountsTotal(a *alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	if a != nil {
		biluo.SetDiscountsTotal(*a)
	}
	return biluo
}

// SetTotal sets the "total" field.
func (biluo *BillingInvoiceLineUpdateOne) SetTotal(a alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetTotal(a)
	return biluo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableTotal(a *alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	if a != nil {
		biluo.SetTotal(*a)
	}
	return biluo
}

// SetInvoiceID sets the "invoice_id" field.
func (biluo *BillingInvoiceLineUpdateOne) SetInvoiceID(s string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetInvoiceID(s)
	return biluo
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableInvoiceID(s *string) *BillingInvoiceLineUpdateOne {
	if s != nil {
		biluo.SetInvoiceID(*s)
	}
	return biluo
}

// SetParentLineID sets the "parent_line_id" field.
func (biluo *BillingInvoiceLineUpdateOne) SetParentLineID(s string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetParentLineID(s)
	return biluo
}

// SetNillableParentLineID sets the "parent_line_id" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableParentLineID(s *string) *BillingInvoiceLineUpdateOne {
	if s != nil {
		biluo.SetParentLineID(*s)
	}
	return biluo
}

// ClearParentLineID clears the value of the "parent_line_id" field.
func (biluo *BillingInvoiceLineUpdateOne) ClearParentLineID() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearParentLineID()
	return biluo
}

// SetPeriodStart sets the "period_start" field.
func (biluo *BillingInvoiceLineUpdateOne) SetPeriodStart(t time.Time) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetPeriodStart(t)
	return biluo
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillablePeriodStart(t *time.Time) *BillingInvoiceLineUpdateOne {
	if t != nil {
		biluo.SetPeriodStart(*t)
	}
	return biluo
}

// SetPeriodEnd sets the "period_end" field.
func (biluo *BillingInvoiceLineUpdateOne) SetPeriodEnd(t time.Time) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetPeriodEnd(t)
	return biluo
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillablePeriodEnd(t *time.Time) *BillingInvoiceLineUpdateOne {
	if t != nil {
		biluo.SetPeriodEnd(*t)
	}
	return biluo
}

// SetInvoiceAt sets the "invoice_at" field.
func (biluo *BillingInvoiceLineUpdateOne) SetInvoiceAt(t time.Time) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetInvoiceAt(t)
	return biluo
}

// SetNillableInvoiceAt sets the "invoice_at" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableInvoiceAt(t *time.Time) *BillingInvoiceLineUpdateOne {
	if t != nil {
		biluo.SetInvoiceAt(*t)
	}
	return biluo
}

// SetStatus sets the "status" field.
func (biluo *BillingInvoiceLineUpdateOne) SetStatus(bls billing.InvoiceLineStatus) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetStatus(bls)
	return biluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableStatus(bls *billing.InvoiceLineStatus) *BillingInvoiceLineUpdateOne {
	if bls != nil {
		biluo.SetStatus(*bls)
	}
	return biluo
}

// SetQuantity sets the "quantity" field.
func (biluo *BillingInvoiceLineUpdateOne) SetQuantity(a alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetQuantity(a)
	return biluo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableQuantity(a *alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	if a != nil {
		biluo.SetQuantity(*a)
	}
	return biluo
}

// ClearQuantity clears the value of the "quantity" field.
func (biluo *BillingInvoiceLineUpdateOne) ClearQuantity() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearQuantity()
	return biluo
}

// SetTaxConfig sets the "tax_config" field.
func (biluo *BillingInvoiceLineUpdateOne) SetTaxConfig(pc productcatalog.TaxConfig) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetTaxConfig(pc)
	return biluo
}

// SetNillableTaxConfig sets the "tax_config" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableTaxConfig(pc *productcatalog.TaxConfig) *BillingInvoiceLineUpdateOne {
	if pc != nil {
		biluo.SetTaxConfig(*pc)
	}
	return biluo
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (biluo *BillingInvoiceLineUpdateOne) ClearTaxConfig() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearTaxConfig()
	return biluo
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (biluo *BillingInvoiceLineUpdateOne) SetInvoicingAppExternalID(s string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetInvoicingAppExternalID(s)
	return biluo
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableInvoicingAppExternalID(s *string) *BillingInvoiceLineUpdateOne {
	if s != nil {
		biluo.SetInvoicingAppExternalID(*s)
	}
	return biluo
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (biluo *BillingInvoiceLineUpdateOne) ClearInvoicingAppExternalID() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearInvoicingAppExternalID()
	return biluo
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (biluo *BillingInvoiceLineUpdateOne) SetChildUniqueReferenceID(s string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetChildUniqueReferenceID(s)
	return biluo
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableChildUniqueReferenceID(s *string) *BillingInvoiceLineUpdateOne {
	if s != nil {
		biluo.SetChildUniqueReferenceID(*s)
	}
	return biluo
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (biluo *BillingInvoiceLineUpdateOne) ClearChildUniqueReferenceID() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearChildUniqueReferenceID()
	return biluo
}

// SetSubscriptionID sets the "subscription_id" field.
func (biluo *BillingInvoiceLineUpdateOne) SetSubscriptionID(s string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetSubscriptionID(s)
	return biluo
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableSubscriptionID(s *string) *BillingInvoiceLineUpdateOne {
	if s != nil {
		biluo.SetSubscriptionID(*s)
	}
	return biluo
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (biluo *BillingInvoiceLineUpdateOne) ClearSubscriptionID() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearSubscriptionID()
	return biluo
}

// SetSubscriptionPhaseID sets the "subscription_phase_id" field.
func (biluo *BillingInvoiceLineUpdateOne) SetSubscriptionPhaseID(s string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetSubscriptionPhaseID(s)
	return biluo
}

// SetNillableSubscriptionPhaseID sets the "subscription_phase_id" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableSubscriptionPhaseID(s *string) *BillingInvoiceLineUpdateOne {
	if s != nil {
		biluo.SetSubscriptionPhaseID(*s)
	}
	return biluo
}

// ClearSubscriptionPhaseID clears the value of the "subscription_phase_id" field.
func (biluo *BillingInvoiceLineUpdateOne) ClearSubscriptionPhaseID() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearSubscriptionPhaseID()
	return biluo
}

// SetSubscriptionItemID sets the "subscription_item_id" field.
func (biluo *BillingInvoiceLineUpdateOne) SetSubscriptionItemID(s string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetSubscriptionItemID(s)
	return biluo
}

// SetNillableSubscriptionItemID sets the "subscription_item_id" field if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableSubscriptionItemID(s *string) *BillingInvoiceLineUpdateOne {
	if s != nil {
		biluo.SetSubscriptionItemID(*s)
	}
	return biluo
}

// ClearSubscriptionItemID clears the value of the "subscription_item_id" field.
func (biluo *BillingInvoiceLineUpdateOne) ClearSubscriptionItemID() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearSubscriptionItemID()
	return biluo
}

// SetBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID.
func (biluo *BillingInvoiceLineUpdateOne) SetBillingInvoiceID(id string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetBillingInvoiceID(id)
	return biluo
}

// SetBillingInvoice sets the "billing_invoice" edge to the BillingInvoice entity.
func (biluo *BillingInvoiceLineUpdateOne) SetBillingInvoice(b *BillingInvoice) *BillingInvoiceLineUpdateOne {
	return biluo.SetBillingInvoiceID(b.ID)
}

// SetFlatFeeLineID sets the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity by ID.
func (biluo *BillingInvoiceLineUpdateOne) SetFlatFeeLineID(id string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetFlatFeeLineID(id)
	return biluo
}

// SetNillableFlatFeeLineID sets the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity by ID if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableFlatFeeLineID(id *string) *BillingInvoiceLineUpdateOne {
	if id != nil {
		biluo = biluo.SetFlatFeeLineID(*id)
	}
	return biluo
}

// SetFlatFeeLine sets the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity.
func (biluo *BillingInvoiceLineUpdateOne) SetFlatFeeLine(b *BillingInvoiceFlatFeeLineConfig) *BillingInvoiceLineUpdateOne {
	return biluo.SetFlatFeeLineID(b.ID)
}

// SetUsageBasedLineID sets the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity by ID.
func (biluo *BillingInvoiceLineUpdateOne) SetUsageBasedLineID(id string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetUsageBasedLineID(id)
	return biluo
}

// SetNillableUsageBasedLineID sets the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity by ID if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableUsageBasedLineID(id *string) *BillingInvoiceLineUpdateOne {
	if id != nil {
		biluo = biluo.SetUsageBasedLineID(*id)
	}
	return biluo
}

// SetUsageBasedLine sets the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity.
func (biluo *BillingInvoiceLineUpdateOne) SetUsageBasedLine(b *BillingInvoiceUsageBasedLineConfig) *BillingInvoiceLineUpdateOne {
	return biluo.SetUsageBasedLineID(b.ID)
}

// SetParentLine sets the "parent_line" edge to the BillingInvoiceLine entity.
func (biluo *BillingInvoiceLineUpdateOne) SetParentLine(b *BillingInvoiceLine) *BillingInvoiceLineUpdateOne {
	return biluo.SetParentLineID(b.ID)
}

// AddDetailedLineIDs adds the "detailed_lines" edge to the BillingInvoiceLine entity by IDs.
func (biluo *BillingInvoiceLineUpdateOne) AddDetailedLineIDs(ids ...string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.AddDetailedLineIDs(ids...)
	return biluo
}

// AddDetailedLines adds the "detailed_lines" edges to the BillingInvoiceLine entity.
func (biluo *BillingInvoiceLineUpdateOne) AddDetailedLines(b ...*BillingInvoiceLine) *BillingInvoiceLineUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biluo.AddDetailedLineIDs(ids...)
}

// AddLineDiscountIDs adds the "line_discounts" edge to the BillingInvoiceLineDiscount entity by IDs.
func (biluo *BillingInvoiceLineUpdateOne) AddLineDiscountIDs(ids ...string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.AddLineDiscountIDs(ids...)
	return biluo
}

// AddLineDiscounts adds the "line_discounts" edges to the BillingInvoiceLineDiscount entity.
func (biluo *BillingInvoiceLineUpdateOne) AddLineDiscounts(b ...*BillingInvoiceLineDiscount) *BillingInvoiceLineUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biluo.AddLineDiscountIDs(ids...)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (biluo *BillingInvoiceLineUpdateOne) SetSubscription(s *Subscription) *BillingInvoiceLineUpdateOne {
	return biluo.SetSubscriptionID(s.ID)
}

// SetSubscriptionPhase sets the "subscription_phase" edge to the SubscriptionPhase entity.
func (biluo *BillingInvoiceLineUpdateOne) SetSubscriptionPhase(s *SubscriptionPhase) *BillingInvoiceLineUpdateOne {
	return biluo.SetSubscriptionPhaseID(s.ID)
}

// SetSubscriptionItem sets the "subscription_item" edge to the SubscriptionItem entity.
func (biluo *BillingInvoiceLineUpdateOne) SetSubscriptionItem(s *SubscriptionItem) *BillingInvoiceLineUpdateOne {
	return biluo.SetSubscriptionItemID(s.ID)
}

// SetInvoiceDiscountsID sets the "invoice_discounts" edge to the BillingInvoiceDiscount entity by ID.
func (biluo *BillingInvoiceLineUpdateOne) SetInvoiceDiscountsID(id string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.SetInvoiceDiscountsID(id)
	return biluo
}

// SetNillableInvoiceDiscountsID sets the "invoice_discounts" edge to the BillingInvoiceDiscount entity by ID if the given value is not nil.
func (biluo *BillingInvoiceLineUpdateOne) SetNillableInvoiceDiscountsID(id *string) *BillingInvoiceLineUpdateOne {
	if id != nil {
		biluo = biluo.SetInvoiceDiscountsID(*id)
	}
	return biluo
}

// SetInvoiceDiscounts sets the "invoice_discounts" edge to the BillingInvoiceDiscount entity.
func (biluo *BillingInvoiceLineUpdateOne) SetInvoiceDiscounts(b *BillingInvoiceDiscount) *BillingInvoiceLineUpdateOne {
	return biluo.SetInvoiceDiscountsID(b.ID)
}

// Mutation returns the BillingInvoiceLineMutation object of the builder.
func (biluo *BillingInvoiceLineUpdateOne) Mutation() *BillingInvoiceLineMutation {
	return biluo.mutation
}

// ClearBillingInvoice clears the "billing_invoice" edge to the BillingInvoice entity.
func (biluo *BillingInvoiceLineUpdateOne) ClearBillingInvoice() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearBillingInvoice()
	return biluo
}

// ClearFlatFeeLine clears the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity.
func (biluo *BillingInvoiceLineUpdateOne) ClearFlatFeeLine() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearFlatFeeLine()
	return biluo
}

// ClearUsageBasedLine clears the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity.
func (biluo *BillingInvoiceLineUpdateOne) ClearUsageBasedLine() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearUsageBasedLine()
	return biluo
}

// ClearParentLine clears the "parent_line" edge to the BillingInvoiceLine entity.
func (biluo *BillingInvoiceLineUpdateOne) ClearParentLine() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearParentLine()
	return biluo
}

// ClearDetailedLines clears all "detailed_lines" edges to the BillingInvoiceLine entity.
func (biluo *BillingInvoiceLineUpdateOne) ClearDetailedLines() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearDetailedLines()
	return biluo
}

// RemoveDetailedLineIDs removes the "detailed_lines" edge to BillingInvoiceLine entities by IDs.
func (biluo *BillingInvoiceLineUpdateOne) RemoveDetailedLineIDs(ids ...string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.RemoveDetailedLineIDs(ids...)
	return biluo
}

// RemoveDetailedLines removes "detailed_lines" edges to BillingInvoiceLine entities.
func (biluo *BillingInvoiceLineUpdateOne) RemoveDetailedLines(b ...*BillingInvoiceLine) *BillingInvoiceLineUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biluo.RemoveDetailedLineIDs(ids...)
}

// ClearLineDiscounts clears all "line_discounts" edges to the BillingInvoiceLineDiscount entity.
func (biluo *BillingInvoiceLineUpdateOne) ClearLineDiscounts() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearLineDiscounts()
	return biluo
}

// RemoveLineDiscountIDs removes the "line_discounts" edge to BillingInvoiceLineDiscount entities by IDs.
func (biluo *BillingInvoiceLineUpdateOne) RemoveLineDiscountIDs(ids ...string) *BillingInvoiceLineUpdateOne {
	biluo.mutation.RemoveLineDiscountIDs(ids...)
	return biluo
}

// RemoveLineDiscounts removes "line_discounts" edges to BillingInvoiceLineDiscount entities.
func (biluo *BillingInvoiceLineUpdateOne) RemoveLineDiscounts(b ...*BillingInvoiceLineDiscount) *BillingInvoiceLineUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biluo.RemoveLineDiscountIDs(ids...)
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (biluo *BillingInvoiceLineUpdateOne) ClearSubscription() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearSubscription()
	return biluo
}

// ClearSubscriptionPhase clears the "subscription_phase" edge to the SubscriptionPhase entity.
func (biluo *BillingInvoiceLineUpdateOne) ClearSubscriptionPhase() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearSubscriptionPhase()
	return biluo
}

// ClearSubscriptionItem clears the "subscription_item" edge to the SubscriptionItem entity.
func (biluo *BillingInvoiceLineUpdateOne) ClearSubscriptionItem() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearSubscriptionItem()
	return biluo
}

// ClearInvoiceDiscounts clears the "invoice_discounts" edge to the BillingInvoiceDiscount entity.
func (biluo *BillingInvoiceLineUpdateOne) ClearInvoiceDiscounts() *BillingInvoiceLineUpdateOne {
	biluo.mutation.ClearInvoiceDiscounts()
	return biluo
}

// Where appends a list predicates to the BillingInvoiceLineUpdate builder.
func (biluo *BillingInvoiceLineUpdateOne) Where(ps ...predicate.BillingInvoiceLine) *BillingInvoiceLineUpdateOne {
	biluo.mutation.Where(ps...)
	return biluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (biluo *BillingInvoiceLineUpdateOne) Select(field string, fields ...string) *BillingInvoiceLineUpdateOne {
	biluo.fields = append([]string{field}, fields...)
	return biluo
}

// Save executes the query and returns the updated BillingInvoiceLine entity.
func (biluo *BillingInvoiceLineUpdateOne) Save(ctx context.Context) (*BillingInvoiceLine, error) {
	biluo.defaults()
	return withHooks(ctx, biluo.sqlSave, biluo.mutation, biluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biluo *BillingInvoiceLineUpdateOne) SaveX(ctx context.Context) *BillingInvoiceLine {
	node, err := biluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biluo *BillingInvoiceLineUpdateOne) Exec(ctx context.Context) error {
	_, err := biluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biluo *BillingInvoiceLineUpdateOne) ExecX(ctx context.Context) {
	if err := biluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biluo *BillingInvoiceLineUpdateOne) defaults() {
	if _, ok := biluo.mutation.UpdatedAt(); !ok {
		v := billinginvoiceline.UpdateDefaultUpdatedAt()
		biluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biluo *BillingInvoiceLineUpdateOne) check() error {
	if v, ok := biluo.mutation.Status(); ok {
		if err := billinginvoiceline.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLine.status": %w`, err)}
		}
	}
	if v, ok := biluo.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLine.tax_config": %w`, err)}
		}
	}
	if biluo.mutation.BillingInvoiceCleared() && len(biluo.mutation.BillingInvoiceIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceLine.billing_invoice"`)
	}
	return nil
}

func (biluo *BillingInvoiceLineUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoiceLine, err error) {
	if err := biluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoiceline.Table, billinginvoiceline.Columns, sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString))
	id, ok := biluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoiceLine.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := biluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoiceline.FieldID)
		for _, f := range fields {
			if !billinginvoiceline.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoiceline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := biluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biluo.mutation.Metadata(); ok {
		_spec.SetField(billinginvoiceline.FieldMetadata, field.TypeJSON, value)
	}
	if biluo.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoiceline.FieldMetadata, field.TypeJSON)
	}
	if value, ok := biluo.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoiceline.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biluo.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoiceline.FieldDeletedAt, field.TypeTime, value)
	}
	if biluo.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoiceline.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := biluo.mutation.Name(); ok {
		_spec.SetField(billinginvoiceline.FieldName, field.TypeString, value)
	}
	if value, ok := biluo.mutation.Description(); ok {
		_spec.SetField(billinginvoiceline.FieldDescription, field.TypeString, value)
	}
	if biluo.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoiceline.FieldDescription, field.TypeString)
	}
	if value, ok := biluo.mutation.Amount(); ok {
		_spec.SetField(billinginvoiceline.FieldAmount, field.TypeOther, value)
	}
	if value, ok := biluo.mutation.TaxesTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxesTotal, field.TypeOther, value)
	}
	if value, ok := biluo.mutation.TaxesInclusiveTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxesInclusiveTotal, field.TypeOther, value)
	}
	if value, ok := biluo.mutation.TaxesExclusiveTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxesExclusiveTotal, field.TypeOther, value)
	}
	if value, ok := biluo.mutation.ChargesTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldChargesTotal, field.TypeOther, value)
	}
	if value, ok := biluo.mutation.DiscountsTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldDiscountsTotal, field.TypeOther, value)
	}
	if value, ok := biluo.mutation.Total(); ok {
		_spec.SetField(billinginvoiceline.FieldTotal, field.TypeOther, value)
	}
	if value, ok := biluo.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoiceline.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := biluo.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoiceline.FieldPeriodEnd, field.TypeTime, value)
	}
	if value, ok := biluo.mutation.InvoiceAt(); ok {
		_spec.SetField(billinginvoiceline.FieldInvoiceAt, field.TypeTime, value)
	}
	if value, ok := biluo.mutation.Status(); ok {
		_spec.SetField(billinginvoiceline.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := biluo.mutation.Quantity(); ok {
		_spec.SetField(billinginvoiceline.FieldQuantity, field.TypeOther, value)
	}
	if biluo.mutation.QuantityCleared() {
		_spec.ClearField(billinginvoiceline.FieldQuantity, field.TypeOther)
	}
	if value, ok := biluo.mutation.TaxConfig(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxConfig, field.TypeJSON, value)
	}
	if biluo.mutation.TaxConfigCleared() {
		_spec.ClearField(billinginvoiceline.FieldTaxConfig, field.TypeJSON)
	}
	if value, ok := biluo.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoiceline.FieldInvoicingAppExternalID, field.TypeString, value)
	}
	if biluo.mutation.InvoicingAppExternalIDCleared() {
		_spec.ClearField(billinginvoiceline.FieldInvoicingAppExternalID, field.TypeString)
	}
	if value, ok := biluo.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoiceline.FieldChildUniqueReferenceID, field.TypeString, value)
	}
	if biluo.mutation.ChildUniqueReferenceIDCleared() {
		_spec.ClearField(billinginvoiceline.FieldChildUniqueReferenceID, field.TypeString)
	}
	if biluo.mutation.BillingInvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.BillingInvoiceTable,
			Columns: []string{billinginvoiceline.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biluo.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.BillingInvoiceTable,
			Columns: []string{billinginvoiceline.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biluo.mutation.FlatFeeLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.FlatFeeLineTable,
			Columns: []string{billinginvoiceline.FlatFeeLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceflatfeelineconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biluo.mutation.FlatFeeLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.FlatFeeLineTable,
			Columns: []string{billinginvoiceline.FlatFeeLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceflatfeelineconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biluo.mutation.UsageBasedLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.UsageBasedLineTable,
			Columns: []string{billinginvoiceline.UsageBasedLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceusagebasedlineconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biluo.mutation.UsageBasedLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.UsageBasedLineTable,
			Columns: []string{billinginvoiceline.UsageBasedLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceusagebasedlineconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biluo.mutation.ParentLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.ParentLineTable,
			Columns: []string{billinginvoiceline.ParentLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biluo.mutation.ParentLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.ParentLineTable,
			Columns: []string{billinginvoiceline.ParentLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biluo.mutation.DetailedLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.DetailedLinesTable,
			Columns: []string{billinginvoiceline.DetailedLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biluo.mutation.RemovedDetailedLinesIDs(); len(nodes) > 0 && !biluo.mutation.DetailedLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.DetailedLinesTable,
			Columns: []string{billinginvoiceline.DetailedLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biluo.mutation.DetailedLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.DetailedLinesTable,
			Columns: []string{billinginvoiceline.DetailedLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biluo.mutation.LineDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineDiscountsTable,
			Columns: []string{billinginvoiceline.LineDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelinediscount.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biluo.mutation.RemovedLineDiscountsIDs(); len(nodes) > 0 && !biluo.mutation.LineDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineDiscountsTable,
			Columns: []string{billinginvoiceline.LineDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelinediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biluo.mutation.LineDiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineDiscountsTable,
			Columns: []string{billinginvoiceline.LineDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelinediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biluo.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionTable,
			Columns: []string{billinginvoiceline.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biluo.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionTable,
			Columns: []string{billinginvoiceline.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biluo.mutation.SubscriptionPhaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionPhaseTable,
			Columns: []string{billinginvoiceline.SubscriptionPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biluo.mutation.SubscriptionPhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionPhaseTable,
			Columns: []string{billinginvoiceline.SubscriptionPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biluo.mutation.SubscriptionItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionItemTable,
			Columns: []string{billinginvoiceline.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biluo.mutation.SubscriptionItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionItemTable,
			Columns: []string{billinginvoiceline.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biluo.mutation.InvoiceDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.InvoiceDiscountsTable,
			Columns: []string{billinginvoiceline.InvoiceDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicediscount.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biluo.mutation.InvoiceDiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.InvoiceDiscountsTable,
			Columns: []string{billinginvoiceline.InvoiceDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingInvoiceLine{config: biluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoiceline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	biluo.mutation.done = true
	return _node, nil
}
