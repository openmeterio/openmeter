// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceflatfeelineconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicelinediscount"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicelineusagediscount"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicesplitlinegroup"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceusagebasedlineconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionphase"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/models"
)

// BillingInvoiceLineUpdate is the builder for updating BillingInvoiceLine entities.
type BillingInvoiceLineUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceLineMutation
}

// Where appends a list predicates to the BillingInvoiceLineUpdate builder.
func (_u *BillingInvoiceLineUpdate) Where(ps ...predicate.BillingInvoiceLine) *BillingInvoiceLineUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAnnotations sets the "annotations" field.
func (_u *BillingInvoiceLineUpdate) SetAnnotations(v models.Annotations) *BillingInvoiceLineUpdate {
	_u.mutation.SetAnnotations(v)
	return _u
}

// ClearAnnotations clears the value of the "annotations" field.
func (_u *BillingInvoiceLineUpdate) ClearAnnotations() *BillingInvoiceLineUpdate {
	_u.mutation.ClearAnnotations()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *BillingInvoiceLineUpdate) SetMetadata(v map[string]string) *BillingInvoiceLineUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *BillingInvoiceLineUpdate) ClearMetadata() *BillingInvoiceLineUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BillingInvoiceLineUpdate) SetUpdatedAt(v time.Time) *BillingInvoiceLineUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *BillingInvoiceLineUpdate) SetDeletedAt(v time.Time) *BillingInvoiceLineUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableDeletedAt(v *time.Time) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *BillingInvoiceLineUpdate) ClearDeletedAt() *BillingInvoiceLineUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *BillingInvoiceLineUpdate) SetName(v string) *BillingInvoiceLineUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableName(v *string) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *BillingInvoiceLineUpdate) SetDescription(v string) *BillingInvoiceLineUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableDescription(v *string) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BillingInvoiceLineUpdate) ClearDescription() *BillingInvoiceLineUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetTaxConfig sets the "tax_config" field.
func (_u *BillingInvoiceLineUpdate) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceLineUpdate {
	_u.mutation.SetTaxConfig(v)
	return _u
}

// SetNillableTaxConfig sets the "tax_config" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableTaxConfig(v *productcatalog.TaxConfig) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetTaxConfig(*v)
	}
	return _u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (_u *BillingInvoiceLineUpdate) ClearTaxConfig() *BillingInvoiceLineUpdate {
	_u.mutation.ClearTaxConfig()
	return _u
}

// SetAmount sets the "amount" field.
func (_u *BillingInvoiceLineUpdate) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableAmount(v *alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// SetTaxesTotal sets the "taxes_total" field.
func (_u *BillingInvoiceLineUpdate) SetTaxesTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	_u.mutation.SetTaxesTotal(v)
	return _u
}

// SetNillableTaxesTotal sets the "taxes_total" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableTaxesTotal(v *alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetTaxesTotal(*v)
	}
	return _u
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (_u *BillingInvoiceLineUpdate) SetTaxesInclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	_u.mutation.SetTaxesInclusiveTotal(v)
	return _u
}

// SetNillableTaxesInclusiveTotal sets the "taxes_inclusive_total" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableTaxesInclusiveTotal(v *alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetTaxesInclusiveTotal(*v)
	}
	return _u
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (_u *BillingInvoiceLineUpdate) SetTaxesExclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	_u.mutation.SetTaxesExclusiveTotal(v)
	return _u
}

// SetNillableTaxesExclusiveTotal sets the "taxes_exclusive_total" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableTaxesExclusiveTotal(v *alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetTaxesExclusiveTotal(*v)
	}
	return _u
}

// SetChargesTotal sets the "charges_total" field.
func (_u *BillingInvoiceLineUpdate) SetChargesTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	_u.mutation.SetChargesTotal(v)
	return _u
}

// SetNillableChargesTotal sets the "charges_total" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableChargesTotal(v *alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetChargesTotal(*v)
	}
	return _u
}

// SetDiscountsTotal sets the "discounts_total" field.
func (_u *BillingInvoiceLineUpdate) SetDiscountsTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	_u.mutation.SetDiscountsTotal(v)
	return _u
}

// SetNillableDiscountsTotal sets the "discounts_total" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableDiscountsTotal(v *alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetDiscountsTotal(*v)
	}
	return _u
}

// SetTotal sets the "total" field.
func (_u *BillingInvoiceLineUpdate) SetTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	_u.mutation.SetTotal(v)
	return _u
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableTotal(v *alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetTotal(*v)
	}
	return _u
}

// SetPeriodStart sets the "period_start" field.
func (_u *BillingInvoiceLineUpdate) SetPeriodStart(v time.Time) *BillingInvoiceLineUpdate {
	_u.mutation.SetPeriodStart(v)
	return _u
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillablePeriodStart(v *time.Time) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetPeriodStart(*v)
	}
	return _u
}

// SetPeriodEnd sets the "period_end" field.
func (_u *BillingInvoiceLineUpdate) SetPeriodEnd(v time.Time) *BillingInvoiceLineUpdate {
	_u.mutation.SetPeriodEnd(v)
	return _u
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillablePeriodEnd(v *time.Time) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetPeriodEnd(*v)
	}
	return _u
}

// SetInvoiceID sets the "invoice_id" field.
func (_u *BillingInvoiceLineUpdate) SetInvoiceID(v string) *BillingInvoiceLineUpdate {
	_u.mutation.SetInvoiceID(v)
	return _u
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableInvoiceID(v *string) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetInvoiceID(*v)
	}
	return _u
}

// SetManagedBy sets the "managed_by" field.
func (_u *BillingInvoiceLineUpdate) SetManagedBy(v billing.InvoiceLineManagedBy) *BillingInvoiceLineUpdate {
	_u.mutation.SetManagedBy(v)
	return _u
}

// SetNillableManagedBy sets the "managed_by" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableManagedBy(v *billing.InvoiceLineManagedBy) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetManagedBy(*v)
	}
	return _u
}

// SetParentLineID sets the "parent_line_id" field.
func (_u *BillingInvoiceLineUpdate) SetParentLineID(v string) *BillingInvoiceLineUpdate {
	_u.mutation.SetParentLineID(v)
	return _u
}

// SetNillableParentLineID sets the "parent_line_id" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableParentLineID(v *string) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetParentLineID(*v)
	}
	return _u
}

// ClearParentLineID clears the value of the "parent_line_id" field.
func (_u *BillingInvoiceLineUpdate) ClearParentLineID() *BillingInvoiceLineUpdate {
	_u.mutation.ClearParentLineID()
	return _u
}

// SetInvoiceAt sets the "invoice_at" field.
func (_u *BillingInvoiceLineUpdate) SetInvoiceAt(v time.Time) *BillingInvoiceLineUpdate {
	_u.mutation.SetInvoiceAt(v)
	return _u
}

// SetNillableInvoiceAt sets the "invoice_at" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableInvoiceAt(v *time.Time) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetInvoiceAt(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *BillingInvoiceLineUpdate) SetStatus(v billing.InvoiceLineStatus) *BillingInvoiceLineUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableStatus(v *billing.InvoiceLineStatus) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetQuantity sets the "quantity" field.
func (_u *BillingInvoiceLineUpdate) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	_u.mutation.SetQuantity(v)
	return _u
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableQuantity(v *alpacadecimal.Decimal) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetQuantity(*v)
	}
	return _u
}

// ClearQuantity clears the value of the "quantity" field.
func (_u *BillingInvoiceLineUpdate) ClearQuantity() *BillingInvoiceLineUpdate {
	_u.mutation.ClearQuantity()
	return _u
}

// SetRatecardDiscounts sets the "ratecard_discounts" field.
func (_u *BillingInvoiceLineUpdate) SetRatecardDiscounts(v *billing.Discounts) *BillingInvoiceLineUpdate {
	_u.mutation.SetRatecardDiscounts(v)
	return _u
}

// ClearRatecardDiscounts clears the value of the "ratecard_discounts" field.
func (_u *BillingInvoiceLineUpdate) ClearRatecardDiscounts() *BillingInvoiceLineUpdate {
	_u.mutation.ClearRatecardDiscounts()
	return _u
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (_u *BillingInvoiceLineUpdate) SetInvoicingAppExternalID(v string) *BillingInvoiceLineUpdate {
	_u.mutation.SetInvoicingAppExternalID(v)
	return _u
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableInvoicingAppExternalID(v *string) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetInvoicingAppExternalID(*v)
	}
	return _u
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (_u *BillingInvoiceLineUpdate) ClearInvoicingAppExternalID() *BillingInvoiceLineUpdate {
	_u.mutation.ClearInvoicingAppExternalID()
	return _u
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (_u *BillingInvoiceLineUpdate) SetChildUniqueReferenceID(v string) *BillingInvoiceLineUpdate {
	_u.mutation.SetChildUniqueReferenceID(v)
	return _u
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableChildUniqueReferenceID(v *string) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetChildUniqueReferenceID(*v)
	}
	return _u
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (_u *BillingInvoiceLineUpdate) ClearChildUniqueReferenceID() *BillingInvoiceLineUpdate {
	_u.mutation.ClearChildUniqueReferenceID()
	return _u
}

// SetSubscriptionID sets the "subscription_id" field.
func (_u *BillingInvoiceLineUpdate) SetSubscriptionID(v string) *BillingInvoiceLineUpdate {
	_u.mutation.SetSubscriptionID(v)
	return _u
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableSubscriptionID(v *string) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetSubscriptionID(*v)
	}
	return _u
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (_u *BillingInvoiceLineUpdate) ClearSubscriptionID() *BillingInvoiceLineUpdate {
	_u.mutation.ClearSubscriptionID()
	return _u
}

// SetSubscriptionPhaseID sets the "subscription_phase_id" field.
func (_u *BillingInvoiceLineUpdate) SetSubscriptionPhaseID(v string) *BillingInvoiceLineUpdate {
	_u.mutation.SetSubscriptionPhaseID(v)
	return _u
}

// SetNillableSubscriptionPhaseID sets the "subscription_phase_id" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableSubscriptionPhaseID(v *string) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetSubscriptionPhaseID(*v)
	}
	return _u
}

// ClearSubscriptionPhaseID clears the value of the "subscription_phase_id" field.
func (_u *BillingInvoiceLineUpdate) ClearSubscriptionPhaseID() *BillingInvoiceLineUpdate {
	_u.mutation.ClearSubscriptionPhaseID()
	return _u
}

// SetSubscriptionItemID sets the "subscription_item_id" field.
func (_u *BillingInvoiceLineUpdate) SetSubscriptionItemID(v string) *BillingInvoiceLineUpdate {
	_u.mutation.SetSubscriptionItemID(v)
	return _u
}

// SetNillableSubscriptionItemID sets the "subscription_item_id" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableSubscriptionItemID(v *string) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetSubscriptionItemID(*v)
	}
	return _u
}

// ClearSubscriptionItemID clears the value of the "subscription_item_id" field.
func (_u *BillingInvoiceLineUpdate) ClearSubscriptionItemID() *BillingInvoiceLineUpdate {
	_u.mutation.ClearSubscriptionItemID()
	return _u
}

// SetSubscriptionBillingPeriodFrom sets the "subscription_billing_period_from" field.
func (_u *BillingInvoiceLineUpdate) SetSubscriptionBillingPeriodFrom(v time.Time) *BillingInvoiceLineUpdate {
	_u.mutation.SetSubscriptionBillingPeriodFrom(v)
	return _u
}

// SetNillableSubscriptionBillingPeriodFrom sets the "subscription_billing_period_from" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableSubscriptionBillingPeriodFrom(v *time.Time) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetSubscriptionBillingPeriodFrom(*v)
	}
	return _u
}

// ClearSubscriptionBillingPeriodFrom clears the value of the "subscription_billing_period_from" field.
func (_u *BillingInvoiceLineUpdate) ClearSubscriptionBillingPeriodFrom() *BillingInvoiceLineUpdate {
	_u.mutation.ClearSubscriptionBillingPeriodFrom()
	return _u
}

// SetSubscriptionBillingPeriodTo sets the "subscription_billing_period_to" field.
func (_u *BillingInvoiceLineUpdate) SetSubscriptionBillingPeriodTo(v time.Time) *BillingInvoiceLineUpdate {
	_u.mutation.SetSubscriptionBillingPeriodTo(v)
	return _u
}

// SetNillableSubscriptionBillingPeriodTo sets the "subscription_billing_period_to" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableSubscriptionBillingPeriodTo(v *time.Time) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetSubscriptionBillingPeriodTo(*v)
	}
	return _u
}

// ClearSubscriptionBillingPeriodTo clears the value of the "subscription_billing_period_to" field.
func (_u *BillingInvoiceLineUpdate) ClearSubscriptionBillingPeriodTo() *BillingInvoiceLineUpdate {
	_u.mutation.ClearSubscriptionBillingPeriodTo()
	return _u
}

// SetSplitLineGroupID sets the "split_line_group_id" field.
func (_u *BillingInvoiceLineUpdate) SetSplitLineGroupID(v string) *BillingInvoiceLineUpdate {
	_u.mutation.SetSplitLineGroupID(v)
	return _u
}

// SetNillableSplitLineGroupID sets the "split_line_group_id" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableSplitLineGroupID(v *string) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetSplitLineGroupID(*v)
	}
	return _u
}

// ClearSplitLineGroupID clears the value of the "split_line_group_id" field.
func (_u *BillingInvoiceLineUpdate) ClearSplitLineGroupID() *BillingInvoiceLineUpdate {
	_u.mutation.ClearSplitLineGroupID()
	return _u
}

// SetLineIds sets the "line_ids" field.
func (_u *BillingInvoiceLineUpdate) SetLineIds(v string) *BillingInvoiceLineUpdate {
	_u.mutation.SetLineIds(v)
	return _u
}

// SetNillableLineIds sets the "line_ids" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableLineIds(v *string) *BillingInvoiceLineUpdate {
	if v != nil {
		_u.SetLineIds(*v)
	}
	return _u
}

// ClearLineIds clears the value of the "line_ids" field.
func (_u *BillingInvoiceLineUpdate) ClearLineIds() *BillingInvoiceLineUpdate {
	_u.mutation.ClearLineIds()
	return _u
}

// SetBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID.
func (_u *BillingInvoiceLineUpdate) SetBillingInvoiceID(id string) *BillingInvoiceLineUpdate {
	_u.mutation.SetBillingInvoiceID(id)
	return _u
}

// SetBillingInvoice sets the "billing_invoice" edge to the BillingInvoice entity.
func (_u *BillingInvoiceLineUpdate) SetBillingInvoice(v *BillingInvoice) *BillingInvoiceLineUpdate {
	return _u.SetBillingInvoiceID(v.ID)
}

// SetSplitLineGroup sets the "split_line_group" edge to the BillingInvoiceSplitLineGroup entity.
func (_u *BillingInvoiceLineUpdate) SetSplitLineGroup(v *BillingInvoiceSplitLineGroup) *BillingInvoiceLineUpdate {
	return _u.SetSplitLineGroupID(v.ID)
}

// SetFlatFeeLineID sets the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity by ID.
func (_u *BillingInvoiceLineUpdate) SetFlatFeeLineID(id string) *BillingInvoiceLineUpdate {
	_u.mutation.SetFlatFeeLineID(id)
	return _u
}

// SetNillableFlatFeeLineID sets the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity by ID if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableFlatFeeLineID(id *string) *BillingInvoiceLineUpdate {
	if id != nil {
		_u = _u.SetFlatFeeLineID(*id)
	}
	return _u
}

// SetFlatFeeLine sets the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity.
func (_u *BillingInvoiceLineUpdate) SetFlatFeeLine(v *BillingInvoiceFlatFeeLineConfig) *BillingInvoiceLineUpdate {
	return _u.SetFlatFeeLineID(v.ID)
}

// SetUsageBasedLineID sets the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity by ID.
func (_u *BillingInvoiceLineUpdate) SetUsageBasedLineID(id string) *BillingInvoiceLineUpdate {
	_u.mutation.SetUsageBasedLineID(id)
	return _u
}

// SetNillableUsageBasedLineID sets the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity by ID if the given value is not nil.
func (_u *BillingInvoiceLineUpdate) SetNillableUsageBasedLineID(id *string) *BillingInvoiceLineUpdate {
	if id != nil {
		_u = _u.SetUsageBasedLineID(*id)
	}
	return _u
}

// SetUsageBasedLine sets the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity.
func (_u *BillingInvoiceLineUpdate) SetUsageBasedLine(v *BillingInvoiceUsageBasedLineConfig) *BillingInvoiceLineUpdate {
	return _u.SetUsageBasedLineID(v.ID)
}

// SetParentLine sets the "parent_line" edge to the BillingInvoiceLine entity.
func (_u *BillingInvoiceLineUpdate) SetParentLine(v *BillingInvoiceLine) *BillingInvoiceLineUpdate {
	return _u.SetParentLineID(v.ID)
}

// AddDetailedLineIDs adds the "detailed_lines" edge to the BillingInvoiceLine entity by IDs.
func (_u *BillingInvoiceLineUpdate) AddDetailedLineIDs(ids ...string) *BillingInvoiceLineUpdate {
	_u.mutation.AddDetailedLineIDs(ids...)
	return _u
}

// AddDetailedLines adds the "detailed_lines" edges to the BillingInvoiceLine entity.
func (_u *BillingInvoiceLineUpdate) AddDetailedLines(v ...*BillingInvoiceLine) *BillingInvoiceLineUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDetailedLineIDs(ids...)
}

// AddLineUsageDiscountIDs adds the "line_usage_discounts" edge to the BillingInvoiceLineUsageDiscount entity by IDs.
func (_u *BillingInvoiceLineUpdate) AddLineUsageDiscountIDs(ids ...string) *BillingInvoiceLineUpdate {
	_u.mutation.AddLineUsageDiscountIDs(ids...)
	return _u
}

// AddLineUsageDiscounts adds the "line_usage_discounts" edges to the BillingInvoiceLineUsageDiscount entity.
func (_u *BillingInvoiceLineUpdate) AddLineUsageDiscounts(v ...*BillingInvoiceLineUsageDiscount) *BillingInvoiceLineUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLineUsageDiscountIDs(ids...)
}

// AddLineAmountDiscountIDs adds the "line_amount_discounts" edge to the BillingInvoiceLineDiscount entity by IDs.
func (_u *BillingInvoiceLineUpdate) AddLineAmountDiscountIDs(ids ...string) *BillingInvoiceLineUpdate {
	_u.mutation.AddLineAmountDiscountIDs(ids...)
	return _u
}

// AddLineAmountDiscounts adds the "line_amount_discounts" edges to the BillingInvoiceLineDiscount entity.
func (_u *BillingInvoiceLineUpdate) AddLineAmountDiscounts(v ...*BillingInvoiceLineDiscount) *BillingInvoiceLineUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLineAmountDiscountIDs(ids...)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (_u *BillingInvoiceLineUpdate) SetSubscription(v *Subscription) *BillingInvoiceLineUpdate {
	return _u.SetSubscriptionID(v.ID)
}

// SetSubscriptionPhase sets the "subscription_phase" edge to the SubscriptionPhase entity.
func (_u *BillingInvoiceLineUpdate) SetSubscriptionPhase(v *SubscriptionPhase) *BillingInvoiceLineUpdate {
	return _u.SetSubscriptionPhaseID(v.ID)
}

// SetSubscriptionItem sets the "subscription_item" edge to the SubscriptionItem entity.
func (_u *BillingInvoiceLineUpdate) SetSubscriptionItem(v *SubscriptionItem) *BillingInvoiceLineUpdate {
	return _u.SetSubscriptionItemID(v.ID)
}

// Mutation returns the BillingInvoiceLineMutation object of the builder.
func (_u *BillingInvoiceLineUpdate) Mutation() *BillingInvoiceLineMutation {
	return _u.mutation
}

// ClearBillingInvoice clears the "billing_invoice" edge to the BillingInvoice entity.
func (_u *BillingInvoiceLineUpdate) ClearBillingInvoice() *BillingInvoiceLineUpdate {
	_u.mutation.ClearBillingInvoice()
	return _u
}

// ClearSplitLineGroup clears the "split_line_group" edge to the BillingInvoiceSplitLineGroup entity.
func (_u *BillingInvoiceLineUpdate) ClearSplitLineGroup() *BillingInvoiceLineUpdate {
	_u.mutation.ClearSplitLineGroup()
	return _u
}

// ClearFlatFeeLine clears the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity.
func (_u *BillingInvoiceLineUpdate) ClearFlatFeeLine() *BillingInvoiceLineUpdate {
	_u.mutation.ClearFlatFeeLine()
	return _u
}

// ClearUsageBasedLine clears the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity.
func (_u *BillingInvoiceLineUpdate) ClearUsageBasedLine() *BillingInvoiceLineUpdate {
	_u.mutation.ClearUsageBasedLine()
	return _u
}

// ClearParentLine clears the "parent_line" edge to the BillingInvoiceLine entity.
func (_u *BillingInvoiceLineUpdate) ClearParentLine() *BillingInvoiceLineUpdate {
	_u.mutation.ClearParentLine()
	return _u
}

// ClearDetailedLines clears all "detailed_lines" edges to the BillingInvoiceLine entity.
func (_u *BillingInvoiceLineUpdate) ClearDetailedLines() *BillingInvoiceLineUpdate {
	_u.mutation.ClearDetailedLines()
	return _u
}

// RemoveDetailedLineIDs removes the "detailed_lines" edge to BillingInvoiceLine entities by IDs.
func (_u *BillingInvoiceLineUpdate) RemoveDetailedLineIDs(ids ...string) *BillingInvoiceLineUpdate {
	_u.mutation.RemoveDetailedLineIDs(ids...)
	return _u
}

// RemoveDetailedLines removes "detailed_lines" edges to BillingInvoiceLine entities.
func (_u *BillingInvoiceLineUpdate) RemoveDetailedLines(v ...*BillingInvoiceLine) *BillingInvoiceLineUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDetailedLineIDs(ids...)
}

// ClearLineUsageDiscounts clears all "line_usage_discounts" edges to the BillingInvoiceLineUsageDiscount entity.
func (_u *BillingInvoiceLineUpdate) ClearLineUsageDiscounts() *BillingInvoiceLineUpdate {
	_u.mutation.ClearLineUsageDiscounts()
	return _u
}

// RemoveLineUsageDiscountIDs removes the "line_usage_discounts" edge to BillingInvoiceLineUsageDiscount entities by IDs.
func (_u *BillingInvoiceLineUpdate) RemoveLineUsageDiscountIDs(ids ...string) *BillingInvoiceLineUpdate {
	_u.mutation.RemoveLineUsageDiscountIDs(ids...)
	return _u
}

// RemoveLineUsageDiscounts removes "line_usage_discounts" edges to BillingInvoiceLineUsageDiscount entities.
func (_u *BillingInvoiceLineUpdate) RemoveLineUsageDiscounts(v ...*BillingInvoiceLineUsageDiscount) *BillingInvoiceLineUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLineUsageDiscountIDs(ids...)
}

// ClearLineAmountDiscounts clears all "line_amount_discounts" edges to the BillingInvoiceLineDiscount entity.
func (_u *BillingInvoiceLineUpdate) ClearLineAmountDiscounts() *BillingInvoiceLineUpdate {
	_u.mutation.ClearLineAmountDiscounts()
	return _u
}

// RemoveLineAmountDiscountIDs removes the "line_amount_discounts" edge to BillingInvoiceLineDiscount entities by IDs.
func (_u *BillingInvoiceLineUpdate) RemoveLineAmountDiscountIDs(ids ...string) *BillingInvoiceLineUpdate {
	_u.mutation.RemoveLineAmountDiscountIDs(ids...)
	return _u
}

// RemoveLineAmountDiscounts removes "line_amount_discounts" edges to BillingInvoiceLineDiscount entities.
func (_u *BillingInvoiceLineUpdate) RemoveLineAmountDiscounts(v ...*BillingInvoiceLineDiscount) *BillingInvoiceLineUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLineAmountDiscountIDs(ids...)
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (_u *BillingInvoiceLineUpdate) ClearSubscription() *BillingInvoiceLineUpdate {
	_u.mutation.ClearSubscription()
	return _u
}

// ClearSubscriptionPhase clears the "subscription_phase" edge to the SubscriptionPhase entity.
func (_u *BillingInvoiceLineUpdate) ClearSubscriptionPhase() *BillingInvoiceLineUpdate {
	_u.mutation.ClearSubscriptionPhase()
	return _u
}

// ClearSubscriptionItem clears the "subscription_item" edge to the SubscriptionItem entity.
func (_u *BillingInvoiceLineUpdate) ClearSubscriptionItem() *BillingInvoiceLineUpdate {
	_u.mutation.ClearSubscriptionItem()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BillingInvoiceLineUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BillingInvoiceLineUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BillingInvoiceLineUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BillingInvoiceLineUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BillingInvoiceLineUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := billinginvoiceline.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BillingInvoiceLineUpdate) check() error {
	if v, ok := _u.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLine.tax_config": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ManagedBy(); ok {
		if err := billinginvoiceline.ManagedByValidator(v); err != nil {
			return &ValidationError{Name: "managed_by", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLine.managed_by": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := billinginvoiceline.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLine.status": %w`, err)}
		}
	}
	if _u.mutation.BillingInvoiceCleared() && len(_u.mutation.BillingInvoiceIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceLine.billing_invoice"`)
	}
	return nil
}

func (_u *BillingInvoiceLineUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoiceline.Table, billinginvoiceline.Columns, sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Annotations(); ok {
		_spec.SetField(billinginvoiceline.FieldAnnotations, field.TypeJSON, value)
	}
	if _u.mutation.AnnotationsCleared() {
		_spec.ClearField(billinginvoiceline.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(billinginvoiceline.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoiceline.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoiceline.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoiceline.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoiceline.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(billinginvoiceline.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(billinginvoiceline.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoiceline.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.TaxConfig(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxConfig, field.TypeJSON, value)
	}
	if _u.mutation.TaxConfigCleared() {
		_spec.ClearField(billinginvoiceline.FieldTaxConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(billinginvoiceline.FieldAmount, field.TypeOther, value)
	}
	if value, ok := _u.mutation.TaxesTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxesTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.TaxesInclusiveTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxesInclusiveTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.TaxesExclusiveTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxesExclusiveTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.ChargesTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldChargesTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.DiscountsTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldDiscountsTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.Total(); ok {
		_spec.SetField(billinginvoiceline.FieldTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoiceline.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := _u.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoiceline.FieldPeriodEnd, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ManagedBy(); ok {
		_spec.SetField(billinginvoiceline.FieldManagedBy, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.InvoiceAt(); ok {
		_spec.SetField(billinginvoiceline.FieldInvoiceAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(billinginvoiceline.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Quantity(); ok {
		_spec.SetField(billinginvoiceline.FieldQuantity, field.TypeOther, value)
	}
	if _u.mutation.QuantityCleared() {
		_spec.ClearField(billinginvoiceline.FieldQuantity, field.TypeOther)
	}
	if value, ok := _u.mutation.RatecardDiscounts(); ok {
		vv, err := billinginvoiceline.ValueScanner.RatecardDiscounts.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(billinginvoiceline.FieldRatecardDiscounts, field.TypeString, vv)
	}
	if _u.mutation.RatecardDiscountsCleared() {
		_spec.ClearField(billinginvoiceline.FieldRatecardDiscounts, field.TypeString)
	}
	if value, ok := _u.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoiceline.FieldInvoicingAppExternalID, field.TypeString, value)
	}
	if _u.mutation.InvoicingAppExternalIDCleared() {
		_spec.ClearField(billinginvoiceline.FieldInvoicingAppExternalID, field.TypeString)
	}
	if value, ok := _u.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoiceline.FieldChildUniqueReferenceID, field.TypeString, value)
	}
	if _u.mutation.ChildUniqueReferenceIDCleared() {
		_spec.ClearField(billinginvoiceline.FieldChildUniqueReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.SubscriptionBillingPeriodFrom(); ok {
		_spec.SetField(billinginvoiceline.FieldSubscriptionBillingPeriodFrom, field.TypeTime, value)
	}
	if _u.mutation.SubscriptionBillingPeriodFromCleared() {
		_spec.ClearField(billinginvoiceline.FieldSubscriptionBillingPeriodFrom, field.TypeTime)
	}
	if value, ok := _u.mutation.SubscriptionBillingPeriodTo(); ok {
		_spec.SetField(billinginvoiceline.FieldSubscriptionBillingPeriodTo, field.TypeTime, value)
	}
	if _u.mutation.SubscriptionBillingPeriodToCleared() {
		_spec.ClearField(billinginvoiceline.FieldSubscriptionBillingPeriodTo, field.TypeTime)
	}
	if value, ok := _u.mutation.LineIds(); ok {
		_spec.SetField(billinginvoiceline.FieldLineIds, field.TypeString, value)
	}
	if _u.mutation.LineIdsCleared() {
		_spec.ClearField(billinginvoiceline.FieldLineIds, field.TypeString)
	}
	if _u.mutation.BillingInvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.BillingInvoiceTable,
			Columns: []string{billinginvoiceline.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.BillingInvoiceTable,
			Columns: []string{billinginvoiceline.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SplitLineGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SplitLineGroupTable,
			Columns: []string{billinginvoiceline.SplitLineGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SplitLineGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SplitLineGroupTable,
			Columns: []string{billinginvoiceline.SplitLineGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FlatFeeLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.FlatFeeLineTable,
			Columns: []string{billinginvoiceline.FlatFeeLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceflatfeelineconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FlatFeeLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.FlatFeeLineTable,
			Columns: []string{billinginvoiceline.FlatFeeLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceflatfeelineconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UsageBasedLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.UsageBasedLineTable,
			Columns: []string{billinginvoiceline.UsageBasedLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceusagebasedlineconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsageBasedLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.UsageBasedLineTable,
			Columns: []string{billinginvoiceline.UsageBasedLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceusagebasedlineconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.ParentLineTable,
			Columns: []string{billinginvoiceline.ParentLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.ParentLineTable,
			Columns: []string{billinginvoiceline.ParentLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DetailedLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.DetailedLinesTable,
			Columns: []string{billinginvoiceline.DetailedLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDetailedLinesIDs(); len(nodes) > 0 && !_u.mutation.DetailedLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.DetailedLinesTable,
			Columns: []string{billinginvoiceline.DetailedLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DetailedLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.DetailedLinesTable,
			Columns: []string{billinginvoiceline.DetailedLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LineUsageDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineUsageDiscountsTable,
			Columns: []string{billinginvoiceline.LineUsageDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelineusagediscount.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLineUsageDiscountsIDs(); len(nodes) > 0 && !_u.mutation.LineUsageDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineUsageDiscountsTable,
			Columns: []string{billinginvoiceline.LineUsageDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelineusagediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LineUsageDiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineUsageDiscountsTable,
			Columns: []string{billinginvoiceline.LineUsageDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelineusagediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LineAmountDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineAmountDiscountsTable,
			Columns: []string{billinginvoiceline.LineAmountDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelinediscount.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLineAmountDiscountsIDs(); len(nodes) > 0 && !_u.mutation.LineAmountDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineAmountDiscountsTable,
			Columns: []string{billinginvoiceline.LineAmountDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelinediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LineAmountDiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineAmountDiscountsTable,
			Columns: []string{billinginvoiceline.LineAmountDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelinediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionTable,
			Columns: []string{billinginvoiceline.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionTable,
			Columns: []string{billinginvoiceline.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscriptionPhaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionPhaseTable,
			Columns: []string{billinginvoiceline.SubscriptionPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscriptionPhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionPhaseTable,
			Columns: []string{billinginvoiceline.SubscriptionPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscriptionItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionItemTable,
			Columns: []string{billinginvoiceline.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscriptionItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionItemTable,
			Columns: []string{billinginvoiceline.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoiceline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BillingInvoiceLineUpdateOne is the builder for updating a single BillingInvoiceLine entity.
type BillingInvoiceLineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceLineMutation
}

// SetAnnotations sets the "annotations" field.
func (_u *BillingInvoiceLineUpdateOne) SetAnnotations(v models.Annotations) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetAnnotations(v)
	return _u
}

// ClearAnnotations clears the value of the "annotations" field.
func (_u *BillingInvoiceLineUpdateOne) ClearAnnotations() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearAnnotations()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *BillingInvoiceLineUpdateOne) SetMetadata(v map[string]string) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *BillingInvoiceLineUpdateOne) ClearMetadata() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BillingInvoiceLineUpdateOne) SetUpdatedAt(v time.Time) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *BillingInvoiceLineUpdateOne) SetDeletedAt(v time.Time) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableDeletedAt(v *time.Time) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *BillingInvoiceLineUpdateOne) ClearDeletedAt() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *BillingInvoiceLineUpdateOne) SetName(v string) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableName(v *string) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *BillingInvoiceLineUpdateOne) SetDescription(v string) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableDescription(v *string) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BillingInvoiceLineUpdateOne) ClearDescription() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetTaxConfig sets the "tax_config" field.
func (_u *BillingInvoiceLineUpdateOne) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetTaxConfig(v)
	return _u
}

// SetNillableTaxConfig sets the "tax_config" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableTaxConfig(v *productcatalog.TaxConfig) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetTaxConfig(*v)
	}
	return _u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (_u *BillingInvoiceLineUpdateOne) ClearTaxConfig() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearTaxConfig()
	return _u
}

// SetAmount sets the "amount" field.
func (_u *BillingInvoiceLineUpdateOne) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableAmount(v *alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// SetTaxesTotal sets the "taxes_total" field.
func (_u *BillingInvoiceLineUpdateOne) SetTaxesTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetTaxesTotal(v)
	return _u
}

// SetNillableTaxesTotal sets the "taxes_total" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableTaxesTotal(v *alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetTaxesTotal(*v)
	}
	return _u
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (_u *BillingInvoiceLineUpdateOne) SetTaxesInclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetTaxesInclusiveTotal(v)
	return _u
}

// SetNillableTaxesInclusiveTotal sets the "taxes_inclusive_total" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableTaxesInclusiveTotal(v *alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetTaxesInclusiveTotal(*v)
	}
	return _u
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (_u *BillingInvoiceLineUpdateOne) SetTaxesExclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetTaxesExclusiveTotal(v)
	return _u
}

// SetNillableTaxesExclusiveTotal sets the "taxes_exclusive_total" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableTaxesExclusiveTotal(v *alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetTaxesExclusiveTotal(*v)
	}
	return _u
}

// SetChargesTotal sets the "charges_total" field.
func (_u *BillingInvoiceLineUpdateOne) SetChargesTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetChargesTotal(v)
	return _u
}

// SetNillableChargesTotal sets the "charges_total" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableChargesTotal(v *alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetChargesTotal(*v)
	}
	return _u
}

// SetDiscountsTotal sets the "discounts_total" field.
func (_u *BillingInvoiceLineUpdateOne) SetDiscountsTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetDiscountsTotal(v)
	return _u
}

// SetNillableDiscountsTotal sets the "discounts_total" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableDiscountsTotal(v *alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetDiscountsTotal(*v)
	}
	return _u
}

// SetTotal sets the "total" field.
func (_u *BillingInvoiceLineUpdateOne) SetTotal(v alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetTotal(v)
	return _u
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableTotal(v *alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetTotal(*v)
	}
	return _u
}

// SetPeriodStart sets the "period_start" field.
func (_u *BillingInvoiceLineUpdateOne) SetPeriodStart(v time.Time) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetPeriodStart(v)
	return _u
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillablePeriodStart(v *time.Time) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetPeriodStart(*v)
	}
	return _u
}

// SetPeriodEnd sets the "period_end" field.
func (_u *BillingInvoiceLineUpdateOne) SetPeriodEnd(v time.Time) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetPeriodEnd(v)
	return _u
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillablePeriodEnd(v *time.Time) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetPeriodEnd(*v)
	}
	return _u
}

// SetInvoiceID sets the "invoice_id" field.
func (_u *BillingInvoiceLineUpdateOne) SetInvoiceID(v string) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetInvoiceID(v)
	return _u
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableInvoiceID(v *string) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetInvoiceID(*v)
	}
	return _u
}

// SetManagedBy sets the "managed_by" field.
func (_u *BillingInvoiceLineUpdateOne) SetManagedBy(v billing.InvoiceLineManagedBy) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetManagedBy(v)
	return _u
}

// SetNillableManagedBy sets the "managed_by" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableManagedBy(v *billing.InvoiceLineManagedBy) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetManagedBy(*v)
	}
	return _u
}

// SetParentLineID sets the "parent_line_id" field.
func (_u *BillingInvoiceLineUpdateOne) SetParentLineID(v string) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetParentLineID(v)
	return _u
}

// SetNillableParentLineID sets the "parent_line_id" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableParentLineID(v *string) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetParentLineID(*v)
	}
	return _u
}

// ClearParentLineID clears the value of the "parent_line_id" field.
func (_u *BillingInvoiceLineUpdateOne) ClearParentLineID() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearParentLineID()
	return _u
}

// SetInvoiceAt sets the "invoice_at" field.
func (_u *BillingInvoiceLineUpdateOne) SetInvoiceAt(v time.Time) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetInvoiceAt(v)
	return _u
}

// SetNillableInvoiceAt sets the "invoice_at" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableInvoiceAt(v *time.Time) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetInvoiceAt(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *BillingInvoiceLineUpdateOne) SetStatus(v billing.InvoiceLineStatus) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableStatus(v *billing.InvoiceLineStatus) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetQuantity sets the "quantity" field.
func (_u *BillingInvoiceLineUpdateOne) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetQuantity(v)
	return _u
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableQuantity(v *alpacadecimal.Decimal) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetQuantity(*v)
	}
	return _u
}

// ClearQuantity clears the value of the "quantity" field.
func (_u *BillingInvoiceLineUpdateOne) ClearQuantity() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearQuantity()
	return _u
}

// SetRatecardDiscounts sets the "ratecard_discounts" field.
func (_u *BillingInvoiceLineUpdateOne) SetRatecardDiscounts(v *billing.Discounts) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetRatecardDiscounts(v)
	return _u
}

// ClearRatecardDiscounts clears the value of the "ratecard_discounts" field.
func (_u *BillingInvoiceLineUpdateOne) ClearRatecardDiscounts() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearRatecardDiscounts()
	return _u
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (_u *BillingInvoiceLineUpdateOne) SetInvoicingAppExternalID(v string) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetInvoicingAppExternalID(v)
	return _u
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableInvoicingAppExternalID(v *string) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetInvoicingAppExternalID(*v)
	}
	return _u
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (_u *BillingInvoiceLineUpdateOne) ClearInvoicingAppExternalID() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearInvoicingAppExternalID()
	return _u
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (_u *BillingInvoiceLineUpdateOne) SetChildUniqueReferenceID(v string) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetChildUniqueReferenceID(v)
	return _u
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableChildUniqueReferenceID(v *string) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetChildUniqueReferenceID(*v)
	}
	return _u
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (_u *BillingInvoiceLineUpdateOne) ClearChildUniqueReferenceID() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearChildUniqueReferenceID()
	return _u
}

// SetSubscriptionID sets the "subscription_id" field.
func (_u *BillingInvoiceLineUpdateOne) SetSubscriptionID(v string) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetSubscriptionID(v)
	return _u
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableSubscriptionID(v *string) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetSubscriptionID(*v)
	}
	return _u
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (_u *BillingInvoiceLineUpdateOne) ClearSubscriptionID() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearSubscriptionID()
	return _u
}

// SetSubscriptionPhaseID sets the "subscription_phase_id" field.
func (_u *BillingInvoiceLineUpdateOne) SetSubscriptionPhaseID(v string) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetSubscriptionPhaseID(v)
	return _u
}

// SetNillableSubscriptionPhaseID sets the "subscription_phase_id" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableSubscriptionPhaseID(v *string) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetSubscriptionPhaseID(*v)
	}
	return _u
}

// ClearSubscriptionPhaseID clears the value of the "subscription_phase_id" field.
func (_u *BillingInvoiceLineUpdateOne) ClearSubscriptionPhaseID() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearSubscriptionPhaseID()
	return _u
}

// SetSubscriptionItemID sets the "subscription_item_id" field.
func (_u *BillingInvoiceLineUpdateOne) SetSubscriptionItemID(v string) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetSubscriptionItemID(v)
	return _u
}

// SetNillableSubscriptionItemID sets the "subscription_item_id" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableSubscriptionItemID(v *string) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetSubscriptionItemID(*v)
	}
	return _u
}

// ClearSubscriptionItemID clears the value of the "subscription_item_id" field.
func (_u *BillingInvoiceLineUpdateOne) ClearSubscriptionItemID() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearSubscriptionItemID()
	return _u
}

// SetSubscriptionBillingPeriodFrom sets the "subscription_billing_period_from" field.
func (_u *BillingInvoiceLineUpdateOne) SetSubscriptionBillingPeriodFrom(v time.Time) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetSubscriptionBillingPeriodFrom(v)
	return _u
}

// SetNillableSubscriptionBillingPeriodFrom sets the "subscription_billing_period_from" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableSubscriptionBillingPeriodFrom(v *time.Time) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetSubscriptionBillingPeriodFrom(*v)
	}
	return _u
}

// ClearSubscriptionBillingPeriodFrom clears the value of the "subscription_billing_period_from" field.
func (_u *BillingInvoiceLineUpdateOne) ClearSubscriptionBillingPeriodFrom() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearSubscriptionBillingPeriodFrom()
	return _u
}

// SetSubscriptionBillingPeriodTo sets the "subscription_billing_period_to" field.
func (_u *BillingInvoiceLineUpdateOne) SetSubscriptionBillingPeriodTo(v time.Time) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetSubscriptionBillingPeriodTo(v)
	return _u
}

// SetNillableSubscriptionBillingPeriodTo sets the "subscription_billing_period_to" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableSubscriptionBillingPeriodTo(v *time.Time) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetSubscriptionBillingPeriodTo(*v)
	}
	return _u
}

// ClearSubscriptionBillingPeriodTo clears the value of the "subscription_billing_period_to" field.
func (_u *BillingInvoiceLineUpdateOne) ClearSubscriptionBillingPeriodTo() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearSubscriptionBillingPeriodTo()
	return _u
}

// SetSplitLineGroupID sets the "split_line_group_id" field.
func (_u *BillingInvoiceLineUpdateOne) SetSplitLineGroupID(v string) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetSplitLineGroupID(v)
	return _u
}

// SetNillableSplitLineGroupID sets the "split_line_group_id" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableSplitLineGroupID(v *string) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetSplitLineGroupID(*v)
	}
	return _u
}

// ClearSplitLineGroupID clears the value of the "split_line_group_id" field.
func (_u *BillingInvoiceLineUpdateOne) ClearSplitLineGroupID() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearSplitLineGroupID()
	return _u
}

// SetLineIds sets the "line_ids" field.
func (_u *BillingInvoiceLineUpdateOne) SetLineIds(v string) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetLineIds(v)
	return _u
}

// SetNillableLineIds sets the "line_ids" field if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableLineIds(v *string) *BillingInvoiceLineUpdateOne {
	if v != nil {
		_u.SetLineIds(*v)
	}
	return _u
}

// ClearLineIds clears the value of the "line_ids" field.
func (_u *BillingInvoiceLineUpdateOne) ClearLineIds() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearLineIds()
	return _u
}

// SetBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID.
func (_u *BillingInvoiceLineUpdateOne) SetBillingInvoiceID(id string) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetBillingInvoiceID(id)
	return _u
}

// SetBillingInvoice sets the "billing_invoice" edge to the BillingInvoice entity.
func (_u *BillingInvoiceLineUpdateOne) SetBillingInvoice(v *BillingInvoice) *BillingInvoiceLineUpdateOne {
	return _u.SetBillingInvoiceID(v.ID)
}

// SetSplitLineGroup sets the "split_line_group" edge to the BillingInvoiceSplitLineGroup entity.
func (_u *BillingInvoiceLineUpdateOne) SetSplitLineGroup(v *BillingInvoiceSplitLineGroup) *BillingInvoiceLineUpdateOne {
	return _u.SetSplitLineGroupID(v.ID)
}

// SetFlatFeeLineID sets the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity by ID.
func (_u *BillingInvoiceLineUpdateOne) SetFlatFeeLineID(id string) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetFlatFeeLineID(id)
	return _u
}

// SetNillableFlatFeeLineID sets the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity by ID if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableFlatFeeLineID(id *string) *BillingInvoiceLineUpdateOne {
	if id != nil {
		_u = _u.SetFlatFeeLineID(*id)
	}
	return _u
}

// SetFlatFeeLine sets the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity.
func (_u *BillingInvoiceLineUpdateOne) SetFlatFeeLine(v *BillingInvoiceFlatFeeLineConfig) *BillingInvoiceLineUpdateOne {
	return _u.SetFlatFeeLineID(v.ID)
}

// SetUsageBasedLineID sets the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity by ID.
func (_u *BillingInvoiceLineUpdateOne) SetUsageBasedLineID(id string) *BillingInvoiceLineUpdateOne {
	_u.mutation.SetUsageBasedLineID(id)
	return _u
}

// SetNillableUsageBasedLineID sets the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity by ID if the given value is not nil.
func (_u *BillingInvoiceLineUpdateOne) SetNillableUsageBasedLineID(id *string) *BillingInvoiceLineUpdateOne {
	if id != nil {
		_u = _u.SetUsageBasedLineID(*id)
	}
	return _u
}

// SetUsageBasedLine sets the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity.
func (_u *BillingInvoiceLineUpdateOne) SetUsageBasedLine(v *BillingInvoiceUsageBasedLineConfig) *BillingInvoiceLineUpdateOne {
	return _u.SetUsageBasedLineID(v.ID)
}

// SetParentLine sets the "parent_line" edge to the BillingInvoiceLine entity.
func (_u *BillingInvoiceLineUpdateOne) SetParentLine(v *BillingInvoiceLine) *BillingInvoiceLineUpdateOne {
	return _u.SetParentLineID(v.ID)
}

// AddDetailedLineIDs adds the "detailed_lines" edge to the BillingInvoiceLine entity by IDs.
func (_u *BillingInvoiceLineUpdateOne) AddDetailedLineIDs(ids ...string) *BillingInvoiceLineUpdateOne {
	_u.mutation.AddDetailedLineIDs(ids...)
	return _u
}

// AddDetailedLines adds the "detailed_lines" edges to the BillingInvoiceLine entity.
func (_u *BillingInvoiceLineUpdateOne) AddDetailedLines(v ...*BillingInvoiceLine) *BillingInvoiceLineUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDetailedLineIDs(ids...)
}

// AddLineUsageDiscountIDs adds the "line_usage_discounts" edge to the BillingInvoiceLineUsageDiscount entity by IDs.
func (_u *BillingInvoiceLineUpdateOne) AddLineUsageDiscountIDs(ids ...string) *BillingInvoiceLineUpdateOne {
	_u.mutation.AddLineUsageDiscountIDs(ids...)
	return _u
}

// AddLineUsageDiscounts adds the "line_usage_discounts" edges to the BillingInvoiceLineUsageDiscount entity.
func (_u *BillingInvoiceLineUpdateOne) AddLineUsageDiscounts(v ...*BillingInvoiceLineUsageDiscount) *BillingInvoiceLineUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLineUsageDiscountIDs(ids...)
}

// AddLineAmountDiscountIDs adds the "line_amount_discounts" edge to the BillingInvoiceLineDiscount entity by IDs.
func (_u *BillingInvoiceLineUpdateOne) AddLineAmountDiscountIDs(ids ...string) *BillingInvoiceLineUpdateOne {
	_u.mutation.AddLineAmountDiscountIDs(ids...)
	return _u
}

// AddLineAmountDiscounts adds the "line_amount_discounts" edges to the BillingInvoiceLineDiscount entity.
func (_u *BillingInvoiceLineUpdateOne) AddLineAmountDiscounts(v ...*BillingInvoiceLineDiscount) *BillingInvoiceLineUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLineAmountDiscountIDs(ids...)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (_u *BillingInvoiceLineUpdateOne) SetSubscription(v *Subscription) *BillingInvoiceLineUpdateOne {
	return _u.SetSubscriptionID(v.ID)
}

// SetSubscriptionPhase sets the "subscription_phase" edge to the SubscriptionPhase entity.
func (_u *BillingInvoiceLineUpdateOne) SetSubscriptionPhase(v *SubscriptionPhase) *BillingInvoiceLineUpdateOne {
	return _u.SetSubscriptionPhaseID(v.ID)
}

// SetSubscriptionItem sets the "subscription_item" edge to the SubscriptionItem entity.
func (_u *BillingInvoiceLineUpdateOne) SetSubscriptionItem(v *SubscriptionItem) *BillingInvoiceLineUpdateOne {
	return _u.SetSubscriptionItemID(v.ID)
}

// Mutation returns the BillingInvoiceLineMutation object of the builder.
func (_u *BillingInvoiceLineUpdateOne) Mutation() *BillingInvoiceLineMutation {
	return _u.mutation
}

// ClearBillingInvoice clears the "billing_invoice" edge to the BillingInvoice entity.
func (_u *BillingInvoiceLineUpdateOne) ClearBillingInvoice() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearBillingInvoice()
	return _u
}

// ClearSplitLineGroup clears the "split_line_group" edge to the BillingInvoiceSplitLineGroup entity.
func (_u *BillingInvoiceLineUpdateOne) ClearSplitLineGroup() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearSplitLineGroup()
	return _u
}

// ClearFlatFeeLine clears the "flat_fee_line" edge to the BillingInvoiceFlatFeeLineConfig entity.
func (_u *BillingInvoiceLineUpdateOne) ClearFlatFeeLine() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearFlatFeeLine()
	return _u
}

// ClearUsageBasedLine clears the "usage_based_line" edge to the BillingInvoiceUsageBasedLineConfig entity.
func (_u *BillingInvoiceLineUpdateOne) ClearUsageBasedLine() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearUsageBasedLine()
	return _u
}

// ClearParentLine clears the "parent_line" edge to the BillingInvoiceLine entity.
func (_u *BillingInvoiceLineUpdateOne) ClearParentLine() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearParentLine()
	return _u
}

// ClearDetailedLines clears all "detailed_lines" edges to the BillingInvoiceLine entity.
func (_u *BillingInvoiceLineUpdateOne) ClearDetailedLines() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearDetailedLines()
	return _u
}

// RemoveDetailedLineIDs removes the "detailed_lines" edge to BillingInvoiceLine entities by IDs.
func (_u *BillingInvoiceLineUpdateOne) RemoveDetailedLineIDs(ids ...string) *BillingInvoiceLineUpdateOne {
	_u.mutation.RemoveDetailedLineIDs(ids...)
	return _u
}

// RemoveDetailedLines removes "detailed_lines" edges to BillingInvoiceLine entities.
func (_u *BillingInvoiceLineUpdateOne) RemoveDetailedLines(v ...*BillingInvoiceLine) *BillingInvoiceLineUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDetailedLineIDs(ids...)
}

// ClearLineUsageDiscounts clears all "line_usage_discounts" edges to the BillingInvoiceLineUsageDiscount entity.
func (_u *BillingInvoiceLineUpdateOne) ClearLineUsageDiscounts() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearLineUsageDiscounts()
	return _u
}

// RemoveLineUsageDiscountIDs removes the "line_usage_discounts" edge to BillingInvoiceLineUsageDiscount entities by IDs.
func (_u *BillingInvoiceLineUpdateOne) RemoveLineUsageDiscountIDs(ids ...string) *BillingInvoiceLineUpdateOne {
	_u.mutation.RemoveLineUsageDiscountIDs(ids...)
	return _u
}

// RemoveLineUsageDiscounts removes "line_usage_discounts" edges to BillingInvoiceLineUsageDiscount entities.
func (_u *BillingInvoiceLineUpdateOne) RemoveLineUsageDiscounts(v ...*BillingInvoiceLineUsageDiscount) *BillingInvoiceLineUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLineUsageDiscountIDs(ids...)
}

// ClearLineAmountDiscounts clears all "line_amount_discounts" edges to the BillingInvoiceLineDiscount entity.
func (_u *BillingInvoiceLineUpdateOne) ClearLineAmountDiscounts() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearLineAmountDiscounts()
	return _u
}

// RemoveLineAmountDiscountIDs removes the "line_amount_discounts" edge to BillingInvoiceLineDiscount entities by IDs.
func (_u *BillingInvoiceLineUpdateOne) RemoveLineAmountDiscountIDs(ids ...string) *BillingInvoiceLineUpdateOne {
	_u.mutation.RemoveLineAmountDiscountIDs(ids...)
	return _u
}

// RemoveLineAmountDiscounts removes "line_amount_discounts" edges to BillingInvoiceLineDiscount entities.
func (_u *BillingInvoiceLineUpdateOne) RemoveLineAmountDiscounts(v ...*BillingInvoiceLineDiscount) *BillingInvoiceLineUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLineAmountDiscountIDs(ids...)
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (_u *BillingInvoiceLineUpdateOne) ClearSubscription() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearSubscription()
	return _u
}

// ClearSubscriptionPhase clears the "subscription_phase" edge to the SubscriptionPhase entity.
func (_u *BillingInvoiceLineUpdateOne) ClearSubscriptionPhase() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearSubscriptionPhase()
	return _u
}

// ClearSubscriptionItem clears the "subscription_item" edge to the SubscriptionItem entity.
func (_u *BillingInvoiceLineUpdateOne) ClearSubscriptionItem() *BillingInvoiceLineUpdateOne {
	_u.mutation.ClearSubscriptionItem()
	return _u
}

// Where appends a list predicates to the BillingInvoiceLineUpdate builder.
func (_u *BillingInvoiceLineUpdateOne) Where(ps ...predicate.BillingInvoiceLine) *BillingInvoiceLineUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BillingInvoiceLineUpdateOne) Select(field string, fields ...string) *BillingInvoiceLineUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BillingInvoiceLine entity.
func (_u *BillingInvoiceLineUpdateOne) Save(ctx context.Context) (*BillingInvoiceLine, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BillingInvoiceLineUpdateOne) SaveX(ctx context.Context) *BillingInvoiceLine {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BillingInvoiceLineUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BillingInvoiceLineUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BillingInvoiceLineUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := billinginvoiceline.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BillingInvoiceLineUpdateOne) check() error {
	if v, ok := _u.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLine.tax_config": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ManagedBy(); ok {
		if err := billinginvoiceline.ManagedByValidator(v); err != nil {
			return &ValidationError{Name: "managed_by", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLine.managed_by": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := billinginvoiceline.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLine.status": %w`, err)}
		}
	}
	if _u.mutation.BillingInvoiceCleared() && len(_u.mutation.BillingInvoiceIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceLine.billing_invoice"`)
	}
	return nil
}

func (_u *BillingInvoiceLineUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoiceLine, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoiceline.Table, billinginvoiceline.Columns, sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoiceLine.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoiceline.FieldID)
		for _, f := range fields {
			if !billinginvoiceline.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoiceline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Annotations(); ok {
		_spec.SetField(billinginvoiceline.FieldAnnotations, field.TypeJSON, value)
	}
	if _u.mutation.AnnotationsCleared() {
		_spec.ClearField(billinginvoiceline.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(billinginvoiceline.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoiceline.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoiceline.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoiceline.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoiceline.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(billinginvoiceline.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(billinginvoiceline.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoiceline.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.TaxConfig(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxConfig, field.TypeJSON, value)
	}
	if _u.mutation.TaxConfigCleared() {
		_spec.ClearField(billinginvoiceline.FieldTaxConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(billinginvoiceline.FieldAmount, field.TypeOther, value)
	}
	if value, ok := _u.mutation.TaxesTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxesTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.TaxesInclusiveTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxesInclusiveTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.TaxesExclusiveTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldTaxesExclusiveTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.ChargesTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldChargesTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.DiscountsTotal(); ok {
		_spec.SetField(billinginvoiceline.FieldDiscountsTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.Total(); ok {
		_spec.SetField(billinginvoiceline.FieldTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoiceline.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := _u.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoiceline.FieldPeriodEnd, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ManagedBy(); ok {
		_spec.SetField(billinginvoiceline.FieldManagedBy, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.InvoiceAt(); ok {
		_spec.SetField(billinginvoiceline.FieldInvoiceAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(billinginvoiceline.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Quantity(); ok {
		_spec.SetField(billinginvoiceline.FieldQuantity, field.TypeOther, value)
	}
	if _u.mutation.QuantityCleared() {
		_spec.ClearField(billinginvoiceline.FieldQuantity, field.TypeOther)
	}
	if value, ok := _u.mutation.RatecardDiscounts(); ok {
		vv, err := billinginvoiceline.ValueScanner.RatecardDiscounts.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(billinginvoiceline.FieldRatecardDiscounts, field.TypeString, vv)
	}
	if _u.mutation.RatecardDiscountsCleared() {
		_spec.ClearField(billinginvoiceline.FieldRatecardDiscounts, field.TypeString)
	}
	if value, ok := _u.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoiceline.FieldInvoicingAppExternalID, field.TypeString, value)
	}
	if _u.mutation.InvoicingAppExternalIDCleared() {
		_spec.ClearField(billinginvoiceline.FieldInvoicingAppExternalID, field.TypeString)
	}
	if value, ok := _u.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoiceline.FieldChildUniqueReferenceID, field.TypeString, value)
	}
	if _u.mutation.ChildUniqueReferenceIDCleared() {
		_spec.ClearField(billinginvoiceline.FieldChildUniqueReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.SubscriptionBillingPeriodFrom(); ok {
		_spec.SetField(billinginvoiceline.FieldSubscriptionBillingPeriodFrom, field.TypeTime, value)
	}
	if _u.mutation.SubscriptionBillingPeriodFromCleared() {
		_spec.ClearField(billinginvoiceline.FieldSubscriptionBillingPeriodFrom, field.TypeTime)
	}
	if value, ok := _u.mutation.SubscriptionBillingPeriodTo(); ok {
		_spec.SetField(billinginvoiceline.FieldSubscriptionBillingPeriodTo, field.TypeTime, value)
	}
	if _u.mutation.SubscriptionBillingPeriodToCleared() {
		_spec.ClearField(billinginvoiceline.FieldSubscriptionBillingPeriodTo, field.TypeTime)
	}
	if value, ok := _u.mutation.LineIds(); ok {
		_spec.SetField(billinginvoiceline.FieldLineIds, field.TypeString, value)
	}
	if _u.mutation.LineIdsCleared() {
		_spec.ClearField(billinginvoiceline.FieldLineIds, field.TypeString)
	}
	if _u.mutation.BillingInvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.BillingInvoiceTable,
			Columns: []string{billinginvoiceline.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.BillingInvoiceTable,
			Columns: []string{billinginvoiceline.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SplitLineGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SplitLineGroupTable,
			Columns: []string{billinginvoiceline.SplitLineGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SplitLineGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SplitLineGroupTable,
			Columns: []string{billinginvoiceline.SplitLineGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicesplitlinegroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FlatFeeLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.FlatFeeLineTable,
			Columns: []string{billinginvoiceline.FlatFeeLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceflatfeelineconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FlatFeeLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.FlatFeeLineTable,
			Columns: []string{billinginvoiceline.FlatFeeLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceflatfeelineconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UsageBasedLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.UsageBasedLineTable,
			Columns: []string{billinginvoiceline.UsageBasedLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceusagebasedlineconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsageBasedLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billinginvoiceline.UsageBasedLineTable,
			Columns: []string{billinginvoiceline.UsageBasedLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceusagebasedlineconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.ParentLineTable,
			Columns: []string{billinginvoiceline.ParentLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.ParentLineTable,
			Columns: []string{billinginvoiceline.ParentLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DetailedLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.DetailedLinesTable,
			Columns: []string{billinginvoiceline.DetailedLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDetailedLinesIDs(); len(nodes) > 0 && !_u.mutation.DetailedLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.DetailedLinesTable,
			Columns: []string{billinginvoiceline.DetailedLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DetailedLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.DetailedLinesTable,
			Columns: []string{billinginvoiceline.DetailedLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LineUsageDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineUsageDiscountsTable,
			Columns: []string{billinginvoiceline.LineUsageDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelineusagediscount.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLineUsageDiscountsIDs(); len(nodes) > 0 && !_u.mutation.LineUsageDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineUsageDiscountsTable,
			Columns: []string{billinginvoiceline.LineUsageDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelineusagediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LineUsageDiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineUsageDiscountsTable,
			Columns: []string{billinginvoiceline.LineUsageDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelineusagediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LineAmountDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineAmountDiscountsTable,
			Columns: []string{billinginvoiceline.LineAmountDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelinediscount.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLineAmountDiscountsIDs(); len(nodes) > 0 && !_u.mutation.LineAmountDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineAmountDiscountsTable,
			Columns: []string{billinginvoiceline.LineAmountDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelinediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LineAmountDiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoiceline.LineAmountDiscountsTable,
			Columns: []string{billinginvoiceline.LineAmountDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicelinediscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionTable,
			Columns: []string{billinginvoiceline.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionTable,
			Columns: []string{billinginvoiceline.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscriptionPhaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionPhaseTable,
			Columns: []string{billinginvoiceline.SubscriptionPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscriptionPhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionPhaseTable,
			Columns: []string{billinginvoiceline.SubscriptionPhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscriptionItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionItemTable,
			Columns: []string{billinginvoiceline.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscriptionItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoiceline.SubscriptionItemTable,
			Columns: []string{billinginvoiceline.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingInvoiceLine{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoiceline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
