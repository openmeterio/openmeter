// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
)

// SubscriptionItemDelete is the builder for deleting a SubscriptionItem entity.
type SubscriptionItemDelete struct {
	config
	hooks    []Hook
	mutation *SubscriptionItemMutation
}

// Where appends a list predicates to the SubscriptionItemDelete builder.
func (sid *SubscriptionItemDelete) Where(ps ...predicate.SubscriptionItem) *SubscriptionItemDelete {
	sid.mutation.Where(ps...)
	return sid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sid *SubscriptionItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sid.sqlExec, sid.mutation, sid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sid *SubscriptionItemDelete) ExecX(ctx context.Context) int {
	n, err := sid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sid *SubscriptionItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(subscriptionitem.Table, sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString))
	if ps := sid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sid.mutation.done = true
	return affected, err
}

// SubscriptionItemDeleteOne is the builder for deleting a single SubscriptionItem entity.
type SubscriptionItemDeleteOne struct {
	sid *SubscriptionItemDelete
}

// Where appends a list predicates to the SubscriptionItemDelete builder.
func (sido *SubscriptionItemDeleteOne) Where(ps ...predicate.SubscriptionItem) *SubscriptionItemDeleteOne {
	sido.sid.mutation.Where(ps...)
	return sido
}

// Exec executes the deletion query.
func (sido *SubscriptionItemDeleteOne) Exec(ctx context.Context) error {
	n, err := sido.sid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{subscriptionitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sido *SubscriptionItemDeleteOne) ExecX(ctx context.Context) {
	if err := sido.Exec(ctx); err != nil {
		panic(err)
	}
}
