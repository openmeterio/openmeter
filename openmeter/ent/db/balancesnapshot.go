// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/credit/balance"
	"github.com/openmeterio/openmeter/openmeter/ent/db/balancesnapshot"
	"github.com/openmeterio/openmeter/openmeter/ent/db/entitlement"
)

// BalanceSnapshot is the model entity for the BalanceSnapshot schema.
type BalanceSnapshot struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID string `json:"owner_id,omitempty"`
	// GrantBalances holds the value of the "grant_balances" field.
	GrantBalances balance.Map `json:"grant_balances,omitempty"`
	// Usage holds the value of the "usage" field.
	Usage *balance.SnapshottedUsage `json:"usage,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance float64 `json:"balance,omitempty"`
	// Overage holds the value of the "overage" field.
	Overage float64 `json:"overage,omitempty"`
	// At holds the value of the "at" field.
	At time.Time `json:"at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BalanceSnapshotQuery when eager-loading is set.
	Edges        BalanceSnapshotEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BalanceSnapshotEdges holds the relations/edges for other nodes in the graph.
type BalanceSnapshotEdges struct {
	// Entitlement holds the value of the entitlement edge.
	Entitlement *Entitlement `json:"entitlement,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EntitlementOrErr returns the Entitlement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BalanceSnapshotEdges) EntitlementOrErr() (*Entitlement, error) {
	if e.Entitlement != nil {
		return e.Entitlement, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: entitlement.Label}
	}
	return nil, &NotLoadedError{edge: "entitlement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BalanceSnapshot) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case balancesnapshot.FieldGrantBalances, balancesnapshot.FieldUsage:
			values[i] = new([]byte)
		case balancesnapshot.FieldBalance, balancesnapshot.FieldOverage:
			values[i] = new(sql.NullFloat64)
		case balancesnapshot.FieldID:
			values[i] = new(sql.NullInt64)
		case balancesnapshot.FieldNamespace, balancesnapshot.FieldOwnerID:
			values[i] = new(sql.NullString)
		case balancesnapshot.FieldCreatedAt, balancesnapshot.FieldUpdatedAt, balancesnapshot.FieldDeletedAt, balancesnapshot.FieldAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BalanceSnapshot fields.
func (_m *BalanceSnapshot) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case balancesnapshot.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case balancesnapshot.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				_m.Namespace = value.String
			}
		case balancesnapshot.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case balancesnapshot.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case balancesnapshot.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case balancesnapshot.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case balancesnapshot.FieldGrantBalances:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field grant_balances", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.GrantBalances); err != nil {
					return fmt.Errorf("unmarshal field grant_balances: %w", err)
				}
			}
		case balancesnapshot.FieldUsage:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field usage", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Usage); err != nil {
					return fmt.Errorf("unmarshal field usage: %w", err)
				}
			}
		case balancesnapshot.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				_m.Balance = value.Float64
			}
		case balancesnapshot.FieldOverage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field overage", values[i])
			} else if value.Valid {
				_m.Overage = value.Float64
			}
		case balancesnapshot.FieldAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field at", values[i])
			} else if value.Valid {
				_m.At = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BalanceSnapshot.
// This includes values selected through modifiers, order, etc.
func (_m *BalanceSnapshot) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryEntitlement queries the "entitlement" edge of the BalanceSnapshot entity.
func (_m *BalanceSnapshot) QueryEntitlement() *EntitlementQuery {
	return NewBalanceSnapshotClient(_m.config).QueryEntitlement(_m)
}

// Update returns a builder for updating this BalanceSnapshot.
// Note that you need to call BalanceSnapshot.Unwrap() before calling this method if this BalanceSnapshot
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BalanceSnapshot) Update() *BalanceSnapshotUpdateOne {
	return NewBalanceSnapshotClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BalanceSnapshot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BalanceSnapshot) Unwrap() *BalanceSnapshot {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("db: BalanceSnapshot is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BalanceSnapshot) String() string {
	var builder strings.Builder
	builder.WriteString("BalanceSnapshot(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("namespace=")
	builder.WriteString(_m.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("grant_balances=")
	builder.WriteString(fmt.Sprintf("%v", _m.GrantBalances))
	builder.WriteString(", ")
	builder.WriteString("usage=")
	builder.WriteString(fmt.Sprintf("%v", _m.Usage))
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", _m.Balance))
	builder.WriteString(", ")
	builder.WriteString("overage=")
	builder.WriteString(fmt.Sprintf("%v", _m.Overage))
	builder.WriteString(", ")
	builder.WriteString("at=")
	builder.WriteString(_m.At.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BalanceSnapshots is a parsable slice of BalanceSnapshot.
type BalanceSnapshots []*BalanceSnapshot
