// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustominvoicing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustominvoicingcustomer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
)

// AppCustomInvoicingCustomerCreate is the builder for creating a AppCustomInvoicingCustomer entity.
type AppCustomInvoicingCustomerCreate struct {
	config
	mutation *AppCustomInvoicingCustomerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (_c *AppCustomInvoicingCustomerCreate) SetNamespace(v string) *AppCustomInvoicingCustomerCreate {
	_c.mutation.SetNamespace(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *AppCustomInvoicingCustomerCreate) SetCreatedAt(v time.Time) *AppCustomInvoicingCustomerCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *AppCustomInvoicingCustomerCreate) SetNillableCreatedAt(v *time.Time) *AppCustomInvoicingCustomerCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *AppCustomInvoicingCustomerCreate) SetUpdatedAt(v time.Time) *AppCustomInvoicingCustomerCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *AppCustomInvoicingCustomerCreate) SetNillableUpdatedAt(v *time.Time) *AppCustomInvoicingCustomerCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *AppCustomInvoicingCustomerCreate) SetDeletedAt(v time.Time) *AppCustomInvoicingCustomerCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *AppCustomInvoicingCustomerCreate) SetNillableDeletedAt(v *time.Time) *AppCustomInvoicingCustomerCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *AppCustomInvoicingCustomerCreate) SetMetadata(v map[string]string) *AppCustomInvoicingCustomerCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetAppID sets the "app_id" field.
func (_c *AppCustomInvoicingCustomerCreate) SetAppID(v string) *AppCustomInvoicingCustomerCreate {
	_c.mutation.SetAppID(v)
	return _c
}

// SetCustomerID sets the "customer_id" field.
func (_c *AppCustomInvoicingCustomerCreate) SetCustomerID(v string) *AppCustomInvoicingCustomerCreate {
	_c.mutation.SetCustomerID(v)
	return _c
}

// SetCustomInvoicingAppID sets the "custom_invoicing_app" edge to the AppCustomInvoicing entity by ID.
func (_c *AppCustomInvoicingCustomerCreate) SetCustomInvoicingAppID(id string) *AppCustomInvoicingCustomerCreate {
	_c.mutation.SetCustomInvoicingAppID(id)
	return _c
}

// SetCustomInvoicingApp sets the "custom_invoicing_app" edge to the AppCustomInvoicing entity.
func (_c *AppCustomInvoicingCustomerCreate) SetCustomInvoicingApp(v *AppCustomInvoicing) *AppCustomInvoicingCustomerCreate {
	return _c.SetCustomInvoicingAppID(v.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (_c *AppCustomInvoicingCustomerCreate) SetCustomer(v *Customer) *AppCustomInvoicingCustomerCreate {
	return _c.SetCustomerID(v.ID)
}

// Mutation returns the AppCustomInvoicingCustomerMutation object of the builder.
func (_c *AppCustomInvoicingCustomerCreate) Mutation() *AppCustomInvoicingCustomerMutation {
	return _c.mutation
}

// Save creates the AppCustomInvoicingCustomer in the database.
func (_c *AppCustomInvoicingCustomerCreate) Save(ctx context.Context) (*AppCustomInvoicingCustomer, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AppCustomInvoicingCustomerCreate) SaveX(ctx context.Context) *AppCustomInvoicingCustomer {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AppCustomInvoicingCustomerCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AppCustomInvoicingCustomerCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AppCustomInvoicingCustomerCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := appcustominvoicingcustomer.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := appcustominvoicingcustomer.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AppCustomInvoicingCustomerCreate) check() error {
	if _, ok := _c.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "AppCustomInvoicingCustomer.namespace"`)}
	}
	if v, ok := _c.mutation.Namespace(); ok {
		if err := appcustominvoicingcustomer.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "AppCustomInvoicingCustomer.namespace": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "AppCustomInvoicingCustomer.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "AppCustomInvoicingCustomer.updated_at"`)}
	}
	if _, ok := _c.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`db: missing required field "AppCustomInvoicingCustomer.app_id"`)}
	}
	if v, ok := _c.mutation.AppID(); ok {
		if err := appcustominvoicingcustomer.AppIDValidator(v); err != nil {
			return &ValidationError{Name: "app_id", err: fmt.Errorf(`db: validator failed for field "AppCustomInvoicingCustomer.app_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`db: missing required field "AppCustomInvoicingCustomer.customer_id"`)}
	}
	if v, ok := _c.mutation.CustomerID(); ok {
		if err := appcustominvoicingcustomer.CustomerIDValidator(v); err != nil {
			return &ValidationError{Name: "customer_id", err: fmt.Errorf(`db: validator failed for field "AppCustomInvoicingCustomer.customer_id": %w`, err)}
		}
	}
	if len(_c.mutation.CustomInvoicingAppIDs()) == 0 {
		return &ValidationError{Name: "custom_invoicing_app", err: errors.New(`db: missing required edge "AppCustomInvoicingCustomer.custom_invoicing_app"`)}
	}
	if len(_c.mutation.CustomerIDs()) == 0 {
		return &ValidationError{Name: "customer", err: errors.New(`db: missing required edge "AppCustomInvoicingCustomer.customer"`)}
	}
	return nil
}

func (_c *AppCustomInvoicingCustomerCreate) sqlSave(ctx context.Context) (*AppCustomInvoicingCustomer, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AppCustomInvoicingCustomerCreate) createSpec() (*AppCustomInvoicingCustomer, *sqlgraph.CreateSpec) {
	var (
		_node = &AppCustomInvoicingCustomer{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(appcustominvoicingcustomer.Table, sqlgraph.NewFieldSpec(appcustominvoicingcustomer.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Namespace(); ok {
		_spec.SetField(appcustominvoicingcustomer.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(appcustominvoicingcustomer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(appcustominvoicingcustomer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(appcustominvoicingcustomer.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(appcustominvoicingcustomer.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := _c.mutation.CustomInvoicingAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appcustominvoicingcustomer.CustomInvoicingAppTable,
			Columns: []string{appcustominvoicingcustomer.CustomInvoicingAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appcustominvoicing.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appcustominvoicingcustomer.CustomerTable,
			Columns: []string{appcustominvoicingcustomer.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppCustomInvoicingCustomer.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppCustomInvoicingCustomerUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *AppCustomInvoicingCustomerCreate) OnConflict(opts ...sql.ConflictOption) *AppCustomInvoicingCustomerUpsertOne {
	_c.conflict = opts
	return &AppCustomInvoicingCustomerUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppCustomInvoicingCustomer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AppCustomInvoicingCustomerCreate) OnConflictColumns(columns ...string) *AppCustomInvoicingCustomerUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AppCustomInvoicingCustomerUpsertOne{
		create: _c,
	}
}

type (
	// AppCustomInvoicingCustomerUpsertOne is the builder for "upsert"-ing
	//  one AppCustomInvoicingCustomer node.
	AppCustomInvoicingCustomerUpsertOne struct {
		create *AppCustomInvoicingCustomerCreate
	}

	// AppCustomInvoicingCustomerUpsert is the "OnConflict" setter.
	AppCustomInvoicingCustomerUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AppCustomInvoicingCustomerUpsert) SetUpdatedAt(v time.Time) *AppCustomInvoicingCustomerUpsert {
	u.Set(appcustominvoicingcustomer.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppCustomInvoicingCustomerUpsert) UpdateUpdatedAt() *AppCustomInvoicingCustomerUpsert {
	u.SetExcluded(appcustominvoicingcustomer.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppCustomInvoicingCustomerUpsert) SetDeletedAt(v time.Time) *AppCustomInvoicingCustomerUpsert {
	u.Set(appcustominvoicingcustomer.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppCustomInvoicingCustomerUpsert) UpdateDeletedAt() *AppCustomInvoicingCustomerUpsert {
	u.SetExcluded(appcustominvoicingcustomer.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AppCustomInvoicingCustomerUpsert) ClearDeletedAt() *AppCustomInvoicingCustomerUpsert {
	u.SetNull(appcustominvoicingcustomer.FieldDeletedAt)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *AppCustomInvoicingCustomerUpsert) SetMetadata(v map[string]string) *AppCustomInvoicingCustomerUpsert {
	u.Set(appcustominvoicingcustomer.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *AppCustomInvoicingCustomerUpsert) UpdateMetadata() *AppCustomInvoicingCustomerUpsert {
	u.SetExcluded(appcustominvoicingcustomer.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *AppCustomInvoicingCustomerUpsert) ClearMetadata() *AppCustomInvoicingCustomerUpsert {
	u.SetNull(appcustominvoicingcustomer.FieldMetadata)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AppCustomInvoicingCustomer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AppCustomInvoicingCustomerUpsertOne) UpdateNewValues() *AppCustomInvoicingCustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(appcustominvoicingcustomer.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(appcustominvoicingcustomer.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.AppID(); exists {
			s.SetIgnore(appcustominvoicingcustomer.FieldAppID)
		}
		if _, exists := u.create.mutation.CustomerID(); exists {
			s.SetIgnore(appcustominvoicingcustomer.FieldCustomerID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppCustomInvoicingCustomer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppCustomInvoicingCustomerUpsertOne) Ignore() *AppCustomInvoicingCustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppCustomInvoicingCustomerUpsertOne) DoNothing() *AppCustomInvoicingCustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCustomInvoicingCustomerCreate.OnConflict
// documentation for more info.
func (u *AppCustomInvoicingCustomerUpsertOne) Update(set func(*AppCustomInvoicingCustomerUpsert)) *AppCustomInvoicingCustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppCustomInvoicingCustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppCustomInvoicingCustomerUpsertOne) SetUpdatedAt(v time.Time) *AppCustomInvoicingCustomerUpsertOne {
	return u.Update(func(s *AppCustomInvoicingCustomerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppCustomInvoicingCustomerUpsertOne) UpdateUpdatedAt() *AppCustomInvoicingCustomerUpsertOne {
	return u.Update(func(s *AppCustomInvoicingCustomerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppCustomInvoicingCustomerUpsertOne) SetDeletedAt(v time.Time) *AppCustomInvoicingCustomerUpsertOne {
	return u.Update(func(s *AppCustomInvoicingCustomerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppCustomInvoicingCustomerUpsertOne) UpdateDeletedAt() *AppCustomInvoicingCustomerUpsertOne {
	return u.Update(func(s *AppCustomInvoicingCustomerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AppCustomInvoicingCustomerUpsertOne) ClearDeletedAt() *AppCustomInvoicingCustomerUpsertOne {
	return u.Update(func(s *AppCustomInvoicingCustomerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *AppCustomInvoicingCustomerUpsertOne) SetMetadata(v map[string]string) *AppCustomInvoicingCustomerUpsertOne {
	return u.Update(func(s *AppCustomInvoicingCustomerUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *AppCustomInvoicingCustomerUpsertOne) UpdateMetadata() *AppCustomInvoicingCustomerUpsertOne {
	return u.Update(func(s *AppCustomInvoicingCustomerUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *AppCustomInvoicingCustomerUpsertOne) ClearMetadata() *AppCustomInvoicingCustomerUpsertOne {
	return u.Update(func(s *AppCustomInvoicingCustomerUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *AppCustomInvoicingCustomerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for AppCustomInvoicingCustomerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppCustomInvoicingCustomerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppCustomInvoicingCustomerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppCustomInvoicingCustomerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppCustomInvoicingCustomerCreateBulk is the builder for creating many AppCustomInvoicingCustomer entities in bulk.
type AppCustomInvoicingCustomerCreateBulk struct {
	config
	err      error
	builders []*AppCustomInvoicingCustomerCreate
	conflict []sql.ConflictOption
}

// Save creates the AppCustomInvoicingCustomer entities in the database.
func (_c *AppCustomInvoicingCustomerCreateBulk) Save(ctx context.Context) ([]*AppCustomInvoicingCustomer, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*AppCustomInvoicingCustomer, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppCustomInvoicingCustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AppCustomInvoicingCustomerCreateBulk) SaveX(ctx context.Context) []*AppCustomInvoicingCustomer {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AppCustomInvoicingCustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AppCustomInvoicingCustomerCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppCustomInvoicingCustomer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppCustomInvoicingCustomerUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *AppCustomInvoicingCustomerCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppCustomInvoicingCustomerUpsertBulk {
	_c.conflict = opts
	return &AppCustomInvoicingCustomerUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppCustomInvoicingCustomer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AppCustomInvoicingCustomerCreateBulk) OnConflictColumns(columns ...string) *AppCustomInvoicingCustomerUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AppCustomInvoicingCustomerUpsertBulk{
		create: _c,
	}
}

// AppCustomInvoicingCustomerUpsertBulk is the builder for "upsert"-ing
// a bulk of AppCustomInvoicingCustomer nodes.
type AppCustomInvoicingCustomerUpsertBulk struct {
	create *AppCustomInvoicingCustomerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppCustomInvoicingCustomer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AppCustomInvoicingCustomerUpsertBulk) UpdateNewValues() *AppCustomInvoicingCustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(appcustominvoicingcustomer.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(appcustominvoicingcustomer.FieldCreatedAt)
			}
			if _, exists := b.mutation.AppID(); exists {
				s.SetIgnore(appcustominvoicingcustomer.FieldAppID)
			}
			if _, exists := b.mutation.CustomerID(); exists {
				s.SetIgnore(appcustominvoicingcustomer.FieldCustomerID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppCustomInvoicingCustomer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppCustomInvoicingCustomerUpsertBulk) Ignore() *AppCustomInvoicingCustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppCustomInvoicingCustomerUpsertBulk) DoNothing() *AppCustomInvoicingCustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCustomInvoicingCustomerCreateBulk.OnConflict
// documentation for more info.
func (u *AppCustomInvoicingCustomerUpsertBulk) Update(set func(*AppCustomInvoicingCustomerUpsert)) *AppCustomInvoicingCustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppCustomInvoicingCustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppCustomInvoicingCustomerUpsertBulk) SetUpdatedAt(v time.Time) *AppCustomInvoicingCustomerUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingCustomerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppCustomInvoicingCustomerUpsertBulk) UpdateUpdatedAt() *AppCustomInvoicingCustomerUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingCustomerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppCustomInvoicingCustomerUpsertBulk) SetDeletedAt(v time.Time) *AppCustomInvoicingCustomerUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingCustomerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppCustomInvoicingCustomerUpsertBulk) UpdateDeletedAt() *AppCustomInvoicingCustomerUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingCustomerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AppCustomInvoicingCustomerUpsertBulk) ClearDeletedAt() *AppCustomInvoicingCustomerUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingCustomerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *AppCustomInvoicingCustomerUpsertBulk) SetMetadata(v map[string]string) *AppCustomInvoicingCustomerUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingCustomerUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *AppCustomInvoicingCustomerUpsertBulk) UpdateMetadata() *AppCustomInvoicingCustomerUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingCustomerUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *AppCustomInvoicingCustomerUpsertBulk) ClearMetadata() *AppCustomInvoicingCustomerUpsertBulk {
	return u.Update(func(s *AppCustomInvoicingCustomerUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *AppCustomInvoicingCustomerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the AppCustomInvoicingCustomerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for AppCustomInvoicingCustomerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppCustomInvoicingCustomerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
