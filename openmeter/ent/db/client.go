// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/openmeterio/openmeter/openmeter/ent/db/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addonratecard"
	dbapp "github.com/openmeterio/openmeter/openmeter/ent/db/app"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustomer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appstripe"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appstripecustomer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/balancesnapshot"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomerlock"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomeroverride"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicediscount"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceflatfeelineconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicelinediscount"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceusagebasedlineconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicevalidationissue"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingprofile"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsequencenumbers"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customersubjects"
	"github.com/openmeterio/openmeter/openmeter/ent/db/entitlement"
	"github.com/openmeterio/openmeter/openmeter/ent/db/feature"
	dbgrant "github.com/openmeterio/openmeter/openmeter/ent/db/grant"
	dbmeter "github.com/openmeterio/openmeter/openmeter/ent/db/meter"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationchannel"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationevent"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationeventdeliverystatus"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationrule"
	"github.com/openmeterio/openmeter/openmeter/ent/db/plan"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planphase"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonquantity"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonratecarditemlink"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionphase"
	"github.com/openmeterio/openmeter/openmeter/ent/db/usagereset"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Addon is the client for interacting with the Addon builders.
	Addon *AddonClient
	// AddonRateCard is the client for interacting with the AddonRateCard builders.
	AddonRateCard *AddonRateCardClient
	// App is the client for interacting with the App builders.
	App *AppClient
	// AppCustomer is the client for interacting with the AppCustomer builders.
	AppCustomer *AppCustomerClient
	// AppStripe is the client for interacting with the AppStripe builders.
	AppStripe *AppStripeClient
	// AppStripeCustomer is the client for interacting with the AppStripeCustomer builders.
	AppStripeCustomer *AppStripeCustomerClient
	// BalanceSnapshot is the client for interacting with the BalanceSnapshot builders.
	BalanceSnapshot *BalanceSnapshotClient
	// BillingCustomerLock is the client for interacting with the BillingCustomerLock builders.
	BillingCustomerLock *BillingCustomerLockClient
	// BillingCustomerOverride is the client for interacting with the BillingCustomerOverride builders.
	BillingCustomerOverride *BillingCustomerOverrideClient
	// BillingInvoice is the client for interacting with the BillingInvoice builders.
	BillingInvoice *BillingInvoiceClient
	// BillingInvoiceDiscount is the client for interacting with the BillingInvoiceDiscount builders.
	BillingInvoiceDiscount *BillingInvoiceDiscountClient
	// BillingInvoiceFlatFeeLineConfig is the client for interacting with the BillingInvoiceFlatFeeLineConfig builders.
	BillingInvoiceFlatFeeLineConfig *BillingInvoiceFlatFeeLineConfigClient
	// BillingInvoiceLine is the client for interacting with the BillingInvoiceLine builders.
	BillingInvoiceLine *BillingInvoiceLineClient
	// BillingInvoiceLineDiscount is the client for interacting with the BillingInvoiceLineDiscount builders.
	BillingInvoiceLineDiscount *BillingInvoiceLineDiscountClient
	// BillingInvoiceUsageBasedLineConfig is the client for interacting with the BillingInvoiceUsageBasedLineConfig builders.
	BillingInvoiceUsageBasedLineConfig *BillingInvoiceUsageBasedLineConfigClient
	// BillingInvoiceValidationIssue is the client for interacting with the BillingInvoiceValidationIssue builders.
	BillingInvoiceValidationIssue *BillingInvoiceValidationIssueClient
	// BillingProfile is the client for interacting with the BillingProfile builders.
	BillingProfile *BillingProfileClient
	// BillingSequenceNumbers is the client for interacting with the BillingSequenceNumbers builders.
	BillingSequenceNumbers *BillingSequenceNumbersClient
	// BillingWorkflowConfig is the client for interacting with the BillingWorkflowConfig builders.
	BillingWorkflowConfig *BillingWorkflowConfigClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// CustomerSubjects is the client for interacting with the CustomerSubjects builders.
	CustomerSubjects *CustomerSubjectsClient
	// Entitlement is the client for interacting with the Entitlement builders.
	Entitlement *EntitlementClient
	// Feature is the client for interacting with the Feature builders.
	Feature *FeatureClient
	// Grant is the client for interacting with the Grant builders.
	Grant *GrantClient
	// Meter is the client for interacting with the Meter builders.
	Meter *MeterClient
	// NotificationChannel is the client for interacting with the NotificationChannel builders.
	NotificationChannel *NotificationChannelClient
	// NotificationEvent is the client for interacting with the NotificationEvent builders.
	NotificationEvent *NotificationEventClient
	// NotificationEventDeliveryStatus is the client for interacting with the NotificationEventDeliveryStatus builders.
	NotificationEventDeliveryStatus *NotificationEventDeliveryStatusClient
	// NotificationRule is the client for interacting with the NotificationRule builders.
	NotificationRule *NotificationRuleClient
	// Plan is the client for interacting with the Plan builders.
	Plan *PlanClient
	// PlanPhase is the client for interacting with the PlanPhase builders.
	PlanPhase *PlanPhaseClient
	// PlanRateCard is the client for interacting with the PlanRateCard builders.
	PlanRateCard *PlanRateCardClient
	// Subscription is the client for interacting with the Subscription builders.
	Subscription *SubscriptionClient
	// SubscriptionAddon is the client for interacting with the SubscriptionAddon builders.
	SubscriptionAddon *SubscriptionAddonClient
	// SubscriptionAddonQuantity is the client for interacting with the SubscriptionAddonQuantity builders.
	SubscriptionAddonQuantity *SubscriptionAddonQuantityClient
	// SubscriptionAddonRateCard is the client for interacting with the SubscriptionAddonRateCard builders.
	SubscriptionAddonRateCard *SubscriptionAddonRateCardClient
	// SubscriptionAddonRateCardItemLink is the client for interacting with the SubscriptionAddonRateCardItemLink builders.
	SubscriptionAddonRateCardItemLink *SubscriptionAddonRateCardItemLinkClient
	// SubscriptionItem is the client for interacting with the SubscriptionItem builders.
	SubscriptionItem *SubscriptionItemClient
	// SubscriptionPhase is the client for interacting with the SubscriptionPhase builders.
	SubscriptionPhase *SubscriptionPhaseClient
	// UsageReset is the client for interacting with the UsageReset builders.
	UsageReset *UsageResetClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Addon = NewAddonClient(c.config)
	c.AddonRateCard = NewAddonRateCardClient(c.config)
	c.App = NewAppClient(c.config)
	c.AppCustomer = NewAppCustomerClient(c.config)
	c.AppStripe = NewAppStripeClient(c.config)
	c.AppStripeCustomer = NewAppStripeCustomerClient(c.config)
	c.BalanceSnapshot = NewBalanceSnapshotClient(c.config)
	c.BillingCustomerLock = NewBillingCustomerLockClient(c.config)
	c.BillingCustomerOverride = NewBillingCustomerOverrideClient(c.config)
	c.BillingInvoice = NewBillingInvoiceClient(c.config)
	c.BillingInvoiceDiscount = NewBillingInvoiceDiscountClient(c.config)
	c.BillingInvoiceFlatFeeLineConfig = NewBillingInvoiceFlatFeeLineConfigClient(c.config)
	c.BillingInvoiceLine = NewBillingInvoiceLineClient(c.config)
	c.BillingInvoiceLineDiscount = NewBillingInvoiceLineDiscountClient(c.config)
	c.BillingInvoiceUsageBasedLineConfig = NewBillingInvoiceUsageBasedLineConfigClient(c.config)
	c.BillingInvoiceValidationIssue = NewBillingInvoiceValidationIssueClient(c.config)
	c.BillingProfile = NewBillingProfileClient(c.config)
	c.BillingSequenceNumbers = NewBillingSequenceNumbersClient(c.config)
	c.BillingWorkflowConfig = NewBillingWorkflowConfigClient(c.config)
	c.Customer = NewCustomerClient(c.config)
	c.CustomerSubjects = NewCustomerSubjectsClient(c.config)
	c.Entitlement = NewEntitlementClient(c.config)
	c.Feature = NewFeatureClient(c.config)
	c.Grant = NewGrantClient(c.config)
	c.Meter = NewMeterClient(c.config)
	c.NotificationChannel = NewNotificationChannelClient(c.config)
	c.NotificationEvent = NewNotificationEventClient(c.config)
	c.NotificationEventDeliveryStatus = NewNotificationEventDeliveryStatusClient(c.config)
	c.NotificationRule = NewNotificationRuleClient(c.config)
	c.Plan = NewPlanClient(c.config)
	c.PlanPhase = NewPlanPhaseClient(c.config)
	c.PlanRateCard = NewPlanRateCardClient(c.config)
	c.Subscription = NewSubscriptionClient(c.config)
	c.SubscriptionAddon = NewSubscriptionAddonClient(c.config)
	c.SubscriptionAddonQuantity = NewSubscriptionAddonQuantityClient(c.config)
	c.SubscriptionAddonRateCard = NewSubscriptionAddonRateCardClient(c.config)
	c.SubscriptionAddonRateCardItemLink = NewSubscriptionAddonRateCardItemLinkClient(c.config)
	c.SubscriptionItem = NewSubscriptionItemClient(c.config)
	c.SubscriptionPhase = NewSubscriptionPhaseClient(c.config)
	c.UsageReset = NewUsageResetClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("db: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("db: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                                ctx,
		config:                             cfg,
		Addon:                              NewAddonClient(cfg),
		AddonRateCard:                      NewAddonRateCardClient(cfg),
		App:                                NewAppClient(cfg),
		AppCustomer:                        NewAppCustomerClient(cfg),
		AppStripe:                          NewAppStripeClient(cfg),
		AppStripeCustomer:                  NewAppStripeCustomerClient(cfg),
		BalanceSnapshot:                    NewBalanceSnapshotClient(cfg),
		BillingCustomerLock:                NewBillingCustomerLockClient(cfg),
		BillingCustomerOverride:            NewBillingCustomerOverrideClient(cfg),
		BillingInvoice:                     NewBillingInvoiceClient(cfg),
		BillingInvoiceDiscount:             NewBillingInvoiceDiscountClient(cfg),
		BillingInvoiceFlatFeeLineConfig:    NewBillingInvoiceFlatFeeLineConfigClient(cfg),
		BillingInvoiceLine:                 NewBillingInvoiceLineClient(cfg),
		BillingInvoiceLineDiscount:         NewBillingInvoiceLineDiscountClient(cfg),
		BillingInvoiceUsageBasedLineConfig: NewBillingInvoiceUsageBasedLineConfigClient(cfg),
		BillingInvoiceValidationIssue:      NewBillingInvoiceValidationIssueClient(cfg),
		BillingProfile:                     NewBillingProfileClient(cfg),
		BillingSequenceNumbers:             NewBillingSequenceNumbersClient(cfg),
		BillingWorkflowConfig:              NewBillingWorkflowConfigClient(cfg),
		Customer:                           NewCustomerClient(cfg),
		CustomerSubjects:                   NewCustomerSubjectsClient(cfg),
		Entitlement:                        NewEntitlementClient(cfg),
		Feature:                            NewFeatureClient(cfg),
		Grant:                              NewGrantClient(cfg),
		Meter:                              NewMeterClient(cfg),
		NotificationChannel:                NewNotificationChannelClient(cfg),
		NotificationEvent:                  NewNotificationEventClient(cfg),
		NotificationEventDeliveryStatus:    NewNotificationEventDeliveryStatusClient(cfg),
		NotificationRule:                   NewNotificationRuleClient(cfg),
		Plan:                               NewPlanClient(cfg),
		PlanPhase:                          NewPlanPhaseClient(cfg),
		PlanRateCard:                       NewPlanRateCardClient(cfg),
		Subscription:                       NewSubscriptionClient(cfg),
		SubscriptionAddon:                  NewSubscriptionAddonClient(cfg),
		SubscriptionAddonQuantity:          NewSubscriptionAddonQuantityClient(cfg),
		SubscriptionAddonRateCard:          NewSubscriptionAddonRateCardClient(cfg),
		SubscriptionAddonRateCardItemLink:  NewSubscriptionAddonRateCardItemLinkClient(cfg),
		SubscriptionItem:                   NewSubscriptionItemClient(cfg),
		SubscriptionPhase:                  NewSubscriptionPhaseClient(cfg),
		UsageReset:                         NewUsageResetClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                                ctx,
		config:                             cfg,
		Addon:                              NewAddonClient(cfg),
		AddonRateCard:                      NewAddonRateCardClient(cfg),
		App:                                NewAppClient(cfg),
		AppCustomer:                        NewAppCustomerClient(cfg),
		AppStripe:                          NewAppStripeClient(cfg),
		AppStripeCustomer:                  NewAppStripeCustomerClient(cfg),
		BalanceSnapshot:                    NewBalanceSnapshotClient(cfg),
		BillingCustomerLock:                NewBillingCustomerLockClient(cfg),
		BillingCustomerOverride:            NewBillingCustomerOverrideClient(cfg),
		BillingInvoice:                     NewBillingInvoiceClient(cfg),
		BillingInvoiceDiscount:             NewBillingInvoiceDiscountClient(cfg),
		BillingInvoiceFlatFeeLineConfig:    NewBillingInvoiceFlatFeeLineConfigClient(cfg),
		BillingInvoiceLine:                 NewBillingInvoiceLineClient(cfg),
		BillingInvoiceLineDiscount:         NewBillingInvoiceLineDiscountClient(cfg),
		BillingInvoiceUsageBasedLineConfig: NewBillingInvoiceUsageBasedLineConfigClient(cfg),
		BillingInvoiceValidationIssue:      NewBillingInvoiceValidationIssueClient(cfg),
		BillingProfile:                     NewBillingProfileClient(cfg),
		BillingSequenceNumbers:             NewBillingSequenceNumbersClient(cfg),
		BillingWorkflowConfig:              NewBillingWorkflowConfigClient(cfg),
		Customer:                           NewCustomerClient(cfg),
		CustomerSubjects:                   NewCustomerSubjectsClient(cfg),
		Entitlement:                        NewEntitlementClient(cfg),
		Feature:                            NewFeatureClient(cfg),
		Grant:                              NewGrantClient(cfg),
		Meter:                              NewMeterClient(cfg),
		NotificationChannel:                NewNotificationChannelClient(cfg),
		NotificationEvent:                  NewNotificationEventClient(cfg),
		NotificationEventDeliveryStatus:    NewNotificationEventDeliveryStatusClient(cfg),
		NotificationRule:                   NewNotificationRuleClient(cfg),
		Plan:                               NewPlanClient(cfg),
		PlanPhase:                          NewPlanPhaseClient(cfg),
		PlanRateCard:                       NewPlanRateCardClient(cfg),
		Subscription:                       NewSubscriptionClient(cfg),
		SubscriptionAddon:                  NewSubscriptionAddonClient(cfg),
		SubscriptionAddonQuantity:          NewSubscriptionAddonQuantityClient(cfg),
		SubscriptionAddonRateCard:          NewSubscriptionAddonRateCardClient(cfg),
		SubscriptionAddonRateCardItemLink:  NewSubscriptionAddonRateCardItemLinkClient(cfg),
		SubscriptionItem:                   NewSubscriptionItemClient(cfg),
		SubscriptionPhase:                  NewSubscriptionPhaseClient(cfg),
		UsageReset:                         NewUsageResetClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Addon.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Addon, c.AddonRateCard, c.App, c.AppCustomer, c.AppStripe,
		c.AppStripeCustomer, c.BalanceSnapshot, c.BillingCustomerLock,
		c.BillingCustomerOverride, c.BillingInvoice, c.BillingInvoiceDiscount,
		c.BillingInvoiceFlatFeeLineConfig, c.BillingInvoiceLine,
		c.BillingInvoiceLineDiscount, c.BillingInvoiceUsageBasedLineConfig,
		c.BillingInvoiceValidationIssue, c.BillingProfile, c.BillingSequenceNumbers,
		c.BillingWorkflowConfig, c.Customer, c.CustomerSubjects, c.Entitlement,
		c.Feature, c.Grant, c.Meter, c.NotificationChannel, c.NotificationEvent,
		c.NotificationEventDeliveryStatus, c.NotificationRule, c.Plan, c.PlanPhase,
		c.PlanRateCard, c.Subscription, c.SubscriptionAddon,
		c.SubscriptionAddonQuantity, c.SubscriptionAddonRateCard,
		c.SubscriptionAddonRateCardItemLink, c.SubscriptionItem, c.SubscriptionPhase,
		c.UsageReset,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Addon, c.AddonRateCard, c.App, c.AppCustomer, c.AppStripe,
		c.AppStripeCustomer, c.BalanceSnapshot, c.BillingCustomerLock,
		c.BillingCustomerOverride, c.BillingInvoice, c.BillingInvoiceDiscount,
		c.BillingInvoiceFlatFeeLineConfig, c.BillingInvoiceLine,
		c.BillingInvoiceLineDiscount, c.BillingInvoiceUsageBasedLineConfig,
		c.BillingInvoiceValidationIssue, c.BillingProfile, c.BillingSequenceNumbers,
		c.BillingWorkflowConfig, c.Customer, c.CustomerSubjects, c.Entitlement,
		c.Feature, c.Grant, c.Meter, c.NotificationChannel, c.NotificationEvent,
		c.NotificationEventDeliveryStatus, c.NotificationRule, c.Plan, c.PlanPhase,
		c.PlanRateCard, c.Subscription, c.SubscriptionAddon,
		c.SubscriptionAddonQuantity, c.SubscriptionAddonRateCard,
		c.SubscriptionAddonRateCardItemLink, c.SubscriptionItem, c.SubscriptionPhase,
		c.UsageReset,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AddonMutation:
		return c.Addon.mutate(ctx, m)
	case *AddonRateCardMutation:
		return c.AddonRateCard.mutate(ctx, m)
	case *AppMutation:
		return c.App.mutate(ctx, m)
	case *AppCustomerMutation:
		return c.AppCustomer.mutate(ctx, m)
	case *AppStripeMutation:
		return c.AppStripe.mutate(ctx, m)
	case *AppStripeCustomerMutation:
		return c.AppStripeCustomer.mutate(ctx, m)
	case *BalanceSnapshotMutation:
		return c.BalanceSnapshot.mutate(ctx, m)
	case *BillingCustomerLockMutation:
		return c.BillingCustomerLock.mutate(ctx, m)
	case *BillingCustomerOverrideMutation:
		return c.BillingCustomerOverride.mutate(ctx, m)
	case *BillingInvoiceMutation:
		return c.BillingInvoice.mutate(ctx, m)
	case *BillingInvoiceDiscountMutation:
		return c.BillingInvoiceDiscount.mutate(ctx, m)
	case *BillingInvoiceFlatFeeLineConfigMutation:
		return c.BillingInvoiceFlatFeeLineConfig.mutate(ctx, m)
	case *BillingInvoiceLineMutation:
		return c.BillingInvoiceLine.mutate(ctx, m)
	case *BillingInvoiceLineDiscountMutation:
		return c.BillingInvoiceLineDiscount.mutate(ctx, m)
	case *BillingInvoiceUsageBasedLineConfigMutation:
		return c.BillingInvoiceUsageBasedLineConfig.mutate(ctx, m)
	case *BillingInvoiceValidationIssueMutation:
		return c.BillingInvoiceValidationIssue.mutate(ctx, m)
	case *BillingProfileMutation:
		return c.BillingProfile.mutate(ctx, m)
	case *BillingSequenceNumbersMutation:
		return c.BillingSequenceNumbers.mutate(ctx, m)
	case *BillingWorkflowConfigMutation:
		return c.BillingWorkflowConfig.mutate(ctx, m)
	case *CustomerMutation:
		return c.Customer.mutate(ctx, m)
	case *CustomerSubjectsMutation:
		return c.CustomerSubjects.mutate(ctx, m)
	case *EntitlementMutation:
		return c.Entitlement.mutate(ctx, m)
	case *FeatureMutation:
		return c.Feature.mutate(ctx, m)
	case *GrantMutation:
		return c.Grant.mutate(ctx, m)
	case *MeterMutation:
		return c.Meter.mutate(ctx, m)
	case *NotificationChannelMutation:
		return c.NotificationChannel.mutate(ctx, m)
	case *NotificationEventMutation:
		return c.NotificationEvent.mutate(ctx, m)
	case *NotificationEventDeliveryStatusMutation:
		return c.NotificationEventDeliveryStatus.mutate(ctx, m)
	case *NotificationRuleMutation:
		return c.NotificationRule.mutate(ctx, m)
	case *PlanMutation:
		return c.Plan.mutate(ctx, m)
	case *PlanPhaseMutation:
		return c.PlanPhase.mutate(ctx, m)
	case *PlanRateCardMutation:
		return c.PlanRateCard.mutate(ctx, m)
	case *SubscriptionMutation:
		return c.Subscription.mutate(ctx, m)
	case *SubscriptionAddonMutation:
		return c.SubscriptionAddon.mutate(ctx, m)
	case *SubscriptionAddonQuantityMutation:
		return c.SubscriptionAddonQuantity.mutate(ctx, m)
	case *SubscriptionAddonRateCardMutation:
		return c.SubscriptionAddonRateCard.mutate(ctx, m)
	case *SubscriptionAddonRateCardItemLinkMutation:
		return c.SubscriptionAddonRateCardItemLink.mutate(ctx, m)
	case *SubscriptionItemMutation:
		return c.SubscriptionItem.mutate(ctx, m)
	case *SubscriptionPhaseMutation:
		return c.SubscriptionPhase.mutate(ctx, m)
	case *UsageResetMutation:
		return c.UsageReset.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("db: unknown mutation type %T", m)
	}
}

// AddonClient is a client for the Addon schema.
type AddonClient struct {
	config
}

// NewAddonClient returns a client for the Addon from the given config.
func NewAddonClient(c config) *AddonClient {
	return &AddonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `addon.Hooks(f(g(h())))`.
func (c *AddonClient) Use(hooks ...Hook) {
	c.hooks.Addon = append(c.hooks.Addon, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `addon.Intercept(f(g(h())))`.
func (c *AddonClient) Intercept(interceptors ...Interceptor) {
	c.inters.Addon = append(c.inters.Addon, interceptors...)
}

// Create returns a builder for creating a Addon entity.
func (c *AddonClient) Create() *AddonCreate {
	mutation := newAddonMutation(c.config, OpCreate)
	return &AddonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Addon entities.
func (c *AddonClient) CreateBulk(builders ...*AddonCreate) *AddonCreateBulk {
	return &AddonCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AddonClient) MapCreateBulk(slice any, setFunc func(*AddonCreate, int)) *AddonCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AddonCreateBulk{err: fmt.Errorf("calling to AddonClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AddonCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AddonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Addon.
func (c *AddonClient) Update() *AddonUpdate {
	mutation := newAddonMutation(c.config, OpUpdate)
	return &AddonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AddonClient) UpdateOne(a *Addon) *AddonUpdateOne {
	mutation := newAddonMutation(c.config, OpUpdateOne, withAddon(a))
	return &AddonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AddonClient) UpdateOneID(id string) *AddonUpdateOne {
	mutation := newAddonMutation(c.config, OpUpdateOne, withAddonID(id))
	return &AddonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Addon.
func (c *AddonClient) Delete() *AddonDelete {
	mutation := newAddonMutation(c.config, OpDelete)
	return &AddonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AddonClient) DeleteOne(a *Addon) *AddonDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AddonClient) DeleteOneID(id string) *AddonDeleteOne {
	builder := c.Delete().Where(addon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AddonDeleteOne{builder}
}

// Query returns a query builder for Addon.
func (c *AddonClient) Query() *AddonQuery {
	return &AddonQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAddon},
		inters: c.Interceptors(),
	}
}

// Get returns a Addon entity by its id.
func (c *AddonClient) Get(ctx context.Context, id string) (*Addon, error) {
	return c.Query().Where(addon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AddonClient) GetX(ctx context.Context, id string) *Addon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRatecards queries the ratecards edge of a Addon.
func (c *AddonClient) QueryRatecards(a *Addon) *AddonRateCardQuery {
	query := (&AddonRateCardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(addon.Table, addon.FieldID, id),
			sqlgraph.To(addonratecard.Table, addonratecard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, addon.RatecardsTable, addon.RatecardsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscriptionAddons queries the subscription_addons edge of a Addon.
func (c *AddonClient) QuerySubscriptionAddons(a *Addon) *SubscriptionAddonQuery {
	query := (&SubscriptionAddonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(addon.Table, addon.FieldID, id),
			sqlgraph.To(subscriptionaddon.Table, subscriptionaddon.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, addon.SubscriptionAddonsTable, addon.SubscriptionAddonsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AddonClient) Hooks() []Hook {
	return c.hooks.Addon
}

// Interceptors returns the client interceptors.
func (c *AddonClient) Interceptors() []Interceptor {
	return c.inters.Addon
}

func (c *AddonClient) mutate(ctx context.Context, m *AddonMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AddonCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AddonUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AddonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AddonDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Addon mutation op: %q", m.Op())
	}
}

// AddonRateCardClient is a client for the AddonRateCard schema.
type AddonRateCardClient struct {
	config
}

// NewAddonRateCardClient returns a client for the AddonRateCard from the given config.
func NewAddonRateCardClient(c config) *AddonRateCardClient {
	return &AddonRateCardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `addonratecard.Hooks(f(g(h())))`.
func (c *AddonRateCardClient) Use(hooks ...Hook) {
	c.hooks.AddonRateCard = append(c.hooks.AddonRateCard, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `addonratecard.Intercept(f(g(h())))`.
func (c *AddonRateCardClient) Intercept(interceptors ...Interceptor) {
	c.inters.AddonRateCard = append(c.inters.AddonRateCard, interceptors...)
}

// Create returns a builder for creating a AddonRateCard entity.
func (c *AddonRateCardClient) Create() *AddonRateCardCreate {
	mutation := newAddonRateCardMutation(c.config, OpCreate)
	return &AddonRateCardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AddonRateCard entities.
func (c *AddonRateCardClient) CreateBulk(builders ...*AddonRateCardCreate) *AddonRateCardCreateBulk {
	return &AddonRateCardCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AddonRateCardClient) MapCreateBulk(slice any, setFunc func(*AddonRateCardCreate, int)) *AddonRateCardCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AddonRateCardCreateBulk{err: fmt.Errorf("calling to AddonRateCardClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AddonRateCardCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AddonRateCardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AddonRateCard.
func (c *AddonRateCardClient) Update() *AddonRateCardUpdate {
	mutation := newAddonRateCardMutation(c.config, OpUpdate)
	return &AddonRateCardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AddonRateCardClient) UpdateOne(arc *AddonRateCard) *AddonRateCardUpdateOne {
	mutation := newAddonRateCardMutation(c.config, OpUpdateOne, withAddonRateCard(arc))
	return &AddonRateCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AddonRateCardClient) UpdateOneID(id string) *AddonRateCardUpdateOne {
	mutation := newAddonRateCardMutation(c.config, OpUpdateOne, withAddonRateCardID(id))
	return &AddonRateCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AddonRateCard.
func (c *AddonRateCardClient) Delete() *AddonRateCardDelete {
	mutation := newAddonRateCardMutation(c.config, OpDelete)
	return &AddonRateCardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AddonRateCardClient) DeleteOne(arc *AddonRateCard) *AddonRateCardDeleteOne {
	return c.DeleteOneID(arc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AddonRateCardClient) DeleteOneID(id string) *AddonRateCardDeleteOne {
	builder := c.Delete().Where(addonratecard.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AddonRateCardDeleteOne{builder}
}

// Query returns a query builder for AddonRateCard.
func (c *AddonRateCardClient) Query() *AddonRateCardQuery {
	return &AddonRateCardQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAddonRateCard},
		inters: c.Interceptors(),
	}
}

// Get returns a AddonRateCard entity by its id.
func (c *AddonRateCardClient) Get(ctx context.Context, id string) (*AddonRateCard, error) {
	return c.Query().Where(addonratecard.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AddonRateCardClient) GetX(ctx context.Context, id string) *AddonRateCard {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAddon queries the addon edge of a AddonRateCard.
func (c *AddonRateCardClient) QueryAddon(arc *AddonRateCard) *AddonQuery {
	query := (&AddonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := arc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(addonratecard.Table, addonratecard.FieldID, id),
			sqlgraph.To(addon.Table, addon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, addonratecard.AddonTable, addonratecard.AddonColumn),
		)
		fromV = sqlgraph.Neighbors(arc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeatures queries the features edge of a AddonRateCard.
func (c *AddonRateCardClient) QueryFeatures(arc *AddonRateCard) *FeatureQuery {
	query := (&FeatureClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := arc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(addonratecard.Table, addonratecard.FieldID, id),
			sqlgraph.To(feature.Table, feature.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, addonratecard.FeaturesTable, addonratecard.FeaturesColumn),
		)
		fromV = sqlgraph.Neighbors(arc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscriptionAddonRateCards queries the subscription_addon_rate_cards edge of a AddonRateCard.
func (c *AddonRateCardClient) QuerySubscriptionAddonRateCards(arc *AddonRateCard) *SubscriptionAddonRateCardQuery {
	query := (&SubscriptionAddonRateCardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := arc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(addonratecard.Table, addonratecard.FieldID, id),
			sqlgraph.To(subscriptionaddonratecard.Table, subscriptionaddonratecard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, addonratecard.SubscriptionAddonRateCardsTable, addonratecard.SubscriptionAddonRateCardsColumn),
		)
		fromV = sqlgraph.Neighbors(arc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AddonRateCardClient) Hooks() []Hook {
	return c.hooks.AddonRateCard
}

// Interceptors returns the client interceptors.
func (c *AddonRateCardClient) Interceptors() []Interceptor {
	return c.inters.AddonRateCard
}

func (c *AddonRateCardClient) mutate(ctx context.Context, m *AddonRateCardMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AddonRateCardCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AddonRateCardUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AddonRateCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AddonRateCardDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown AddonRateCard mutation op: %q", m.Op())
	}
}

// AppClient is a client for the App schema.
type AppClient struct {
	config
}

// NewAppClient returns a client for the App from the given config.
func NewAppClient(c config) *AppClient {
	return &AppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dbapp.Hooks(f(g(h())))`.
func (c *AppClient) Use(hooks ...Hook) {
	c.hooks.App = append(c.hooks.App, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dbapp.Intercept(f(g(h())))`.
func (c *AppClient) Intercept(interceptors ...Interceptor) {
	c.inters.App = append(c.inters.App, interceptors...)
}

// Create returns a builder for creating a App entity.
func (c *AppClient) Create() *AppCreate {
	mutation := newAppMutation(c.config, OpCreate)
	return &AppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of App entities.
func (c *AppClient) CreateBulk(builders ...*AppCreate) *AppCreateBulk {
	return &AppCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppClient) MapCreateBulk(slice any, setFunc func(*AppCreate, int)) *AppCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppCreateBulk{err: fmt.Errorf("calling to AppClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for App.
func (c *AppClient) Update() *AppUpdate {
	mutation := newAppMutation(c.config, OpUpdate)
	return &AppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppClient) UpdateOne(a *App) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withApp(a))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppClient) UpdateOneID(id string) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withAppID(id))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for App.
func (c *AppClient) Delete() *AppDelete {
	mutation := newAppMutation(c.config, OpDelete)
	return &AppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppClient) DeleteOne(a *App) *AppDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppClient) DeleteOneID(id string) *AppDeleteOne {
	builder := c.Delete().Where(dbapp.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppDeleteOne{builder}
}

// Query returns a query builder for App.
func (c *AppClient) Query() *AppQuery {
	return &AppQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApp},
		inters: c.Interceptors(),
	}
}

// Get returns a App entity by its id.
func (c *AppClient) Get(ctx context.Context, id string) (*App, error) {
	return c.Query().Where(dbapp.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppClient) GetX(ctx context.Context, id string) *App {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCustomerApps queries the customer_apps edge of a App.
func (c *AppClient) QueryCustomerApps(a *App) *AppCustomerQuery {
	query := (&AppCustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, id),
			sqlgraph.To(appcustomer.Table, appcustomer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbapp.CustomerAppsTable, dbapp.CustomerAppsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingProfileTaxApp queries the billing_profile_tax_app edge of a App.
func (c *AppClient) QueryBillingProfileTaxApp(a *App) *BillingProfileQuery {
	query := (&BillingProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, id),
			sqlgraph.To(billingprofile.Table, billingprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbapp.BillingProfileTaxAppTable, dbapp.BillingProfileTaxAppColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingProfileInvoicingApp queries the billing_profile_invoicing_app edge of a App.
func (c *AppClient) QueryBillingProfileInvoicingApp(a *App) *BillingProfileQuery {
	query := (&BillingProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, id),
			sqlgraph.To(billingprofile.Table, billingprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbapp.BillingProfileInvoicingAppTable, dbapp.BillingProfileInvoicingAppColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingProfilePaymentApp queries the billing_profile_payment_app edge of a App.
func (c *AppClient) QueryBillingProfilePaymentApp(a *App) *BillingProfileQuery {
	query := (&BillingProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, id),
			sqlgraph.To(billingprofile.Table, billingprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbapp.BillingProfilePaymentAppTable, dbapp.BillingProfilePaymentAppColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingInvoiceTaxApp queries the billing_invoice_tax_app edge of a App.
func (c *AppClient) QueryBillingInvoiceTaxApp(a *App) *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, id),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbapp.BillingInvoiceTaxAppTable, dbapp.BillingInvoiceTaxAppColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingInvoiceInvoicingApp queries the billing_invoice_invoicing_app edge of a App.
func (c *AppClient) QueryBillingInvoiceInvoicingApp(a *App) *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, id),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbapp.BillingInvoiceInvoicingAppTable, dbapp.BillingInvoiceInvoicingAppColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingInvoicePaymentApp queries the billing_invoice_payment_app edge of a App.
func (c *AppClient) QueryBillingInvoicePaymentApp(a *App) *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, id),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbapp.BillingInvoicePaymentAppTable, dbapp.BillingInvoicePaymentAppColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppClient) Hooks() []Hook {
	return c.hooks.App
}

// Interceptors returns the client interceptors.
func (c *AppClient) Interceptors() []Interceptor {
	return c.inters.App
}

func (c *AppClient) mutate(ctx context.Context, m *AppMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown App mutation op: %q", m.Op())
	}
}

// AppCustomerClient is a client for the AppCustomer schema.
type AppCustomerClient struct {
	config
}

// NewAppCustomerClient returns a client for the AppCustomer from the given config.
func NewAppCustomerClient(c config) *AppCustomerClient {
	return &AppCustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appcustomer.Hooks(f(g(h())))`.
func (c *AppCustomerClient) Use(hooks ...Hook) {
	c.hooks.AppCustomer = append(c.hooks.AppCustomer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appcustomer.Intercept(f(g(h())))`.
func (c *AppCustomerClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppCustomer = append(c.inters.AppCustomer, interceptors...)
}

// Create returns a builder for creating a AppCustomer entity.
func (c *AppCustomerClient) Create() *AppCustomerCreate {
	mutation := newAppCustomerMutation(c.config, OpCreate)
	return &AppCustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppCustomer entities.
func (c *AppCustomerClient) CreateBulk(builders ...*AppCustomerCreate) *AppCustomerCreateBulk {
	return &AppCustomerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppCustomerClient) MapCreateBulk(slice any, setFunc func(*AppCustomerCreate, int)) *AppCustomerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppCustomerCreateBulk{err: fmt.Errorf("calling to AppCustomerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppCustomerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppCustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppCustomer.
func (c *AppCustomerClient) Update() *AppCustomerUpdate {
	mutation := newAppCustomerMutation(c.config, OpUpdate)
	return &AppCustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppCustomerClient) UpdateOne(ac *AppCustomer) *AppCustomerUpdateOne {
	mutation := newAppCustomerMutation(c.config, OpUpdateOne, withAppCustomer(ac))
	return &AppCustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppCustomerClient) UpdateOneID(id int) *AppCustomerUpdateOne {
	mutation := newAppCustomerMutation(c.config, OpUpdateOne, withAppCustomerID(id))
	return &AppCustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppCustomer.
func (c *AppCustomerClient) Delete() *AppCustomerDelete {
	mutation := newAppCustomerMutation(c.config, OpDelete)
	return &AppCustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppCustomerClient) DeleteOne(ac *AppCustomer) *AppCustomerDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppCustomerClient) DeleteOneID(id int) *AppCustomerDeleteOne {
	builder := c.Delete().Where(appcustomer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppCustomerDeleteOne{builder}
}

// Query returns a query builder for AppCustomer.
func (c *AppCustomerClient) Query() *AppCustomerQuery {
	return &AppCustomerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppCustomer},
		inters: c.Interceptors(),
	}
}

// Get returns a AppCustomer entity by its id.
func (c *AppCustomerClient) Get(ctx context.Context, id int) (*AppCustomer, error) {
	return c.Query().Where(appcustomer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppCustomerClient) GetX(ctx context.Context, id int) *AppCustomer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApp queries the app edge of a AppCustomer.
func (c *AppCustomerClient) QueryApp(ac *AppCustomer) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appcustomer.Table, appcustomer.FieldID, id),
			sqlgraph.To(dbapp.Table, dbapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appcustomer.AppTable, appcustomer.AppColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCustomer queries the customer edge of a AppCustomer.
func (c *AppCustomerClient) QueryCustomer(ac *AppCustomer) *CustomerQuery {
	query := (&CustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appcustomer.Table, appcustomer.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appcustomer.CustomerTable, appcustomer.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppCustomerClient) Hooks() []Hook {
	return c.hooks.AppCustomer
}

// Interceptors returns the client interceptors.
func (c *AppCustomerClient) Interceptors() []Interceptor {
	return c.inters.AppCustomer
}

func (c *AppCustomerClient) mutate(ctx context.Context, m *AppCustomerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppCustomerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppCustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppCustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppCustomerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown AppCustomer mutation op: %q", m.Op())
	}
}

// AppStripeClient is a client for the AppStripe schema.
type AppStripeClient struct {
	config
}

// NewAppStripeClient returns a client for the AppStripe from the given config.
func NewAppStripeClient(c config) *AppStripeClient {
	return &AppStripeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appstripe.Hooks(f(g(h())))`.
func (c *AppStripeClient) Use(hooks ...Hook) {
	c.hooks.AppStripe = append(c.hooks.AppStripe, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appstripe.Intercept(f(g(h())))`.
func (c *AppStripeClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppStripe = append(c.inters.AppStripe, interceptors...)
}

// Create returns a builder for creating a AppStripe entity.
func (c *AppStripeClient) Create() *AppStripeCreate {
	mutation := newAppStripeMutation(c.config, OpCreate)
	return &AppStripeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppStripe entities.
func (c *AppStripeClient) CreateBulk(builders ...*AppStripeCreate) *AppStripeCreateBulk {
	return &AppStripeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppStripeClient) MapCreateBulk(slice any, setFunc func(*AppStripeCreate, int)) *AppStripeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppStripeCreateBulk{err: fmt.Errorf("calling to AppStripeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppStripeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppStripeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppStripe.
func (c *AppStripeClient) Update() *AppStripeUpdate {
	mutation := newAppStripeMutation(c.config, OpUpdate)
	return &AppStripeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppStripeClient) UpdateOne(as *AppStripe) *AppStripeUpdateOne {
	mutation := newAppStripeMutation(c.config, OpUpdateOne, withAppStripe(as))
	return &AppStripeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppStripeClient) UpdateOneID(id string) *AppStripeUpdateOne {
	mutation := newAppStripeMutation(c.config, OpUpdateOne, withAppStripeID(id))
	return &AppStripeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppStripe.
func (c *AppStripeClient) Delete() *AppStripeDelete {
	mutation := newAppStripeMutation(c.config, OpDelete)
	return &AppStripeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppStripeClient) DeleteOne(as *AppStripe) *AppStripeDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppStripeClient) DeleteOneID(id string) *AppStripeDeleteOne {
	builder := c.Delete().Where(appstripe.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppStripeDeleteOne{builder}
}

// Query returns a query builder for AppStripe.
func (c *AppStripeClient) Query() *AppStripeQuery {
	return &AppStripeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppStripe},
		inters: c.Interceptors(),
	}
}

// Get returns a AppStripe entity by its id.
func (c *AppStripeClient) Get(ctx context.Context, id string) (*AppStripe, error) {
	return c.Query().Where(appstripe.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppStripeClient) GetX(ctx context.Context, id string) *AppStripe {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCustomerApps queries the customer_apps edge of a AppStripe.
func (c *AppStripeClient) QueryCustomerApps(as *AppStripe) *AppStripeCustomerQuery {
	query := (&AppStripeCustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appstripe.Table, appstripe.FieldID, id),
			sqlgraph.To(appstripecustomer.Table, appstripecustomer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, appstripe.CustomerAppsTable, appstripe.CustomerAppsColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApp queries the app edge of a AppStripe.
func (c *AppStripeClient) QueryApp(as *AppStripe) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appstripe.Table, appstripe.FieldID, id),
			sqlgraph.To(dbapp.Table, dbapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, appstripe.AppTable, appstripe.AppColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppStripeClient) Hooks() []Hook {
	return c.hooks.AppStripe
}

// Interceptors returns the client interceptors.
func (c *AppStripeClient) Interceptors() []Interceptor {
	return c.inters.AppStripe
}

func (c *AppStripeClient) mutate(ctx context.Context, m *AppStripeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppStripeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppStripeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppStripeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppStripeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown AppStripe mutation op: %q", m.Op())
	}
}

// AppStripeCustomerClient is a client for the AppStripeCustomer schema.
type AppStripeCustomerClient struct {
	config
}

// NewAppStripeCustomerClient returns a client for the AppStripeCustomer from the given config.
func NewAppStripeCustomerClient(c config) *AppStripeCustomerClient {
	return &AppStripeCustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appstripecustomer.Hooks(f(g(h())))`.
func (c *AppStripeCustomerClient) Use(hooks ...Hook) {
	c.hooks.AppStripeCustomer = append(c.hooks.AppStripeCustomer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appstripecustomer.Intercept(f(g(h())))`.
func (c *AppStripeCustomerClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppStripeCustomer = append(c.inters.AppStripeCustomer, interceptors...)
}

// Create returns a builder for creating a AppStripeCustomer entity.
func (c *AppStripeCustomerClient) Create() *AppStripeCustomerCreate {
	mutation := newAppStripeCustomerMutation(c.config, OpCreate)
	return &AppStripeCustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppStripeCustomer entities.
func (c *AppStripeCustomerClient) CreateBulk(builders ...*AppStripeCustomerCreate) *AppStripeCustomerCreateBulk {
	return &AppStripeCustomerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppStripeCustomerClient) MapCreateBulk(slice any, setFunc func(*AppStripeCustomerCreate, int)) *AppStripeCustomerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppStripeCustomerCreateBulk{err: fmt.Errorf("calling to AppStripeCustomerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppStripeCustomerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppStripeCustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppStripeCustomer.
func (c *AppStripeCustomerClient) Update() *AppStripeCustomerUpdate {
	mutation := newAppStripeCustomerMutation(c.config, OpUpdate)
	return &AppStripeCustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppStripeCustomerClient) UpdateOne(asc *AppStripeCustomer) *AppStripeCustomerUpdateOne {
	mutation := newAppStripeCustomerMutation(c.config, OpUpdateOne, withAppStripeCustomer(asc))
	return &AppStripeCustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppStripeCustomerClient) UpdateOneID(id int) *AppStripeCustomerUpdateOne {
	mutation := newAppStripeCustomerMutation(c.config, OpUpdateOne, withAppStripeCustomerID(id))
	return &AppStripeCustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppStripeCustomer.
func (c *AppStripeCustomerClient) Delete() *AppStripeCustomerDelete {
	mutation := newAppStripeCustomerMutation(c.config, OpDelete)
	return &AppStripeCustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppStripeCustomerClient) DeleteOne(asc *AppStripeCustomer) *AppStripeCustomerDeleteOne {
	return c.DeleteOneID(asc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppStripeCustomerClient) DeleteOneID(id int) *AppStripeCustomerDeleteOne {
	builder := c.Delete().Where(appstripecustomer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppStripeCustomerDeleteOne{builder}
}

// Query returns a query builder for AppStripeCustomer.
func (c *AppStripeCustomerClient) Query() *AppStripeCustomerQuery {
	return &AppStripeCustomerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppStripeCustomer},
		inters: c.Interceptors(),
	}
}

// Get returns a AppStripeCustomer entity by its id.
func (c *AppStripeCustomerClient) Get(ctx context.Context, id int) (*AppStripeCustomer, error) {
	return c.Query().Where(appstripecustomer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppStripeCustomerClient) GetX(ctx context.Context, id int) *AppStripeCustomer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStripeApp queries the stripe_app edge of a AppStripeCustomer.
func (c *AppStripeCustomerClient) QueryStripeApp(asc *AppStripeCustomer) *AppStripeQuery {
	query := (&AppStripeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := asc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appstripecustomer.Table, appstripecustomer.FieldID, id),
			sqlgraph.To(appstripe.Table, appstripe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appstripecustomer.StripeAppTable, appstripecustomer.StripeAppColumn),
		)
		fromV = sqlgraph.Neighbors(asc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCustomer queries the customer edge of a AppStripeCustomer.
func (c *AppStripeCustomerClient) QueryCustomer(asc *AppStripeCustomer) *CustomerQuery {
	query := (&CustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := asc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appstripecustomer.Table, appstripecustomer.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, appstripecustomer.CustomerTable, appstripecustomer.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(asc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppStripeCustomerClient) Hooks() []Hook {
	return c.hooks.AppStripeCustomer
}

// Interceptors returns the client interceptors.
func (c *AppStripeCustomerClient) Interceptors() []Interceptor {
	return c.inters.AppStripeCustomer
}

func (c *AppStripeCustomerClient) mutate(ctx context.Context, m *AppStripeCustomerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppStripeCustomerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppStripeCustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppStripeCustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppStripeCustomerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown AppStripeCustomer mutation op: %q", m.Op())
	}
}

// BalanceSnapshotClient is a client for the BalanceSnapshot schema.
type BalanceSnapshotClient struct {
	config
}

// NewBalanceSnapshotClient returns a client for the BalanceSnapshot from the given config.
func NewBalanceSnapshotClient(c config) *BalanceSnapshotClient {
	return &BalanceSnapshotClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `balancesnapshot.Hooks(f(g(h())))`.
func (c *BalanceSnapshotClient) Use(hooks ...Hook) {
	c.hooks.BalanceSnapshot = append(c.hooks.BalanceSnapshot, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `balancesnapshot.Intercept(f(g(h())))`.
func (c *BalanceSnapshotClient) Intercept(interceptors ...Interceptor) {
	c.inters.BalanceSnapshot = append(c.inters.BalanceSnapshot, interceptors...)
}

// Create returns a builder for creating a BalanceSnapshot entity.
func (c *BalanceSnapshotClient) Create() *BalanceSnapshotCreate {
	mutation := newBalanceSnapshotMutation(c.config, OpCreate)
	return &BalanceSnapshotCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BalanceSnapshot entities.
func (c *BalanceSnapshotClient) CreateBulk(builders ...*BalanceSnapshotCreate) *BalanceSnapshotCreateBulk {
	return &BalanceSnapshotCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BalanceSnapshotClient) MapCreateBulk(slice any, setFunc func(*BalanceSnapshotCreate, int)) *BalanceSnapshotCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BalanceSnapshotCreateBulk{err: fmt.Errorf("calling to BalanceSnapshotClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BalanceSnapshotCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BalanceSnapshotCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BalanceSnapshot.
func (c *BalanceSnapshotClient) Update() *BalanceSnapshotUpdate {
	mutation := newBalanceSnapshotMutation(c.config, OpUpdate)
	return &BalanceSnapshotUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BalanceSnapshotClient) UpdateOne(bs *BalanceSnapshot) *BalanceSnapshotUpdateOne {
	mutation := newBalanceSnapshotMutation(c.config, OpUpdateOne, withBalanceSnapshot(bs))
	return &BalanceSnapshotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BalanceSnapshotClient) UpdateOneID(id int) *BalanceSnapshotUpdateOne {
	mutation := newBalanceSnapshotMutation(c.config, OpUpdateOne, withBalanceSnapshotID(id))
	return &BalanceSnapshotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BalanceSnapshot.
func (c *BalanceSnapshotClient) Delete() *BalanceSnapshotDelete {
	mutation := newBalanceSnapshotMutation(c.config, OpDelete)
	return &BalanceSnapshotDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BalanceSnapshotClient) DeleteOne(bs *BalanceSnapshot) *BalanceSnapshotDeleteOne {
	return c.DeleteOneID(bs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BalanceSnapshotClient) DeleteOneID(id int) *BalanceSnapshotDeleteOne {
	builder := c.Delete().Where(balancesnapshot.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BalanceSnapshotDeleteOne{builder}
}

// Query returns a query builder for BalanceSnapshot.
func (c *BalanceSnapshotClient) Query() *BalanceSnapshotQuery {
	return &BalanceSnapshotQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBalanceSnapshot},
		inters: c.Interceptors(),
	}
}

// Get returns a BalanceSnapshot entity by its id.
func (c *BalanceSnapshotClient) Get(ctx context.Context, id int) (*BalanceSnapshot, error) {
	return c.Query().Where(balancesnapshot.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BalanceSnapshotClient) GetX(ctx context.Context, id int) *BalanceSnapshot {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEntitlement queries the entitlement edge of a BalanceSnapshot.
func (c *BalanceSnapshotClient) QueryEntitlement(bs *BalanceSnapshot) *EntitlementQuery {
	query := (&EntitlementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(balancesnapshot.Table, balancesnapshot.FieldID, id),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, balancesnapshot.EntitlementTable, balancesnapshot.EntitlementColumn),
		)
		fromV = sqlgraph.Neighbors(bs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BalanceSnapshotClient) Hooks() []Hook {
	return c.hooks.BalanceSnapshot
}

// Interceptors returns the client interceptors.
func (c *BalanceSnapshotClient) Interceptors() []Interceptor {
	return c.inters.BalanceSnapshot
}

func (c *BalanceSnapshotClient) mutate(ctx context.Context, m *BalanceSnapshotMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BalanceSnapshotCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BalanceSnapshotUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BalanceSnapshotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BalanceSnapshotDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BalanceSnapshot mutation op: %q", m.Op())
	}
}

// BillingCustomerLockClient is a client for the BillingCustomerLock schema.
type BillingCustomerLockClient struct {
	config
}

// NewBillingCustomerLockClient returns a client for the BillingCustomerLock from the given config.
func NewBillingCustomerLockClient(c config) *BillingCustomerLockClient {
	return &BillingCustomerLockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billingcustomerlock.Hooks(f(g(h())))`.
func (c *BillingCustomerLockClient) Use(hooks ...Hook) {
	c.hooks.BillingCustomerLock = append(c.hooks.BillingCustomerLock, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billingcustomerlock.Intercept(f(g(h())))`.
func (c *BillingCustomerLockClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingCustomerLock = append(c.inters.BillingCustomerLock, interceptors...)
}

// Create returns a builder for creating a BillingCustomerLock entity.
func (c *BillingCustomerLockClient) Create() *BillingCustomerLockCreate {
	mutation := newBillingCustomerLockMutation(c.config, OpCreate)
	return &BillingCustomerLockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingCustomerLock entities.
func (c *BillingCustomerLockClient) CreateBulk(builders ...*BillingCustomerLockCreate) *BillingCustomerLockCreateBulk {
	return &BillingCustomerLockCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingCustomerLockClient) MapCreateBulk(slice any, setFunc func(*BillingCustomerLockCreate, int)) *BillingCustomerLockCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingCustomerLockCreateBulk{err: fmt.Errorf("calling to BillingCustomerLockClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingCustomerLockCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingCustomerLockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingCustomerLock.
func (c *BillingCustomerLockClient) Update() *BillingCustomerLockUpdate {
	mutation := newBillingCustomerLockMutation(c.config, OpUpdate)
	return &BillingCustomerLockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingCustomerLockClient) UpdateOne(bcl *BillingCustomerLock) *BillingCustomerLockUpdateOne {
	mutation := newBillingCustomerLockMutation(c.config, OpUpdateOne, withBillingCustomerLock(bcl))
	return &BillingCustomerLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingCustomerLockClient) UpdateOneID(id string) *BillingCustomerLockUpdateOne {
	mutation := newBillingCustomerLockMutation(c.config, OpUpdateOne, withBillingCustomerLockID(id))
	return &BillingCustomerLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingCustomerLock.
func (c *BillingCustomerLockClient) Delete() *BillingCustomerLockDelete {
	mutation := newBillingCustomerLockMutation(c.config, OpDelete)
	return &BillingCustomerLockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingCustomerLockClient) DeleteOne(bcl *BillingCustomerLock) *BillingCustomerLockDeleteOne {
	return c.DeleteOneID(bcl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingCustomerLockClient) DeleteOneID(id string) *BillingCustomerLockDeleteOne {
	builder := c.Delete().Where(billingcustomerlock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingCustomerLockDeleteOne{builder}
}

// Query returns a query builder for BillingCustomerLock.
func (c *BillingCustomerLockClient) Query() *BillingCustomerLockQuery {
	return &BillingCustomerLockQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingCustomerLock},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingCustomerLock entity by its id.
func (c *BillingCustomerLockClient) Get(ctx context.Context, id string) (*BillingCustomerLock, error) {
	return c.Query().Where(billingcustomerlock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingCustomerLockClient) GetX(ctx context.Context, id string) *BillingCustomerLock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BillingCustomerLockClient) Hooks() []Hook {
	return c.hooks.BillingCustomerLock
}

// Interceptors returns the client interceptors.
func (c *BillingCustomerLockClient) Interceptors() []Interceptor {
	return c.inters.BillingCustomerLock
}

func (c *BillingCustomerLockClient) mutate(ctx context.Context, m *BillingCustomerLockMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingCustomerLockCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingCustomerLockUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingCustomerLockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingCustomerLockDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingCustomerLock mutation op: %q", m.Op())
	}
}

// BillingCustomerOverrideClient is a client for the BillingCustomerOverride schema.
type BillingCustomerOverrideClient struct {
	config
}

// NewBillingCustomerOverrideClient returns a client for the BillingCustomerOverride from the given config.
func NewBillingCustomerOverrideClient(c config) *BillingCustomerOverrideClient {
	return &BillingCustomerOverrideClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billingcustomeroverride.Hooks(f(g(h())))`.
func (c *BillingCustomerOverrideClient) Use(hooks ...Hook) {
	c.hooks.BillingCustomerOverride = append(c.hooks.BillingCustomerOverride, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billingcustomeroverride.Intercept(f(g(h())))`.
func (c *BillingCustomerOverrideClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingCustomerOverride = append(c.inters.BillingCustomerOverride, interceptors...)
}

// Create returns a builder for creating a BillingCustomerOverride entity.
func (c *BillingCustomerOverrideClient) Create() *BillingCustomerOverrideCreate {
	mutation := newBillingCustomerOverrideMutation(c.config, OpCreate)
	return &BillingCustomerOverrideCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingCustomerOverride entities.
func (c *BillingCustomerOverrideClient) CreateBulk(builders ...*BillingCustomerOverrideCreate) *BillingCustomerOverrideCreateBulk {
	return &BillingCustomerOverrideCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingCustomerOverrideClient) MapCreateBulk(slice any, setFunc func(*BillingCustomerOverrideCreate, int)) *BillingCustomerOverrideCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingCustomerOverrideCreateBulk{err: fmt.Errorf("calling to BillingCustomerOverrideClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingCustomerOverrideCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingCustomerOverrideCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingCustomerOverride.
func (c *BillingCustomerOverrideClient) Update() *BillingCustomerOverrideUpdate {
	mutation := newBillingCustomerOverrideMutation(c.config, OpUpdate)
	return &BillingCustomerOverrideUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingCustomerOverrideClient) UpdateOne(bco *BillingCustomerOverride) *BillingCustomerOverrideUpdateOne {
	mutation := newBillingCustomerOverrideMutation(c.config, OpUpdateOne, withBillingCustomerOverride(bco))
	return &BillingCustomerOverrideUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingCustomerOverrideClient) UpdateOneID(id string) *BillingCustomerOverrideUpdateOne {
	mutation := newBillingCustomerOverrideMutation(c.config, OpUpdateOne, withBillingCustomerOverrideID(id))
	return &BillingCustomerOverrideUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingCustomerOverride.
func (c *BillingCustomerOverrideClient) Delete() *BillingCustomerOverrideDelete {
	mutation := newBillingCustomerOverrideMutation(c.config, OpDelete)
	return &BillingCustomerOverrideDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingCustomerOverrideClient) DeleteOne(bco *BillingCustomerOverride) *BillingCustomerOverrideDeleteOne {
	return c.DeleteOneID(bco.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingCustomerOverrideClient) DeleteOneID(id string) *BillingCustomerOverrideDeleteOne {
	builder := c.Delete().Where(billingcustomeroverride.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingCustomerOverrideDeleteOne{builder}
}

// Query returns a query builder for BillingCustomerOverride.
func (c *BillingCustomerOverrideClient) Query() *BillingCustomerOverrideQuery {
	return &BillingCustomerOverrideQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingCustomerOverride},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingCustomerOverride entity by its id.
func (c *BillingCustomerOverrideClient) Get(ctx context.Context, id string) (*BillingCustomerOverride, error) {
	return c.Query().Where(billingcustomeroverride.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingCustomerOverrideClient) GetX(ctx context.Context, id string) *BillingCustomerOverride {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCustomer queries the customer edge of a BillingCustomerOverride.
func (c *BillingCustomerOverrideClient) QueryCustomer(bco *BillingCustomerOverride) *CustomerQuery {
	query := (&CustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bco.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingcustomeroverride.Table, billingcustomeroverride.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, billingcustomeroverride.CustomerTable, billingcustomeroverride.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(bco.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingProfile queries the billing_profile edge of a BillingCustomerOverride.
func (c *BillingCustomerOverrideClient) QueryBillingProfile(bco *BillingCustomerOverride) *BillingProfileQuery {
	query := (&BillingProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bco.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingcustomeroverride.Table, billingcustomeroverride.FieldID, id),
			sqlgraph.To(billingprofile.Table, billingprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billingcustomeroverride.BillingProfileTable, billingcustomeroverride.BillingProfileColumn),
		)
		fromV = sqlgraph.Neighbors(bco.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingCustomerOverrideClient) Hooks() []Hook {
	return c.hooks.BillingCustomerOverride
}

// Interceptors returns the client interceptors.
func (c *BillingCustomerOverrideClient) Interceptors() []Interceptor {
	return c.inters.BillingCustomerOverride
}

func (c *BillingCustomerOverrideClient) mutate(ctx context.Context, m *BillingCustomerOverrideMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingCustomerOverrideCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingCustomerOverrideUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingCustomerOverrideUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingCustomerOverrideDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingCustomerOverride mutation op: %q", m.Op())
	}
}

// BillingInvoiceClient is a client for the BillingInvoice schema.
type BillingInvoiceClient struct {
	config
}

// NewBillingInvoiceClient returns a client for the BillingInvoice from the given config.
func NewBillingInvoiceClient(c config) *BillingInvoiceClient {
	return &BillingInvoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billinginvoice.Hooks(f(g(h())))`.
func (c *BillingInvoiceClient) Use(hooks ...Hook) {
	c.hooks.BillingInvoice = append(c.hooks.BillingInvoice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billinginvoice.Intercept(f(g(h())))`.
func (c *BillingInvoiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingInvoice = append(c.inters.BillingInvoice, interceptors...)
}

// Create returns a builder for creating a BillingInvoice entity.
func (c *BillingInvoiceClient) Create() *BillingInvoiceCreate {
	mutation := newBillingInvoiceMutation(c.config, OpCreate)
	return &BillingInvoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingInvoice entities.
func (c *BillingInvoiceClient) CreateBulk(builders ...*BillingInvoiceCreate) *BillingInvoiceCreateBulk {
	return &BillingInvoiceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingInvoiceClient) MapCreateBulk(slice any, setFunc func(*BillingInvoiceCreate, int)) *BillingInvoiceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingInvoiceCreateBulk{err: fmt.Errorf("calling to BillingInvoiceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingInvoiceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingInvoiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingInvoice.
func (c *BillingInvoiceClient) Update() *BillingInvoiceUpdate {
	mutation := newBillingInvoiceMutation(c.config, OpUpdate)
	return &BillingInvoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingInvoiceClient) UpdateOne(bi *BillingInvoice) *BillingInvoiceUpdateOne {
	mutation := newBillingInvoiceMutation(c.config, OpUpdateOne, withBillingInvoice(bi))
	return &BillingInvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingInvoiceClient) UpdateOneID(id string) *BillingInvoiceUpdateOne {
	mutation := newBillingInvoiceMutation(c.config, OpUpdateOne, withBillingInvoiceID(id))
	return &BillingInvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingInvoice.
func (c *BillingInvoiceClient) Delete() *BillingInvoiceDelete {
	mutation := newBillingInvoiceMutation(c.config, OpDelete)
	return &BillingInvoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingInvoiceClient) DeleteOne(bi *BillingInvoice) *BillingInvoiceDeleteOne {
	return c.DeleteOneID(bi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingInvoiceClient) DeleteOneID(id string) *BillingInvoiceDeleteOne {
	builder := c.Delete().Where(billinginvoice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingInvoiceDeleteOne{builder}
}

// Query returns a query builder for BillingInvoice.
func (c *BillingInvoiceClient) Query() *BillingInvoiceQuery {
	return &BillingInvoiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingInvoice},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingInvoice entity by its id.
func (c *BillingInvoiceClient) Get(ctx context.Context, id string) (*BillingInvoice, error) {
	return c.Query().Where(billinginvoice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingInvoiceClient) GetX(ctx context.Context, id string) *BillingInvoice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySourceBillingProfile queries the source_billing_profile edge of a BillingInvoice.
func (c *BillingInvoiceClient) QuerySourceBillingProfile(bi *BillingInvoice) *BillingProfileQuery {
	query := (&BillingProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoice.Table, billinginvoice.FieldID, id),
			sqlgraph.To(billingprofile.Table, billingprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billinginvoice.SourceBillingProfileTable, billinginvoice.SourceBillingProfileColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingWorkflowConfig queries the billing_workflow_config edge of a BillingInvoice.
func (c *BillingInvoiceClient) QueryBillingWorkflowConfig(bi *BillingInvoice) *BillingWorkflowConfigQuery {
	query := (&BillingWorkflowConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoice.Table, billinginvoice.FieldID, id),
			sqlgraph.To(billingworkflowconfig.Table, billingworkflowconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, billinginvoice.BillingWorkflowConfigTable, billinginvoice.BillingWorkflowConfigColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingInvoiceLines queries the billing_invoice_lines edge of a BillingInvoice.
func (c *BillingInvoiceClient) QueryBillingInvoiceLines(bi *BillingInvoice) *BillingInvoiceLineQuery {
	query := (&BillingInvoiceLineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoice.Table, billinginvoice.FieldID, id),
			sqlgraph.To(billinginvoiceline.Table, billinginvoiceline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, billinginvoice.BillingInvoiceLinesTable, billinginvoice.BillingInvoiceLinesColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingInvoiceValidationIssues queries the billing_invoice_validation_issues edge of a BillingInvoice.
func (c *BillingInvoiceClient) QueryBillingInvoiceValidationIssues(bi *BillingInvoice) *BillingInvoiceValidationIssueQuery {
	query := (&BillingInvoiceValidationIssueClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoice.Table, billinginvoice.FieldID, id),
			sqlgraph.To(billinginvoicevalidationissue.Table, billinginvoicevalidationissue.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, billinginvoice.BillingInvoiceValidationIssuesTable, billinginvoice.BillingInvoiceValidationIssuesColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingInvoiceCustomer queries the billing_invoice_customer edge of a BillingInvoice.
func (c *BillingInvoiceClient) QueryBillingInvoiceCustomer(bi *BillingInvoice) *CustomerQuery {
	query := (&CustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoice.Table, billinginvoice.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billinginvoice.BillingInvoiceCustomerTable, billinginvoice.BillingInvoiceCustomerColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaxApp queries the tax_app edge of a BillingInvoice.
func (c *BillingInvoiceClient) QueryTaxApp(bi *BillingInvoice) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoice.Table, billinginvoice.FieldID, id),
			sqlgraph.To(dbapp.Table, dbapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billinginvoice.TaxAppTable, billinginvoice.TaxAppColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvoicingApp queries the invoicing_app edge of a BillingInvoice.
func (c *BillingInvoiceClient) QueryInvoicingApp(bi *BillingInvoice) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoice.Table, billinginvoice.FieldID, id),
			sqlgraph.To(dbapp.Table, dbapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billinginvoice.InvoicingAppTable, billinginvoice.InvoicingAppColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPaymentApp queries the payment_app edge of a BillingInvoice.
func (c *BillingInvoiceClient) QueryPaymentApp(bi *BillingInvoice) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoice.Table, billinginvoice.FieldID, id),
			sqlgraph.To(dbapp.Table, dbapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billinginvoice.PaymentAppTable, billinginvoice.PaymentAppColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingInvoiceClient) Hooks() []Hook {
	return c.hooks.BillingInvoice
}

// Interceptors returns the client interceptors.
func (c *BillingInvoiceClient) Interceptors() []Interceptor {
	return c.inters.BillingInvoice
}

func (c *BillingInvoiceClient) mutate(ctx context.Context, m *BillingInvoiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingInvoiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingInvoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingInvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingInvoiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingInvoice mutation op: %q", m.Op())
	}
}

// BillingInvoiceDiscountClient is a client for the BillingInvoiceDiscount schema.
type BillingInvoiceDiscountClient struct {
	config
}

// NewBillingInvoiceDiscountClient returns a client for the BillingInvoiceDiscount from the given config.
func NewBillingInvoiceDiscountClient(c config) *BillingInvoiceDiscountClient {
	return &BillingInvoiceDiscountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billinginvoicediscount.Hooks(f(g(h())))`.
func (c *BillingInvoiceDiscountClient) Use(hooks ...Hook) {
	c.hooks.BillingInvoiceDiscount = append(c.hooks.BillingInvoiceDiscount, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billinginvoicediscount.Intercept(f(g(h())))`.
func (c *BillingInvoiceDiscountClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingInvoiceDiscount = append(c.inters.BillingInvoiceDiscount, interceptors...)
}

// Create returns a builder for creating a BillingInvoiceDiscount entity.
func (c *BillingInvoiceDiscountClient) Create() *BillingInvoiceDiscountCreate {
	mutation := newBillingInvoiceDiscountMutation(c.config, OpCreate)
	return &BillingInvoiceDiscountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingInvoiceDiscount entities.
func (c *BillingInvoiceDiscountClient) CreateBulk(builders ...*BillingInvoiceDiscountCreate) *BillingInvoiceDiscountCreateBulk {
	return &BillingInvoiceDiscountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingInvoiceDiscountClient) MapCreateBulk(slice any, setFunc func(*BillingInvoiceDiscountCreate, int)) *BillingInvoiceDiscountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingInvoiceDiscountCreateBulk{err: fmt.Errorf("calling to BillingInvoiceDiscountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingInvoiceDiscountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingInvoiceDiscountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingInvoiceDiscount.
func (c *BillingInvoiceDiscountClient) Update() *BillingInvoiceDiscountUpdate {
	mutation := newBillingInvoiceDiscountMutation(c.config, OpUpdate)
	return &BillingInvoiceDiscountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingInvoiceDiscountClient) UpdateOne(bid *BillingInvoiceDiscount) *BillingInvoiceDiscountUpdateOne {
	mutation := newBillingInvoiceDiscountMutation(c.config, OpUpdateOne, withBillingInvoiceDiscount(bid))
	return &BillingInvoiceDiscountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingInvoiceDiscountClient) UpdateOneID(id string) *BillingInvoiceDiscountUpdateOne {
	mutation := newBillingInvoiceDiscountMutation(c.config, OpUpdateOne, withBillingInvoiceDiscountID(id))
	return &BillingInvoiceDiscountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingInvoiceDiscount.
func (c *BillingInvoiceDiscountClient) Delete() *BillingInvoiceDiscountDelete {
	mutation := newBillingInvoiceDiscountMutation(c.config, OpDelete)
	return &BillingInvoiceDiscountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingInvoiceDiscountClient) DeleteOne(bid *BillingInvoiceDiscount) *BillingInvoiceDiscountDeleteOne {
	return c.DeleteOneID(bid.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingInvoiceDiscountClient) DeleteOneID(id string) *BillingInvoiceDiscountDeleteOne {
	builder := c.Delete().Where(billinginvoicediscount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingInvoiceDiscountDeleteOne{builder}
}

// Query returns a query builder for BillingInvoiceDiscount.
func (c *BillingInvoiceDiscountClient) Query() *BillingInvoiceDiscountQuery {
	return &BillingInvoiceDiscountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingInvoiceDiscount},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingInvoiceDiscount entity by its id.
func (c *BillingInvoiceDiscountClient) Get(ctx context.Context, id string) (*BillingInvoiceDiscount, error) {
	return c.Query().Where(billinginvoicediscount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingInvoiceDiscountClient) GetX(ctx context.Context, id string) *BillingInvoiceDiscount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BillingInvoiceDiscountClient) Hooks() []Hook {
	return c.hooks.BillingInvoiceDiscount
}

// Interceptors returns the client interceptors.
func (c *BillingInvoiceDiscountClient) Interceptors() []Interceptor {
	return c.inters.BillingInvoiceDiscount
}

func (c *BillingInvoiceDiscountClient) mutate(ctx context.Context, m *BillingInvoiceDiscountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingInvoiceDiscountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingInvoiceDiscountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingInvoiceDiscountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingInvoiceDiscountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingInvoiceDiscount mutation op: %q", m.Op())
	}
}

// BillingInvoiceFlatFeeLineConfigClient is a client for the BillingInvoiceFlatFeeLineConfig schema.
type BillingInvoiceFlatFeeLineConfigClient struct {
	config
}

// NewBillingInvoiceFlatFeeLineConfigClient returns a client for the BillingInvoiceFlatFeeLineConfig from the given config.
func NewBillingInvoiceFlatFeeLineConfigClient(c config) *BillingInvoiceFlatFeeLineConfigClient {
	return &BillingInvoiceFlatFeeLineConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billinginvoiceflatfeelineconfig.Hooks(f(g(h())))`.
func (c *BillingInvoiceFlatFeeLineConfigClient) Use(hooks ...Hook) {
	c.hooks.BillingInvoiceFlatFeeLineConfig = append(c.hooks.BillingInvoiceFlatFeeLineConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billinginvoiceflatfeelineconfig.Intercept(f(g(h())))`.
func (c *BillingInvoiceFlatFeeLineConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingInvoiceFlatFeeLineConfig = append(c.inters.BillingInvoiceFlatFeeLineConfig, interceptors...)
}

// Create returns a builder for creating a BillingInvoiceFlatFeeLineConfig entity.
func (c *BillingInvoiceFlatFeeLineConfigClient) Create() *BillingInvoiceFlatFeeLineConfigCreate {
	mutation := newBillingInvoiceFlatFeeLineConfigMutation(c.config, OpCreate)
	return &BillingInvoiceFlatFeeLineConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingInvoiceFlatFeeLineConfig entities.
func (c *BillingInvoiceFlatFeeLineConfigClient) CreateBulk(builders ...*BillingInvoiceFlatFeeLineConfigCreate) *BillingInvoiceFlatFeeLineConfigCreateBulk {
	return &BillingInvoiceFlatFeeLineConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingInvoiceFlatFeeLineConfigClient) MapCreateBulk(slice any, setFunc func(*BillingInvoiceFlatFeeLineConfigCreate, int)) *BillingInvoiceFlatFeeLineConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingInvoiceFlatFeeLineConfigCreateBulk{err: fmt.Errorf("calling to BillingInvoiceFlatFeeLineConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingInvoiceFlatFeeLineConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingInvoiceFlatFeeLineConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingInvoiceFlatFeeLineConfig.
func (c *BillingInvoiceFlatFeeLineConfigClient) Update() *BillingInvoiceFlatFeeLineConfigUpdate {
	mutation := newBillingInvoiceFlatFeeLineConfigMutation(c.config, OpUpdate)
	return &BillingInvoiceFlatFeeLineConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingInvoiceFlatFeeLineConfigClient) UpdateOne(bifflc *BillingInvoiceFlatFeeLineConfig) *BillingInvoiceFlatFeeLineConfigUpdateOne {
	mutation := newBillingInvoiceFlatFeeLineConfigMutation(c.config, OpUpdateOne, withBillingInvoiceFlatFeeLineConfig(bifflc))
	return &BillingInvoiceFlatFeeLineConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingInvoiceFlatFeeLineConfigClient) UpdateOneID(id string) *BillingInvoiceFlatFeeLineConfigUpdateOne {
	mutation := newBillingInvoiceFlatFeeLineConfigMutation(c.config, OpUpdateOne, withBillingInvoiceFlatFeeLineConfigID(id))
	return &BillingInvoiceFlatFeeLineConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingInvoiceFlatFeeLineConfig.
func (c *BillingInvoiceFlatFeeLineConfigClient) Delete() *BillingInvoiceFlatFeeLineConfigDelete {
	mutation := newBillingInvoiceFlatFeeLineConfigMutation(c.config, OpDelete)
	return &BillingInvoiceFlatFeeLineConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingInvoiceFlatFeeLineConfigClient) DeleteOne(bifflc *BillingInvoiceFlatFeeLineConfig) *BillingInvoiceFlatFeeLineConfigDeleteOne {
	return c.DeleteOneID(bifflc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingInvoiceFlatFeeLineConfigClient) DeleteOneID(id string) *BillingInvoiceFlatFeeLineConfigDeleteOne {
	builder := c.Delete().Where(billinginvoiceflatfeelineconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingInvoiceFlatFeeLineConfigDeleteOne{builder}
}

// Query returns a query builder for BillingInvoiceFlatFeeLineConfig.
func (c *BillingInvoiceFlatFeeLineConfigClient) Query() *BillingInvoiceFlatFeeLineConfigQuery {
	return &BillingInvoiceFlatFeeLineConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingInvoiceFlatFeeLineConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingInvoiceFlatFeeLineConfig entity by its id.
func (c *BillingInvoiceFlatFeeLineConfigClient) Get(ctx context.Context, id string) (*BillingInvoiceFlatFeeLineConfig, error) {
	return c.Query().Where(billinginvoiceflatfeelineconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingInvoiceFlatFeeLineConfigClient) GetX(ctx context.Context, id string) *BillingInvoiceFlatFeeLineConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BillingInvoiceFlatFeeLineConfigClient) Hooks() []Hook {
	return c.hooks.BillingInvoiceFlatFeeLineConfig
}

// Interceptors returns the client interceptors.
func (c *BillingInvoiceFlatFeeLineConfigClient) Interceptors() []Interceptor {
	return c.inters.BillingInvoiceFlatFeeLineConfig
}

func (c *BillingInvoiceFlatFeeLineConfigClient) mutate(ctx context.Context, m *BillingInvoiceFlatFeeLineConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingInvoiceFlatFeeLineConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingInvoiceFlatFeeLineConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingInvoiceFlatFeeLineConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingInvoiceFlatFeeLineConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingInvoiceFlatFeeLineConfig mutation op: %q", m.Op())
	}
}

// BillingInvoiceLineClient is a client for the BillingInvoiceLine schema.
type BillingInvoiceLineClient struct {
	config
}

// NewBillingInvoiceLineClient returns a client for the BillingInvoiceLine from the given config.
func NewBillingInvoiceLineClient(c config) *BillingInvoiceLineClient {
	return &BillingInvoiceLineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billinginvoiceline.Hooks(f(g(h())))`.
func (c *BillingInvoiceLineClient) Use(hooks ...Hook) {
	c.hooks.BillingInvoiceLine = append(c.hooks.BillingInvoiceLine, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billinginvoiceline.Intercept(f(g(h())))`.
func (c *BillingInvoiceLineClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingInvoiceLine = append(c.inters.BillingInvoiceLine, interceptors...)
}

// Create returns a builder for creating a BillingInvoiceLine entity.
func (c *BillingInvoiceLineClient) Create() *BillingInvoiceLineCreate {
	mutation := newBillingInvoiceLineMutation(c.config, OpCreate)
	return &BillingInvoiceLineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingInvoiceLine entities.
func (c *BillingInvoiceLineClient) CreateBulk(builders ...*BillingInvoiceLineCreate) *BillingInvoiceLineCreateBulk {
	return &BillingInvoiceLineCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingInvoiceLineClient) MapCreateBulk(slice any, setFunc func(*BillingInvoiceLineCreate, int)) *BillingInvoiceLineCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingInvoiceLineCreateBulk{err: fmt.Errorf("calling to BillingInvoiceLineClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingInvoiceLineCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingInvoiceLineCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingInvoiceLine.
func (c *BillingInvoiceLineClient) Update() *BillingInvoiceLineUpdate {
	mutation := newBillingInvoiceLineMutation(c.config, OpUpdate)
	return &BillingInvoiceLineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingInvoiceLineClient) UpdateOne(bil *BillingInvoiceLine) *BillingInvoiceLineUpdateOne {
	mutation := newBillingInvoiceLineMutation(c.config, OpUpdateOne, withBillingInvoiceLine(bil))
	return &BillingInvoiceLineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingInvoiceLineClient) UpdateOneID(id string) *BillingInvoiceLineUpdateOne {
	mutation := newBillingInvoiceLineMutation(c.config, OpUpdateOne, withBillingInvoiceLineID(id))
	return &BillingInvoiceLineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingInvoiceLine.
func (c *BillingInvoiceLineClient) Delete() *BillingInvoiceLineDelete {
	mutation := newBillingInvoiceLineMutation(c.config, OpDelete)
	return &BillingInvoiceLineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingInvoiceLineClient) DeleteOne(bil *BillingInvoiceLine) *BillingInvoiceLineDeleteOne {
	return c.DeleteOneID(bil.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingInvoiceLineClient) DeleteOneID(id string) *BillingInvoiceLineDeleteOne {
	builder := c.Delete().Where(billinginvoiceline.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingInvoiceLineDeleteOne{builder}
}

// Query returns a query builder for BillingInvoiceLine.
func (c *BillingInvoiceLineClient) Query() *BillingInvoiceLineQuery {
	return &BillingInvoiceLineQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingInvoiceLine},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingInvoiceLine entity by its id.
func (c *BillingInvoiceLineClient) Get(ctx context.Context, id string) (*BillingInvoiceLine, error) {
	return c.Query().Where(billinginvoiceline.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingInvoiceLineClient) GetX(ctx context.Context, id string) *BillingInvoiceLine {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBillingInvoice queries the billing_invoice edge of a BillingInvoiceLine.
func (c *BillingInvoiceLineClient) QueryBillingInvoice(bil *BillingInvoiceLine) *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bil.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoiceline.Table, billinginvoiceline.FieldID, id),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billinginvoiceline.BillingInvoiceTable, billinginvoiceline.BillingInvoiceColumn),
		)
		fromV = sqlgraph.Neighbors(bil.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFlatFeeLine queries the flat_fee_line edge of a BillingInvoiceLine.
func (c *BillingInvoiceLineClient) QueryFlatFeeLine(bil *BillingInvoiceLine) *BillingInvoiceFlatFeeLineConfigQuery {
	query := (&BillingInvoiceFlatFeeLineConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bil.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoiceline.Table, billinginvoiceline.FieldID, id),
			sqlgraph.To(billinginvoiceflatfeelineconfig.Table, billinginvoiceflatfeelineconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, billinginvoiceline.FlatFeeLineTable, billinginvoiceline.FlatFeeLineColumn),
		)
		fromV = sqlgraph.Neighbors(bil.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsageBasedLine queries the usage_based_line edge of a BillingInvoiceLine.
func (c *BillingInvoiceLineClient) QueryUsageBasedLine(bil *BillingInvoiceLine) *BillingInvoiceUsageBasedLineConfigQuery {
	query := (&BillingInvoiceUsageBasedLineConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bil.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoiceline.Table, billinginvoiceline.FieldID, id),
			sqlgraph.To(billinginvoiceusagebasedlineconfig.Table, billinginvoiceusagebasedlineconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, billinginvoiceline.UsageBasedLineTable, billinginvoiceline.UsageBasedLineColumn),
		)
		fromV = sqlgraph.Neighbors(bil.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParentLine queries the parent_line edge of a BillingInvoiceLine.
func (c *BillingInvoiceLineClient) QueryParentLine(bil *BillingInvoiceLine) *BillingInvoiceLineQuery {
	query := (&BillingInvoiceLineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bil.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoiceline.Table, billinginvoiceline.FieldID, id),
			sqlgraph.To(billinginvoiceline.Table, billinginvoiceline.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billinginvoiceline.ParentLineTable, billinginvoiceline.ParentLineColumn),
		)
		fromV = sqlgraph.Neighbors(bil.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDetailedLines queries the detailed_lines edge of a BillingInvoiceLine.
func (c *BillingInvoiceLineClient) QueryDetailedLines(bil *BillingInvoiceLine) *BillingInvoiceLineQuery {
	query := (&BillingInvoiceLineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bil.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoiceline.Table, billinginvoiceline.FieldID, id),
			sqlgraph.To(billinginvoiceline.Table, billinginvoiceline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, billinginvoiceline.DetailedLinesTable, billinginvoiceline.DetailedLinesColumn),
		)
		fromV = sqlgraph.Neighbors(bil.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLineDiscounts queries the line_discounts edge of a BillingInvoiceLine.
func (c *BillingInvoiceLineClient) QueryLineDiscounts(bil *BillingInvoiceLine) *BillingInvoiceLineDiscountQuery {
	query := (&BillingInvoiceLineDiscountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bil.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoiceline.Table, billinginvoiceline.FieldID, id),
			sqlgraph.To(billinginvoicelinediscount.Table, billinginvoicelinediscount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, billinginvoiceline.LineDiscountsTable, billinginvoiceline.LineDiscountsColumn),
		)
		fromV = sqlgraph.Neighbors(bil.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscription queries the subscription edge of a BillingInvoiceLine.
func (c *BillingInvoiceLineClient) QuerySubscription(bil *BillingInvoiceLine) *SubscriptionQuery {
	query := (&SubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bil.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoiceline.Table, billinginvoiceline.FieldID, id),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billinginvoiceline.SubscriptionTable, billinginvoiceline.SubscriptionColumn),
		)
		fromV = sqlgraph.Neighbors(bil.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscriptionPhase queries the subscription_phase edge of a BillingInvoiceLine.
func (c *BillingInvoiceLineClient) QuerySubscriptionPhase(bil *BillingInvoiceLine) *SubscriptionPhaseQuery {
	query := (&SubscriptionPhaseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bil.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoiceline.Table, billinginvoiceline.FieldID, id),
			sqlgraph.To(subscriptionphase.Table, subscriptionphase.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billinginvoiceline.SubscriptionPhaseTable, billinginvoiceline.SubscriptionPhaseColumn),
		)
		fromV = sqlgraph.Neighbors(bil.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscriptionItem queries the subscription_item edge of a BillingInvoiceLine.
func (c *BillingInvoiceLineClient) QuerySubscriptionItem(bil *BillingInvoiceLine) *SubscriptionItemQuery {
	query := (&SubscriptionItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bil.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoiceline.Table, billinginvoiceline.FieldID, id),
			sqlgraph.To(subscriptionitem.Table, subscriptionitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billinginvoiceline.SubscriptionItemTable, billinginvoiceline.SubscriptionItemColumn),
		)
		fromV = sqlgraph.Neighbors(bil.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingInvoiceLineClient) Hooks() []Hook {
	return c.hooks.BillingInvoiceLine
}

// Interceptors returns the client interceptors.
func (c *BillingInvoiceLineClient) Interceptors() []Interceptor {
	return c.inters.BillingInvoiceLine
}

func (c *BillingInvoiceLineClient) mutate(ctx context.Context, m *BillingInvoiceLineMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingInvoiceLineCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingInvoiceLineUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingInvoiceLineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingInvoiceLineDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingInvoiceLine mutation op: %q", m.Op())
	}
}

// BillingInvoiceLineDiscountClient is a client for the BillingInvoiceLineDiscount schema.
type BillingInvoiceLineDiscountClient struct {
	config
}

// NewBillingInvoiceLineDiscountClient returns a client for the BillingInvoiceLineDiscount from the given config.
func NewBillingInvoiceLineDiscountClient(c config) *BillingInvoiceLineDiscountClient {
	return &BillingInvoiceLineDiscountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billinginvoicelinediscount.Hooks(f(g(h())))`.
func (c *BillingInvoiceLineDiscountClient) Use(hooks ...Hook) {
	c.hooks.BillingInvoiceLineDiscount = append(c.hooks.BillingInvoiceLineDiscount, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billinginvoicelinediscount.Intercept(f(g(h())))`.
func (c *BillingInvoiceLineDiscountClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingInvoiceLineDiscount = append(c.inters.BillingInvoiceLineDiscount, interceptors...)
}

// Create returns a builder for creating a BillingInvoiceLineDiscount entity.
func (c *BillingInvoiceLineDiscountClient) Create() *BillingInvoiceLineDiscountCreate {
	mutation := newBillingInvoiceLineDiscountMutation(c.config, OpCreate)
	return &BillingInvoiceLineDiscountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingInvoiceLineDiscount entities.
func (c *BillingInvoiceLineDiscountClient) CreateBulk(builders ...*BillingInvoiceLineDiscountCreate) *BillingInvoiceLineDiscountCreateBulk {
	return &BillingInvoiceLineDiscountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingInvoiceLineDiscountClient) MapCreateBulk(slice any, setFunc func(*BillingInvoiceLineDiscountCreate, int)) *BillingInvoiceLineDiscountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingInvoiceLineDiscountCreateBulk{err: fmt.Errorf("calling to BillingInvoiceLineDiscountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingInvoiceLineDiscountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingInvoiceLineDiscountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingInvoiceLineDiscount.
func (c *BillingInvoiceLineDiscountClient) Update() *BillingInvoiceLineDiscountUpdate {
	mutation := newBillingInvoiceLineDiscountMutation(c.config, OpUpdate)
	return &BillingInvoiceLineDiscountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingInvoiceLineDiscountClient) UpdateOne(bild *BillingInvoiceLineDiscount) *BillingInvoiceLineDiscountUpdateOne {
	mutation := newBillingInvoiceLineDiscountMutation(c.config, OpUpdateOne, withBillingInvoiceLineDiscount(bild))
	return &BillingInvoiceLineDiscountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingInvoiceLineDiscountClient) UpdateOneID(id string) *BillingInvoiceLineDiscountUpdateOne {
	mutation := newBillingInvoiceLineDiscountMutation(c.config, OpUpdateOne, withBillingInvoiceLineDiscountID(id))
	return &BillingInvoiceLineDiscountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingInvoiceLineDiscount.
func (c *BillingInvoiceLineDiscountClient) Delete() *BillingInvoiceLineDiscountDelete {
	mutation := newBillingInvoiceLineDiscountMutation(c.config, OpDelete)
	return &BillingInvoiceLineDiscountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingInvoiceLineDiscountClient) DeleteOne(bild *BillingInvoiceLineDiscount) *BillingInvoiceLineDiscountDeleteOne {
	return c.DeleteOneID(bild.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingInvoiceLineDiscountClient) DeleteOneID(id string) *BillingInvoiceLineDiscountDeleteOne {
	builder := c.Delete().Where(billinginvoicelinediscount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingInvoiceLineDiscountDeleteOne{builder}
}

// Query returns a query builder for BillingInvoiceLineDiscount.
func (c *BillingInvoiceLineDiscountClient) Query() *BillingInvoiceLineDiscountQuery {
	return &BillingInvoiceLineDiscountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingInvoiceLineDiscount},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingInvoiceLineDiscount entity by its id.
func (c *BillingInvoiceLineDiscountClient) Get(ctx context.Context, id string) (*BillingInvoiceLineDiscount, error) {
	return c.Query().Where(billinginvoicelinediscount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingInvoiceLineDiscountClient) GetX(ctx context.Context, id string) *BillingInvoiceLineDiscount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBillingInvoiceLine queries the billing_invoice_line edge of a BillingInvoiceLineDiscount.
func (c *BillingInvoiceLineDiscountClient) QueryBillingInvoiceLine(bild *BillingInvoiceLineDiscount) *BillingInvoiceLineQuery {
	query := (&BillingInvoiceLineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bild.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoicelinediscount.Table, billinginvoicelinediscount.FieldID, id),
			sqlgraph.To(billinginvoiceline.Table, billinginvoiceline.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billinginvoicelinediscount.BillingInvoiceLineTable, billinginvoicelinediscount.BillingInvoiceLineColumn),
		)
		fromV = sqlgraph.Neighbors(bild.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingInvoiceLineDiscountClient) Hooks() []Hook {
	return c.hooks.BillingInvoiceLineDiscount
}

// Interceptors returns the client interceptors.
func (c *BillingInvoiceLineDiscountClient) Interceptors() []Interceptor {
	return c.inters.BillingInvoiceLineDiscount
}

func (c *BillingInvoiceLineDiscountClient) mutate(ctx context.Context, m *BillingInvoiceLineDiscountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingInvoiceLineDiscountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingInvoiceLineDiscountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingInvoiceLineDiscountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingInvoiceLineDiscountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingInvoiceLineDiscount mutation op: %q", m.Op())
	}
}

// BillingInvoiceUsageBasedLineConfigClient is a client for the BillingInvoiceUsageBasedLineConfig schema.
type BillingInvoiceUsageBasedLineConfigClient struct {
	config
}

// NewBillingInvoiceUsageBasedLineConfigClient returns a client for the BillingInvoiceUsageBasedLineConfig from the given config.
func NewBillingInvoiceUsageBasedLineConfigClient(c config) *BillingInvoiceUsageBasedLineConfigClient {
	return &BillingInvoiceUsageBasedLineConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billinginvoiceusagebasedlineconfig.Hooks(f(g(h())))`.
func (c *BillingInvoiceUsageBasedLineConfigClient) Use(hooks ...Hook) {
	c.hooks.BillingInvoiceUsageBasedLineConfig = append(c.hooks.BillingInvoiceUsageBasedLineConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billinginvoiceusagebasedlineconfig.Intercept(f(g(h())))`.
func (c *BillingInvoiceUsageBasedLineConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingInvoiceUsageBasedLineConfig = append(c.inters.BillingInvoiceUsageBasedLineConfig, interceptors...)
}

// Create returns a builder for creating a BillingInvoiceUsageBasedLineConfig entity.
func (c *BillingInvoiceUsageBasedLineConfigClient) Create() *BillingInvoiceUsageBasedLineConfigCreate {
	mutation := newBillingInvoiceUsageBasedLineConfigMutation(c.config, OpCreate)
	return &BillingInvoiceUsageBasedLineConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingInvoiceUsageBasedLineConfig entities.
func (c *BillingInvoiceUsageBasedLineConfigClient) CreateBulk(builders ...*BillingInvoiceUsageBasedLineConfigCreate) *BillingInvoiceUsageBasedLineConfigCreateBulk {
	return &BillingInvoiceUsageBasedLineConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingInvoiceUsageBasedLineConfigClient) MapCreateBulk(slice any, setFunc func(*BillingInvoiceUsageBasedLineConfigCreate, int)) *BillingInvoiceUsageBasedLineConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingInvoiceUsageBasedLineConfigCreateBulk{err: fmt.Errorf("calling to BillingInvoiceUsageBasedLineConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingInvoiceUsageBasedLineConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingInvoiceUsageBasedLineConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingInvoiceUsageBasedLineConfig.
func (c *BillingInvoiceUsageBasedLineConfigClient) Update() *BillingInvoiceUsageBasedLineConfigUpdate {
	mutation := newBillingInvoiceUsageBasedLineConfigMutation(c.config, OpUpdate)
	return &BillingInvoiceUsageBasedLineConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingInvoiceUsageBasedLineConfigClient) UpdateOne(biublc *BillingInvoiceUsageBasedLineConfig) *BillingInvoiceUsageBasedLineConfigUpdateOne {
	mutation := newBillingInvoiceUsageBasedLineConfigMutation(c.config, OpUpdateOne, withBillingInvoiceUsageBasedLineConfig(biublc))
	return &BillingInvoiceUsageBasedLineConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingInvoiceUsageBasedLineConfigClient) UpdateOneID(id string) *BillingInvoiceUsageBasedLineConfigUpdateOne {
	mutation := newBillingInvoiceUsageBasedLineConfigMutation(c.config, OpUpdateOne, withBillingInvoiceUsageBasedLineConfigID(id))
	return &BillingInvoiceUsageBasedLineConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingInvoiceUsageBasedLineConfig.
func (c *BillingInvoiceUsageBasedLineConfigClient) Delete() *BillingInvoiceUsageBasedLineConfigDelete {
	mutation := newBillingInvoiceUsageBasedLineConfigMutation(c.config, OpDelete)
	return &BillingInvoiceUsageBasedLineConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingInvoiceUsageBasedLineConfigClient) DeleteOne(biublc *BillingInvoiceUsageBasedLineConfig) *BillingInvoiceUsageBasedLineConfigDeleteOne {
	return c.DeleteOneID(biublc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingInvoiceUsageBasedLineConfigClient) DeleteOneID(id string) *BillingInvoiceUsageBasedLineConfigDeleteOne {
	builder := c.Delete().Where(billinginvoiceusagebasedlineconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingInvoiceUsageBasedLineConfigDeleteOne{builder}
}

// Query returns a query builder for BillingInvoiceUsageBasedLineConfig.
func (c *BillingInvoiceUsageBasedLineConfigClient) Query() *BillingInvoiceUsageBasedLineConfigQuery {
	return &BillingInvoiceUsageBasedLineConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingInvoiceUsageBasedLineConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingInvoiceUsageBasedLineConfig entity by its id.
func (c *BillingInvoiceUsageBasedLineConfigClient) Get(ctx context.Context, id string) (*BillingInvoiceUsageBasedLineConfig, error) {
	return c.Query().Where(billinginvoiceusagebasedlineconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingInvoiceUsageBasedLineConfigClient) GetX(ctx context.Context, id string) *BillingInvoiceUsageBasedLineConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BillingInvoiceUsageBasedLineConfigClient) Hooks() []Hook {
	return c.hooks.BillingInvoiceUsageBasedLineConfig
}

// Interceptors returns the client interceptors.
func (c *BillingInvoiceUsageBasedLineConfigClient) Interceptors() []Interceptor {
	return c.inters.BillingInvoiceUsageBasedLineConfig
}

func (c *BillingInvoiceUsageBasedLineConfigClient) mutate(ctx context.Context, m *BillingInvoiceUsageBasedLineConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingInvoiceUsageBasedLineConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingInvoiceUsageBasedLineConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingInvoiceUsageBasedLineConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingInvoiceUsageBasedLineConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingInvoiceUsageBasedLineConfig mutation op: %q", m.Op())
	}
}

// BillingInvoiceValidationIssueClient is a client for the BillingInvoiceValidationIssue schema.
type BillingInvoiceValidationIssueClient struct {
	config
}

// NewBillingInvoiceValidationIssueClient returns a client for the BillingInvoiceValidationIssue from the given config.
func NewBillingInvoiceValidationIssueClient(c config) *BillingInvoiceValidationIssueClient {
	return &BillingInvoiceValidationIssueClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billinginvoicevalidationissue.Hooks(f(g(h())))`.
func (c *BillingInvoiceValidationIssueClient) Use(hooks ...Hook) {
	c.hooks.BillingInvoiceValidationIssue = append(c.hooks.BillingInvoiceValidationIssue, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billinginvoicevalidationissue.Intercept(f(g(h())))`.
func (c *BillingInvoiceValidationIssueClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingInvoiceValidationIssue = append(c.inters.BillingInvoiceValidationIssue, interceptors...)
}

// Create returns a builder for creating a BillingInvoiceValidationIssue entity.
func (c *BillingInvoiceValidationIssueClient) Create() *BillingInvoiceValidationIssueCreate {
	mutation := newBillingInvoiceValidationIssueMutation(c.config, OpCreate)
	return &BillingInvoiceValidationIssueCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingInvoiceValidationIssue entities.
func (c *BillingInvoiceValidationIssueClient) CreateBulk(builders ...*BillingInvoiceValidationIssueCreate) *BillingInvoiceValidationIssueCreateBulk {
	return &BillingInvoiceValidationIssueCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingInvoiceValidationIssueClient) MapCreateBulk(slice any, setFunc func(*BillingInvoiceValidationIssueCreate, int)) *BillingInvoiceValidationIssueCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingInvoiceValidationIssueCreateBulk{err: fmt.Errorf("calling to BillingInvoiceValidationIssueClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingInvoiceValidationIssueCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingInvoiceValidationIssueCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingInvoiceValidationIssue.
func (c *BillingInvoiceValidationIssueClient) Update() *BillingInvoiceValidationIssueUpdate {
	mutation := newBillingInvoiceValidationIssueMutation(c.config, OpUpdate)
	return &BillingInvoiceValidationIssueUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingInvoiceValidationIssueClient) UpdateOne(bivi *BillingInvoiceValidationIssue) *BillingInvoiceValidationIssueUpdateOne {
	mutation := newBillingInvoiceValidationIssueMutation(c.config, OpUpdateOne, withBillingInvoiceValidationIssue(bivi))
	return &BillingInvoiceValidationIssueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingInvoiceValidationIssueClient) UpdateOneID(id string) *BillingInvoiceValidationIssueUpdateOne {
	mutation := newBillingInvoiceValidationIssueMutation(c.config, OpUpdateOne, withBillingInvoiceValidationIssueID(id))
	return &BillingInvoiceValidationIssueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingInvoiceValidationIssue.
func (c *BillingInvoiceValidationIssueClient) Delete() *BillingInvoiceValidationIssueDelete {
	mutation := newBillingInvoiceValidationIssueMutation(c.config, OpDelete)
	return &BillingInvoiceValidationIssueDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingInvoiceValidationIssueClient) DeleteOne(bivi *BillingInvoiceValidationIssue) *BillingInvoiceValidationIssueDeleteOne {
	return c.DeleteOneID(bivi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingInvoiceValidationIssueClient) DeleteOneID(id string) *BillingInvoiceValidationIssueDeleteOne {
	builder := c.Delete().Where(billinginvoicevalidationissue.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingInvoiceValidationIssueDeleteOne{builder}
}

// Query returns a query builder for BillingInvoiceValidationIssue.
func (c *BillingInvoiceValidationIssueClient) Query() *BillingInvoiceValidationIssueQuery {
	return &BillingInvoiceValidationIssueQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingInvoiceValidationIssue},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingInvoiceValidationIssue entity by its id.
func (c *BillingInvoiceValidationIssueClient) Get(ctx context.Context, id string) (*BillingInvoiceValidationIssue, error) {
	return c.Query().Where(billinginvoicevalidationissue.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingInvoiceValidationIssueClient) GetX(ctx context.Context, id string) *BillingInvoiceValidationIssue {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBillingInvoice queries the billing_invoice edge of a BillingInvoiceValidationIssue.
func (c *BillingInvoiceValidationIssueClient) QueryBillingInvoice(bivi *BillingInvoiceValidationIssue) *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bivi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoicevalidationissue.Table, billinginvoicevalidationissue.FieldID, id),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billinginvoicevalidationissue.BillingInvoiceTable, billinginvoicevalidationissue.BillingInvoiceColumn),
		)
		fromV = sqlgraph.Neighbors(bivi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingInvoiceValidationIssueClient) Hooks() []Hook {
	return c.hooks.BillingInvoiceValidationIssue
}

// Interceptors returns the client interceptors.
func (c *BillingInvoiceValidationIssueClient) Interceptors() []Interceptor {
	return c.inters.BillingInvoiceValidationIssue
}

func (c *BillingInvoiceValidationIssueClient) mutate(ctx context.Context, m *BillingInvoiceValidationIssueMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingInvoiceValidationIssueCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingInvoiceValidationIssueUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingInvoiceValidationIssueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingInvoiceValidationIssueDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingInvoiceValidationIssue mutation op: %q", m.Op())
	}
}

// BillingProfileClient is a client for the BillingProfile schema.
type BillingProfileClient struct {
	config
}

// NewBillingProfileClient returns a client for the BillingProfile from the given config.
func NewBillingProfileClient(c config) *BillingProfileClient {
	return &BillingProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billingprofile.Hooks(f(g(h())))`.
func (c *BillingProfileClient) Use(hooks ...Hook) {
	c.hooks.BillingProfile = append(c.hooks.BillingProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billingprofile.Intercept(f(g(h())))`.
func (c *BillingProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingProfile = append(c.inters.BillingProfile, interceptors...)
}

// Create returns a builder for creating a BillingProfile entity.
func (c *BillingProfileClient) Create() *BillingProfileCreate {
	mutation := newBillingProfileMutation(c.config, OpCreate)
	return &BillingProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingProfile entities.
func (c *BillingProfileClient) CreateBulk(builders ...*BillingProfileCreate) *BillingProfileCreateBulk {
	return &BillingProfileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingProfileClient) MapCreateBulk(slice any, setFunc func(*BillingProfileCreate, int)) *BillingProfileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingProfileCreateBulk{err: fmt.Errorf("calling to BillingProfileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingProfileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingProfile.
func (c *BillingProfileClient) Update() *BillingProfileUpdate {
	mutation := newBillingProfileMutation(c.config, OpUpdate)
	return &BillingProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingProfileClient) UpdateOne(bp *BillingProfile) *BillingProfileUpdateOne {
	mutation := newBillingProfileMutation(c.config, OpUpdateOne, withBillingProfile(bp))
	return &BillingProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingProfileClient) UpdateOneID(id string) *BillingProfileUpdateOne {
	mutation := newBillingProfileMutation(c.config, OpUpdateOne, withBillingProfileID(id))
	return &BillingProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingProfile.
func (c *BillingProfileClient) Delete() *BillingProfileDelete {
	mutation := newBillingProfileMutation(c.config, OpDelete)
	return &BillingProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingProfileClient) DeleteOne(bp *BillingProfile) *BillingProfileDeleteOne {
	return c.DeleteOneID(bp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingProfileClient) DeleteOneID(id string) *BillingProfileDeleteOne {
	builder := c.Delete().Where(billingprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingProfileDeleteOne{builder}
}

// Query returns a query builder for BillingProfile.
func (c *BillingProfileClient) Query() *BillingProfileQuery {
	return &BillingProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingProfile entity by its id.
func (c *BillingProfileClient) Get(ctx context.Context, id string) (*BillingProfile, error) {
	return c.Query().Where(billingprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingProfileClient) GetX(ctx context.Context, id string) *BillingProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBillingInvoices queries the billing_invoices edge of a BillingProfile.
func (c *BillingProfileClient) QueryBillingInvoices(bp *BillingProfile) *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingprofile.Table, billingprofile.FieldID, id),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, billingprofile.BillingInvoicesTable, billingprofile.BillingInvoicesColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingCustomerOverride queries the billing_customer_override edge of a BillingProfile.
func (c *BillingProfileClient) QueryBillingCustomerOverride(bp *BillingProfile) *BillingCustomerOverrideQuery {
	query := (&BillingCustomerOverrideClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingprofile.Table, billingprofile.FieldID, id),
			sqlgraph.To(billingcustomeroverride.Table, billingcustomeroverride.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, billingprofile.BillingCustomerOverrideTable, billingprofile.BillingCustomerOverrideColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkflowConfig queries the workflow_config edge of a BillingProfile.
func (c *BillingProfileClient) QueryWorkflowConfig(bp *BillingProfile) *BillingWorkflowConfigQuery {
	query := (&BillingWorkflowConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingprofile.Table, billingprofile.FieldID, id),
			sqlgraph.To(billingworkflowconfig.Table, billingworkflowconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, billingprofile.WorkflowConfigTable, billingprofile.WorkflowConfigColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaxApp queries the tax_app edge of a BillingProfile.
func (c *BillingProfileClient) QueryTaxApp(bp *BillingProfile) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingprofile.Table, billingprofile.FieldID, id),
			sqlgraph.To(dbapp.Table, dbapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billingprofile.TaxAppTable, billingprofile.TaxAppColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvoicingApp queries the invoicing_app edge of a BillingProfile.
func (c *BillingProfileClient) QueryInvoicingApp(bp *BillingProfile) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingprofile.Table, billingprofile.FieldID, id),
			sqlgraph.To(dbapp.Table, dbapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billingprofile.InvoicingAppTable, billingprofile.InvoicingAppColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPaymentApp queries the payment_app edge of a BillingProfile.
func (c *BillingProfileClient) QueryPaymentApp(bp *BillingProfile) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingprofile.Table, billingprofile.FieldID, id),
			sqlgraph.To(dbapp.Table, dbapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billingprofile.PaymentAppTable, billingprofile.PaymentAppColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingProfileClient) Hooks() []Hook {
	return c.hooks.BillingProfile
}

// Interceptors returns the client interceptors.
func (c *BillingProfileClient) Interceptors() []Interceptor {
	return c.inters.BillingProfile
}

func (c *BillingProfileClient) mutate(ctx context.Context, m *BillingProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingProfile mutation op: %q", m.Op())
	}
}

// BillingSequenceNumbersClient is a client for the BillingSequenceNumbers schema.
type BillingSequenceNumbersClient struct {
	config
}

// NewBillingSequenceNumbersClient returns a client for the BillingSequenceNumbers from the given config.
func NewBillingSequenceNumbersClient(c config) *BillingSequenceNumbersClient {
	return &BillingSequenceNumbersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billingsequencenumbers.Hooks(f(g(h())))`.
func (c *BillingSequenceNumbersClient) Use(hooks ...Hook) {
	c.hooks.BillingSequenceNumbers = append(c.hooks.BillingSequenceNumbers, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billingsequencenumbers.Intercept(f(g(h())))`.
func (c *BillingSequenceNumbersClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingSequenceNumbers = append(c.inters.BillingSequenceNumbers, interceptors...)
}

// Create returns a builder for creating a BillingSequenceNumbers entity.
func (c *BillingSequenceNumbersClient) Create() *BillingSequenceNumbersCreate {
	mutation := newBillingSequenceNumbersMutation(c.config, OpCreate)
	return &BillingSequenceNumbersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingSequenceNumbers entities.
func (c *BillingSequenceNumbersClient) CreateBulk(builders ...*BillingSequenceNumbersCreate) *BillingSequenceNumbersCreateBulk {
	return &BillingSequenceNumbersCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingSequenceNumbersClient) MapCreateBulk(slice any, setFunc func(*BillingSequenceNumbersCreate, int)) *BillingSequenceNumbersCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingSequenceNumbersCreateBulk{err: fmt.Errorf("calling to BillingSequenceNumbersClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingSequenceNumbersCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingSequenceNumbersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingSequenceNumbers.
func (c *BillingSequenceNumbersClient) Update() *BillingSequenceNumbersUpdate {
	mutation := newBillingSequenceNumbersMutation(c.config, OpUpdate)
	return &BillingSequenceNumbersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingSequenceNumbersClient) UpdateOne(bsn *BillingSequenceNumbers) *BillingSequenceNumbersUpdateOne {
	mutation := newBillingSequenceNumbersMutation(c.config, OpUpdateOne, withBillingSequenceNumbers(bsn))
	return &BillingSequenceNumbersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingSequenceNumbersClient) UpdateOneID(id int) *BillingSequenceNumbersUpdateOne {
	mutation := newBillingSequenceNumbersMutation(c.config, OpUpdateOne, withBillingSequenceNumbersID(id))
	return &BillingSequenceNumbersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingSequenceNumbers.
func (c *BillingSequenceNumbersClient) Delete() *BillingSequenceNumbersDelete {
	mutation := newBillingSequenceNumbersMutation(c.config, OpDelete)
	return &BillingSequenceNumbersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingSequenceNumbersClient) DeleteOne(bsn *BillingSequenceNumbers) *BillingSequenceNumbersDeleteOne {
	return c.DeleteOneID(bsn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingSequenceNumbersClient) DeleteOneID(id int) *BillingSequenceNumbersDeleteOne {
	builder := c.Delete().Where(billingsequencenumbers.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingSequenceNumbersDeleteOne{builder}
}

// Query returns a query builder for BillingSequenceNumbers.
func (c *BillingSequenceNumbersClient) Query() *BillingSequenceNumbersQuery {
	return &BillingSequenceNumbersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingSequenceNumbers},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingSequenceNumbers entity by its id.
func (c *BillingSequenceNumbersClient) Get(ctx context.Context, id int) (*BillingSequenceNumbers, error) {
	return c.Query().Where(billingsequencenumbers.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingSequenceNumbersClient) GetX(ctx context.Context, id int) *BillingSequenceNumbers {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BillingSequenceNumbersClient) Hooks() []Hook {
	return c.hooks.BillingSequenceNumbers
}

// Interceptors returns the client interceptors.
func (c *BillingSequenceNumbersClient) Interceptors() []Interceptor {
	return c.inters.BillingSequenceNumbers
}

func (c *BillingSequenceNumbersClient) mutate(ctx context.Context, m *BillingSequenceNumbersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingSequenceNumbersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingSequenceNumbersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingSequenceNumbersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingSequenceNumbersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingSequenceNumbers mutation op: %q", m.Op())
	}
}

// BillingWorkflowConfigClient is a client for the BillingWorkflowConfig schema.
type BillingWorkflowConfigClient struct {
	config
}

// NewBillingWorkflowConfigClient returns a client for the BillingWorkflowConfig from the given config.
func NewBillingWorkflowConfigClient(c config) *BillingWorkflowConfigClient {
	return &BillingWorkflowConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billingworkflowconfig.Hooks(f(g(h())))`.
func (c *BillingWorkflowConfigClient) Use(hooks ...Hook) {
	c.hooks.BillingWorkflowConfig = append(c.hooks.BillingWorkflowConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billingworkflowconfig.Intercept(f(g(h())))`.
func (c *BillingWorkflowConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingWorkflowConfig = append(c.inters.BillingWorkflowConfig, interceptors...)
}

// Create returns a builder for creating a BillingWorkflowConfig entity.
func (c *BillingWorkflowConfigClient) Create() *BillingWorkflowConfigCreate {
	mutation := newBillingWorkflowConfigMutation(c.config, OpCreate)
	return &BillingWorkflowConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingWorkflowConfig entities.
func (c *BillingWorkflowConfigClient) CreateBulk(builders ...*BillingWorkflowConfigCreate) *BillingWorkflowConfigCreateBulk {
	return &BillingWorkflowConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingWorkflowConfigClient) MapCreateBulk(slice any, setFunc func(*BillingWorkflowConfigCreate, int)) *BillingWorkflowConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingWorkflowConfigCreateBulk{err: fmt.Errorf("calling to BillingWorkflowConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingWorkflowConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingWorkflowConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingWorkflowConfig.
func (c *BillingWorkflowConfigClient) Update() *BillingWorkflowConfigUpdate {
	mutation := newBillingWorkflowConfigMutation(c.config, OpUpdate)
	return &BillingWorkflowConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingWorkflowConfigClient) UpdateOne(bwc *BillingWorkflowConfig) *BillingWorkflowConfigUpdateOne {
	mutation := newBillingWorkflowConfigMutation(c.config, OpUpdateOne, withBillingWorkflowConfig(bwc))
	return &BillingWorkflowConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingWorkflowConfigClient) UpdateOneID(id string) *BillingWorkflowConfigUpdateOne {
	mutation := newBillingWorkflowConfigMutation(c.config, OpUpdateOne, withBillingWorkflowConfigID(id))
	return &BillingWorkflowConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingWorkflowConfig.
func (c *BillingWorkflowConfigClient) Delete() *BillingWorkflowConfigDelete {
	mutation := newBillingWorkflowConfigMutation(c.config, OpDelete)
	return &BillingWorkflowConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingWorkflowConfigClient) DeleteOne(bwc *BillingWorkflowConfig) *BillingWorkflowConfigDeleteOne {
	return c.DeleteOneID(bwc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingWorkflowConfigClient) DeleteOneID(id string) *BillingWorkflowConfigDeleteOne {
	builder := c.Delete().Where(billingworkflowconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingWorkflowConfigDeleteOne{builder}
}

// Query returns a query builder for BillingWorkflowConfig.
func (c *BillingWorkflowConfigClient) Query() *BillingWorkflowConfigQuery {
	return &BillingWorkflowConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingWorkflowConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingWorkflowConfig entity by its id.
func (c *BillingWorkflowConfigClient) Get(ctx context.Context, id string) (*BillingWorkflowConfig, error) {
	return c.Query().Where(billingworkflowconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingWorkflowConfigClient) GetX(ctx context.Context, id string) *BillingWorkflowConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBillingInvoices queries the billing_invoices edge of a BillingWorkflowConfig.
func (c *BillingWorkflowConfigClient) QueryBillingInvoices(bwc *BillingWorkflowConfig) *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bwc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingworkflowconfig.Table, billingworkflowconfig.FieldID, id),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, billingworkflowconfig.BillingInvoicesTable, billingworkflowconfig.BillingInvoicesColumn),
		)
		fromV = sqlgraph.Neighbors(bwc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingProfile queries the billing_profile edge of a BillingWorkflowConfig.
func (c *BillingWorkflowConfigClient) QueryBillingProfile(bwc *BillingWorkflowConfig) *BillingProfileQuery {
	query := (&BillingProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bwc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingworkflowconfig.Table, billingworkflowconfig.FieldID, id),
			sqlgraph.To(billingprofile.Table, billingprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, billingworkflowconfig.BillingProfileTable, billingworkflowconfig.BillingProfileColumn),
		)
		fromV = sqlgraph.Neighbors(bwc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingWorkflowConfigClient) Hooks() []Hook {
	return c.hooks.BillingWorkflowConfig
}

// Interceptors returns the client interceptors.
func (c *BillingWorkflowConfigClient) Interceptors() []Interceptor {
	return c.inters.BillingWorkflowConfig
}

func (c *BillingWorkflowConfigClient) mutate(ctx context.Context, m *BillingWorkflowConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingWorkflowConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingWorkflowConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingWorkflowConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingWorkflowConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingWorkflowConfig mutation op: %q", m.Op())
	}
}

// CustomerClient is a client for the Customer schema.
type CustomerClient struct {
	config
}

// NewCustomerClient returns a client for the Customer from the given config.
func NewCustomerClient(c config) *CustomerClient {
	return &CustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customer.Hooks(f(g(h())))`.
func (c *CustomerClient) Use(hooks ...Hook) {
	c.hooks.Customer = append(c.hooks.Customer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `customer.Intercept(f(g(h())))`.
func (c *CustomerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Customer = append(c.inters.Customer, interceptors...)
}

// Create returns a builder for creating a Customer entity.
func (c *CustomerClient) Create() *CustomerCreate {
	mutation := newCustomerMutation(c.config, OpCreate)
	return &CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Customer entities.
func (c *CustomerClient) CreateBulk(builders ...*CustomerCreate) *CustomerCreateBulk {
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CustomerClient) MapCreateBulk(slice any, setFunc func(*CustomerCreate, int)) *CustomerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CustomerCreateBulk{err: fmt.Errorf("calling to CustomerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CustomerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Customer.
func (c *CustomerClient) Update() *CustomerUpdate {
	mutation := newCustomerMutation(c.config, OpUpdate)
	return &CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerClient) UpdateOne(cu *Customer) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomer(cu))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerClient) UpdateOneID(id string) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomerID(id))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Customer.
func (c *CustomerClient) Delete() *CustomerDelete {
	mutation := newCustomerMutation(c.config, OpDelete)
	return &CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CustomerClient) DeleteOne(cu *Customer) *CustomerDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CustomerClient) DeleteOneID(id string) *CustomerDeleteOne {
	builder := c.Delete().Where(customer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerDeleteOne{builder}
}

// Query returns a query builder for Customer.
func (c *CustomerClient) Query() *CustomerQuery {
	return &CustomerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCustomer},
		inters: c.Interceptors(),
	}
}

// Get returns a Customer entity by its id.
func (c *CustomerClient) Get(ctx context.Context, id string) (*Customer, error) {
	return c.Query().Where(customer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerClient) GetX(ctx context.Context, id string) *Customer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApps queries the apps edge of a Customer.
func (c *CustomerClient) QueryApps(cu *Customer) *AppCustomerQuery {
	query := (&AppCustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(appcustomer.Table, appcustomer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.AppsTable, customer.AppsColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubjects queries the subjects edge of a Customer.
func (c *CustomerClient) QuerySubjects(cu *Customer) *CustomerSubjectsQuery {
	query := (&CustomerSubjectsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(customersubjects.Table, customersubjects.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.SubjectsTable, customer.SubjectsColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingCustomerOverride queries the billing_customer_override edge of a Customer.
func (c *CustomerClient) QueryBillingCustomerOverride(cu *Customer) *BillingCustomerOverrideQuery {
	query := (&BillingCustomerOverrideClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(billingcustomeroverride.Table, billingcustomeroverride.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, customer.BillingCustomerOverrideTable, customer.BillingCustomerOverrideColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingInvoice queries the billing_invoice edge of a Customer.
func (c *CustomerClient) QueryBillingInvoice(cu *Customer) *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.BillingInvoiceTable, customer.BillingInvoiceColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscription queries the subscription edge of a Customer.
func (c *CustomerClient) QuerySubscription(cu *Customer) *SubscriptionQuery {
	query := (&SubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.SubscriptionTable, customer.SubscriptionColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerClient) Hooks() []Hook {
	return c.hooks.Customer
}

// Interceptors returns the client interceptors.
func (c *CustomerClient) Interceptors() []Interceptor {
	return c.inters.Customer
}

func (c *CustomerClient) mutate(ctx context.Context, m *CustomerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Customer mutation op: %q", m.Op())
	}
}

// CustomerSubjectsClient is a client for the CustomerSubjects schema.
type CustomerSubjectsClient struct {
	config
}

// NewCustomerSubjectsClient returns a client for the CustomerSubjects from the given config.
func NewCustomerSubjectsClient(c config) *CustomerSubjectsClient {
	return &CustomerSubjectsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customersubjects.Hooks(f(g(h())))`.
func (c *CustomerSubjectsClient) Use(hooks ...Hook) {
	c.hooks.CustomerSubjects = append(c.hooks.CustomerSubjects, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `customersubjects.Intercept(f(g(h())))`.
func (c *CustomerSubjectsClient) Intercept(interceptors ...Interceptor) {
	c.inters.CustomerSubjects = append(c.inters.CustomerSubjects, interceptors...)
}

// Create returns a builder for creating a CustomerSubjects entity.
func (c *CustomerSubjectsClient) Create() *CustomerSubjectsCreate {
	mutation := newCustomerSubjectsMutation(c.config, OpCreate)
	return &CustomerSubjectsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CustomerSubjects entities.
func (c *CustomerSubjectsClient) CreateBulk(builders ...*CustomerSubjectsCreate) *CustomerSubjectsCreateBulk {
	return &CustomerSubjectsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CustomerSubjectsClient) MapCreateBulk(slice any, setFunc func(*CustomerSubjectsCreate, int)) *CustomerSubjectsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CustomerSubjectsCreateBulk{err: fmt.Errorf("calling to CustomerSubjectsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CustomerSubjectsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CustomerSubjectsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CustomerSubjects.
func (c *CustomerSubjectsClient) Update() *CustomerSubjectsUpdate {
	mutation := newCustomerSubjectsMutation(c.config, OpUpdate)
	return &CustomerSubjectsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerSubjectsClient) UpdateOne(cs *CustomerSubjects) *CustomerSubjectsUpdateOne {
	mutation := newCustomerSubjectsMutation(c.config, OpUpdateOne, withCustomerSubjects(cs))
	return &CustomerSubjectsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerSubjectsClient) UpdateOneID(id int) *CustomerSubjectsUpdateOne {
	mutation := newCustomerSubjectsMutation(c.config, OpUpdateOne, withCustomerSubjectsID(id))
	return &CustomerSubjectsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CustomerSubjects.
func (c *CustomerSubjectsClient) Delete() *CustomerSubjectsDelete {
	mutation := newCustomerSubjectsMutation(c.config, OpDelete)
	return &CustomerSubjectsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CustomerSubjectsClient) DeleteOne(cs *CustomerSubjects) *CustomerSubjectsDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CustomerSubjectsClient) DeleteOneID(id int) *CustomerSubjectsDeleteOne {
	builder := c.Delete().Where(customersubjects.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerSubjectsDeleteOne{builder}
}

// Query returns a query builder for CustomerSubjects.
func (c *CustomerSubjectsClient) Query() *CustomerSubjectsQuery {
	return &CustomerSubjectsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCustomerSubjects},
		inters: c.Interceptors(),
	}
}

// Get returns a CustomerSubjects entity by its id.
func (c *CustomerSubjectsClient) Get(ctx context.Context, id int) (*CustomerSubjects, error) {
	return c.Query().Where(customersubjects.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerSubjectsClient) GetX(ctx context.Context, id int) *CustomerSubjects {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCustomer queries the customer edge of a CustomerSubjects.
func (c *CustomerSubjectsClient) QueryCustomer(cs *CustomerSubjects) *CustomerQuery {
	query := (&CustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customersubjects.Table, customersubjects.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, customersubjects.CustomerTable, customersubjects.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerSubjectsClient) Hooks() []Hook {
	return c.hooks.CustomerSubjects
}

// Interceptors returns the client interceptors.
func (c *CustomerSubjectsClient) Interceptors() []Interceptor {
	return c.inters.CustomerSubjects
}

func (c *CustomerSubjectsClient) mutate(ctx context.Context, m *CustomerSubjectsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CustomerSubjectsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CustomerSubjectsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CustomerSubjectsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CustomerSubjectsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown CustomerSubjects mutation op: %q", m.Op())
	}
}

// EntitlementClient is a client for the Entitlement schema.
type EntitlementClient struct {
	config
}

// NewEntitlementClient returns a client for the Entitlement from the given config.
func NewEntitlementClient(c config) *EntitlementClient {
	return &EntitlementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entitlement.Hooks(f(g(h())))`.
func (c *EntitlementClient) Use(hooks ...Hook) {
	c.hooks.Entitlement = append(c.hooks.Entitlement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `entitlement.Intercept(f(g(h())))`.
func (c *EntitlementClient) Intercept(interceptors ...Interceptor) {
	c.inters.Entitlement = append(c.inters.Entitlement, interceptors...)
}

// Create returns a builder for creating a Entitlement entity.
func (c *EntitlementClient) Create() *EntitlementCreate {
	mutation := newEntitlementMutation(c.config, OpCreate)
	return &EntitlementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Entitlement entities.
func (c *EntitlementClient) CreateBulk(builders ...*EntitlementCreate) *EntitlementCreateBulk {
	return &EntitlementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EntitlementClient) MapCreateBulk(slice any, setFunc func(*EntitlementCreate, int)) *EntitlementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EntitlementCreateBulk{err: fmt.Errorf("calling to EntitlementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EntitlementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EntitlementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Entitlement.
func (c *EntitlementClient) Update() *EntitlementUpdate {
	mutation := newEntitlementMutation(c.config, OpUpdate)
	return &EntitlementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntitlementClient) UpdateOne(e *Entitlement) *EntitlementUpdateOne {
	mutation := newEntitlementMutation(c.config, OpUpdateOne, withEntitlement(e))
	return &EntitlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntitlementClient) UpdateOneID(id string) *EntitlementUpdateOne {
	mutation := newEntitlementMutation(c.config, OpUpdateOne, withEntitlementID(id))
	return &EntitlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Entitlement.
func (c *EntitlementClient) Delete() *EntitlementDelete {
	mutation := newEntitlementMutation(c.config, OpDelete)
	return &EntitlementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntitlementClient) DeleteOne(e *Entitlement) *EntitlementDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntitlementClient) DeleteOneID(id string) *EntitlementDeleteOne {
	builder := c.Delete().Where(entitlement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntitlementDeleteOne{builder}
}

// Query returns a query builder for Entitlement.
func (c *EntitlementClient) Query() *EntitlementQuery {
	return &EntitlementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEntitlement},
		inters: c.Interceptors(),
	}
}

// Get returns a Entitlement entity by its id.
func (c *EntitlementClient) Get(ctx context.Context, id string) (*Entitlement, error) {
	return c.Query().Where(entitlement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntitlementClient) GetX(ctx context.Context, id string) *Entitlement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsageReset queries the usage_reset edge of a Entitlement.
func (c *EntitlementClient) QueryUsageReset(e *Entitlement) *UsageResetQuery {
	query := (&UsageResetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, id),
			sqlgraph.To(usagereset.Table, usagereset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entitlement.UsageResetTable, entitlement.UsageResetColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGrant queries the grant edge of a Entitlement.
func (c *EntitlementClient) QueryGrant(e *Entitlement) *GrantQuery {
	query := (&GrantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, id),
			sqlgraph.To(dbgrant.Table, dbgrant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entitlement.GrantTable, entitlement.GrantColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBalanceSnapshot queries the balance_snapshot edge of a Entitlement.
func (c *EntitlementClient) QueryBalanceSnapshot(e *Entitlement) *BalanceSnapshotQuery {
	query := (&BalanceSnapshotClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, id),
			sqlgraph.To(balancesnapshot.Table, balancesnapshot.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entitlement.BalanceSnapshotTable, entitlement.BalanceSnapshotColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscriptionItem queries the subscription_item edge of a Entitlement.
func (c *EntitlementClient) QuerySubscriptionItem(e *Entitlement) *SubscriptionItemQuery {
	query := (&SubscriptionItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, id),
			sqlgraph.To(subscriptionitem.Table, subscriptionitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entitlement.SubscriptionItemTable, entitlement.SubscriptionItemColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeature queries the feature edge of a Entitlement.
func (c *EntitlementClient) QueryFeature(e *Entitlement) *FeatureQuery {
	query := (&FeatureClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, id),
			sqlgraph.To(feature.Table, feature.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, entitlement.FeatureTable, entitlement.FeatureColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EntitlementClient) Hooks() []Hook {
	return c.hooks.Entitlement
}

// Interceptors returns the client interceptors.
func (c *EntitlementClient) Interceptors() []Interceptor {
	return c.inters.Entitlement
}

func (c *EntitlementClient) mutate(ctx context.Context, m *EntitlementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EntitlementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EntitlementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EntitlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EntitlementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Entitlement mutation op: %q", m.Op())
	}
}

// FeatureClient is a client for the Feature schema.
type FeatureClient struct {
	config
}

// NewFeatureClient returns a client for the Feature from the given config.
func NewFeatureClient(c config) *FeatureClient {
	return &FeatureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feature.Hooks(f(g(h())))`.
func (c *FeatureClient) Use(hooks ...Hook) {
	c.hooks.Feature = append(c.hooks.Feature, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feature.Intercept(f(g(h())))`.
func (c *FeatureClient) Intercept(interceptors ...Interceptor) {
	c.inters.Feature = append(c.inters.Feature, interceptors...)
}

// Create returns a builder for creating a Feature entity.
func (c *FeatureClient) Create() *FeatureCreate {
	mutation := newFeatureMutation(c.config, OpCreate)
	return &FeatureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Feature entities.
func (c *FeatureClient) CreateBulk(builders ...*FeatureCreate) *FeatureCreateBulk {
	return &FeatureCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeatureClient) MapCreateBulk(slice any, setFunc func(*FeatureCreate, int)) *FeatureCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeatureCreateBulk{err: fmt.Errorf("calling to FeatureClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeatureCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeatureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Feature.
func (c *FeatureClient) Update() *FeatureUpdate {
	mutation := newFeatureMutation(c.config, OpUpdate)
	return &FeatureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeatureClient) UpdateOne(f *Feature) *FeatureUpdateOne {
	mutation := newFeatureMutation(c.config, OpUpdateOne, withFeature(f))
	return &FeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeatureClient) UpdateOneID(id string) *FeatureUpdateOne {
	mutation := newFeatureMutation(c.config, OpUpdateOne, withFeatureID(id))
	return &FeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Feature.
func (c *FeatureClient) Delete() *FeatureDelete {
	mutation := newFeatureMutation(c.config, OpDelete)
	return &FeatureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeatureClient) DeleteOne(f *Feature) *FeatureDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeatureClient) DeleteOneID(id string) *FeatureDeleteOne {
	builder := c.Delete().Where(feature.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeatureDeleteOne{builder}
}

// Query returns a query builder for Feature.
func (c *FeatureClient) Query() *FeatureQuery {
	return &FeatureQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeature},
		inters: c.Interceptors(),
	}
}

// Get returns a Feature entity by its id.
func (c *FeatureClient) Get(ctx context.Context, id string) (*Feature, error) {
	return c.Query().Where(feature.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeatureClient) GetX(ctx context.Context, id string) *Feature {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEntitlement queries the entitlement edge of a Feature.
func (c *FeatureClient) QueryEntitlement(f *Feature) *EntitlementQuery {
	query := (&EntitlementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feature.Table, feature.FieldID, id),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, feature.EntitlementTable, feature.EntitlementColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRatecard queries the ratecard edge of a Feature.
func (c *FeatureClient) QueryRatecard(f *Feature) *PlanRateCardQuery {
	query := (&PlanRateCardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feature.Table, feature.FieldID, id),
			sqlgraph.To(planratecard.Table, planratecard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, feature.RatecardTable, feature.RatecardColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddonRatecard queries the addon_ratecard edge of a Feature.
func (c *FeatureClient) QueryAddonRatecard(f *Feature) *AddonRateCardQuery {
	query := (&AddonRateCardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feature.Table, feature.FieldID, id),
			sqlgraph.To(addonratecard.Table, addonratecard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, feature.AddonRatecardTable, feature.AddonRatecardColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeatureClient) Hooks() []Hook {
	return c.hooks.Feature
}

// Interceptors returns the client interceptors.
func (c *FeatureClient) Interceptors() []Interceptor {
	return c.inters.Feature
}

func (c *FeatureClient) mutate(ctx context.Context, m *FeatureMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeatureCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeatureUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeatureDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Feature mutation op: %q", m.Op())
	}
}

// GrantClient is a client for the Grant schema.
type GrantClient struct {
	config
}

// NewGrantClient returns a client for the Grant from the given config.
func NewGrantClient(c config) *GrantClient {
	return &GrantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dbgrant.Hooks(f(g(h())))`.
func (c *GrantClient) Use(hooks ...Hook) {
	c.hooks.Grant = append(c.hooks.Grant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dbgrant.Intercept(f(g(h())))`.
func (c *GrantClient) Intercept(interceptors ...Interceptor) {
	c.inters.Grant = append(c.inters.Grant, interceptors...)
}

// Create returns a builder for creating a Grant entity.
func (c *GrantClient) Create() *GrantCreate {
	mutation := newGrantMutation(c.config, OpCreate)
	return &GrantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Grant entities.
func (c *GrantClient) CreateBulk(builders ...*GrantCreate) *GrantCreateBulk {
	return &GrantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GrantClient) MapCreateBulk(slice any, setFunc func(*GrantCreate, int)) *GrantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GrantCreateBulk{err: fmt.Errorf("calling to GrantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GrantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GrantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Grant.
func (c *GrantClient) Update() *GrantUpdate {
	mutation := newGrantMutation(c.config, OpUpdate)
	return &GrantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GrantClient) UpdateOne(gr *Grant) *GrantUpdateOne {
	mutation := newGrantMutation(c.config, OpUpdateOne, withGrant(gr))
	return &GrantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GrantClient) UpdateOneID(id string) *GrantUpdateOne {
	mutation := newGrantMutation(c.config, OpUpdateOne, withGrantID(id))
	return &GrantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Grant.
func (c *GrantClient) Delete() *GrantDelete {
	mutation := newGrantMutation(c.config, OpDelete)
	return &GrantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GrantClient) DeleteOne(gr *Grant) *GrantDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GrantClient) DeleteOneID(id string) *GrantDeleteOne {
	builder := c.Delete().Where(dbgrant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GrantDeleteOne{builder}
}

// Query returns a query builder for Grant.
func (c *GrantClient) Query() *GrantQuery {
	return &GrantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGrant},
		inters: c.Interceptors(),
	}
}

// Get returns a Grant entity by its id.
func (c *GrantClient) Get(ctx context.Context, id string) (*Grant, error) {
	return c.Query().Where(dbgrant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GrantClient) GetX(ctx context.Context, id string) *Grant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEntitlement queries the entitlement edge of a Grant.
func (c *GrantClient) QueryEntitlement(gr *Grant) *EntitlementQuery {
	query := (&EntitlementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbgrant.Table, dbgrant.FieldID, id),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dbgrant.EntitlementTable, dbgrant.EntitlementColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GrantClient) Hooks() []Hook {
	return c.hooks.Grant
}

// Interceptors returns the client interceptors.
func (c *GrantClient) Interceptors() []Interceptor {
	return c.inters.Grant
}

func (c *GrantClient) mutate(ctx context.Context, m *GrantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GrantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GrantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GrantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GrantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Grant mutation op: %q", m.Op())
	}
}

// MeterClient is a client for the Meter schema.
type MeterClient struct {
	config
}

// NewMeterClient returns a client for the Meter from the given config.
func NewMeterClient(c config) *MeterClient {
	return &MeterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dbmeter.Hooks(f(g(h())))`.
func (c *MeterClient) Use(hooks ...Hook) {
	c.hooks.Meter = append(c.hooks.Meter, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dbmeter.Intercept(f(g(h())))`.
func (c *MeterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Meter = append(c.inters.Meter, interceptors...)
}

// Create returns a builder for creating a Meter entity.
func (c *MeterClient) Create() *MeterCreate {
	mutation := newMeterMutation(c.config, OpCreate)
	return &MeterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Meter entities.
func (c *MeterClient) CreateBulk(builders ...*MeterCreate) *MeterCreateBulk {
	return &MeterCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MeterClient) MapCreateBulk(slice any, setFunc func(*MeterCreate, int)) *MeterCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MeterCreateBulk{err: fmt.Errorf("calling to MeterClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MeterCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MeterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Meter.
func (c *MeterClient) Update() *MeterUpdate {
	mutation := newMeterMutation(c.config, OpUpdate)
	return &MeterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MeterClient) UpdateOne(m *Meter) *MeterUpdateOne {
	mutation := newMeterMutation(c.config, OpUpdateOne, withMeter(m))
	return &MeterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MeterClient) UpdateOneID(id string) *MeterUpdateOne {
	mutation := newMeterMutation(c.config, OpUpdateOne, withMeterID(id))
	return &MeterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Meter.
func (c *MeterClient) Delete() *MeterDelete {
	mutation := newMeterMutation(c.config, OpDelete)
	return &MeterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MeterClient) DeleteOne(m *Meter) *MeterDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MeterClient) DeleteOneID(id string) *MeterDeleteOne {
	builder := c.Delete().Where(dbmeter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MeterDeleteOne{builder}
}

// Query returns a query builder for Meter.
func (c *MeterClient) Query() *MeterQuery {
	return &MeterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMeter},
		inters: c.Interceptors(),
	}
}

// Get returns a Meter entity by its id.
func (c *MeterClient) Get(ctx context.Context, id string) (*Meter, error) {
	return c.Query().Where(dbmeter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MeterClient) GetX(ctx context.Context, id string) *Meter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MeterClient) Hooks() []Hook {
	return c.hooks.Meter
}

// Interceptors returns the client interceptors.
func (c *MeterClient) Interceptors() []Interceptor {
	return c.inters.Meter
}

func (c *MeterClient) mutate(ctx context.Context, m *MeterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MeterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MeterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MeterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MeterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Meter mutation op: %q", m.Op())
	}
}

// NotificationChannelClient is a client for the NotificationChannel schema.
type NotificationChannelClient struct {
	config
}

// NewNotificationChannelClient returns a client for the NotificationChannel from the given config.
func NewNotificationChannelClient(c config) *NotificationChannelClient {
	return &NotificationChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationchannel.Hooks(f(g(h())))`.
func (c *NotificationChannelClient) Use(hooks ...Hook) {
	c.hooks.NotificationChannel = append(c.hooks.NotificationChannel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationchannel.Intercept(f(g(h())))`.
func (c *NotificationChannelClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationChannel = append(c.inters.NotificationChannel, interceptors...)
}

// Create returns a builder for creating a NotificationChannel entity.
func (c *NotificationChannelClient) Create() *NotificationChannelCreate {
	mutation := newNotificationChannelMutation(c.config, OpCreate)
	return &NotificationChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationChannel entities.
func (c *NotificationChannelClient) CreateBulk(builders ...*NotificationChannelCreate) *NotificationChannelCreateBulk {
	return &NotificationChannelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationChannelClient) MapCreateBulk(slice any, setFunc func(*NotificationChannelCreate, int)) *NotificationChannelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationChannelCreateBulk{err: fmt.Errorf("calling to NotificationChannelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationChannelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationChannel.
func (c *NotificationChannelClient) Update() *NotificationChannelUpdate {
	mutation := newNotificationChannelMutation(c.config, OpUpdate)
	return &NotificationChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationChannelClient) UpdateOne(nc *NotificationChannel) *NotificationChannelUpdateOne {
	mutation := newNotificationChannelMutation(c.config, OpUpdateOne, withNotificationChannel(nc))
	return &NotificationChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationChannelClient) UpdateOneID(id string) *NotificationChannelUpdateOne {
	mutation := newNotificationChannelMutation(c.config, OpUpdateOne, withNotificationChannelID(id))
	return &NotificationChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationChannel.
func (c *NotificationChannelClient) Delete() *NotificationChannelDelete {
	mutation := newNotificationChannelMutation(c.config, OpDelete)
	return &NotificationChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationChannelClient) DeleteOne(nc *NotificationChannel) *NotificationChannelDeleteOne {
	return c.DeleteOneID(nc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationChannelClient) DeleteOneID(id string) *NotificationChannelDeleteOne {
	builder := c.Delete().Where(notificationchannel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationChannelDeleteOne{builder}
}

// Query returns a query builder for NotificationChannel.
func (c *NotificationChannelClient) Query() *NotificationChannelQuery {
	return &NotificationChannelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationChannel},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationChannel entity by its id.
func (c *NotificationChannelClient) Get(ctx context.Context, id string) (*NotificationChannel, error) {
	return c.Query().Where(notificationchannel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationChannelClient) GetX(ctx context.Context, id string) *NotificationChannel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRules queries the rules edge of a NotificationChannel.
func (c *NotificationChannelClient) QueryRules(nc *NotificationChannel) *NotificationRuleQuery {
	query := (&NotificationRuleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationchannel.Table, notificationchannel.FieldID, id),
			sqlgraph.To(notificationrule.Table, notificationrule.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, notificationchannel.RulesTable, notificationchannel.RulesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(nc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationChannelClient) Hooks() []Hook {
	return c.hooks.NotificationChannel
}

// Interceptors returns the client interceptors.
func (c *NotificationChannelClient) Interceptors() []Interceptor {
	return c.inters.NotificationChannel
}

func (c *NotificationChannelClient) mutate(ctx context.Context, m *NotificationChannelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationChannelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationChannelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown NotificationChannel mutation op: %q", m.Op())
	}
}

// NotificationEventClient is a client for the NotificationEvent schema.
type NotificationEventClient struct {
	config
}

// NewNotificationEventClient returns a client for the NotificationEvent from the given config.
func NewNotificationEventClient(c config) *NotificationEventClient {
	return &NotificationEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationevent.Hooks(f(g(h())))`.
func (c *NotificationEventClient) Use(hooks ...Hook) {
	c.hooks.NotificationEvent = append(c.hooks.NotificationEvent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationevent.Intercept(f(g(h())))`.
func (c *NotificationEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationEvent = append(c.inters.NotificationEvent, interceptors...)
}

// Create returns a builder for creating a NotificationEvent entity.
func (c *NotificationEventClient) Create() *NotificationEventCreate {
	mutation := newNotificationEventMutation(c.config, OpCreate)
	return &NotificationEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationEvent entities.
func (c *NotificationEventClient) CreateBulk(builders ...*NotificationEventCreate) *NotificationEventCreateBulk {
	return &NotificationEventCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationEventClient) MapCreateBulk(slice any, setFunc func(*NotificationEventCreate, int)) *NotificationEventCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationEventCreateBulk{err: fmt.Errorf("calling to NotificationEventClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationEventCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationEvent.
func (c *NotificationEventClient) Update() *NotificationEventUpdate {
	mutation := newNotificationEventMutation(c.config, OpUpdate)
	return &NotificationEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationEventClient) UpdateOne(ne *NotificationEvent) *NotificationEventUpdateOne {
	mutation := newNotificationEventMutation(c.config, OpUpdateOne, withNotificationEvent(ne))
	return &NotificationEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationEventClient) UpdateOneID(id string) *NotificationEventUpdateOne {
	mutation := newNotificationEventMutation(c.config, OpUpdateOne, withNotificationEventID(id))
	return &NotificationEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationEvent.
func (c *NotificationEventClient) Delete() *NotificationEventDelete {
	mutation := newNotificationEventMutation(c.config, OpDelete)
	return &NotificationEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationEventClient) DeleteOne(ne *NotificationEvent) *NotificationEventDeleteOne {
	return c.DeleteOneID(ne.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationEventClient) DeleteOneID(id string) *NotificationEventDeleteOne {
	builder := c.Delete().Where(notificationevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationEventDeleteOne{builder}
}

// Query returns a query builder for NotificationEvent.
func (c *NotificationEventClient) Query() *NotificationEventQuery {
	return &NotificationEventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationEvent entity by its id.
func (c *NotificationEventClient) Get(ctx context.Context, id string) (*NotificationEvent, error) {
	return c.Query().Where(notificationevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationEventClient) GetX(ctx context.Context, id string) *NotificationEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeliveryStatuses queries the delivery_statuses edge of a NotificationEvent.
func (c *NotificationEventClient) QueryDeliveryStatuses(ne *NotificationEvent) *NotificationEventDeliveryStatusQuery {
	query := (&NotificationEventDeliveryStatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ne.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationevent.Table, notificationevent.FieldID, id),
			sqlgraph.To(notificationeventdeliverystatus.Table, notificationeventdeliverystatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, notificationevent.DeliveryStatusesTable, notificationevent.DeliveryStatusesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ne.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRules queries the rules edge of a NotificationEvent.
func (c *NotificationEventClient) QueryRules(ne *NotificationEvent) *NotificationRuleQuery {
	query := (&NotificationRuleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ne.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationevent.Table, notificationevent.FieldID, id),
			sqlgraph.To(notificationrule.Table, notificationrule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notificationevent.RulesTable, notificationevent.RulesColumn),
		)
		fromV = sqlgraph.Neighbors(ne.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationEventClient) Hooks() []Hook {
	return c.hooks.NotificationEvent
}

// Interceptors returns the client interceptors.
func (c *NotificationEventClient) Interceptors() []Interceptor {
	return c.inters.NotificationEvent
}

func (c *NotificationEventClient) mutate(ctx context.Context, m *NotificationEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown NotificationEvent mutation op: %q", m.Op())
	}
}

// NotificationEventDeliveryStatusClient is a client for the NotificationEventDeliveryStatus schema.
type NotificationEventDeliveryStatusClient struct {
	config
}

// NewNotificationEventDeliveryStatusClient returns a client for the NotificationEventDeliveryStatus from the given config.
func NewNotificationEventDeliveryStatusClient(c config) *NotificationEventDeliveryStatusClient {
	return &NotificationEventDeliveryStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationeventdeliverystatus.Hooks(f(g(h())))`.
func (c *NotificationEventDeliveryStatusClient) Use(hooks ...Hook) {
	c.hooks.NotificationEventDeliveryStatus = append(c.hooks.NotificationEventDeliveryStatus, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationeventdeliverystatus.Intercept(f(g(h())))`.
func (c *NotificationEventDeliveryStatusClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationEventDeliveryStatus = append(c.inters.NotificationEventDeliveryStatus, interceptors...)
}

// Create returns a builder for creating a NotificationEventDeliveryStatus entity.
func (c *NotificationEventDeliveryStatusClient) Create() *NotificationEventDeliveryStatusCreate {
	mutation := newNotificationEventDeliveryStatusMutation(c.config, OpCreate)
	return &NotificationEventDeliveryStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationEventDeliveryStatus entities.
func (c *NotificationEventDeliveryStatusClient) CreateBulk(builders ...*NotificationEventDeliveryStatusCreate) *NotificationEventDeliveryStatusCreateBulk {
	return &NotificationEventDeliveryStatusCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationEventDeliveryStatusClient) MapCreateBulk(slice any, setFunc func(*NotificationEventDeliveryStatusCreate, int)) *NotificationEventDeliveryStatusCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationEventDeliveryStatusCreateBulk{err: fmt.Errorf("calling to NotificationEventDeliveryStatusClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationEventDeliveryStatusCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationEventDeliveryStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationEventDeliveryStatus.
func (c *NotificationEventDeliveryStatusClient) Update() *NotificationEventDeliveryStatusUpdate {
	mutation := newNotificationEventDeliveryStatusMutation(c.config, OpUpdate)
	return &NotificationEventDeliveryStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationEventDeliveryStatusClient) UpdateOne(neds *NotificationEventDeliveryStatus) *NotificationEventDeliveryStatusUpdateOne {
	mutation := newNotificationEventDeliveryStatusMutation(c.config, OpUpdateOne, withNotificationEventDeliveryStatus(neds))
	return &NotificationEventDeliveryStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationEventDeliveryStatusClient) UpdateOneID(id string) *NotificationEventDeliveryStatusUpdateOne {
	mutation := newNotificationEventDeliveryStatusMutation(c.config, OpUpdateOne, withNotificationEventDeliveryStatusID(id))
	return &NotificationEventDeliveryStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationEventDeliveryStatus.
func (c *NotificationEventDeliveryStatusClient) Delete() *NotificationEventDeliveryStatusDelete {
	mutation := newNotificationEventDeliveryStatusMutation(c.config, OpDelete)
	return &NotificationEventDeliveryStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationEventDeliveryStatusClient) DeleteOne(neds *NotificationEventDeliveryStatus) *NotificationEventDeliveryStatusDeleteOne {
	return c.DeleteOneID(neds.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationEventDeliveryStatusClient) DeleteOneID(id string) *NotificationEventDeliveryStatusDeleteOne {
	builder := c.Delete().Where(notificationeventdeliverystatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationEventDeliveryStatusDeleteOne{builder}
}

// Query returns a query builder for NotificationEventDeliveryStatus.
func (c *NotificationEventDeliveryStatusClient) Query() *NotificationEventDeliveryStatusQuery {
	return &NotificationEventDeliveryStatusQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationEventDeliveryStatus},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationEventDeliveryStatus entity by its id.
func (c *NotificationEventDeliveryStatusClient) Get(ctx context.Context, id string) (*NotificationEventDeliveryStatus, error) {
	return c.Query().Where(notificationeventdeliverystatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationEventDeliveryStatusClient) GetX(ctx context.Context, id string) *NotificationEventDeliveryStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvents queries the events edge of a NotificationEventDeliveryStatus.
func (c *NotificationEventDeliveryStatusClient) QueryEvents(neds *NotificationEventDeliveryStatus) *NotificationEventQuery {
	query := (&NotificationEventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := neds.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationeventdeliverystatus.Table, notificationeventdeliverystatus.FieldID, id),
			sqlgraph.To(notificationevent.Table, notificationevent.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, notificationeventdeliverystatus.EventsTable, notificationeventdeliverystatus.EventsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(neds.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationEventDeliveryStatusClient) Hooks() []Hook {
	return c.hooks.NotificationEventDeliveryStatus
}

// Interceptors returns the client interceptors.
func (c *NotificationEventDeliveryStatusClient) Interceptors() []Interceptor {
	return c.inters.NotificationEventDeliveryStatus
}

func (c *NotificationEventDeliveryStatusClient) mutate(ctx context.Context, m *NotificationEventDeliveryStatusMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationEventDeliveryStatusCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationEventDeliveryStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationEventDeliveryStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationEventDeliveryStatusDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown NotificationEventDeliveryStatus mutation op: %q", m.Op())
	}
}

// NotificationRuleClient is a client for the NotificationRule schema.
type NotificationRuleClient struct {
	config
}

// NewNotificationRuleClient returns a client for the NotificationRule from the given config.
func NewNotificationRuleClient(c config) *NotificationRuleClient {
	return &NotificationRuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationrule.Hooks(f(g(h())))`.
func (c *NotificationRuleClient) Use(hooks ...Hook) {
	c.hooks.NotificationRule = append(c.hooks.NotificationRule, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationrule.Intercept(f(g(h())))`.
func (c *NotificationRuleClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationRule = append(c.inters.NotificationRule, interceptors...)
}

// Create returns a builder for creating a NotificationRule entity.
func (c *NotificationRuleClient) Create() *NotificationRuleCreate {
	mutation := newNotificationRuleMutation(c.config, OpCreate)
	return &NotificationRuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationRule entities.
func (c *NotificationRuleClient) CreateBulk(builders ...*NotificationRuleCreate) *NotificationRuleCreateBulk {
	return &NotificationRuleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationRuleClient) MapCreateBulk(slice any, setFunc func(*NotificationRuleCreate, int)) *NotificationRuleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationRuleCreateBulk{err: fmt.Errorf("calling to NotificationRuleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationRuleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationRuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationRule.
func (c *NotificationRuleClient) Update() *NotificationRuleUpdate {
	mutation := newNotificationRuleMutation(c.config, OpUpdate)
	return &NotificationRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationRuleClient) UpdateOne(nr *NotificationRule) *NotificationRuleUpdateOne {
	mutation := newNotificationRuleMutation(c.config, OpUpdateOne, withNotificationRule(nr))
	return &NotificationRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationRuleClient) UpdateOneID(id string) *NotificationRuleUpdateOne {
	mutation := newNotificationRuleMutation(c.config, OpUpdateOne, withNotificationRuleID(id))
	return &NotificationRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationRule.
func (c *NotificationRuleClient) Delete() *NotificationRuleDelete {
	mutation := newNotificationRuleMutation(c.config, OpDelete)
	return &NotificationRuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationRuleClient) DeleteOne(nr *NotificationRule) *NotificationRuleDeleteOne {
	return c.DeleteOneID(nr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationRuleClient) DeleteOneID(id string) *NotificationRuleDeleteOne {
	builder := c.Delete().Where(notificationrule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationRuleDeleteOne{builder}
}

// Query returns a query builder for NotificationRule.
func (c *NotificationRuleClient) Query() *NotificationRuleQuery {
	return &NotificationRuleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationRule},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationRule entity by its id.
func (c *NotificationRuleClient) Get(ctx context.Context, id string) (*NotificationRule, error) {
	return c.Query().Where(notificationrule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationRuleClient) GetX(ctx context.Context, id string) *NotificationRule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChannels queries the channels edge of a NotificationRule.
func (c *NotificationRuleClient) QueryChannels(nr *NotificationRule) *NotificationChannelQuery {
	query := (&NotificationChannelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationrule.Table, notificationrule.FieldID, id),
			sqlgraph.To(notificationchannel.Table, notificationchannel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, notificationrule.ChannelsTable, notificationrule.ChannelsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(nr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvents queries the events edge of a NotificationRule.
func (c *NotificationRuleClient) QueryEvents(nr *NotificationRule) *NotificationEventQuery {
	query := (&NotificationEventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationrule.Table, notificationrule.FieldID, id),
			sqlgraph.To(notificationevent.Table, notificationevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, notificationrule.EventsTable, notificationrule.EventsColumn),
		)
		fromV = sqlgraph.Neighbors(nr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationRuleClient) Hooks() []Hook {
	return c.hooks.NotificationRule
}

// Interceptors returns the client interceptors.
func (c *NotificationRuleClient) Interceptors() []Interceptor {
	return c.inters.NotificationRule
}

func (c *NotificationRuleClient) mutate(ctx context.Context, m *NotificationRuleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationRuleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationRuleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown NotificationRule mutation op: %q", m.Op())
	}
}

// PlanClient is a client for the Plan schema.
type PlanClient struct {
	config
}

// NewPlanClient returns a client for the Plan from the given config.
func NewPlanClient(c config) *PlanClient {
	return &PlanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `plan.Hooks(f(g(h())))`.
func (c *PlanClient) Use(hooks ...Hook) {
	c.hooks.Plan = append(c.hooks.Plan, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `plan.Intercept(f(g(h())))`.
func (c *PlanClient) Intercept(interceptors ...Interceptor) {
	c.inters.Plan = append(c.inters.Plan, interceptors...)
}

// Create returns a builder for creating a Plan entity.
func (c *PlanClient) Create() *PlanCreate {
	mutation := newPlanMutation(c.config, OpCreate)
	return &PlanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Plan entities.
func (c *PlanClient) CreateBulk(builders ...*PlanCreate) *PlanCreateBulk {
	return &PlanCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PlanClient) MapCreateBulk(slice any, setFunc func(*PlanCreate, int)) *PlanCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PlanCreateBulk{err: fmt.Errorf("calling to PlanClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PlanCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PlanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Plan.
func (c *PlanClient) Update() *PlanUpdate {
	mutation := newPlanMutation(c.config, OpUpdate)
	return &PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlanClient) UpdateOne(pl *Plan) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlan(pl))
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlanClient) UpdateOneID(id string) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlanID(id))
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Plan.
func (c *PlanClient) Delete() *PlanDelete {
	mutation := newPlanMutation(c.config, OpDelete)
	return &PlanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlanClient) DeleteOne(pl *Plan) *PlanDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlanClient) DeleteOneID(id string) *PlanDeleteOne {
	builder := c.Delete().Where(plan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlanDeleteOne{builder}
}

// Query returns a query builder for Plan.
func (c *PlanClient) Query() *PlanQuery {
	return &PlanQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlan},
		inters: c.Interceptors(),
	}
}

// Get returns a Plan entity by its id.
func (c *PlanClient) Get(ctx context.Context, id string) (*Plan, error) {
	return c.Query().Where(plan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlanClient) GetX(ctx context.Context, id string) *Plan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPhases queries the phases edge of a Plan.
func (c *PlanClient) QueryPhases(pl *Plan) *PlanPhaseQuery {
	query := (&PlanPhaseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(planphase.Table, planphase.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plan.PhasesTable, plan.PhasesColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscriptions queries the subscriptions edge of a Plan.
func (c *PlanClient) QuerySubscriptions(pl *Plan) *SubscriptionQuery {
	query := (&SubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plan.SubscriptionsTable, plan.SubscriptionsColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlanClient) Hooks() []Hook {
	return c.hooks.Plan
}

// Interceptors returns the client interceptors.
func (c *PlanClient) Interceptors() []Interceptor {
	return c.inters.Plan
}

func (c *PlanClient) mutate(ctx context.Context, m *PlanMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlanCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlanDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Plan mutation op: %q", m.Op())
	}
}

// PlanPhaseClient is a client for the PlanPhase schema.
type PlanPhaseClient struct {
	config
}

// NewPlanPhaseClient returns a client for the PlanPhase from the given config.
func NewPlanPhaseClient(c config) *PlanPhaseClient {
	return &PlanPhaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `planphase.Hooks(f(g(h())))`.
func (c *PlanPhaseClient) Use(hooks ...Hook) {
	c.hooks.PlanPhase = append(c.hooks.PlanPhase, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `planphase.Intercept(f(g(h())))`.
func (c *PlanPhaseClient) Intercept(interceptors ...Interceptor) {
	c.inters.PlanPhase = append(c.inters.PlanPhase, interceptors...)
}

// Create returns a builder for creating a PlanPhase entity.
func (c *PlanPhaseClient) Create() *PlanPhaseCreate {
	mutation := newPlanPhaseMutation(c.config, OpCreate)
	return &PlanPhaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlanPhase entities.
func (c *PlanPhaseClient) CreateBulk(builders ...*PlanPhaseCreate) *PlanPhaseCreateBulk {
	return &PlanPhaseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PlanPhaseClient) MapCreateBulk(slice any, setFunc func(*PlanPhaseCreate, int)) *PlanPhaseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PlanPhaseCreateBulk{err: fmt.Errorf("calling to PlanPhaseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PlanPhaseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PlanPhaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlanPhase.
func (c *PlanPhaseClient) Update() *PlanPhaseUpdate {
	mutation := newPlanPhaseMutation(c.config, OpUpdate)
	return &PlanPhaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlanPhaseClient) UpdateOne(pp *PlanPhase) *PlanPhaseUpdateOne {
	mutation := newPlanPhaseMutation(c.config, OpUpdateOne, withPlanPhase(pp))
	return &PlanPhaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlanPhaseClient) UpdateOneID(id string) *PlanPhaseUpdateOne {
	mutation := newPlanPhaseMutation(c.config, OpUpdateOne, withPlanPhaseID(id))
	return &PlanPhaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlanPhase.
func (c *PlanPhaseClient) Delete() *PlanPhaseDelete {
	mutation := newPlanPhaseMutation(c.config, OpDelete)
	return &PlanPhaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlanPhaseClient) DeleteOne(pp *PlanPhase) *PlanPhaseDeleteOne {
	return c.DeleteOneID(pp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlanPhaseClient) DeleteOneID(id string) *PlanPhaseDeleteOne {
	builder := c.Delete().Where(planphase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlanPhaseDeleteOne{builder}
}

// Query returns a query builder for PlanPhase.
func (c *PlanPhaseClient) Query() *PlanPhaseQuery {
	return &PlanPhaseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlanPhase},
		inters: c.Interceptors(),
	}
}

// Get returns a PlanPhase entity by its id.
func (c *PlanPhaseClient) Get(ctx context.Context, id string) (*PlanPhase, error) {
	return c.Query().Where(planphase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlanPhaseClient) GetX(ctx context.Context, id string) *PlanPhase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlan queries the plan edge of a PlanPhase.
func (c *PlanPhaseClient) QueryPlan(pp *PlanPhase) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(planphase.Table, planphase.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, planphase.PlanTable, planphase.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRatecards queries the ratecards edge of a PlanPhase.
func (c *PlanPhaseClient) QueryRatecards(pp *PlanPhase) *PlanRateCardQuery {
	query := (&PlanRateCardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(planphase.Table, planphase.FieldID, id),
			sqlgraph.To(planratecard.Table, planratecard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, planphase.RatecardsTable, planphase.RatecardsColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlanPhaseClient) Hooks() []Hook {
	return c.hooks.PlanPhase
}

// Interceptors returns the client interceptors.
func (c *PlanPhaseClient) Interceptors() []Interceptor {
	return c.inters.PlanPhase
}

func (c *PlanPhaseClient) mutate(ctx context.Context, m *PlanPhaseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlanPhaseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlanPhaseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlanPhaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlanPhaseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown PlanPhase mutation op: %q", m.Op())
	}
}

// PlanRateCardClient is a client for the PlanRateCard schema.
type PlanRateCardClient struct {
	config
}

// NewPlanRateCardClient returns a client for the PlanRateCard from the given config.
func NewPlanRateCardClient(c config) *PlanRateCardClient {
	return &PlanRateCardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `planratecard.Hooks(f(g(h())))`.
func (c *PlanRateCardClient) Use(hooks ...Hook) {
	c.hooks.PlanRateCard = append(c.hooks.PlanRateCard, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `planratecard.Intercept(f(g(h())))`.
func (c *PlanRateCardClient) Intercept(interceptors ...Interceptor) {
	c.inters.PlanRateCard = append(c.inters.PlanRateCard, interceptors...)
}

// Create returns a builder for creating a PlanRateCard entity.
func (c *PlanRateCardClient) Create() *PlanRateCardCreate {
	mutation := newPlanRateCardMutation(c.config, OpCreate)
	return &PlanRateCardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlanRateCard entities.
func (c *PlanRateCardClient) CreateBulk(builders ...*PlanRateCardCreate) *PlanRateCardCreateBulk {
	return &PlanRateCardCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PlanRateCardClient) MapCreateBulk(slice any, setFunc func(*PlanRateCardCreate, int)) *PlanRateCardCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PlanRateCardCreateBulk{err: fmt.Errorf("calling to PlanRateCardClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PlanRateCardCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PlanRateCardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlanRateCard.
func (c *PlanRateCardClient) Update() *PlanRateCardUpdate {
	mutation := newPlanRateCardMutation(c.config, OpUpdate)
	return &PlanRateCardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlanRateCardClient) UpdateOne(prc *PlanRateCard) *PlanRateCardUpdateOne {
	mutation := newPlanRateCardMutation(c.config, OpUpdateOne, withPlanRateCard(prc))
	return &PlanRateCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlanRateCardClient) UpdateOneID(id string) *PlanRateCardUpdateOne {
	mutation := newPlanRateCardMutation(c.config, OpUpdateOne, withPlanRateCardID(id))
	return &PlanRateCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlanRateCard.
func (c *PlanRateCardClient) Delete() *PlanRateCardDelete {
	mutation := newPlanRateCardMutation(c.config, OpDelete)
	return &PlanRateCardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlanRateCardClient) DeleteOne(prc *PlanRateCard) *PlanRateCardDeleteOne {
	return c.DeleteOneID(prc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlanRateCardClient) DeleteOneID(id string) *PlanRateCardDeleteOne {
	builder := c.Delete().Where(planratecard.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlanRateCardDeleteOne{builder}
}

// Query returns a query builder for PlanRateCard.
func (c *PlanRateCardClient) Query() *PlanRateCardQuery {
	return &PlanRateCardQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlanRateCard},
		inters: c.Interceptors(),
	}
}

// Get returns a PlanRateCard entity by its id.
func (c *PlanRateCardClient) Get(ctx context.Context, id string) (*PlanRateCard, error) {
	return c.Query().Where(planratecard.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlanRateCardClient) GetX(ctx context.Context, id string) *PlanRateCard {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPhase queries the phase edge of a PlanRateCard.
func (c *PlanRateCardClient) QueryPhase(prc *PlanRateCard) *PlanPhaseQuery {
	query := (&PlanPhaseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := prc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(planratecard.Table, planratecard.FieldID, id),
			sqlgraph.To(planphase.Table, planphase.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, planratecard.PhaseTable, planratecard.PhaseColumn),
		)
		fromV = sqlgraph.Neighbors(prc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeatures queries the features edge of a PlanRateCard.
func (c *PlanRateCardClient) QueryFeatures(prc *PlanRateCard) *FeatureQuery {
	query := (&FeatureClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := prc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(planratecard.Table, planratecard.FieldID, id),
			sqlgraph.To(feature.Table, feature.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, planratecard.FeaturesTable, planratecard.FeaturesColumn),
		)
		fromV = sqlgraph.Neighbors(prc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlanRateCardClient) Hooks() []Hook {
	return c.hooks.PlanRateCard
}

// Interceptors returns the client interceptors.
func (c *PlanRateCardClient) Interceptors() []Interceptor {
	return c.inters.PlanRateCard
}

func (c *PlanRateCardClient) mutate(ctx context.Context, m *PlanRateCardMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlanRateCardCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlanRateCardUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlanRateCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlanRateCardDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown PlanRateCard mutation op: %q", m.Op())
	}
}

// SubscriptionClient is a client for the Subscription schema.
type SubscriptionClient struct {
	config
}

// NewSubscriptionClient returns a client for the Subscription from the given config.
func NewSubscriptionClient(c config) *SubscriptionClient {
	return &SubscriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscription.Hooks(f(g(h())))`.
func (c *SubscriptionClient) Use(hooks ...Hook) {
	c.hooks.Subscription = append(c.hooks.Subscription, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscription.Intercept(f(g(h())))`.
func (c *SubscriptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Subscription = append(c.inters.Subscription, interceptors...)
}

// Create returns a builder for creating a Subscription entity.
func (c *SubscriptionClient) Create() *SubscriptionCreate {
	mutation := newSubscriptionMutation(c.config, OpCreate)
	return &SubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Subscription entities.
func (c *SubscriptionClient) CreateBulk(builders ...*SubscriptionCreate) *SubscriptionCreateBulk {
	return &SubscriptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscriptionClient) MapCreateBulk(slice any, setFunc func(*SubscriptionCreate, int)) *SubscriptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscriptionCreateBulk{err: fmt.Errorf("calling to SubscriptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscriptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Subscription.
func (c *SubscriptionClient) Update() *SubscriptionUpdate {
	mutation := newSubscriptionMutation(c.config, OpUpdate)
	return &SubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscriptionClient) UpdateOne(s *Subscription) *SubscriptionUpdateOne {
	mutation := newSubscriptionMutation(c.config, OpUpdateOne, withSubscription(s))
	return &SubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscriptionClient) UpdateOneID(id string) *SubscriptionUpdateOne {
	mutation := newSubscriptionMutation(c.config, OpUpdateOne, withSubscriptionID(id))
	return &SubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Subscription.
func (c *SubscriptionClient) Delete() *SubscriptionDelete {
	mutation := newSubscriptionMutation(c.config, OpDelete)
	return &SubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscriptionClient) DeleteOne(s *Subscription) *SubscriptionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscriptionClient) DeleteOneID(id string) *SubscriptionDeleteOne {
	builder := c.Delete().Where(subscription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscriptionDeleteOne{builder}
}

// Query returns a query builder for Subscription.
func (c *SubscriptionClient) Query() *SubscriptionQuery {
	return &SubscriptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscription},
		inters: c.Interceptors(),
	}
}

// Get returns a Subscription entity by its id.
func (c *SubscriptionClient) Get(ctx context.Context, id string) (*Subscription, error) {
	return c.Query().Where(subscription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscriptionClient) GetX(ctx context.Context, id string) *Subscription {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlan queries the plan edge of a Subscription.
func (c *SubscriptionClient) QueryPlan(s *Subscription) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscription.Table, subscription.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscription.PlanTable, subscription.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCustomer queries the customer edge of a Subscription.
func (c *SubscriptionClient) QueryCustomer(s *Subscription) *CustomerQuery {
	query := (&CustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscription.Table, subscription.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscription.CustomerTable, subscription.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPhases queries the phases edge of a Subscription.
func (c *SubscriptionClient) QueryPhases(s *Subscription) *SubscriptionPhaseQuery {
	query := (&SubscriptionPhaseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscription.Table, subscription.FieldID, id),
			sqlgraph.To(subscriptionphase.Table, subscriptionphase.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscription.PhasesTable, subscription.PhasesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingLines queries the billing_lines edge of a Subscription.
func (c *SubscriptionClient) QueryBillingLines(s *Subscription) *BillingInvoiceLineQuery {
	query := (&BillingInvoiceLineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscription.Table, subscription.FieldID, id),
			sqlgraph.To(billinginvoiceline.Table, billinginvoiceline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscription.BillingLinesTable, subscription.BillingLinesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddons queries the addons edge of a Subscription.
func (c *SubscriptionClient) QueryAddons(s *Subscription) *SubscriptionAddonQuery {
	query := (&SubscriptionAddonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscription.Table, subscription.FieldID, id),
			sqlgraph.To(subscriptionaddon.Table, subscriptionaddon.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscription.AddonsTable, subscription.AddonsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscriptionClient) Hooks() []Hook {
	return c.hooks.Subscription
}

// Interceptors returns the client interceptors.
func (c *SubscriptionClient) Interceptors() []Interceptor {
	return c.inters.Subscription
}

func (c *SubscriptionClient) mutate(ctx context.Context, m *SubscriptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Subscription mutation op: %q", m.Op())
	}
}

// SubscriptionAddonClient is a client for the SubscriptionAddon schema.
type SubscriptionAddonClient struct {
	config
}

// NewSubscriptionAddonClient returns a client for the SubscriptionAddon from the given config.
func NewSubscriptionAddonClient(c config) *SubscriptionAddonClient {
	return &SubscriptionAddonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscriptionaddon.Hooks(f(g(h())))`.
func (c *SubscriptionAddonClient) Use(hooks ...Hook) {
	c.hooks.SubscriptionAddon = append(c.hooks.SubscriptionAddon, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscriptionaddon.Intercept(f(g(h())))`.
func (c *SubscriptionAddonClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscriptionAddon = append(c.inters.SubscriptionAddon, interceptors...)
}

// Create returns a builder for creating a SubscriptionAddon entity.
func (c *SubscriptionAddonClient) Create() *SubscriptionAddonCreate {
	mutation := newSubscriptionAddonMutation(c.config, OpCreate)
	return &SubscriptionAddonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscriptionAddon entities.
func (c *SubscriptionAddonClient) CreateBulk(builders ...*SubscriptionAddonCreate) *SubscriptionAddonCreateBulk {
	return &SubscriptionAddonCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscriptionAddonClient) MapCreateBulk(slice any, setFunc func(*SubscriptionAddonCreate, int)) *SubscriptionAddonCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscriptionAddonCreateBulk{err: fmt.Errorf("calling to SubscriptionAddonClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscriptionAddonCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscriptionAddonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscriptionAddon.
func (c *SubscriptionAddonClient) Update() *SubscriptionAddonUpdate {
	mutation := newSubscriptionAddonMutation(c.config, OpUpdate)
	return &SubscriptionAddonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscriptionAddonClient) UpdateOne(sa *SubscriptionAddon) *SubscriptionAddonUpdateOne {
	mutation := newSubscriptionAddonMutation(c.config, OpUpdateOne, withSubscriptionAddon(sa))
	return &SubscriptionAddonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscriptionAddonClient) UpdateOneID(id string) *SubscriptionAddonUpdateOne {
	mutation := newSubscriptionAddonMutation(c.config, OpUpdateOne, withSubscriptionAddonID(id))
	return &SubscriptionAddonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscriptionAddon.
func (c *SubscriptionAddonClient) Delete() *SubscriptionAddonDelete {
	mutation := newSubscriptionAddonMutation(c.config, OpDelete)
	return &SubscriptionAddonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscriptionAddonClient) DeleteOne(sa *SubscriptionAddon) *SubscriptionAddonDeleteOne {
	return c.DeleteOneID(sa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscriptionAddonClient) DeleteOneID(id string) *SubscriptionAddonDeleteOne {
	builder := c.Delete().Where(subscriptionaddon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscriptionAddonDeleteOne{builder}
}

// Query returns a query builder for SubscriptionAddon.
func (c *SubscriptionAddonClient) Query() *SubscriptionAddonQuery {
	return &SubscriptionAddonQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscriptionAddon},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscriptionAddon entity by its id.
func (c *SubscriptionAddonClient) Get(ctx context.Context, id string) (*SubscriptionAddon, error) {
	return c.Query().Where(subscriptionaddon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscriptionAddonClient) GetX(ctx context.Context, id string) *SubscriptionAddon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscription queries the subscription edge of a SubscriptionAddon.
func (c *SubscriptionAddonClient) QuerySubscription(sa *SubscriptionAddon) *SubscriptionQuery {
	query := (&SubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionaddon.Table, subscriptionaddon.FieldID, id),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionaddon.SubscriptionTable, subscriptionaddon.SubscriptionColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRateCards queries the rate_cards edge of a SubscriptionAddon.
func (c *SubscriptionAddonClient) QueryRateCards(sa *SubscriptionAddon) *SubscriptionAddonRateCardQuery {
	query := (&SubscriptionAddonRateCardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionaddon.Table, subscriptionaddon.FieldID, id),
			sqlgraph.To(subscriptionaddonratecard.Table, subscriptionaddonratecard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscriptionaddon.RateCardsTable, subscriptionaddon.RateCardsColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuantities queries the quantities edge of a SubscriptionAddon.
func (c *SubscriptionAddonClient) QueryQuantities(sa *SubscriptionAddon) *SubscriptionAddonQuantityQuery {
	query := (&SubscriptionAddonQuantityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionaddon.Table, subscriptionaddon.FieldID, id),
			sqlgraph.To(subscriptionaddonquantity.Table, subscriptionaddonquantity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscriptionaddon.QuantitiesTable, subscriptionaddon.QuantitiesColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddon queries the addon edge of a SubscriptionAddon.
func (c *SubscriptionAddonClient) QueryAddon(sa *SubscriptionAddon) *AddonQuery {
	query := (&AddonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionaddon.Table, subscriptionaddon.FieldID, id),
			sqlgraph.To(addon.Table, addon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionaddon.AddonTable, subscriptionaddon.AddonColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscriptionAddonClient) Hooks() []Hook {
	return c.hooks.SubscriptionAddon
}

// Interceptors returns the client interceptors.
func (c *SubscriptionAddonClient) Interceptors() []Interceptor {
	return c.inters.SubscriptionAddon
}

func (c *SubscriptionAddonClient) mutate(ctx context.Context, m *SubscriptionAddonMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscriptionAddonCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscriptionAddonUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscriptionAddonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscriptionAddonDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown SubscriptionAddon mutation op: %q", m.Op())
	}
}

// SubscriptionAddonQuantityClient is a client for the SubscriptionAddonQuantity schema.
type SubscriptionAddonQuantityClient struct {
	config
}

// NewSubscriptionAddonQuantityClient returns a client for the SubscriptionAddonQuantity from the given config.
func NewSubscriptionAddonQuantityClient(c config) *SubscriptionAddonQuantityClient {
	return &SubscriptionAddonQuantityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscriptionaddonquantity.Hooks(f(g(h())))`.
func (c *SubscriptionAddonQuantityClient) Use(hooks ...Hook) {
	c.hooks.SubscriptionAddonQuantity = append(c.hooks.SubscriptionAddonQuantity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscriptionaddonquantity.Intercept(f(g(h())))`.
func (c *SubscriptionAddonQuantityClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscriptionAddonQuantity = append(c.inters.SubscriptionAddonQuantity, interceptors...)
}

// Create returns a builder for creating a SubscriptionAddonQuantity entity.
func (c *SubscriptionAddonQuantityClient) Create() *SubscriptionAddonQuantityCreate {
	mutation := newSubscriptionAddonQuantityMutation(c.config, OpCreate)
	return &SubscriptionAddonQuantityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscriptionAddonQuantity entities.
func (c *SubscriptionAddonQuantityClient) CreateBulk(builders ...*SubscriptionAddonQuantityCreate) *SubscriptionAddonQuantityCreateBulk {
	return &SubscriptionAddonQuantityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscriptionAddonQuantityClient) MapCreateBulk(slice any, setFunc func(*SubscriptionAddonQuantityCreate, int)) *SubscriptionAddonQuantityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscriptionAddonQuantityCreateBulk{err: fmt.Errorf("calling to SubscriptionAddonQuantityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscriptionAddonQuantityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscriptionAddonQuantityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscriptionAddonQuantity.
func (c *SubscriptionAddonQuantityClient) Update() *SubscriptionAddonQuantityUpdate {
	mutation := newSubscriptionAddonQuantityMutation(c.config, OpUpdate)
	return &SubscriptionAddonQuantityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscriptionAddonQuantityClient) UpdateOne(saq *SubscriptionAddonQuantity) *SubscriptionAddonQuantityUpdateOne {
	mutation := newSubscriptionAddonQuantityMutation(c.config, OpUpdateOne, withSubscriptionAddonQuantity(saq))
	return &SubscriptionAddonQuantityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscriptionAddonQuantityClient) UpdateOneID(id string) *SubscriptionAddonQuantityUpdateOne {
	mutation := newSubscriptionAddonQuantityMutation(c.config, OpUpdateOne, withSubscriptionAddonQuantityID(id))
	return &SubscriptionAddonQuantityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscriptionAddonQuantity.
func (c *SubscriptionAddonQuantityClient) Delete() *SubscriptionAddonQuantityDelete {
	mutation := newSubscriptionAddonQuantityMutation(c.config, OpDelete)
	return &SubscriptionAddonQuantityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscriptionAddonQuantityClient) DeleteOne(saq *SubscriptionAddonQuantity) *SubscriptionAddonQuantityDeleteOne {
	return c.DeleteOneID(saq.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscriptionAddonQuantityClient) DeleteOneID(id string) *SubscriptionAddonQuantityDeleteOne {
	builder := c.Delete().Where(subscriptionaddonquantity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscriptionAddonQuantityDeleteOne{builder}
}

// Query returns a query builder for SubscriptionAddonQuantity.
func (c *SubscriptionAddonQuantityClient) Query() *SubscriptionAddonQuantityQuery {
	return &SubscriptionAddonQuantityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscriptionAddonQuantity},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscriptionAddonQuantity entity by its id.
func (c *SubscriptionAddonQuantityClient) Get(ctx context.Context, id string) (*SubscriptionAddonQuantity, error) {
	return c.Query().Where(subscriptionaddonquantity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscriptionAddonQuantityClient) GetX(ctx context.Context, id string) *SubscriptionAddonQuantity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscriptionAddon queries the subscription_addon edge of a SubscriptionAddonQuantity.
func (c *SubscriptionAddonQuantityClient) QuerySubscriptionAddon(saq *SubscriptionAddonQuantity) *SubscriptionAddonQuery {
	query := (&SubscriptionAddonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := saq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionaddonquantity.Table, subscriptionaddonquantity.FieldID, id),
			sqlgraph.To(subscriptionaddon.Table, subscriptionaddon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionaddonquantity.SubscriptionAddonTable, subscriptionaddonquantity.SubscriptionAddonColumn),
		)
		fromV = sqlgraph.Neighbors(saq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscriptionAddonQuantityClient) Hooks() []Hook {
	return c.hooks.SubscriptionAddonQuantity
}

// Interceptors returns the client interceptors.
func (c *SubscriptionAddonQuantityClient) Interceptors() []Interceptor {
	return c.inters.SubscriptionAddonQuantity
}

func (c *SubscriptionAddonQuantityClient) mutate(ctx context.Context, m *SubscriptionAddonQuantityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscriptionAddonQuantityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscriptionAddonQuantityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscriptionAddonQuantityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscriptionAddonQuantityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown SubscriptionAddonQuantity mutation op: %q", m.Op())
	}
}

// SubscriptionAddonRateCardClient is a client for the SubscriptionAddonRateCard schema.
type SubscriptionAddonRateCardClient struct {
	config
}

// NewSubscriptionAddonRateCardClient returns a client for the SubscriptionAddonRateCard from the given config.
func NewSubscriptionAddonRateCardClient(c config) *SubscriptionAddonRateCardClient {
	return &SubscriptionAddonRateCardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscriptionaddonratecard.Hooks(f(g(h())))`.
func (c *SubscriptionAddonRateCardClient) Use(hooks ...Hook) {
	c.hooks.SubscriptionAddonRateCard = append(c.hooks.SubscriptionAddonRateCard, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscriptionaddonratecard.Intercept(f(g(h())))`.
func (c *SubscriptionAddonRateCardClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscriptionAddonRateCard = append(c.inters.SubscriptionAddonRateCard, interceptors...)
}

// Create returns a builder for creating a SubscriptionAddonRateCard entity.
func (c *SubscriptionAddonRateCardClient) Create() *SubscriptionAddonRateCardCreate {
	mutation := newSubscriptionAddonRateCardMutation(c.config, OpCreate)
	return &SubscriptionAddonRateCardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscriptionAddonRateCard entities.
func (c *SubscriptionAddonRateCardClient) CreateBulk(builders ...*SubscriptionAddonRateCardCreate) *SubscriptionAddonRateCardCreateBulk {
	return &SubscriptionAddonRateCardCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscriptionAddonRateCardClient) MapCreateBulk(slice any, setFunc func(*SubscriptionAddonRateCardCreate, int)) *SubscriptionAddonRateCardCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscriptionAddonRateCardCreateBulk{err: fmt.Errorf("calling to SubscriptionAddonRateCardClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscriptionAddonRateCardCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscriptionAddonRateCardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscriptionAddonRateCard.
func (c *SubscriptionAddonRateCardClient) Update() *SubscriptionAddonRateCardUpdate {
	mutation := newSubscriptionAddonRateCardMutation(c.config, OpUpdate)
	return &SubscriptionAddonRateCardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscriptionAddonRateCardClient) UpdateOne(sarc *SubscriptionAddonRateCard) *SubscriptionAddonRateCardUpdateOne {
	mutation := newSubscriptionAddonRateCardMutation(c.config, OpUpdateOne, withSubscriptionAddonRateCard(sarc))
	return &SubscriptionAddonRateCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscriptionAddonRateCardClient) UpdateOneID(id string) *SubscriptionAddonRateCardUpdateOne {
	mutation := newSubscriptionAddonRateCardMutation(c.config, OpUpdateOne, withSubscriptionAddonRateCardID(id))
	return &SubscriptionAddonRateCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscriptionAddonRateCard.
func (c *SubscriptionAddonRateCardClient) Delete() *SubscriptionAddonRateCardDelete {
	mutation := newSubscriptionAddonRateCardMutation(c.config, OpDelete)
	return &SubscriptionAddonRateCardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscriptionAddonRateCardClient) DeleteOne(sarc *SubscriptionAddonRateCard) *SubscriptionAddonRateCardDeleteOne {
	return c.DeleteOneID(sarc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscriptionAddonRateCardClient) DeleteOneID(id string) *SubscriptionAddonRateCardDeleteOne {
	builder := c.Delete().Where(subscriptionaddonratecard.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscriptionAddonRateCardDeleteOne{builder}
}

// Query returns a query builder for SubscriptionAddonRateCard.
func (c *SubscriptionAddonRateCardClient) Query() *SubscriptionAddonRateCardQuery {
	return &SubscriptionAddonRateCardQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscriptionAddonRateCard},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscriptionAddonRateCard entity by its id.
func (c *SubscriptionAddonRateCardClient) Get(ctx context.Context, id string) (*SubscriptionAddonRateCard, error) {
	return c.Query().Where(subscriptionaddonratecard.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscriptionAddonRateCardClient) GetX(ctx context.Context, id string) *SubscriptionAddonRateCard {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscriptionAddon queries the subscription_addon edge of a SubscriptionAddonRateCard.
func (c *SubscriptionAddonRateCardClient) QuerySubscriptionAddon(sarc *SubscriptionAddonRateCard) *SubscriptionAddonQuery {
	query := (&SubscriptionAddonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sarc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionaddonratecard.Table, subscriptionaddonratecard.FieldID, id),
			sqlgraph.To(subscriptionaddon.Table, subscriptionaddon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionaddonratecard.SubscriptionAddonTable, subscriptionaddonratecard.SubscriptionAddonColumn),
		)
		fromV = sqlgraph.Neighbors(sarc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItems queries the items edge of a SubscriptionAddonRateCard.
func (c *SubscriptionAddonRateCardClient) QueryItems(sarc *SubscriptionAddonRateCard) *SubscriptionAddonRateCardItemLinkQuery {
	query := (&SubscriptionAddonRateCardItemLinkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sarc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionaddonratecard.Table, subscriptionaddonratecard.FieldID, id),
			sqlgraph.To(subscriptionaddonratecarditemlink.Table, subscriptionaddonratecarditemlink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscriptionaddonratecard.ItemsTable, subscriptionaddonratecard.ItemsColumn),
		)
		fromV = sqlgraph.Neighbors(sarc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddonRatecard queries the addon_ratecard edge of a SubscriptionAddonRateCard.
func (c *SubscriptionAddonRateCardClient) QueryAddonRatecard(sarc *SubscriptionAddonRateCard) *AddonRateCardQuery {
	query := (&AddonRateCardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sarc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionaddonratecard.Table, subscriptionaddonratecard.FieldID, id),
			sqlgraph.To(addonratecard.Table, addonratecard.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionaddonratecard.AddonRatecardTable, subscriptionaddonratecard.AddonRatecardColumn),
		)
		fromV = sqlgraph.Neighbors(sarc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscriptionAddonRateCardClient) Hooks() []Hook {
	return c.hooks.SubscriptionAddonRateCard
}

// Interceptors returns the client interceptors.
func (c *SubscriptionAddonRateCardClient) Interceptors() []Interceptor {
	return c.inters.SubscriptionAddonRateCard
}

func (c *SubscriptionAddonRateCardClient) mutate(ctx context.Context, m *SubscriptionAddonRateCardMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscriptionAddonRateCardCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscriptionAddonRateCardUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscriptionAddonRateCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscriptionAddonRateCardDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown SubscriptionAddonRateCard mutation op: %q", m.Op())
	}
}

// SubscriptionAddonRateCardItemLinkClient is a client for the SubscriptionAddonRateCardItemLink schema.
type SubscriptionAddonRateCardItemLinkClient struct {
	config
}

// NewSubscriptionAddonRateCardItemLinkClient returns a client for the SubscriptionAddonRateCardItemLink from the given config.
func NewSubscriptionAddonRateCardItemLinkClient(c config) *SubscriptionAddonRateCardItemLinkClient {
	return &SubscriptionAddonRateCardItemLinkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscriptionaddonratecarditemlink.Hooks(f(g(h())))`.
func (c *SubscriptionAddonRateCardItemLinkClient) Use(hooks ...Hook) {
	c.hooks.SubscriptionAddonRateCardItemLink = append(c.hooks.SubscriptionAddonRateCardItemLink, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscriptionaddonratecarditemlink.Intercept(f(g(h())))`.
func (c *SubscriptionAddonRateCardItemLinkClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscriptionAddonRateCardItemLink = append(c.inters.SubscriptionAddonRateCardItemLink, interceptors...)
}

// Create returns a builder for creating a SubscriptionAddonRateCardItemLink entity.
func (c *SubscriptionAddonRateCardItemLinkClient) Create() *SubscriptionAddonRateCardItemLinkCreate {
	mutation := newSubscriptionAddonRateCardItemLinkMutation(c.config, OpCreate)
	return &SubscriptionAddonRateCardItemLinkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscriptionAddonRateCardItemLink entities.
func (c *SubscriptionAddonRateCardItemLinkClient) CreateBulk(builders ...*SubscriptionAddonRateCardItemLinkCreate) *SubscriptionAddonRateCardItemLinkCreateBulk {
	return &SubscriptionAddonRateCardItemLinkCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscriptionAddonRateCardItemLinkClient) MapCreateBulk(slice any, setFunc func(*SubscriptionAddonRateCardItemLinkCreate, int)) *SubscriptionAddonRateCardItemLinkCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscriptionAddonRateCardItemLinkCreateBulk{err: fmt.Errorf("calling to SubscriptionAddonRateCardItemLinkClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscriptionAddonRateCardItemLinkCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscriptionAddonRateCardItemLinkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscriptionAddonRateCardItemLink.
func (c *SubscriptionAddonRateCardItemLinkClient) Update() *SubscriptionAddonRateCardItemLinkUpdate {
	mutation := newSubscriptionAddonRateCardItemLinkMutation(c.config, OpUpdate)
	return &SubscriptionAddonRateCardItemLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscriptionAddonRateCardItemLinkClient) UpdateOne(sarcil *SubscriptionAddonRateCardItemLink) *SubscriptionAddonRateCardItemLinkUpdateOne {
	mutation := newSubscriptionAddonRateCardItemLinkMutation(c.config, OpUpdateOne, withSubscriptionAddonRateCardItemLink(sarcil))
	return &SubscriptionAddonRateCardItemLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscriptionAddonRateCardItemLinkClient) UpdateOneID(id string) *SubscriptionAddonRateCardItemLinkUpdateOne {
	mutation := newSubscriptionAddonRateCardItemLinkMutation(c.config, OpUpdateOne, withSubscriptionAddonRateCardItemLinkID(id))
	return &SubscriptionAddonRateCardItemLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscriptionAddonRateCardItemLink.
func (c *SubscriptionAddonRateCardItemLinkClient) Delete() *SubscriptionAddonRateCardItemLinkDelete {
	mutation := newSubscriptionAddonRateCardItemLinkMutation(c.config, OpDelete)
	return &SubscriptionAddonRateCardItemLinkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscriptionAddonRateCardItemLinkClient) DeleteOne(sarcil *SubscriptionAddonRateCardItemLink) *SubscriptionAddonRateCardItemLinkDeleteOne {
	return c.DeleteOneID(sarcil.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscriptionAddonRateCardItemLinkClient) DeleteOneID(id string) *SubscriptionAddonRateCardItemLinkDeleteOne {
	builder := c.Delete().Where(subscriptionaddonratecarditemlink.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscriptionAddonRateCardItemLinkDeleteOne{builder}
}

// Query returns a query builder for SubscriptionAddonRateCardItemLink.
func (c *SubscriptionAddonRateCardItemLinkClient) Query() *SubscriptionAddonRateCardItemLinkQuery {
	return &SubscriptionAddonRateCardItemLinkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscriptionAddonRateCardItemLink},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscriptionAddonRateCardItemLink entity by its id.
func (c *SubscriptionAddonRateCardItemLinkClient) Get(ctx context.Context, id string) (*SubscriptionAddonRateCardItemLink, error) {
	return c.Query().Where(subscriptionaddonratecarditemlink.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscriptionAddonRateCardItemLinkClient) GetX(ctx context.Context, id string) *SubscriptionAddonRateCardItemLink {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscriptionAddonRateCard queries the subscription_addon_rate_card edge of a SubscriptionAddonRateCardItemLink.
func (c *SubscriptionAddonRateCardItemLinkClient) QuerySubscriptionAddonRateCard(sarcil *SubscriptionAddonRateCardItemLink) *SubscriptionAddonRateCardQuery {
	query := (&SubscriptionAddonRateCardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sarcil.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionaddonratecarditemlink.Table, subscriptionaddonratecarditemlink.FieldID, id),
			sqlgraph.To(subscriptionaddonratecard.Table, subscriptionaddonratecard.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionaddonratecarditemlink.SubscriptionAddonRateCardTable, subscriptionaddonratecarditemlink.SubscriptionAddonRateCardColumn),
		)
		fromV = sqlgraph.Neighbors(sarcil.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscriptionItem queries the subscription_item edge of a SubscriptionAddonRateCardItemLink.
func (c *SubscriptionAddonRateCardItemLinkClient) QuerySubscriptionItem(sarcil *SubscriptionAddonRateCardItemLink) *SubscriptionItemQuery {
	query := (&SubscriptionItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sarcil.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionaddonratecarditemlink.Table, subscriptionaddonratecarditemlink.FieldID, id),
			sqlgraph.To(subscriptionitem.Table, subscriptionitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionaddonratecarditemlink.SubscriptionItemTable, subscriptionaddonratecarditemlink.SubscriptionItemColumn),
		)
		fromV = sqlgraph.Neighbors(sarcil.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscriptionAddonRateCardItemLinkClient) Hooks() []Hook {
	return c.hooks.SubscriptionAddonRateCardItemLink
}

// Interceptors returns the client interceptors.
func (c *SubscriptionAddonRateCardItemLinkClient) Interceptors() []Interceptor {
	return c.inters.SubscriptionAddonRateCardItemLink
}

func (c *SubscriptionAddonRateCardItemLinkClient) mutate(ctx context.Context, m *SubscriptionAddonRateCardItemLinkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscriptionAddonRateCardItemLinkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscriptionAddonRateCardItemLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscriptionAddonRateCardItemLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscriptionAddonRateCardItemLinkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown SubscriptionAddonRateCardItemLink mutation op: %q", m.Op())
	}
}

// SubscriptionItemClient is a client for the SubscriptionItem schema.
type SubscriptionItemClient struct {
	config
}

// NewSubscriptionItemClient returns a client for the SubscriptionItem from the given config.
func NewSubscriptionItemClient(c config) *SubscriptionItemClient {
	return &SubscriptionItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscriptionitem.Hooks(f(g(h())))`.
func (c *SubscriptionItemClient) Use(hooks ...Hook) {
	c.hooks.SubscriptionItem = append(c.hooks.SubscriptionItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscriptionitem.Intercept(f(g(h())))`.
func (c *SubscriptionItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscriptionItem = append(c.inters.SubscriptionItem, interceptors...)
}

// Create returns a builder for creating a SubscriptionItem entity.
func (c *SubscriptionItemClient) Create() *SubscriptionItemCreate {
	mutation := newSubscriptionItemMutation(c.config, OpCreate)
	return &SubscriptionItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscriptionItem entities.
func (c *SubscriptionItemClient) CreateBulk(builders ...*SubscriptionItemCreate) *SubscriptionItemCreateBulk {
	return &SubscriptionItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscriptionItemClient) MapCreateBulk(slice any, setFunc func(*SubscriptionItemCreate, int)) *SubscriptionItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscriptionItemCreateBulk{err: fmt.Errorf("calling to SubscriptionItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscriptionItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscriptionItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscriptionItem.
func (c *SubscriptionItemClient) Update() *SubscriptionItemUpdate {
	mutation := newSubscriptionItemMutation(c.config, OpUpdate)
	return &SubscriptionItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscriptionItemClient) UpdateOne(si *SubscriptionItem) *SubscriptionItemUpdateOne {
	mutation := newSubscriptionItemMutation(c.config, OpUpdateOne, withSubscriptionItem(si))
	return &SubscriptionItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscriptionItemClient) UpdateOneID(id string) *SubscriptionItemUpdateOne {
	mutation := newSubscriptionItemMutation(c.config, OpUpdateOne, withSubscriptionItemID(id))
	return &SubscriptionItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscriptionItem.
func (c *SubscriptionItemClient) Delete() *SubscriptionItemDelete {
	mutation := newSubscriptionItemMutation(c.config, OpDelete)
	return &SubscriptionItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscriptionItemClient) DeleteOne(si *SubscriptionItem) *SubscriptionItemDeleteOne {
	return c.DeleteOneID(si.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscriptionItemClient) DeleteOneID(id string) *SubscriptionItemDeleteOne {
	builder := c.Delete().Where(subscriptionitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscriptionItemDeleteOne{builder}
}

// Query returns a query builder for SubscriptionItem.
func (c *SubscriptionItemClient) Query() *SubscriptionItemQuery {
	return &SubscriptionItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscriptionItem},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscriptionItem entity by its id.
func (c *SubscriptionItemClient) Get(ctx context.Context, id string) (*SubscriptionItem, error) {
	return c.Query().Where(subscriptionitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscriptionItemClient) GetX(ctx context.Context, id string) *SubscriptionItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPhase queries the phase edge of a SubscriptionItem.
func (c *SubscriptionItemClient) QueryPhase(si *SubscriptionItem) *SubscriptionPhaseQuery {
	query := (&SubscriptionPhaseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionitem.Table, subscriptionitem.FieldID, id),
			sqlgraph.To(subscriptionphase.Table, subscriptionphase.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionitem.PhaseTable, subscriptionitem.PhaseColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEntitlement queries the entitlement edge of a SubscriptionItem.
func (c *SubscriptionItemClient) QueryEntitlement(si *SubscriptionItem) *EntitlementQuery {
	query := (&EntitlementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionitem.Table, subscriptionitem.FieldID, id),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionitem.EntitlementTable, subscriptionitem.EntitlementColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingLines queries the billing_lines edge of a SubscriptionItem.
func (c *SubscriptionItemClient) QueryBillingLines(si *SubscriptionItem) *BillingInvoiceLineQuery {
	query := (&BillingInvoiceLineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionitem.Table, subscriptionitem.FieldID, id),
			sqlgraph.To(billinginvoiceline.Table, billinginvoiceline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscriptionitem.BillingLinesTable, subscriptionitem.BillingLinesColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscriptionAddonRateCardItems queries the subscription_addon_rate_card_items edge of a SubscriptionItem.
func (c *SubscriptionItemClient) QuerySubscriptionAddonRateCardItems(si *SubscriptionItem) *SubscriptionAddonRateCardItemLinkQuery {
	query := (&SubscriptionAddonRateCardItemLinkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionitem.Table, subscriptionitem.FieldID, id),
			sqlgraph.To(subscriptionaddonratecarditemlink.Table, subscriptionaddonratecarditemlink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscriptionitem.SubscriptionAddonRateCardItemsTable, subscriptionitem.SubscriptionAddonRateCardItemsColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscriptionItemClient) Hooks() []Hook {
	return c.hooks.SubscriptionItem
}

// Interceptors returns the client interceptors.
func (c *SubscriptionItemClient) Interceptors() []Interceptor {
	return c.inters.SubscriptionItem
}

func (c *SubscriptionItemClient) mutate(ctx context.Context, m *SubscriptionItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscriptionItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscriptionItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscriptionItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscriptionItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown SubscriptionItem mutation op: %q", m.Op())
	}
}

// SubscriptionPhaseClient is a client for the SubscriptionPhase schema.
type SubscriptionPhaseClient struct {
	config
}

// NewSubscriptionPhaseClient returns a client for the SubscriptionPhase from the given config.
func NewSubscriptionPhaseClient(c config) *SubscriptionPhaseClient {
	return &SubscriptionPhaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscriptionphase.Hooks(f(g(h())))`.
func (c *SubscriptionPhaseClient) Use(hooks ...Hook) {
	c.hooks.SubscriptionPhase = append(c.hooks.SubscriptionPhase, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscriptionphase.Intercept(f(g(h())))`.
func (c *SubscriptionPhaseClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscriptionPhase = append(c.inters.SubscriptionPhase, interceptors...)
}

// Create returns a builder for creating a SubscriptionPhase entity.
func (c *SubscriptionPhaseClient) Create() *SubscriptionPhaseCreate {
	mutation := newSubscriptionPhaseMutation(c.config, OpCreate)
	return &SubscriptionPhaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscriptionPhase entities.
func (c *SubscriptionPhaseClient) CreateBulk(builders ...*SubscriptionPhaseCreate) *SubscriptionPhaseCreateBulk {
	return &SubscriptionPhaseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscriptionPhaseClient) MapCreateBulk(slice any, setFunc func(*SubscriptionPhaseCreate, int)) *SubscriptionPhaseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscriptionPhaseCreateBulk{err: fmt.Errorf("calling to SubscriptionPhaseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscriptionPhaseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscriptionPhaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscriptionPhase.
func (c *SubscriptionPhaseClient) Update() *SubscriptionPhaseUpdate {
	mutation := newSubscriptionPhaseMutation(c.config, OpUpdate)
	return &SubscriptionPhaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscriptionPhaseClient) UpdateOne(sp *SubscriptionPhase) *SubscriptionPhaseUpdateOne {
	mutation := newSubscriptionPhaseMutation(c.config, OpUpdateOne, withSubscriptionPhase(sp))
	return &SubscriptionPhaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscriptionPhaseClient) UpdateOneID(id string) *SubscriptionPhaseUpdateOne {
	mutation := newSubscriptionPhaseMutation(c.config, OpUpdateOne, withSubscriptionPhaseID(id))
	return &SubscriptionPhaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscriptionPhase.
func (c *SubscriptionPhaseClient) Delete() *SubscriptionPhaseDelete {
	mutation := newSubscriptionPhaseMutation(c.config, OpDelete)
	return &SubscriptionPhaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscriptionPhaseClient) DeleteOne(sp *SubscriptionPhase) *SubscriptionPhaseDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscriptionPhaseClient) DeleteOneID(id string) *SubscriptionPhaseDeleteOne {
	builder := c.Delete().Where(subscriptionphase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscriptionPhaseDeleteOne{builder}
}

// Query returns a query builder for SubscriptionPhase.
func (c *SubscriptionPhaseClient) Query() *SubscriptionPhaseQuery {
	return &SubscriptionPhaseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscriptionPhase},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscriptionPhase entity by its id.
func (c *SubscriptionPhaseClient) Get(ctx context.Context, id string) (*SubscriptionPhase, error) {
	return c.Query().Where(subscriptionphase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscriptionPhaseClient) GetX(ctx context.Context, id string) *SubscriptionPhase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscription queries the subscription edge of a SubscriptionPhase.
func (c *SubscriptionPhaseClient) QuerySubscription(sp *SubscriptionPhase) *SubscriptionQuery {
	query := (&SubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionphase.Table, subscriptionphase.FieldID, id),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscriptionphase.SubscriptionTable, subscriptionphase.SubscriptionColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItems queries the items edge of a SubscriptionPhase.
func (c *SubscriptionPhaseClient) QueryItems(sp *SubscriptionPhase) *SubscriptionItemQuery {
	query := (&SubscriptionItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionphase.Table, subscriptionphase.FieldID, id),
			sqlgraph.To(subscriptionitem.Table, subscriptionitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscriptionphase.ItemsTable, subscriptionphase.ItemsColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingLines queries the billing_lines edge of a SubscriptionPhase.
func (c *SubscriptionPhaseClient) QueryBillingLines(sp *SubscriptionPhase) *BillingInvoiceLineQuery {
	query := (&BillingInvoiceLineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscriptionphase.Table, subscriptionphase.FieldID, id),
			sqlgraph.To(billinginvoiceline.Table, billinginvoiceline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscriptionphase.BillingLinesTable, subscriptionphase.BillingLinesColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscriptionPhaseClient) Hooks() []Hook {
	return c.hooks.SubscriptionPhase
}

// Interceptors returns the client interceptors.
func (c *SubscriptionPhaseClient) Interceptors() []Interceptor {
	return c.inters.SubscriptionPhase
}

func (c *SubscriptionPhaseClient) mutate(ctx context.Context, m *SubscriptionPhaseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscriptionPhaseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscriptionPhaseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscriptionPhaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscriptionPhaseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown SubscriptionPhase mutation op: %q", m.Op())
	}
}

// UsageResetClient is a client for the UsageReset schema.
type UsageResetClient struct {
	config
}

// NewUsageResetClient returns a client for the UsageReset from the given config.
func NewUsageResetClient(c config) *UsageResetClient {
	return &UsageResetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usagereset.Hooks(f(g(h())))`.
func (c *UsageResetClient) Use(hooks ...Hook) {
	c.hooks.UsageReset = append(c.hooks.UsageReset, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usagereset.Intercept(f(g(h())))`.
func (c *UsageResetClient) Intercept(interceptors ...Interceptor) {
	c.inters.UsageReset = append(c.inters.UsageReset, interceptors...)
}

// Create returns a builder for creating a UsageReset entity.
func (c *UsageResetClient) Create() *UsageResetCreate {
	mutation := newUsageResetMutation(c.config, OpCreate)
	return &UsageResetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UsageReset entities.
func (c *UsageResetClient) CreateBulk(builders ...*UsageResetCreate) *UsageResetCreateBulk {
	return &UsageResetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UsageResetClient) MapCreateBulk(slice any, setFunc func(*UsageResetCreate, int)) *UsageResetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UsageResetCreateBulk{err: fmt.Errorf("calling to UsageResetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UsageResetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UsageResetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UsageReset.
func (c *UsageResetClient) Update() *UsageResetUpdate {
	mutation := newUsageResetMutation(c.config, OpUpdate)
	return &UsageResetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsageResetClient) UpdateOne(ur *UsageReset) *UsageResetUpdateOne {
	mutation := newUsageResetMutation(c.config, OpUpdateOne, withUsageReset(ur))
	return &UsageResetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsageResetClient) UpdateOneID(id string) *UsageResetUpdateOne {
	mutation := newUsageResetMutation(c.config, OpUpdateOne, withUsageResetID(id))
	return &UsageResetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UsageReset.
func (c *UsageResetClient) Delete() *UsageResetDelete {
	mutation := newUsageResetMutation(c.config, OpDelete)
	return &UsageResetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UsageResetClient) DeleteOne(ur *UsageReset) *UsageResetDeleteOne {
	return c.DeleteOneID(ur.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UsageResetClient) DeleteOneID(id string) *UsageResetDeleteOne {
	builder := c.Delete().Where(usagereset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsageResetDeleteOne{builder}
}

// Query returns a query builder for UsageReset.
func (c *UsageResetClient) Query() *UsageResetQuery {
	return &UsageResetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUsageReset},
		inters: c.Interceptors(),
	}
}

// Get returns a UsageReset entity by its id.
func (c *UsageResetClient) Get(ctx context.Context, id string) (*UsageReset, error) {
	return c.Query().Where(usagereset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsageResetClient) GetX(ctx context.Context, id string) *UsageReset {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEntitlement queries the entitlement edge of a UsageReset.
func (c *UsageResetClient) QueryEntitlement(ur *UsageReset) *EntitlementQuery {
	query := (&EntitlementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ur.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usagereset.Table, usagereset.FieldID, id),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usagereset.EntitlementTable, usagereset.EntitlementColumn),
		)
		fromV = sqlgraph.Neighbors(ur.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UsageResetClient) Hooks() []Hook {
	return c.hooks.UsageReset
}

// Interceptors returns the client interceptors.
func (c *UsageResetClient) Interceptors() []Interceptor {
	return c.inters.UsageReset
}

func (c *UsageResetClient) mutate(ctx context.Context, m *UsageResetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UsageResetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UsageResetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UsageResetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UsageResetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown UsageReset mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Addon, AddonRateCard, App, AppCustomer, AppStripe, AppStripeCustomer,
		BalanceSnapshot, BillingCustomerLock, BillingCustomerOverride, BillingInvoice,
		BillingInvoiceDiscount, BillingInvoiceFlatFeeLineConfig, BillingInvoiceLine,
		BillingInvoiceLineDiscount, BillingInvoiceUsageBasedLineConfig,
		BillingInvoiceValidationIssue, BillingProfile, BillingSequenceNumbers,
		BillingWorkflowConfig, Customer, CustomerSubjects, Entitlement, Feature, Grant,
		Meter, NotificationChannel, NotificationEvent, NotificationEventDeliveryStatus,
		NotificationRule, Plan, PlanPhase, PlanRateCard, Subscription,
		SubscriptionAddon, SubscriptionAddonQuantity, SubscriptionAddonRateCard,
		SubscriptionAddonRateCardItemLink, SubscriptionItem, SubscriptionPhase,
		UsageReset []ent.Hook
	}
	inters struct {
		Addon, AddonRateCard, App, AppCustomer, AppStripe, AppStripeCustomer,
		BalanceSnapshot, BillingCustomerLock, BillingCustomerOverride, BillingInvoice,
		BillingInvoiceDiscount, BillingInvoiceFlatFeeLineConfig, BillingInvoiceLine,
		BillingInvoiceLineDiscount, BillingInvoiceUsageBasedLineConfig,
		BillingInvoiceValidationIssue, BillingProfile, BillingSequenceNumbers,
		BillingWorkflowConfig, Customer, CustomerSubjects, Entitlement, Feature, Grant,
		Meter, NotificationChannel, NotificationEvent, NotificationEventDeliveryStatus,
		NotificationRule, Plan, PlanPhase, PlanRateCard, Subscription,
		SubscriptionAddon, SubscriptionAddonQuantity, SubscriptionAddonRateCard,
		SubscriptionAddonRateCardItemLink, SubscriptionItem, SubscriptionPhase,
		UsageReset []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
