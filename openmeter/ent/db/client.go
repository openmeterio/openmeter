// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/openmeterio/openmeter/openmeter/ent/db/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	dbapp "github.com/openmeterio/openmeter/openmeter/ent/db/app"
	"github.com/openmeterio/openmeter/openmeter/ent/db/balancesnapshot"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomeroverride"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceitem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingprofile"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customersubjects"
	"github.com/openmeterio/openmeter/openmeter/ent/db/entitlement"
	"github.com/openmeterio/openmeter/openmeter/ent/db/feature"
	dbgrant "github.com/openmeterio/openmeter/openmeter/ent/db/grant"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationchannel"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationevent"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationeventdeliverystatus"
	"github.com/openmeterio/openmeter/openmeter/ent/db/notificationrule"
	"github.com/openmeterio/openmeter/openmeter/ent/db/usagereset"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// App is the client for interacting with the App builders.
	App *AppClient
	// BalanceSnapshot is the client for interacting with the BalanceSnapshot builders.
	BalanceSnapshot *BalanceSnapshotClient
	// BillingCustomerOverride is the client for interacting with the BillingCustomerOverride builders.
	BillingCustomerOverride *BillingCustomerOverrideClient
	// BillingInvoice is the client for interacting with the BillingInvoice builders.
	BillingInvoice *BillingInvoiceClient
	// BillingInvoiceItem is the client for interacting with the BillingInvoiceItem builders.
	BillingInvoiceItem *BillingInvoiceItemClient
	// BillingProfile is the client for interacting with the BillingProfile builders.
	BillingProfile *BillingProfileClient
	// BillingWorkflowConfig is the client for interacting with the BillingWorkflowConfig builders.
	BillingWorkflowConfig *BillingWorkflowConfigClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// CustomerSubjects is the client for interacting with the CustomerSubjects builders.
	CustomerSubjects *CustomerSubjectsClient
	// Entitlement is the client for interacting with the Entitlement builders.
	Entitlement *EntitlementClient
	// Feature is the client for interacting with the Feature builders.
	Feature *FeatureClient
	// Grant is the client for interacting with the Grant builders.
	Grant *GrantClient
	// NotificationChannel is the client for interacting with the NotificationChannel builders.
	NotificationChannel *NotificationChannelClient
	// NotificationEvent is the client for interacting with the NotificationEvent builders.
	NotificationEvent *NotificationEventClient
	// NotificationEventDeliveryStatus is the client for interacting with the NotificationEventDeliveryStatus builders.
	NotificationEventDeliveryStatus *NotificationEventDeliveryStatusClient
	// NotificationRule is the client for interacting with the NotificationRule builders.
	NotificationRule *NotificationRuleClient
	// UsageReset is the client for interacting with the UsageReset builders.
	UsageReset *UsageResetClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.App = NewAppClient(c.config)
	c.BalanceSnapshot = NewBalanceSnapshotClient(c.config)
	c.BillingCustomerOverride = NewBillingCustomerOverrideClient(c.config)
	c.BillingInvoice = NewBillingInvoiceClient(c.config)
	c.BillingInvoiceItem = NewBillingInvoiceItemClient(c.config)
	c.BillingProfile = NewBillingProfileClient(c.config)
	c.BillingWorkflowConfig = NewBillingWorkflowConfigClient(c.config)
	c.Customer = NewCustomerClient(c.config)
	c.CustomerSubjects = NewCustomerSubjectsClient(c.config)
	c.Entitlement = NewEntitlementClient(c.config)
	c.Feature = NewFeatureClient(c.config)
	c.Grant = NewGrantClient(c.config)
	c.NotificationChannel = NewNotificationChannelClient(c.config)
	c.NotificationEvent = NewNotificationEventClient(c.config)
	c.NotificationEventDeliveryStatus = NewNotificationEventDeliveryStatusClient(c.config)
	c.NotificationRule = NewNotificationRuleClient(c.config)
	c.UsageReset = NewUsageResetClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("db: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("db: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                             ctx,
		config:                          cfg,
		App:                             NewAppClient(cfg),
		BalanceSnapshot:                 NewBalanceSnapshotClient(cfg),
		BillingCustomerOverride:         NewBillingCustomerOverrideClient(cfg),
		BillingInvoice:                  NewBillingInvoiceClient(cfg),
		BillingInvoiceItem:              NewBillingInvoiceItemClient(cfg),
		BillingProfile:                  NewBillingProfileClient(cfg),
		BillingWorkflowConfig:           NewBillingWorkflowConfigClient(cfg),
		Customer:                        NewCustomerClient(cfg),
		CustomerSubjects:                NewCustomerSubjectsClient(cfg),
		Entitlement:                     NewEntitlementClient(cfg),
		Feature:                         NewFeatureClient(cfg),
		Grant:                           NewGrantClient(cfg),
		NotificationChannel:             NewNotificationChannelClient(cfg),
		NotificationEvent:               NewNotificationEventClient(cfg),
		NotificationEventDeliveryStatus: NewNotificationEventDeliveryStatusClient(cfg),
		NotificationRule:                NewNotificationRuleClient(cfg),
		UsageReset:                      NewUsageResetClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                             ctx,
		config:                          cfg,
		App:                             NewAppClient(cfg),
		BalanceSnapshot:                 NewBalanceSnapshotClient(cfg),
		BillingCustomerOverride:         NewBillingCustomerOverrideClient(cfg),
		BillingInvoice:                  NewBillingInvoiceClient(cfg),
		BillingInvoiceItem:              NewBillingInvoiceItemClient(cfg),
		BillingProfile:                  NewBillingProfileClient(cfg),
		BillingWorkflowConfig:           NewBillingWorkflowConfigClient(cfg),
		Customer:                        NewCustomerClient(cfg),
		CustomerSubjects:                NewCustomerSubjectsClient(cfg),
		Entitlement:                     NewEntitlementClient(cfg),
		Feature:                         NewFeatureClient(cfg),
		Grant:                           NewGrantClient(cfg),
		NotificationChannel:             NewNotificationChannelClient(cfg),
		NotificationEvent:               NewNotificationEventClient(cfg),
		NotificationEventDeliveryStatus: NewNotificationEventDeliveryStatusClient(cfg),
		NotificationRule:                NewNotificationRuleClient(cfg),
		UsageReset:                      NewUsageResetClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		App.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.App, c.BalanceSnapshot, c.BillingCustomerOverride, c.BillingInvoice,
		c.BillingInvoiceItem, c.BillingProfile, c.BillingWorkflowConfig, c.Customer,
		c.CustomerSubjects, c.Entitlement, c.Feature, c.Grant, c.NotificationChannel,
		c.NotificationEvent, c.NotificationEventDeliveryStatus, c.NotificationRule,
		c.UsageReset,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.App, c.BalanceSnapshot, c.BillingCustomerOverride, c.BillingInvoice,
		c.BillingInvoiceItem, c.BillingProfile, c.BillingWorkflowConfig, c.Customer,
		c.CustomerSubjects, c.Entitlement, c.Feature, c.Grant, c.NotificationChannel,
		c.NotificationEvent, c.NotificationEventDeliveryStatus, c.NotificationRule,
		c.UsageReset,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AppMutation:
		return c.App.mutate(ctx, m)
	case *BalanceSnapshotMutation:
		return c.BalanceSnapshot.mutate(ctx, m)
	case *BillingCustomerOverrideMutation:
		return c.BillingCustomerOverride.mutate(ctx, m)
	case *BillingInvoiceMutation:
		return c.BillingInvoice.mutate(ctx, m)
	case *BillingInvoiceItemMutation:
		return c.BillingInvoiceItem.mutate(ctx, m)
	case *BillingProfileMutation:
		return c.BillingProfile.mutate(ctx, m)
	case *BillingWorkflowConfigMutation:
		return c.BillingWorkflowConfig.mutate(ctx, m)
	case *CustomerMutation:
		return c.Customer.mutate(ctx, m)
	case *CustomerSubjectsMutation:
		return c.CustomerSubjects.mutate(ctx, m)
	case *EntitlementMutation:
		return c.Entitlement.mutate(ctx, m)
	case *FeatureMutation:
		return c.Feature.mutate(ctx, m)
	case *GrantMutation:
		return c.Grant.mutate(ctx, m)
	case *NotificationChannelMutation:
		return c.NotificationChannel.mutate(ctx, m)
	case *NotificationEventMutation:
		return c.NotificationEvent.mutate(ctx, m)
	case *NotificationEventDeliveryStatusMutation:
		return c.NotificationEventDeliveryStatus.mutate(ctx, m)
	case *NotificationRuleMutation:
		return c.NotificationRule.mutate(ctx, m)
	case *UsageResetMutation:
		return c.UsageReset.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("db: unknown mutation type %T", m)
	}
}

// AppClient is a client for the App schema.
type AppClient struct {
	config
}

// NewAppClient returns a client for the App from the given config.
func NewAppClient(c config) *AppClient {
	return &AppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dbapp.Hooks(f(g(h())))`.
func (c *AppClient) Use(hooks ...Hook) {
	c.hooks.App = append(c.hooks.App, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dbapp.Intercept(f(g(h())))`.
func (c *AppClient) Intercept(interceptors ...Interceptor) {
	c.inters.App = append(c.inters.App, interceptors...)
}

// Create returns a builder for creating a App entity.
func (c *AppClient) Create() *AppCreate {
	mutation := newAppMutation(c.config, OpCreate)
	return &AppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of App entities.
func (c *AppClient) CreateBulk(builders ...*AppCreate) *AppCreateBulk {
	return &AppCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppClient) MapCreateBulk(slice any, setFunc func(*AppCreate, int)) *AppCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppCreateBulk{err: fmt.Errorf("calling to AppClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for App.
func (c *AppClient) Update() *AppUpdate {
	mutation := newAppMutation(c.config, OpUpdate)
	return &AppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppClient) UpdateOne(a *App) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withApp(a))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppClient) UpdateOneID(id string) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withAppID(id))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for App.
func (c *AppClient) Delete() *AppDelete {
	mutation := newAppMutation(c.config, OpDelete)
	return &AppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppClient) DeleteOne(a *App) *AppDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppClient) DeleteOneID(id string) *AppDeleteOne {
	builder := c.Delete().Where(dbapp.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppDeleteOne{builder}
}

// Query returns a query builder for App.
func (c *AppClient) Query() *AppQuery {
	return &AppQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApp},
		inters: c.Interceptors(),
	}
}

// Get returns a App entity by its id.
func (c *AppClient) Get(ctx context.Context, id string) (*App, error) {
	return c.Query().Where(dbapp.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppClient) GetX(ctx context.Context, id string) *App {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppClient) Hooks() []Hook {
	return c.hooks.App
}

// Interceptors returns the client interceptors.
func (c *AppClient) Interceptors() []Interceptor {
	return c.inters.App
}

func (c *AppClient) mutate(ctx context.Context, m *AppMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown App mutation op: %q", m.Op())
	}
}

// BalanceSnapshotClient is a client for the BalanceSnapshot schema.
type BalanceSnapshotClient struct {
	config
}

// NewBalanceSnapshotClient returns a client for the BalanceSnapshot from the given config.
func NewBalanceSnapshotClient(c config) *BalanceSnapshotClient {
	return &BalanceSnapshotClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `balancesnapshot.Hooks(f(g(h())))`.
func (c *BalanceSnapshotClient) Use(hooks ...Hook) {
	c.hooks.BalanceSnapshot = append(c.hooks.BalanceSnapshot, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `balancesnapshot.Intercept(f(g(h())))`.
func (c *BalanceSnapshotClient) Intercept(interceptors ...Interceptor) {
	c.inters.BalanceSnapshot = append(c.inters.BalanceSnapshot, interceptors...)
}

// Create returns a builder for creating a BalanceSnapshot entity.
func (c *BalanceSnapshotClient) Create() *BalanceSnapshotCreate {
	mutation := newBalanceSnapshotMutation(c.config, OpCreate)
	return &BalanceSnapshotCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BalanceSnapshot entities.
func (c *BalanceSnapshotClient) CreateBulk(builders ...*BalanceSnapshotCreate) *BalanceSnapshotCreateBulk {
	return &BalanceSnapshotCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BalanceSnapshotClient) MapCreateBulk(slice any, setFunc func(*BalanceSnapshotCreate, int)) *BalanceSnapshotCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BalanceSnapshotCreateBulk{err: fmt.Errorf("calling to BalanceSnapshotClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BalanceSnapshotCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BalanceSnapshotCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BalanceSnapshot.
func (c *BalanceSnapshotClient) Update() *BalanceSnapshotUpdate {
	mutation := newBalanceSnapshotMutation(c.config, OpUpdate)
	return &BalanceSnapshotUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BalanceSnapshotClient) UpdateOne(bs *BalanceSnapshot) *BalanceSnapshotUpdateOne {
	mutation := newBalanceSnapshotMutation(c.config, OpUpdateOne, withBalanceSnapshot(bs))
	return &BalanceSnapshotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BalanceSnapshotClient) UpdateOneID(id int) *BalanceSnapshotUpdateOne {
	mutation := newBalanceSnapshotMutation(c.config, OpUpdateOne, withBalanceSnapshotID(id))
	return &BalanceSnapshotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BalanceSnapshot.
func (c *BalanceSnapshotClient) Delete() *BalanceSnapshotDelete {
	mutation := newBalanceSnapshotMutation(c.config, OpDelete)
	return &BalanceSnapshotDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BalanceSnapshotClient) DeleteOne(bs *BalanceSnapshot) *BalanceSnapshotDeleteOne {
	return c.DeleteOneID(bs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BalanceSnapshotClient) DeleteOneID(id int) *BalanceSnapshotDeleteOne {
	builder := c.Delete().Where(balancesnapshot.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BalanceSnapshotDeleteOne{builder}
}

// Query returns a query builder for BalanceSnapshot.
func (c *BalanceSnapshotClient) Query() *BalanceSnapshotQuery {
	return &BalanceSnapshotQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBalanceSnapshot},
		inters: c.Interceptors(),
	}
}

// Get returns a BalanceSnapshot entity by its id.
func (c *BalanceSnapshotClient) Get(ctx context.Context, id int) (*BalanceSnapshot, error) {
	return c.Query().Where(balancesnapshot.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BalanceSnapshotClient) GetX(ctx context.Context, id int) *BalanceSnapshot {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEntitlement queries the entitlement edge of a BalanceSnapshot.
func (c *BalanceSnapshotClient) QueryEntitlement(bs *BalanceSnapshot) *EntitlementQuery {
	query := (&EntitlementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(balancesnapshot.Table, balancesnapshot.FieldID, id),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, balancesnapshot.EntitlementTable, balancesnapshot.EntitlementColumn),
		)
		fromV = sqlgraph.Neighbors(bs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BalanceSnapshotClient) Hooks() []Hook {
	return c.hooks.BalanceSnapshot
}

// Interceptors returns the client interceptors.
func (c *BalanceSnapshotClient) Interceptors() []Interceptor {
	return c.inters.BalanceSnapshot
}

func (c *BalanceSnapshotClient) mutate(ctx context.Context, m *BalanceSnapshotMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BalanceSnapshotCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BalanceSnapshotUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BalanceSnapshotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BalanceSnapshotDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BalanceSnapshot mutation op: %q", m.Op())
	}
}

// BillingCustomerOverrideClient is a client for the BillingCustomerOverride schema.
type BillingCustomerOverrideClient struct {
	config
}

// NewBillingCustomerOverrideClient returns a client for the BillingCustomerOverride from the given config.
func NewBillingCustomerOverrideClient(c config) *BillingCustomerOverrideClient {
	return &BillingCustomerOverrideClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billingcustomeroverride.Hooks(f(g(h())))`.
func (c *BillingCustomerOverrideClient) Use(hooks ...Hook) {
	c.hooks.BillingCustomerOverride = append(c.hooks.BillingCustomerOverride, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billingcustomeroverride.Intercept(f(g(h())))`.
func (c *BillingCustomerOverrideClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingCustomerOverride = append(c.inters.BillingCustomerOverride, interceptors...)
}

// Create returns a builder for creating a BillingCustomerOverride entity.
func (c *BillingCustomerOverrideClient) Create() *BillingCustomerOverrideCreate {
	mutation := newBillingCustomerOverrideMutation(c.config, OpCreate)
	return &BillingCustomerOverrideCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingCustomerOverride entities.
func (c *BillingCustomerOverrideClient) CreateBulk(builders ...*BillingCustomerOverrideCreate) *BillingCustomerOverrideCreateBulk {
	return &BillingCustomerOverrideCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingCustomerOverrideClient) MapCreateBulk(slice any, setFunc func(*BillingCustomerOverrideCreate, int)) *BillingCustomerOverrideCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingCustomerOverrideCreateBulk{err: fmt.Errorf("calling to BillingCustomerOverrideClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingCustomerOverrideCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingCustomerOverrideCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingCustomerOverride.
func (c *BillingCustomerOverrideClient) Update() *BillingCustomerOverrideUpdate {
	mutation := newBillingCustomerOverrideMutation(c.config, OpUpdate)
	return &BillingCustomerOverrideUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingCustomerOverrideClient) UpdateOne(bco *BillingCustomerOverride) *BillingCustomerOverrideUpdateOne {
	mutation := newBillingCustomerOverrideMutation(c.config, OpUpdateOne, withBillingCustomerOverride(bco))
	return &BillingCustomerOverrideUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingCustomerOverrideClient) UpdateOneID(id string) *BillingCustomerOverrideUpdateOne {
	mutation := newBillingCustomerOverrideMutation(c.config, OpUpdateOne, withBillingCustomerOverrideID(id))
	return &BillingCustomerOverrideUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingCustomerOverride.
func (c *BillingCustomerOverrideClient) Delete() *BillingCustomerOverrideDelete {
	mutation := newBillingCustomerOverrideMutation(c.config, OpDelete)
	return &BillingCustomerOverrideDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingCustomerOverrideClient) DeleteOne(bco *BillingCustomerOverride) *BillingCustomerOverrideDeleteOne {
	return c.DeleteOneID(bco.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingCustomerOverrideClient) DeleteOneID(id string) *BillingCustomerOverrideDeleteOne {
	builder := c.Delete().Where(billingcustomeroverride.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingCustomerOverrideDeleteOne{builder}
}

// Query returns a query builder for BillingCustomerOverride.
func (c *BillingCustomerOverrideClient) Query() *BillingCustomerOverrideQuery {
	return &BillingCustomerOverrideQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingCustomerOverride},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingCustomerOverride entity by its id.
func (c *BillingCustomerOverrideClient) Get(ctx context.Context, id string) (*BillingCustomerOverride, error) {
	return c.Query().Where(billingcustomeroverride.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingCustomerOverrideClient) GetX(ctx context.Context, id string) *BillingCustomerOverride {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCustomer queries the customer edge of a BillingCustomerOverride.
func (c *BillingCustomerOverrideClient) QueryCustomer(bco *BillingCustomerOverride) *CustomerQuery {
	query := (&CustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bco.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingcustomeroverride.Table, billingcustomeroverride.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, billingcustomeroverride.CustomerTable, billingcustomeroverride.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(bco.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingProfile queries the billing_profile edge of a BillingCustomerOverride.
func (c *BillingCustomerOverrideClient) QueryBillingProfile(bco *BillingCustomerOverride) *BillingProfileQuery {
	query := (&BillingProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bco.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingcustomeroverride.Table, billingcustomeroverride.FieldID, id),
			sqlgraph.To(billingprofile.Table, billingprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billingcustomeroverride.BillingProfileTable, billingcustomeroverride.BillingProfileColumn),
		)
		fromV = sqlgraph.Neighbors(bco.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingCustomerOverrideClient) Hooks() []Hook {
	return c.hooks.BillingCustomerOverride
}

// Interceptors returns the client interceptors.
func (c *BillingCustomerOverrideClient) Interceptors() []Interceptor {
	return c.inters.BillingCustomerOverride
}

func (c *BillingCustomerOverrideClient) mutate(ctx context.Context, m *BillingCustomerOverrideMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingCustomerOverrideCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingCustomerOverrideUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingCustomerOverrideUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingCustomerOverrideDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingCustomerOverride mutation op: %q", m.Op())
	}
}

// BillingInvoiceClient is a client for the BillingInvoice schema.
type BillingInvoiceClient struct {
	config
}

// NewBillingInvoiceClient returns a client for the BillingInvoice from the given config.
func NewBillingInvoiceClient(c config) *BillingInvoiceClient {
	return &BillingInvoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billinginvoice.Hooks(f(g(h())))`.
func (c *BillingInvoiceClient) Use(hooks ...Hook) {
	c.hooks.BillingInvoice = append(c.hooks.BillingInvoice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billinginvoice.Intercept(f(g(h())))`.
func (c *BillingInvoiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingInvoice = append(c.inters.BillingInvoice, interceptors...)
}

// Create returns a builder for creating a BillingInvoice entity.
func (c *BillingInvoiceClient) Create() *BillingInvoiceCreate {
	mutation := newBillingInvoiceMutation(c.config, OpCreate)
	return &BillingInvoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingInvoice entities.
func (c *BillingInvoiceClient) CreateBulk(builders ...*BillingInvoiceCreate) *BillingInvoiceCreateBulk {
	return &BillingInvoiceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingInvoiceClient) MapCreateBulk(slice any, setFunc func(*BillingInvoiceCreate, int)) *BillingInvoiceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingInvoiceCreateBulk{err: fmt.Errorf("calling to BillingInvoiceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingInvoiceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingInvoiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingInvoice.
func (c *BillingInvoiceClient) Update() *BillingInvoiceUpdate {
	mutation := newBillingInvoiceMutation(c.config, OpUpdate)
	return &BillingInvoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingInvoiceClient) UpdateOne(bi *BillingInvoice) *BillingInvoiceUpdateOne {
	mutation := newBillingInvoiceMutation(c.config, OpUpdateOne, withBillingInvoice(bi))
	return &BillingInvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingInvoiceClient) UpdateOneID(id string) *BillingInvoiceUpdateOne {
	mutation := newBillingInvoiceMutation(c.config, OpUpdateOne, withBillingInvoiceID(id))
	return &BillingInvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingInvoice.
func (c *BillingInvoiceClient) Delete() *BillingInvoiceDelete {
	mutation := newBillingInvoiceMutation(c.config, OpDelete)
	return &BillingInvoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingInvoiceClient) DeleteOne(bi *BillingInvoice) *BillingInvoiceDeleteOne {
	return c.DeleteOneID(bi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingInvoiceClient) DeleteOneID(id string) *BillingInvoiceDeleteOne {
	builder := c.Delete().Where(billinginvoice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingInvoiceDeleteOne{builder}
}

// Query returns a query builder for BillingInvoice.
func (c *BillingInvoiceClient) Query() *BillingInvoiceQuery {
	return &BillingInvoiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingInvoice},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingInvoice entity by its id.
func (c *BillingInvoiceClient) Get(ctx context.Context, id string) (*BillingInvoice, error) {
	return c.Query().Where(billinginvoice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingInvoiceClient) GetX(ctx context.Context, id string) *BillingInvoice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBillingProfile queries the billing_profile edge of a BillingInvoice.
func (c *BillingInvoiceClient) QueryBillingProfile(bi *BillingInvoice) *BillingProfileQuery {
	query := (&BillingProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoice.Table, billinginvoice.FieldID, id),
			sqlgraph.To(billingprofile.Table, billingprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billinginvoice.BillingProfileTable, billinginvoice.BillingProfileColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingWorkflowConfig queries the billing_workflow_config edge of a BillingInvoice.
func (c *BillingInvoiceClient) QueryBillingWorkflowConfig(bi *BillingInvoice) *BillingWorkflowConfigQuery {
	query := (&BillingWorkflowConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoice.Table, billinginvoice.FieldID, id),
			sqlgraph.To(billingworkflowconfig.Table, billingworkflowconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, billinginvoice.BillingWorkflowConfigTable, billinginvoice.BillingWorkflowConfigColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingInvoiceItems queries the billing_invoice_items edge of a BillingInvoice.
func (c *BillingInvoiceClient) QueryBillingInvoiceItems(bi *BillingInvoice) *BillingInvoiceItemQuery {
	query := (&BillingInvoiceItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoice.Table, billinginvoice.FieldID, id),
			sqlgraph.To(billinginvoiceitem.Table, billinginvoiceitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, billinginvoice.BillingInvoiceItemsTable, billinginvoice.BillingInvoiceItemsColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingInvoiceClient) Hooks() []Hook {
	return c.hooks.BillingInvoice
}

// Interceptors returns the client interceptors.
func (c *BillingInvoiceClient) Interceptors() []Interceptor {
	return c.inters.BillingInvoice
}

func (c *BillingInvoiceClient) mutate(ctx context.Context, m *BillingInvoiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingInvoiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingInvoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingInvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingInvoiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingInvoice mutation op: %q", m.Op())
	}
}

// BillingInvoiceItemClient is a client for the BillingInvoiceItem schema.
type BillingInvoiceItemClient struct {
	config
}

// NewBillingInvoiceItemClient returns a client for the BillingInvoiceItem from the given config.
func NewBillingInvoiceItemClient(c config) *BillingInvoiceItemClient {
	return &BillingInvoiceItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billinginvoiceitem.Hooks(f(g(h())))`.
func (c *BillingInvoiceItemClient) Use(hooks ...Hook) {
	c.hooks.BillingInvoiceItem = append(c.hooks.BillingInvoiceItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billinginvoiceitem.Intercept(f(g(h())))`.
func (c *BillingInvoiceItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingInvoiceItem = append(c.inters.BillingInvoiceItem, interceptors...)
}

// Create returns a builder for creating a BillingInvoiceItem entity.
func (c *BillingInvoiceItemClient) Create() *BillingInvoiceItemCreate {
	mutation := newBillingInvoiceItemMutation(c.config, OpCreate)
	return &BillingInvoiceItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingInvoiceItem entities.
func (c *BillingInvoiceItemClient) CreateBulk(builders ...*BillingInvoiceItemCreate) *BillingInvoiceItemCreateBulk {
	return &BillingInvoiceItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingInvoiceItemClient) MapCreateBulk(slice any, setFunc func(*BillingInvoiceItemCreate, int)) *BillingInvoiceItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingInvoiceItemCreateBulk{err: fmt.Errorf("calling to BillingInvoiceItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingInvoiceItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingInvoiceItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingInvoiceItem.
func (c *BillingInvoiceItemClient) Update() *BillingInvoiceItemUpdate {
	mutation := newBillingInvoiceItemMutation(c.config, OpUpdate)
	return &BillingInvoiceItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingInvoiceItemClient) UpdateOne(bii *BillingInvoiceItem) *BillingInvoiceItemUpdateOne {
	mutation := newBillingInvoiceItemMutation(c.config, OpUpdateOne, withBillingInvoiceItem(bii))
	return &BillingInvoiceItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingInvoiceItemClient) UpdateOneID(id string) *BillingInvoiceItemUpdateOne {
	mutation := newBillingInvoiceItemMutation(c.config, OpUpdateOne, withBillingInvoiceItemID(id))
	return &BillingInvoiceItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingInvoiceItem.
func (c *BillingInvoiceItemClient) Delete() *BillingInvoiceItemDelete {
	mutation := newBillingInvoiceItemMutation(c.config, OpDelete)
	return &BillingInvoiceItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingInvoiceItemClient) DeleteOne(bii *BillingInvoiceItem) *BillingInvoiceItemDeleteOne {
	return c.DeleteOneID(bii.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingInvoiceItemClient) DeleteOneID(id string) *BillingInvoiceItemDeleteOne {
	builder := c.Delete().Where(billinginvoiceitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingInvoiceItemDeleteOne{builder}
}

// Query returns a query builder for BillingInvoiceItem.
func (c *BillingInvoiceItemClient) Query() *BillingInvoiceItemQuery {
	return &BillingInvoiceItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingInvoiceItem},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingInvoiceItem entity by its id.
func (c *BillingInvoiceItemClient) Get(ctx context.Context, id string) (*BillingInvoiceItem, error) {
	return c.Query().Where(billinginvoiceitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingInvoiceItemClient) GetX(ctx context.Context, id string) *BillingInvoiceItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBillingInvoice queries the billing_invoice edge of a BillingInvoiceItem.
func (c *BillingInvoiceItemClient) QueryBillingInvoice(bii *BillingInvoiceItem) *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bii.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billinginvoiceitem.Table, billinginvoiceitem.FieldID, id),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, billinginvoiceitem.BillingInvoiceTable, billinginvoiceitem.BillingInvoiceColumn),
		)
		fromV = sqlgraph.Neighbors(bii.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingInvoiceItemClient) Hooks() []Hook {
	return c.hooks.BillingInvoiceItem
}

// Interceptors returns the client interceptors.
func (c *BillingInvoiceItemClient) Interceptors() []Interceptor {
	return c.inters.BillingInvoiceItem
}

func (c *BillingInvoiceItemClient) mutate(ctx context.Context, m *BillingInvoiceItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingInvoiceItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingInvoiceItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingInvoiceItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingInvoiceItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingInvoiceItem mutation op: %q", m.Op())
	}
}

// BillingProfileClient is a client for the BillingProfile schema.
type BillingProfileClient struct {
	config
}

// NewBillingProfileClient returns a client for the BillingProfile from the given config.
func NewBillingProfileClient(c config) *BillingProfileClient {
	return &BillingProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billingprofile.Hooks(f(g(h())))`.
func (c *BillingProfileClient) Use(hooks ...Hook) {
	c.hooks.BillingProfile = append(c.hooks.BillingProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billingprofile.Intercept(f(g(h())))`.
func (c *BillingProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingProfile = append(c.inters.BillingProfile, interceptors...)
}

// Create returns a builder for creating a BillingProfile entity.
func (c *BillingProfileClient) Create() *BillingProfileCreate {
	mutation := newBillingProfileMutation(c.config, OpCreate)
	return &BillingProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingProfile entities.
func (c *BillingProfileClient) CreateBulk(builders ...*BillingProfileCreate) *BillingProfileCreateBulk {
	return &BillingProfileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingProfileClient) MapCreateBulk(slice any, setFunc func(*BillingProfileCreate, int)) *BillingProfileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingProfileCreateBulk{err: fmt.Errorf("calling to BillingProfileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingProfileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingProfile.
func (c *BillingProfileClient) Update() *BillingProfileUpdate {
	mutation := newBillingProfileMutation(c.config, OpUpdate)
	return &BillingProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingProfileClient) UpdateOne(bp *BillingProfile) *BillingProfileUpdateOne {
	mutation := newBillingProfileMutation(c.config, OpUpdateOne, withBillingProfile(bp))
	return &BillingProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingProfileClient) UpdateOneID(id string) *BillingProfileUpdateOne {
	mutation := newBillingProfileMutation(c.config, OpUpdateOne, withBillingProfileID(id))
	return &BillingProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingProfile.
func (c *BillingProfileClient) Delete() *BillingProfileDelete {
	mutation := newBillingProfileMutation(c.config, OpDelete)
	return &BillingProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingProfileClient) DeleteOne(bp *BillingProfile) *BillingProfileDeleteOne {
	return c.DeleteOneID(bp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingProfileClient) DeleteOneID(id string) *BillingProfileDeleteOne {
	builder := c.Delete().Where(billingprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingProfileDeleteOne{builder}
}

// Query returns a query builder for BillingProfile.
func (c *BillingProfileClient) Query() *BillingProfileQuery {
	return &BillingProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingProfile entity by its id.
func (c *BillingProfileClient) Get(ctx context.Context, id string) (*BillingProfile, error) {
	return c.Query().Where(billingprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingProfileClient) GetX(ctx context.Context, id string) *BillingProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBillingInvoices queries the billing_invoices edge of a BillingProfile.
func (c *BillingProfileClient) QueryBillingInvoices(bp *BillingProfile) *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingprofile.Table, billingprofile.FieldID, id),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, billingprofile.BillingInvoicesTable, billingprofile.BillingInvoicesColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingCustomerOverride queries the billing_customer_override edge of a BillingProfile.
func (c *BillingProfileClient) QueryBillingCustomerOverride(bp *BillingProfile) *BillingCustomerOverrideQuery {
	query := (&BillingCustomerOverrideClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingprofile.Table, billingprofile.FieldID, id),
			sqlgraph.To(billingcustomeroverride.Table, billingcustomeroverride.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, billingprofile.BillingCustomerOverrideTable, billingprofile.BillingCustomerOverrideColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkflowConfig queries the workflow_config edge of a BillingProfile.
func (c *BillingProfileClient) QueryWorkflowConfig(bp *BillingProfile) *BillingWorkflowConfigQuery {
	query := (&BillingWorkflowConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingprofile.Table, billingprofile.FieldID, id),
			sqlgraph.To(billingworkflowconfig.Table, billingworkflowconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, billingprofile.WorkflowConfigTable, billingprofile.WorkflowConfigColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingProfileClient) Hooks() []Hook {
	return c.hooks.BillingProfile
}

// Interceptors returns the client interceptors.
func (c *BillingProfileClient) Interceptors() []Interceptor {
	return c.inters.BillingProfile
}

func (c *BillingProfileClient) mutate(ctx context.Context, m *BillingProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingProfile mutation op: %q", m.Op())
	}
}

// BillingWorkflowConfigClient is a client for the BillingWorkflowConfig schema.
type BillingWorkflowConfigClient struct {
	config
}

// NewBillingWorkflowConfigClient returns a client for the BillingWorkflowConfig from the given config.
func NewBillingWorkflowConfigClient(c config) *BillingWorkflowConfigClient {
	return &BillingWorkflowConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billingworkflowconfig.Hooks(f(g(h())))`.
func (c *BillingWorkflowConfigClient) Use(hooks ...Hook) {
	c.hooks.BillingWorkflowConfig = append(c.hooks.BillingWorkflowConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billingworkflowconfig.Intercept(f(g(h())))`.
func (c *BillingWorkflowConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingWorkflowConfig = append(c.inters.BillingWorkflowConfig, interceptors...)
}

// Create returns a builder for creating a BillingWorkflowConfig entity.
func (c *BillingWorkflowConfigClient) Create() *BillingWorkflowConfigCreate {
	mutation := newBillingWorkflowConfigMutation(c.config, OpCreate)
	return &BillingWorkflowConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingWorkflowConfig entities.
func (c *BillingWorkflowConfigClient) CreateBulk(builders ...*BillingWorkflowConfigCreate) *BillingWorkflowConfigCreateBulk {
	return &BillingWorkflowConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingWorkflowConfigClient) MapCreateBulk(slice any, setFunc func(*BillingWorkflowConfigCreate, int)) *BillingWorkflowConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingWorkflowConfigCreateBulk{err: fmt.Errorf("calling to BillingWorkflowConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingWorkflowConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingWorkflowConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingWorkflowConfig.
func (c *BillingWorkflowConfigClient) Update() *BillingWorkflowConfigUpdate {
	mutation := newBillingWorkflowConfigMutation(c.config, OpUpdate)
	return &BillingWorkflowConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingWorkflowConfigClient) UpdateOne(bwc *BillingWorkflowConfig) *BillingWorkflowConfigUpdateOne {
	mutation := newBillingWorkflowConfigMutation(c.config, OpUpdateOne, withBillingWorkflowConfig(bwc))
	return &BillingWorkflowConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingWorkflowConfigClient) UpdateOneID(id string) *BillingWorkflowConfigUpdateOne {
	mutation := newBillingWorkflowConfigMutation(c.config, OpUpdateOne, withBillingWorkflowConfigID(id))
	return &BillingWorkflowConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingWorkflowConfig.
func (c *BillingWorkflowConfigClient) Delete() *BillingWorkflowConfigDelete {
	mutation := newBillingWorkflowConfigMutation(c.config, OpDelete)
	return &BillingWorkflowConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingWorkflowConfigClient) DeleteOne(bwc *BillingWorkflowConfig) *BillingWorkflowConfigDeleteOne {
	return c.DeleteOneID(bwc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingWorkflowConfigClient) DeleteOneID(id string) *BillingWorkflowConfigDeleteOne {
	builder := c.Delete().Where(billingworkflowconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingWorkflowConfigDeleteOne{builder}
}

// Query returns a query builder for BillingWorkflowConfig.
func (c *BillingWorkflowConfigClient) Query() *BillingWorkflowConfigQuery {
	return &BillingWorkflowConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingWorkflowConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingWorkflowConfig entity by its id.
func (c *BillingWorkflowConfigClient) Get(ctx context.Context, id string) (*BillingWorkflowConfig, error) {
	return c.Query().Where(billingworkflowconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingWorkflowConfigClient) GetX(ctx context.Context, id string) *BillingWorkflowConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBillingInvoices queries the billing_invoices edge of a BillingWorkflowConfig.
func (c *BillingWorkflowConfigClient) QueryBillingInvoices(bwc *BillingWorkflowConfig) *BillingInvoiceQuery {
	query := (&BillingInvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bwc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingworkflowconfig.Table, billingworkflowconfig.FieldID, id),
			sqlgraph.To(billinginvoice.Table, billinginvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, billingworkflowconfig.BillingInvoicesTable, billingworkflowconfig.BillingInvoicesColumn),
		)
		fromV = sqlgraph.Neighbors(bwc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingProfile queries the billing_profile edge of a BillingWorkflowConfig.
func (c *BillingWorkflowConfigClient) QueryBillingProfile(bwc *BillingWorkflowConfig) *BillingProfileQuery {
	query := (&BillingProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bwc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingworkflowconfig.Table, billingworkflowconfig.FieldID, id),
			sqlgraph.To(billingprofile.Table, billingprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, billingworkflowconfig.BillingProfileTable, billingworkflowconfig.BillingProfileColumn),
		)
		fromV = sqlgraph.Neighbors(bwc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingWorkflowConfigClient) Hooks() []Hook {
	return c.hooks.BillingWorkflowConfig
}

// Interceptors returns the client interceptors.
func (c *BillingWorkflowConfigClient) Interceptors() []Interceptor {
	return c.inters.BillingWorkflowConfig
}

func (c *BillingWorkflowConfigClient) mutate(ctx context.Context, m *BillingWorkflowConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingWorkflowConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingWorkflowConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingWorkflowConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingWorkflowConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown BillingWorkflowConfig mutation op: %q", m.Op())
	}
}

// CustomerClient is a client for the Customer schema.
type CustomerClient struct {
	config
}

// NewCustomerClient returns a client for the Customer from the given config.
func NewCustomerClient(c config) *CustomerClient {
	return &CustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customer.Hooks(f(g(h())))`.
func (c *CustomerClient) Use(hooks ...Hook) {
	c.hooks.Customer = append(c.hooks.Customer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `customer.Intercept(f(g(h())))`.
func (c *CustomerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Customer = append(c.inters.Customer, interceptors...)
}

// Create returns a builder for creating a Customer entity.
func (c *CustomerClient) Create() *CustomerCreate {
	mutation := newCustomerMutation(c.config, OpCreate)
	return &CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Customer entities.
func (c *CustomerClient) CreateBulk(builders ...*CustomerCreate) *CustomerCreateBulk {
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CustomerClient) MapCreateBulk(slice any, setFunc func(*CustomerCreate, int)) *CustomerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CustomerCreateBulk{err: fmt.Errorf("calling to CustomerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CustomerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Customer.
func (c *CustomerClient) Update() *CustomerUpdate {
	mutation := newCustomerMutation(c.config, OpUpdate)
	return &CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerClient) UpdateOne(cu *Customer) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomer(cu))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerClient) UpdateOneID(id string) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomerID(id))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Customer.
func (c *CustomerClient) Delete() *CustomerDelete {
	mutation := newCustomerMutation(c.config, OpDelete)
	return &CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CustomerClient) DeleteOne(cu *Customer) *CustomerDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CustomerClient) DeleteOneID(id string) *CustomerDeleteOne {
	builder := c.Delete().Where(customer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerDeleteOne{builder}
}

// Query returns a query builder for Customer.
func (c *CustomerClient) Query() *CustomerQuery {
	return &CustomerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCustomer},
		inters: c.Interceptors(),
	}
}

// Get returns a Customer entity by its id.
func (c *CustomerClient) Get(ctx context.Context, id string) (*Customer, error) {
	return c.Query().Where(customer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerClient) GetX(ctx context.Context, id string) *Customer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubjects queries the subjects edge of a Customer.
func (c *CustomerClient) QuerySubjects(cu *Customer) *CustomerSubjectsQuery {
	query := (&CustomerSubjectsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(customersubjects.Table, customersubjects.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.SubjectsTable, customer.SubjectsColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingCustomerOverride queries the billing_customer_override edge of a Customer.
func (c *CustomerClient) QueryBillingCustomerOverride(cu *Customer) *BillingCustomerOverrideQuery {
	query := (&BillingCustomerOverrideClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(billingcustomeroverride.Table, billingcustomeroverride.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, customer.BillingCustomerOverrideTable, customer.BillingCustomerOverrideColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerClient) Hooks() []Hook {
	return c.hooks.Customer
}

// Interceptors returns the client interceptors.
func (c *CustomerClient) Interceptors() []Interceptor {
	return c.inters.Customer
}

func (c *CustomerClient) mutate(ctx context.Context, m *CustomerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Customer mutation op: %q", m.Op())
	}
}

// CustomerSubjectsClient is a client for the CustomerSubjects schema.
type CustomerSubjectsClient struct {
	config
}

// NewCustomerSubjectsClient returns a client for the CustomerSubjects from the given config.
func NewCustomerSubjectsClient(c config) *CustomerSubjectsClient {
	return &CustomerSubjectsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customersubjects.Hooks(f(g(h())))`.
func (c *CustomerSubjectsClient) Use(hooks ...Hook) {
	c.hooks.CustomerSubjects = append(c.hooks.CustomerSubjects, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `customersubjects.Intercept(f(g(h())))`.
func (c *CustomerSubjectsClient) Intercept(interceptors ...Interceptor) {
	c.inters.CustomerSubjects = append(c.inters.CustomerSubjects, interceptors...)
}

// Create returns a builder for creating a CustomerSubjects entity.
func (c *CustomerSubjectsClient) Create() *CustomerSubjectsCreate {
	mutation := newCustomerSubjectsMutation(c.config, OpCreate)
	return &CustomerSubjectsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CustomerSubjects entities.
func (c *CustomerSubjectsClient) CreateBulk(builders ...*CustomerSubjectsCreate) *CustomerSubjectsCreateBulk {
	return &CustomerSubjectsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CustomerSubjectsClient) MapCreateBulk(slice any, setFunc func(*CustomerSubjectsCreate, int)) *CustomerSubjectsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CustomerSubjectsCreateBulk{err: fmt.Errorf("calling to CustomerSubjectsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CustomerSubjectsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CustomerSubjectsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CustomerSubjects.
func (c *CustomerSubjectsClient) Update() *CustomerSubjectsUpdate {
	mutation := newCustomerSubjectsMutation(c.config, OpUpdate)
	return &CustomerSubjectsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerSubjectsClient) UpdateOne(cs *CustomerSubjects) *CustomerSubjectsUpdateOne {
	mutation := newCustomerSubjectsMutation(c.config, OpUpdateOne, withCustomerSubjects(cs))
	return &CustomerSubjectsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerSubjectsClient) UpdateOneID(id int) *CustomerSubjectsUpdateOne {
	mutation := newCustomerSubjectsMutation(c.config, OpUpdateOne, withCustomerSubjectsID(id))
	return &CustomerSubjectsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CustomerSubjects.
func (c *CustomerSubjectsClient) Delete() *CustomerSubjectsDelete {
	mutation := newCustomerSubjectsMutation(c.config, OpDelete)
	return &CustomerSubjectsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CustomerSubjectsClient) DeleteOne(cs *CustomerSubjects) *CustomerSubjectsDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CustomerSubjectsClient) DeleteOneID(id int) *CustomerSubjectsDeleteOne {
	builder := c.Delete().Where(customersubjects.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerSubjectsDeleteOne{builder}
}

// Query returns a query builder for CustomerSubjects.
func (c *CustomerSubjectsClient) Query() *CustomerSubjectsQuery {
	return &CustomerSubjectsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCustomerSubjects},
		inters: c.Interceptors(),
	}
}

// Get returns a CustomerSubjects entity by its id.
func (c *CustomerSubjectsClient) Get(ctx context.Context, id int) (*CustomerSubjects, error) {
	return c.Query().Where(customersubjects.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerSubjectsClient) GetX(ctx context.Context, id int) *CustomerSubjects {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCustomer queries the customer edge of a CustomerSubjects.
func (c *CustomerSubjectsClient) QueryCustomer(cs *CustomerSubjects) *CustomerQuery {
	query := (&CustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customersubjects.Table, customersubjects.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, customersubjects.CustomerTable, customersubjects.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerSubjectsClient) Hooks() []Hook {
	return c.hooks.CustomerSubjects
}

// Interceptors returns the client interceptors.
func (c *CustomerSubjectsClient) Interceptors() []Interceptor {
	return c.inters.CustomerSubjects
}

func (c *CustomerSubjectsClient) mutate(ctx context.Context, m *CustomerSubjectsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CustomerSubjectsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CustomerSubjectsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CustomerSubjectsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CustomerSubjectsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown CustomerSubjects mutation op: %q", m.Op())
	}
}

// EntitlementClient is a client for the Entitlement schema.
type EntitlementClient struct {
	config
}

// NewEntitlementClient returns a client for the Entitlement from the given config.
func NewEntitlementClient(c config) *EntitlementClient {
	return &EntitlementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entitlement.Hooks(f(g(h())))`.
func (c *EntitlementClient) Use(hooks ...Hook) {
	c.hooks.Entitlement = append(c.hooks.Entitlement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `entitlement.Intercept(f(g(h())))`.
func (c *EntitlementClient) Intercept(interceptors ...Interceptor) {
	c.inters.Entitlement = append(c.inters.Entitlement, interceptors...)
}

// Create returns a builder for creating a Entitlement entity.
func (c *EntitlementClient) Create() *EntitlementCreate {
	mutation := newEntitlementMutation(c.config, OpCreate)
	return &EntitlementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Entitlement entities.
func (c *EntitlementClient) CreateBulk(builders ...*EntitlementCreate) *EntitlementCreateBulk {
	return &EntitlementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EntitlementClient) MapCreateBulk(slice any, setFunc func(*EntitlementCreate, int)) *EntitlementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EntitlementCreateBulk{err: fmt.Errorf("calling to EntitlementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EntitlementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EntitlementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Entitlement.
func (c *EntitlementClient) Update() *EntitlementUpdate {
	mutation := newEntitlementMutation(c.config, OpUpdate)
	return &EntitlementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntitlementClient) UpdateOne(e *Entitlement) *EntitlementUpdateOne {
	mutation := newEntitlementMutation(c.config, OpUpdateOne, withEntitlement(e))
	return &EntitlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntitlementClient) UpdateOneID(id string) *EntitlementUpdateOne {
	mutation := newEntitlementMutation(c.config, OpUpdateOne, withEntitlementID(id))
	return &EntitlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Entitlement.
func (c *EntitlementClient) Delete() *EntitlementDelete {
	mutation := newEntitlementMutation(c.config, OpDelete)
	return &EntitlementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntitlementClient) DeleteOne(e *Entitlement) *EntitlementDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntitlementClient) DeleteOneID(id string) *EntitlementDeleteOne {
	builder := c.Delete().Where(entitlement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntitlementDeleteOne{builder}
}

// Query returns a query builder for Entitlement.
func (c *EntitlementClient) Query() *EntitlementQuery {
	return &EntitlementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEntitlement},
		inters: c.Interceptors(),
	}
}

// Get returns a Entitlement entity by its id.
func (c *EntitlementClient) Get(ctx context.Context, id string) (*Entitlement, error) {
	return c.Query().Where(entitlement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntitlementClient) GetX(ctx context.Context, id string) *Entitlement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsageReset queries the usage_reset edge of a Entitlement.
func (c *EntitlementClient) QueryUsageReset(e *Entitlement) *UsageResetQuery {
	query := (&UsageResetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, id),
			sqlgraph.To(usagereset.Table, usagereset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entitlement.UsageResetTable, entitlement.UsageResetColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGrant queries the grant edge of a Entitlement.
func (c *EntitlementClient) QueryGrant(e *Entitlement) *GrantQuery {
	query := (&GrantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, id),
			sqlgraph.To(dbgrant.Table, dbgrant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entitlement.GrantTable, entitlement.GrantColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBalanceSnapshot queries the balance_snapshot edge of a Entitlement.
func (c *EntitlementClient) QueryBalanceSnapshot(e *Entitlement) *BalanceSnapshotQuery {
	query := (&BalanceSnapshotClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, id),
			sqlgraph.To(balancesnapshot.Table, balancesnapshot.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entitlement.BalanceSnapshotTable, entitlement.BalanceSnapshotColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeature queries the feature edge of a Entitlement.
func (c *EntitlementClient) QueryFeature(e *Entitlement) *FeatureQuery {
	query := (&FeatureClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, id),
			sqlgraph.To(feature.Table, feature.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, entitlement.FeatureTable, entitlement.FeatureColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EntitlementClient) Hooks() []Hook {
	return c.hooks.Entitlement
}

// Interceptors returns the client interceptors.
func (c *EntitlementClient) Interceptors() []Interceptor {
	return c.inters.Entitlement
}

func (c *EntitlementClient) mutate(ctx context.Context, m *EntitlementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EntitlementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EntitlementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EntitlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EntitlementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Entitlement mutation op: %q", m.Op())
	}
}

// FeatureClient is a client for the Feature schema.
type FeatureClient struct {
	config
}

// NewFeatureClient returns a client for the Feature from the given config.
func NewFeatureClient(c config) *FeatureClient {
	return &FeatureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feature.Hooks(f(g(h())))`.
func (c *FeatureClient) Use(hooks ...Hook) {
	c.hooks.Feature = append(c.hooks.Feature, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feature.Intercept(f(g(h())))`.
func (c *FeatureClient) Intercept(interceptors ...Interceptor) {
	c.inters.Feature = append(c.inters.Feature, interceptors...)
}

// Create returns a builder for creating a Feature entity.
func (c *FeatureClient) Create() *FeatureCreate {
	mutation := newFeatureMutation(c.config, OpCreate)
	return &FeatureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Feature entities.
func (c *FeatureClient) CreateBulk(builders ...*FeatureCreate) *FeatureCreateBulk {
	return &FeatureCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeatureClient) MapCreateBulk(slice any, setFunc func(*FeatureCreate, int)) *FeatureCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeatureCreateBulk{err: fmt.Errorf("calling to FeatureClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeatureCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeatureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Feature.
func (c *FeatureClient) Update() *FeatureUpdate {
	mutation := newFeatureMutation(c.config, OpUpdate)
	return &FeatureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeatureClient) UpdateOne(f *Feature) *FeatureUpdateOne {
	mutation := newFeatureMutation(c.config, OpUpdateOne, withFeature(f))
	return &FeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeatureClient) UpdateOneID(id string) *FeatureUpdateOne {
	mutation := newFeatureMutation(c.config, OpUpdateOne, withFeatureID(id))
	return &FeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Feature.
func (c *FeatureClient) Delete() *FeatureDelete {
	mutation := newFeatureMutation(c.config, OpDelete)
	return &FeatureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeatureClient) DeleteOne(f *Feature) *FeatureDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeatureClient) DeleteOneID(id string) *FeatureDeleteOne {
	builder := c.Delete().Where(feature.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeatureDeleteOne{builder}
}

// Query returns a query builder for Feature.
func (c *FeatureClient) Query() *FeatureQuery {
	return &FeatureQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeature},
		inters: c.Interceptors(),
	}
}

// Get returns a Feature entity by its id.
func (c *FeatureClient) Get(ctx context.Context, id string) (*Feature, error) {
	return c.Query().Where(feature.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeatureClient) GetX(ctx context.Context, id string) *Feature {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEntitlement queries the entitlement edge of a Feature.
func (c *FeatureClient) QueryEntitlement(f *Feature) *EntitlementQuery {
	query := (&EntitlementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feature.Table, feature.FieldID, id),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, feature.EntitlementTable, feature.EntitlementColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeatureClient) Hooks() []Hook {
	return c.hooks.Feature
}

// Interceptors returns the client interceptors.
func (c *FeatureClient) Interceptors() []Interceptor {
	return c.inters.Feature
}

func (c *FeatureClient) mutate(ctx context.Context, m *FeatureMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeatureCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeatureUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeatureDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Feature mutation op: %q", m.Op())
	}
}

// GrantClient is a client for the Grant schema.
type GrantClient struct {
	config
}

// NewGrantClient returns a client for the Grant from the given config.
func NewGrantClient(c config) *GrantClient {
	return &GrantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dbgrant.Hooks(f(g(h())))`.
func (c *GrantClient) Use(hooks ...Hook) {
	c.hooks.Grant = append(c.hooks.Grant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dbgrant.Intercept(f(g(h())))`.
func (c *GrantClient) Intercept(interceptors ...Interceptor) {
	c.inters.Grant = append(c.inters.Grant, interceptors...)
}

// Create returns a builder for creating a Grant entity.
func (c *GrantClient) Create() *GrantCreate {
	mutation := newGrantMutation(c.config, OpCreate)
	return &GrantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Grant entities.
func (c *GrantClient) CreateBulk(builders ...*GrantCreate) *GrantCreateBulk {
	return &GrantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GrantClient) MapCreateBulk(slice any, setFunc func(*GrantCreate, int)) *GrantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GrantCreateBulk{err: fmt.Errorf("calling to GrantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GrantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GrantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Grant.
func (c *GrantClient) Update() *GrantUpdate {
	mutation := newGrantMutation(c.config, OpUpdate)
	return &GrantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GrantClient) UpdateOne(gr *Grant) *GrantUpdateOne {
	mutation := newGrantMutation(c.config, OpUpdateOne, withGrant(gr))
	return &GrantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GrantClient) UpdateOneID(id string) *GrantUpdateOne {
	mutation := newGrantMutation(c.config, OpUpdateOne, withGrantID(id))
	return &GrantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Grant.
func (c *GrantClient) Delete() *GrantDelete {
	mutation := newGrantMutation(c.config, OpDelete)
	return &GrantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GrantClient) DeleteOne(gr *Grant) *GrantDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GrantClient) DeleteOneID(id string) *GrantDeleteOne {
	builder := c.Delete().Where(dbgrant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GrantDeleteOne{builder}
}

// Query returns a query builder for Grant.
func (c *GrantClient) Query() *GrantQuery {
	return &GrantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGrant},
		inters: c.Interceptors(),
	}
}

// Get returns a Grant entity by its id.
func (c *GrantClient) Get(ctx context.Context, id string) (*Grant, error) {
	return c.Query().Where(dbgrant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GrantClient) GetX(ctx context.Context, id string) *Grant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEntitlement queries the entitlement edge of a Grant.
func (c *GrantClient) QueryEntitlement(gr *Grant) *EntitlementQuery {
	query := (&EntitlementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbgrant.Table, dbgrant.FieldID, id),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dbgrant.EntitlementTable, dbgrant.EntitlementColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GrantClient) Hooks() []Hook {
	return c.hooks.Grant
}

// Interceptors returns the client interceptors.
func (c *GrantClient) Interceptors() []Interceptor {
	return c.inters.Grant
}

func (c *GrantClient) mutate(ctx context.Context, m *GrantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GrantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GrantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GrantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GrantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Grant mutation op: %q", m.Op())
	}
}

// NotificationChannelClient is a client for the NotificationChannel schema.
type NotificationChannelClient struct {
	config
}

// NewNotificationChannelClient returns a client for the NotificationChannel from the given config.
func NewNotificationChannelClient(c config) *NotificationChannelClient {
	return &NotificationChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationchannel.Hooks(f(g(h())))`.
func (c *NotificationChannelClient) Use(hooks ...Hook) {
	c.hooks.NotificationChannel = append(c.hooks.NotificationChannel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationchannel.Intercept(f(g(h())))`.
func (c *NotificationChannelClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationChannel = append(c.inters.NotificationChannel, interceptors...)
}

// Create returns a builder for creating a NotificationChannel entity.
func (c *NotificationChannelClient) Create() *NotificationChannelCreate {
	mutation := newNotificationChannelMutation(c.config, OpCreate)
	return &NotificationChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationChannel entities.
func (c *NotificationChannelClient) CreateBulk(builders ...*NotificationChannelCreate) *NotificationChannelCreateBulk {
	return &NotificationChannelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationChannelClient) MapCreateBulk(slice any, setFunc func(*NotificationChannelCreate, int)) *NotificationChannelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationChannelCreateBulk{err: fmt.Errorf("calling to NotificationChannelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationChannelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationChannel.
func (c *NotificationChannelClient) Update() *NotificationChannelUpdate {
	mutation := newNotificationChannelMutation(c.config, OpUpdate)
	return &NotificationChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationChannelClient) UpdateOne(nc *NotificationChannel) *NotificationChannelUpdateOne {
	mutation := newNotificationChannelMutation(c.config, OpUpdateOne, withNotificationChannel(nc))
	return &NotificationChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationChannelClient) UpdateOneID(id string) *NotificationChannelUpdateOne {
	mutation := newNotificationChannelMutation(c.config, OpUpdateOne, withNotificationChannelID(id))
	return &NotificationChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationChannel.
func (c *NotificationChannelClient) Delete() *NotificationChannelDelete {
	mutation := newNotificationChannelMutation(c.config, OpDelete)
	return &NotificationChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationChannelClient) DeleteOne(nc *NotificationChannel) *NotificationChannelDeleteOne {
	return c.DeleteOneID(nc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationChannelClient) DeleteOneID(id string) *NotificationChannelDeleteOne {
	builder := c.Delete().Where(notificationchannel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationChannelDeleteOne{builder}
}

// Query returns a query builder for NotificationChannel.
func (c *NotificationChannelClient) Query() *NotificationChannelQuery {
	return &NotificationChannelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationChannel},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationChannel entity by its id.
func (c *NotificationChannelClient) Get(ctx context.Context, id string) (*NotificationChannel, error) {
	return c.Query().Where(notificationchannel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationChannelClient) GetX(ctx context.Context, id string) *NotificationChannel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRules queries the rules edge of a NotificationChannel.
func (c *NotificationChannelClient) QueryRules(nc *NotificationChannel) *NotificationRuleQuery {
	query := (&NotificationRuleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationchannel.Table, notificationchannel.FieldID, id),
			sqlgraph.To(notificationrule.Table, notificationrule.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, notificationchannel.RulesTable, notificationchannel.RulesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(nc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationChannelClient) Hooks() []Hook {
	return c.hooks.NotificationChannel
}

// Interceptors returns the client interceptors.
func (c *NotificationChannelClient) Interceptors() []Interceptor {
	return c.inters.NotificationChannel
}

func (c *NotificationChannelClient) mutate(ctx context.Context, m *NotificationChannelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationChannelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationChannelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown NotificationChannel mutation op: %q", m.Op())
	}
}

// NotificationEventClient is a client for the NotificationEvent schema.
type NotificationEventClient struct {
	config
}

// NewNotificationEventClient returns a client for the NotificationEvent from the given config.
func NewNotificationEventClient(c config) *NotificationEventClient {
	return &NotificationEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationevent.Hooks(f(g(h())))`.
func (c *NotificationEventClient) Use(hooks ...Hook) {
	c.hooks.NotificationEvent = append(c.hooks.NotificationEvent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationevent.Intercept(f(g(h())))`.
func (c *NotificationEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationEvent = append(c.inters.NotificationEvent, interceptors...)
}

// Create returns a builder for creating a NotificationEvent entity.
func (c *NotificationEventClient) Create() *NotificationEventCreate {
	mutation := newNotificationEventMutation(c.config, OpCreate)
	return &NotificationEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationEvent entities.
func (c *NotificationEventClient) CreateBulk(builders ...*NotificationEventCreate) *NotificationEventCreateBulk {
	return &NotificationEventCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationEventClient) MapCreateBulk(slice any, setFunc func(*NotificationEventCreate, int)) *NotificationEventCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationEventCreateBulk{err: fmt.Errorf("calling to NotificationEventClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationEventCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationEvent.
func (c *NotificationEventClient) Update() *NotificationEventUpdate {
	mutation := newNotificationEventMutation(c.config, OpUpdate)
	return &NotificationEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationEventClient) UpdateOne(ne *NotificationEvent) *NotificationEventUpdateOne {
	mutation := newNotificationEventMutation(c.config, OpUpdateOne, withNotificationEvent(ne))
	return &NotificationEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationEventClient) UpdateOneID(id string) *NotificationEventUpdateOne {
	mutation := newNotificationEventMutation(c.config, OpUpdateOne, withNotificationEventID(id))
	return &NotificationEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationEvent.
func (c *NotificationEventClient) Delete() *NotificationEventDelete {
	mutation := newNotificationEventMutation(c.config, OpDelete)
	return &NotificationEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationEventClient) DeleteOne(ne *NotificationEvent) *NotificationEventDeleteOne {
	return c.DeleteOneID(ne.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationEventClient) DeleteOneID(id string) *NotificationEventDeleteOne {
	builder := c.Delete().Where(notificationevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationEventDeleteOne{builder}
}

// Query returns a query builder for NotificationEvent.
func (c *NotificationEventClient) Query() *NotificationEventQuery {
	return &NotificationEventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationEvent entity by its id.
func (c *NotificationEventClient) Get(ctx context.Context, id string) (*NotificationEvent, error) {
	return c.Query().Where(notificationevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationEventClient) GetX(ctx context.Context, id string) *NotificationEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeliveryStatuses queries the delivery_statuses edge of a NotificationEvent.
func (c *NotificationEventClient) QueryDeliveryStatuses(ne *NotificationEvent) *NotificationEventDeliveryStatusQuery {
	query := (&NotificationEventDeliveryStatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ne.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationevent.Table, notificationevent.FieldID, id),
			sqlgraph.To(notificationeventdeliverystatus.Table, notificationeventdeliverystatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, notificationevent.DeliveryStatusesTable, notificationevent.DeliveryStatusesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ne.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRules queries the rules edge of a NotificationEvent.
func (c *NotificationEventClient) QueryRules(ne *NotificationEvent) *NotificationRuleQuery {
	query := (&NotificationRuleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ne.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationevent.Table, notificationevent.FieldID, id),
			sqlgraph.To(notificationrule.Table, notificationrule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notificationevent.RulesTable, notificationevent.RulesColumn),
		)
		fromV = sqlgraph.Neighbors(ne.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationEventClient) Hooks() []Hook {
	return c.hooks.NotificationEvent
}

// Interceptors returns the client interceptors.
func (c *NotificationEventClient) Interceptors() []Interceptor {
	return c.inters.NotificationEvent
}

func (c *NotificationEventClient) mutate(ctx context.Context, m *NotificationEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown NotificationEvent mutation op: %q", m.Op())
	}
}

// NotificationEventDeliveryStatusClient is a client for the NotificationEventDeliveryStatus schema.
type NotificationEventDeliveryStatusClient struct {
	config
}

// NewNotificationEventDeliveryStatusClient returns a client for the NotificationEventDeliveryStatus from the given config.
func NewNotificationEventDeliveryStatusClient(c config) *NotificationEventDeliveryStatusClient {
	return &NotificationEventDeliveryStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationeventdeliverystatus.Hooks(f(g(h())))`.
func (c *NotificationEventDeliveryStatusClient) Use(hooks ...Hook) {
	c.hooks.NotificationEventDeliveryStatus = append(c.hooks.NotificationEventDeliveryStatus, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationeventdeliverystatus.Intercept(f(g(h())))`.
func (c *NotificationEventDeliveryStatusClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationEventDeliveryStatus = append(c.inters.NotificationEventDeliveryStatus, interceptors...)
}

// Create returns a builder for creating a NotificationEventDeliveryStatus entity.
func (c *NotificationEventDeliveryStatusClient) Create() *NotificationEventDeliveryStatusCreate {
	mutation := newNotificationEventDeliveryStatusMutation(c.config, OpCreate)
	return &NotificationEventDeliveryStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationEventDeliveryStatus entities.
func (c *NotificationEventDeliveryStatusClient) CreateBulk(builders ...*NotificationEventDeliveryStatusCreate) *NotificationEventDeliveryStatusCreateBulk {
	return &NotificationEventDeliveryStatusCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationEventDeliveryStatusClient) MapCreateBulk(slice any, setFunc func(*NotificationEventDeliveryStatusCreate, int)) *NotificationEventDeliveryStatusCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationEventDeliveryStatusCreateBulk{err: fmt.Errorf("calling to NotificationEventDeliveryStatusClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationEventDeliveryStatusCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationEventDeliveryStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationEventDeliveryStatus.
func (c *NotificationEventDeliveryStatusClient) Update() *NotificationEventDeliveryStatusUpdate {
	mutation := newNotificationEventDeliveryStatusMutation(c.config, OpUpdate)
	return &NotificationEventDeliveryStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationEventDeliveryStatusClient) UpdateOne(neds *NotificationEventDeliveryStatus) *NotificationEventDeliveryStatusUpdateOne {
	mutation := newNotificationEventDeliveryStatusMutation(c.config, OpUpdateOne, withNotificationEventDeliveryStatus(neds))
	return &NotificationEventDeliveryStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationEventDeliveryStatusClient) UpdateOneID(id string) *NotificationEventDeliveryStatusUpdateOne {
	mutation := newNotificationEventDeliveryStatusMutation(c.config, OpUpdateOne, withNotificationEventDeliveryStatusID(id))
	return &NotificationEventDeliveryStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationEventDeliveryStatus.
func (c *NotificationEventDeliveryStatusClient) Delete() *NotificationEventDeliveryStatusDelete {
	mutation := newNotificationEventDeliveryStatusMutation(c.config, OpDelete)
	return &NotificationEventDeliveryStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationEventDeliveryStatusClient) DeleteOne(neds *NotificationEventDeliveryStatus) *NotificationEventDeliveryStatusDeleteOne {
	return c.DeleteOneID(neds.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationEventDeliveryStatusClient) DeleteOneID(id string) *NotificationEventDeliveryStatusDeleteOne {
	builder := c.Delete().Where(notificationeventdeliverystatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationEventDeliveryStatusDeleteOne{builder}
}

// Query returns a query builder for NotificationEventDeliveryStatus.
func (c *NotificationEventDeliveryStatusClient) Query() *NotificationEventDeliveryStatusQuery {
	return &NotificationEventDeliveryStatusQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationEventDeliveryStatus},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationEventDeliveryStatus entity by its id.
func (c *NotificationEventDeliveryStatusClient) Get(ctx context.Context, id string) (*NotificationEventDeliveryStatus, error) {
	return c.Query().Where(notificationeventdeliverystatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationEventDeliveryStatusClient) GetX(ctx context.Context, id string) *NotificationEventDeliveryStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvents queries the events edge of a NotificationEventDeliveryStatus.
func (c *NotificationEventDeliveryStatusClient) QueryEvents(neds *NotificationEventDeliveryStatus) *NotificationEventQuery {
	query := (&NotificationEventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := neds.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationeventdeliverystatus.Table, notificationeventdeliverystatus.FieldID, id),
			sqlgraph.To(notificationevent.Table, notificationevent.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, notificationeventdeliverystatus.EventsTable, notificationeventdeliverystatus.EventsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(neds.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationEventDeliveryStatusClient) Hooks() []Hook {
	return c.hooks.NotificationEventDeliveryStatus
}

// Interceptors returns the client interceptors.
func (c *NotificationEventDeliveryStatusClient) Interceptors() []Interceptor {
	return c.inters.NotificationEventDeliveryStatus
}

func (c *NotificationEventDeliveryStatusClient) mutate(ctx context.Context, m *NotificationEventDeliveryStatusMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationEventDeliveryStatusCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationEventDeliveryStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationEventDeliveryStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationEventDeliveryStatusDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown NotificationEventDeliveryStatus mutation op: %q", m.Op())
	}
}

// NotificationRuleClient is a client for the NotificationRule schema.
type NotificationRuleClient struct {
	config
}

// NewNotificationRuleClient returns a client for the NotificationRule from the given config.
func NewNotificationRuleClient(c config) *NotificationRuleClient {
	return &NotificationRuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationrule.Hooks(f(g(h())))`.
func (c *NotificationRuleClient) Use(hooks ...Hook) {
	c.hooks.NotificationRule = append(c.hooks.NotificationRule, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationrule.Intercept(f(g(h())))`.
func (c *NotificationRuleClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationRule = append(c.inters.NotificationRule, interceptors...)
}

// Create returns a builder for creating a NotificationRule entity.
func (c *NotificationRuleClient) Create() *NotificationRuleCreate {
	mutation := newNotificationRuleMutation(c.config, OpCreate)
	return &NotificationRuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationRule entities.
func (c *NotificationRuleClient) CreateBulk(builders ...*NotificationRuleCreate) *NotificationRuleCreateBulk {
	return &NotificationRuleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationRuleClient) MapCreateBulk(slice any, setFunc func(*NotificationRuleCreate, int)) *NotificationRuleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationRuleCreateBulk{err: fmt.Errorf("calling to NotificationRuleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationRuleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationRuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationRule.
func (c *NotificationRuleClient) Update() *NotificationRuleUpdate {
	mutation := newNotificationRuleMutation(c.config, OpUpdate)
	return &NotificationRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationRuleClient) UpdateOne(nr *NotificationRule) *NotificationRuleUpdateOne {
	mutation := newNotificationRuleMutation(c.config, OpUpdateOne, withNotificationRule(nr))
	return &NotificationRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationRuleClient) UpdateOneID(id string) *NotificationRuleUpdateOne {
	mutation := newNotificationRuleMutation(c.config, OpUpdateOne, withNotificationRuleID(id))
	return &NotificationRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationRule.
func (c *NotificationRuleClient) Delete() *NotificationRuleDelete {
	mutation := newNotificationRuleMutation(c.config, OpDelete)
	return &NotificationRuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationRuleClient) DeleteOne(nr *NotificationRule) *NotificationRuleDeleteOne {
	return c.DeleteOneID(nr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationRuleClient) DeleteOneID(id string) *NotificationRuleDeleteOne {
	builder := c.Delete().Where(notificationrule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationRuleDeleteOne{builder}
}

// Query returns a query builder for NotificationRule.
func (c *NotificationRuleClient) Query() *NotificationRuleQuery {
	return &NotificationRuleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationRule},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationRule entity by its id.
func (c *NotificationRuleClient) Get(ctx context.Context, id string) (*NotificationRule, error) {
	return c.Query().Where(notificationrule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationRuleClient) GetX(ctx context.Context, id string) *NotificationRule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChannels queries the channels edge of a NotificationRule.
func (c *NotificationRuleClient) QueryChannels(nr *NotificationRule) *NotificationChannelQuery {
	query := (&NotificationChannelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationrule.Table, notificationrule.FieldID, id),
			sqlgraph.To(notificationchannel.Table, notificationchannel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, notificationrule.ChannelsTable, notificationrule.ChannelsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(nr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvents queries the events edge of a NotificationRule.
func (c *NotificationRuleClient) QueryEvents(nr *NotificationRule) *NotificationEventQuery {
	query := (&NotificationEventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notificationrule.Table, notificationrule.FieldID, id),
			sqlgraph.To(notificationevent.Table, notificationevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, notificationrule.EventsTable, notificationrule.EventsColumn),
		)
		fromV = sqlgraph.Neighbors(nr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationRuleClient) Hooks() []Hook {
	return c.hooks.NotificationRule
}

// Interceptors returns the client interceptors.
func (c *NotificationRuleClient) Interceptors() []Interceptor {
	return c.inters.NotificationRule
}

func (c *NotificationRuleClient) mutate(ctx context.Context, m *NotificationRuleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationRuleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationRuleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown NotificationRule mutation op: %q", m.Op())
	}
}

// UsageResetClient is a client for the UsageReset schema.
type UsageResetClient struct {
	config
}

// NewUsageResetClient returns a client for the UsageReset from the given config.
func NewUsageResetClient(c config) *UsageResetClient {
	return &UsageResetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usagereset.Hooks(f(g(h())))`.
func (c *UsageResetClient) Use(hooks ...Hook) {
	c.hooks.UsageReset = append(c.hooks.UsageReset, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usagereset.Intercept(f(g(h())))`.
func (c *UsageResetClient) Intercept(interceptors ...Interceptor) {
	c.inters.UsageReset = append(c.inters.UsageReset, interceptors...)
}

// Create returns a builder for creating a UsageReset entity.
func (c *UsageResetClient) Create() *UsageResetCreate {
	mutation := newUsageResetMutation(c.config, OpCreate)
	return &UsageResetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UsageReset entities.
func (c *UsageResetClient) CreateBulk(builders ...*UsageResetCreate) *UsageResetCreateBulk {
	return &UsageResetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UsageResetClient) MapCreateBulk(slice any, setFunc func(*UsageResetCreate, int)) *UsageResetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UsageResetCreateBulk{err: fmt.Errorf("calling to UsageResetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UsageResetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UsageResetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UsageReset.
func (c *UsageResetClient) Update() *UsageResetUpdate {
	mutation := newUsageResetMutation(c.config, OpUpdate)
	return &UsageResetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsageResetClient) UpdateOne(ur *UsageReset) *UsageResetUpdateOne {
	mutation := newUsageResetMutation(c.config, OpUpdateOne, withUsageReset(ur))
	return &UsageResetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsageResetClient) UpdateOneID(id string) *UsageResetUpdateOne {
	mutation := newUsageResetMutation(c.config, OpUpdateOne, withUsageResetID(id))
	return &UsageResetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UsageReset.
func (c *UsageResetClient) Delete() *UsageResetDelete {
	mutation := newUsageResetMutation(c.config, OpDelete)
	return &UsageResetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UsageResetClient) DeleteOne(ur *UsageReset) *UsageResetDeleteOne {
	return c.DeleteOneID(ur.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UsageResetClient) DeleteOneID(id string) *UsageResetDeleteOne {
	builder := c.Delete().Where(usagereset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsageResetDeleteOne{builder}
}

// Query returns a query builder for UsageReset.
func (c *UsageResetClient) Query() *UsageResetQuery {
	return &UsageResetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUsageReset},
		inters: c.Interceptors(),
	}
}

// Get returns a UsageReset entity by its id.
func (c *UsageResetClient) Get(ctx context.Context, id string) (*UsageReset, error) {
	return c.Query().Where(usagereset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsageResetClient) GetX(ctx context.Context, id string) *UsageReset {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEntitlement queries the entitlement edge of a UsageReset.
func (c *UsageResetClient) QueryEntitlement(ur *UsageReset) *EntitlementQuery {
	query := (&EntitlementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ur.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usagereset.Table, usagereset.FieldID, id),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usagereset.EntitlementTable, usagereset.EntitlementColumn),
		)
		fromV = sqlgraph.Neighbors(ur.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UsageResetClient) Hooks() []Hook {
	return c.hooks.UsageReset
}

// Interceptors returns the client interceptors.
func (c *UsageResetClient) Interceptors() []Interceptor {
	return c.inters.UsageReset
}

func (c *UsageResetClient) mutate(ctx context.Context, m *UsageResetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UsageResetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UsageResetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UsageResetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UsageResetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown UsageReset mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		App, BalanceSnapshot, BillingCustomerOverride, BillingInvoice,
		BillingInvoiceItem, BillingProfile, BillingWorkflowConfig, Customer,
		CustomerSubjects, Entitlement, Feature, Grant, NotificationChannel,
		NotificationEvent, NotificationEventDeliveryStatus, NotificationRule,
		UsageReset []ent.Hook
	}
	inters struct {
		App, BalanceSnapshot, BillingCustomerOverride, BillingInvoice,
		BillingInvoiceItem, BillingProfile, BillingWorkflowConfig, Customer,
		CustomerSubjects, Entitlement, Feature, Grant, NotificationChannel,
		NotificationEvent, NotificationEventDeliveryStatus, NotificationRule,
		UsageReset []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
