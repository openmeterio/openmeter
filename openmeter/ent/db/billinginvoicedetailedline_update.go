// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicedetailedline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicedetailedlineamountdiscount"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
)

// BillingInvoiceDetailedLineUpdate is the builder for updating BillingInvoiceDetailedLine entities.
type BillingInvoiceDetailedLineUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceDetailedLineMutation
}

// Where appends a list predicates to the BillingInvoiceDetailedLineUpdate builder.
func (_u *BillingInvoiceDetailedLineUpdate) Where(ps ...predicate.BillingInvoiceDetailedLine) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAnnotations sets the "annotations" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetAnnotations(v map[string]interface{}) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetAnnotations(v)
	return _u
}

// ClearAnnotations clears the value of the "annotations" field.
func (_u *BillingInvoiceDetailedLineUpdate) ClearAnnotations() *BillingInvoiceDetailedLineUpdate {
	_u.mutation.ClearAnnotations()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetMetadata(v map[string]string) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *BillingInvoiceDetailedLineUpdate) ClearMetadata() *BillingInvoiceDetailedLineUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetUpdatedAt(v time.Time) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetDeletedAt(v time.Time) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableDeletedAt(v *time.Time) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *BillingInvoiceDetailedLineUpdate) ClearDeletedAt() *BillingInvoiceDetailedLineUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetName(v string) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableName(v *string) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetDescription(v string) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableDescription(v *string) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BillingInvoiceDetailedLineUpdate) ClearDescription() *BillingInvoiceDetailedLineUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetTaxConfig sets the "tax_config" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetTaxConfig(v)
	return _u
}

// SetNillableTaxConfig sets the "tax_config" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableTaxConfig(v *productcatalog.TaxConfig) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetTaxConfig(*v)
	}
	return _u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (_u *BillingInvoiceDetailedLineUpdate) ClearTaxConfig() *BillingInvoiceDetailedLineUpdate {
	_u.mutation.ClearTaxConfig()
	return _u
}

// SetAmount sets the "amount" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableAmount(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// SetTaxesTotal sets the "taxes_total" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetTaxesTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetTaxesTotal(v)
	return _u
}

// SetNillableTaxesTotal sets the "taxes_total" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableTaxesTotal(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetTaxesTotal(*v)
	}
	return _u
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetTaxesInclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetTaxesInclusiveTotal(v)
	return _u
}

// SetNillableTaxesInclusiveTotal sets the "taxes_inclusive_total" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableTaxesInclusiveTotal(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetTaxesInclusiveTotal(*v)
	}
	return _u
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetTaxesExclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetTaxesExclusiveTotal(v)
	return _u
}

// SetNillableTaxesExclusiveTotal sets the "taxes_exclusive_total" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableTaxesExclusiveTotal(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetTaxesExclusiveTotal(*v)
	}
	return _u
}

// SetChargesTotal sets the "charges_total" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetChargesTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetChargesTotal(v)
	return _u
}

// SetNillableChargesTotal sets the "charges_total" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableChargesTotal(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetChargesTotal(*v)
	}
	return _u
}

// SetDiscountsTotal sets the "discounts_total" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetDiscountsTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetDiscountsTotal(v)
	return _u
}

// SetNillableDiscountsTotal sets the "discounts_total" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableDiscountsTotal(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetDiscountsTotal(*v)
	}
	return _u
}

// SetTotal sets the "total" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetTotal(v)
	return _u
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableTotal(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetTotal(*v)
	}
	return _u
}

// SetServicePeriodFrom sets the "service_period_from" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetServicePeriodFrom(v time.Time) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetServicePeriodFrom(v)
	return _u
}

// SetNillableServicePeriodFrom sets the "service_period_from" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableServicePeriodFrom(v *time.Time) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetServicePeriodFrom(*v)
	}
	return _u
}

// SetServicePeriodTo sets the "service_period_to" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetServicePeriodTo(v time.Time) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetServicePeriodTo(v)
	return _u
}

// SetNillableServicePeriodTo sets the "service_period_to" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableServicePeriodTo(v *time.Time) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetServicePeriodTo(*v)
	}
	return _u
}

// SetInvoiceID sets the "invoice_id" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetInvoiceID(v string) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetInvoiceID(v)
	return _u
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableInvoiceID(v *string) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetInvoiceID(*v)
	}
	return _u
}

// SetParentLineID sets the "parent_line_id" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetParentLineID(v string) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetParentLineID(v)
	return _u
}

// SetNillableParentLineID sets the "parent_line_id" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableParentLineID(v *string) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetParentLineID(*v)
	}
	return _u
}

// SetQuantity sets the "quantity" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetQuantity(v)
	return _u
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableQuantity(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetQuantity(*v)
	}
	return _u
}

// SetPerUnitAmount sets the "per_unit_amount" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetPerUnitAmount(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetPerUnitAmount(v)
	return _u
}

// SetNillablePerUnitAmount sets the "per_unit_amount" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillablePerUnitAmount(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetPerUnitAmount(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetCategory(v billing.DetailedLineCategory) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableCategory(v *billing.DetailedLineCategory) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetPaymentTerm sets the "payment_term" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetPaymentTerm(v productcatalog.PaymentTermType) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetPaymentTerm(v)
	return _u
}

// SetNillablePaymentTerm sets the "payment_term" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillablePaymentTerm(v *productcatalog.PaymentTermType) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetPaymentTerm(*v)
	}
	return _u
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetInvoicingAppExternalID(v string) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetInvoicingAppExternalID(v)
	return _u
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableInvoicingAppExternalID(v *string) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetInvoicingAppExternalID(*v)
	}
	return _u
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (_u *BillingInvoiceDetailedLineUpdate) ClearInvoicingAppExternalID() *BillingInvoiceDetailedLineUpdate {
	_u.mutation.ClearInvoicingAppExternalID()
	return _u
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetChildUniqueReferenceID(v string) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.SetChildUniqueReferenceID(v)
	return _u
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableChildUniqueReferenceID(v *string) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetChildUniqueReferenceID(*v)
	}
	return _u
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (_u *BillingInvoiceDetailedLineUpdate) ClearChildUniqueReferenceID() *BillingInvoiceDetailedLineUpdate {
	_u.mutation.ClearChildUniqueReferenceID()
	return _u
}

// SetIndex sets the "index" field.
func (_u *BillingInvoiceDetailedLineUpdate) SetIndex(v int) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.ResetIndex()
	_u.mutation.SetIndex(v)
	return _u
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdate) SetNillableIndex(v *int) *BillingInvoiceDetailedLineUpdate {
	if v != nil {
		_u.SetIndex(*v)
	}
	return _u
}

// AddIndex adds value to the "index" field.
func (_u *BillingInvoiceDetailedLineUpdate) AddIndex(v int) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.AddIndex(v)
	return _u
}

// ClearIndex clears the value of the "index" field.
func (_u *BillingInvoiceDetailedLineUpdate) ClearIndex() *BillingInvoiceDetailedLineUpdate {
	_u.mutation.ClearIndex()
	return _u
}

// SetInvoice sets the "invoice" edge to the BillingInvoice entity.
func (_u *BillingInvoiceDetailedLineUpdate) SetInvoice(v *BillingInvoice) *BillingInvoiceDetailedLineUpdate {
	return _u.SetInvoiceID(v.ID)
}

// SetParentLine sets the "parent_line" edge to the BillingInvoiceLine entity.
func (_u *BillingInvoiceDetailedLineUpdate) SetParentLine(v *BillingInvoiceLine) *BillingInvoiceDetailedLineUpdate {
	return _u.SetParentLineID(v.ID)
}

// AddAmountDiscountIDs adds the "amount_discounts" edge to the BillingInvoiceDetailedLineAmountDiscount entity by IDs.
func (_u *BillingInvoiceDetailedLineUpdate) AddAmountDiscountIDs(ids ...string) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.AddAmountDiscountIDs(ids...)
	return _u
}

// AddAmountDiscounts adds the "amount_discounts" edges to the BillingInvoiceDetailedLineAmountDiscount entity.
func (_u *BillingInvoiceDetailedLineUpdate) AddAmountDiscounts(v ...*BillingInvoiceDetailedLineAmountDiscount) *BillingInvoiceDetailedLineUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAmountDiscountIDs(ids...)
}

// Mutation returns the BillingInvoiceDetailedLineMutation object of the builder.
func (_u *BillingInvoiceDetailedLineUpdate) Mutation() *BillingInvoiceDetailedLineMutation {
	return _u.mutation
}

// ClearInvoice clears the "invoice" edge to the BillingInvoice entity.
func (_u *BillingInvoiceDetailedLineUpdate) ClearInvoice() *BillingInvoiceDetailedLineUpdate {
	_u.mutation.ClearInvoice()
	return _u
}

// ClearParentLine clears the "parent_line" edge to the BillingInvoiceLine entity.
func (_u *BillingInvoiceDetailedLineUpdate) ClearParentLine() *BillingInvoiceDetailedLineUpdate {
	_u.mutation.ClearParentLine()
	return _u
}

// ClearAmountDiscounts clears all "amount_discounts" edges to the BillingInvoiceDetailedLineAmountDiscount entity.
func (_u *BillingInvoiceDetailedLineUpdate) ClearAmountDiscounts() *BillingInvoiceDetailedLineUpdate {
	_u.mutation.ClearAmountDiscounts()
	return _u
}

// RemoveAmountDiscountIDs removes the "amount_discounts" edge to BillingInvoiceDetailedLineAmountDiscount entities by IDs.
func (_u *BillingInvoiceDetailedLineUpdate) RemoveAmountDiscountIDs(ids ...string) *BillingInvoiceDetailedLineUpdate {
	_u.mutation.RemoveAmountDiscountIDs(ids...)
	return _u
}

// RemoveAmountDiscounts removes "amount_discounts" edges to BillingInvoiceDetailedLineAmountDiscount entities.
func (_u *BillingInvoiceDetailedLineUpdate) RemoveAmountDiscounts(v ...*BillingInvoiceDetailedLineAmountDiscount) *BillingInvoiceDetailedLineUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAmountDiscountIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BillingInvoiceDetailedLineUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BillingInvoiceDetailedLineUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BillingInvoiceDetailedLineUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BillingInvoiceDetailedLineUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BillingInvoiceDetailedLineUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := billinginvoicedetailedline.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BillingInvoiceDetailedLineUpdate) check() error {
	if v, ok := _u.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceDetailedLine.tax_config": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Category(); ok {
		if err := billinginvoicedetailedline.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceDetailedLine.category": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PaymentTerm(); ok {
		if err := billinginvoicedetailedline.PaymentTermValidator(v); err != nil {
			return &ValidationError{Name: "payment_term", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceDetailedLine.payment_term": %w`, err)}
		}
	}
	if _u.mutation.InvoiceCleared() && len(_u.mutation.InvoiceIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceDetailedLine.invoice"`)
	}
	if _u.mutation.ParentLineCleared() && len(_u.mutation.ParentLineIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceDetailedLine.parent_line"`)
	}
	return nil
}

func (_u *BillingInvoiceDetailedLineUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoicedetailedline.Table, billinginvoicedetailedline.Columns, sqlgraph.NewFieldSpec(billinginvoicedetailedline.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Annotations(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldAnnotations, field.TypeJSON, value)
	}
	if _u.mutation.AnnotationsCleared() {
		_spec.ClearField(billinginvoicedetailedline.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoicedetailedline.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoicedetailedline.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoicedetailedline.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.TaxConfig(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldTaxConfig, field.TypeJSON, value)
	}
	if _u.mutation.TaxConfigCleared() {
		_spec.ClearField(billinginvoicedetailedline.FieldTaxConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldAmount, field.TypeOther, value)
	}
	if value, ok := _u.mutation.TaxesTotal(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldTaxesTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.TaxesInclusiveTotal(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldTaxesInclusiveTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.TaxesExclusiveTotal(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldTaxesExclusiveTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.ChargesTotal(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldChargesTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.DiscountsTotal(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldDiscountsTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.Total(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.ServicePeriodFrom(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldServicePeriodFrom, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ServicePeriodTo(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldServicePeriodTo, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Quantity(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldQuantity, field.TypeOther, value)
	}
	if value, ok := _u.mutation.PerUnitAmount(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldPerUnitAmount, field.TypeOther, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.PaymentTerm(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldPaymentTerm, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldInvoicingAppExternalID, field.TypeString, value)
	}
	if _u.mutation.InvoicingAppExternalIDCleared() {
		_spec.ClearField(billinginvoicedetailedline.FieldInvoicingAppExternalID, field.TypeString)
	}
	if value, ok := _u.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldChildUniqueReferenceID, field.TypeString, value)
	}
	if _u.mutation.ChildUniqueReferenceIDCleared() {
		_spec.ClearField(billinginvoicedetailedline.FieldChildUniqueReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.Index(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldIndex, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedIndex(); ok {
		_spec.AddField(billinginvoicedetailedline.FieldIndex, field.TypeInt, value)
	}
	if _u.mutation.IndexCleared() {
		_spec.ClearField(billinginvoicedetailedline.FieldIndex, field.TypeInt)
	}
	if _u.mutation.InvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicedetailedline.InvoiceTable,
			Columns: []string{billinginvoicedetailedline.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicedetailedline.InvoiceTable,
			Columns: []string{billinginvoicedetailedline.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicedetailedline.ParentLineTable,
			Columns: []string{billinginvoicedetailedline.ParentLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicedetailedline.ParentLineTable,
			Columns: []string{billinginvoicedetailedline.ParentLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AmountDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicedetailedline.AmountDiscountsTable,
			Columns: []string{billinginvoicedetailedline.AmountDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicedetailedlineamountdiscount.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAmountDiscountsIDs(); len(nodes) > 0 && !_u.mutation.AmountDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicedetailedline.AmountDiscountsTable,
			Columns: []string{billinginvoicedetailedline.AmountDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicedetailedlineamountdiscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AmountDiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicedetailedline.AmountDiscountsTable,
			Columns: []string{billinginvoicedetailedline.AmountDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicedetailedlineamountdiscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicedetailedline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BillingInvoiceDetailedLineUpdateOne is the builder for updating a single BillingInvoiceDetailedLine entity.
type BillingInvoiceDetailedLineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceDetailedLineMutation
}

// SetAnnotations sets the "annotations" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetAnnotations(v map[string]interface{}) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetAnnotations(v)
	return _u
}

// ClearAnnotations clears the value of the "annotations" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) ClearAnnotations() *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.ClearAnnotations()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetMetadata(v map[string]string) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) ClearMetadata() *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetUpdatedAt(v time.Time) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetDeletedAt(v time.Time) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableDeletedAt(v *time.Time) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) ClearDeletedAt() *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetName(v string) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableName(v *string) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetDescription(v string) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableDescription(v *string) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) ClearDescription() *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetTaxConfig sets the "tax_config" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetTaxConfig(v)
	return _u
}

// SetNillableTaxConfig sets the "tax_config" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableTaxConfig(v *productcatalog.TaxConfig) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetTaxConfig(*v)
	}
	return _u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) ClearTaxConfig() *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.ClearTaxConfig()
	return _u
}

// SetAmount sets the "amount" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableAmount(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// SetTaxesTotal sets the "taxes_total" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetTaxesTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetTaxesTotal(v)
	return _u
}

// SetNillableTaxesTotal sets the "taxes_total" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableTaxesTotal(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetTaxesTotal(*v)
	}
	return _u
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetTaxesInclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetTaxesInclusiveTotal(v)
	return _u
}

// SetNillableTaxesInclusiveTotal sets the "taxes_inclusive_total" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableTaxesInclusiveTotal(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetTaxesInclusiveTotal(*v)
	}
	return _u
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetTaxesExclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetTaxesExclusiveTotal(v)
	return _u
}

// SetNillableTaxesExclusiveTotal sets the "taxes_exclusive_total" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableTaxesExclusiveTotal(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetTaxesExclusiveTotal(*v)
	}
	return _u
}

// SetChargesTotal sets the "charges_total" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetChargesTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetChargesTotal(v)
	return _u
}

// SetNillableChargesTotal sets the "charges_total" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableChargesTotal(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetChargesTotal(*v)
	}
	return _u
}

// SetDiscountsTotal sets the "discounts_total" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetDiscountsTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetDiscountsTotal(v)
	return _u
}

// SetNillableDiscountsTotal sets the "discounts_total" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableDiscountsTotal(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetDiscountsTotal(*v)
	}
	return _u
}

// SetTotal sets the "total" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetTotal(v)
	return _u
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableTotal(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetTotal(*v)
	}
	return _u
}

// SetServicePeriodFrom sets the "service_period_from" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetServicePeriodFrom(v time.Time) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetServicePeriodFrom(v)
	return _u
}

// SetNillableServicePeriodFrom sets the "service_period_from" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableServicePeriodFrom(v *time.Time) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetServicePeriodFrom(*v)
	}
	return _u
}

// SetServicePeriodTo sets the "service_period_to" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetServicePeriodTo(v time.Time) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetServicePeriodTo(v)
	return _u
}

// SetNillableServicePeriodTo sets the "service_period_to" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableServicePeriodTo(v *time.Time) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetServicePeriodTo(*v)
	}
	return _u
}

// SetInvoiceID sets the "invoice_id" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetInvoiceID(v string) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetInvoiceID(v)
	return _u
}

// SetNillableInvoiceID sets the "invoice_id" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableInvoiceID(v *string) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetInvoiceID(*v)
	}
	return _u
}

// SetParentLineID sets the "parent_line_id" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetParentLineID(v string) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetParentLineID(v)
	return _u
}

// SetNillableParentLineID sets the "parent_line_id" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableParentLineID(v *string) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetParentLineID(*v)
	}
	return _u
}

// SetQuantity sets the "quantity" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetQuantity(v)
	return _u
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableQuantity(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetQuantity(*v)
	}
	return _u
}

// SetPerUnitAmount sets the "per_unit_amount" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetPerUnitAmount(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetPerUnitAmount(v)
	return _u
}

// SetNillablePerUnitAmount sets the "per_unit_amount" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillablePerUnitAmount(v *alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetPerUnitAmount(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetCategory(v billing.DetailedLineCategory) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableCategory(v *billing.DetailedLineCategory) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetPaymentTerm sets the "payment_term" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetPaymentTerm(v productcatalog.PaymentTermType) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetPaymentTerm(v)
	return _u
}

// SetNillablePaymentTerm sets the "payment_term" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillablePaymentTerm(v *productcatalog.PaymentTermType) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetPaymentTerm(*v)
	}
	return _u
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetInvoicingAppExternalID(v string) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetInvoicingAppExternalID(v)
	return _u
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableInvoicingAppExternalID(v *string) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetInvoicingAppExternalID(*v)
	}
	return _u
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) ClearInvoicingAppExternalID() *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.ClearInvoicingAppExternalID()
	return _u
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetChildUniqueReferenceID(v string) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.SetChildUniqueReferenceID(v)
	return _u
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableChildUniqueReferenceID(v *string) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetChildUniqueReferenceID(*v)
	}
	return _u
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) ClearChildUniqueReferenceID() *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.ClearChildUniqueReferenceID()
	return _u
}

// SetIndex sets the "index" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetIndex(v int) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.ResetIndex()
	_u.mutation.SetIndex(v)
	return _u
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetNillableIndex(v *int) *BillingInvoiceDetailedLineUpdateOne {
	if v != nil {
		_u.SetIndex(*v)
	}
	return _u
}

// AddIndex adds value to the "index" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) AddIndex(v int) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.AddIndex(v)
	return _u
}

// ClearIndex clears the value of the "index" field.
func (_u *BillingInvoiceDetailedLineUpdateOne) ClearIndex() *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.ClearIndex()
	return _u
}

// SetInvoice sets the "invoice" edge to the BillingInvoice entity.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetInvoice(v *BillingInvoice) *BillingInvoiceDetailedLineUpdateOne {
	return _u.SetInvoiceID(v.ID)
}

// SetParentLine sets the "parent_line" edge to the BillingInvoiceLine entity.
func (_u *BillingInvoiceDetailedLineUpdateOne) SetParentLine(v *BillingInvoiceLine) *BillingInvoiceDetailedLineUpdateOne {
	return _u.SetParentLineID(v.ID)
}

// AddAmountDiscountIDs adds the "amount_discounts" edge to the BillingInvoiceDetailedLineAmountDiscount entity by IDs.
func (_u *BillingInvoiceDetailedLineUpdateOne) AddAmountDiscountIDs(ids ...string) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.AddAmountDiscountIDs(ids...)
	return _u
}

// AddAmountDiscounts adds the "amount_discounts" edges to the BillingInvoiceDetailedLineAmountDiscount entity.
func (_u *BillingInvoiceDetailedLineUpdateOne) AddAmountDiscounts(v ...*BillingInvoiceDetailedLineAmountDiscount) *BillingInvoiceDetailedLineUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAmountDiscountIDs(ids...)
}

// Mutation returns the BillingInvoiceDetailedLineMutation object of the builder.
func (_u *BillingInvoiceDetailedLineUpdateOne) Mutation() *BillingInvoiceDetailedLineMutation {
	return _u.mutation
}

// ClearInvoice clears the "invoice" edge to the BillingInvoice entity.
func (_u *BillingInvoiceDetailedLineUpdateOne) ClearInvoice() *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.ClearInvoice()
	return _u
}

// ClearParentLine clears the "parent_line" edge to the BillingInvoiceLine entity.
func (_u *BillingInvoiceDetailedLineUpdateOne) ClearParentLine() *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.ClearParentLine()
	return _u
}

// ClearAmountDiscounts clears all "amount_discounts" edges to the BillingInvoiceDetailedLineAmountDiscount entity.
func (_u *BillingInvoiceDetailedLineUpdateOne) ClearAmountDiscounts() *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.ClearAmountDiscounts()
	return _u
}

// RemoveAmountDiscountIDs removes the "amount_discounts" edge to BillingInvoiceDetailedLineAmountDiscount entities by IDs.
func (_u *BillingInvoiceDetailedLineUpdateOne) RemoveAmountDiscountIDs(ids ...string) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.RemoveAmountDiscountIDs(ids...)
	return _u
}

// RemoveAmountDiscounts removes "amount_discounts" edges to BillingInvoiceDetailedLineAmountDiscount entities.
func (_u *BillingInvoiceDetailedLineUpdateOne) RemoveAmountDiscounts(v ...*BillingInvoiceDetailedLineAmountDiscount) *BillingInvoiceDetailedLineUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAmountDiscountIDs(ids...)
}

// Where appends a list predicates to the BillingInvoiceDetailedLineUpdate builder.
func (_u *BillingInvoiceDetailedLineUpdateOne) Where(ps ...predicate.BillingInvoiceDetailedLine) *BillingInvoiceDetailedLineUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BillingInvoiceDetailedLineUpdateOne) Select(field string, fields ...string) *BillingInvoiceDetailedLineUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BillingInvoiceDetailedLine entity.
func (_u *BillingInvoiceDetailedLineUpdateOne) Save(ctx context.Context) (*BillingInvoiceDetailedLine, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BillingInvoiceDetailedLineUpdateOne) SaveX(ctx context.Context) *BillingInvoiceDetailedLine {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BillingInvoiceDetailedLineUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BillingInvoiceDetailedLineUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BillingInvoiceDetailedLineUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := billinginvoicedetailedline.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BillingInvoiceDetailedLineUpdateOne) check() error {
	if v, ok := _u.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceDetailedLine.tax_config": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Category(); ok {
		if err := billinginvoicedetailedline.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceDetailedLine.category": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PaymentTerm(); ok {
		if err := billinginvoicedetailedline.PaymentTermValidator(v); err != nil {
			return &ValidationError{Name: "payment_term", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceDetailedLine.payment_term": %w`, err)}
		}
	}
	if _u.mutation.InvoiceCleared() && len(_u.mutation.InvoiceIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceDetailedLine.invoice"`)
	}
	if _u.mutation.ParentLineCleared() && len(_u.mutation.ParentLineIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "BillingInvoiceDetailedLine.parent_line"`)
	}
	return nil
}

func (_u *BillingInvoiceDetailedLineUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoiceDetailedLine, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoicedetailedline.Table, billinginvoicedetailedline.Columns, sqlgraph.NewFieldSpec(billinginvoicedetailedline.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoiceDetailedLine.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoicedetailedline.FieldID)
		for _, f := range fields {
			if !billinginvoicedetailedline.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoicedetailedline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Annotations(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldAnnotations, field.TypeJSON, value)
	}
	if _u.mutation.AnnotationsCleared() {
		_spec.ClearField(billinginvoicedetailedline.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(billinginvoicedetailedline.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(billinginvoicedetailedline.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(billinginvoicedetailedline.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.TaxConfig(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldTaxConfig, field.TypeJSON, value)
	}
	if _u.mutation.TaxConfigCleared() {
		_spec.ClearField(billinginvoicedetailedline.FieldTaxConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldAmount, field.TypeOther, value)
	}
	if value, ok := _u.mutation.TaxesTotal(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldTaxesTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.TaxesInclusiveTotal(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldTaxesInclusiveTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.TaxesExclusiveTotal(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldTaxesExclusiveTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.ChargesTotal(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldChargesTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.DiscountsTotal(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldDiscountsTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.Total(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldTotal, field.TypeOther, value)
	}
	if value, ok := _u.mutation.ServicePeriodFrom(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldServicePeriodFrom, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ServicePeriodTo(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldServicePeriodTo, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Quantity(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldQuantity, field.TypeOther, value)
	}
	if value, ok := _u.mutation.PerUnitAmount(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldPerUnitAmount, field.TypeOther, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.PaymentTerm(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldPaymentTerm, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldInvoicingAppExternalID, field.TypeString, value)
	}
	if _u.mutation.InvoicingAppExternalIDCleared() {
		_spec.ClearField(billinginvoicedetailedline.FieldInvoicingAppExternalID, field.TypeString)
	}
	if value, ok := _u.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldChildUniqueReferenceID, field.TypeString, value)
	}
	if _u.mutation.ChildUniqueReferenceIDCleared() {
		_spec.ClearField(billinginvoicedetailedline.FieldChildUniqueReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.Index(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldIndex, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedIndex(); ok {
		_spec.AddField(billinginvoicedetailedline.FieldIndex, field.TypeInt, value)
	}
	if _u.mutation.IndexCleared() {
		_spec.ClearField(billinginvoicedetailedline.FieldIndex, field.TypeInt)
	}
	if _u.mutation.InvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicedetailedline.InvoiceTable,
			Columns: []string{billinginvoicedetailedline.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicedetailedline.InvoiceTable,
			Columns: []string{billinginvoicedetailedline.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicedetailedline.ParentLineTable,
			Columns: []string{billinginvoicedetailedline.ParentLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicedetailedline.ParentLineTable,
			Columns: []string{billinginvoicedetailedline.ParentLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AmountDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicedetailedline.AmountDiscountsTable,
			Columns: []string{billinginvoicedetailedline.AmountDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicedetailedlineamountdiscount.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAmountDiscountsIDs(); len(nodes) > 0 && !_u.mutation.AmountDiscountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicedetailedline.AmountDiscountsTable,
			Columns: []string{billinginvoicedetailedline.AmountDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicedetailedlineamountdiscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AmountDiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicedetailedline.AmountDiscountsTable,
			Columns: []string{billinginvoicedetailedline.AmountDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicedetailedlineamountdiscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingInvoiceDetailedLine{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicedetailedline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
