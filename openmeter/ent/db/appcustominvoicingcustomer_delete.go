// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appcustominvoicingcustomer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// AppCustomInvoicingCustomerDelete is the builder for deleting a AppCustomInvoicingCustomer entity.
type AppCustomInvoicingCustomerDelete struct {
	config
	hooks    []Hook
	mutation *AppCustomInvoicingCustomerMutation
}

// Where appends a list predicates to the AppCustomInvoicingCustomerDelete builder.
func (acicd *AppCustomInvoicingCustomerDelete) Where(ps ...predicate.AppCustomInvoicingCustomer) *AppCustomInvoicingCustomerDelete {
	acicd.mutation.Where(ps...)
	return acicd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (acicd *AppCustomInvoicingCustomerDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, acicd.sqlExec, acicd.mutation, acicd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (acicd *AppCustomInvoicingCustomerDelete) ExecX(ctx context.Context) int {
	n, err := acicd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (acicd *AppCustomInvoicingCustomerDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(appcustominvoicingcustomer.Table, sqlgraph.NewFieldSpec(appcustominvoicingcustomer.FieldID, field.TypeInt))
	if ps := acicd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, acicd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	acicd.mutation.done = true
	return affected, err
}

// AppCustomInvoicingCustomerDeleteOne is the builder for deleting a single AppCustomInvoicingCustomer entity.
type AppCustomInvoicingCustomerDeleteOne struct {
	acicd *AppCustomInvoicingCustomerDelete
}

// Where appends a list predicates to the AppCustomInvoicingCustomerDelete builder.
func (acicdo *AppCustomInvoicingCustomerDeleteOne) Where(ps ...predicate.AppCustomInvoicingCustomer) *AppCustomInvoicingCustomerDeleteOne {
	acicdo.acicd.mutation.Where(ps...)
	return acicdo
}

// Exec executes the deletion query.
func (acicdo *AppCustomInvoicingCustomerDeleteOne) Exec(ctx context.Context) error {
	n, err := acicdo.acicd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{appcustominvoicingcustomer.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (acicdo *AppCustomInvoicingCustomerDeleteOne) ExecX(ctx context.Context) {
	if err := acicdo.Exec(ctx); err != nil {
		panic(err)
	}
}
