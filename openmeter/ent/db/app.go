// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/app"
	dbapp "github.com/openmeterio/openmeter/openmeter/ent/db/app"
)

// App is the model entity for the App schema.
type App struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Type holds the value of the "type" field.
	Type app.AppType `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status app.AppStatus `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppQuery when eager-loading is set.
	Edges        AppEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AppEdges holds the relations/edges for other nodes in the graph.
type AppEdges struct {
	// CustomerApps holds the value of the customer_apps edge.
	CustomerApps []*AppCustomer `json:"customer_apps,omitempty"`
	// BillingProfileTaxApp holds the value of the billing_profile_tax_app edge.
	BillingProfileTaxApp []*BillingProfile `json:"billing_profile_tax_app,omitempty"`
	// BillingProfileInvoicingApp holds the value of the billing_profile_invoicing_app edge.
	BillingProfileInvoicingApp []*BillingProfile `json:"billing_profile_invoicing_app,omitempty"`
	// BillingProfilePaymentApp holds the value of the billing_profile_payment_app edge.
	BillingProfilePaymentApp []*BillingProfile `json:"billing_profile_payment_app,omitempty"`
	// BillingInvoiceTaxApp holds the value of the billing_invoice_tax_app edge.
	BillingInvoiceTaxApp []*BillingInvoice `json:"billing_invoice_tax_app,omitempty"`
	// BillingInvoiceInvoicingApp holds the value of the billing_invoice_invoicing_app edge.
	BillingInvoiceInvoicingApp []*BillingInvoice `json:"billing_invoice_invoicing_app,omitempty"`
	// BillingInvoicePaymentApp holds the value of the billing_invoice_payment_app edge.
	BillingInvoicePaymentApp []*BillingInvoice `json:"billing_invoice_payment_app,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// CustomerAppsOrErr returns the CustomerApps value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) CustomerAppsOrErr() ([]*AppCustomer, error) {
	if e.loadedTypes[0] {
		return e.CustomerApps, nil
	}
	return nil, &NotLoadedError{edge: "customer_apps"}
}

// BillingProfileTaxAppOrErr returns the BillingProfileTaxApp value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) BillingProfileTaxAppOrErr() ([]*BillingProfile, error) {
	if e.loadedTypes[1] {
		return e.BillingProfileTaxApp, nil
	}
	return nil, &NotLoadedError{edge: "billing_profile_tax_app"}
}

// BillingProfileInvoicingAppOrErr returns the BillingProfileInvoicingApp value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) BillingProfileInvoicingAppOrErr() ([]*BillingProfile, error) {
	if e.loadedTypes[2] {
		return e.BillingProfileInvoicingApp, nil
	}
	return nil, &NotLoadedError{edge: "billing_profile_invoicing_app"}
}

// BillingProfilePaymentAppOrErr returns the BillingProfilePaymentApp value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) BillingProfilePaymentAppOrErr() ([]*BillingProfile, error) {
	if e.loadedTypes[3] {
		return e.BillingProfilePaymentApp, nil
	}
	return nil, &NotLoadedError{edge: "billing_profile_payment_app"}
}

// BillingInvoiceTaxAppOrErr returns the BillingInvoiceTaxApp value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) BillingInvoiceTaxAppOrErr() ([]*BillingInvoice, error) {
	if e.loadedTypes[4] {
		return e.BillingInvoiceTaxApp, nil
	}
	return nil, &NotLoadedError{edge: "billing_invoice_tax_app"}
}

// BillingInvoiceInvoicingAppOrErr returns the BillingInvoiceInvoicingApp value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) BillingInvoiceInvoicingAppOrErr() ([]*BillingInvoice, error) {
	if e.loadedTypes[5] {
		return e.BillingInvoiceInvoicingApp, nil
	}
	return nil, &NotLoadedError{edge: "billing_invoice_invoicing_app"}
}

// BillingInvoicePaymentAppOrErr returns the BillingInvoicePaymentApp value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) BillingInvoicePaymentAppOrErr() ([]*BillingInvoice, error) {
	if e.loadedTypes[6] {
		return e.BillingInvoicePaymentApp, nil
	}
	return nil, &NotLoadedError{edge: "billing_invoice_payment_app"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*App) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dbapp.FieldMetadata:
			values[i] = new([]byte)
		case dbapp.FieldID, dbapp.FieldNamespace, dbapp.FieldName, dbapp.FieldDescription, dbapp.FieldType, dbapp.FieldStatus:
			values[i] = new(sql.NullString)
		case dbapp.FieldCreatedAt, dbapp.FieldUpdatedAt, dbapp.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the App fields.
func (_m *App) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dbapp.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case dbapp.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				_m.Namespace = value.String
			}
		case dbapp.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case dbapp.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case dbapp.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case dbapp.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case dbapp.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case dbapp.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = new(string)
				*_m.Description = value.String
			}
		case dbapp.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = app.AppType(value.String)
			}
		case dbapp.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = app.AppStatus(value.String)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the App.
// This includes values selected through modifiers, order, etc.
func (_m *App) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryCustomerApps queries the "customer_apps" edge of the App entity.
func (_m *App) QueryCustomerApps() *AppCustomerQuery {
	return NewAppClient(_m.config).QueryCustomerApps(_m)
}

// QueryBillingProfileTaxApp queries the "billing_profile_tax_app" edge of the App entity.
func (_m *App) QueryBillingProfileTaxApp() *BillingProfileQuery {
	return NewAppClient(_m.config).QueryBillingProfileTaxApp(_m)
}

// QueryBillingProfileInvoicingApp queries the "billing_profile_invoicing_app" edge of the App entity.
func (_m *App) QueryBillingProfileInvoicingApp() *BillingProfileQuery {
	return NewAppClient(_m.config).QueryBillingProfileInvoicingApp(_m)
}

// QueryBillingProfilePaymentApp queries the "billing_profile_payment_app" edge of the App entity.
func (_m *App) QueryBillingProfilePaymentApp() *BillingProfileQuery {
	return NewAppClient(_m.config).QueryBillingProfilePaymentApp(_m)
}

// QueryBillingInvoiceTaxApp queries the "billing_invoice_tax_app" edge of the App entity.
func (_m *App) QueryBillingInvoiceTaxApp() *BillingInvoiceQuery {
	return NewAppClient(_m.config).QueryBillingInvoiceTaxApp(_m)
}

// QueryBillingInvoiceInvoicingApp queries the "billing_invoice_invoicing_app" edge of the App entity.
func (_m *App) QueryBillingInvoiceInvoicingApp() *BillingInvoiceQuery {
	return NewAppClient(_m.config).QueryBillingInvoiceInvoicingApp(_m)
}

// QueryBillingInvoicePaymentApp queries the "billing_invoice_payment_app" edge of the App entity.
func (_m *App) QueryBillingInvoicePaymentApp() *BillingInvoiceQuery {
	return NewAppClient(_m.config).QueryBillingInvoicePaymentApp(_m)
}

// Update returns a builder for updating this App.
// Note that you need to call App.Unwrap() before calling this method if this App
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *App) Update() *AppUpdateOne {
	return NewAppClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the App entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *App) Unwrap() *App {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("db: App is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *App) String() string {
	var builder strings.Builder
	builder.WriteString("App(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("namespace=")
	builder.WriteString(_m.Namespace)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	if v := _m.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Apps is a parsable slice of App.
type Apps []*App
