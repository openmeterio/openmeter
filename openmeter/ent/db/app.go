// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	appentitybase "github.com/openmeterio/openmeter/openmeter/app/entity/base"
	"github.com/openmeterio/openmeter/openmeter/ent/db/app"
)

// App is the model entity for the App schema.
type App struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Type holds the value of the "type" field.
	Type appentitybase.AppType `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status appentitybase.AppStatus `json:"status,omitempty"`
	// IsDefault holds the value of the "is_default" field.
	IsDefault bool `json:"is_default,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppQuery when eager-loading is set.
	Edges        AppEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AppEdges holds the relations/edges for other nodes in the graph.
type AppEdges struct {
	// CustomerApps holds the value of the customer_apps edge.
	CustomerApps []*AppCustomer `json:"customer_apps,omitempty"`
	// TaxApp holds the value of the tax_app edge.
	TaxApp []*BillingProfile `json:"tax_app,omitempty"`
	// InvoicingApp holds the value of the invoicing_app edge.
	InvoicingApp []*BillingProfile `json:"invoicing_app,omitempty"`
	// PaymentApp holds the value of the payment_app edge.
	PaymentApp []*BillingProfile `json:"payment_app,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CustomerAppsOrErr returns the CustomerApps value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) CustomerAppsOrErr() ([]*AppCustomer, error) {
	if e.loadedTypes[0] {
		return e.CustomerApps, nil
	}
	return nil, &NotLoadedError{edge: "customer_apps"}
}

// TaxAppOrErr returns the TaxApp value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) TaxAppOrErr() ([]*BillingProfile, error) {
	if e.loadedTypes[1] {
		return e.TaxApp, nil
	}
	return nil, &NotLoadedError{edge: "tax_app"}
}

// InvoicingAppOrErr returns the InvoicingApp value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) InvoicingAppOrErr() ([]*BillingProfile, error) {
	if e.loadedTypes[2] {
		return e.InvoicingApp, nil
	}
	return nil, &NotLoadedError{edge: "invoicing_app"}
}

// PaymentAppOrErr returns the PaymentApp value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) PaymentAppOrErr() ([]*BillingProfile, error) {
	if e.loadedTypes[3] {
		return e.PaymentApp, nil
	}
	return nil, &NotLoadedError{edge: "payment_app"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*App) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case app.FieldMetadata:
			values[i] = new([]byte)
		case app.FieldIsDefault:
			values[i] = new(sql.NullBool)
		case app.FieldID, app.FieldNamespace, app.FieldName, app.FieldDescription, app.FieldType, app.FieldStatus:
			values[i] = new(sql.NullString)
		case app.FieldCreatedAt, app.FieldUpdatedAt, app.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the App fields.
func (a *App) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case app.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case app.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				a.Namespace = value.String
			}
		case app.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case app.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case app.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case app.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = new(time.Time)
				*a.DeletedAt = value.Time
			}
		case app.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case app.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = new(string)
				*a.Description = value.String
			}
		case app.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = appentitybase.AppType(value.String)
			}
		case app.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = appentitybase.AppStatus(value.String)
			}
		case app.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				a.IsDefault = value.Bool
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the App.
// This includes values selected through modifiers, order, etc.
func (a *App) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryCustomerApps queries the "customer_apps" edge of the App entity.
func (a *App) QueryCustomerApps() *AppCustomerQuery {
	return NewAppClient(a.config).QueryCustomerApps(a)
}

// QueryTaxApp queries the "tax_app" edge of the App entity.
func (a *App) QueryTaxApp() *BillingProfileQuery {
	return NewAppClient(a.config).QueryTaxApp(a)
}

// QueryInvoicingApp queries the "invoicing_app" edge of the App entity.
func (a *App) QueryInvoicingApp() *BillingProfileQuery {
	return NewAppClient(a.config).QueryInvoicingApp(a)
}

// QueryPaymentApp queries the "payment_app" edge of the App entity.
func (a *App) QueryPaymentApp() *BillingProfileQuery {
	return NewAppClient(a.config).QueryPaymentApp(a)
}

// Update returns a builder for updating this App.
// Note that you need to call App.Unwrap() before calling this method if this App
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *App) Update() *AppUpdateOne {
	return NewAppClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the App entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *App) Unwrap() *App {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("db: App is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *App) String() string {
	var builder strings.Builder
	builder.WriteString("App(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("namespace=")
	builder.WriteString(a.Namespace)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", a.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := a.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	if v := a.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", a.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", a.IsDefault))
	builder.WriteByte(')')
	return builder.String()
}

// Apps is a parsable slice of App.
type Apps []*App
