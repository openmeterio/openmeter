// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/entitlement"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonratecarditemlink"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/isodate"
)

// SubscriptionItemUpdate is the builder for updating SubscriptionItem entities.
type SubscriptionItemUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionItemMutation
}

// Where appends a list predicates to the SubscriptionItemUpdate builder.
func (siu *SubscriptionItemUpdate) Where(ps ...predicate.SubscriptionItem) *SubscriptionItemUpdate {
	siu.mutation.Where(ps...)
	return siu
}

// SetUpdatedAt sets the "updated_at" field.
func (siu *SubscriptionItemUpdate) SetUpdatedAt(t time.Time) *SubscriptionItemUpdate {
	siu.mutation.SetUpdatedAt(t)
	return siu
}

// SetDeletedAt sets the "deleted_at" field.
func (siu *SubscriptionItemUpdate) SetDeletedAt(t time.Time) *SubscriptionItemUpdate {
	siu.mutation.SetDeletedAt(t)
	return siu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (siu *SubscriptionItemUpdate) SetNillableDeletedAt(t *time.Time) *SubscriptionItemUpdate {
	if t != nil {
		siu.SetDeletedAt(*t)
	}
	return siu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (siu *SubscriptionItemUpdate) ClearDeletedAt() *SubscriptionItemUpdate {
	siu.mutation.ClearDeletedAt()
	return siu
}

// SetMetadata sets the "metadata" field.
func (siu *SubscriptionItemUpdate) SetMetadata(m map[string]string) *SubscriptionItemUpdate {
	siu.mutation.SetMetadata(m)
	return siu
}

// ClearMetadata clears the value of the "metadata" field.
func (siu *SubscriptionItemUpdate) ClearMetadata() *SubscriptionItemUpdate {
	siu.mutation.ClearMetadata()
	return siu
}

// SetActiveFrom sets the "active_from" field.
func (siu *SubscriptionItemUpdate) SetActiveFrom(t time.Time) *SubscriptionItemUpdate {
	siu.mutation.SetActiveFrom(t)
	return siu
}

// SetNillableActiveFrom sets the "active_from" field if the given value is not nil.
func (siu *SubscriptionItemUpdate) SetNillableActiveFrom(t *time.Time) *SubscriptionItemUpdate {
	if t != nil {
		siu.SetActiveFrom(*t)
	}
	return siu
}

// SetActiveTo sets the "active_to" field.
func (siu *SubscriptionItemUpdate) SetActiveTo(t time.Time) *SubscriptionItemUpdate {
	siu.mutation.SetActiveTo(t)
	return siu
}

// SetNillableActiveTo sets the "active_to" field if the given value is not nil.
func (siu *SubscriptionItemUpdate) SetNillableActiveTo(t *time.Time) *SubscriptionItemUpdate {
	if t != nil {
		siu.SetActiveTo(*t)
	}
	return siu
}

// ClearActiveTo clears the value of the "active_to" field.
func (siu *SubscriptionItemUpdate) ClearActiveTo() *SubscriptionItemUpdate {
	siu.mutation.ClearActiveTo()
	return siu
}

// SetEntitlementID sets the "entitlement_id" field.
func (siu *SubscriptionItemUpdate) SetEntitlementID(s string) *SubscriptionItemUpdate {
	siu.mutation.SetEntitlementID(s)
	return siu
}

// SetNillableEntitlementID sets the "entitlement_id" field if the given value is not nil.
func (siu *SubscriptionItemUpdate) SetNillableEntitlementID(s *string) *SubscriptionItemUpdate {
	if s != nil {
		siu.SetEntitlementID(*s)
	}
	return siu
}

// ClearEntitlementID clears the value of the "entitlement_id" field.
func (siu *SubscriptionItemUpdate) ClearEntitlementID() *SubscriptionItemUpdate {
	siu.mutation.ClearEntitlementID()
	return siu
}

// SetRestartsBillingPeriod sets the "restarts_billing_period" field.
func (siu *SubscriptionItemUpdate) SetRestartsBillingPeriod(b bool) *SubscriptionItemUpdate {
	siu.mutation.SetRestartsBillingPeriod(b)
	return siu
}

// SetNillableRestartsBillingPeriod sets the "restarts_billing_period" field if the given value is not nil.
func (siu *SubscriptionItemUpdate) SetNillableRestartsBillingPeriod(b *bool) *SubscriptionItemUpdate {
	if b != nil {
		siu.SetRestartsBillingPeriod(*b)
	}
	return siu
}

// ClearRestartsBillingPeriod clears the value of the "restarts_billing_period" field.
func (siu *SubscriptionItemUpdate) ClearRestartsBillingPeriod() *SubscriptionItemUpdate {
	siu.mutation.ClearRestartsBillingPeriod()
	return siu
}

// SetActiveFromOverrideRelativeToPhaseStart sets the "active_from_override_relative_to_phase_start" field.
func (siu *SubscriptionItemUpdate) SetActiveFromOverrideRelativeToPhaseStart(i isodate.String) *SubscriptionItemUpdate {
	siu.mutation.SetActiveFromOverrideRelativeToPhaseStart(i)
	return siu
}

// SetNillableActiveFromOverrideRelativeToPhaseStart sets the "active_from_override_relative_to_phase_start" field if the given value is not nil.
func (siu *SubscriptionItemUpdate) SetNillableActiveFromOverrideRelativeToPhaseStart(i *isodate.String) *SubscriptionItemUpdate {
	if i != nil {
		siu.SetActiveFromOverrideRelativeToPhaseStart(*i)
	}
	return siu
}

// ClearActiveFromOverrideRelativeToPhaseStart clears the value of the "active_from_override_relative_to_phase_start" field.
func (siu *SubscriptionItemUpdate) ClearActiveFromOverrideRelativeToPhaseStart() *SubscriptionItemUpdate {
	siu.mutation.ClearActiveFromOverrideRelativeToPhaseStart()
	return siu
}

// SetActiveToOverrideRelativeToPhaseStart sets the "active_to_override_relative_to_phase_start" field.
func (siu *SubscriptionItemUpdate) SetActiveToOverrideRelativeToPhaseStart(i isodate.String) *SubscriptionItemUpdate {
	siu.mutation.SetActiveToOverrideRelativeToPhaseStart(i)
	return siu
}

// SetNillableActiveToOverrideRelativeToPhaseStart sets the "active_to_override_relative_to_phase_start" field if the given value is not nil.
func (siu *SubscriptionItemUpdate) SetNillableActiveToOverrideRelativeToPhaseStart(i *isodate.String) *SubscriptionItemUpdate {
	if i != nil {
		siu.SetActiveToOverrideRelativeToPhaseStart(*i)
	}
	return siu
}

// ClearActiveToOverrideRelativeToPhaseStart clears the value of the "active_to_override_relative_to_phase_start" field.
func (siu *SubscriptionItemUpdate) ClearActiveToOverrideRelativeToPhaseStart() *SubscriptionItemUpdate {
	siu.mutation.ClearActiveToOverrideRelativeToPhaseStart()
	return siu
}

// SetName sets the "name" field.
func (siu *SubscriptionItemUpdate) SetName(s string) *SubscriptionItemUpdate {
	siu.mutation.SetName(s)
	return siu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (siu *SubscriptionItemUpdate) SetNillableName(s *string) *SubscriptionItemUpdate {
	if s != nil {
		siu.SetName(*s)
	}
	return siu
}

// SetDescription sets the "description" field.
func (siu *SubscriptionItemUpdate) SetDescription(s string) *SubscriptionItemUpdate {
	siu.mutation.SetDescription(s)
	return siu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (siu *SubscriptionItemUpdate) SetNillableDescription(s *string) *SubscriptionItemUpdate {
	if s != nil {
		siu.SetDescription(*s)
	}
	return siu
}

// ClearDescription clears the value of the "description" field.
func (siu *SubscriptionItemUpdate) ClearDescription() *SubscriptionItemUpdate {
	siu.mutation.ClearDescription()
	return siu
}

// SetFeatureKey sets the "feature_key" field.
func (siu *SubscriptionItemUpdate) SetFeatureKey(s string) *SubscriptionItemUpdate {
	siu.mutation.SetFeatureKey(s)
	return siu
}

// SetNillableFeatureKey sets the "feature_key" field if the given value is not nil.
func (siu *SubscriptionItemUpdate) SetNillableFeatureKey(s *string) *SubscriptionItemUpdate {
	if s != nil {
		siu.SetFeatureKey(*s)
	}
	return siu
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (siu *SubscriptionItemUpdate) ClearFeatureKey() *SubscriptionItemUpdate {
	siu.mutation.ClearFeatureKey()
	return siu
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (siu *SubscriptionItemUpdate) SetEntitlementTemplate(pt *productcatalog.EntitlementTemplate) *SubscriptionItemUpdate {
	siu.mutation.SetEntitlementTemplate(pt)
	return siu
}

// ClearEntitlementTemplate clears the value of the "entitlement_template" field.
func (siu *SubscriptionItemUpdate) ClearEntitlementTemplate() *SubscriptionItemUpdate {
	siu.mutation.ClearEntitlementTemplate()
	return siu
}

// SetTaxConfig sets the "tax_config" field.
func (siu *SubscriptionItemUpdate) SetTaxConfig(pc *productcatalog.TaxConfig) *SubscriptionItemUpdate {
	siu.mutation.SetTaxConfig(pc)
	return siu
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (siu *SubscriptionItemUpdate) ClearTaxConfig() *SubscriptionItemUpdate {
	siu.mutation.ClearTaxConfig()
	return siu
}

// SetBillingCadence sets the "billing_cadence" field.
func (siu *SubscriptionItemUpdate) SetBillingCadence(i isodate.String) *SubscriptionItemUpdate {
	siu.mutation.SetBillingCadence(i)
	return siu
}

// SetNillableBillingCadence sets the "billing_cadence" field if the given value is not nil.
func (siu *SubscriptionItemUpdate) SetNillableBillingCadence(i *isodate.String) *SubscriptionItemUpdate {
	if i != nil {
		siu.SetBillingCadence(*i)
	}
	return siu
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (siu *SubscriptionItemUpdate) ClearBillingCadence() *SubscriptionItemUpdate {
	siu.mutation.ClearBillingCadence()
	return siu
}

// SetPrice sets the "price" field.
func (siu *SubscriptionItemUpdate) SetPrice(pr *productcatalog.Price) *SubscriptionItemUpdate {
	siu.mutation.SetPrice(pr)
	return siu
}

// ClearPrice clears the value of the "price" field.
func (siu *SubscriptionItemUpdate) ClearPrice() *SubscriptionItemUpdate {
	siu.mutation.ClearPrice()
	return siu
}

// SetDiscounts sets the "discounts" field.
func (siu *SubscriptionItemUpdate) SetDiscounts(pr *productcatalog.Discounts) *SubscriptionItemUpdate {
	siu.mutation.SetDiscounts(pr)
	return siu
}

// ClearDiscounts clears the value of the "discounts" field.
func (siu *SubscriptionItemUpdate) ClearDiscounts() *SubscriptionItemUpdate {
	siu.mutation.ClearDiscounts()
	return siu
}

// SetEntitlement sets the "entitlement" edge to the Entitlement entity.
func (siu *SubscriptionItemUpdate) SetEntitlement(e *Entitlement) *SubscriptionItemUpdate {
	return siu.SetEntitlementID(e.ID)
}

// AddBillingLineIDs adds the "billing_lines" edge to the BillingInvoiceLine entity by IDs.
func (siu *SubscriptionItemUpdate) AddBillingLineIDs(ids ...string) *SubscriptionItemUpdate {
	siu.mutation.AddBillingLineIDs(ids...)
	return siu
}

// AddBillingLines adds the "billing_lines" edges to the BillingInvoiceLine entity.
func (siu *SubscriptionItemUpdate) AddBillingLines(b ...*BillingInvoiceLine) *SubscriptionItemUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return siu.AddBillingLineIDs(ids...)
}

// AddSubscriptionAddonRateCardItemIDs adds the "subscription_addon_rate_card_items" edge to the SubscriptionAddonRateCardItemLink entity by IDs.
func (siu *SubscriptionItemUpdate) AddSubscriptionAddonRateCardItemIDs(ids ...string) *SubscriptionItemUpdate {
	siu.mutation.AddSubscriptionAddonRateCardItemIDs(ids...)
	return siu
}

// AddSubscriptionAddonRateCardItems adds the "subscription_addon_rate_card_items" edges to the SubscriptionAddonRateCardItemLink entity.
func (siu *SubscriptionItemUpdate) AddSubscriptionAddonRateCardItems(s ...*SubscriptionAddonRateCardItemLink) *SubscriptionItemUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siu.AddSubscriptionAddonRateCardItemIDs(ids...)
}

// Mutation returns the SubscriptionItemMutation object of the builder.
func (siu *SubscriptionItemUpdate) Mutation() *SubscriptionItemMutation {
	return siu.mutation
}

// ClearEntitlement clears the "entitlement" edge to the Entitlement entity.
func (siu *SubscriptionItemUpdate) ClearEntitlement() *SubscriptionItemUpdate {
	siu.mutation.ClearEntitlement()
	return siu
}

// ClearBillingLines clears all "billing_lines" edges to the BillingInvoiceLine entity.
func (siu *SubscriptionItemUpdate) ClearBillingLines() *SubscriptionItemUpdate {
	siu.mutation.ClearBillingLines()
	return siu
}

// RemoveBillingLineIDs removes the "billing_lines" edge to BillingInvoiceLine entities by IDs.
func (siu *SubscriptionItemUpdate) RemoveBillingLineIDs(ids ...string) *SubscriptionItemUpdate {
	siu.mutation.RemoveBillingLineIDs(ids...)
	return siu
}

// RemoveBillingLines removes "billing_lines" edges to BillingInvoiceLine entities.
func (siu *SubscriptionItemUpdate) RemoveBillingLines(b ...*BillingInvoiceLine) *SubscriptionItemUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return siu.RemoveBillingLineIDs(ids...)
}

// ClearSubscriptionAddonRateCardItems clears all "subscription_addon_rate_card_items" edges to the SubscriptionAddonRateCardItemLink entity.
func (siu *SubscriptionItemUpdate) ClearSubscriptionAddonRateCardItems() *SubscriptionItemUpdate {
	siu.mutation.ClearSubscriptionAddonRateCardItems()
	return siu
}

// RemoveSubscriptionAddonRateCardItemIDs removes the "subscription_addon_rate_card_items" edge to SubscriptionAddonRateCardItemLink entities by IDs.
func (siu *SubscriptionItemUpdate) RemoveSubscriptionAddonRateCardItemIDs(ids ...string) *SubscriptionItemUpdate {
	siu.mutation.RemoveSubscriptionAddonRateCardItemIDs(ids...)
	return siu
}

// RemoveSubscriptionAddonRateCardItems removes "subscription_addon_rate_card_items" edges to SubscriptionAddonRateCardItemLink entities.
func (siu *SubscriptionItemUpdate) RemoveSubscriptionAddonRateCardItems(s ...*SubscriptionAddonRateCardItemLink) *SubscriptionItemUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siu.RemoveSubscriptionAddonRateCardItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (siu *SubscriptionItemUpdate) Save(ctx context.Context) (int, error) {
	siu.defaults()
	return withHooks(ctx, siu.sqlSave, siu.mutation, siu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siu *SubscriptionItemUpdate) SaveX(ctx context.Context) int {
	affected, err := siu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siu *SubscriptionItemUpdate) Exec(ctx context.Context) error {
	_, err := siu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siu *SubscriptionItemUpdate) ExecX(ctx context.Context) {
	if err := siu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siu *SubscriptionItemUpdate) defaults() {
	if _, ok := siu.mutation.UpdatedAt(); !ok {
		v := subscriptionitem.UpdateDefaultUpdatedAt()
		siu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siu *SubscriptionItemUpdate) check() error {
	if v, ok := siu.mutation.Name(); ok {
		if err := subscriptionitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "SubscriptionItem.name": %w`, err)}
		}
	}
	if v, ok := siu.mutation.EntitlementTemplate(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "entitlement_template", err: fmt.Errorf(`db: validator failed for field "SubscriptionItem.entitlement_template": %w`, err)}
		}
	}
	if v, ok := siu.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "SubscriptionItem.tax_config": %w`, err)}
		}
	}
	if v, ok := siu.mutation.Price(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`db: validator failed for field "SubscriptionItem.price": %w`, err)}
		}
	}
	if siu.mutation.PhaseCleared() && len(siu.mutation.PhaseIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionItem.phase"`)
	}
	return nil
}

func (siu *SubscriptionItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := siu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionitem.Table, subscriptionitem.Columns, sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString))
	if ps := siu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siu.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := siu.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionitem.FieldDeletedAt, field.TypeTime, value)
	}
	if siu.mutation.DeletedAtCleared() {
		_spec.ClearField(subscriptionitem.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := siu.mutation.Metadata(); ok {
		_spec.SetField(subscriptionitem.FieldMetadata, field.TypeJSON, value)
	}
	if siu.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionitem.FieldMetadata, field.TypeJSON)
	}
	if value, ok := siu.mutation.ActiveFrom(); ok {
		_spec.SetField(subscriptionitem.FieldActiveFrom, field.TypeTime, value)
	}
	if value, ok := siu.mutation.ActiveTo(); ok {
		_spec.SetField(subscriptionitem.FieldActiveTo, field.TypeTime, value)
	}
	if siu.mutation.ActiveToCleared() {
		_spec.ClearField(subscriptionitem.FieldActiveTo, field.TypeTime)
	}
	if value, ok := siu.mutation.RestartsBillingPeriod(); ok {
		_spec.SetField(subscriptionitem.FieldRestartsBillingPeriod, field.TypeBool, value)
	}
	if siu.mutation.RestartsBillingPeriodCleared() {
		_spec.ClearField(subscriptionitem.FieldRestartsBillingPeriod, field.TypeBool)
	}
	if value, ok := siu.mutation.ActiveFromOverrideRelativeToPhaseStart(); ok {
		_spec.SetField(subscriptionitem.FieldActiveFromOverrideRelativeToPhaseStart, field.TypeString, value)
	}
	if siu.mutation.ActiveFromOverrideRelativeToPhaseStartCleared() {
		_spec.ClearField(subscriptionitem.FieldActiveFromOverrideRelativeToPhaseStart, field.TypeString)
	}
	if value, ok := siu.mutation.ActiveToOverrideRelativeToPhaseStart(); ok {
		_spec.SetField(subscriptionitem.FieldActiveToOverrideRelativeToPhaseStart, field.TypeString, value)
	}
	if siu.mutation.ActiveToOverrideRelativeToPhaseStartCleared() {
		_spec.ClearField(subscriptionitem.FieldActiveToOverrideRelativeToPhaseStart, field.TypeString)
	}
	if value, ok := siu.mutation.Name(); ok {
		_spec.SetField(subscriptionitem.FieldName, field.TypeString, value)
	}
	if value, ok := siu.mutation.Description(); ok {
		_spec.SetField(subscriptionitem.FieldDescription, field.TypeString, value)
	}
	if siu.mutation.DescriptionCleared() {
		_spec.ClearField(subscriptionitem.FieldDescription, field.TypeString)
	}
	if value, ok := siu.mutation.FeatureKey(); ok {
		_spec.SetField(subscriptionitem.FieldFeatureKey, field.TypeString, value)
	}
	if siu.mutation.FeatureKeyCleared() {
		_spec.ClearField(subscriptionitem.FieldFeatureKey, field.TypeString)
	}
	if value, ok := siu.mutation.EntitlementTemplate(); ok {
		vv, err := subscriptionitem.ValueScanner.EntitlementTemplate.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(subscriptionitem.FieldEntitlementTemplate, field.TypeString, vv)
	}
	if siu.mutation.EntitlementTemplateCleared() {
		_spec.ClearField(subscriptionitem.FieldEntitlementTemplate, field.TypeString)
	}
	if value, ok := siu.mutation.TaxConfig(); ok {
		vv, err := subscriptionitem.ValueScanner.TaxConfig.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(subscriptionitem.FieldTaxConfig, field.TypeString, vv)
	}
	if siu.mutation.TaxConfigCleared() {
		_spec.ClearField(subscriptionitem.FieldTaxConfig, field.TypeString)
	}
	if value, ok := siu.mutation.BillingCadence(); ok {
		_spec.SetField(subscriptionitem.FieldBillingCadence, field.TypeString, value)
	}
	if siu.mutation.BillingCadenceCleared() {
		_spec.ClearField(subscriptionitem.FieldBillingCadence, field.TypeString)
	}
	if value, ok := siu.mutation.Price(); ok {
		vv, err := subscriptionitem.ValueScanner.Price.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(subscriptionitem.FieldPrice, field.TypeString, vv)
	}
	if siu.mutation.PriceCleared() {
		_spec.ClearField(subscriptionitem.FieldPrice, field.TypeString)
	}
	if value, ok := siu.mutation.Discounts(); ok {
		vv, err := subscriptionitem.ValueScanner.Discounts.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(subscriptionitem.FieldDiscounts, field.TypeString, vv)
	}
	if siu.mutation.DiscountsCleared() {
		_spec.ClearField(subscriptionitem.FieldDiscounts, field.TypeString)
	}
	if siu.mutation.EntitlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionitem.EntitlementTable,
			Columns: []string{subscriptionitem.EntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.EntitlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionitem.EntitlementTable,
			Columns: []string{subscriptionitem.EntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.BillingLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionitem.BillingLinesTable,
			Columns: []string{subscriptionitem.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedBillingLinesIDs(); len(nodes) > 0 && !siu.mutation.BillingLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionitem.BillingLinesTable,
			Columns: []string{subscriptionitem.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.BillingLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionitem.BillingLinesTable,
			Columns: []string{subscriptionitem.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.SubscriptionAddonRateCardItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionitem.SubscriptionAddonRateCardItemsTable,
			Columns: []string{subscriptionitem.SubscriptionAddonRateCardItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonratecarditemlink.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedSubscriptionAddonRateCardItemsIDs(); len(nodes) > 0 && !siu.mutation.SubscriptionAddonRateCardItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionitem.SubscriptionAddonRateCardItemsTable,
			Columns: []string{subscriptionitem.SubscriptionAddonRateCardItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonratecarditemlink.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.SubscriptionAddonRateCardItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionitem.SubscriptionAddonRateCardItemsTable,
			Columns: []string{subscriptionitem.SubscriptionAddonRateCardItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonratecarditemlink.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	siu.mutation.done = true
	return n, nil
}

// SubscriptionItemUpdateOne is the builder for updating a single SubscriptionItem entity.
type SubscriptionItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionItemMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (siuo *SubscriptionItemUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionItemUpdateOne {
	siuo.mutation.SetUpdatedAt(t)
	return siuo
}

// SetDeletedAt sets the "deleted_at" field.
func (siuo *SubscriptionItemUpdateOne) SetDeletedAt(t time.Time) *SubscriptionItemUpdateOne {
	siuo.mutation.SetDeletedAt(t)
	return siuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (siuo *SubscriptionItemUpdateOne) SetNillableDeletedAt(t *time.Time) *SubscriptionItemUpdateOne {
	if t != nil {
		siuo.SetDeletedAt(*t)
	}
	return siuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (siuo *SubscriptionItemUpdateOne) ClearDeletedAt() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearDeletedAt()
	return siuo
}

// SetMetadata sets the "metadata" field.
func (siuo *SubscriptionItemUpdateOne) SetMetadata(m map[string]string) *SubscriptionItemUpdateOne {
	siuo.mutation.SetMetadata(m)
	return siuo
}

// ClearMetadata clears the value of the "metadata" field.
func (siuo *SubscriptionItemUpdateOne) ClearMetadata() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearMetadata()
	return siuo
}

// SetActiveFrom sets the "active_from" field.
func (siuo *SubscriptionItemUpdateOne) SetActiveFrom(t time.Time) *SubscriptionItemUpdateOne {
	siuo.mutation.SetActiveFrom(t)
	return siuo
}

// SetNillableActiveFrom sets the "active_from" field if the given value is not nil.
func (siuo *SubscriptionItemUpdateOne) SetNillableActiveFrom(t *time.Time) *SubscriptionItemUpdateOne {
	if t != nil {
		siuo.SetActiveFrom(*t)
	}
	return siuo
}

// SetActiveTo sets the "active_to" field.
func (siuo *SubscriptionItemUpdateOne) SetActiveTo(t time.Time) *SubscriptionItemUpdateOne {
	siuo.mutation.SetActiveTo(t)
	return siuo
}

// SetNillableActiveTo sets the "active_to" field if the given value is not nil.
func (siuo *SubscriptionItemUpdateOne) SetNillableActiveTo(t *time.Time) *SubscriptionItemUpdateOne {
	if t != nil {
		siuo.SetActiveTo(*t)
	}
	return siuo
}

// ClearActiveTo clears the value of the "active_to" field.
func (siuo *SubscriptionItemUpdateOne) ClearActiveTo() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearActiveTo()
	return siuo
}

// SetEntitlementID sets the "entitlement_id" field.
func (siuo *SubscriptionItemUpdateOne) SetEntitlementID(s string) *SubscriptionItemUpdateOne {
	siuo.mutation.SetEntitlementID(s)
	return siuo
}

// SetNillableEntitlementID sets the "entitlement_id" field if the given value is not nil.
func (siuo *SubscriptionItemUpdateOne) SetNillableEntitlementID(s *string) *SubscriptionItemUpdateOne {
	if s != nil {
		siuo.SetEntitlementID(*s)
	}
	return siuo
}

// ClearEntitlementID clears the value of the "entitlement_id" field.
func (siuo *SubscriptionItemUpdateOne) ClearEntitlementID() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearEntitlementID()
	return siuo
}

// SetRestartsBillingPeriod sets the "restarts_billing_period" field.
func (siuo *SubscriptionItemUpdateOne) SetRestartsBillingPeriod(b bool) *SubscriptionItemUpdateOne {
	siuo.mutation.SetRestartsBillingPeriod(b)
	return siuo
}

// SetNillableRestartsBillingPeriod sets the "restarts_billing_period" field if the given value is not nil.
func (siuo *SubscriptionItemUpdateOne) SetNillableRestartsBillingPeriod(b *bool) *SubscriptionItemUpdateOne {
	if b != nil {
		siuo.SetRestartsBillingPeriod(*b)
	}
	return siuo
}

// ClearRestartsBillingPeriod clears the value of the "restarts_billing_period" field.
func (siuo *SubscriptionItemUpdateOne) ClearRestartsBillingPeriod() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearRestartsBillingPeriod()
	return siuo
}

// SetActiveFromOverrideRelativeToPhaseStart sets the "active_from_override_relative_to_phase_start" field.
func (siuo *SubscriptionItemUpdateOne) SetActiveFromOverrideRelativeToPhaseStart(i isodate.String) *SubscriptionItemUpdateOne {
	siuo.mutation.SetActiveFromOverrideRelativeToPhaseStart(i)
	return siuo
}

// SetNillableActiveFromOverrideRelativeToPhaseStart sets the "active_from_override_relative_to_phase_start" field if the given value is not nil.
func (siuo *SubscriptionItemUpdateOne) SetNillableActiveFromOverrideRelativeToPhaseStart(i *isodate.String) *SubscriptionItemUpdateOne {
	if i != nil {
		siuo.SetActiveFromOverrideRelativeToPhaseStart(*i)
	}
	return siuo
}

// ClearActiveFromOverrideRelativeToPhaseStart clears the value of the "active_from_override_relative_to_phase_start" field.
func (siuo *SubscriptionItemUpdateOne) ClearActiveFromOverrideRelativeToPhaseStart() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearActiveFromOverrideRelativeToPhaseStart()
	return siuo
}

// SetActiveToOverrideRelativeToPhaseStart sets the "active_to_override_relative_to_phase_start" field.
func (siuo *SubscriptionItemUpdateOne) SetActiveToOverrideRelativeToPhaseStart(i isodate.String) *SubscriptionItemUpdateOne {
	siuo.mutation.SetActiveToOverrideRelativeToPhaseStart(i)
	return siuo
}

// SetNillableActiveToOverrideRelativeToPhaseStart sets the "active_to_override_relative_to_phase_start" field if the given value is not nil.
func (siuo *SubscriptionItemUpdateOne) SetNillableActiveToOverrideRelativeToPhaseStart(i *isodate.String) *SubscriptionItemUpdateOne {
	if i != nil {
		siuo.SetActiveToOverrideRelativeToPhaseStart(*i)
	}
	return siuo
}

// ClearActiveToOverrideRelativeToPhaseStart clears the value of the "active_to_override_relative_to_phase_start" field.
func (siuo *SubscriptionItemUpdateOne) ClearActiveToOverrideRelativeToPhaseStart() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearActiveToOverrideRelativeToPhaseStart()
	return siuo
}

// SetName sets the "name" field.
func (siuo *SubscriptionItemUpdateOne) SetName(s string) *SubscriptionItemUpdateOne {
	siuo.mutation.SetName(s)
	return siuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (siuo *SubscriptionItemUpdateOne) SetNillableName(s *string) *SubscriptionItemUpdateOne {
	if s != nil {
		siuo.SetName(*s)
	}
	return siuo
}

// SetDescription sets the "description" field.
func (siuo *SubscriptionItemUpdateOne) SetDescription(s string) *SubscriptionItemUpdateOne {
	siuo.mutation.SetDescription(s)
	return siuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (siuo *SubscriptionItemUpdateOne) SetNillableDescription(s *string) *SubscriptionItemUpdateOne {
	if s != nil {
		siuo.SetDescription(*s)
	}
	return siuo
}

// ClearDescription clears the value of the "description" field.
func (siuo *SubscriptionItemUpdateOne) ClearDescription() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearDescription()
	return siuo
}

// SetFeatureKey sets the "feature_key" field.
func (siuo *SubscriptionItemUpdateOne) SetFeatureKey(s string) *SubscriptionItemUpdateOne {
	siuo.mutation.SetFeatureKey(s)
	return siuo
}

// SetNillableFeatureKey sets the "feature_key" field if the given value is not nil.
func (siuo *SubscriptionItemUpdateOne) SetNillableFeatureKey(s *string) *SubscriptionItemUpdateOne {
	if s != nil {
		siuo.SetFeatureKey(*s)
	}
	return siuo
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (siuo *SubscriptionItemUpdateOne) ClearFeatureKey() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearFeatureKey()
	return siuo
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (siuo *SubscriptionItemUpdateOne) SetEntitlementTemplate(pt *productcatalog.EntitlementTemplate) *SubscriptionItemUpdateOne {
	siuo.mutation.SetEntitlementTemplate(pt)
	return siuo
}

// ClearEntitlementTemplate clears the value of the "entitlement_template" field.
func (siuo *SubscriptionItemUpdateOne) ClearEntitlementTemplate() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearEntitlementTemplate()
	return siuo
}

// SetTaxConfig sets the "tax_config" field.
func (siuo *SubscriptionItemUpdateOne) SetTaxConfig(pc *productcatalog.TaxConfig) *SubscriptionItemUpdateOne {
	siuo.mutation.SetTaxConfig(pc)
	return siuo
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (siuo *SubscriptionItemUpdateOne) ClearTaxConfig() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearTaxConfig()
	return siuo
}

// SetBillingCadence sets the "billing_cadence" field.
func (siuo *SubscriptionItemUpdateOne) SetBillingCadence(i isodate.String) *SubscriptionItemUpdateOne {
	siuo.mutation.SetBillingCadence(i)
	return siuo
}

// SetNillableBillingCadence sets the "billing_cadence" field if the given value is not nil.
func (siuo *SubscriptionItemUpdateOne) SetNillableBillingCadence(i *isodate.String) *SubscriptionItemUpdateOne {
	if i != nil {
		siuo.SetBillingCadence(*i)
	}
	return siuo
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (siuo *SubscriptionItemUpdateOne) ClearBillingCadence() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearBillingCadence()
	return siuo
}

// SetPrice sets the "price" field.
func (siuo *SubscriptionItemUpdateOne) SetPrice(pr *productcatalog.Price) *SubscriptionItemUpdateOne {
	siuo.mutation.SetPrice(pr)
	return siuo
}

// ClearPrice clears the value of the "price" field.
func (siuo *SubscriptionItemUpdateOne) ClearPrice() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearPrice()
	return siuo
}

// SetDiscounts sets the "discounts" field.
func (siuo *SubscriptionItemUpdateOne) SetDiscounts(pr *productcatalog.Discounts) *SubscriptionItemUpdateOne {
	siuo.mutation.SetDiscounts(pr)
	return siuo
}

// ClearDiscounts clears the value of the "discounts" field.
func (siuo *SubscriptionItemUpdateOne) ClearDiscounts() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearDiscounts()
	return siuo
}

// SetEntitlement sets the "entitlement" edge to the Entitlement entity.
func (siuo *SubscriptionItemUpdateOne) SetEntitlement(e *Entitlement) *SubscriptionItemUpdateOne {
	return siuo.SetEntitlementID(e.ID)
}

// AddBillingLineIDs adds the "billing_lines" edge to the BillingInvoiceLine entity by IDs.
func (siuo *SubscriptionItemUpdateOne) AddBillingLineIDs(ids ...string) *SubscriptionItemUpdateOne {
	siuo.mutation.AddBillingLineIDs(ids...)
	return siuo
}

// AddBillingLines adds the "billing_lines" edges to the BillingInvoiceLine entity.
func (siuo *SubscriptionItemUpdateOne) AddBillingLines(b ...*BillingInvoiceLine) *SubscriptionItemUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return siuo.AddBillingLineIDs(ids...)
}

// AddSubscriptionAddonRateCardItemIDs adds the "subscription_addon_rate_card_items" edge to the SubscriptionAddonRateCardItemLink entity by IDs.
func (siuo *SubscriptionItemUpdateOne) AddSubscriptionAddonRateCardItemIDs(ids ...string) *SubscriptionItemUpdateOne {
	siuo.mutation.AddSubscriptionAddonRateCardItemIDs(ids...)
	return siuo
}

// AddSubscriptionAddonRateCardItems adds the "subscription_addon_rate_card_items" edges to the SubscriptionAddonRateCardItemLink entity.
func (siuo *SubscriptionItemUpdateOne) AddSubscriptionAddonRateCardItems(s ...*SubscriptionAddonRateCardItemLink) *SubscriptionItemUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siuo.AddSubscriptionAddonRateCardItemIDs(ids...)
}

// Mutation returns the SubscriptionItemMutation object of the builder.
func (siuo *SubscriptionItemUpdateOne) Mutation() *SubscriptionItemMutation {
	return siuo.mutation
}

// ClearEntitlement clears the "entitlement" edge to the Entitlement entity.
func (siuo *SubscriptionItemUpdateOne) ClearEntitlement() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearEntitlement()
	return siuo
}

// ClearBillingLines clears all "billing_lines" edges to the BillingInvoiceLine entity.
func (siuo *SubscriptionItemUpdateOne) ClearBillingLines() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearBillingLines()
	return siuo
}

// RemoveBillingLineIDs removes the "billing_lines" edge to BillingInvoiceLine entities by IDs.
func (siuo *SubscriptionItemUpdateOne) RemoveBillingLineIDs(ids ...string) *SubscriptionItemUpdateOne {
	siuo.mutation.RemoveBillingLineIDs(ids...)
	return siuo
}

// RemoveBillingLines removes "billing_lines" edges to BillingInvoiceLine entities.
func (siuo *SubscriptionItemUpdateOne) RemoveBillingLines(b ...*BillingInvoiceLine) *SubscriptionItemUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return siuo.RemoveBillingLineIDs(ids...)
}

// ClearSubscriptionAddonRateCardItems clears all "subscription_addon_rate_card_items" edges to the SubscriptionAddonRateCardItemLink entity.
func (siuo *SubscriptionItemUpdateOne) ClearSubscriptionAddonRateCardItems() *SubscriptionItemUpdateOne {
	siuo.mutation.ClearSubscriptionAddonRateCardItems()
	return siuo
}

// RemoveSubscriptionAddonRateCardItemIDs removes the "subscription_addon_rate_card_items" edge to SubscriptionAddonRateCardItemLink entities by IDs.
func (siuo *SubscriptionItemUpdateOne) RemoveSubscriptionAddonRateCardItemIDs(ids ...string) *SubscriptionItemUpdateOne {
	siuo.mutation.RemoveSubscriptionAddonRateCardItemIDs(ids...)
	return siuo
}

// RemoveSubscriptionAddonRateCardItems removes "subscription_addon_rate_card_items" edges to SubscriptionAddonRateCardItemLink entities.
func (siuo *SubscriptionItemUpdateOne) RemoveSubscriptionAddonRateCardItems(s ...*SubscriptionAddonRateCardItemLink) *SubscriptionItemUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siuo.RemoveSubscriptionAddonRateCardItemIDs(ids...)
}

// Where appends a list predicates to the SubscriptionItemUpdate builder.
func (siuo *SubscriptionItemUpdateOne) Where(ps ...predicate.SubscriptionItem) *SubscriptionItemUpdateOne {
	siuo.mutation.Where(ps...)
	return siuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (siuo *SubscriptionItemUpdateOne) Select(field string, fields ...string) *SubscriptionItemUpdateOne {
	siuo.fields = append([]string{field}, fields...)
	return siuo
}

// Save executes the query and returns the updated SubscriptionItem entity.
func (siuo *SubscriptionItemUpdateOne) Save(ctx context.Context) (*SubscriptionItem, error) {
	siuo.defaults()
	return withHooks(ctx, siuo.sqlSave, siuo.mutation, siuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siuo *SubscriptionItemUpdateOne) SaveX(ctx context.Context) *SubscriptionItem {
	node, err := siuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siuo *SubscriptionItemUpdateOne) Exec(ctx context.Context) error {
	_, err := siuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siuo *SubscriptionItemUpdateOne) ExecX(ctx context.Context) {
	if err := siuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siuo *SubscriptionItemUpdateOne) defaults() {
	if _, ok := siuo.mutation.UpdatedAt(); !ok {
		v := subscriptionitem.UpdateDefaultUpdatedAt()
		siuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siuo *SubscriptionItemUpdateOne) check() error {
	if v, ok := siuo.mutation.Name(); ok {
		if err := subscriptionitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "SubscriptionItem.name": %w`, err)}
		}
	}
	if v, ok := siuo.mutation.EntitlementTemplate(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "entitlement_template", err: fmt.Errorf(`db: validator failed for field "SubscriptionItem.entitlement_template": %w`, err)}
		}
	}
	if v, ok := siuo.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "SubscriptionItem.tax_config": %w`, err)}
		}
	}
	if v, ok := siuo.mutation.Price(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`db: validator failed for field "SubscriptionItem.price": %w`, err)}
		}
	}
	if siuo.mutation.PhaseCleared() && len(siuo.mutation.PhaseIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionItem.phase"`)
	}
	return nil
}

func (siuo *SubscriptionItemUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionItem, err error) {
	if err := siuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionitem.Table, subscriptionitem.Columns, sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString))
	id, ok := siuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "SubscriptionItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := siuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionitem.FieldID)
		for _, f := range fields {
			if !subscriptionitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != subscriptionitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := siuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := siuo.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionitem.FieldDeletedAt, field.TypeTime, value)
	}
	if siuo.mutation.DeletedAtCleared() {
		_spec.ClearField(subscriptionitem.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := siuo.mutation.Metadata(); ok {
		_spec.SetField(subscriptionitem.FieldMetadata, field.TypeJSON, value)
	}
	if siuo.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionitem.FieldMetadata, field.TypeJSON)
	}
	if value, ok := siuo.mutation.ActiveFrom(); ok {
		_spec.SetField(subscriptionitem.FieldActiveFrom, field.TypeTime, value)
	}
	if value, ok := siuo.mutation.ActiveTo(); ok {
		_spec.SetField(subscriptionitem.FieldActiveTo, field.TypeTime, value)
	}
	if siuo.mutation.ActiveToCleared() {
		_spec.ClearField(subscriptionitem.FieldActiveTo, field.TypeTime)
	}
	if value, ok := siuo.mutation.RestartsBillingPeriod(); ok {
		_spec.SetField(subscriptionitem.FieldRestartsBillingPeriod, field.TypeBool, value)
	}
	if siuo.mutation.RestartsBillingPeriodCleared() {
		_spec.ClearField(subscriptionitem.FieldRestartsBillingPeriod, field.TypeBool)
	}
	if value, ok := siuo.mutation.ActiveFromOverrideRelativeToPhaseStart(); ok {
		_spec.SetField(subscriptionitem.FieldActiveFromOverrideRelativeToPhaseStart, field.TypeString, value)
	}
	if siuo.mutation.ActiveFromOverrideRelativeToPhaseStartCleared() {
		_spec.ClearField(subscriptionitem.FieldActiveFromOverrideRelativeToPhaseStart, field.TypeString)
	}
	if value, ok := siuo.mutation.ActiveToOverrideRelativeToPhaseStart(); ok {
		_spec.SetField(subscriptionitem.FieldActiveToOverrideRelativeToPhaseStart, field.TypeString, value)
	}
	if siuo.mutation.ActiveToOverrideRelativeToPhaseStartCleared() {
		_spec.ClearField(subscriptionitem.FieldActiveToOverrideRelativeToPhaseStart, field.TypeString)
	}
	if value, ok := siuo.mutation.Name(); ok {
		_spec.SetField(subscriptionitem.FieldName, field.TypeString, value)
	}
	if value, ok := siuo.mutation.Description(); ok {
		_spec.SetField(subscriptionitem.FieldDescription, field.TypeString, value)
	}
	if siuo.mutation.DescriptionCleared() {
		_spec.ClearField(subscriptionitem.FieldDescription, field.TypeString)
	}
	if value, ok := siuo.mutation.FeatureKey(); ok {
		_spec.SetField(subscriptionitem.FieldFeatureKey, field.TypeString, value)
	}
	if siuo.mutation.FeatureKeyCleared() {
		_spec.ClearField(subscriptionitem.FieldFeatureKey, field.TypeString)
	}
	if value, ok := siuo.mutation.EntitlementTemplate(); ok {
		vv, err := subscriptionitem.ValueScanner.EntitlementTemplate.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(subscriptionitem.FieldEntitlementTemplate, field.TypeString, vv)
	}
	if siuo.mutation.EntitlementTemplateCleared() {
		_spec.ClearField(subscriptionitem.FieldEntitlementTemplate, field.TypeString)
	}
	if value, ok := siuo.mutation.TaxConfig(); ok {
		vv, err := subscriptionitem.ValueScanner.TaxConfig.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(subscriptionitem.FieldTaxConfig, field.TypeString, vv)
	}
	if siuo.mutation.TaxConfigCleared() {
		_spec.ClearField(subscriptionitem.FieldTaxConfig, field.TypeString)
	}
	if value, ok := siuo.mutation.BillingCadence(); ok {
		_spec.SetField(subscriptionitem.FieldBillingCadence, field.TypeString, value)
	}
	if siuo.mutation.BillingCadenceCleared() {
		_spec.ClearField(subscriptionitem.FieldBillingCadence, field.TypeString)
	}
	if value, ok := siuo.mutation.Price(); ok {
		vv, err := subscriptionitem.ValueScanner.Price.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(subscriptionitem.FieldPrice, field.TypeString, vv)
	}
	if siuo.mutation.PriceCleared() {
		_spec.ClearField(subscriptionitem.FieldPrice, field.TypeString)
	}
	if value, ok := siuo.mutation.Discounts(); ok {
		vv, err := subscriptionitem.ValueScanner.Discounts.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(subscriptionitem.FieldDiscounts, field.TypeString, vv)
	}
	if siuo.mutation.DiscountsCleared() {
		_spec.ClearField(subscriptionitem.FieldDiscounts, field.TypeString)
	}
	if siuo.mutation.EntitlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionitem.EntitlementTable,
			Columns: []string{subscriptionitem.EntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.EntitlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionitem.EntitlementTable,
			Columns: []string{subscriptionitem.EntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.BillingLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionitem.BillingLinesTable,
			Columns: []string{subscriptionitem.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedBillingLinesIDs(); len(nodes) > 0 && !siuo.mutation.BillingLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionitem.BillingLinesTable,
			Columns: []string{subscriptionitem.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.BillingLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionitem.BillingLinesTable,
			Columns: []string{subscriptionitem.BillingLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.SubscriptionAddonRateCardItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionitem.SubscriptionAddonRateCardItemsTable,
			Columns: []string{subscriptionitem.SubscriptionAddonRateCardItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonratecarditemlink.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedSubscriptionAddonRateCardItemsIDs(); len(nodes) > 0 && !siuo.mutation.SubscriptionAddonRateCardItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionitem.SubscriptionAddonRateCardItemsTable,
			Columns: []string{subscriptionitem.SubscriptionAddonRateCardItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonratecarditemlink.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.SubscriptionAddonRateCardItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionitem.SubscriptionAddonRateCardItemsTable,
			Columns: []string{subscriptionitem.SubscriptionAddonRateCardItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonratecarditemlink.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubscriptionItem{config: siuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	siuo.mutation.done = true
	return _node, nil
}
