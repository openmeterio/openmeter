// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	stdsql "database/sql"
	"fmt"
	"sync"

	"entgo.io/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// Addon is the client for interacting with the Addon builders.
	Addon *AddonClient
	// AddonRateCard is the client for interacting with the AddonRateCard builders.
	AddonRateCard *AddonRateCardClient
	// App is the client for interacting with the App builders.
	App *AppClient
	// AppCustomer is the client for interacting with the AppCustomer builders.
	AppCustomer *AppCustomerClient
	// AppStripe is the client for interacting with the AppStripe builders.
	AppStripe *AppStripeClient
	// AppStripeCustomer is the client for interacting with the AppStripeCustomer builders.
	AppStripeCustomer *AppStripeCustomerClient
	// BalanceSnapshot is the client for interacting with the BalanceSnapshot builders.
	BalanceSnapshot *BalanceSnapshotClient
	// BillingCustomerLock is the client for interacting with the BillingCustomerLock builders.
	BillingCustomerLock *BillingCustomerLockClient
	// BillingCustomerOverride is the client for interacting with the BillingCustomerOverride builders.
	BillingCustomerOverride *BillingCustomerOverrideClient
	// BillingInvoice is the client for interacting with the BillingInvoice builders.
	BillingInvoice *BillingInvoiceClient
	// BillingInvoiceDiscount is the client for interacting with the BillingInvoiceDiscount builders.
	BillingInvoiceDiscount *BillingInvoiceDiscountClient
	// BillingInvoiceFlatFeeLineConfig is the client for interacting with the BillingInvoiceFlatFeeLineConfig builders.
	BillingInvoiceFlatFeeLineConfig *BillingInvoiceFlatFeeLineConfigClient
	// BillingInvoiceLine is the client for interacting with the BillingInvoiceLine builders.
	BillingInvoiceLine *BillingInvoiceLineClient
	// BillingInvoiceLineDiscount is the client for interacting with the BillingInvoiceLineDiscount builders.
	BillingInvoiceLineDiscount *BillingInvoiceLineDiscountClient
	// BillingInvoiceUsageBasedLineConfig is the client for interacting with the BillingInvoiceUsageBasedLineConfig builders.
	BillingInvoiceUsageBasedLineConfig *BillingInvoiceUsageBasedLineConfigClient
	// BillingInvoiceValidationIssue is the client for interacting with the BillingInvoiceValidationIssue builders.
	BillingInvoiceValidationIssue *BillingInvoiceValidationIssueClient
	// BillingProfile is the client for interacting with the BillingProfile builders.
	BillingProfile *BillingProfileClient
	// BillingSequenceNumbers is the client for interacting with the BillingSequenceNumbers builders.
	BillingSequenceNumbers *BillingSequenceNumbersClient
	// BillingWorkflowConfig is the client for interacting with the BillingWorkflowConfig builders.
	BillingWorkflowConfig *BillingWorkflowConfigClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// CustomerSubjects is the client for interacting with the CustomerSubjects builders.
	CustomerSubjects *CustomerSubjectsClient
	// Entitlement is the client for interacting with the Entitlement builders.
	Entitlement *EntitlementClient
	// Feature is the client for interacting with the Feature builders.
	Feature *FeatureClient
	// Grant is the client for interacting with the Grant builders.
	Grant *GrantClient
	// Meter is the client for interacting with the Meter builders.
	Meter *MeterClient
	// NotificationChannel is the client for interacting with the NotificationChannel builders.
	NotificationChannel *NotificationChannelClient
	// NotificationEvent is the client for interacting with the NotificationEvent builders.
	NotificationEvent *NotificationEventClient
	// NotificationEventDeliveryStatus is the client for interacting with the NotificationEventDeliveryStatus builders.
	NotificationEventDeliveryStatus *NotificationEventDeliveryStatusClient
	// NotificationRule is the client for interacting with the NotificationRule builders.
	NotificationRule *NotificationRuleClient
	// Plan is the client for interacting with the Plan builders.
	Plan *PlanClient
	// PlanPhase is the client for interacting with the PlanPhase builders.
	PlanPhase *PlanPhaseClient
	// PlanRateCard is the client for interacting with the PlanRateCard builders.
	PlanRateCard *PlanRateCardClient
	// Subscription is the client for interacting with the Subscription builders.
	Subscription *SubscriptionClient
	// SubscriptionAddon is the client for interacting with the SubscriptionAddon builders.
	SubscriptionAddon *SubscriptionAddonClient
	// SubscriptionAddonQuantity is the client for interacting with the SubscriptionAddonQuantity builders.
	SubscriptionAddonQuantity *SubscriptionAddonQuantityClient
	// SubscriptionAddonRateCard is the client for interacting with the SubscriptionAddonRateCard builders.
	SubscriptionAddonRateCard *SubscriptionAddonRateCardClient
	// SubscriptionAddonRateCardItemLink is the client for interacting with the SubscriptionAddonRateCardItemLink builders.
	SubscriptionAddonRateCardItemLink *SubscriptionAddonRateCardItemLinkClient
	// SubscriptionItem is the client for interacting with the SubscriptionItem builders.
	SubscriptionItem *SubscriptionItemClient
	// SubscriptionPhase is the client for interacting with the SubscriptionPhase builders.
	SubscriptionPhase *SubscriptionPhaseClient
	// UsageReset is the client for interacting with the UsageReset builders.
	UsageReset *UsageResetClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once
	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Commit method.
	Committer interface {
		Commit(context.Context, *Tx) error
	}

	// The CommitFunc type is an adapter to allow the use of ordinary
	// function as a Committer. If f is a function with the appropriate
	// signature, CommitFunc(f) is a Committer that calls f.
	CommitFunc func(context.Context, *Tx) error

	// CommitHook defines the "commit middleware". A function that gets a Committer
	// and returns a Committer. For example:
	//
	//	hook := func(next ent.Committer) ent.Committer {
	//		return ent.CommitFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Commit(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	CommitHook func(Committer) Committer
)

// Commit calls f(ctx, m).
func (f CommitFunc) Commit(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer = CommitFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Commit()
	})
	txDriver.mu.Lock()
	hooks := append([]CommitHook(nil), txDriver.onCommit...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Commit(tx.ctx, tx)
}

// OnCommit adds a hook to call on commit.
func (tx *Tx) OnCommit(f CommitHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onCommit = append(txDriver.onCommit, f)
	txDriver.mu.Unlock()
}

type (
	// Rollbacker is the interface that wraps the Rollback method.
	Rollbacker interface {
		Rollback(context.Context, *Tx) error
	}

	// The RollbackFunc type is an adapter to allow the use of ordinary
	// function as a Rollbacker. If f is a function with the appropriate
	// signature, RollbackFunc(f) is a Rollbacker that calls f.
	RollbackFunc func(context.Context, *Tx) error

	// RollbackHook defines the "rollback middleware". A function that gets a Rollbacker
	// and returns a Rollbacker. For example:
	//
	//	hook := func(next ent.Rollbacker) ent.Rollbacker {
	//		return ent.RollbackFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Rollback(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	RollbackHook func(Rollbacker) Rollbacker
)

// Rollback calls f(ctx, m).
func (f RollbackFunc) Rollback(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker = RollbackFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Rollback()
	})
	txDriver.mu.Lock()
	hooks := append([]RollbackHook(nil), txDriver.onRollback...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Rollback(tx.ctx, tx)
}

// OnRollback adds a hook to call on rollback.
func (tx *Tx) OnRollback(f RollbackHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onRollback = append(txDriver.onRollback, f)
	txDriver.mu.Unlock()
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.Addon = NewAddonClient(tx.config)
	tx.AddonRateCard = NewAddonRateCardClient(tx.config)
	tx.App = NewAppClient(tx.config)
	tx.AppCustomer = NewAppCustomerClient(tx.config)
	tx.AppStripe = NewAppStripeClient(tx.config)
	tx.AppStripeCustomer = NewAppStripeCustomerClient(tx.config)
	tx.BalanceSnapshot = NewBalanceSnapshotClient(tx.config)
	tx.BillingCustomerLock = NewBillingCustomerLockClient(tx.config)
	tx.BillingCustomerOverride = NewBillingCustomerOverrideClient(tx.config)
	tx.BillingInvoice = NewBillingInvoiceClient(tx.config)
	tx.BillingInvoiceDiscount = NewBillingInvoiceDiscountClient(tx.config)
	tx.BillingInvoiceFlatFeeLineConfig = NewBillingInvoiceFlatFeeLineConfigClient(tx.config)
	tx.BillingInvoiceLine = NewBillingInvoiceLineClient(tx.config)
	tx.BillingInvoiceLineDiscount = NewBillingInvoiceLineDiscountClient(tx.config)
	tx.BillingInvoiceUsageBasedLineConfig = NewBillingInvoiceUsageBasedLineConfigClient(tx.config)
	tx.BillingInvoiceValidationIssue = NewBillingInvoiceValidationIssueClient(tx.config)
	tx.BillingProfile = NewBillingProfileClient(tx.config)
	tx.BillingSequenceNumbers = NewBillingSequenceNumbersClient(tx.config)
	tx.BillingWorkflowConfig = NewBillingWorkflowConfigClient(tx.config)
	tx.Customer = NewCustomerClient(tx.config)
	tx.CustomerSubjects = NewCustomerSubjectsClient(tx.config)
	tx.Entitlement = NewEntitlementClient(tx.config)
	tx.Feature = NewFeatureClient(tx.config)
	tx.Grant = NewGrantClient(tx.config)
	tx.Meter = NewMeterClient(tx.config)
	tx.NotificationChannel = NewNotificationChannelClient(tx.config)
	tx.NotificationEvent = NewNotificationEventClient(tx.config)
	tx.NotificationEventDeliveryStatus = NewNotificationEventDeliveryStatusClient(tx.config)
	tx.NotificationRule = NewNotificationRuleClient(tx.config)
	tx.Plan = NewPlanClient(tx.config)
	tx.PlanPhase = NewPlanPhaseClient(tx.config)
	tx.PlanRateCard = NewPlanRateCardClient(tx.config)
	tx.Subscription = NewSubscriptionClient(tx.config)
	tx.SubscriptionAddon = NewSubscriptionAddonClient(tx.config)
	tx.SubscriptionAddonQuantity = NewSubscriptionAddonQuantityClient(tx.config)
	tx.SubscriptionAddonRateCard = NewSubscriptionAddonRateCardClient(tx.config)
	tx.SubscriptionAddonRateCardItemLink = NewSubscriptionAddonRateCardItemLinkClient(tx.config)
	tx.SubscriptionItem = NewSubscriptionItemClient(tx.config)
	tx.SubscriptionPhase = NewSubscriptionPhaseClient(tx.config)
	tx.UsageReset = NewUsageResetClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: Addon.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
	// completion hooks.
	mu         sync.Mutex
	onCommit   []CommitHook
	onRollback []RollbackHook
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v any) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v any) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)

// ExecContext allows calling the underlying ExecContext method of the transaction if it is supported by it.
// See, database/sql#Tx.ExecContext for more information.
func (tx *txDriver) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := tx.tx.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Tx.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the transaction if it is supported by it.
// See, database/sql#Tx.QueryContext for more information.
func (tx *txDriver) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := tx.tx.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Tx.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
