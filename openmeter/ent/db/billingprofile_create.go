// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/billing/provider"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingcustomeroverride"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingprofile"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfig"
	"github.com/openmeterio/openmeter/pkg/models"
)

// BillingProfileCreate is the builder for creating a BillingProfile entity.
type BillingProfileCreate struct {
	config
	mutation *BillingProfileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (bpc *BillingProfileCreate) SetNamespace(s string) *BillingProfileCreate {
	bpc.mutation.SetNamespace(s)
	return bpc
}

// SetMetadata sets the "metadata" field.
func (bpc *BillingProfileCreate) SetMetadata(m map[string]string) *BillingProfileCreate {
	bpc.mutation.SetMetadata(m)
	return bpc
}

// SetCreatedAt sets the "created_at" field.
func (bpc *BillingProfileCreate) SetCreatedAt(t time.Time) *BillingProfileCreate {
	bpc.mutation.SetCreatedAt(t)
	return bpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bpc *BillingProfileCreate) SetNillableCreatedAt(t *time.Time) *BillingProfileCreate {
	if t != nil {
		bpc.SetCreatedAt(*t)
	}
	return bpc
}

// SetUpdatedAt sets the "updated_at" field.
func (bpc *BillingProfileCreate) SetUpdatedAt(t time.Time) *BillingProfileCreate {
	bpc.mutation.SetUpdatedAt(t)
	return bpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bpc *BillingProfileCreate) SetNillableUpdatedAt(t *time.Time) *BillingProfileCreate {
	if t != nil {
		bpc.SetUpdatedAt(*t)
	}
	return bpc
}

// SetDeletedAt sets the "deleted_at" field.
func (bpc *BillingProfileCreate) SetDeletedAt(t time.Time) *BillingProfileCreate {
	bpc.mutation.SetDeletedAt(t)
	return bpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bpc *BillingProfileCreate) SetNillableDeletedAt(t *time.Time) *BillingProfileCreate {
	if t != nil {
		bpc.SetDeletedAt(*t)
	}
	return bpc
}

// SetName sets the "name" field.
func (bpc *BillingProfileCreate) SetName(s string) *BillingProfileCreate {
	bpc.mutation.SetName(s)
	return bpc
}

// SetDescription sets the "description" field.
func (bpc *BillingProfileCreate) SetDescription(s string) *BillingProfileCreate {
	bpc.mutation.SetDescription(s)
	return bpc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bpc *BillingProfileCreate) SetNillableDescription(s *string) *BillingProfileCreate {
	if s != nil {
		bpc.SetDescription(*s)
	}
	return bpc
}

// SetSupplierAddressCountry sets the "supplier_address_country" field.
func (bpc *BillingProfileCreate) SetSupplierAddressCountry(mc models.CountryCode) *BillingProfileCreate {
	bpc.mutation.SetSupplierAddressCountry(mc)
	return bpc
}

// SetNillableSupplierAddressCountry sets the "supplier_address_country" field if the given value is not nil.
func (bpc *BillingProfileCreate) SetNillableSupplierAddressCountry(mc *models.CountryCode) *BillingProfileCreate {
	if mc != nil {
		bpc.SetSupplierAddressCountry(*mc)
	}
	return bpc
}

// SetSupplierAddressPostalCode sets the "supplier_address_postal_code" field.
func (bpc *BillingProfileCreate) SetSupplierAddressPostalCode(s string) *BillingProfileCreate {
	bpc.mutation.SetSupplierAddressPostalCode(s)
	return bpc
}

// SetNillableSupplierAddressPostalCode sets the "supplier_address_postal_code" field if the given value is not nil.
func (bpc *BillingProfileCreate) SetNillableSupplierAddressPostalCode(s *string) *BillingProfileCreate {
	if s != nil {
		bpc.SetSupplierAddressPostalCode(*s)
	}
	return bpc
}

// SetSupplierAddressState sets the "supplier_address_state" field.
func (bpc *BillingProfileCreate) SetSupplierAddressState(s string) *BillingProfileCreate {
	bpc.mutation.SetSupplierAddressState(s)
	return bpc
}

// SetNillableSupplierAddressState sets the "supplier_address_state" field if the given value is not nil.
func (bpc *BillingProfileCreate) SetNillableSupplierAddressState(s *string) *BillingProfileCreate {
	if s != nil {
		bpc.SetSupplierAddressState(*s)
	}
	return bpc
}

// SetSupplierAddressCity sets the "supplier_address_city" field.
func (bpc *BillingProfileCreate) SetSupplierAddressCity(s string) *BillingProfileCreate {
	bpc.mutation.SetSupplierAddressCity(s)
	return bpc
}

// SetNillableSupplierAddressCity sets the "supplier_address_city" field if the given value is not nil.
func (bpc *BillingProfileCreate) SetNillableSupplierAddressCity(s *string) *BillingProfileCreate {
	if s != nil {
		bpc.SetSupplierAddressCity(*s)
	}
	return bpc
}

// SetSupplierAddressLine1 sets the "supplier_address_line1" field.
func (bpc *BillingProfileCreate) SetSupplierAddressLine1(s string) *BillingProfileCreate {
	bpc.mutation.SetSupplierAddressLine1(s)
	return bpc
}

// SetNillableSupplierAddressLine1 sets the "supplier_address_line1" field if the given value is not nil.
func (bpc *BillingProfileCreate) SetNillableSupplierAddressLine1(s *string) *BillingProfileCreate {
	if s != nil {
		bpc.SetSupplierAddressLine1(*s)
	}
	return bpc
}

// SetSupplierAddressLine2 sets the "supplier_address_line2" field.
func (bpc *BillingProfileCreate) SetSupplierAddressLine2(s string) *BillingProfileCreate {
	bpc.mutation.SetSupplierAddressLine2(s)
	return bpc
}

// SetNillableSupplierAddressLine2 sets the "supplier_address_line2" field if the given value is not nil.
func (bpc *BillingProfileCreate) SetNillableSupplierAddressLine2(s *string) *BillingProfileCreate {
	if s != nil {
		bpc.SetSupplierAddressLine2(*s)
	}
	return bpc
}

// SetSupplierAddressPhoneNumber sets the "supplier_address_phone_number" field.
func (bpc *BillingProfileCreate) SetSupplierAddressPhoneNumber(s string) *BillingProfileCreate {
	bpc.mutation.SetSupplierAddressPhoneNumber(s)
	return bpc
}

// SetNillableSupplierAddressPhoneNumber sets the "supplier_address_phone_number" field if the given value is not nil.
func (bpc *BillingProfileCreate) SetNillableSupplierAddressPhoneNumber(s *string) *BillingProfileCreate {
	if s != nil {
		bpc.SetSupplierAddressPhoneNumber(*s)
	}
	return bpc
}

// SetTaxProvider sets the "tax_provider" field.
func (bpc *BillingProfileCreate) SetTaxProvider(pp provider.TaxProvider) *BillingProfileCreate {
	bpc.mutation.SetTaxProvider(pp)
	return bpc
}

// SetInvoicingProvider sets the "invoicing_provider" field.
func (bpc *BillingProfileCreate) SetInvoicingProvider(pp provider.InvoicingProvider) *BillingProfileCreate {
	bpc.mutation.SetInvoicingProvider(pp)
	return bpc
}

// SetPaymentProvider sets the "payment_provider" field.
func (bpc *BillingProfileCreate) SetPaymentProvider(pp provider.PaymentProvider) *BillingProfileCreate {
	bpc.mutation.SetPaymentProvider(pp)
	return bpc
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (bpc *BillingProfileCreate) SetWorkflowConfigID(s string) *BillingProfileCreate {
	bpc.mutation.SetWorkflowConfigID(s)
	return bpc
}

// SetDefault sets the "default" field.
func (bpc *BillingProfileCreate) SetDefault(b bool) *BillingProfileCreate {
	bpc.mutation.SetDefault(b)
	return bpc
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (bpc *BillingProfileCreate) SetNillableDefault(b *bool) *BillingProfileCreate {
	if b != nil {
		bpc.SetDefault(*b)
	}
	return bpc
}

// SetSupplierName sets the "supplier_name" field.
func (bpc *BillingProfileCreate) SetSupplierName(s string) *BillingProfileCreate {
	bpc.mutation.SetSupplierName(s)
	return bpc
}

// SetID sets the "id" field.
func (bpc *BillingProfileCreate) SetID(s string) *BillingProfileCreate {
	bpc.mutation.SetID(s)
	return bpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bpc *BillingProfileCreate) SetNillableID(s *string) *BillingProfileCreate {
	if s != nil {
		bpc.SetID(*s)
	}
	return bpc
}

// AddBillingInvoiceIDs adds the "billing_invoices" edge to the BillingInvoice entity by IDs.
func (bpc *BillingProfileCreate) AddBillingInvoiceIDs(ids ...string) *BillingProfileCreate {
	bpc.mutation.AddBillingInvoiceIDs(ids...)
	return bpc
}

// AddBillingInvoices adds the "billing_invoices" edges to the BillingInvoice entity.
func (bpc *BillingProfileCreate) AddBillingInvoices(b ...*BillingInvoice) *BillingProfileCreate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpc.AddBillingInvoiceIDs(ids...)
}

// AddBillingCustomerOverrideIDs adds the "billing_customer_override" edge to the BillingCustomerOverride entity by IDs.
func (bpc *BillingProfileCreate) AddBillingCustomerOverrideIDs(ids ...string) *BillingProfileCreate {
	bpc.mutation.AddBillingCustomerOverrideIDs(ids...)
	return bpc
}

// AddBillingCustomerOverride adds the "billing_customer_override" edges to the BillingCustomerOverride entity.
func (bpc *BillingProfileCreate) AddBillingCustomerOverride(b ...*BillingCustomerOverride) *BillingProfileCreate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpc.AddBillingCustomerOverrideIDs(ids...)
}

// SetWorkflowConfig sets the "workflow_config" edge to the BillingWorkflowConfig entity.
func (bpc *BillingProfileCreate) SetWorkflowConfig(b *BillingWorkflowConfig) *BillingProfileCreate {
	return bpc.SetWorkflowConfigID(b.ID)
}

// Mutation returns the BillingProfileMutation object of the builder.
func (bpc *BillingProfileCreate) Mutation() *BillingProfileMutation {
	return bpc.mutation
}

// Save creates the BillingProfile in the database.
func (bpc *BillingProfileCreate) Save(ctx context.Context) (*BillingProfile, error) {
	bpc.defaults()
	return withHooks(ctx, bpc.sqlSave, bpc.mutation, bpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bpc *BillingProfileCreate) SaveX(ctx context.Context) *BillingProfile {
	v, err := bpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bpc *BillingProfileCreate) Exec(ctx context.Context) error {
	_, err := bpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpc *BillingProfileCreate) ExecX(ctx context.Context) {
	if err := bpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpc *BillingProfileCreate) defaults() {
	if _, ok := bpc.mutation.CreatedAt(); !ok {
		v := billingprofile.DefaultCreatedAt()
		bpc.mutation.SetCreatedAt(v)
	}
	if _, ok := bpc.mutation.UpdatedAt(); !ok {
		v := billingprofile.DefaultUpdatedAt()
		bpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bpc.mutation.Default(); !ok {
		v := billingprofile.DefaultDefault
		bpc.mutation.SetDefault(v)
	}
	if _, ok := bpc.mutation.ID(); !ok {
		v := billingprofile.DefaultID()
		bpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bpc *BillingProfileCreate) check() error {
	if _, ok := bpc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingProfile.namespace"`)}
	}
	if v, ok := bpc.mutation.Namespace(); ok {
		if err := billingprofile.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingProfile.namespace": %w`, err)}
		}
	}
	if _, ok := bpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingProfile.created_at"`)}
	}
	if _, ok := bpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingProfile.updated_at"`)}
	}
	if _, ok := bpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "BillingProfile.name"`)}
	}
	if v, ok := bpc.mutation.SupplierAddressCountry(); ok {
		if err := billingprofile.SupplierAddressCountryValidator(string(v)); err != nil {
			return &ValidationError{Name: "supplier_address_country", err: fmt.Errorf(`db: validator failed for field "BillingProfile.supplier_address_country": %w`, err)}
		}
	}
	if _, ok := bpc.mutation.TaxProvider(); !ok {
		return &ValidationError{Name: "tax_provider", err: errors.New(`db: missing required field "BillingProfile.tax_provider"`)}
	}
	if v, ok := bpc.mutation.TaxProvider(); ok {
		if err := billingprofile.TaxProviderValidator(v); err != nil {
			return &ValidationError{Name: "tax_provider", err: fmt.Errorf(`db: validator failed for field "BillingProfile.tax_provider": %w`, err)}
		}
	}
	if _, ok := bpc.mutation.InvoicingProvider(); !ok {
		return &ValidationError{Name: "invoicing_provider", err: errors.New(`db: missing required field "BillingProfile.invoicing_provider"`)}
	}
	if v, ok := bpc.mutation.InvoicingProvider(); ok {
		if err := billingprofile.InvoicingProviderValidator(v); err != nil {
			return &ValidationError{Name: "invoicing_provider", err: fmt.Errorf(`db: validator failed for field "BillingProfile.invoicing_provider": %w`, err)}
		}
	}
	if _, ok := bpc.mutation.PaymentProvider(); !ok {
		return &ValidationError{Name: "payment_provider", err: errors.New(`db: missing required field "BillingProfile.payment_provider"`)}
	}
	if v, ok := bpc.mutation.PaymentProvider(); ok {
		if err := billingprofile.PaymentProviderValidator(v); err != nil {
			return &ValidationError{Name: "payment_provider", err: fmt.Errorf(`db: validator failed for field "BillingProfile.payment_provider": %w`, err)}
		}
	}
	if _, ok := bpc.mutation.WorkflowConfigID(); !ok {
		return &ValidationError{Name: "workflow_config_id", err: errors.New(`db: missing required field "BillingProfile.workflow_config_id"`)}
	}
	if v, ok := bpc.mutation.WorkflowConfigID(); ok {
		if err := billingprofile.WorkflowConfigIDValidator(v); err != nil {
			return &ValidationError{Name: "workflow_config_id", err: fmt.Errorf(`db: validator failed for field "BillingProfile.workflow_config_id": %w`, err)}
		}
	}
	if _, ok := bpc.mutation.Default(); !ok {
		return &ValidationError{Name: "default", err: errors.New(`db: missing required field "BillingProfile.default"`)}
	}
	if _, ok := bpc.mutation.SupplierName(); !ok {
		return &ValidationError{Name: "supplier_name", err: errors.New(`db: missing required field "BillingProfile.supplier_name"`)}
	}
	if v, ok := bpc.mutation.SupplierName(); ok {
		if err := billingprofile.SupplierNameValidator(v); err != nil {
			return &ValidationError{Name: "supplier_name", err: fmt.Errorf(`db: validator failed for field "BillingProfile.supplier_name": %w`, err)}
		}
	}
	if len(bpc.mutation.WorkflowConfigIDs()) == 0 {
		return &ValidationError{Name: "workflow_config", err: errors.New(`db: missing required edge "BillingProfile.workflow_config"`)}
	}
	return nil
}

func (bpc *BillingProfileCreate) sqlSave(ctx context.Context) (*BillingProfile, error) {
	if err := bpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingProfile.ID type: %T", _spec.ID.Value)
		}
	}
	bpc.mutation.id = &_node.ID
	bpc.mutation.done = true
	return _node, nil
}

func (bpc *BillingProfileCreate) createSpec() (*BillingProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingProfile{config: bpc.config}
		_spec = sqlgraph.NewCreateSpec(billingprofile.Table, sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString))
	)
	_spec.OnConflict = bpc.conflict
	if id, ok := bpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bpc.mutation.Namespace(); ok {
		_spec.SetField(billingprofile.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := bpc.mutation.Metadata(); ok {
		_spec.SetField(billingprofile.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := bpc.mutation.CreatedAt(); ok {
		_spec.SetField(billingprofile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bpc.mutation.UpdatedAt(); ok {
		_spec.SetField(billingprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bpc.mutation.DeletedAt(); ok {
		_spec.SetField(billingprofile.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bpc.mutation.Name(); ok {
		_spec.SetField(billingprofile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bpc.mutation.Description(); ok {
		_spec.SetField(billingprofile.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := bpc.mutation.SupplierAddressCountry(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressCountry, field.TypeString, value)
		_node.SupplierAddressCountry = &value
	}
	if value, ok := bpc.mutation.SupplierAddressPostalCode(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressPostalCode, field.TypeString, value)
		_node.SupplierAddressPostalCode = &value
	}
	if value, ok := bpc.mutation.SupplierAddressState(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressState, field.TypeString, value)
		_node.SupplierAddressState = &value
	}
	if value, ok := bpc.mutation.SupplierAddressCity(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressCity, field.TypeString, value)
		_node.SupplierAddressCity = &value
	}
	if value, ok := bpc.mutation.SupplierAddressLine1(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressLine1, field.TypeString, value)
		_node.SupplierAddressLine1 = &value
	}
	if value, ok := bpc.mutation.SupplierAddressLine2(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressLine2, field.TypeString, value)
		_node.SupplierAddressLine2 = &value
	}
	if value, ok := bpc.mutation.SupplierAddressPhoneNumber(); ok {
		_spec.SetField(billingprofile.FieldSupplierAddressPhoneNumber, field.TypeString, value)
		_node.SupplierAddressPhoneNumber = &value
	}
	if value, ok := bpc.mutation.TaxProvider(); ok {
		_spec.SetField(billingprofile.FieldTaxProvider, field.TypeEnum, value)
		_node.TaxProvider = value
	}
	if value, ok := bpc.mutation.InvoicingProvider(); ok {
		_spec.SetField(billingprofile.FieldInvoicingProvider, field.TypeEnum, value)
		_node.InvoicingProvider = value
	}
	if value, ok := bpc.mutation.PaymentProvider(); ok {
		_spec.SetField(billingprofile.FieldPaymentProvider, field.TypeEnum, value)
		_node.PaymentProvider = value
	}
	if value, ok := bpc.mutation.Default(); ok {
		_spec.SetField(billingprofile.FieldDefault, field.TypeBool, value)
		_node.Default = value
	}
	if value, ok := bpc.mutation.SupplierName(); ok {
		_spec.SetField(billingprofile.FieldSupplierName, field.TypeString, value)
		_node.SupplierName = value
	}
	if nodes := bpc.mutation.BillingInvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingInvoicesTable,
			Columns: []string{billingprofile.BillingInvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bpc.mutation.BillingCustomerOverrideIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billingprofile.BillingCustomerOverrideTable,
			Columns: []string{billingprofile.BillingCustomerOverrideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcustomeroverride.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bpc.mutation.WorkflowConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billingprofile.WorkflowConfigTable,
			Columns: []string{billingprofile.WorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkflowConfigID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingProfile.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingProfileUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bpc *BillingProfileCreate) OnConflict(opts ...sql.ConflictOption) *BillingProfileUpsertOne {
	bpc.conflict = opts
	return &BillingProfileUpsertOne{
		create: bpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingProfile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bpc *BillingProfileCreate) OnConflictColumns(columns ...string) *BillingProfileUpsertOne {
	bpc.conflict = append(bpc.conflict, sql.ConflictColumns(columns...))
	return &BillingProfileUpsertOne{
		create: bpc,
	}
}

type (
	// BillingProfileUpsertOne is the builder for "upsert"-ing
	//  one BillingProfile node.
	BillingProfileUpsertOne struct {
		create *BillingProfileCreate
	}

	// BillingProfileUpsert is the "OnConflict" setter.
	BillingProfileUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *BillingProfileUpsert) SetMetadata(v map[string]string) *BillingProfileUpsert {
	u.Set(billingprofile.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateMetadata() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingProfileUpsert) ClearMetadata() *BillingProfileUpsert {
	u.SetNull(billingprofile.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingProfileUpsert) SetUpdatedAt(v time.Time) *BillingProfileUpsert {
	u.Set(billingprofile.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateUpdatedAt() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingProfileUpsert) SetDeletedAt(v time.Time) *BillingProfileUpsert {
	u.Set(billingprofile.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateDeletedAt() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingProfileUpsert) ClearDeletedAt() *BillingProfileUpsert {
	u.SetNull(billingprofile.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *BillingProfileUpsert) SetName(v string) *BillingProfileUpsert {
	u.Set(billingprofile.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateName() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *BillingProfileUpsert) SetDescription(v string) *BillingProfileUpsert {
	u.Set(billingprofile.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateDescription() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BillingProfileUpsert) ClearDescription() *BillingProfileUpsert {
	u.SetNull(billingprofile.FieldDescription)
	return u
}

// SetSupplierAddressCountry sets the "supplier_address_country" field.
func (u *BillingProfileUpsert) SetSupplierAddressCountry(v models.CountryCode) *BillingProfileUpsert {
	u.Set(billingprofile.FieldSupplierAddressCountry, v)
	return u
}

// UpdateSupplierAddressCountry sets the "supplier_address_country" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateSupplierAddressCountry() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldSupplierAddressCountry)
	return u
}

// ClearSupplierAddressCountry clears the value of the "supplier_address_country" field.
func (u *BillingProfileUpsert) ClearSupplierAddressCountry() *BillingProfileUpsert {
	u.SetNull(billingprofile.FieldSupplierAddressCountry)
	return u
}

// SetSupplierAddressPostalCode sets the "supplier_address_postal_code" field.
func (u *BillingProfileUpsert) SetSupplierAddressPostalCode(v string) *BillingProfileUpsert {
	u.Set(billingprofile.FieldSupplierAddressPostalCode, v)
	return u
}

// UpdateSupplierAddressPostalCode sets the "supplier_address_postal_code" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateSupplierAddressPostalCode() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldSupplierAddressPostalCode)
	return u
}

// ClearSupplierAddressPostalCode clears the value of the "supplier_address_postal_code" field.
func (u *BillingProfileUpsert) ClearSupplierAddressPostalCode() *BillingProfileUpsert {
	u.SetNull(billingprofile.FieldSupplierAddressPostalCode)
	return u
}

// SetSupplierAddressState sets the "supplier_address_state" field.
func (u *BillingProfileUpsert) SetSupplierAddressState(v string) *BillingProfileUpsert {
	u.Set(billingprofile.FieldSupplierAddressState, v)
	return u
}

// UpdateSupplierAddressState sets the "supplier_address_state" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateSupplierAddressState() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldSupplierAddressState)
	return u
}

// ClearSupplierAddressState clears the value of the "supplier_address_state" field.
func (u *BillingProfileUpsert) ClearSupplierAddressState() *BillingProfileUpsert {
	u.SetNull(billingprofile.FieldSupplierAddressState)
	return u
}

// SetSupplierAddressCity sets the "supplier_address_city" field.
func (u *BillingProfileUpsert) SetSupplierAddressCity(v string) *BillingProfileUpsert {
	u.Set(billingprofile.FieldSupplierAddressCity, v)
	return u
}

// UpdateSupplierAddressCity sets the "supplier_address_city" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateSupplierAddressCity() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldSupplierAddressCity)
	return u
}

// ClearSupplierAddressCity clears the value of the "supplier_address_city" field.
func (u *BillingProfileUpsert) ClearSupplierAddressCity() *BillingProfileUpsert {
	u.SetNull(billingprofile.FieldSupplierAddressCity)
	return u
}

// SetSupplierAddressLine1 sets the "supplier_address_line1" field.
func (u *BillingProfileUpsert) SetSupplierAddressLine1(v string) *BillingProfileUpsert {
	u.Set(billingprofile.FieldSupplierAddressLine1, v)
	return u
}

// UpdateSupplierAddressLine1 sets the "supplier_address_line1" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateSupplierAddressLine1() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldSupplierAddressLine1)
	return u
}

// ClearSupplierAddressLine1 clears the value of the "supplier_address_line1" field.
func (u *BillingProfileUpsert) ClearSupplierAddressLine1() *BillingProfileUpsert {
	u.SetNull(billingprofile.FieldSupplierAddressLine1)
	return u
}

// SetSupplierAddressLine2 sets the "supplier_address_line2" field.
func (u *BillingProfileUpsert) SetSupplierAddressLine2(v string) *BillingProfileUpsert {
	u.Set(billingprofile.FieldSupplierAddressLine2, v)
	return u
}

// UpdateSupplierAddressLine2 sets the "supplier_address_line2" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateSupplierAddressLine2() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldSupplierAddressLine2)
	return u
}

// ClearSupplierAddressLine2 clears the value of the "supplier_address_line2" field.
func (u *BillingProfileUpsert) ClearSupplierAddressLine2() *BillingProfileUpsert {
	u.SetNull(billingprofile.FieldSupplierAddressLine2)
	return u
}

// SetSupplierAddressPhoneNumber sets the "supplier_address_phone_number" field.
func (u *BillingProfileUpsert) SetSupplierAddressPhoneNumber(v string) *BillingProfileUpsert {
	u.Set(billingprofile.FieldSupplierAddressPhoneNumber, v)
	return u
}

// UpdateSupplierAddressPhoneNumber sets the "supplier_address_phone_number" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateSupplierAddressPhoneNumber() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldSupplierAddressPhoneNumber)
	return u
}

// ClearSupplierAddressPhoneNumber clears the value of the "supplier_address_phone_number" field.
func (u *BillingProfileUpsert) ClearSupplierAddressPhoneNumber() *BillingProfileUpsert {
	u.SetNull(billingprofile.FieldSupplierAddressPhoneNumber)
	return u
}

// SetTaxProvider sets the "tax_provider" field.
func (u *BillingProfileUpsert) SetTaxProvider(v provider.TaxProvider) *BillingProfileUpsert {
	u.Set(billingprofile.FieldTaxProvider, v)
	return u
}

// UpdateTaxProvider sets the "tax_provider" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateTaxProvider() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldTaxProvider)
	return u
}

// SetInvoicingProvider sets the "invoicing_provider" field.
func (u *BillingProfileUpsert) SetInvoicingProvider(v provider.InvoicingProvider) *BillingProfileUpsert {
	u.Set(billingprofile.FieldInvoicingProvider, v)
	return u
}

// UpdateInvoicingProvider sets the "invoicing_provider" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateInvoicingProvider() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldInvoicingProvider)
	return u
}

// SetPaymentProvider sets the "payment_provider" field.
func (u *BillingProfileUpsert) SetPaymentProvider(v provider.PaymentProvider) *BillingProfileUpsert {
	u.Set(billingprofile.FieldPaymentProvider, v)
	return u
}

// UpdatePaymentProvider sets the "payment_provider" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdatePaymentProvider() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldPaymentProvider)
	return u
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (u *BillingProfileUpsert) SetWorkflowConfigID(v string) *BillingProfileUpsert {
	u.Set(billingprofile.FieldWorkflowConfigID, v)
	return u
}

// UpdateWorkflowConfigID sets the "workflow_config_id" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateWorkflowConfigID() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldWorkflowConfigID)
	return u
}

// SetDefault sets the "default" field.
func (u *BillingProfileUpsert) SetDefault(v bool) *BillingProfileUpsert {
	u.Set(billingprofile.FieldDefault, v)
	return u
}

// UpdateDefault sets the "default" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateDefault() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldDefault)
	return u
}

// SetSupplierName sets the "supplier_name" field.
func (u *BillingProfileUpsert) SetSupplierName(v string) *BillingProfileUpsert {
	u.Set(billingprofile.FieldSupplierName, v)
	return u
}

// UpdateSupplierName sets the "supplier_name" field to the value that was provided on create.
func (u *BillingProfileUpsert) UpdateSupplierName() *BillingProfileUpsert {
	u.SetExcluded(billingprofile.FieldSupplierName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingProfile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billingprofile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingProfileUpsertOne) UpdateNewValues() *BillingProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billingprofile.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billingprofile.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billingprofile.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingProfile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingProfileUpsertOne) Ignore() *BillingProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingProfileUpsertOne) DoNothing() *BillingProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingProfileCreate.OnConflict
// documentation for more info.
func (u *BillingProfileUpsertOne) Update(set func(*BillingProfileUpsert)) *BillingProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingProfileUpsertOne) SetMetadata(v map[string]string) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateMetadata() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingProfileUpsertOne) ClearMetadata() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingProfileUpsertOne) SetUpdatedAt(v time.Time) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateUpdatedAt() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingProfileUpsertOne) SetDeletedAt(v time.Time) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateDeletedAt() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingProfileUpsertOne) ClearDeletedAt() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *BillingProfileUpsertOne) SetName(v string) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateName() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BillingProfileUpsertOne) SetDescription(v string) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateDescription() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingProfileUpsertOne) ClearDescription() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearDescription()
	})
}

// SetSupplierAddressCountry sets the "supplier_address_country" field.
func (u *BillingProfileUpsertOne) SetSupplierAddressCountry(v models.CountryCode) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetSupplierAddressCountry(v)
	})
}

// UpdateSupplierAddressCountry sets the "supplier_address_country" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateSupplierAddressCountry() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateSupplierAddressCountry()
	})
}

// ClearSupplierAddressCountry clears the value of the "supplier_address_country" field.
func (u *BillingProfileUpsertOne) ClearSupplierAddressCountry() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearSupplierAddressCountry()
	})
}

// SetSupplierAddressPostalCode sets the "supplier_address_postal_code" field.
func (u *BillingProfileUpsertOne) SetSupplierAddressPostalCode(v string) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetSupplierAddressPostalCode(v)
	})
}

// UpdateSupplierAddressPostalCode sets the "supplier_address_postal_code" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateSupplierAddressPostalCode() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateSupplierAddressPostalCode()
	})
}

// ClearSupplierAddressPostalCode clears the value of the "supplier_address_postal_code" field.
func (u *BillingProfileUpsertOne) ClearSupplierAddressPostalCode() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearSupplierAddressPostalCode()
	})
}

// SetSupplierAddressState sets the "supplier_address_state" field.
func (u *BillingProfileUpsertOne) SetSupplierAddressState(v string) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetSupplierAddressState(v)
	})
}

// UpdateSupplierAddressState sets the "supplier_address_state" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateSupplierAddressState() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateSupplierAddressState()
	})
}

// ClearSupplierAddressState clears the value of the "supplier_address_state" field.
func (u *BillingProfileUpsertOne) ClearSupplierAddressState() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearSupplierAddressState()
	})
}

// SetSupplierAddressCity sets the "supplier_address_city" field.
func (u *BillingProfileUpsertOne) SetSupplierAddressCity(v string) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetSupplierAddressCity(v)
	})
}

// UpdateSupplierAddressCity sets the "supplier_address_city" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateSupplierAddressCity() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateSupplierAddressCity()
	})
}

// ClearSupplierAddressCity clears the value of the "supplier_address_city" field.
func (u *BillingProfileUpsertOne) ClearSupplierAddressCity() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearSupplierAddressCity()
	})
}

// SetSupplierAddressLine1 sets the "supplier_address_line1" field.
func (u *BillingProfileUpsertOne) SetSupplierAddressLine1(v string) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetSupplierAddressLine1(v)
	})
}

// UpdateSupplierAddressLine1 sets the "supplier_address_line1" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateSupplierAddressLine1() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateSupplierAddressLine1()
	})
}

// ClearSupplierAddressLine1 clears the value of the "supplier_address_line1" field.
func (u *BillingProfileUpsertOne) ClearSupplierAddressLine1() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearSupplierAddressLine1()
	})
}

// SetSupplierAddressLine2 sets the "supplier_address_line2" field.
func (u *BillingProfileUpsertOne) SetSupplierAddressLine2(v string) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetSupplierAddressLine2(v)
	})
}

// UpdateSupplierAddressLine2 sets the "supplier_address_line2" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateSupplierAddressLine2() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateSupplierAddressLine2()
	})
}

// ClearSupplierAddressLine2 clears the value of the "supplier_address_line2" field.
func (u *BillingProfileUpsertOne) ClearSupplierAddressLine2() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearSupplierAddressLine2()
	})
}

// SetSupplierAddressPhoneNumber sets the "supplier_address_phone_number" field.
func (u *BillingProfileUpsertOne) SetSupplierAddressPhoneNumber(v string) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetSupplierAddressPhoneNumber(v)
	})
}

// UpdateSupplierAddressPhoneNumber sets the "supplier_address_phone_number" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateSupplierAddressPhoneNumber() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateSupplierAddressPhoneNumber()
	})
}

// ClearSupplierAddressPhoneNumber clears the value of the "supplier_address_phone_number" field.
func (u *BillingProfileUpsertOne) ClearSupplierAddressPhoneNumber() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearSupplierAddressPhoneNumber()
	})
}

// SetTaxProvider sets the "tax_provider" field.
func (u *BillingProfileUpsertOne) SetTaxProvider(v provider.TaxProvider) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetTaxProvider(v)
	})
}

// UpdateTaxProvider sets the "tax_provider" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateTaxProvider() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateTaxProvider()
	})
}

// SetInvoicingProvider sets the "invoicing_provider" field.
func (u *BillingProfileUpsertOne) SetInvoicingProvider(v provider.InvoicingProvider) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetInvoicingProvider(v)
	})
}

// UpdateInvoicingProvider sets the "invoicing_provider" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateInvoicingProvider() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateInvoicingProvider()
	})
}

// SetPaymentProvider sets the "payment_provider" field.
func (u *BillingProfileUpsertOne) SetPaymentProvider(v provider.PaymentProvider) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetPaymentProvider(v)
	})
}

// UpdatePaymentProvider sets the "payment_provider" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdatePaymentProvider() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdatePaymentProvider()
	})
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (u *BillingProfileUpsertOne) SetWorkflowConfigID(v string) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetWorkflowConfigID(v)
	})
}

// UpdateWorkflowConfigID sets the "workflow_config_id" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateWorkflowConfigID() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateWorkflowConfigID()
	})
}

// SetDefault sets the "default" field.
func (u *BillingProfileUpsertOne) SetDefault(v bool) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetDefault(v)
	})
}

// UpdateDefault sets the "default" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateDefault() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateDefault()
	})
}

// SetSupplierName sets the "supplier_name" field.
func (u *BillingProfileUpsertOne) SetSupplierName(v string) *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetSupplierName(v)
	})
}

// UpdateSupplierName sets the "supplier_name" field to the value that was provided on create.
func (u *BillingProfileUpsertOne) UpdateSupplierName() *BillingProfileUpsertOne {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateSupplierName()
	})
}

// Exec executes the query.
func (u *BillingProfileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingProfileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingProfileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingProfileUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingProfileUpsertOne.ID is not supported by MySQL driver. Use BillingProfileUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingProfileUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingProfileCreateBulk is the builder for creating many BillingProfile entities in bulk.
type BillingProfileCreateBulk struct {
	config
	err      error
	builders []*BillingProfileCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingProfile entities in the database.
func (bpcb *BillingProfileCreateBulk) Save(ctx context.Context) ([]*BillingProfile, error) {
	if bpcb.err != nil {
		return nil, bpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bpcb.builders))
	nodes := make([]*BillingProfile, len(bpcb.builders))
	mutators := make([]Mutator, len(bpcb.builders))
	for i := range bpcb.builders {
		func(i int, root context.Context) {
			builder := bpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bpcb *BillingProfileCreateBulk) SaveX(ctx context.Context) []*BillingProfile {
	v, err := bpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bpcb *BillingProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := bpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpcb *BillingProfileCreateBulk) ExecX(ctx context.Context) {
	if err := bpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingProfile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingProfileUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bpcb *BillingProfileCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingProfileUpsertBulk {
	bpcb.conflict = opts
	return &BillingProfileUpsertBulk{
		create: bpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingProfile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bpcb *BillingProfileCreateBulk) OnConflictColumns(columns ...string) *BillingProfileUpsertBulk {
	bpcb.conflict = append(bpcb.conflict, sql.ConflictColumns(columns...))
	return &BillingProfileUpsertBulk{
		create: bpcb,
	}
}

// BillingProfileUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingProfile nodes.
type BillingProfileUpsertBulk struct {
	create *BillingProfileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingProfile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billingprofile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingProfileUpsertBulk) UpdateNewValues() *BillingProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billingprofile.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billingprofile.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billingprofile.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingProfile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingProfileUpsertBulk) Ignore() *BillingProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingProfileUpsertBulk) DoNothing() *BillingProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingProfileCreateBulk.OnConflict
// documentation for more info.
func (u *BillingProfileUpsertBulk) Update(set func(*BillingProfileUpsert)) *BillingProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingProfileUpsertBulk) SetMetadata(v map[string]string) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateMetadata() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingProfileUpsertBulk) ClearMetadata() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingProfileUpsertBulk) SetUpdatedAt(v time.Time) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateUpdatedAt() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingProfileUpsertBulk) SetDeletedAt(v time.Time) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateDeletedAt() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingProfileUpsertBulk) ClearDeletedAt() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *BillingProfileUpsertBulk) SetName(v string) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateName() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BillingProfileUpsertBulk) SetDescription(v string) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateDescription() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingProfileUpsertBulk) ClearDescription() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearDescription()
	})
}

// SetSupplierAddressCountry sets the "supplier_address_country" field.
func (u *BillingProfileUpsertBulk) SetSupplierAddressCountry(v models.CountryCode) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetSupplierAddressCountry(v)
	})
}

// UpdateSupplierAddressCountry sets the "supplier_address_country" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateSupplierAddressCountry() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateSupplierAddressCountry()
	})
}

// ClearSupplierAddressCountry clears the value of the "supplier_address_country" field.
func (u *BillingProfileUpsertBulk) ClearSupplierAddressCountry() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearSupplierAddressCountry()
	})
}

// SetSupplierAddressPostalCode sets the "supplier_address_postal_code" field.
func (u *BillingProfileUpsertBulk) SetSupplierAddressPostalCode(v string) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetSupplierAddressPostalCode(v)
	})
}

// UpdateSupplierAddressPostalCode sets the "supplier_address_postal_code" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateSupplierAddressPostalCode() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateSupplierAddressPostalCode()
	})
}

// ClearSupplierAddressPostalCode clears the value of the "supplier_address_postal_code" field.
func (u *BillingProfileUpsertBulk) ClearSupplierAddressPostalCode() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearSupplierAddressPostalCode()
	})
}

// SetSupplierAddressState sets the "supplier_address_state" field.
func (u *BillingProfileUpsertBulk) SetSupplierAddressState(v string) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetSupplierAddressState(v)
	})
}

// UpdateSupplierAddressState sets the "supplier_address_state" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateSupplierAddressState() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateSupplierAddressState()
	})
}

// ClearSupplierAddressState clears the value of the "supplier_address_state" field.
func (u *BillingProfileUpsertBulk) ClearSupplierAddressState() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearSupplierAddressState()
	})
}

// SetSupplierAddressCity sets the "supplier_address_city" field.
func (u *BillingProfileUpsertBulk) SetSupplierAddressCity(v string) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetSupplierAddressCity(v)
	})
}

// UpdateSupplierAddressCity sets the "supplier_address_city" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateSupplierAddressCity() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateSupplierAddressCity()
	})
}

// ClearSupplierAddressCity clears the value of the "supplier_address_city" field.
func (u *BillingProfileUpsertBulk) ClearSupplierAddressCity() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearSupplierAddressCity()
	})
}

// SetSupplierAddressLine1 sets the "supplier_address_line1" field.
func (u *BillingProfileUpsertBulk) SetSupplierAddressLine1(v string) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetSupplierAddressLine1(v)
	})
}

// UpdateSupplierAddressLine1 sets the "supplier_address_line1" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateSupplierAddressLine1() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateSupplierAddressLine1()
	})
}

// ClearSupplierAddressLine1 clears the value of the "supplier_address_line1" field.
func (u *BillingProfileUpsertBulk) ClearSupplierAddressLine1() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearSupplierAddressLine1()
	})
}

// SetSupplierAddressLine2 sets the "supplier_address_line2" field.
func (u *BillingProfileUpsertBulk) SetSupplierAddressLine2(v string) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetSupplierAddressLine2(v)
	})
}

// UpdateSupplierAddressLine2 sets the "supplier_address_line2" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateSupplierAddressLine2() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateSupplierAddressLine2()
	})
}

// ClearSupplierAddressLine2 clears the value of the "supplier_address_line2" field.
func (u *BillingProfileUpsertBulk) ClearSupplierAddressLine2() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearSupplierAddressLine2()
	})
}

// SetSupplierAddressPhoneNumber sets the "supplier_address_phone_number" field.
func (u *BillingProfileUpsertBulk) SetSupplierAddressPhoneNumber(v string) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetSupplierAddressPhoneNumber(v)
	})
}

// UpdateSupplierAddressPhoneNumber sets the "supplier_address_phone_number" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateSupplierAddressPhoneNumber() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateSupplierAddressPhoneNumber()
	})
}

// ClearSupplierAddressPhoneNumber clears the value of the "supplier_address_phone_number" field.
func (u *BillingProfileUpsertBulk) ClearSupplierAddressPhoneNumber() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.ClearSupplierAddressPhoneNumber()
	})
}

// SetTaxProvider sets the "tax_provider" field.
func (u *BillingProfileUpsertBulk) SetTaxProvider(v provider.TaxProvider) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetTaxProvider(v)
	})
}

// UpdateTaxProvider sets the "tax_provider" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateTaxProvider() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateTaxProvider()
	})
}

// SetInvoicingProvider sets the "invoicing_provider" field.
func (u *BillingProfileUpsertBulk) SetInvoicingProvider(v provider.InvoicingProvider) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetInvoicingProvider(v)
	})
}

// UpdateInvoicingProvider sets the "invoicing_provider" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateInvoicingProvider() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateInvoicingProvider()
	})
}

// SetPaymentProvider sets the "payment_provider" field.
func (u *BillingProfileUpsertBulk) SetPaymentProvider(v provider.PaymentProvider) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetPaymentProvider(v)
	})
}

// UpdatePaymentProvider sets the "payment_provider" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdatePaymentProvider() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdatePaymentProvider()
	})
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (u *BillingProfileUpsertBulk) SetWorkflowConfigID(v string) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetWorkflowConfigID(v)
	})
}

// UpdateWorkflowConfigID sets the "workflow_config_id" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateWorkflowConfigID() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateWorkflowConfigID()
	})
}

// SetDefault sets the "default" field.
func (u *BillingProfileUpsertBulk) SetDefault(v bool) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetDefault(v)
	})
}

// UpdateDefault sets the "default" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateDefault() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateDefault()
	})
}

// SetSupplierName sets the "supplier_name" field.
func (u *BillingProfileUpsertBulk) SetSupplierName(v string) *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.SetSupplierName(v)
	})
}

// UpdateSupplierName sets the "supplier_name" field to the value that was provided on create.
func (u *BillingProfileUpsertBulk) UpdateSupplierName() *BillingProfileUpsertBulk {
	return u.Update(func(s *BillingProfileUpsert) {
		s.UpdateSupplierName()
	})
}

// Exec executes the query.
func (u *BillingProfileUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingProfileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingProfileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingProfileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
