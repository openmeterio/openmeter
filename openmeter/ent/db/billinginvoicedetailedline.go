// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicedetailedline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/currencyx"
)

// BillingInvoiceDetailedLine is the model entity for the BillingInvoiceDetailedLine schema.
type BillingInvoiceDetailedLine struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Annotations holds the value of the "annotations" field.
	Annotations map[string]interface{} `json:"annotations,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency currencyx.Code `json:"currency,omitempty"`
	// TaxConfig holds the value of the "tax_config" field.
	TaxConfig productcatalog.TaxConfig `json:"tax_config,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount alpacadecimal.Decimal `json:"amount,omitempty"`
	// TaxesTotal holds the value of the "taxes_total" field.
	TaxesTotal alpacadecimal.Decimal `json:"taxes_total,omitempty"`
	// TaxesInclusiveTotal holds the value of the "taxes_inclusive_total" field.
	TaxesInclusiveTotal alpacadecimal.Decimal `json:"taxes_inclusive_total,omitempty"`
	// TaxesExclusiveTotal holds the value of the "taxes_exclusive_total" field.
	TaxesExclusiveTotal alpacadecimal.Decimal `json:"taxes_exclusive_total,omitempty"`
	// ChargesTotal holds the value of the "charges_total" field.
	ChargesTotal alpacadecimal.Decimal `json:"charges_total,omitempty"`
	// DiscountsTotal holds the value of the "discounts_total" field.
	DiscountsTotal alpacadecimal.Decimal `json:"discounts_total,omitempty"`
	// Total holds the value of the "total" field.
	Total alpacadecimal.Decimal `json:"total,omitempty"`
	// ServicePeriodFrom holds the value of the "service_period_from" field.
	ServicePeriodFrom time.Time `json:"service_period_from,omitempty"`
	// ServicePeriodTo holds the value of the "service_period_to" field.
	ServicePeriodTo time.Time `json:"service_period_to,omitempty"`
	// InvoiceID holds the value of the "invoice_id" field.
	InvoiceID string `json:"invoice_id,omitempty"`
	// ParentLineID holds the value of the "parent_line_id" field.
	ParentLineID string `json:"parent_line_id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity alpacadecimal.Decimal `json:"quantity,omitempty"`
	// PerUnitAmount holds the value of the "per_unit_amount" field.
	PerUnitAmount alpacadecimal.Decimal `json:"per_unit_amount,omitempty"`
	// Category holds the value of the "category" field.
	Category billing.DetailedLineCategory `json:"category,omitempty"`
	// PaymentTerm holds the value of the "payment_term" field.
	PaymentTerm productcatalog.PaymentTermType `json:"payment_term,omitempty"`
	// InvoicingAppExternalID holds the value of the "invoicing_app_external_id" field.
	InvoicingAppExternalID *string `json:"invoicing_app_external_id,omitempty"`
	// ChildUniqueReferenceID holds the value of the "child_unique_reference_id" field.
	ChildUniqueReferenceID *string `json:"child_unique_reference_id,omitempty"`
	// Index holds the value of the "index" field.
	Index *int `json:"index,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingInvoiceDetailedLineQuery when eager-loading is set.
	Edges        BillingInvoiceDetailedLineEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillingInvoiceDetailedLineEdges holds the relations/edges for other nodes in the graph.
type BillingInvoiceDetailedLineEdges struct {
	// Invoice holds the value of the invoice edge.
	Invoice *BillingInvoice `json:"invoice,omitempty"`
	// ParentLine holds the value of the parent_line edge.
	ParentLine *BillingInvoiceLine `json:"parent_line,omitempty"`
	// AmountDiscounts holds the value of the amount_discounts edge.
	AmountDiscounts []*BillingInvoiceDetailedLineAmountDiscount `json:"amount_discounts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// InvoiceOrErr returns the Invoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceDetailedLineEdges) InvoiceOrErr() (*BillingInvoice, error) {
	if e.Invoice != nil {
		return e.Invoice, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: billinginvoice.Label}
	}
	return nil, &NotLoadedError{edge: "invoice"}
}

// ParentLineOrErr returns the ParentLine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceDetailedLineEdges) ParentLineOrErr() (*BillingInvoiceLine, error) {
	if e.ParentLine != nil {
		return e.ParentLine, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: billinginvoiceline.Label}
	}
	return nil, &NotLoadedError{edge: "parent_line"}
}

// AmountDiscountsOrErr returns the AmountDiscounts value or an error if the edge
// was not loaded in eager-loading.
func (e BillingInvoiceDetailedLineEdges) AmountDiscountsOrErr() ([]*BillingInvoiceDetailedLineAmountDiscount, error) {
	if e.loadedTypes[2] {
		return e.AmountDiscounts, nil
	}
	return nil, &NotLoadedError{edge: "amount_discounts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingInvoiceDetailedLine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billinginvoicedetailedline.FieldAnnotations, billinginvoicedetailedline.FieldMetadata, billinginvoicedetailedline.FieldTaxConfig:
			values[i] = new([]byte)
		case billinginvoicedetailedline.FieldAmount, billinginvoicedetailedline.FieldTaxesTotal, billinginvoicedetailedline.FieldTaxesInclusiveTotal, billinginvoicedetailedline.FieldTaxesExclusiveTotal, billinginvoicedetailedline.FieldChargesTotal, billinginvoicedetailedline.FieldDiscountsTotal, billinginvoicedetailedline.FieldTotal, billinginvoicedetailedline.FieldQuantity, billinginvoicedetailedline.FieldPerUnitAmount:
			values[i] = new(alpacadecimal.Decimal)
		case billinginvoicedetailedline.FieldIndex:
			values[i] = new(sql.NullInt64)
		case billinginvoicedetailedline.FieldID, billinginvoicedetailedline.FieldNamespace, billinginvoicedetailedline.FieldName, billinginvoicedetailedline.FieldDescription, billinginvoicedetailedline.FieldCurrency, billinginvoicedetailedline.FieldInvoiceID, billinginvoicedetailedline.FieldParentLineID, billinginvoicedetailedline.FieldCategory, billinginvoicedetailedline.FieldPaymentTerm, billinginvoicedetailedline.FieldInvoicingAppExternalID, billinginvoicedetailedline.FieldChildUniqueReferenceID:
			values[i] = new(sql.NullString)
		case billinginvoicedetailedline.FieldCreatedAt, billinginvoicedetailedline.FieldUpdatedAt, billinginvoicedetailedline.FieldDeletedAt, billinginvoicedetailedline.FieldServicePeriodFrom, billinginvoicedetailedline.FieldServicePeriodTo:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingInvoiceDetailedLine fields.
func (_m *BillingInvoiceDetailedLine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billinginvoicedetailedline.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case billinginvoicedetailedline.FieldAnnotations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field annotations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Annotations); err != nil {
					return fmt.Errorf("unmarshal field annotations: %w", err)
				}
			}
		case billinginvoicedetailedline.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				_m.Namespace = value.String
			}
		case billinginvoicedetailedline.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case billinginvoicedetailedline.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case billinginvoicedetailedline.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case billinginvoicedetailedline.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case billinginvoicedetailedline.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case billinginvoicedetailedline.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = new(string)
				*_m.Description = value.String
			}
		case billinginvoicedetailedline.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				_m.Currency = currencyx.Code(value.String)
			}
		case billinginvoicedetailedline.FieldTaxConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tax_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.TaxConfig); err != nil {
					return fmt.Errorf("unmarshal field tax_config: %w", err)
				}
			}
		case billinginvoicedetailedline.FieldAmount:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				_m.Amount = *value
			}
		case billinginvoicedetailedline.FieldTaxesTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field taxes_total", values[i])
			} else if value != nil {
				_m.TaxesTotal = *value
			}
		case billinginvoicedetailedline.FieldTaxesInclusiveTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field taxes_inclusive_total", values[i])
			} else if value != nil {
				_m.TaxesInclusiveTotal = *value
			}
		case billinginvoicedetailedline.FieldTaxesExclusiveTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field taxes_exclusive_total", values[i])
			} else if value != nil {
				_m.TaxesExclusiveTotal = *value
			}
		case billinginvoicedetailedline.FieldChargesTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field charges_total", values[i])
			} else if value != nil {
				_m.ChargesTotal = *value
			}
		case billinginvoicedetailedline.FieldDiscountsTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field discounts_total", values[i])
			} else if value != nil {
				_m.DiscountsTotal = *value
			}
		case billinginvoicedetailedline.FieldTotal:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value != nil {
				_m.Total = *value
			}
		case billinginvoicedetailedline.FieldServicePeriodFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field service_period_from", values[i])
			} else if value.Valid {
				_m.ServicePeriodFrom = value.Time
			}
		case billinginvoicedetailedline.FieldServicePeriodTo:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field service_period_to", values[i])
			} else if value.Valid {
				_m.ServicePeriodTo = value.Time
			}
		case billinginvoicedetailedline.FieldInvoiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_id", values[i])
			} else if value.Valid {
				_m.InvoiceID = value.String
			}
		case billinginvoicedetailedline.FieldParentLineID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_line_id", values[i])
			} else if value.Valid {
				_m.ParentLineID = value.String
			}
		case billinginvoicedetailedline.FieldQuantity:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value != nil {
				_m.Quantity = *value
			}
		case billinginvoicedetailedline.FieldPerUnitAmount:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field per_unit_amount", values[i])
			} else if value != nil {
				_m.PerUnitAmount = *value
			}
		case billinginvoicedetailedline.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				_m.Category = billing.DetailedLineCategory(value.String)
			}
		case billinginvoicedetailedline.FieldPaymentTerm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_term", values[i])
			} else if value.Valid {
				_m.PaymentTerm = productcatalog.PaymentTermType(value.String)
			}
		case billinginvoicedetailedline.FieldInvoicingAppExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoicing_app_external_id", values[i])
			} else if value.Valid {
				_m.InvoicingAppExternalID = new(string)
				*_m.InvoicingAppExternalID = value.String
			}
		case billinginvoicedetailedline.FieldChildUniqueReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field child_unique_reference_id", values[i])
			} else if value.Valid {
				_m.ChildUniqueReferenceID = new(string)
				*_m.ChildUniqueReferenceID = value.String
			}
		case billinginvoicedetailedline.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				_m.Index = new(int)
				*_m.Index = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingInvoiceDetailedLine.
// This includes values selected through modifiers, order, etc.
func (_m *BillingInvoiceDetailedLine) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryInvoice queries the "invoice" edge of the BillingInvoiceDetailedLine entity.
func (_m *BillingInvoiceDetailedLine) QueryInvoice() *BillingInvoiceQuery {
	return NewBillingInvoiceDetailedLineClient(_m.config).QueryInvoice(_m)
}

// QueryParentLine queries the "parent_line" edge of the BillingInvoiceDetailedLine entity.
func (_m *BillingInvoiceDetailedLine) QueryParentLine() *BillingInvoiceLineQuery {
	return NewBillingInvoiceDetailedLineClient(_m.config).QueryParentLine(_m)
}

// QueryAmountDiscounts queries the "amount_discounts" edge of the BillingInvoiceDetailedLine entity.
func (_m *BillingInvoiceDetailedLine) QueryAmountDiscounts() *BillingInvoiceDetailedLineAmountDiscountQuery {
	return NewBillingInvoiceDetailedLineClient(_m.config).QueryAmountDiscounts(_m)
}

// Update returns a builder for updating this BillingInvoiceDetailedLine.
// Note that you need to call BillingInvoiceDetailedLine.Unwrap() before calling this method if this BillingInvoiceDetailedLine
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BillingInvoiceDetailedLine) Update() *BillingInvoiceDetailedLineUpdateOne {
	return NewBillingInvoiceDetailedLineClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BillingInvoiceDetailedLine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BillingInvoiceDetailedLine) Unwrap() *BillingInvoiceDetailedLine {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingInvoiceDetailedLine is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BillingInvoiceDetailedLine) String() string {
	var builder strings.Builder
	builder.WriteString("BillingInvoiceDetailedLine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("annotations=")
	builder.WriteString(fmt.Sprintf("%v", _m.Annotations))
	builder.WriteString(", ")
	builder.WriteString("namespace=")
	builder.WriteString(_m.Namespace)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	if v := _m.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(fmt.Sprintf("%v", _m.Currency))
	builder.WriteString(", ")
	builder.WriteString("tax_config=")
	builder.WriteString(fmt.Sprintf("%v", _m.TaxConfig))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.Amount))
	builder.WriteString(", ")
	builder.WriteString("taxes_total=")
	builder.WriteString(fmt.Sprintf("%v", _m.TaxesTotal))
	builder.WriteString(", ")
	builder.WriteString("taxes_inclusive_total=")
	builder.WriteString(fmt.Sprintf("%v", _m.TaxesInclusiveTotal))
	builder.WriteString(", ")
	builder.WriteString("taxes_exclusive_total=")
	builder.WriteString(fmt.Sprintf("%v", _m.TaxesExclusiveTotal))
	builder.WriteString(", ")
	builder.WriteString("charges_total=")
	builder.WriteString(fmt.Sprintf("%v", _m.ChargesTotal))
	builder.WriteString(", ")
	builder.WriteString("discounts_total=")
	builder.WriteString(fmt.Sprintf("%v", _m.DiscountsTotal))
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", _m.Total))
	builder.WriteString(", ")
	builder.WriteString("service_period_from=")
	builder.WriteString(_m.ServicePeriodFrom.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("service_period_to=")
	builder.WriteString(_m.ServicePeriodTo.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("invoice_id=")
	builder.WriteString(_m.InvoiceID)
	builder.WriteString(", ")
	builder.WriteString("parent_line_id=")
	builder.WriteString(_m.ParentLineID)
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", _m.Quantity))
	builder.WriteString(", ")
	builder.WriteString("per_unit_amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.PerUnitAmount))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", _m.Category))
	builder.WriteString(", ")
	builder.WriteString("payment_term=")
	builder.WriteString(fmt.Sprintf("%v", _m.PaymentTerm))
	builder.WriteString(", ")
	if v := _m.InvoicingAppExternalID; v != nil {
		builder.WriteString("invoicing_app_external_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.ChildUniqueReferenceID; v != nil {
		builder.WriteString("child_unique_reference_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Index; v != nil {
		builder.WriteString("index=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BillingInvoiceDetailedLines is a parsable slice of BillingInvoiceDetailedLine.
type BillingInvoiceDetailedLines []*BillingInvoiceDetailedLine
