// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appstripecustomer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// AppStripeCustomerDelete is the builder for deleting a AppStripeCustomer entity.
type AppStripeCustomerDelete struct {
	config
	hooks    []Hook
	mutation *AppStripeCustomerMutation
}

// Where appends a list predicates to the AppStripeCustomerDelete builder.
func (ascd *AppStripeCustomerDelete) Where(ps ...predicate.AppStripeCustomer) *AppStripeCustomerDelete {
	ascd.mutation.Where(ps...)
	return ascd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ascd *AppStripeCustomerDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ascd.sqlExec, ascd.mutation, ascd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ascd *AppStripeCustomerDelete) ExecX(ctx context.Context) int {
	n, err := ascd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ascd *AppStripeCustomerDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(appstripecustomer.Table, sqlgraph.NewFieldSpec(appstripecustomer.FieldID, field.TypeInt))
	if ps := ascd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ascd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ascd.mutation.done = true
	return affected, err
}

// AppStripeCustomerDeleteOne is the builder for deleting a single AppStripeCustomer entity.
type AppStripeCustomerDeleteOne struct {
	ascd *AppStripeCustomerDelete
}

// Where appends a list predicates to the AppStripeCustomerDelete builder.
func (ascdo *AppStripeCustomerDeleteOne) Where(ps ...predicate.AppStripeCustomer) *AppStripeCustomerDeleteOne {
	ascdo.ascd.mutation.Where(ps...)
	return ascdo
}

// Exec executes the deletion query.
func (ascdo *AppStripeCustomerDeleteOne) Exec(ctx context.Context) error {
	n, err := ascdo.ascd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{appstripecustomer.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ascdo *AppStripeCustomerDeleteOne) ExecX(ctx context.Context) {
	if err := ascdo.Exec(ctx); err != nil {
		panic(err)
	}
}
