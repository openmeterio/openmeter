// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	billingentity "github.com/openmeterio/openmeter/openmeter/billing/entity"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceitem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingprofile"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfig"
)

// BillingInvoiceCreate is the builder for creating a BillingInvoice entity.
type BillingInvoiceCreate struct {
	config
	mutation *BillingInvoiceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (bic *BillingInvoiceCreate) SetNamespace(s string) *BillingInvoiceCreate {
	bic.mutation.SetNamespace(s)
	return bic
}

// SetCreatedAt sets the "created_at" field.
func (bic *BillingInvoiceCreate) SetCreatedAt(t time.Time) *BillingInvoiceCreate {
	bic.mutation.SetCreatedAt(t)
	return bic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bic *BillingInvoiceCreate) SetNillableCreatedAt(t *time.Time) *BillingInvoiceCreate {
	if t != nil {
		bic.SetCreatedAt(*t)
	}
	return bic
}

// SetUpdatedAt sets the "updated_at" field.
func (bic *BillingInvoiceCreate) SetUpdatedAt(t time.Time) *BillingInvoiceCreate {
	bic.mutation.SetUpdatedAt(t)
	return bic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bic *BillingInvoiceCreate) SetNillableUpdatedAt(t *time.Time) *BillingInvoiceCreate {
	if t != nil {
		bic.SetUpdatedAt(*t)
	}
	return bic
}

// SetDeletedAt sets the "deleted_at" field.
func (bic *BillingInvoiceCreate) SetDeletedAt(t time.Time) *BillingInvoiceCreate {
	bic.mutation.SetDeletedAt(t)
	return bic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bic *BillingInvoiceCreate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceCreate {
	if t != nil {
		bic.SetDeletedAt(*t)
	}
	return bic
}

// SetMetadata sets the "metadata" field.
func (bic *BillingInvoiceCreate) SetMetadata(m map[string]string) *BillingInvoiceCreate {
	bic.mutation.SetMetadata(m)
	return bic
}

// SetSeries sets the "series" field.
func (bic *BillingInvoiceCreate) SetSeries(s string) *BillingInvoiceCreate {
	bic.mutation.SetSeries(s)
	return bic
}

// SetNillableSeries sets the "series" field if the given value is not nil.
func (bic *BillingInvoiceCreate) SetNillableSeries(s *string) *BillingInvoiceCreate {
	if s != nil {
		bic.SetSeries(*s)
	}
	return bic
}

// SetCode sets the "code" field.
func (bic *BillingInvoiceCreate) SetCode(s string) *BillingInvoiceCreate {
	bic.mutation.SetCode(s)
	return bic
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (bic *BillingInvoiceCreate) SetNillableCode(s *string) *BillingInvoiceCreate {
	if s != nil {
		bic.SetCode(*s)
	}
	return bic
}

// SetCustomerID sets the "customer_id" field.
func (bic *BillingInvoiceCreate) SetCustomerID(s string) *BillingInvoiceCreate {
	bic.mutation.SetCustomerID(s)
	return bic
}

// SetBillingProfileID sets the "billing_profile_id" field.
func (bic *BillingInvoiceCreate) SetBillingProfileID(s string) *BillingInvoiceCreate {
	bic.mutation.SetBillingProfileID(s)
	return bic
}

// SetVoidedAt sets the "voided_at" field.
func (bic *BillingInvoiceCreate) SetVoidedAt(t time.Time) *BillingInvoiceCreate {
	bic.mutation.SetVoidedAt(t)
	return bic
}

// SetNillableVoidedAt sets the "voided_at" field if the given value is not nil.
func (bic *BillingInvoiceCreate) SetNillableVoidedAt(t *time.Time) *BillingInvoiceCreate {
	if t != nil {
		bic.SetVoidedAt(*t)
	}
	return bic
}

// SetCurrency sets the "currency" field.
func (bic *BillingInvoiceCreate) SetCurrency(s string) *BillingInvoiceCreate {
	bic.mutation.SetCurrency(s)
	return bic
}

// SetDueDate sets the "due_date" field.
func (bic *BillingInvoiceCreate) SetDueDate(t time.Time) *BillingInvoiceCreate {
	bic.mutation.SetDueDate(t)
	return bic
}

// SetStatus sets the "status" field.
func (bic *BillingInvoiceCreate) SetStatus(bs billingentity.InvoiceStatus) *BillingInvoiceCreate {
	bic.mutation.SetStatus(bs)
	return bic
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (bic *BillingInvoiceCreate) SetWorkflowConfigID(s string) *BillingInvoiceCreate {
	bic.mutation.SetWorkflowConfigID(s)
	return bic
}

// SetPeriodStart sets the "period_start" field.
func (bic *BillingInvoiceCreate) SetPeriodStart(t time.Time) *BillingInvoiceCreate {
	bic.mutation.SetPeriodStart(t)
	return bic
}

// SetPeriodEnd sets the "period_end" field.
func (bic *BillingInvoiceCreate) SetPeriodEnd(t time.Time) *BillingInvoiceCreate {
	bic.mutation.SetPeriodEnd(t)
	return bic
}

// SetID sets the "id" field.
func (bic *BillingInvoiceCreate) SetID(s string) *BillingInvoiceCreate {
	bic.mutation.SetID(s)
	return bic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bic *BillingInvoiceCreate) SetNillableID(s *string) *BillingInvoiceCreate {
	if s != nil {
		bic.SetID(*s)
	}
	return bic
}

// SetBillingProfile sets the "billing_profile" edge to the BillingProfile entity.
func (bic *BillingInvoiceCreate) SetBillingProfile(b *BillingProfile) *BillingInvoiceCreate {
	return bic.SetBillingProfileID(b.ID)
}

// SetBillingWorkflowConfigID sets the "billing_workflow_config" edge to the BillingWorkflowConfig entity by ID.
func (bic *BillingInvoiceCreate) SetBillingWorkflowConfigID(id string) *BillingInvoiceCreate {
	bic.mutation.SetBillingWorkflowConfigID(id)
	return bic
}

// SetBillingWorkflowConfig sets the "billing_workflow_config" edge to the BillingWorkflowConfig entity.
func (bic *BillingInvoiceCreate) SetBillingWorkflowConfig(b *BillingWorkflowConfig) *BillingInvoiceCreate {
	return bic.SetBillingWorkflowConfigID(b.ID)
}

// AddBillingInvoiceItemIDs adds the "billing_invoice_items" edge to the BillingInvoiceItem entity by IDs.
func (bic *BillingInvoiceCreate) AddBillingInvoiceItemIDs(ids ...string) *BillingInvoiceCreate {
	bic.mutation.AddBillingInvoiceItemIDs(ids...)
	return bic
}

// AddBillingInvoiceItems adds the "billing_invoice_items" edges to the BillingInvoiceItem entity.
func (bic *BillingInvoiceCreate) AddBillingInvoiceItems(b ...*BillingInvoiceItem) *BillingInvoiceCreate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bic.AddBillingInvoiceItemIDs(ids...)
}

// Mutation returns the BillingInvoiceMutation object of the builder.
func (bic *BillingInvoiceCreate) Mutation() *BillingInvoiceMutation {
	return bic.mutation
}

// Save creates the BillingInvoice in the database.
func (bic *BillingInvoiceCreate) Save(ctx context.Context) (*BillingInvoice, error) {
	bic.defaults()
	return withHooks(ctx, bic.sqlSave, bic.mutation, bic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bic *BillingInvoiceCreate) SaveX(ctx context.Context) *BillingInvoice {
	v, err := bic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bic *BillingInvoiceCreate) Exec(ctx context.Context) error {
	_, err := bic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bic *BillingInvoiceCreate) ExecX(ctx context.Context) {
	if err := bic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bic *BillingInvoiceCreate) defaults() {
	if _, ok := bic.mutation.CreatedAt(); !ok {
		v := billinginvoice.DefaultCreatedAt()
		bic.mutation.SetCreatedAt(v)
	}
	if _, ok := bic.mutation.UpdatedAt(); !ok {
		v := billinginvoice.DefaultUpdatedAt()
		bic.mutation.SetUpdatedAt(v)
	}
	if _, ok := bic.mutation.ID(); !ok {
		v := billinginvoice.DefaultID()
		bic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bic *BillingInvoiceCreate) check() error {
	if _, ok := bic.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingInvoice.namespace"`)}
	}
	if v, ok := bic.mutation.Namespace(); ok {
		if err := billinginvoice.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.namespace": %w`, err)}
		}
	}
	if _, ok := bic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingInvoice.created_at"`)}
	}
	if _, ok := bic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingInvoice.updated_at"`)}
	}
	if _, ok := bic.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`db: missing required field "BillingInvoice.customer_id"`)}
	}
	if v, ok := bic.mutation.CustomerID(); ok {
		if err := billinginvoice.CustomerIDValidator(v); err != nil {
			return &ValidationError{Name: "customer_id", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.customer_id": %w`, err)}
		}
	}
	if _, ok := bic.mutation.BillingProfileID(); !ok {
		return &ValidationError{Name: "billing_profile_id", err: errors.New(`db: missing required field "BillingInvoice.billing_profile_id"`)}
	}
	if v, ok := bic.mutation.BillingProfileID(); ok {
		if err := billinginvoice.BillingProfileIDValidator(v); err != nil {
			return &ValidationError{Name: "billing_profile_id", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.billing_profile_id": %w`, err)}
		}
	}
	if _, ok := bic.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`db: missing required field "BillingInvoice.currency"`)}
	}
	if v, ok := bic.mutation.Currency(); ok {
		if err := billinginvoice.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.currency": %w`, err)}
		}
	}
	if _, ok := bic.mutation.DueDate(); !ok {
		return &ValidationError{Name: "due_date", err: errors.New(`db: missing required field "BillingInvoice.due_date"`)}
	}
	if _, ok := bic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "BillingInvoice.status"`)}
	}
	if v, ok := bic.mutation.Status(); ok {
		if err := billinginvoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "BillingInvoice.status": %w`, err)}
		}
	}
	if _, ok := bic.mutation.WorkflowConfigID(); !ok {
		return &ValidationError{Name: "workflow_config_id", err: errors.New(`db: missing required field "BillingInvoice.workflow_config_id"`)}
	}
	if _, ok := bic.mutation.PeriodStart(); !ok {
		return &ValidationError{Name: "period_start", err: errors.New(`db: missing required field "BillingInvoice.period_start"`)}
	}
	if _, ok := bic.mutation.PeriodEnd(); !ok {
		return &ValidationError{Name: "period_end", err: errors.New(`db: missing required field "BillingInvoice.period_end"`)}
	}
	if len(bic.mutation.BillingProfileIDs()) == 0 {
		return &ValidationError{Name: "billing_profile", err: errors.New(`db: missing required edge "BillingInvoice.billing_profile"`)}
	}
	if len(bic.mutation.BillingWorkflowConfigIDs()) == 0 {
		return &ValidationError{Name: "billing_workflow_config", err: errors.New(`db: missing required edge "BillingInvoice.billing_workflow_config"`)}
	}
	return nil
}

func (bic *BillingInvoiceCreate) sqlSave(ctx context.Context) (*BillingInvoice, error) {
	if err := bic.check(); err != nil {
		return nil, err
	}
	_node, _spec := bic.createSpec()
	if err := sqlgraph.CreateNode(ctx, bic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingInvoice.ID type: %T", _spec.ID.Value)
		}
	}
	bic.mutation.id = &_node.ID
	bic.mutation.done = true
	return _node, nil
}

func (bic *BillingInvoiceCreate) createSpec() (*BillingInvoice, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingInvoice{config: bic.config}
		_spec = sqlgraph.NewCreateSpec(billinginvoice.Table, sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString))
	)
	_spec.OnConflict = bic.conflict
	if id, ok := bic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bic.mutation.Namespace(); ok {
		_spec.SetField(billinginvoice.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := bic.mutation.CreatedAt(); ok {
		_spec.SetField(billinginvoice.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bic.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoice.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bic.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoice.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bic.mutation.Metadata(); ok {
		_spec.SetField(billinginvoice.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := bic.mutation.Series(); ok {
		_spec.SetField(billinginvoice.FieldSeries, field.TypeString, value)
		_node.Series = &value
	}
	if value, ok := bic.mutation.Code(); ok {
		_spec.SetField(billinginvoice.FieldCode, field.TypeString, value)
		_node.Code = &value
	}
	if value, ok := bic.mutation.CustomerID(); ok {
		_spec.SetField(billinginvoice.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = value
	}
	if value, ok := bic.mutation.VoidedAt(); ok {
		_spec.SetField(billinginvoice.FieldVoidedAt, field.TypeTime, value)
		_node.VoidedAt = value
	}
	if value, ok := bic.mutation.Currency(); ok {
		_spec.SetField(billinginvoice.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := bic.mutation.DueDate(); ok {
		_spec.SetField(billinginvoice.FieldDueDate, field.TypeTime, value)
		_node.DueDate = value
	}
	if value, ok := bic.mutation.Status(); ok {
		_spec.SetField(billinginvoice.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := bic.mutation.PeriodStart(); ok {
		_spec.SetField(billinginvoice.FieldPeriodStart, field.TypeTime, value)
		_node.PeriodStart = value
	}
	if value, ok := bic.mutation.PeriodEnd(); ok {
		_spec.SetField(billinginvoice.FieldPeriodEnd, field.TypeTime, value)
		_node.PeriodEnd = value
	}
	if nodes := bic.mutation.BillingProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoice.BillingProfileTable,
			Columns: []string{billinginvoice.BillingProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingprofile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BillingProfileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bic.mutation.BillingWorkflowConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billinginvoice.BillingWorkflowConfigTable,
			Columns: []string{billinginvoice.BillingWorkflowConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingworkflowconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkflowConfigID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bic.mutation.BillingInvoiceItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoice.BillingInvoiceItemsTable,
			Columns: []string{billinginvoice.BillingInvoiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoice.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bic *BillingInvoiceCreate) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceUpsertOne {
	bic.conflict = opts
	return &BillingInvoiceUpsertOne{
		create: bic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bic *BillingInvoiceCreate) OnConflictColumns(columns ...string) *BillingInvoiceUpsertOne {
	bic.conflict = append(bic.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceUpsertOne{
		create: bic,
	}
}

type (
	// BillingInvoiceUpsertOne is the builder for "upsert"-ing
	//  one BillingInvoice node.
	BillingInvoiceUpsertOne struct {
		create *BillingInvoiceCreate
	}

	// BillingInvoiceUpsert is the "OnConflict" setter.
	BillingInvoiceUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceUpsert) SetUpdatedAt(v time.Time) *BillingInvoiceUpsert {
	u.Set(billinginvoice.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceUpsert) UpdateUpdatedAt() *BillingInvoiceUpsert {
	u.SetExcluded(billinginvoice.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceUpsert) SetDeletedAt(v time.Time) *BillingInvoiceUpsert {
	u.Set(billinginvoice.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceUpsert) UpdateDeletedAt() *BillingInvoiceUpsert {
	u.SetExcluded(billinginvoice.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceUpsert) ClearDeletedAt() *BillingInvoiceUpsert {
	u.SetNull(billinginvoice.FieldDeletedAt)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceUpsert) SetMetadata(v map[string]string) *BillingInvoiceUpsert {
	u.Set(billinginvoice.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceUpsert) UpdateMetadata() *BillingInvoiceUpsert {
	u.SetExcluded(billinginvoice.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceUpsert) ClearMetadata() *BillingInvoiceUpsert {
	u.SetNull(billinginvoice.FieldMetadata)
	return u
}

// SetSeries sets the "series" field.
func (u *BillingInvoiceUpsert) SetSeries(v string) *BillingInvoiceUpsert {
	u.Set(billinginvoice.FieldSeries, v)
	return u
}

// UpdateSeries sets the "series" field to the value that was provided on create.
func (u *BillingInvoiceUpsert) UpdateSeries() *BillingInvoiceUpsert {
	u.SetExcluded(billinginvoice.FieldSeries)
	return u
}

// ClearSeries clears the value of the "series" field.
func (u *BillingInvoiceUpsert) ClearSeries() *BillingInvoiceUpsert {
	u.SetNull(billinginvoice.FieldSeries)
	return u
}

// SetCode sets the "code" field.
func (u *BillingInvoiceUpsert) SetCode(v string) *BillingInvoiceUpsert {
	u.Set(billinginvoice.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *BillingInvoiceUpsert) UpdateCode() *BillingInvoiceUpsert {
	u.SetExcluded(billinginvoice.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *BillingInvoiceUpsert) ClearCode() *BillingInvoiceUpsert {
	u.SetNull(billinginvoice.FieldCode)
	return u
}

// SetVoidedAt sets the "voided_at" field.
func (u *BillingInvoiceUpsert) SetVoidedAt(v time.Time) *BillingInvoiceUpsert {
	u.Set(billinginvoice.FieldVoidedAt, v)
	return u
}

// UpdateVoidedAt sets the "voided_at" field to the value that was provided on create.
func (u *BillingInvoiceUpsert) UpdateVoidedAt() *BillingInvoiceUpsert {
	u.SetExcluded(billinginvoice.FieldVoidedAt)
	return u
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (u *BillingInvoiceUpsert) ClearVoidedAt() *BillingInvoiceUpsert {
	u.SetNull(billinginvoice.FieldVoidedAt)
	return u
}

// SetDueDate sets the "due_date" field.
func (u *BillingInvoiceUpsert) SetDueDate(v time.Time) *BillingInvoiceUpsert {
	u.Set(billinginvoice.FieldDueDate, v)
	return u
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *BillingInvoiceUpsert) UpdateDueDate() *BillingInvoiceUpsert {
	u.SetExcluded(billinginvoice.FieldDueDate)
	return u
}

// SetStatus sets the "status" field.
func (u *BillingInvoiceUpsert) SetStatus(v billingentity.InvoiceStatus) *BillingInvoiceUpsert {
	u.Set(billinginvoice.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BillingInvoiceUpsert) UpdateStatus() *BillingInvoiceUpsert {
	u.SetExcluded(billinginvoice.FieldStatus)
	return u
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (u *BillingInvoiceUpsert) SetWorkflowConfigID(v string) *BillingInvoiceUpsert {
	u.Set(billinginvoice.FieldWorkflowConfigID, v)
	return u
}

// UpdateWorkflowConfigID sets the "workflow_config_id" field to the value that was provided on create.
func (u *BillingInvoiceUpsert) UpdateWorkflowConfigID() *BillingInvoiceUpsert {
	u.SetExcluded(billinginvoice.FieldWorkflowConfigID)
	return u
}

// SetPeriodStart sets the "period_start" field.
func (u *BillingInvoiceUpsert) SetPeriodStart(v time.Time) *BillingInvoiceUpsert {
	u.Set(billinginvoice.FieldPeriodStart, v)
	return u
}

// UpdatePeriodStart sets the "period_start" field to the value that was provided on create.
func (u *BillingInvoiceUpsert) UpdatePeriodStart() *BillingInvoiceUpsert {
	u.SetExcluded(billinginvoice.FieldPeriodStart)
	return u
}

// SetPeriodEnd sets the "period_end" field.
func (u *BillingInvoiceUpsert) SetPeriodEnd(v time.Time) *BillingInvoiceUpsert {
	u.Set(billinginvoice.FieldPeriodEnd, v)
	return u
}

// UpdatePeriodEnd sets the "period_end" field to the value that was provided on create.
func (u *BillingInvoiceUpsert) UpdatePeriodEnd() *BillingInvoiceUpsert {
	u.SetExcluded(billinginvoice.FieldPeriodEnd)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingInvoice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoice.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceUpsertOne) UpdateNewValues() *BillingInvoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billinginvoice.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billinginvoice.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billinginvoice.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CustomerID(); exists {
			s.SetIgnore(billinginvoice.FieldCustomerID)
		}
		if _, exists := u.create.mutation.BillingProfileID(); exists {
			s.SetIgnore(billinginvoice.FieldBillingProfileID)
		}
		if _, exists := u.create.mutation.Currency(); exists {
			s.SetIgnore(billinginvoice.FieldCurrency)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoice.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingInvoiceUpsertOne) Ignore() *BillingInvoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceUpsertOne) DoNothing() *BillingInvoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceCreate.OnConflict
// documentation for more info.
func (u *BillingInvoiceUpsertOne) Update(set func(*BillingInvoiceUpsert)) *BillingInvoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceUpsertOne) SetUpdatedAt(v time.Time) *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceUpsertOne) UpdateUpdatedAt() *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceUpsertOne) SetDeletedAt(v time.Time) *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceUpsertOne) UpdateDeletedAt() *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceUpsertOne) ClearDeletedAt() *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceUpsertOne) SetMetadata(v map[string]string) *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceUpsertOne) UpdateMetadata() *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceUpsertOne) ClearMetadata() *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.ClearMetadata()
	})
}

// SetSeries sets the "series" field.
func (u *BillingInvoiceUpsertOne) SetSeries(v string) *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetSeries(v)
	})
}

// UpdateSeries sets the "series" field to the value that was provided on create.
func (u *BillingInvoiceUpsertOne) UpdateSeries() *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateSeries()
	})
}

// ClearSeries clears the value of the "series" field.
func (u *BillingInvoiceUpsertOne) ClearSeries() *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.ClearSeries()
	})
}

// SetCode sets the "code" field.
func (u *BillingInvoiceUpsertOne) SetCode(v string) *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *BillingInvoiceUpsertOne) UpdateCode() *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *BillingInvoiceUpsertOne) ClearCode() *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.ClearCode()
	})
}

// SetVoidedAt sets the "voided_at" field.
func (u *BillingInvoiceUpsertOne) SetVoidedAt(v time.Time) *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetVoidedAt(v)
	})
}

// UpdateVoidedAt sets the "voided_at" field to the value that was provided on create.
func (u *BillingInvoiceUpsertOne) UpdateVoidedAt() *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateVoidedAt()
	})
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (u *BillingInvoiceUpsertOne) ClearVoidedAt() *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.ClearVoidedAt()
	})
}

// SetDueDate sets the "due_date" field.
func (u *BillingInvoiceUpsertOne) SetDueDate(v time.Time) *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetDueDate(v)
	})
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *BillingInvoiceUpsertOne) UpdateDueDate() *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateDueDate()
	})
}

// SetStatus sets the "status" field.
func (u *BillingInvoiceUpsertOne) SetStatus(v billingentity.InvoiceStatus) *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BillingInvoiceUpsertOne) UpdateStatus() *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateStatus()
	})
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (u *BillingInvoiceUpsertOne) SetWorkflowConfigID(v string) *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetWorkflowConfigID(v)
	})
}

// UpdateWorkflowConfigID sets the "workflow_config_id" field to the value that was provided on create.
func (u *BillingInvoiceUpsertOne) UpdateWorkflowConfigID() *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateWorkflowConfigID()
	})
}

// SetPeriodStart sets the "period_start" field.
func (u *BillingInvoiceUpsertOne) SetPeriodStart(v time.Time) *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetPeriodStart(v)
	})
}

// UpdatePeriodStart sets the "period_start" field to the value that was provided on create.
func (u *BillingInvoiceUpsertOne) UpdatePeriodStart() *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdatePeriodStart()
	})
}

// SetPeriodEnd sets the "period_end" field.
func (u *BillingInvoiceUpsertOne) SetPeriodEnd(v time.Time) *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetPeriodEnd(v)
	})
}

// UpdatePeriodEnd sets the "period_end" field to the value that was provided on create.
func (u *BillingInvoiceUpsertOne) UpdatePeriodEnd() *BillingInvoiceUpsertOne {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdatePeriodEnd()
	})
}

// Exec executes the query.
func (u *BillingInvoiceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingInvoiceUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingInvoiceUpsertOne.ID is not supported by MySQL driver. Use BillingInvoiceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingInvoiceUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingInvoiceCreateBulk is the builder for creating many BillingInvoice entities in bulk.
type BillingInvoiceCreateBulk struct {
	config
	err      error
	builders []*BillingInvoiceCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingInvoice entities in the database.
func (bicb *BillingInvoiceCreateBulk) Save(ctx context.Context) ([]*BillingInvoice, error) {
	if bicb.err != nil {
		return nil, bicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bicb.builders))
	nodes := make([]*BillingInvoice, len(bicb.builders))
	mutators := make([]Mutator, len(bicb.builders))
	for i := range bicb.builders {
		func(i int, root context.Context) {
			builder := bicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingInvoiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bicb *BillingInvoiceCreateBulk) SaveX(ctx context.Context) []*BillingInvoice {
	v, err := bicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bicb *BillingInvoiceCreateBulk) Exec(ctx context.Context) error {
	_, err := bicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bicb *BillingInvoiceCreateBulk) ExecX(ctx context.Context) {
	if err := bicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoice.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bicb *BillingInvoiceCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceUpsertBulk {
	bicb.conflict = opts
	return &BillingInvoiceUpsertBulk{
		create: bicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bicb *BillingInvoiceCreateBulk) OnConflictColumns(columns ...string) *BillingInvoiceUpsertBulk {
	bicb.conflict = append(bicb.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceUpsertBulk{
		create: bicb,
	}
}

// BillingInvoiceUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingInvoice nodes.
type BillingInvoiceUpsertBulk struct {
	create *BillingInvoiceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingInvoice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoice.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceUpsertBulk) UpdateNewValues() *BillingInvoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billinginvoice.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billinginvoice.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billinginvoice.FieldCreatedAt)
			}
			if _, exists := b.mutation.CustomerID(); exists {
				s.SetIgnore(billinginvoice.FieldCustomerID)
			}
			if _, exists := b.mutation.BillingProfileID(); exists {
				s.SetIgnore(billinginvoice.FieldBillingProfileID)
			}
			if _, exists := b.mutation.Currency(); exists {
				s.SetIgnore(billinginvoice.FieldCurrency)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoice.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingInvoiceUpsertBulk) Ignore() *BillingInvoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceUpsertBulk) DoNothing() *BillingInvoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceCreateBulk.OnConflict
// documentation for more info.
func (u *BillingInvoiceUpsertBulk) Update(set func(*BillingInvoiceUpsert)) *BillingInvoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceUpsertBulk) SetUpdatedAt(v time.Time) *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceUpsertBulk) UpdateUpdatedAt() *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceUpsertBulk) SetDeletedAt(v time.Time) *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceUpsertBulk) UpdateDeletedAt() *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceUpsertBulk) ClearDeletedAt() *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceUpsertBulk) SetMetadata(v map[string]string) *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceUpsertBulk) UpdateMetadata() *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceUpsertBulk) ClearMetadata() *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.ClearMetadata()
	})
}

// SetSeries sets the "series" field.
func (u *BillingInvoiceUpsertBulk) SetSeries(v string) *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetSeries(v)
	})
}

// UpdateSeries sets the "series" field to the value that was provided on create.
func (u *BillingInvoiceUpsertBulk) UpdateSeries() *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateSeries()
	})
}

// ClearSeries clears the value of the "series" field.
func (u *BillingInvoiceUpsertBulk) ClearSeries() *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.ClearSeries()
	})
}

// SetCode sets the "code" field.
func (u *BillingInvoiceUpsertBulk) SetCode(v string) *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *BillingInvoiceUpsertBulk) UpdateCode() *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *BillingInvoiceUpsertBulk) ClearCode() *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.ClearCode()
	})
}

// SetVoidedAt sets the "voided_at" field.
func (u *BillingInvoiceUpsertBulk) SetVoidedAt(v time.Time) *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetVoidedAt(v)
	})
}

// UpdateVoidedAt sets the "voided_at" field to the value that was provided on create.
func (u *BillingInvoiceUpsertBulk) UpdateVoidedAt() *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateVoidedAt()
	})
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (u *BillingInvoiceUpsertBulk) ClearVoidedAt() *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.ClearVoidedAt()
	})
}

// SetDueDate sets the "due_date" field.
func (u *BillingInvoiceUpsertBulk) SetDueDate(v time.Time) *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetDueDate(v)
	})
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *BillingInvoiceUpsertBulk) UpdateDueDate() *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateDueDate()
	})
}

// SetStatus sets the "status" field.
func (u *BillingInvoiceUpsertBulk) SetStatus(v billingentity.InvoiceStatus) *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BillingInvoiceUpsertBulk) UpdateStatus() *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateStatus()
	})
}

// SetWorkflowConfigID sets the "workflow_config_id" field.
func (u *BillingInvoiceUpsertBulk) SetWorkflowConfigID(v string) *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetWorkflowConfigID(v)
	})
}

// UpdateWorkflowConfigID sets the "workflow_config_id" field to the value that was provided on create.
func (u *BillingInvoiceUpsertBulk) UpdateWorkflowConfigID() *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdateWorkflowConfigID()
	})
}

// SetPeriodStart sets the "period_start" field.
func (u *BillingInvoiceUpsertBulk) SetPeriodStart(v time.Time) *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetPeriodStart(v)
	})
}

// UpdatePeriodStart sets the "period_start" field to the value that was provided on create.
func (u *BillingInvoiceUpsertBulk) UpdatePeriodStart() *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdatePeriodStart()
	})
}

// SetPeriodEnd sets the "period_end" field.
func (u *BillingInvoiceUpsertBulk) SetPeriodEnd(v time.Time) *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.SetPeriodEnd(v)
	})
}

// UpdatePeriodEnd sets the "period_end" field to the value that was provided on create.
func (u *BillingInvoiceUpsertBulk) UpdatePeriodEnd() *BillingInvoiceUpsertBulk {
	return u.Update(func(s *BillingInvoiceUpsert) {
		s.UpdatePeriodEnd()
	})
}

// Exec executes the query.
func (u *BillingInvoiceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingInvoiceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
