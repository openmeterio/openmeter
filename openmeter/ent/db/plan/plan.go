// Code generated by ent, DO NOT EDIT.

package plan

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the plan type in the database.
	Label = "plan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldBillablesMustAlign holds the string denoting the billables_must_align field in the database.
	FieldBillablesMustAlign = "billables_must_align"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldEffectiveFrom holds the string denoting the effective_from field in the database.
	FieldEffectiveFrom = "effective_from"
	// FieldEffectiveTo holds the string denoting the effective_to field in the database.
	FieldEffectiveTo = "effective_to"
	// FieldIsCustom holds the string denoting the is_custom field in the database.
	FieldIsCustom = "is_custom"
	// EdgePhases holds the string denoting the phases edge name in mutations.
	EdgePhases = "phases"
	// EdgeAddons holds the string denoting the addons edge name in mutations.
	EdgeAddons = "addons"
	// EdgeSubscriptions holds the string denoting the subscriptions edge name in mutations.
	EdgeSubscriptions = "subscriptions"
	// Table holds the table name of the plan in the database.
	Table = "plans"
	// PhasesTable is the table that holds the phases relation/edge.
	PhasesTable = "plan_phases"
	// PhasesInverseTable is the table name for the PlanPhase entity.
	// It exists in this package in order to avoid circular dependency with the "planphase" package.
	PhasesInverseTable = "plan_phases"
	// PhasesColumn is the table column denoting the phases relation/edge.
	PhasesColumn = "plan_id"
	// AddonsTable is the table that holds the addons relation/edge.
	AddonsTable = "plan_addons"
	// AddonsInverseTable is the table name for the PlanAddon entity.
	// It exists in this package in order to avoid circular dependency with the "planaddon" package.
	AddonsInverseTable = "plan_addons"
	// AddonsColumn is the table column denoting the addons relation/edge.
	AddonsColumn = "plan_id"
	// SubscriptionsTable is the table that holds the subscriptions relation/edge.
	SubscriptionsTable = "subscriptions"
	// SubscriptionsInverseTable is the table name for the Subscription entity.
	// It exists in this package in order to avoid circular dependency with the "subscription" package.
	SubscriptionsInverseTable = "subscriptions"
	// SubscriptionsColumn is the table column denoting the subscriptions relation/edge.
	SubscriptionsColumn = "plan_id"
)

// Columns holds all SQL columns for plan fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldDescription,
	FieldKey,
	FieldBillablesMustAlign,
	FieldVersion,
	FieldCurrency,
	FieldEffectiveFrom,
	FieldEffectiveTo,
	FieldIsCustom,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
	// DefaultBillablesMustAlign holds the default value on creation for the "billables_must_align" field.
	DefaultBillablesMustAlign bool
	// VersionValidator is a validator for the "version" field. It is called by the builders before save.
	VersionValidator func(int) error
	// DefaultCurrency holds the default value on creation for the "currency" field.
	DefaultCurrency string
	// CurrencyValidator is a validator for the "currency" field. It is called by the builders before save.
	CurrencyValidator func(string) error
	// DefaultIsCustom holds the default value on creation for the "is_custom" field.
	DefaultIsCustom bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Plan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByBillablesMustAlign orders the results by the billables_must_align field.
func ByBillablesMustAlign(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillablesMustAlign, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByEffectiveFrom orders the results by the effective_from field.
func ByEffectiveFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffectiveFrom, opts...).ToFunc()
}

// ByEffectiveTo orders the results by the effective_to field.
func ByEffectiveTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffectiveTo, opts...).ToFunc()
}

// ByIsCustom orders the results by the is_custom field.
func ByIsCustom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCustom, opts...).ToFunc()
}

// ByPhasesCount orders the results by phases count.
func ByPhasesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPhasesStep(), opts...)
	}
}

// ByPhases orders the results by phases terms.
func ByPhases(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPhasesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAddonsCount orders the results by addons count.
func ByAddonsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAddonsStep(), opts...)
	}
}

// ByAddons orders the results by addons terms.
func ByAddons(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddonsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubscriptionsCount orders the results by subscriptions count.
func BySubscriptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubscriptionsStep(), opts...)
	}
}

// BySubscriptions orders the results by subscriptions terms.
func BySubscriptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPhasesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PhasesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PhasesTable, PhasesColumn),
	)
}
func newAddonsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddonsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AddonsTable, AddonsColumn),
	)
}
func newSubscriptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubscriptionsTable, SubscriptionsColumn),
	)
}
