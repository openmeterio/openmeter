// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicevalidationissue"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingInvoiceValidationIssueDelete is the builder for deleting a BillingInvoiceValidationIssue entity.
type BillingInvoiceValidationIssueDelete struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceValidationIssueMutation
}

// Where appends a list predicates to the BillingInvoiceValidationIssueDelete builder.
func (bivid *BillingInvoiceValidationIssueDelete) Where(ps ...predicate.BillingInvoiceValidationIssue) *BillingInvoiceValidationIssueDelete {
	bivid.mutation.Where(ps...)
	return bivid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bivid *BillingInvoiceValidationIssueDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bivid.sqlExec, bivid.mutation, bivid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bivid *BillingInvoiceValidationIssueDelete) ExecX(ctx context.Context) int {
	n, err := bivid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bivid *BillingInvoiceValidationIssueDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(billinginvoicevalidationissue.Table, sqlgraph.NewFieldSpec(billinginvoicevalidationissue.FieldID, field.TypeString))
	if ps := bivid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bivid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bivid.mutation.done = true
	return affected, err
}

// BillingInvoiceValidationIssueDeleteOne is the builder for deleting a single BillingInvoiceValidationIssue entity.
type BillingInvoiceValidationIssueDeleteOne struct {
	bivid *BillingInvoiceValidationIssueDelete
}

// Where appends a list predicates to the BillingInvoiceValidationIssueDelete builder.
func (bivido *BillingInvoiceValidationIssueDeleteOne) Where(ps ...predicate.BillingInvoiceValidationIssue) *BillingInvoiceValidationIssueDeleteOne {
	bivido.bivid.mutation.Where(ps...)
	return bivido
}

// Exec executes the deletion query.
func (bivido *BillingInvoiceValidationIssueDeleteOne) Exec(ctx context.Context) error {
	n, err := bivido.bivid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{billinginvoicevalidationissue.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bivido *BillingInvoiceValidationIssueDeleteOne) ExecX(ctx context.Context) {
	if err := bivido.Exec(ctx); err != nil {
		panic(err)
	}
}
