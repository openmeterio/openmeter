// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	dbgrant "github.com/openmeterio/openmeter/openmeter/ent/db/grant"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/pkg/models"
)

// GrantUpdate is the builder for updating Grant entities.
type GrantUpdate struct {
	config
	hooks    []Hook
	mutation *GrantMutation
}

// Where appends a list predicates to the GrantUpdate builder.
func (_u *GrantUpdate) Where(ps ...predicate.Grant) *GrantUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAnnotations sets the "annotations" field.
func (_u *GrantUpdate) SetAnnotations(v models.Annotations) *GrantUpdate {
	_u.mutation.SetAnnotations(v)
	return _u
}

// ClearAnnotations clears the value of the "annotations" field.
func (_u *GrantUpdate) ClearAnnotations() *GrantUpdate {
	_u.mutation.ClearAnnotations()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GrantUpdate) SetUpdatedAt(v time.Time) *GrantUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *GrantUpdate) SetDeletedAt(v time.Time) *GrantUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableDeletedAt(v *time.Time) *GrantUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *GrantUpdate) ClearDeletedAt() *GrantUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *GrantUpdate) SetMetadata(v map[string]string) *GrantUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *GrantUpdate) ClearMetadata() *GrantUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetVoidedAt sets the "voided_at" field.
func (_u *GrantUpdate) SetVoidedAt(v time.Time) *GrantUpdate {
	_u.mutation.SetVoidedAt(v)
	return _u
}

// SetNillableVoidedAt sets the "voided_at" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableVoidedAt(v *time.Time) *GrantUpdate {
	if v != nil {
		_u.SetVoidedAt(*v)
	}
	return _u
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (_u *GrantUpdate) ClearVoidedAt() *GrantUpdate {
	_u.mutation.ClearVoidedAt()
	return _u
}

// Mutation returns the GrantMutation object of the builder.
func (_u *GrantUpdate) Mutation() *GrantMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GrantUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GrantUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GrantUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GrantUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GrantUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := dbgrant.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GrantUpdate) check() error {
	if _u.mutation.EntitlementCleared() && len(_u.mutation.EntitlementIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Grant.entitlement"`)
	}
	return nil
}

func (_u *GrantUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dbgrant.Table, dbgrant.Columns, sqlgraph.NewFieldSpec(dbgrant.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Annotations(); ok {
		_spec.SetField(dbgrant.FieldAnnotations, field.TypeJSON, value)
	}
	if _u.mutation.AnnotationsCleared() {
		_spec.ClearField(dbgrant.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dbgrant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(dbgrant.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(dbgrant.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(dbgrant.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(dbgrant.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.ExpirationCleared() {
		_spec.ClearField(dbgrant.FieldExpiration, field.TypeJSON)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(dbgrant.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.VoidedAt(); ok {
		_spec.SetField(dbgrant.FieldVoidedAt, field.TypeTime, value)
	}
	if _u.mutation.VoidedAtCleared() {
		_spec.ClearField(dbgrant.FieldVoidedAt, field.TypeTime)
	}
	if _u.mutation.RecurrencePeriodCleared() {
		_spec.ClearField(dbgrant.FieldRecurrencePeriod, field.TypeString)
	}
	if _u.mutation.RecurrenceAnchorCleared() {
		_spec.ClearField(dbgrant.FieldRecurrenceAnchor, field.TypeTime)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbgrant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// GrantUpdateOne is the builder for updating a single Grant entity.
type GrantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GrantMutation
}

// SetAnnotations sets the "annotations" field.
func (_u *GrantUpdateOne) SetAnnotations(v models.Annotations) *GrantUpdateOne {
	_u.mutation.SetAnnotations(v)
	return _u
}

// ClearAnnotations clears the value of the "annotations" field.
func (_u *GrantUpdateOne) ClearAnnotations() *GrantUpdateOne {
	_u.mutation.ClearAnnotations()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GrantUpdateOne) SetUpdatedAt(v time.Time) *GrantUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *GrantUpdateOne) SetDeletedAt(v time.Time) *GrantUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableDeletedAt(v *time.Time) *GrantUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *GrantUpdateOne) ClearDeletedAt() *GrantUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *GrantUpdateOne) SetMetadata(v map[string]string) *GrantUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *GrantUpdateOne) ClearMetadata() *GrantUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetVoidedAt sets the "voided_at" field.
func (_u *GrantUpdateOne) SetVoidedAt(v time.Time) *GrantUpdateOne {
	_u.mutation.SetVoidedAt(v)
	return _u
}

// SetNillableVoidedAt sets the "voided_at" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableVoidedAt(v *time.Time) *GrantUpdateOne {
	if v != nil {
		_u.SetVoidedAt(*v)
	}
	return _u
}

// ClearVoidedAt clears the value of the "voided_at" field.
func (_u *GrantUpdateOne) ClearVoidedAt() *GrantUpdateOne {
	_u.mutation.ClearVoidedAt()
	return _u
}

// Mutation returns the GrantMutation object of the builder.
func (_u *GrantUpdateOne) Mutation() *GrantMutation {
	return _u.mutation
}

// Where appends a list predicates to the GrantUpdate builder.
func (_u *GrantUpdateOne) Where(ps ...predicate.Grant) *GrantUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GrantUpdateOne) Select(field string, fields ...string) *GrantUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Grant entity.
func (_u *GrantUpdateOne) Save(ctx context.Context) (*Grant, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GrantUpdateOne) SaveX(ctx context.Context) *Grant {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GrantUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GrantUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GrantUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := dbgrant.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GrantUpdateOne) check() error {
	if _u.mutation.EntitlementCleared() && len(_u.mutation.EntitlementIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "Grant.entitlement"`)
	}
	return nil
}

func (_u *GrantUpdateOne) sqlSave(ctx context.Context) (_node *Grant, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dbgrant.Table, dbgrant.Columns, sqlgraph.NewFieldSpec(dbgrant.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Grant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dbgrant.FieldID)
		for _, f := range fields {
			if !dbgrant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != dbgrant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Annotations(); ok {
		_spec.SetField(dbgrant.FieldAnnotations, field.TypeJSON, value)
	}
	if _u.mutation.AnnotationsCleared() {
		_spec.ClearField(dbgrant.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dbgrant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(dbgrant.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(dbgrant.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(dbgrant.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(dbgrant.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.ExpirationCleared() {
		_spec.ClearField(dbgrant.FieldExpiration, field.TypeJSON)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(dbgrant.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.VoidedAt(); ok {
		_spec.SetField(dbgrant.FieldVoidedAt, field.TypeTime, value)
	}
	if _u.mutation.VoidedAtCleared() {
		_spec.ClearField(dbgrant.FieldVoidedAt, field.TypeTime)
	}
	if _u.mutation.RecurrencePeriodCleared() {
		_spec.ClearField(dbgrant.FieldRecurrencePeriod, field.TypeString)
	}
	if _u.mutation.RecurrenceAnchorCleared() {
		_spec.ClearField(dbgrant.FieldRecurrenceAnchor, field.TypeTime)
	}
	_node = &Grant{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbgrant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
