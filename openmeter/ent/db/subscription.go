// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/plan"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscription"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/currencyx"
	"github.com/openmeterio/openmeter/pkg/isodate"
)

// Subscription is the model entity for the Subscription schema.
type Subscription struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// ActiveFrom holds the value of the "active_from" field.
	ActiveFrom time.Time `json:"active_from,omitempty"`
	// ActiveTo holds the value of the "active_to" field.
	ActiveTo *time.Time `json:"active_to,omitempty"`
	// BillablesMustAlign holds the value of the "billables_must_align" field.
	BillablesMustAlign bool `json:"billables_must_align,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// PlanID holds the value of the "plan_id" field.
	PlanID *string `json:"plan_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID string `json:"customer_id,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency currencyx.Code `json:"currency,omitempty"`
	// BillingAnchor holds the value of the "billing_anchor" field.
	BillingAnchor time.Time `json:"billing_anchor,omitempty"`
	// The default billing cadence for subscriptions.
	BillingCadence isodate.String `json:"billing_cadence,omitempty"`
	// Default pro-rating configuration for subscriptions.
	ProRatingConfig productcatalog.ProRatingConfig `json:"pro_rating_config,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionQuery when eager-loading is set.
	Edges        SubscriptionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubscriptionEdges holds the relations/edges for other nodes in the graph.
type SubscriptionEdges struct {
	// Plan holds the value of the plan edge.
	Plan *Plan `json:"plan,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// Phases holds the value of the phases edge.
	Phases []*SubscriptionPhase `json:"phases,omitempty"`
	// BillingLines holds the value of the billing_lines edge.
	BillingLines []*BillingInvoiceLine `json:"billing_lines,omitempty"`
	// BillingSplitLineGroups holds the value of the billing_split_line_groups edge.
	BillingSplitLineGroups []*BillingInvoiceSplitLineGroup `json:"billing_split_line_groups,omitempty"`
	// Addons holds the value of the addons edge.
	Addons []*SubscriptionAddon `json:"addons,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// PlanOrErr returns the Plan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionEdges) PlanOrErr() (*Plan, error) {
	if e.Plan != nil {
		return e.Plan, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: plan.Label}
	}
	return nil, &NotLoadedError{edge: "plan"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionEdges) CustomerOrErr() (*Customer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// PhasesOrErr returns the Phases value or an error if the edge
// was not loaded in eager-loading.
func (e SubscriptionEdges) PhasesOrErr() ([]*SubscriptionPhase, error) {
	if e.loadedTypes[2] {
		return e.Phases, nil
	}
	return nil, &NotLoadedError{edge: "phases"}
}

// BillingLinesOrErr returns the BillingLines value or an error if the edge
// was not loaded in eager-loading.
func (e SubscriptionEdges) BillingLinesOrErr() ([]*BillingInvoiceLine, error) {
	if e.loadedTypes[3] {
		return e.BillingLines, nil
	}
	return nil, &NotLoadedError{edge: "billing_lines"}
}

// BillingSplitLineGroupsOrErr returns the BillingSplitLineGroups value or an error if the edge
// was not loaded in eager-loading.
func (e SubscriptionEdges) BillingSplitLineGroupsOrErr() ([]*BillingInvoiceSplitLineGroup, error) {
	if e.loadedTypes[4] {
		return e.BillingSplitLineGroups, nil
	}
	return nil, &NotLoadedError{edge: "billing_split_line_groups"}
}

// AddonsOrErr returns the Addons value or an error if the edge
// was not loaded in eager-loading.
func (e SubscriptionEdges) AddonsOrErr() ([]*SubscriptionAddon, error) {
	if e.loadedTypes[5] {
		return e.Addons, nil
	}
	return nil, &NotLoadedError{edge: "addons"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscription.FieldMetadata:
			values[i] = new([]byte)
		case subscription.FieldBillablesMustAlign:
			values[i] = new(sql.NullBool)
		case subscription.FieldID, subscription.FieldNamespace, subscription.FieldName, subscription.FieldDescription, subscription.FieldPlanID, subscription.FieldCustomerID, subscription.FieldCurrency, subscription.FieldBillingCadence:
			values[i] = new(sql.NullString)
		case subscription.FieldCreatedAt, subscription.FieldUpdatedAt, subscription.FieldDeletedAt, subscription.FieldActiveFrom, subscription.FieldActiveTo, subscription.FieldBillingAnchor:
			values[i] = new(sql.NullTime)
		case subscription.FieldProRatingConfig:
			values[i] = subscription.ValueScanner.ProRatingConfig.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subscription fields.
func (_m *Subscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscription.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case subscription.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				_m.Namespace = value.String
			}
		case subscription.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case subscription.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case subscription.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case subscription.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case subscription.FieldActiveFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field active_from", values[i])
			} else if value.Valid {
				_m.ActiveFrom = value.Time
			}
		case subscription.FieldActiveTo:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field active_to", values[i])
			} else if value.Valid {
				_m.ActiveTo = new(time.Time)
				*_m.ActiveTo = value.Time
			}
		case subscription.FieldBillablesMustAlign:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field billables_must_align", values[i])
			} else if value.Valid {
				_m.BillablesMustAlign = value.Bool
			}
		case subscription.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case subscription.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = new(string)
				*_m.Description = value.String
			}
		case subscription.FieldPlanID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plan_id", values[i])
			} else if value.Valid {
				_m.PlanID = new(string)
				*_m.PlanID = value.String
			}
		case subscription.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				_m.CustomerID = value.String
			}
		case subscription.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				_m.Currency = currencyx.Code(value.String)
			}
		case subscription.FieldBillingAnchor:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field billing_anchor", values[i])
			} else if value.Valid {
				_m.BillingAnchor = value.Time
			}
		case subscription.FieldBillingCadence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_cadence", values[i])
			} else if value.Valid {
				_m.BillingCadence = isodate.String(value.String)
			}
		case subscription.FieldProRatingConfig:
			if value, err := subscription.ValueScanner.ProRatingConfig.FromValue(values[i]); err != nil {
				return err
			} else {
				_m.ProRatingConfig = value
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Subscription.
// This includes values selected through modifiers, order, etc.
func (_m *Subscription) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPlan queries the "plan" edge of the Subscription entity.
func (_m *Subscription) QueryPlan() *PlanQuery {
	return NewSubscriptionClient(_m.config).QueryPlan(_m)
}

// QueryCustomer queries the "customer" edge of the Subscription entity.
func (_m *Subscription) QueryCustomer() *CustomerQuery {
	return NewSubscriptionClient(_m.config).QueryCustomer(_m)
}

// QueryPhases queries the "phases" edge of the Subscription entity.
func (_m *Subscription) QueryPhases() *SubscriptionPhaseQuery {
	return NewSubscriptionClient(_m.config).QueryPhases(_m)
}

// QueryBillingLines queries the "billing_lines" edge of the Subscription entity.
func (_m *Subscription) QueryBillingLines() *BillingInvoiceLineQuery {
	return NewSubscriptionClient(_m.config).QueryBillingLines(_m)
}

// QueryBillingSplitLineGroups queries the "billing_split_line_groups" edge of the Subscription entity.
func (_m *Subscription) QueryBillingSplitLineGroups() *BillingInvoiceSplitLineGroupQuery {
	return NewSubscriptionClient(_m.config).QueryBillingSplitLineGroups(_m)
}

// QueryAddons queries the "addons" edge of the Subscription entity.
func (_m *Subscription) QueryAddons() *SubscriptionAddonQuery {
	return NewSubscriptionClient(_m.config).QueryAddons(_m)
}

// Update returns a builder for updating this Subscription.
// Note that you need to call Subscription.Unwrap() before calling this method if this Subscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Subscription) Update() *SubscriptionUpdateOne {
	return NewSubscriptionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Subscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Subscription) Unwrap() *Subscription {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("db: Subscription is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Subscription) String() string {
	var builder strings.Builder
	builder.WriteString("Subscription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("namespace=")
	builder.WriteString(_m.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("active_from=")
	builder.WriteString(_m.ActiveFrom.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.ActiveTo; v != nil {
		builder.WriteString("active_to=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("billables_must_align=")
	builder.WriteString(fmt.Sprintf("%v", _m.BillablesMustAlign))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	if v := _m.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.PlanID; v != nil {
		builder.WriteString("plan_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(_m.CustomerID)
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(fmt.Sprintf("%v", _m.Currency))
	builder.WriteString(", ")
	builder.WriteString("billing_anchor=")
	builder.WriteString(_m.BillingAnchor.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("billing_cadence=")
	builder.WriteString(fmt.Sprintf("%v", _m.BillingCadence))
	builder.WriteString(", ")
	builder.WriteString("pro_rating_config=")
	builder.WriteString(fmt.Sprintf("%v", _m.ProRatingConfig))
	builder.WriteByte(')')
	return builder.String()
}

// Subscriptions is a parsable slice of Subscription.
type Subscriptions []*Subscription
