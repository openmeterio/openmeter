// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingsequencenumbers"
)

// BillingSequenceNumbersCreate is the builder for creating a BillingSequenceNumbers entity.
type BillingSequenceNumbersCreate struct {
	config
	mutation *BillingSequenceNumbersMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (bsnc *BillingSequenceNumbersCreate) SetNamespace(s string) *BillingSequenceNumbersCreate {
	bsnc.mutation.SetNamespace(s)
	return bsnc
}

// SetScope sets the "scope" field.
func (bsnc *BillingSequenceNumbersCreate) SetScope(s string) *BillingSequenceNumbersCreate {
	bsnc.mutation.SetScope(s)
	return bsnc
}

// SetLast sets the "last" field.
func (bsnc *BillingSequenceNumbersCreate) SetLast(a alpacadecimal.Decimal) *BillingSequenceNumbersCreate {
	bsnc.mutation.SetLast(a)
	return bsnc
}

// Mutation returns the BillingSequenceNumbersMutation object of the builder.
func (bsnc *BillingSequenceNumbersCreate) Mutation() *BillingSequenceNumbersMutation {
	return bsnc.mutation
}

// Save creates the BillingSequenceNumbers in the database.
func (bsnc *BillingSequenceNumbersCreate) Save(ctx context.Context) (*BillingSequenceNumbers, error) {
	return withHooks(ctx, bsnc.sqlSave, bsnc.mutation, bsnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bsnc *BillingSequenceNumbersCreate) SaveX(ctx context.Context) *BillingSequenceNumbers {
	v, err := bsnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bsnc *BillingSequenceNumbersCreate) Exec(ctx context.Context) error {
	_, err := bsnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsnc *BillingSequenceNumbersCreate) ExecX(ctx context.Context) {
	if err := bsnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsnc *BillingSequenceNumbersCreate) check() error {
	if _, ok := bsnc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingSequenceNumbers.namespace"`)}
	}
	if v, ok := bsnc.mutation.Namespace(); ok {
		if err := billingsequencenumbers.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingSequenceNumbers.namespace": %w`, err)}
		}
	}
	if _, ok := bsnc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`db: missing required field "BillingSequenceNumbers.scope"`)}
	}
	if _, ok := bsnc.mutation.Last(); !ok {
		return &ValidationError{Name: "last", err: errors.New(`db: missing required field "BillingSequenceNumbers.last"`)}
	}
	return nil
}

func (bsnc *BillingSequenceNumbersCreate) sqlSave(ctx context.Context) (*BillingSequenceNumbers, error) {
	if err := bsnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bsnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bsnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bsnc.mutation.id = &_node.ID
	bsnc.mutation.done = true
	return _node, nil
}

func (bsnc *BillingSequenceNumbersCreate) createSpec() (*BillingSequenceNumbers, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingSequenceNumbers{config: bsnc.config}
		_spec = sqlgraph.NewCreateSpec(billingsequencenumbers.Table, sqlgraph.NewFieldSpec(billingsequencenumbers.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bsnc.conflict
	if value, ok := bsnc.mutation.Namespace(); ok {
		_spec.SetField(billingsequencenumbers.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := bsnc.mutation.Scope(); ok {
		_spec.SetField(billingsequencenumbers.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	if value, ok := bsnc.mutation.Last(); ok {
		_spec.SetField(billingsequencenumbers.FieldLast, field.TypeOther, value)
		_node.Last = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingSequenceNumbers.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingSequenceNumbersUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bsnc *BillingSequenceNumbersCreate) OnConflict(opts ...sql.ConflictOption) *BillingSequenceNumbersUpsertOne {
	bsnc.conflict = opts
	return &BillingSequenceNumbersUpsertOne{
		create: bsnc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingSequenceNumbers.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bsnc *BillingSequenceNumbersCreate) OnConflictColumns(columns ...string) *BillingSequenceNumbersUpsertOne {
	bsnc.conflict = append(bsnc.conflict, sql.ConflictColumns(columns...))
	return &BillingSequenceNumbersUpsertOne{
		create: bsnc,
	}
}

type (
	// BillingSequenceNumbersUpsertOne is the builder for "upsert"-ing
	//  one BillingSequenceNumbers node.
	BillingSequenceNumbersUpsertOne struct {
		create *BillingSequenceNumbersCreate
	}

	// BillingSequenceNumbersUpsert is the "OnConflict" setter.
	BillingSequenceNumbersUpsert struct {
		*sql.UpdateSet
	}
)

// SetScope sets the "scope" field.
func (u *BillingSequenceNumbersUpsert) SetScope(v string) *BillingSequenceNumbersUpsert {
	u.Set(billingsequencenumbers.FieldScope, v)
	return u
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *BillingSequenceNumbersUpsert) UpdateScope() *BillingSequenceNumbersUpsert {
	u.SetExcluded(billingsequencenumbers.FieldScope)
	return u
}

// SetLast sets the "last" field.
func (u *BillingSequenceNumbersUpsert) SetLast(v alpacadecimal.Decimal) *BillingSequenceNumbersUpsert {
	u.Set(billingsequencenumbers.FieldLast, v)
	return u
}

// UpdateLast sets the "last" field to the value that was provided on create.
func (u *BillingSequenceNumbersUpsert) UpdateLast() *BillingSequenceNumbersUpsert {
	u.SetExcluded(billingsequencenumbers.FieldLast)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BillingSequenceNumbers.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BillingSequenceNumbersUpsertOne) UpdateNewValues() *BillingSequenceNumbersUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billingsequencenumbers.FieldNamespace)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingSequenceNumbers.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingSequenceNumbersUpsertOne) Ignore() *BillingSequenceNumbersUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingSequenceNumbersUpsertOne) DoNothing() *BillingSequenceNumbersUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingSequenceNumbersCreate.OnConflict
// documentation for more info.
func (u *BillingSequenceNumbersUpsertOne) Update(set func(*BillingSequenceNumbersUpsert)) *BillingSequenceNumbersUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingSequenceNumbersUpsert{UpdateSet: update})
	}))
	return u
}

// SetScope sets the "scope" field.
func (u *BillingSequenceNumbersUpsertOne) SetScope(v string) *BillingSequenceNumbersUpsertOne {
	return u.Update(func(s *BillingSequenceNumbersUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *BillingSequenceNumbersUpsertOne) UpdateScope() *BillingSequenceNumbersUpsertOne {
	return u.Update(func(s *BillingSequenceNumbersUpsert) {
		s.UpdateScope()
	})
}

// SetLast sets the "last" field.
func (u *BillingSequenceNumbersUpsertOne) SetLast(v alpacadecimal.Decimal) *BillingSequenceNumbersUpsertOne {
	return u.Update(func(s *BillingSequenceNumbersUpsert) {
		s.SetLast(v)
	})
}

// UpdateLast sets the "last" field to the value that was provided on create.
func (u *BillingSequenceNumbersUpsertOne) UpdateLast() *BillingSequenceNumbersUpsertOne {
	return u.Update(func(s *BillingSequenceNumbersUpsert) {
		s.UpdateLast()
	})
}

// Exec executes the query.
func (u *BillingSequenceNumbersUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingSequenceNumbersCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingSequenceNumbersUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingSequenceNumbersUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingSequenceNumbersUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingSequenceNumbersCreateBulk is the builder for creating many BillingSequenceNumbers entities in bulk.
type BillingSequenceNumbersCreateBulk struct {
	config
	err      error
	builders []*BillingSequenceNumbersCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingSequenceNumbers entities in the database.
func (bsncb *BillingSequenceNumbersCreateBulk) Save(ctx context.Context) ([]*BillingSequenceNumbers, error) {
	if bsncb.err != nil {
		return nil, bsncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bsncb.builders))
	nodes := make([]*BillingSequenceNumbers, len(bsncb.builders))
	mutators := make([]Mutator, len(bsncb.builders))
	for i := range bsncb.builders {
		func(i int, root context.Context) {
			builder := bsncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingSequenceNumbersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bsncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bsncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bsncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bsncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bsncb *BillingSequenceNumbersCreateBulk) SaveX(ctx context.Context) []*BillingSequenceNumbers {
	v, err := bsncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bsncb *BillingSequenceNumbersCreateBulk) Exec(ctx context.Context) error {
	_, err := bsncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsncb *BillingSequenceNumbersCreateBulk) ExecX(ctx context.Context) {
	if err := bsncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingSequenceNumbers.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingSequenceNumbersUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bsncb *BillingSequenceNumbersCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingSequenceNumbersUpsertBulk {
	bsncb.conflict = opts
	return &BillingSequenceNumbersUpsertBulk{
		create: bsncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingSequenceNumbers.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bsncb *BillingSequenceNumbersCreateBulk) OnConflictColumns(columns ...string) *BillingSequenceNumbersUpsertBulk {
	bsncb.conflict = append(bsncb.conflict, sql.ConflictColumns(columns...))
	return &BillingSequenceNumbersUpsertBulk{
		create: bsncb,
	}
}

// BillingSequenceNumbersUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingSequenceNumbers nodes.
type BillingSequenceNumbersUpsertBulk struct {
	create *BillingSequenceNumbersCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingSequenceNumbers.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BillingSequenceNumbersUpsertBulk) UpdateNewValues() *BillingSequenceNumbersUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billingsequencenumbers.FieldNamespace)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingSequenceNumbers.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingSequenceNumbersUpsertBulk) Ignore() *BillingSequenceNumbersUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingSequenceNumbersUpsertBulk) DoNothing() *BillingSequenceNumbersUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingSequenceNumbersCreateBulk.OnConflict
// documentation for more info.
func (u *BillingSequenceNumbersUpsertBulk) Update(set func(*BillingSequenceNumbersUpsert)) *BillingSequenceNumbersUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingSequenceNumbersUpsert{UpdateSet: update})
	}))
	return u
}

// SetScope sets the "scope" field.
func (u *BillingSequenceNumbersUpsertBulk) SetScope(v string) *BillingSequenceNumbersUpsertBulk {
	return u.Update(func(s *BillingSequenceNumbersUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *BillingSequenceNumbersUpsertBulk) UpdateScope() *BillingSequenceNumbersUpsertBulk {
	return u.Update(func(s *BillingSequenceNumbersUpsert) {
		s.UpdateScope()
	})
}

// SetLast sets the "last" field.
func (u *BillingSequenceNumbersUpsertBulk) SetLast(v alpacadecimal.Decimal) *BillingSequenceNumbersUpsertBulk {
	return u.Update(func(s *BillingSequenceNumbersUpsert) {
		s.SetLast(v)
	})
}

// UpdateLast sets the "last" field to the value that was provided on create.
func (u *BillingSequenceNumbersUpsertBulk) UpdateLast() *BillingSequenceNumbersUpsertBulk {
	return u.Update(func(s *BillingSequenceNumbersUpsert) {
		s.UpdateLast()
	})
}

// Exec executes the query.
func (u *BillingSequenceNumbersUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingSequenceNumbersCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingSequenceNumbersCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingSequenceNumbersUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
