// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicediscount"
)

// BillingInvoiceDiscount is the model entity for the BillingInvoiceDiscount schema.
type BillingInvoiceDiscount struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// InvoiceID holds the value of the "invoice_id" field.
	InvoiceID string `json:"invoice_id,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Type holds the value of the "type" field.
	Type billing.DiscountType `json:"type,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount alpacadecimal.Decimal `json:"amount,omitempty"`
	// LineIds holds the value of the "line_ids" field.
	LineIds []string `json:"line_ids,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingInvoiceDiscountQuery when eager-loading is set.
	Edges        BillingInvoiceDiscountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillingInvoiceDiscountEdges holds the relations/edges for other nodes in the graph.
type BillingInvoiceDiscountEdges struct {
	// Invoice holds the value of the invoice edge.
	Invoice *BillingInvoice `json:"invoice,omitempty"`
	// Lines holds the value of the lines edge.
	Lines []*BillingInvoiceLine `json:"lines,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// InvoiceOrErr returns the Invoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceDiscountEdges) InvoiceOrErr() (*BillingInvoice, error) {
	if e.Invoice != nil {
		return e.Invoice, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: billinginvoice.Label}
	}
	return nil, &NotLoadedError{edge: "invoice"}
}

// LinesOrErr returns the Lines value or an error if the edge
// was not loaded in eager-loading.
func (e BillingInvoiceDiscountEdges) LinesOrErr() ([]*BillingInvoiceLine, error) {
	if e.loadedTypes[1] {
		return e.Lines, nil
	}
	return nil, &NotLoadedError{edge: "lines"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingInvoiceDiscount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billinginvoicediscount.FieldLineIds:
			values[i] = new([]byte)
		case billinginvoicediscount.FieldAmount:
			values[i] = new(alpacadecimal.Decimal)
		case billinginvoicediscount.FieldID, billinginvoicediscount.FieldNamespace, billinginvoicediscount.FieldInvoiceID, billinginvoicediscount.FieldDescription, billinginvoicediscount.FieldType:
			values[i] = new(sql.NullString)
		case billinginvoicediscount.FieldCreatedAt, billinginvoicediscount.FieldUpdatedAt, billinginvoicediscount.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingInvoiceDiscount fields.
func (bid *BillingInvoiceDiscount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billinginvoicediscount.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bid.ID = value.String
			}
		case billinginvoicediscount.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				bid.Namespace = value.String
			}
		case billinginvoicediscount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bid.CreatedAt = value.Time
			}
		case billinginvoicediscount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bid.UpdatedAt = value.Time
			}
		case billinginvoicediscount.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bid.DeletedAt = new(time.Time)
				*bid.DeletedAt = value.Time
			}
		case billinginvoicediscount.FieldInvoiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_id", values[i])
			} else if value.Valid {
				bid.InvoiceID = value.String
			}
		case billinginvoicediscount.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				bid.Description = new(string)
				*bid.Description = value.String
			}
		case billinginvoicediscount.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				bid.Type = billing.DiscountType(value.String)
			}
		case billinginvoicediscount.FieldAmount:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				bid.Amount = *value
			}
		case billinginvoicediscount.FieldLineIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field line_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bid.LineIds); err != nil {
					return fmt.Errorf("unmarshal field line_ids: %w", err)
				}
			}
		default:
			bid.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingInvoiceDiscount.
// This includes values selected through modifiers, order, etc.
func (bid *BillingInvoiceDiscount) Value(name string) (ent.Value, error) {
	return bid.selectValues.Get(name)
}

// QueryInvoice queries the "invoice" edge of the BillingInvoiceDiscount entity.
func (bid *BillingInvoiceDiscount) QueryInvoice() *BillingInvoiceQuery {
	return NewBillingInvoiceDiscountClient(bid.config).QueryInvoice(bid)
}

// QueryLines queries the "lines" edge of the BillingInvoiceDiscount entity.
func (bid *BillingInvoiceDiscount) QueryLines() *BillingInvoiceLineQuery {
	return NewBillingInvoiceDiscountClient(bid.config).QueryLines(bid)
}

// Update returns a builder for updating this BillingInvoiceDiscount.
// Note that you need to call BillingInvoiceDiscount.Unwrap() before calling this method if this BillingInvoiceDiscount
// was returned from a transaction, and the transaction was committed or rolled back.
func (bid *BillingInvoiceDiscount) Update() *BillingInvoiceDiscountUpdateOne {
	return NewBillingInvoiceDiscountClient(bid.config).UpdateOne(bid)
}

// Unwrap unwraps the BillingInvoiceDiscount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bid *BillingInvoiceDiscount) Unwrap() *BillingInvoiceDiscount {
	_tx, ok := bid.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingInvoiceDiscount is not a transactional entity")
	}
	bid.config.driver = _tx.drv
	return bid
}

// String implements the fmt.Stringer.
func (bid *BillingInvoiceDiscount) String() string {
	var builder strings.Builder
	builder.WriteString("BillingInvoiceDiscount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bid.ID))
	builder.WriteString("namespace=")
	builder.WriteString(bid.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bid.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bid.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bid.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("invoice_id=")
	builder.WriteString(bid.InvoiceID)
	builder.WriteString(", ")
	if v := bid.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", bid.Type))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", bid.Amount))
	builder.WriteString(", ")
	builder.WriteString("line_ids=")
	builder.WriteString(fmt.Sprintf("%v", bid.LineIds))
	builder.WriteByte(')')
	return builder.String()
}

// BillingInvoiceDiscounts is a parsable slice of BillingInvoiceDiscount.
type BillingInvoiceDiscounts []*BillingInvoiceDiscount
