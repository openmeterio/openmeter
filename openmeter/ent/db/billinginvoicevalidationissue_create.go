// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicevalidationissue"
)

// BillingInvoiceValidationIssueCreate is the builder for creating a BillingInvoiceValidationIssue entity.
type BillingInvoiceValidationIssueCreate struct {
	config
	mutation *BillingInvoiceValidationIssueMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (bivic *BillingInvoiceValidationIssueCreate) SetNamespace(s string) *BillingInvoiceValidationIssueCreate {
	bivic.mutation.SetNamespace(s)
	return bivic
}

// SetCreatedAt sets the "created_at" field.
func (bivic *BillingInvoiceValidationIssueCreate) SetCreatedAt(t time.Time) *BillingInvoiceValidationIssueCreate {
	bivic.mutation.SetCreatedAt(t)
	return bivic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bivic *BillingInvoiceValidationIssueCreate) SetNillableCreatedAt(t *time.Time) *BillingInvoiceValidationIssueCreate {
	if t != nil {
		bivic.SetCreatedAt(*t)
	}
	return bivic
}

// SetUpdatedAt sets the "updated_at" field.
func (bivic *BillingInvoiceValidationIssueCreate) SetUpdatedAt(t time.Time) *BillingInvoiceValidationIssueCreate {
	bivic.mutation.SetUpdatedAt(t)
	return bivic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bivic *BillingInvoiceValidationIssueCreate) SetNillableUpdatedAt(t *time.Time) *BillingInvoiceValidationIssueCreate {
	if t != nil {
		bivic.SetUpdatedAt(*t)
	}
	return bivic
}

// SetDeletedAt sets the "deleted_at" field.
func (bivic *BillingInvoiceValidationIssueCreate) SetDeletedAt(t time.Time) *BillingInvoiceValidationIssueCreate {
	bivic.mutation.SetDeletedAt(t)
	return bivic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bivic *BillingInvoiceValidationIssueCreate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceValidationIssueCreate {
	if t != nil {
		bivic.SetDeletedAt(*t)
	}
	return bivic
}

// SetInvoiceID sets the "invoice_id" field.
func (bivic *BillingInvoiceValidationIssueCreate) SetInvoiceID(s string) *BillingInvoiceValidationIssueCreate {
	bivic.mutation.SetInvoiceID(s)
	return bivic
}

// SetSeverity sets the "severity" field.
func (bivic *BillingInvoiceValidationIssueCreate) SetSeverity(bis billing.ValidationIssueSeverity) *BillingInvoiceValidationIssueCreate {
	bivic.mutation.SetSeverity(bis)
	return bivic
}

// SetCode sets the "code" field.
func (bivic *BillingInvoiceValidationIssueCreate) SetCode(s string) *BillingInvoiceValidationIssueCreate {
	bivic.mutation.SetCode(s)
	return bivic
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (bivic *BillingInvoiceValidationIssueCreate) SetNillableCode(s *string) *BillingInvoiceValidationIssueCreate {
	if s != nil {
		bivic.SetCode(*s)
	}
	return bivic
}

// SetMessage sets the "message" field.
func (bivic *BillingInvoiceValidationIssueCreate) SetMessage(s string) *BillingInvoiceValidationIssueCreate {
	bivic.mutation.SetMessage(s)
	return bivic
}

// SetPath sets the "path" field.
func (bivic *BillingInvoiceValidationIssueCreate) SetPath(s string) *BillingInvoiceValidationIssueCreate {
	bivic.mutation.SetPath(s)
	return bivic
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (bivic *BillingInvoiceValidationIssueCreate) SetNillablePath(s *string) *BillingInvoiceValidationIssueCreate {
	if s != nil {
		bivic.SetPath(*s)
	}
	return bivic
}

// SetComponent sets the "component" field.
func (bivic *BillingInvoiceValidationIssueCreate) SetComponent(s string) *BillingInvoiceValidationIssueCreate {
	bivic.mutation.SetComponent(s)
	return bivic
}

// SetDedupeHash sets the "dedupe_hash" field.
func (bivic *BillingInvoiceValidationIssueCreate) SetDedupeHash(b []byte) *BillingInvoiceValidationIssueCreate {
	bivic.mutation.SetDedupeHash(b)
	return bivic
}

// SetID sets the "id" field.
func (bivic *BillingInvoiceValidationIssueCreate) SetID(s string) *BillingInvoiceValidationIssueCreate {
	bivic.mutation.SetID(s)
	return bivic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bivic *BillingInvoiceValidationIssueCreate) SetNillableID(s *string) *BillingInvoiceValidationIssueCreate {
	if s != nil {
		bivic.SetID(*s)
	}
	return bivic
}

// SetBillingInvoiceID sets the "billing_invoice" edge to the BillingInvoice entity by ID.
func (bivic *BillingInvoiceValidationIssueCreate) SetBillingInvoiceID(id string) *BillingInvoiceValidationIssueCreate {
	bivic.mutation.SetBillingInvoiceID(id)
	return bivic
}

// SetBillingInvoice sets the "billing_invoice" edge to the BillingInvoice entity.
func (bivic *BillingInvoiceValidationIssueCreate) SetBillingInvoice(b *BillingInvoice) *BillingInvoiceValidationIssueCreate {
	return bivic.SetBillingInvoiceID(b.ID)
}

// Mutation returns the BillingInvoiceValidationIssueMutation object of the builder.
func (bivic *BillingInvoiceValidationIssueCreate) Mutation() *BillingInvoiceValidationIssueMutation {
	return bivic.mutation
}

// Save creates the BillingInvoiceValidationIssue in the database.
func (bivic *BillingInvoiceValidationIssueCreate) Save(ctx context.Context) (*BillingInvoiceValidationIssue, error) {
	bivic.defaults()
	return withHooks(ctx, bivic.sqlSave, bivic.mutation, bivic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bivic *BillingInvoiceValidationIssueCreate) SaveX(ctx context.Context) *BillingInvoiceValidationIssue {
	v, err := bivic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bivic *BillingInvoiceValidationIssueCreate) Exec(ctx context.Context) error {
	_, err := bivic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bivic *BillingInvoiceValidationIssueCreate) ExecX(ctx context.Context) {
	if err := bivic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bivic *BillingInvoiceValidationIssueCreate) defaults() {
	if _, ok := bivic.mutation.CreatedAt(); !ok {
		v := billinginvoicevalidationissue.DefaultCreatedAt()
		bivic.mutation.SetCreatedAt(v)
	}
	if _, ok := bivic.mutation.UpdatedAt(); !ok {
		v := billinginvoicevalidationissue.DefaultUpdatedAt()
		bivic.mutation.SetUpdatedAt(v)
	}
	if _, ok := bivic.mutation.ID(); !ok {
		v := billinginvoicevalidationissue.DefaultID()
		bivic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bivic *BillingInvoiceValidationIssueCreate) check() error {
	if _, ok := bivic.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingInvoiceValidationIssue.namespace"`)}
	}
	if v, ok := bivic.mutation.Namespace(); ok {
		if err := billinginvoicevalidationissue.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.namespace": %w`, err)}
		}
	}
	if _, ok := bivic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingInvoiceValidationIssue.created_at"`)}
	}
	if _, ok := bivic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingInvoiceValidationIssue.updated_at"`)}
	}
	if _, ok := bivic.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice_id", err: errors.New(`db: missing required field "BillingInvoiceValidationIssue.invoice_id"`)}
	}
	if v, ok := bivic.mutation.InvoiceID(); ok {
		if err := billinginvoicevalidationissue.InvoiceIDValidator(v); err != nil {
			return &ValidationError{Name: "invoice_id", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.invoice_id": %w`, err)}
		}
	}
	if _, ok := bivic.mutation.Severity(); !ok {
		return &ValidationError{Name: "severity", err: errors.New(`db: missing required field "BillingInvoiceValidationIssue.severity"`)}
	}
	if v, ok := bivic.mutation.Severity(); ok {
		if err := billinginvoicevalidationissue.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.severity": %w`, err)}
		}
	}
	if _, ok := bivic.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`db: missing required field "BillingInvoiceValidationIssue.message"`)}
	}
	if v, ok := bivic.mutation.Message(); ok {
		if err := billinginvoicevalidationissue.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.message": %w`, err)}
		}
	}
	if _, ok := bivic.mutation.Component(); !ok {
		return &ValidationError{Name: "component", err: errors.New(`db: missing required field "BillingInvoiceValidationIssue.component"`)}
	}
	if _, ok := bivic.mutation.DedupeHash(); !ok {
		return &ValidationError{Name: "dedupe_hash", err: errors.New(`db: missing required field "BillingInvoiceValidationIssue.dedupe_hash"`)}
	}
	if v, ok := bivic.mutation.DedupeHash(); ok {
		if err := billinginvoicevalidationissue.DedupeHashValidator(v); err != nil {
			return &ValidationError{Name: "dedupe_hash", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceValidationIssue.dedupe_hash": %w`, err)}
		}
	}
	if len(bivic.mutation.BillingInvoiceIDs()) == 0 {
		return &ValidationError{Name: "billing_invoice", err: errors.New(`db: missing required edge "BillingInvoiceValidationIssue.billing_invoice"`)}
	}
	return nil
}

func (bivic *BillingInvoiceValidationIssueCreate) sqlSave(ctx context.Context) (*BillingInvoiceValidationIssue, error) {
	if err := bivic.check(); err != nil {
		return nil, err
	}
	_node, _spec := bivic.createSpec()
	if err := sqlgraph.CreateNode(ctx, bivic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingInvoiceValidationIssue.ID type: %T", _spec.ID.Value)
		}
	}
	bivic.mutation.id = &_node.ID
	bivic.mutation.done = true
	return _node, nil
}

func (bivic *BillingInvoiceValidationIssueCreate) createSpec() (*BillingInvoiceValidationIssue, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingInvoiceValidationIssue{config: bivic.config}
		_spec = sqlgraph.NewCreateSpec(billinginvoicevalidationissue.Table, sqlgraph.NewFieldSpec(billinginvoicevalidationissue.FieldID, field.TypeString))
	)
	_spec.OnConflict = bivic.conflict
	if id, ok := bivic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bivic.mutation.Namespace(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := bivic.mutation.CreatedAt(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bivic.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bivic.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bivic.mutation.Severity(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldSeverity, field.TypeEnum, value)
		_node.Severity = value
	}
	if value, ok := bivic.mutation.Code(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldCode, field.TypeString, value)
		_node.Code = &value
	}
	if value, ok := bivic.mutation.Message(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := bivic.mutation.Path(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldPath, field.TypeString, value)
		_node.Path = &value
	}
	if value, ok := bivic.mutation.Component(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldComponent, field.TypeString, value)
		_node.Component = value
	}
	if value, ok := bivic.mutation.DedupeHash(); ok {
		_spec.SetField(billinginvoicevalidationissue.FieldDedupeHash, field.TypeBytes, value)
		_node.DedupeHash = value
	}
	if nodes := bivic.mutation.BillingInvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicevalidationissue.BillingInvoiceTable,
			Columns: []string{billinginvoicevalidationissue.BillingInvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InvoiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceValidationIssue.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceValidationIssueUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bivic *BillingInvoiceValidationIssueCreate) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceValidationIssueUpsertOne {
	bivic.conflict = opts
	return &BillingInvoiceValidationIssueUpsertOne{
		create: bivic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceValidationIssue.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bivic *BillingInvoiceValidationIssueCreate) OnConflictColumns(columns ...string) *BillingInvoiceValidationIssueUpsertOne {
	bivic.conflict = append(bivic.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceValidationIssueUpsertOne{
		create: bivic,
	}
}

type (
	// BillingInvoiceValidationIssueUpsertOne is the builder for "upsert"-ing
	//  one BillingInvoiceValidationIssue node.
	BillingInvoiceValidationIssueUpsertOne struct {
		create *BillingInvoiceValidationIssueCreate
	}

	// BillingInvoiceValidationIssueUpsert is the "OnConflict" setter.
	BillingInvoiceValidationIssueUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceValidationIssueUpsert) SetUpdatedAt(v time.Time) *BillingInvoiceValidationIssueUpsert {
	u.Set(billinginvoicevalidationissue.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsert) UpdateUpdatedAt() *BillingInvoiceValidationIssueUpsert {
	u.SetExcluded(billinginvoicevalidationissue.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceValidationIssueUpsert) SetDeletedAt(v time.Time) *BillingInvoiceValidationIssueUpsert {
	u.Set(billinginvoicevalidationissue.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsert) UpdateDeletedAt() *BillingInvoiceValidationIssueUpsert {
	u.SetExcluded(billinginvoicevalidationissue.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceValidationIssueUpsert) ClearDeletedAt() *BillingInvoiceValidationIssueUpsert {
	u.SetNull(billinginvoicevalidationissue.FieldDeletedAt)
	return u
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceValidationIssueUpsert) SetInvoiceID(v string) *BillingInvoiceValidationIssueUpsert {
	u.Set(billinginvoicevalidationissue.FieldInvoiceID, v)
	return u
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsert) UpdateInvoiceID() *BillingInvoiceValidationIssueUpsert {
	u.SetExcluded(billinginvoicevalidationissue.FieldInvoiceID)
	return u
}

// SetSeverity sets the "severity" field.
func (u *BillingInvoiceValidationIssueUpsert) SetSeverity(v billing.ValidationIssueSeverity) *BillingInvoiceValidationIssueUpsert {
	u.Set(billinginvoicevalidationissue.FieldSeverity, v)
	return u
}

// UpdateSeverity sets the "severity" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsert) UpdateSeverity() *BillingInvoiceValidationIssueUpsert {
	u.SetExcluded(billinginvoicevalidationissue.FieldSeverity)
	return u
}

// SetCode sets the "code" field.
func (u *BillingInvoiceValidationIssueUpsert) SetCode(v string) *BillingInvoiceValidationIssueUpsert {
	u.Set(billinginvoicevalidationissue.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsert) UpdateCode() *BillingInvoiceValidationIssueUpsert {
	u.SetExcluded(billinginvoicevalidationissue.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *BillingInvoiceValidationIssueUpsert) ClearCode() *BillingInvoiceValidationIssueUpsert {
	u.SetNull(billinginvoicevalidationissue.FieldCode)
	return u
}

// SetMessage sets the "message" field.
func (u *BillingInvoiceValidationIssueUpsert) SetMessage(v string) *BillingInvoiceValidationIssueUpsert {
	u.Set(billinginvoicevalidationissue.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsert) UpdateMessage() *BillingInvoiceValidationIssueUpsert {
	u.SetExcluded(billinginvoicevalidationissue.FieldMessage)
	return u
}

// SetPath sets the "path" field.
func (u *BillingInvoiceValidationIssueUpsert) SetPath(v string) *BillingInvoiceValidationIssueUpsert {
	u.Set(billinginvoicevalidationissue.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsert) UpdatePath() *BillingInvoiceValidationIssueUpsert {
	u.SetExcluded(billinginvoicevalidationissue.FieldPath)
	return u
}

// ClearPath clears the value of the "path" field.
func (u *BillingInvoiceValidationIssueUpsert) ClearPath() *BillingInvoiceValidationIssueUpsert {
	u.SetNull(billinginvoicevalidationissue.FieldPath)
	return u
}

// SetComponent sets the "component" field.
func (u *BillingInvoiceValidationIssueUpsert) SetComponent(v string) *BillingInvoiceValidationIssueUpsert {
	u.Set(billinginvoicevalidationissue.FieldComponent, v)
	return u
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsert) UpdateComponent() *BillingInvoiceValidationIssueUpsert {
	u.SetExcluded(billinginvoicevalidationissue.FieldComponent)
	return u
}

// SetDedupeHash sets the "dedupe_hash" field.
func (u *BillingInvoiceValidationIssueUpsert) SetDedupeHash(v []byte) *BillingInvoiceValidationIssueUpsert {
	u.Set(billinginvoicevalidationissue.FieldDedupeHash, v)
	return u
}

// UpdateDedupeHash sets the "dedupe_hash" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsert) UpdateDedupeHash() *BillingInvoiceValidationIssueUpsert {
	u.SetExcluded(billinginvoicevalidationissue.FieldDedupeHash)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceValidationIssue.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoicevalidationissue.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceValidationIssueUpsertOne) UpdateNewValues() *BillingInvoiceValidationIssueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billinginvoicevalidationissue.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billinginvoicevalidationissue.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billinginvoicevalidationissue.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceValidationIssue.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingInvoiceValidationIssueUpsertOne) Ignore() *BillingInvoiceValidationIssueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceValidationIssueUpsertOne) DoNothing() *BillingInvoiceValidationIssueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceValidationIssueCreate.OnConflict
// documentation for more info.
func (u *BillingInvoiceValidationIssueUpsertOne) Update(set func(*BillingInvoiceValidationIssueUpsert)) *BillingInvoiceValidationIssueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceValidationIssueUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceValidationIssueUpsertOne) SetUpdatedAt(v time.Time) *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertOne) UpdateUpdatedAt() *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceValidationIssueUpsertOne) SetDeletedAt(v time.Time) *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertOne) UpdateDeletedAt() *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceValidationIssueUpsertOne) ClearDeletedAt() *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.ClearDeletedAt()
	})
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceValidationIssueUpsertOne) SetInvoiceID(v string) *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetInvoiceID(v)
	})
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertOne) UpdateInvoiceID() *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdateInvoiceID()
	})
}

// SetSeverity sets the "severity" field.
func (u *BillingInvoiceValidationIssueUpsertOne) SetSeverity(v billing.ValidationIssueSeverity) *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetSeverity(v)
	})
}

// UpdateSeverity sets the "severity" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertOne) UpdateSeverity() *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdateSeverity()
	})
}

// SetCode sets the "code" field.
func (u *BillingInvoiceValidationIssueUpsertOne) SetCode(v string) *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertOne) UpdateCode() *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *BillingInvoiceValidationIssueUpsertOne) ClearCode() *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.ClearCode()
	})
}

// SetMessage sets the "message" field.
func (u *BillingInvoiceValidationIssueUpsertOne) SetMessage(v string) *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertOne) UpdateMessage() *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdateMessage()
	})
}

// SetPath sets the "path" field.
func (u *BillingInvoiceValidationIssueUpsertOne) SetPath(v string) *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertOne) UpdatePath() *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *BillingInvoiceValidationIssueUpsertOne) ClearPath() *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.ClearPath()
	})
}

// SetComponent sets the "component" field.
func (u *BillingInvoiceValidationIssueUpsertOne) SetComponent(v string) *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetComponent(v)
	})
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertOne) UpdateComponent() *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdateComponent()
	})
}

// SetDedupeHash sets the "dedupe_hash" field.
func (u *BillingInvoiceValidationIssueUpsertOne) SetDedupeHash(v []byte) *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetDedupeHash(v)
	})
}

// UpdateDedupeHash sets the "dedupe_hash" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertOne) UpdateDedupeHash() *BillingInvoiceValidationIssueUpsertOne {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdateDedupeHash()
	})
}

// Exec executes the query.
func (u *BillingInvoiceValidationIssueUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceValidationIssueCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceValidationIssueUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingInvoiceValidationIssueUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingInvoiceValidationIssueUpsertOne.ID is not supported by MySQL driver. Use BillingInvoiceValidationIssueUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingInvoiceValidationIssueUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingInvoiceValidationIssueCreateBulk is the builder for creating many BillingInvoiceValidationIssue entities in bulk.
type BillingInvoiceValidationIssueCreateBulk struct {
	config
	err      error
	builders []*BillingInvoiceValidationIssueCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingInvoiceValidationIssue entities in the database.
func (bivicb *BillingInvoiceValidationIssueCreateBulk) Save(ctx context.Context) ([]*BillingInvoiceValidationIssue, error) {
	if bivicb.err != nil {
		return nil, bivicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bivicb.builders))
	nodes := make([]*BillingInvoiceValidationIssue, len(bivicb.builders))
	mutators := make([]Mutator, len(bivicb.builders))
	for i := range bivicb.builders {
		func(i int, root context.Context) {
			builder := bivicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingInvoiceValidationIssueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bivicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bivicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bivicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bivicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bivicb *BillingInvoiceValidationIssueCreateBulk) SaveX(ctx context.Context) []*BillingInvoiceValidationIssue {
	v, err := bivicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bivicb *BillingInvoiceValidationIssueCreateBulk) Exec(ctx context.Context) error {
	_, err := bivicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bivicb *BillingInvoiceValidationIssueCreateBulk) ExecX(ctx context.Context) {
	if err := bivicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceValidationIssue.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceValidationIssueUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bivicb *BillingInvoiceValidationIssueCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceValidationIssueUpsertBulk {
	bivicb.conflict = opts
	return &BillingInvoiceValidationIssueUpsertBulk{
		create: bivicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceValidationIssue.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bivicb *BillingInvoiceValidationIssueCreateBulk) OnConflictColumns(columns ...string) *BillingInvoiceValidationIssueUpsertBulk {
	bivicb.conflict = append(bivicb.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceValidationIssueUpsertBulk{
		create: bivicb,
	}
}

// BillingInvoiceValidationIssueUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingInvoiceValidationIssue nodes.
type BillingInvoiceValidationIssueUpsertBulk struct {
	create *BillingInvoiceValidationIssueCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingInvoiceValidationIssue.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoicevalidationissue.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceValidationIssueUpsertBulk) UpdateNewValues() *BillingInvoiceValidationIssueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billinginvoicevalidationissue.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billinginvoicevalidationissue.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billinginvoicevalidationissue.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceValidationIssue.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingInvoiceValidationIssueUpsertBulk) Ignore() *BillingInvoiceValidationIssueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceValidationIssueUpsertBulk) DoNothing() *BillingInvoiceValidationIssueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceValidationIssueCreateBulk.OnConflict
// documentation for more info.
func (u *BillingInvoiceValidationIssueUpsertBulk) Update(set func(*BillingInvoiceValidationIssueUpsert)) *BillingInvoiceValidationIssueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceValidationIssueUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceValidationIssueUpsertBulk) SetUpdatedAt(v time.Time) *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertBulk) UpdateUpdatedAt() *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceValidationIssueUpsertBulk) SetDeletedAt(v time.Time) *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertBulk) UpdateDeletedAt() *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceValidationIssueUpsertBulk) ClearDeletedAt() *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.ClearDeletedAt()
	})
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceValidationIssueUpsertBulk) SetInvoiceID(v string) *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetInvoiceID(v)
	})
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertBulk) UpdateInvoiceID() *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdateInvoiceID()
	})
}

// SetSeverity sets the "severity" field.
func (u *BillingInvoiceValidationIssueUpsertBulk) SetSeverity(v billing.ValidationIssueSeverity) *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetSeverity(v)
	})
}

// UpdateSeverity sets the "severity" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertBulk) UpdateSeverity() *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdateSeverity()
	})
}

// SetCode sets the "code" field.
func (u *BillingInvoiceValidationIssueUpsertBulk) SetCode(v string) *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertBulk) UpdateCode() *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *BillingInvoiceValidationIssueUpsertBulk) ClearCode() *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.ClearCode()
	})
}

// SetMessage sets the "message" field.
func (u *BillingInvoiceValidationIssueUpsertBulk) SetMessage(v string) *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertBulk) UpdateMessage() *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdateMessage()
	})
}

// SetPath sets the "path" field.
func (u *BillingInvoiceValidationIssueUpsertBulk) SetPath(v string) *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertBulk) UpdatePath() *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *BillingInvoiceValidationIssueUpsertBulk) ClearPath() *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.ClearPath()
	})
}

// SetComponent sets the "component" field.
func (u *BillingInvoiceValidationIssueUpsertBulk) SetComponent(v string) *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetComponent(v)
	})
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertBulk) UpdateComponent() *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdateComponent()
	})
}

// SetDedupeHash sets the "dedupe_hash" field.
func (u *BillingInvoiceValidationIssueUpsertBulk) SetDedupeHash(v []byte) *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.SetDedupeHash(v)
	})
}

// UpdateDedupeHash sets the "dedupe_hash" field to the value that was provided on create.
func (u *BillingInvoiceValidationIssueUpsertBulk) UpdateDedupeHash() *BillingInvoiceValidationIssueUpsertBulk {
	return u.Update(func(s *BillingInvoiceValidationIssueUpsert) {
		s.UpdateDedupeHash()
	})
}

// Exec executes the query.
func (u *BillingInvoiceValidationIssueUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingInvoiceValidationIssueCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceValidationIssueCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceValidationIssueUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
