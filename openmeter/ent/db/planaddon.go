// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/plan"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planaddon"
)

// PlanAddon is the model entity for the PlanAddon schema.
type PlanAddon struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Annotations holds the value of the "annotations" field.
	Annotations map[string]interface{} `json:"annotations,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// The plan identifier the add-on is assigned to.
	PlanID string `json:"plan_id,omitempty"`
	// The add-on identifier the plan is assigned to.
	AddonID string `json:"addon_id,omitempty"`
	// The key identifier of the plan phase from the add-on is available fro purchase.
	FromPlanPhase string `json:"from_plan_phase,omitempty"`
	// The maximum quantity of the add-on that can be purchased.
	MaxQuantity *int `json:"max_quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlanAddonQuery when eager-loading is set.
	Edges        PlanAddonEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PlanAddonEdges holds the relations/edges for other nodes in the graph.
type PlanAddonEdges struct {
	// Plan holds the value of the plan edge.
	Plan *Plan `json:"plan,omitempty"`
	// Addon holds the value of the addon edge.
	Addon *Addon `json:"addon,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PlanOrErr returns the Plan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanAddonEdges) PlanOrErr() (*Plan, error) {
	if e.Plan != nil {
		return e.Plan, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: plan.Label}
	}
	return nil, &NotLoadedError{edge: "plan"}
}

// AddonOrErr returns the Addon value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanAddonEdges) AddonOrErr() (*Addon, error) {
	if e.Addon != nil {
		return e.Addon, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: addon.Label}
	}
	return nil, &NotLoadedError{edge: "addon"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlanAddon) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case planaddon.FieldMetadata, planaddon.FieldAnnotations:
			values[i] = new([]byte)
		case planaddon.FieldMaxQuantity:
			values[i] = new(sql.NullInt64)
		case planaddon.FieldID, planaddon.FieldNamespace, planaddon.FieldPlanID, planaddon.FieldAddonID, planaddon.FieldFromPlanPhase:
			values[i] = new(sql.NullString)
		case planaddon.FieldCreatedAt, planaddon.FieldUpdatedAt, planaddon.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlanAddon fields.
func (_m *PlanAddon) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case planaddon.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case planaddon.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				_m.Namespace = value.String
			}
		case planaddon.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case planaddon.FieldAnnotations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field annotations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Annotations); err != nil {
					return fmt.Errorf("unmarshal field annotations: %w", err)
				}
			}
		case planaddon.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case planaddon.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case planaddon.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case planaddon.FieldPlanID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plan_id", values[i])
			} else if value.Valid {
				_m.PlanID = value.String
			}
		case planaddon.FieldAddonID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field addon_id", values[i])
			} else if value.Valid {
				_m.AddonID = value.String
			}
		case planaddon.FieldFromPlanPhase:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_plan_phase", values[i])
			} else if value.Valid {
				_m.FromPlanPhase = value.String
			}
		case planaddon.FieldMaxQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_quantity", values[i])
			} else if value.Valid {
				_m.MaxQuantity = new(int)
				*_m.MaxQuantity = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlanAddon.
// This includes values selected through modifiers, order, etc.
func (_m *PlanAddon) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPlan queries the "plan" edge of the PlanAddon entity.
func (_m *PlanAddon) QueryPlan() *PlanQuery {
	return NewPlanAddonClient(_m.config).QueryPlan(_m)
}

// QueryAddon queries the "addon" edge of the PlanAddon entity.
func (_m *PlanAddon) QueryAddon() *AddonQuery {
	return NewPlanAddonClient(_m.config).QueryAddon(_m)
}

// Update returns a builder for updating this PlanAddon.
// Note that you need to call PlanAddon.Unwrap() before calling this method if this PlanAddon
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *PlanAddon) Update() *PlanAddonUpdateOne {
	return NewPlanAddonClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the PlanAddon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *PlanAddon) Unwrap() *PlanAddon {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("db: PlanAddon is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *PlanAddon) String() string {
	var builder strings.Builder
	builder.WriteString("PlanAddon(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("namespace=")
	builder.WriteString(_m.Namespace)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("annotations=")
	builder.WriteString(fmt.Sprintf("%v", _m.Annotations))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("plan_id=")
	builder.WriteString(_m.PlanID)
	builder.WriteString(", ")
	builder.WriteString("addon_id=")
	builder.WriteString(_m.AddonID)
	builder.WriteString(", ")
	builder.WriteString("from_plan_phase=")
	builder.WriteString(_m.FromPlanPhase)
	builder.WriteString(", ")
	if v := _m.MaxQuantity; v != nil {
		builder.WriteString("max_quantity=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// PlanAddons is a parsable slice of PlanAddon.
type PlanAddons []*PlanAddon
