// Code generated by ent, DO NOT EDIT.

package subscriptionitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/pkg/isodate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldContainsFold(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldNamespace, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldDeletedAt, v))
}

// ActiveFrom applies equality check predicate on the "active_from" field. It's identical to ActiveFromEQ.
func ActiveFrom(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldActiveFrom, v))
}

// ActiveTo applies equality check predicate on the "active_to" field. It's identical to ActiveToEQ.
func ActiveTo(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldActiveTo, v))
}

// PhaseID applies equality check predicate on the "phase_id" field. It's identical to PhaseIDEQ.
func PhaseID(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldPhaseID, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldKey, v))
}

// EntitlementID applies equality check predicate on the "entitlement_id" field. It's identical to EntitlementIDEQ.
func EntitlementID(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldEntitlementID, v))
}

// RestartsBillingPeriod applies equality check predicate on the "restarts_billing_period" field. It's identical to RestartsBillingPeriodEQ.
func RestartsBillingPeriod(v bool) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldRestartsBillingPeriod, v))
}

// ActiveFromOverrideRelativeToPhaseStart applies equality check predicate on the "active_from_override_relative_to_phase_start" field. It's identical to ActiveFromOverrideRelativeToPhaseStartEQ.
func ActiveFromOverrideRelativeToPhaseStart(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldEQ(FieldActiveFromOverrideRelativeToPhaseStart, vc))
}

// ActiveToOverrideRelativeToPhaseStart applies equality check predicate on the "active_to_override_relative_to_phase_start" field. It's identical to ActiveToOverrideRelativeToPhaseStartEQ.
func ActiveToOverrideRelativeToPhaseStart(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldEQ(FieldActiveToOverrideRelativeToPhaseStart, vc))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldDescription, v))
}

// FeatureKey applies equality check predicate on the "feature_key" field. It's identical to FeatureKeyEQ.
func FeatureKey(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldFeatureKey, v))
}

// BillingCadence applies equality check predicate on the "billing_cadence" field. It's identical to BillingCadenceEQ.
func BillingCadence(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldEQ(FieldBillingCadence, vc))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldContainsFold(FieldNamespace, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotNull(FieldDeletedAt))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotNull(FieldMetadata))
}

// AnnotationsIsNil applies the IsNil predicate on the "annotations" field.
func AnnotationsIsNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIsNull(FieldAnnotations))
}

// AnnotationsNotNil applies the NotNil predicate on the "annotations" field.
func AnnotationsNotNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotNull(FieldAnnotations))
}

// ActiveFromEQ applies the EQ predicate on the "active_from" field.
func ActiveFromEQ(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldActiveFrom, v))
}

// ActiveFromNEQ applies the NEQ predicate on the "active_from" field.
func ActiveFromNEQ(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldActiveFrom, v))
}

// ActiveFromIn applies the In predicate on the "active_from" field.
func ActiveFromIn(vs ...time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIn(FieldActiveFrom, vs...))
}

// ActiveFromNotIn applies the NotIn predicate on the "active_from" field.
func ActiveFromNotIn(vs ...time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotIn(FieldActiveFrom, vs...))
}

// ActiveFromGT applies the GT predicate on the "active_from" field.
func ActiveFromGT(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGT(FieldActiveFrom, v))
}

// ActiveFromGTE applies the GTE predicate on the "active_from" field.
func ActiveFromGTE(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGTE(FieldActiveFrom, v))
}

// ActiveFromLT applies the LT predicate on the "active_from" field.
func ActiveFromLT(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLT(FieldActiveFrom, v))
}

// ActiveFromLTE applies the LTE predicate on the "active_from" field.
func ActiveFromLTE(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLTE(FieldActiveFrom, v))
}

// ActiveToEQ applies the EQ predicate on the "active_to" field.
func ActiveToEQ(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldActiveTo, v))
}

// ActiveToNEQ applies the NEQ predicate on the "active_to" field.
func ActiveToNEQ(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldActiveTo, v))
}

// ActiveToIn applies the In predicate on the "active_to" field.
func ActiveToIn(vs ...time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIn(FieldActiveTo, vs...))
}

// ActiveToNotIn applies the NotIn predicate on the "active_to" field.
func ActiveToNotIn(vs ...time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotIn(FieldActiveTo, vs...))
}

// ActiveToGT applies the GT predicate on the "active_to" field.
func ActiveToGT(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGT(FieldActiveTo, v))
}

// ActiveToGTE applies the GTE predicate on the "active_to" field.
func ActiveToGTE(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGTE(FieldActiveTo, v))
}

// ActiveToLT applies the LT predicate on the "active_to" field.
func ActiveToLT(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLT(FieldActiveTo, v))
}

// ActiveToLTE applies the LTE predicate on the "active_to" field.
func ActiveToLTE(v time.Time) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLTE(FieldActiveTo, v))
}

// ActiveToIsNil applies the IsNil predicate on the "active_to" field.
func ActiveToIsNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIsNull(FieldActiveTo))
}

// ActiveToNotNil applies the NotNil predicate on the "active_to" field.
func ActiveToNotNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotNull(FieldActiveTo))
}

// PhaseIDEQ applies the EQ predicate on the "phase_id" field.
func PhaseIDEQ(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldPhaseID, v))
}

// PhaseIDNEQ applies the NEQ predicate on the "phase_id" field.
func PhaseIDNEQ(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldPhaseID, v))
}

// PhaseIDIn applies the In predicate on the "phase_id" field.
func PhaseIDIn(vs ...string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIn(FieldPhaseID, vs...))
}

// PhaseIDNotIn applies the NotIn predicate on the "phase_id" field.
func PhaseIDNotIn(vs ...string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotIn(FieldPhaseID, vs...))
}

// PhaseIDGT applies the GT predicate on the "phase_id" field.
func PhaseIDGT(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGT(FieldPhaseID, v))
}

// PhaseIDGTE applies the GTE predicate on the "phase_id" field.
func PhaseIDGTE(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGTE(FieldPhaseID, v))
}

// PhaseIDLT applies the LT predicate on the "phase_id" field.
func PhaseIDLT(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLT(FieldPhaseID, v))
}

// PhaseIDLTE applies the LTE predicate on the "phase_id" field.
func PhaseIDLTE(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLTE(FieldPhaseID, v))
}

// PhaseIDContains applies the Contains predicate on the "phase_id" field.
func PhaseIDContains(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldContains(FieldPhaseID, v))
}

// PhaseIDHasPrefix applies the HasPrefix predicate on the "phase_id" field.
func PhaseIDHasPrefix(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldHasPrefix(FieldPhaseID, v))
}

// PhaseIDHasSuffix applies the HasSuffix predicate on the "phase_id" field.
func PhaseIDHasSuffix(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldHasSuffix(FieldPhaseID, v))
}

// PhaseIDEqualFold applies the EqualFold predicate on the "phase_id" field.
func PhaseIDEqualFold(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEqualFold(FieldPhaseID, v))
}

// PhaseIDContainsFold applies the ContainsFold predicate on the "phase_id" field.
func PhaseIDContainsFold(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldContainsFold(FieldPhaseID, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldContainsFold(FieldKey, v))
}

// EntitlementIDEQ applies the EQ predicate on the "entitlement_id" field.
func EntitlementIDEQ(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldEntitlementID, v))
}

// EntitlementIDNEQ applies the NEQ predicate on the "entitlement_id" field.
func EntitlementIDNEQ(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldEntitlementID, v))
}

// EntitlementIDIn applies the In predicate on the "entitlement_id" field.
func EntitlementIDIn(vs ...string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIn(FieldEntitlementID, vs...))
}

// EntitlementIDNotIn applies the NotIn predicate on the "entitlement_id" field.
func EntitlementIDNotIn(vs ...string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotIn(FieldEntitlementID, vs...))
}

// EntitlementIDGT applies the GT predicate on the "entitlement_id" field.
func EntitlementIDGT(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGT(FieldEntitlementID, v))
}

// EntitlementIDGTE applies the GTE predicate on the "entitlement_id" field.
func EntitlementIDGTE(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGTE(FieldEntitlementID, v))
}

// EntitlementIDLT applies the LT predicate on the "entitlement_id" field.
func EntitlementIDLT(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLT(FieldEntitlementID, v))
}

// EntitlementIDLTE applies the LTE predicate on the "entitlement_id" field.
func EntitlementIDLTE(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLTE(FieldEntitlementID, v))
}

// EntitlementIDContains applies the Contains predicate on the "entitlement_id" field.
func EntitlementIDContains(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldContains(FieldEntitlementID, v))
}

// EntitlementIDHasPrefix applies the HasPrefix predicate on the "entitlement_id" field.
func EntitlementIDHasPrefix(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldHasPrefix(FieldEntitlementID, v))
}

// EntitlementIDHasSuffix applies the HasSuffix predicate on the "entitlement_id" field.
func EntitlementIDHasSuffix(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldHasSuffix(FieldEntitlementID, v))
}

// EntitlementIDIsNil applies the IsNil predicate on the "entitlement_id" field.
func EntitlementIDIsNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIsNull(FieldEntitlementID))
}

// EntitlementIDNotNil applies the NotNil predicate on the "entitlement_id" field.
func EntitlementIDNotNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotNull(FieldEntitlementID))
}

// EntitlementIDEqualFold applies the EqualFold predicate on the "entitlement_id" field.
func EntitlementIDEqualFold(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEqualFold(FieldEntitlementID, v))
}

// EntitlementIDContainsFold applies the ContainsFold predicate on the "entitlement_id" field.
func EntitlementIDContainsFold(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldContainsFold(FieldEntitlementID, v))
}

// RestartsBillingPeriodEQ applies the EQ predicate on the "restarts_billing_period" field.
func RestartsBillingPeriodEQ(v bool) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldRestartsBillingPeriod, v))
}

// RestartsBillingPeriodNEQ applies the NEQ predicate on the "restarts_billing_period" field.
func RestartsBillingPeriodNEQ(v bool) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldRestartsBillingPeriod, v))
}

// RestartsBillingPeriodIsNil applies the IsNil predicate on the "restarts_billing_period" field.
func RestartsBillingPeriodIsNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIsNull(FieldRestartsBillingPeriod))
}

// RestartsBillingPeriodNotNil applies the NotNil predicate on the "restarts_billing_period" field.
func RestartsBillingPeriodNotNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotNull(FieldRestartsBillingPeriod))
}

// ActiveFromOverrideRelativeToPhaseStartEQ applies the EQ predicate on the "active_from_override_relative_to_phase_start" field.
func ActiveFromOverrideRelativeToPhaseStartEQ(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldEQ(FieldActiveFromOverrideRelativeToPhaseStart, vc))
}

// ActiveFromOverrideRelativeToPhaseStartNEQ applies the NEQ predicate on the "active_from_override_relative_to_phase_start" field.
func ActiveFromOverrideRelativeToPhaseStartNEQ(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldActiveFromOverrideRelativeToPhaseStart, vc))
}

// ActiveFromOverrideRelativeToPhaseStartIn applies the In predicate on the "active_from_override_relative_to_phase_start" field.
func ActiveFromOverrideRelativeToPhaseStartIn(vs ...isodate.String) predicate.SubscriptionItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SubscriptionItem(sql.FieldIn(FieldActiveFromOverrideRelativeToPhaseStart, v...))
}

// ActiveFromOverrideRelativeToPhaseStartNotIn applies the NotIn predicate on the "active_from_override_relative_to_phase_start" field.
func ActiveFromOverrideRelativeToPhaseStartNotIn(vs ...isodate.String) predicate.SubscriptionItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SubscriptionItem(sql.FieldNotIn(FieldActiveFromOverrideRelativeToPhaseStart, v...))
}

// ActiveFromOverrideRelativeToPhaseStartGT applies the GT predicate on the "active_from_override_relative_to_phase_start" field.
func ActiveFromOverrideRelativeToPhaseStartGT(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldGT(FieldActiveFromOverrideRelativeToPhaseStart, vc))
}

// ActiveFromOverrideRelativeToPhaseStartGTE applies the GTE predicate on the "active_from_override_relative_to_phase_start" field.
func ActiveFromOverrideRelativeToPhaseStartGTE(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldGTE(FieldActiveFromOverrideRelativeToPhaseStart, vc))
}

// ActiveFromOverrideRelativeToPhaseStartLT applies the LT predicate on the "active_from_override_relative_to_phase_start" field.
func ActiveFromOverrideRelativeToPhaseStartLT(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldLT(FieldActiveFromOverrideRelativeToPhaseStart, vc))
}

// ActiveFromOverrideRelativeToPhaseStartLTE applies the LTE predicate on the "active_from_override_relative_to_phase_start" field.
func ActiveFromOverrideRelativeToPhaseStartLTE(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldLTE(FieldActiveFromOverrideRelativeToPhaseStart, vc))
}

// ActiveFromOverrideRelativeToPhaseStartContains applies the Contains predicate on the "active_from_override_relative_to_phase_start" field.
func ActiveFromOverrideRelativeToPhaseStartContains(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldContains(FieldActiveFromOverrideRelativeToPhaseStart, vc))
}

// ActiveFromOverrideRelativeToPhaseStartHasPrefix applies the HasPrefix predicate on the "active_from_override_relative_to_phase_start" field.
func ActiveFromOverrideRelativeToPhaseStartHasPrefix(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldHasPrefix(FieldActiveFromOverrideRelativeToPhaseStart, vc))
}

// ActiveFromOverrideRelativeToPhaseStartHasSuffix applies the HasSuffix predicate on the "active_from_override_relative_to_phase_start" field.
func ActiveFromOverrideRelativeToPhaseStartHasSuffix(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldHasSuffix(FieldActiveFromOverrideRelativeToPhaseStart, vc))
}

// ActiveFromOverrideRelativeToPhaseStartIsNil applies the IsNil predicate on the "active_from_override_relative_to_phase_start" field.
func ActiveFromOverrideRelativeToPhaseStartIsNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIsNull(FieldActiveFromOverrideRelativeToPhaseStart))
}

// ActiveFromOverrideRelativeToPhaseStartNotNil applies the NotNil predicate on the "active_from_override_relative_to_phase_start" field.
func ActiveFromOverrideRelativeToPhaseStartNotNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotNull(FieldActiveFromOverrideRelativeToPhaseStart))
}

// ActiveFromOverrideRelativeToPhaseStartEqualFold applies the EqualFold predicate on the "active_from_override_relative_to_phase_start" field.
func ActiveFromOverrideRelativeToPhaseStartEqualFold(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldEqualFold(FieldActiveFromOverrideRelativeToPhaseStart, vc))
}

// ActiveFromOverrideRelativeToPhaseStartContainsFold applies the ContainsFold predicate on the "active_from_override_relative_to_phase_start" field.
func ActiveFromOverrideRelativeToPhaseStartContainsFold(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldContainsFold(FieldActiveFromOverrideRelativeToPhaseStart, vc))
}

// ActiveToOverrideRelativeToPhaseStartEQ applies the EQ predicate on the "active_to_override_relative_to_phase_start" field.
func ActiveToOverrideRelativeToPhaseStartEQ(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldEQ(FieldActiveToOverrideRelativeToPhaseStart, vc))
}

// ActiveToOverrideRelativeToPhaseStartNEQ applies the NEQ predicate on the "active_to_override_relative_to_phase_start" field.
func ActiveToOverrideRelativeToPhaseStartNEQ(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldActiveToOverrideRelativeToPhaseStart, vc))
}

// ActiveToOverrideRelativeToPhaseStartIn applies the In predicate on the "active_to_override_relative_to_phase_start" field.
func ActiveToOverrideRelativeToPhaseStartIn(vs ...isodate.String) predicate.SubscriptionItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SubscriptionItem(sql.FieldIn(FieldActiveToOverrideRelativeToPhaseStart, v...))
}

// ActiveToOverrideRelativeToPhaseStartNotIn applies the NotIn predicate on the "active_to_override_relative_to_phase_start" field.
func ActiveToOverrideRelativeToPhaseStartNotIn(vs ...isodate.String) predicate.SubscriptionItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SubscriptionItem(sql.FieldNotIn(FieldActiveToOverrideRelativeToPhaseStart, v...))
}

// ActiveToOverrideRelativeToPhaseStartGT applies the GT predicate on the "active_to_override_relative_to_phase_start" field.
func ActiveToOverrideRelativeToPhaseStartGT(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldGT(FieldActiveToOverrideRelativeToPhaseStart, vc))
}

// ActiveToOverrideRelativeToPhaseStartGTE applies the GTE predicate on the "active_to_override_relative_to_phase_start" field.
func ActiveToOverrideRelativeToPhaseStartGTE(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldGTE(FieldActiveToOverrideRelativeToPhaseStart, vc))
}

// ActiveToOverrideRelativeToPhaseStartLT applies the LT predicate on the "active_to_override_relative_to_phase_start" field.
func ActiveToOverrideRelativeToPhaseStartLT(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldLT(FieldActiveToOverrideRelativeToPhaseStart, vc))
}

// ActiveToOverrideRelativeToPhaseStartLTE applies the LTE predicate on the "active_to_override_relative_to_phase_start" field.
func ActiveToOverrideRelativeToPhaseStartLTE(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldLTE(FieldActiveToOverrideRelativeToPhaseStart, vc))
}

// ActiveToOverrideRelativeToPhaseStartContains applies the Contains predicate on the "active_to_override_relative_to_phase_start" field.
func ActiveToOverrideRelativeToPhaseStartContains(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldContains(FieldActiveToOverrideRelativeToPhaseStart, vc))
}

// ActiveToOverrideRelativeToPhaseStartHasPrefix applies the HasPrefix predicate on the "active_to_override_relative_to_phase_start" field.
func ActiveToOverrideRelativeToPhaseStartHasPrefix(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldHasPrefix(FieldActiveToOverrideRelativeToPhaseStart, vc))
}

// ActiveToOverrideRelativeToPhaseStartHasSuffix applies the HasSuffix predicate on the "active_to_override_relative_to_phase_start" field.
func ActiveToOverrideRelativeToPhaseStartHasSuffix(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldHasSuffix(FieldActiveToOverrideRelativeToPhaseStart, vc))
}

// ActiveToOverrideRelativeToPhaseStartIsNil applies the IsNil predicate on the "active_to_override_relative_to_phase_start" field.
func ActiveToOverrideRelativeToPhaseStartIsNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIsNull(FieldActiveToOverrideRelativeToPhaseStart))
}

// ActiveToOverrideRelativeToPhaseStartNotNil applies the NotNil predicate on the "active_to_override_relative_to_phase_start" field.
func ActiveToOverrideRelativeToPhaseStartNotNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotNull(FieldActiveToOverrideRelativeToPhaseStart))
}

// ActiveToOverrideRelativeToPhaseStartEqualFold applies the EqualFold predicate on the "active_to_override_relative_to_phase_start" field.
func ActiveToOverrideRelativeToPhaseStartEqualFold(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldEqualFold(FieldActiveToOverrideRelativeToPhaseStart, vc))
}

// ActiveToOverrideRelativeToPhaseStartContainsFold applies the ContainsFold predicate on the "active_to_override_relative_to_phase_start" field.
func ActiveToOverrideRelativeToPhaseStartContainsFold(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldContainsFold(FieldActiveToOverrideRelativeToPhaseStart, vc))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldContainsFold(FieldDescription, v))
}

// FeatureKeyEQ applies the EQ predicate on the "feature_key" field.
func FeatureKeyEQ(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEQ(FieldFeatureKey, v))
}

// FeatureKeyNEQ applies the NEQ predicate on the "feature_key" field.
func FeatureKeyNEQ(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldFeatureKey, v))
}

// FeatureKeyIn applies the In predicate on the "feature_key" field.
func FeatureKeyIn(vs ...string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIn(FieldFeatureKey, vs...))
}

// FeatureKeyNotIn applies the NotIn predicate on the "feature_key" field.
func FeatureKeyNotIn(vs ...string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotIn(FieldFeatureKey, vs...))
}

// FeatureKeyGT applies the GT predicate on the "feature_key" field.
func FeatureKeyGT(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGT(FieldFeatureKey, v))
}

// FeatureKeyGTE applies the GTE predicate on the "feature_key" field.
func FeatureKeyGTE(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldGTE(FieldFeatureKey, v))
}

// FeatureKeyLT applies the LT predicate on the "feature_key" field.
func FeatureKeyLT(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLT(FieldFeatureKey, v))
}

// FeatureKeyLTE applies the LTE predicate on the "feature_key" field.
func FeatureKeyLTE(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldLTE(FieldFeatureKey, v))
}

// FeatureKeyContains applies the Contains predicate on the "feature_key" field.
func FeatureKeyContains(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldContains(FieldFeatureKey, v))
}

// FeatureKeyHasPrefix applies the HasPrefix predicate on the "feature_key" field.
func FeatureKeyHasPrefix(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldHasPrefix(FieldFeatureKey, v))
}

// FeatureKeyHasSuffix applies the HasSuffix predicate on the "feature_key" field.
func FeatureKeyHasSuffix(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldHasSuffix(FieldFeatureKey, v))
}

// FeatureKeyIsNil applies the IsNil predicate on the "feature_key" field.
func FeatureKeyIsNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIsNull(FieldFeatureKey))
}

// FeatureKeyNotNil applies the NotNil predicate on the "feature_key" field.
func FeatureKeyNotNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotNull(FieldFeatureKey))
}

// FeatureKeyEqualFold applies the EqualFold predicate on the "feature_key" field.
func FeatureKeyEqualFold(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldEqualFold(FieldFeatureKey, v))
}

// FeatureKeyContainsFold applies the ContainsFold predicate on the "feature_key" field.
func FeatureKeyContainsFold(v string) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldContainsFold(FieldFeatureKey, v))
}

// EntitlementTemplateIsNil applies the IsNil predicate on the "entitlement_template" field.
func EntitlementTemplateIsNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIsNull(FieldEntitlementTemplate))
}

// EntitlementTemplateNotNil applies the NotNil predicate on the "entitlement_template" field.
func EntitlementTemplateNotNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotNull(FieldEntitlementTemplate))
}

// TaxConfigIsNil applies the IsNil predicate on the "tax_config" field.
func TaxConfigIsNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIsNull(FieldTaxConfig))
}

// TaxConfigNotNil applies the NotNil predicate on the "tax_config" field.
func TaxConfigNotNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotNull(FieldTaxConfig))
}

// BillingCadenceEQ applies the EQ predicate on the "billing_cadence" field.
func BillingCadenceEQ(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldEQ(FieldBillingCadence, vc))
}

// BillingCadenceNEQ applies the NEQ predicate on the "billing_cadence" field.
func BillingCadenceNEQ(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldNEQ(FieldBillingCadence, vc))
}

// BillingCadenceIn applies the In predicate on the "billing_cadence" field.
func BillingCadenceIn(vs ...isodate.String) predicate.SubscriptionItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SubscriptionItem(sql.FieldIn(FieldBillingCadence, v...))
}

// BillingCadenceNotIn applies the NotIn predicate on the "billing_cadence" field.
func BillingCadenceNotIn(vs ...isodate.String) predicate.SubscriptionItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.SubscriptionItem(sql.FieldNotIn(FieldBillingCadence, v...))
}

// BillingCadenceGT applies the GT predicate on the "billing_cadence" field.
func BillingCadenceGT(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldGT(FieldBillingCadence, vc))
}

// BillingCadenceGTE applies the GTE predicate on the "billing_cadence" field.
func BillingCadenceGTE(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldGTE(FieldBillingCadence, vc))
}

// BillingCadenceLT applies the LT predicate on the "billing_cadence" field.
func BillingCadenceLT(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldLT(FieldBillingCadence, vc))
}

// BillingCadenceLTE applies the LTE predicate on the "billing_cadence" field.
func BillingCadenceLTE(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldLTE(FieldBillingCadence, vc))
}

// BillingCadenceContains applies the Contains predicate on the "billing_cadence" field.
func BillingCadenceContains(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldContains(FieldBillingCadence, vc))
}

// BillingCadenceHasPrefix applies the HasPrefix predicate on the "billing_cadence" field.
func BillingCadenceHasPrefix(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldHasPrefix(FieldBillingCadence, vc))
}

// BillingCadenceHasSuffix applies the HasSuffix predicate on the "billing_cadence" field.
func BillingCadenceHasSuffix(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldHasSuffix(FieldBillingCadence, vc))
}

// BillingCadenceIsNil applies the IsNil predicate on the "billing_cadence" field.
func BillingCadenceIsNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIsNull(FieldBillingCadence))
}

// BillingCadenceNotNil applies the NotNil predicate on the "billing_cadence" field.
func BillingCadenceNotNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotNull(FieldBillingCadence))
}

// BillingCadenceEqualFold applies the EqualFold predicate on the "billing_cadence" field.
func BillingCadenceEqualFold(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldEqualFold(FieldBillingCadence, vc))
}

// BillingCadenceContainsFold applies the ContainsFold predicate on the "billing_cadence" field.
func BillingCadenceContainsFold(v isodate.String) predicate.SubscriptionItem {
	vc := string(v)
	return predicate.SubscriptionItem(sql.FieldContainsFold(FieldBillingCadence, vc))
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIsNull(FieldPrice))
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotNull(FieldPrice))
}

// DiscountsIsNil applies the IsNil predicate on the "discounts" field.
func DiscountsIsNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldIsNull(FieldDiscounts))
}

// DiscountsNotNil applies the NotNil predicate on the "discounts" field.
func DiscountsNotNil() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.FieldNotNull(FieldDiscounts))
}

// HasPhase applies the HasEdge predicate on the "phase" edge.
func HasPhase() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PhaseTable, PhaseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPhaseWith applies the HasEdge predicate on the "phase" edge with a given conditions (other predicates).
func HasPhaseWith(preds ...predicate.SubscriptionPhase) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(func(s *sql.Selector) {
		step := newPhaseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEntitlement applies the HasEdge predicate on the "entitlement" edge.
func HasEntitlement() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EntitlementTable, EntitlementColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntitlementWith applies the HasEdge predicate on the "entitlement" edge with a given conditions (other predicates).
func HasEntitlementWith(preds ...predicate.Entitlement) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(func(s *sql.Selector) {
		step := newEntitlementStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBillingLines applies the HasEdge predicate on the "billing_lines" edge.
func HasBillingLines() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BillingLinesTable, BillingLinesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBillingLinesWith applies the HasEdge predicate on the "billing_lines" edge with a given conditions (other predicates).
func HasBillingLinesWith(preds ...predicate.BillingInvoiceLine) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(func(s *sql.Selector) {
		step := newBillingLinesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscriptionAddonRateCardItems applies the HasEdge predicate on the "subscription_addon_rate_card_items" edge.
func HasSubscriptionAddonRateCardItems() predicate.SubscriptionItem {
	return predicate.SubscriptionItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubscriptionAddonRateCardItemsTable, SubscriptionAddonRateCardItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionAddonRateCardItemsWith applies the HasEdge predicate on the "subscription_addon_rate_card_items" edge with a given conditions (other predicates).
func HasSubscriptionAddonRateCardItemsWith(preds ...predicate.SubscriptionAddonRateCardItemLink) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(func(s *sql.Selector) {
		step := newSubscriptionAddonRateCardItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubscriptionItem) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubscriptionItem) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubscriptionItem) predicate.SubscriptionItem {
	return predicate.SubscriptionItem(sql.NotPredicates(p))
}
