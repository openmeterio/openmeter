// Code generated by ent, DO NOT EDIT.

package billinginvoiceusagebasedlineconfig

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
)

const (
	// Label holds the string label denoting the billinginvoiceusagebasedlineconfig type in the database.
	Label = "billing_invoice_usage_based_line_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldPriceType holds the string denoting the price_type field in the database.
	FieldPriceType = "price_type"
	// FieldFeatureKey holds the string denoting the feature_key field in the database.
	FieldFeatureKey = "feature_key"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldPreLinePeriodQuantity holds the string denoting the pre_line_period_quantity field in the database.
	FieldPreLinePeriodQuantity = "pre_line_period_quantity"
	// Table holds the table name of the billinginvoiceusagebasedlineconfig in the database.
	Table = "billing_invoice_usage_based_line_configs"
)

// Columns holds all SQL columns for billinginvoiceusagebasedlineconfig fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldPriceType,
	FieldFeatureKey,
	FieldPrice,
	FieldPreLinePeriodQuantity,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// FeatureKeyValidator is a validator for the "feature_key" field. It is called by the builders before save.
	FeatureKeyValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// ValueScanner of all BillingInvoiceUsageBasedLineConfig fields.
	ValueScanner struct {
		Price field.TypeValueScanner[*productcatalog.Price]
	}
)

// PriceTypeValidator is a validator for the "price_type" field enum values. It is called by the builders before save.
func PriceTypeValidator(pt productcatalog.PriceType) error {
	switch pt {
	case "flat", "unit", "tiered":
		return nil
	default:
		return fmt.Errorf("billinginvoiceusagebasedlineconfig: invalid enum value for price_type field: %q", pt)
	}
}

// OrderOption defines the ordering options for the BillingInvoiceUsageBasedLineConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByPriceType orders the results by the price_type field.
func ByPriceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriceType, opts...).ToFunc()
}

// ByFeatureKey orders the results by the feature_key field.
func ByFeatureKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatureKey, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByPreLinePeriodQuantity orders the results by the pre_line_period_quantity field.
func ByPreLinePeriodQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPreLinePeriodQuantity, opts...).ToFunc()
}
