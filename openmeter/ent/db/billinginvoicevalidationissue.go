// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicevalidationissue"
)

// BillingInvoiceValidationIssue is the model entity for the BillingInvoiceValidationIssue schema.
type BillingInvoiceValidationIssue struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// InvoiceID holds the value of the "invoice_id" field.
	InvoiceID string `json:"invoice_id,omitempty"`
	// Severity holds the value of the "severity" field.
	Severity billing.ValidationIssueSeverity `json:"severity,omitempty"`
	// Code holds the value of the "code" field.
	Code *string `json:"code,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Path holds the value of the "path" field.
	Path *string `json:"path,omitempty"`
	// Component holds the value of the "component" field.
	Component string `json:"component,omitempty"`
	// DedupeHash holds the value of the "dedupe_hash" field.
	DedupeHash []byte `json:"dedupe_hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingInvoiceValidationIssueQuery when eager-loading is set.
	Edges        BillingInvoiceValidationIssueEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillingInvoiceValidationIssueEdges holds the relations/edges for other nodes in the graph.
type BillingInvoiceValidationIssueEdges struct {
	// BillingInvoice holds the value of the billing_invoice edge.
	BillingInvoice *BillingInvoice `json:"billing_invoice,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BillingInvoiceOrErr returns the BillingInvoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceValidationIssueEdges) BillingInvoiceOrErr() (*BillingInvoice, error) {
	if e.BillingInvoice != nil {
		return e.BillingInvoice, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: billinginvoice.Label}
	}
	return nil, &NotLoadedError{edge: "billing_invoice"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingInvoiceValidationIssue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billinginvoicevalidationissue.FieldDedupeHash:
			values[i] = new([]byte)
		case billinginvoicevalidationissue.FieldID, billinginvoicevalidationissue.FieldNamespace, billinginvoicevalidationissue.FieldInvoiceID, billinginvoicevalidationissue.FieldSeverity, billinginvoicevalidationissue.FieldCode, billinginvoicevalidationissue.FieldMessage, billinginvoicevalidationissue.FieldPath, billinginvoicevalidationissue.FieldComponent:
			values[i] = new(sql.NullString)
		case billinginvoicevalidationissue.FieldCreatedAt, billinginvoicevalidationissue.FieldUpdatedAt, billinginvoicevalidationissue.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingInvoiceValidationIssue fields.
func (bivi *BillingInvoiceValidationIssue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billinginvoicevalidationissue.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bivi.ID = value.String
			}
		case billinginvoicevalidationissue.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				bivi.Namespace = value.String
			}
		case billinginvoicevalidationissue.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bivi.CreatedAt = value.Time
			}
		case billinginvoicevalidationissue.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bivi.UpdatedAt = value.Time
			}
		case billinginvoicevalidationissue.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bivi.DeletedAt = new(time.Time)
				*bivi.DeletedAt = value.Time
			}
		case billinginvoicevalidationissue.FieldInvoiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_id", values[i])
			} else if value.Valid {
				bivi.InvoiceID = value.String
			}
		case billinginvoicevalidationissue.FieldSeverity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field severity", values[i])
			} else if value.Valid {
				bivi.Severity = billing.ValidationIssueSeverity(value.String)
			}
		case billinginvoicevalidationissue.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				bivi.Code = new(string)
				*bivi.Code = value.String
			}
		case billinginvoicevalidationissue.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				bivi.Message = value.String
			}
		case billinginvoicevalidationissue.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				bivi.Path = new(string)
				*bivi.Path = value.String
			}
		case billinginvoicevalidationissue.FieldComponent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field component", values[i])
			} else if value.Valid {
				bivi.Component = value.String
			}
		case billinginvoicevalidationissue.FieldDedupeHash:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dedupe_hash", values[i])
			} else if value != nil {
				bivi.DedupeHash = *value
			}
		default:
			bivi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingInvoiceValidationIssue.
// This includes values selected through modifiers, order, etc.
func (bivi *BillingInvoiceValidationIssue) Value(name string) (ent.Value, error) {
	return bivi.selectValues.Get(name)
}

// QueryBillingInvoice queries the "billing_invoice" edge of the BillingInvoiceValidationIssue entity.
func (bivi *BillingInvoiceValidationIssue) QueryBillingInvoice() *BillingInvoiceQuery {
	return NewBillingInvoiceValidationIssueClient(bivi.config).QueryBillingInvoice(bivi)
}

// Update returns a builder for updating this BillingInvoiceValidationIssue.
// Note that you need to call BillingInvoiceValidationIssue.Unwrap() before calling this method if this BillingInvoiceValidationIssue
// was returned from a transaction, and the transaction was committed or rolled back.
func (bivi *BillingInvoiceValidationIssue) Update() *BillingInvoiceValidationIssueUpdateOne {
	return NewBillingInvoiceValidationIssueClient(bivi.config).UpdateOne(bivi)
}

// Unwrap unwraps the BillingInvoiceValidationIssue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bivi *BillingInvoiceValidationIssue) Unwrap() *BillingInvoiceValidationIssue {
	_tx, ok := bivi.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingInvoiceValidationIssue is not a transactional entity")
	}
	bivi.config.driver = _tx.drv
	return bivi
}

// String implements the fmt.Stringer.
func (bivi *BillingInvoiceValidationIssue) String() string {
	var builder strings.Builder
	builder.WriteString("BillingInvoiceValidationIssue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bivi.ID))
	builder.WriteString("namespace=")
	builder.WriteString(bivi.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bivi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bivi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bivi.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("invoice_id=")
	builder.WriteString(bivi.InvoiceID)
	builder.WriteString(", ")
	builder.WriteString("severity=")
	builder.WriteString(fmt.Sprintf("%v", bivi.Severity))
	builder.WriteString(", ")
	if v := bivi.Code; v != nil {
		builder.WriteString("code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(bivi.Message)
	builder.WriteString(", ")
	if v := bivi.Path; v != nil {
		builder.WriteString("path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("component=")
	builder.WriteString(bivi.Component)
	builder.WriteString(", ")
	builder.WriteString("dedupe_hash=")
	builder.WriteString(fmt.Sprintf("%v", bivi.DedupeHash))
	builder.WriteByte(')')
	return builder.String()
}

// BillingInvoiceValidationIssues is a parsable slice of BillingInvoiceValidationIssue.
type BillingInvoiceValidationIssues []*BillingInvoiceValidationIssue
