// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceflatfeelineconfig"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
)

// BillingInvoiceFlatFeeLineConfig is the model entity for the BillingInvoiceFlatFeeLineConfig schema.
type BillingInvoiceFlatFeeLineConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// PerUnitAmount holds the value of the "per_unit_amount" field.
	PerUnitAmount alpacadecimal.Decimal `json:"per_unit_amount,omitempty"`
	// Category holds the value of the "category" field.
	Category billing.FlatFeeCategory `json:"category,omitempty"`
	// PaymentTerm holds the value of the "payment_term" field.
	PaymentTerm  productcatalog.PaymentTermType `json:"payment_term,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingInvoiceFlatFeeLineConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billinginvoiceflatfeelineconfig.FieldPerUnitAmount:
			values[i] = new(alpacadecimal.Decimal)
		case billinginvoiceflatfeelineconfig.FieldID, billinginvoiceflatfeelineconfig.FieldNamespace, billinginvoiceflatfeelineconfig.FieldCategory, billinginvoiceflatfeelineconfig.FieldPaymentTerm:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingInvoiceFlatFeeLineConfig fields.
func (bifflc *BillingInvoiceFlatFeeLineConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billinginvoiceflatfeelineconfig.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bifflc.ID = value.String
			}
		case billinginvoiceflatfeelineconfig.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				bifflc.Namespace = value.String
			}
		case billinginvoiceflatfeelineconfig.FieldPerUnitAmount:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field per_unit_amount", values[i])
			} else if value != nil {
				bifflc.PerUnitAmount = *value
			}
		case billinginvoiceflatfeelineconfig.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				bifflc.Category = billing.FlatFeeCategory(value.String)
			}
		case billinginvoiceflatfeelineconfig.FieldPaymentTerm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_term", values[i])
			} else if value.Valid {
				bifflc.PaymentTerm = productcatalog.PaymentTermType(value.String)
			}
		default:
			bifflc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingInvoiceFlatFeeLineConfig.
// This includes values selected through modifiers, order, etc.
func (bifflc *BillingInvoiceFlatFeeLineConfig) Value(name string) (ent.Value, error) {
	return bifflc.selectValues.Get(name)
}

// Update returns a builder for updating this BillingInvoiceFlatFeeLineConfig.
// Note that you need to call BillingInvoiceFlatFeeLineConfig.Unwrap() before calling this method if this BillingInvoiceFlatFeeLineConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (bifflc *BillingInvoiceFlatFeeLineConfig) Update() *BillingInvoiceFlatFeeLineConfigUpdateOne {
	return NewBillingInvoiceFlatFeeLineConfigClient(bifflc.config).UpdateOne(bifflc)
}

// Unwrap unwraps the BillingInvoiceFlatFeeLineConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bifflc *BillingInvoiceFlatFeeLineConfig) Unwrap() *BillingInvoiceFlatFeeLineConfig {
	_tx, ok := bifflc.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingInvoiceFlatFeeLineConfig is not a transactional entity")
	}
	bifflc.config.driver = _tx.drv
	return bifflc
}

// String implements the fmt.Stringer.
func (bifflc *BillingInvoiceFlatFeeLineConfig) String() string {
	var builder strings.Builder
	builder.WriteString("BillingInvoiceFlatFeeLineConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bifflc.ID))
	builder.WriteString("namespace=")
	builder.WriteString(bifflc.Namespace)
	builder.WriteString(", ")
	builder.WriteString("per_unit_amount=")
	builder.WriteString(fmt.Sprintf("%v", bifflc.PerUnitAmount))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", bifflc.Category))
	builder.WriteString(", ")
	builder.WriteString("payment_term=")
	builder.WriteString(fmt.Sprintf("%v", bifflc.PaymentTerm))
	builder.WriteByte(')')
	return builder.String()
}

// BillingInvoiceFlatFeeLineConfigs is a parsable slice of BillingInvoiceFlatFeeLineConfig.
type BillingInvoiceFlatFeeLineConfigs []*BillingInvoiceFlatFeeLineConfig
