// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appstripe"
	"github.com/openmeterio/openmeter/openmeter/ent/db/appstripecustomer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
)

// AppStripeCustomer is the model entity for the AppStripeCustomer schema.
type AppStripeCustomer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID string `json:"customer_id,omitempty"`
	// StripeCustomerID holds the value of the "stripe_customer_id" field.
	StripeCustomerID string `json:"stripe_customer_id,omitempty"`
	// StripeDefaultPaymentMethodID holds the value of the "stripe_default_payment_method_id" field.
	StripeDefaultPaymentMethodID *string `json:"stripe_default_payment_method_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppStripeCustomerQuery when eager-loading is set.
	Edges        AppStripeCustomerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AppStripeCustomerEdges holds the relations/edges for other nodes in the graph.
type AppStripeCustomerEdges struct {
	// StripeApp holds the value of the stripe_app edge.
	StripeApp *AppStripe `json:"stripe_app,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StripeAppOrErr returns the StripeApp value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppStripeCustomerEdges) StripeAppOrErr() (*AppStripe, error) {
	if e.StripeApp != nil {
		return e.StripeApp, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: appstripe.Label}
	}
	return nil, &NotLoadedError{edge: "stripe_app"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppStripeCustomerEdges) CustomerOrErr() (*Customer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppStripeCustomer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appstripecustomer.FieldID:
			values[i] = new(sql.NullInt64)
		case appstripecustomer.FieldNamespace, appstripecustomer.FieldAppID, appstripecustomer.FieldCustomerID, appstripecustomer.FieldStripeCustomerID, appstripecustomer.FieldStripeDefaultPaymentMethodID:
			values[i] = new(sql.NullString)
		case appstripecustomer.FieldCreatedAt, appstripecustomer.FieldUpdatedAt, appstripecustomer.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppStripeCustomer fields.
func (asc *AppStripeCustomer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appstripecustomer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			asc.ID = int(value.Int64)
		case appstripecustomer.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				asc.Namespace = value.String
			}
		case appstripecustomer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				asc.CreatedAt = value.Time
			}
		case appstripecustomer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				asc.UpdatedAt = value.Time
			}
		case appstripecustomer.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				asc.DeletedAt = new(time.Time)
				*asc.DeletedAt = value.Time
			}
		case appstripecustomer.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				asc.AppID = value.String
			}
		case appstripecustomer.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				asc.CustomerID = value.String
			}
		case appstripecustomer.FieldStripeCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_customer_id", values[i])
			} else if value.Valid {
				asc.StripeCustomerID = value.String
			}
		case appstripecustomer.FieldStripeDefaultPaymentMethodID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_default_payment_method_id", values[i])
			} else if value.Valid {
				asc.StripeDefaultPaymentMethodID = new(string)
				*asc.StripeDefaultPaymentMethodID = value.String
			}
		default:
			asc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppStripeCustomer.
// This includes values selected through modifiers, order, etc.
func (asc *AppStripeCustomer) Value(name string) (ent.Value, error) {
	return asc.selectValues.Get(name)
}

// QueryStripeApp queries the "stripe_app" edge of the AppStripeCustomer entity.
func (asc *AppStripeCustomer) QueryStripeApp() *AppStripeQuery {
	return NewAppStripeCustomerClient(asc.config).QueryStripeApp(asc)
}

// QueryCustomer queries the "customer" edge of the AppStripeCustomer entity.
func (asc *AppStripeCustomer) QueryCustomer() *CustomerQuery {
	return NewAppStripeCustomerClient(asc.config).QueryCustomer(asc)
}

// Update returns a builder for updating this AppStripeCustomer.
// Note that you need to call AppStripeCustomer.Unwrap() before calling this method if this AppStripeCustomer
// was returned from a transaction, and the transaction was committed or rolled back.
func (asc *AppStripeCustomer) Update() *AppStripeCustomerUpdateOne {
	return NewAppStripeCustomerClient(asc.config).UpdateOne(asc)
}

// Unwrap unwraps the AppStripeCustomer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (asc *AppStripeCustomer) Unwrap() *AppStripeCustomer {
	_tx, ok := asc.config.driver.(*txDriver)
	if !ok {
		panic("db: AppStripeCustomer is not a transactional entity")
	}
	asc.config.driver = _tx.drv
	return asc
}

// String implements the fmt.Stringer.
func (asc *AppStripeCustomer) String() string {
	var builder strings.Builder
	builder.WriteString("AppStripeCustomer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", asc.ID))
	builder.WriteString("namespace=")
	builder.WriteString(asc.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(asc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(asc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := asc.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(asc.AppID)
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(asc.CustomerID)
	builder.WriteString(", ")
	builder.WriteString("stripe_customer_id=")
	builder.WriteString(asc.StripeCustomerID)
	builder.WriteString(", ")
	if v := asc.StripeDefaultPaymentMethodID; v != nil {
		builder.WriteString("stripe_default_payment_method_id=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// AppStripeCustomers is a parsable slice of AppStripeCustomer.
type AppStripeCustomers []*AppStripeCustomer
