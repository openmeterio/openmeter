// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	dbfeature "github.com/openmeterio/openmeter/openmeter/ent/db/feature"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planphase"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planratecard"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/datetime"
)

// PlanRateCardCreate is the builder for creating a PlanRateCard entity.
type PlanRateCardCreate struct {
	config
	mutation *PlanRateCardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (_c *PlanRateCardCreate) SetNamespace(v string) *PlanRateCardCreate {
	_c.mutation.SetNamespace(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *PlanRateCardCreate) SetMetadata(v map[string]string) *PlanRateCardCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *PlanRateCardCreate) SetCreatedAt(v time.Time) *PlanRateCardCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *PlanRateCardCreate) SetNillableCreatedAt(v *time.Time) *PlanRateCardCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *PlanRateCardCreate) SetUpdatedAt(v time.Time) *PlanRateCardCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *PlanRateCardCreate) SetNillableUpdatedAt(v *time.Time) *PlanRateCardCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *PlanRateCardCreate) SetDeletedAt(v time.Time) *PlanRateCardCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *PlanRateCardCreate) SetNillableDeletedAt(v *time.Time) *PlanRateCardCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *PlanRateCardCreate) SetName(v string) *PlanRateCardCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *PlanRateCardCreate) SetDescription(v string) *PlanRateCardCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *PlanRateCardCreate) SetNillableDescription(v *string) *PlanRateCardCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetKey sets the "key" field.
func (_c *PlanRateCardCreate) SetKey(v string) *PlanRateCardCreate {
	_c.mutation.SetKey(v)
	return _c
}

// SetType sets the "type" field.
func (_c *PlanRateCardCreate) SetType(v productcatalog.RateCardType) *PlanRateCardCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetFeatureKey sets the "feature_key" field.
func (_c *PlanRateCardCreate) SetFeatureKey(v string) *PlanRateCardCreate {
	_c.mutation.SetFeatureKey(v)
	return _c
}

// SetNillableFeatureKey sets the "feature_key" field if the given value is not nil.
func (_c *PlanRateCardCreate) SetNillableFeatureKey(v *string) *PlanRateCardCreate {
	if v != nil {
		_c.SetFeatureKey(*v)
	}
	return _c
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (_c *PlanRateCardCreate) SetEntitlementTemplate(v *productcatalog.EntitlementTemplate) *PlanRateCardCreate {
	_c.mutation.SetEntitlementTemplate(v)
	return _c
}

// SetTaxConfig sets the "tax_config" field.
func (_c *PlanRateCardCreate) SetTaxConfig(v *productcatalog.TaxConfig) *PlanRateCardCreate {
	_c.mutation.SetTaxConfig(v)
	return _c
}

// SetBillingCadence sets the "billing_cadence" field.
func (_c *PlanRateCardCreate) SetBillingCadence(v datetime.ISODurationString) *PlanRateCardCreate {
	_c.mutation.SetBillingCadence(v)
	return _c
}

// SetNillableBillingCadence sets the "billing_cadence" field if the given value is not nil.
func (_c *PlanRateCardCreate) SetNillableBillingCadence(v *datetime.ISODurationString) *PlanRateCardCreate {
	if v != nil {
		_c.SetBillingCadence(*v)
	}
	return _c
}

// SetPrice sets the "price" field.
func (_c *PlanRateCardCreate) SetPrice(v *productcatalog.Price) *PlanRateCardCreate {
	_c.mutation.SetPrice(v)
	return _c
}

// SetDiscounts sets the "discounts" field.
func (_c *PlanRateCardCreate) SetDiscounts(v *productcatalog.Discounts) *PlanRateCardCreate {
	_c.mutation.SetDiscounts(v)
	return _c
}

// SetPhaseID sets the "phase_id" field.
func (_c *PlanRateCardCreate) SetPhaseID(v string) *PlanRateCardCreate {
	_c.mutation.SetPhaseID(v)
	return _c
}

// SetFeatureID sets the "feature_id" field.
func (_c *PlanRateCardCreate) SetFeatureID(v string) *PlanRateCardCreate {
	_c.mutation.SetFeatureID(v)
	return _c
}

// SetNillableFeatureID sets the "feature_id" field if the given value is not nil.
func (_c *PlanRateCardCreate) SetNillableFeatureID(v *string) *PlanRateCardCreate {
	if v != nil {
		_c.SetFeatureID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *PlanRateCardCreate) SetID(v string) *PlanRateCardCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *PlanRateCardCreate) SetNillableID(v *string) *PlanRateCardCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetPhase sets the "phase" edge to the PlanPhase entity.
func (_c *PlanRateCardCreate) SetPhase(v *PlanPhase) *PlanRateCardCreate {
	return _c.SetPhaseID(v.ID)
}

// SetFeaturesID sets the "features" edge to the Feature entity by ID.
func (_c *PlanRateCardCreate) SetFeaturesID(id string) *PlanRateCardCreate {
	_c.mutation.SetFeaturesID(id)
	return _c
}

// SetNillableFeaturesID sets the "features" edge to the Feature entity by ID if the given value is not nil.
func (_c *PlanRateCardCreate) SetNillableFeaturesID(id *string) *PlanRateCardCreate {
	if id != nil {
		_c = _c.SetFeaturesID(*id)
	}
	return _c
}

// SetFeatures sets the "features" edge to the Feature entity.
func (_c *PlanRateCardCreate) SetFeatures(v *Feature) *PlanRateCardCreate {
	return _c.SetFeaturesID(v.ID)
}

// Mutation returns the PlanRateCardMutation object of the builder.
func (_c *PlanRateCardCreate) Mutation() *PlanRateCardMutation {
	return _c.mutation
}

// Save creates the PlanRateCard in the database.
func (_c *PlanRateCardCreate) Save(ctx context.Context) (*PlanRateCard, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PlanRateCardCreate) SaveX(ctx context.Context) *PlanRateCard {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PlanRateCardCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PlanRateCardCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PlanRateCardCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := planratecard.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := planratecard.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := planratecard.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PlanRateCardCreate) check() error {
	if _, ok := _c.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "PlanRateCard.namespace"`)}
	}
	if v, ok := _c.mutation.Namespace(); ok {
		if err := planratecard.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.namespace": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "PlanRateCard.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "PlanRateCard.updated_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "PlanRateCard.name"`)}
	}
	if _, ok := _c.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`db: missing required field "PlanRateCard.key"`)}
	}
	if v, ok := _c.mutation.Key(); ok {
		if err := planratecard.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.key": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "PlanRateCard.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := planratecard.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.type": %w`, err)}
		}
	}
	if v, ok := _c.mutation.EntitlementTemplate(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "entitlement_template", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.entitlement_template": %w`, err)}
		}
	}
	if v, ok := _c.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.tax_config": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Price(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.price": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Discounts(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "discounts", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.discounts": %w`, err)}
		}
	}
	if _, ok := _c.mutation.PhaseID(); !ok {
		return &ValidationError{Name: "phase_id", err: errors.New(`db: missing required field "PlanRateCard.phase_id"`)}
	}
	if v, ok := _c.mutation.PhaseID(); ok {
		if err := planratecard.PhaseIDValidator(v); err != nil {
			return &ValidationError{Name: "phase_id", err: fmt.Errorf(`db: validator failed for field "PlanRateCard.phase_id": %w`, err)}
		}
	}
	if len(_c.mutation.PhaseIDs()) == 0 {
		return &ValidationError{Name: "phase", err: errors.New(`db: missing required edge "PlanRateCard.phase"`)}
	}
	return nil
}

func (_c *PlanRateCardCreate) sqlSave(ctx context.Context) (*PlanRateCard, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := _c.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PlanRateCard.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PlanRateCardCreate) createSpec() (*PlanRateCard, *sqlgraph.CreateSpec, error) {
	var (
		_node = &PlanRateCard{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(planratecard.Table, sqlgraph.NewFieldSpec(planratecard.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Namespace(); ok {
		_spec.SetField(planratecard.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(planratecard.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(planratecard.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(planratecard.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(planratecard.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(planratecard.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(planratecard.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.Key(); ok {
		_spec.SetField(planratecard.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(planratecard.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.FeatureKey(); ok {
		_spec.SetField(planratecard.FieldFeatureKey, field.TypeString, value)
		_node.FeatureKey = &value
	}
	if value, ok := _c.mutation.EntitlementTemplate(); ok {
		vv, err := planratecard.ValueScanner.EntitlementTemplate.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(planratecard.FieldEntitlementTemplate, field.TypeString, vv)
		_node.EntitlementTemplate = value
	}
	if value, ok := _c.mutation.TaxConfig(); ok {
		vv, err := planratecard.ValueScanner.TaxConfig.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(planratecard.FieldTaxConfig, field.TypeString, vv)
		_node.TaxConfig = value
	}
	if value, ok := _c.mutation.BillingCadence(); ok {
		_spec.SetField(planratecard.FieldBillingCadence, field.TypeString, value)
		_node.BillingCadence = &value
	}
	if value, ok := _c.mutation.Price(); ok {
		vv, err := planratecard.ValueScanner.Price.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(planratecard.FieldPrice, field.TypeString, vv)
		_node.Price = value
	}
	if value, ok := _c.mutation.Discounts(); ok {
		vv, err := planratecard.ValueScanner.Discounts.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(planratecard.FieldDiscounts, field.TypeString, vv)
		_node.Discounts = value
	}
	if nodes := _c.mutation.PhaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planratecard.PhaseTable,
			Columns: []string{planratecard.PhaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planphase.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PhaseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planratecard.FeaturesTable,
			Columns: []string{planratecard.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dbfeature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FeatureID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlanRateCard.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanRateCardUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *PlanRateCardCreate) OnConflict(opts ...sql.ConflictOption) *PlanRateCardUpsertOne {
	_c.conflict = opts
	return &PlanRateCardUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlanRateCard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PlanRateCardCreate) OnConflictColumns(columns ...string) *PlanRateCardUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PlanRateCardUpsertOne{
		create: _c,
	}
}

type (
	// PlanRateCardUpsertOne is the builder for "upsert"-ing
	//  one PlanRateCard node.
	PlanRateCardUpsertOne struct {
		create *PlanRateCardCreate
	}

	// PlanRateCardUpsert is the "OnConflict" setter.
	PlanRateCardUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *PlanRateCardUpsert) SetMetadata(v map[string]string) *PlanRateCardUpsert {
	u.Set(planratecard.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *PlanRateCardUpsert) UpdateMetadata() *PlanRateCardUpsert {
	u.SetExcluded(planratecard.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *PlanRateCardUpsert) ClearMetadata() *PlanRateCardUpsert {
	u.SetNull(planratecard.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanRateCardUpsert) SetUpdatedAt(v time.Time) *PlanRateCardUpsert {
	u.Set(planratecard.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanRateCardUpsert) UpdateUpdatedAt() *PlanRateCardUpsert {
	u.SetExcluded(planratecard.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanRateCardUpsert) SetDeletedAt(v time.Time) *PlanRateCardUpsert {
	u.Set(planratecard.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanRateCardUpsert) UpdateDeletedAt() *PlanRateCardUpsert {
	u.SetExcluded(planratecard.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PlanRateCardUpsert) ClearDeletedAt() *PlanRateCardUpsert {
	u.SetNull(planratecard.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *PlanRateCardUpsert) SetName(v string) *PlanRateCardUpsert {
	u.Set(planratecard.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlanRateCardUpsert) UpdateName() *PlanRateCardUpsert {
	u.SetExcluded(planratecard.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *PlanRateCardUpsert) SetDescription(v string) *PlanRateCardUpsert {
	u.Set(planratecard.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanRateCardUpsert) UpdateDescription() *PlanRateCardUpsert {
	u.SetExcluded(planratecard.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *PlanRateCardUpsert) ClearDescription() *PlanRateCardUpsert {
	u.SetNull(planratecard.FieldDescription)
	return u
}

// SetFeatureKey sets the "feature_key" field.
func (u *PlanRateCardUpsert) SetFeatureKey(v string) *PlanRateCardUpsert {
	u.Set(planratecard.FieldFeatureKey, v)
	return u
}

// UpdateFeatureKey sets the "feature_key" field to the value that was provided on create.
func (u *PlanRateCardUpsert) UpdateFeatureKey() *PlanRateCardUpsert {
	u.SetExcluded(planratecard.FieldFeatureKey)
	return u
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (u *PlanRateCardUpsert) ClearFeatureKey() *PlanRateCardUpsert {
	u.SetNull(planratecard.FieldFeatureKey)
	return u
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (u *PlanRateCardUpsert) SetEntitlementTemplate(v *productcatalog.EntitlementTemplate) *PlanRateCardUpsert {
	u.Set(planratecard.FieldEntitlementTemplate, v)
	return u
}

// UpdateEntitlementTemplate sets the "entitlement_template" field to the value that was provided on create.
func (u *PlanRateCardUpsert) UpdateEntitlementTemplate() *PlanRateCardUpsert {
	u.SetExcluded(planratecard.FieldEntitlementTemplate)
	return u
}

// ClearEntitlementTemplate clears the value of the "entitlement_template" field.
func (u *PlanRateCardUpsert) ClearEntitlementTemplate() *PlanRateCardUpsert {
	u.SetNull(planratecard.FieldEntitlementTemplate)
	return u
}

// SetTaxConfig sets the "tax_config" field.
func (u *PlanRateCardUpsert) SetTaxConfig(v *productcatalog.TaxConfig) *PlanRateCardUpsert {
	u.Set(planratecard.FieldTaxConfig, v)
	return u
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *PlanRateCardUpsert) UpdateTaxConfig() *PlanRateCardUpsert {
	u.SetExcluded(planratecard.FieldTaxConfig)
	return u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *PlanRateCardUpsert) ClearTaxConfig() *PlanRateCardUpsert {
	u.SetNull(planratecard.FieldTaxConfig)
	return u
}

// SetBillingCadence sets the "billing_cadence" field.
func (u *PlanRateCardUpsert) SetBillingCadence(v datetime.ISODurationString) *PlanRateCardUpsert {
	u.Set(planratecard.FieldBillingCadence, v)
	return u
}

// UpdateBillingCadence sets the "billing_cadence" field to the value that was provided on create.
func (u *PlanRateCardUpsert) UpdateBillingCadence() *PlanRateCardUpsert {
	u.SetExcluded(planratecard.FieldBillingCadence)
	return u
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (u *PlanRateCardUpsert) ClearBillingCadence() *PlanRateCardUpsert {
	u.SetNull(planratecard.FieldBillingCadence)
	return u
}

// SetPrice sets the "price" field.
func (u *PlanRateCardUpsert) SetPrice(v *productcatalog.Price) *PlanRateCardUpsert {
	u.Set(planratecard.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *PlanRateCardUpsert) UpdatePrice() *PlanRateCardUpsert {
	u.SetExcluded(planratecard.FieldPrice)
	return u
}

// ClearPrice clears the value of the "price" field.
func (u *PlanRateCardUpsert) ClearPrice() *PlanRateCardUpsert {
	u.SetNull(planratecard.FieldPrice)
	return u
}

// SetDiscounts sets the "discounts" field.
func (u *PlanRateCardUpsert) SetDiscounts(v *productcatalog.Discounts) *PlanRateCardUpsert {
	u.Set(planratecard.FieldDiscounts, v)
	return u
}

// UpdateDiscounts sets the "discounts" field to the value that was provided on create.
func (u *PlanRateCardUpsert) UpdateDiscounts() *PlanRateCardUpsert {
	u.SetExcluded(planratecard.FieldDiscounts)
	return u
}

// ClearDiscounts clears the value of the "discounts" field.
func (u *PlanRateCardUpsert) ClearDiscounts() *PlanRateCardUpsert {
	u.SetNull(planratecard.FieldDiscounts)
	return u
}

// SetPhaseID sets the "phase_id" field.
func (u *PlanRateCardUpsert) SetPhaseID(v string) *PlanRateCardUpsert {
	u.Set(planratecard.FieldPhaseID, v)
	return u
}

// UpdatePhaseID sets the "phase_id" field to the value that was provided on create.
func (u *PlanRateCardUpsert) UpdatePhaseID() *PlanRateCardUpsert {
	u.SetExcluded(planratecard.FieldPhaseID)
	return u
}

// SetFeatureID sets the "feature_id" field.
func (u *PlanRateCardUpsert) SetFeatureID(v string) *PlanRateCardUpsert {
	u.Set(planratecard.FieldFeatureID, v)
	return u
}

// UpdateFeatureID sets the "feature_id" field to the value that was provided on create.
func (u *PlanRateCardUpsert) UpdateFeatureID() *PlanRateCardUpsert {
	u.SetExcluded(planratecard.FieldFeatureID)
	return u
}

// ClearFeatureID clears the value of the "feature_id" field.
func (u *PlanRateCardUpsert) ClearFeatureID() *PlanRateCardUpsert {
	u.SetNull(planratecard.FieldFeatureID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PlanRateCard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(planratecard.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlanRateCardUpsertOne) UpdateNewValues() *PlanRateCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(planratecard.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(planratecard.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(planratecard.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Key(); exists {
			s.SetIgnore(planratecard.FieldKey)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(planratecard.FieldType)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PlanRateCard.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PlanRateCardUpsertOne) Ignore() *PlanRateCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanRateCardUpsertOne) DoNothing() *PlanRateCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanRateCardCreate.OnConflict
// documentation for more info.
func (u *PlanRateCardUpsertOne) Update(set func(*PlanRateCardUpsert)) *PlanRateCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanRateCardUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *PlanRateCardUpsertOne) SetMetadata(v map[string]string) *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *PlanRateCardUpsertOne) UpdateMetadata() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *PlanRateCardUpsertOne) ClearMetadata() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanRateCardUpsertOne) SetUpdatedAt(v time.Time) *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanRateCardUpsertOne) UpdateUpdatedAt() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanRateCardUpsertOne) SetDeletedAt(v time.Time) *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanRateCardUpsertOne) UpdateDeletedAt() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PlanRateCardUpsertOne) ClearDeletedAt() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *PlanRateCardUpsertOne) SetName(v string) *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlanRateCardUpsertOne) UpdateName() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *PlanRateCardUpsertOne) SetDescription(v string) *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanRateCardUpsertOne) UpdateDescription() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PlanRateCardUpsertOne) ClearDescription() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearDescription()
	})
}

// SetFeatureKey sets the "feature_key" field.
func (u *PlanRateCardUpsertOne) SetFeatureKey(v string) *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetFeatureKey(v)
	})
}

// UpdateFeatureKey sets the "feature_key" field to the value that was provided on create.
func (u *PlanRateCardUpsertOne) UpdateFeatureKey() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateFeatureKey()
	})
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (u *PlanRateCardUpsertOne) ClearFeatureKey() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearFeatureKey()
	})
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (u *PlanRateCardUpsertOne) SetEntitlementTemplate(v *productcatalog.EntitlementTemplate) *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetEntitlementTemplate(v)
	})
}

// UpdateEntitlementTemplate sets the "entitlement_template" field to the value that was provided on create.
func (u *PlanRateCardUpsertOne) UpdateEntitlementTemplate() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateEntitlementTemplate()
	})
}

// ClearEntitlementTemplate clears the value of the "entitlement_template" field.
func (u *PlanRateCardUpsertOne) ClearEntitlementTemplate() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearEntitlementTemplate()
	})
}

// SetTaxConfig sets the "tax_config" field.
func (u *PlanRateCardUpsertOne) SetTaxConfig(v *productcatalog.TaxConfig) *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetTaxConfig(v)
	})
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *PlanRateCardUpsertOne) UpdateTaxConfig() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateTaxConfig()
	})
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *PlanRateCardUpsertOne) ClearTaxConfig() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearTaxConfig()
	})
}

// SetBillingCadence sets the "billing_cadence" field.
func (u *PlanRateCardUpsertOne) SetBillingCadence(v datetime.ISODurationString) *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetBillingCadence(v)
	})
}

// UpdateBillingCadence sets the "billing_cadence" field to the value that was provided on create.
func (u *PlanRateCardUpsertOne) UpdateBillingCadence() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateBillingCadence()
	})
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (u *PlanRateCardUpsertOne) ClearBillingCadence() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearBillingCadence()
	})
}

// SetPrice sets the "price" field.
func (u *PlanRateCardUpsertOne) SetPrice(v *productcatalog.Price) *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *PlanRateCardUpsertOne) UpdatePrice() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdatePrice()
	})
}

// ClearPrice clears the value of the "price" field.
func (u *PlanRateCardUpsertOne) ClearPrice() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearPrice()
	})
}

// SetDiscounts sets the "discounts" field.
func (u *PlanRateCardUpsertOne) SetDiscounts(v *productcatalog.Discounts) *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetDiscounts(v)
	})
}

// UpdateDiscounts sets the "discounts" field to the value that was provided on create.
func (u *PlanRateCardUpsertOne) UpdateDiscounts() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateDiscounts()
	})
}

// ClearDiscounts clears the value of the "discounts" field.
func (u *PlanRateCardUpsertOne) ClearDiscounts() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearDiscounts()
	})
}

// SetPhaseID sets the "phase_id" field.
func (u *PlanRateCardUpsertOne) SetPhaseID(v string) *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetPhaseID(v)
	})
}

// UpdatePhaseID sets the "phase_id" field to the value that was provided on create.
func (u *PlanRateCardUpsertOne) UpdatePhaseID() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdatePhaseID()
	})
}

// SetFeatureID sets the "feature_id" field.
func (u *PlanRateCardUpsertOne) SetFeatureID(v string) *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetFeatureID(v)
	})
}

// UpdateFeatureID sets the "feature_id" field to the value that was provided on create.
func (u *PlanRateCardUpsertOne) UpdateFeatureID() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateFeatureID()
	})
}

// ClearFeatureID clears the value of the "feature_id" field.
func (u *PlanRateCardUpsertOne) ClearFeatureID() *PlanRateCardUpsertOne {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearFeatureID()
	})
}

// Exec executes the query.
func (u *PlanRateCardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for PlanRateCardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanRateCardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlanRateCardUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: PlanRateCardUpsertOne.ID is not supported by MySQL driver. Use PlanRateCardUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlanRateCardUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlanRateCardCreateBulk is the builder for creating many PlanRateCard entities in bulk.
type PlanRateCardCreateBulk struct {
	config
	err      error
	builders []*PlanRateCardCreate
	conflict []sql.ConflictOption
}

// Save creates the PlanRateCard entities in the database.
func (_c *PlanRateCardCreateBulk) Save(ctx context.Context) ([]*PlanRateCard, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*PlanRateCard, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanRateCardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PlanRateCardCreateBulk) SaveX(ctx context.Context) []*PlanRateCard {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PlanRateCardCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PlanRateCardCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlanRateCard.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanRateCardUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *PlanRateCardCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlanRateCardUpsertBulk {
	_c.conflict = opts
	return &PlanRateCardUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlanRateCard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PlanRateCardCreateBulk) OnConflictColumns(columns ...string) *PlanRateCardUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PlanRateCardUpsertBulk{
		create: _c,
	}
}

// PlanRateCardUpsertBulk is the builder for "upsert"-ing
// a bulk of PlanRateCard nodes.
type PlanRateCardUpsertBulk struct {
	create *PlanRateCardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PlanRateCard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(planratecard.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlanRateCardUpsertBulk) UpdateNewValues() *PlanRateCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(planratecard.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(planratecard.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(planratecard.FieldCreatedAt)
			}
			if _, exists := b.mutation.Key(); exists {
				s.SetIgnore(planratecard.FieldKey)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(planratecard.FieldType)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PlanRateCard.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PlanRateCardUpsertBulk) Ignore() *PlanRateCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanRateCardUpsertBulk) DoNothing() *PlanRateCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanRateCardCreateBulk.OnConflict
// documentation for more info.
func (u *PlanRateCardUpsertBulk) Update(set func(*PlanRateCardUpsert)) *PlanRateCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanRateCardUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *PlanRateCardUpsertBulk) SetMetadata(v map[string]string) *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *PlanRateCardUpsertBulk) UpdateMetadata() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *PlanRateCardUpsertBulk) ClearMetadata() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanRateCardUpsertBulk) SetUpdatedAt(v time.Time) *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanRateCardUpsertBulk) UpdateUpdatedAt() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanRateCardUpsertBulk) SetDeletedAt(v time.Time) *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanRateCardUpsertBulk) UpdateDeletedAt() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PlanRateCardUpsertBulk) ClearDeletedAt() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *PlanRateCardUpsertBulk) SetName(v string) *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlanRateCardUpsertBulk) UpdateName() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *PlanRateCardUpsertBulk) SetDescription(v string) *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanRateCardUpsertBulk) UpdateDescription() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PlanRateCardUpsertBulk) ClearDescription() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearDescription()
	})
}

// SetFeatureKey sets the "feature_key" field.
func (u *PlanRateCardUpsertBulk) SetFeatureKey(v string) *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetFeatureKey(v)
	})
}

// UpdateFeatureKey sets the "feature_key" field to the value that was provided on create.
func (u *PlanRateCardUpsertBulk) UpdateFeatureKey() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateFeatureKey()
	})
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (u *PlanRateCardUpsertBulk) ClearFeatureKey() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearFeatureKey()
	})
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (u *PlanRateCardUpsertBulk) SetEntitlementTemplate(v *productcatalog.EntitlementTemplate) *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetEntitlementTemplate(v)
	})
}

// UpdateEntitlementTemplate sets the "entitlement_template" field to the value that was provided on create.
func (u *PlanRateCardUpsertBulk) UpdateEntitlementTemplate() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateEntitlementTemplate()
	})
}

// ClearEntitlementTemplate clears the value of the "entitlement_template" field.
func (u *PlanRateCardUpsertBulk) ClearEntitlementTemplate() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearEntitlementTemplate()
	})
}

// SetTaxConfig sets the "tax_config" field.
func (u *PlanRateCardUpsertBulk) SetTaxConfig(v *productcatalog.TaxConfig) *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetTaxConfig(v)
	})
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *PlanRateCardUpsertBulk) UpdateTaxConfig() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateTaxConfig()
	})
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *PlanRateCardUpsertBulk) ClearTaxConfig() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearTaxConfig()
	})
}

// SetBillingCadence sets the "billing_cadence" field.
func (u *PlanRateCardUpsertBulk) SetBillingCadence(v datetime.ISODurationString) *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetBillingCadence(v)
	})
}

// UpdateBillingCadence sets the "billing_cadence" field to the value that was provided on create.
func (u *PlanRateCardUpsertBulk) UpdateBillingCadence() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateBillingCadence()
	})
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (u *PlanRateCardUpsertBulk) ClearBillingCadence() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearBillingCadence()
	})
}

// SetPrice sets the "price" field.
func (u *PlanRateCardUpsertBulk) SetPrice(v *productcatalog.Price) *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *PlanRateCardUpsertBulk) UpdatePrice() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdatePrice()
	})
}

// ClearPrice clears the value of the "price" field.
func (u *PlanRateCardUpsertBulk) ClearPrice() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearPrice()
	})
}

// SetDiscounts sets the "discounts" field.
func (u *PlanRateCardUpsertBulk) SetDiscounts(v *productcatalog.Discounts) *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetDiscounts(v)
	})
}

// UpdateDiscounts sets the "discounts" field to the value that was provided on create.
func (u *PlanRateCardUpsertBulk) UpdateDiscounts() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateDiscounts()
	})
}

// ClearDiscounts clears the value of the "discounts" field.
func (u *PlanRateCardUpsertBulk) ClearDiscounts() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearDiscounts()
	})
}

// SetPhaseID sets the "phase_id" field.
func (u *PlanRateCardUpsertBulk) SetPhaseID(v string) *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetPhaseID(v)
	})
}

// UpdatePhaseID sets the "phase_id" field to the value that was provided on create.
func (u *PlanRateCardUpsertBulk) UpdatePhaseID() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdatePhaseID()
	})
}

// SetFeatureID sets the "feature_id" field.
func (u *PlanRateCardUpsertBulk) SetFeatureID(v string) *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.SetFeatureID(v)
	})
}

// UpdateFeatureID sets the "feature_id" field to the value that was provided on create.
func (u *PlanRateCardUpsertBulk) UpdateFeatureID() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.UpdateFeatureID()
	})
}

// ClearFeatureID clears the value of the "feature_id" field.
func (u *PlanRateCardUpsertBulk) ClearFeatureID() *PlanRateCardUpsertBulk {
	return u.Update(func(s *PlanRateCardUpsert) {
		s.ClearFeatureID()
	})
}

// Exec executes the query.
func (u *PlanRateCardUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the PlanRateCardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for PlanRateCardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanRateCardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
