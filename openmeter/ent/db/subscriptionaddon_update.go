// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonquantity"
)

// SubscriptionAddonUpdate is the builder for updating SubscriptionAddon entities.
type SubscriptionAddonUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionAddonMutation
}

// Where appends a list predicates to the SubscriptionAddonUpdate builder.
func (_u *SubscriptionAddonUpdate) Where(ps ...predicate.SubscriptionAddon) *SubscriptionAddonUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *SubscriptionAddonUpdate) SetMetadata(v map[string]string) *SubscriptionAddonUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SubscriptionAddonUpdate) ClearMetadata() *SubscriptionAddonUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubscriptionAddonUpdate) SetUpdatedAt(v time.Time) *SubscriptionAddonUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SubscriptionAddonUpdate) SetDeletedAt(v time.Time) *SubscriptionAddonUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SubscriptionAddonUpdate) SetNillableDeletedAt(v *time.Time) *SubscriptionAddonUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SubscriptionAddonUpdate) ClearDeletedAt() *SubscriptionAddonUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// AddQuantityIDs adds the "quantities" edge to the SubscriptionAddonQuantity entity by IDs.
func (_u *SubscriptionAddonUpdate) AddQuantityIDs(ids ...string) *SubscriptionAddonUpdate {
	_u.mutation.AddQuantityIDs(ids...)
	return _u
}

// AddQuantities adds the "quantities" edges to the SubscriptionAddonQuantity entity.
func (_u *SubscriptionAddonUpdate) AddQuantities(v ...*SubscriptionAddonQuantity) *SubscriptionAddonUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQuantityIDs(ids...)
}

// Mutation returns the SubscriptionAddonMutation object of the builder.
func (_u *SubscriptionAddonUpdate) Mutation() *SubscriptionAddonMutation {
	return _u.mutation
}

// ClearQuantities clears all "quantities" edges to the SubscriptionAddonQuantity entity.
func (_u *SubscriptionAddonUpdate) ClearQuantities() *SubscriptionAddonUpdate {
	_u.mutation.ClearQuantities()
	return _u
}

// RemoveQuantityIDs removes the "quantities" edge to SubscriptionAddonQuantity entities by IDs.
func (_u *SubscriptionAddonUpdate) RemoveQuantityIDs(ids ...string) *SubscriptionAddonUpdate {
	_u.mutation.RemoveQuantityIDs(ids...)
	return _u
}

// RemoveQuantities removes "quantities" edges to SubscriptionAddonQuantity entities.
func (_u *SubscriptionAddonUpdate) RemoveQuantities(v ...*SubscriptionAddonQuantity) *SubscriptionAddonUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQuantityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SubscriptionAddonUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubscriptionAddonUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SubscriptionAddonUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubscriptionAddonUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubscriptionAddonUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := subscriptionaddon.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubscriptionAddonUpdate) check() error {
	if _u.mutation.SubscriptionCleared() && len(_u.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionAddon.subscription"`)
	}
	if _u.mutation.AddonCleared() && len(_u.mutation.AddonIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionAddon.addon"`)
	}
	return nil
}

func (_u *SubscriptionAddonUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionaddon.Table, subscriptionaddon.Columns, sqlgraph.NewFieldSpec(subscriptionaddon.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(subscriptionaddon.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionaddon.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionaddon.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionaddon.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subscriptionaddon.FieldDeletedAt, field.TypeTime)
	}
	if _u.mutation.QuantitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionaddon.QuantitiesTable,
			Columns: []string{subscriptionaddon.QuantitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonquantity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQuantitiesIDs(); len(nodes) > 0 && !_u.mutation.QuantitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionaddon.QuantitiesTable,
			Columns: []string{subscriptionaddon.QuantitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonquantity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuantitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionaddon.QuantitiesTable,
			Columns: []string{subscriptionaddon.QuantitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonquantity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionaddon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SubscriptionAddonUpdateOne is the builder for updating a single SubscriptionAddon entity.
type SubscriptionAddonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionAddonMutation
}

// SetMetadata sets the "metadata" field.
func (_u *SubscriptionAddonUpdateOne) SetMetadata(v map[string]string) *SubscriptionAddonUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SubscriptionAddonUpdateOne) ClearMetadata() *SubscriptionAddonUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubscriptionAddonUpdateOne) SetUpdatedAt(v time.Time) *SubscriptionAddonUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SubscriptionAddonUpdateOne) SetDeletedAt(v time.Time) *SubscriptionAddonUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SubscriptionAddonUpdateOne) SetNillableDeletedAt(v *time.Time) *SubscriptionAddonUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SubscriptionAddonUpdateOne) ClearDeletedAt() *SubscriptionAddonUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// AddQuantityIDs adds the "quantities" edge to the SubscriptionAddonQuantity entity by IDs.
func (_u *SubscriptionAddonUpdateOne) AddQuantityIDs(ids ...string) *SubscriptionAddonUpdateOne {
	_u.mutation.AddQuantityIDs(ids...)
	return _u
}

// AddQuantities adds the "quantities" edges to the SubscriptionAddonQuantity entity.
func (_u *SubscriptionAddonUpdateOne) AddQuantities(v ...*SubscriptionAddonQuantity) *SubscriptionAddonUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQuantityIDs(ids...)
}

// Mutation returns the SubscriptionAddonMutation object of the builder.
func (_u *SubscriptionAddonUpdateOne) Mutation() *SubscriptionAddonMutation {
	return _u.mutation
}

// ClearQuantities clears all "quantities" edges to the SubscriptionAddonQuantity entity.
func (_u *SubscriptionAddonUpdateOne) ClearQuantities() *SubscriptionAddonUpdateOne {
	_u.mutation.ClearQuantities()
	return _u
}

// RemoveQuantityIDs removes the "quantities" edge to SubscriptionAddonQuantity entities by IDs.
func (_u *SubscriptionAddonUpdateOne) RemoveQuantityIDs(ids ...string) *SubscriptionAddonUpdateOne {
	_u.mutation.RemoveQuantityIDs(ids...)
	return _u
}

// RemoveQuantities removes "quantities" edges to SubscriptionAddonQuantity entities.
func (_u *SubscriptionAddonUpdateOne) RemoveQuantities(v ...*SubscriptionAddonQuantity) *SubscriptionAddonUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQuantityIDs(ids...)
}

// Where appends a list predicates to the SubscriptionAddonUpdate builder.
func (_u *SubscriptionAddonUpdateOne) Where(ps ...predicate.SubscriptionAddon) *SubscriptionAddonUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SubscriptionAddonUpdateOne) Select(field string, fields ...string) *SubscriptionAddonUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SubscriptionAddon entity.
func (_u *SubscriptionAddonUpdateOne) Save(ctx context.Context) (*SubscriptionAddon, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubscriptionAddonUpdateOne) SaveX(ctx context.Context) *SubscriptionAddon {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SubscriptionAddonUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubscriptionAddonUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubscriptionAddonUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := subscriptionaddon.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubscriptionAddonUpdateOne) check() error {
	if _u.mutation.SubscriptionCleared() && len(_u.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionAddon.subscription"`)
	}
	if _u.mutation.AddonCleared() && len(_u.mutation.AddonIDs()) > 0 {
		return errors.New(`db: clearing a required unique edge "SubscriptionAddon.addon"`)
	}
	return nil
}

func (_u *SubscriptionAddonUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionAddon, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriptionaddon.Table, subscriptionaddon.Columns, sqlgraph.NewFieldSpec(subscriptionaddon.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "SubscriptionAddon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionaddon.FieldID)
		for _, f := range fields {
			if !subscriptionaddon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != subscriptionaddon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(subscriptionaddon.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(subscriptionaddon.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionaddon.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionaddon.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subscriptionaddon.FieldDeletedAt, field.TypeTime)
	}
	if _u.mutation.QuantitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionaddon.QuantitiesTable,
			Columns: []string{subscriptionaddon.QuantitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonquantity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQuantitiesIDs(); len(nodes) > 0 && !_u.mutation.QuantitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionaddon.QuantitiesTable,
			Columns: []string{subscriptionaddon.QuantitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonquantity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuantitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptionaddon.QuantitiesTable,
			Columns: []string{subscriptionaddon.QuantitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonquantity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubscriptionAddon{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionaddon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
