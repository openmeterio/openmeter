// Code generated by ent, DO NOT EDIT.

package planratecard

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/isodate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldContainsFold(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldNamespace, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldDescription, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldKey, v))
}

// FeatureKey applies equality check predicate on the "feature_key" field. It's identical to FeatureKeyEQ.
func FeatureKey(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldFeatureKey, v))
}

// BillingCadence applies equality check predicate on the "billing_cadence" field. It's identical to BillingCadenceEQ.
func BillingCadence(v isodate.String) predicate.PlanRateCard {
	vc := string(v)
	return predicate.PlanRateCard(sql.FieldEQ(FieldBillingCadence, vc))
}

// PhaseID applies equality check predicate on the "phase_id" field. It's identical to PhaseIDEQ.
func PhaseID(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldPhaseID, v))
}

// FeatureID applies equality check predicate on the "feature_id" field. It's identical to FeatureIDEQ.
func FeatureID(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldFeatureID, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldContainsFold(FieldNamespace, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldContainsFold(FieldDescription, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldContainsFold(FieldKey, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v productcatalog.RateCardType) predicate.PlanRateCard {
	vc := v
	return predicate.PlanRateCard(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v productcatalog.RateCardType) predicate.PlanRateCard {
	vc := v
	return predicate.PlanRateCard(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...productcatalog.RateCardType) predicate.PlanRateCard {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlanRateCard(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...productcatalog.RateCardType) predicate.PlanRateCard {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlanRateCard(sql.FieldNotIn(FieldType, v...))
}

// FeatureKeyEQ applies the EQ predicate on the "feature_key" field.
func FeatureKeyEQ(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldFeatureKey, v))
}

// FeatureKeyNEQ applies the NEQ predicate on the "feature_key" field.
func FeatureKeyNEQ(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNEQ(FieldFeatureKey, v))
}

// FeatureKeyIn applies the In predicate on the "feature_key" field.
func FeatureKeyIn(vs ...string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIn(FieldFeatureKey, vs...))
}

// FeatureKeyNotIn applies the NotIn predicate on the "feature_key" field.
func FeatureKeyNotIn(vs ...string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotIn(FieldFeatureKey, vs...))
}

// FeatureKeyGT applies the GT predicate on the "feature_key" field.
func FeatureKeyGT(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGT(FieldFeatureKey, v))
}

// FeatureKeyGTE applies the GTE predicate on the "feature_key" field.
func FeatureKeyGTE(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGTE(FieldFeatureKey, v))
}

// FeatureKeyLT applies the LT predicate on the "feature_key" field.
func FeatureKeyLT(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLT(FieldFeatureKey, v))
}

// FeatureKeyLTE applies the LTE predicate on the "feature_key" field.
func FeatureKeyLTE(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLTE(FieldFeatureKey, v))
}

// FeatureKeyContains applies the Contains predicate on the "feature_key" field.
func FeatureKeyContains(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldContains(FieldFeatureKey, v))
}

// FeatureKeyHasPrefix applies the HasPrefix predicate on the "feature_key" field.
func FeatureKeyHasPrefix(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldHasPrefix(FieldFeatureKey, v))
}

// FeatureKeyHasSuffix applies the HasSuffix predicate on the "feature_key" field.
func FeatureKeyHasSuffix(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldHasSuffix(FieldFeatureKey, v))
}

// FeatureKeyIsNil applies the IsNil predicate on the "feature_key" field.
func FeatureKeyIsNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIsNull(FieldFeatureKey))
}

// FeatureKeyNotNil applies the NotNil predicate on the "feature_key" field.
func FeatureKeyNotNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotNull(FieldFeatureKey))
}

// FeatureKeyEqualFold applies the EqualFold predicate on the "feature_key" field.
func FeatureKeyEqualFold(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEqualFold(FieldFeatureKey, v))
}

// FeatureKeyContainsFold applies the ContainsFold predicate on the "feature_key" field.
func FeatureKeyContainsFold(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldContainsFold(FieldFeatureKey, v))
}

// EntitlementTemplateIsNil applies the IsNil predicate on the "entitlement_template" field.
func EntitlementTemplateIsNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIsNull(FieldEntitlementTemplate))
}

// EntitlementTemplateNotNil applies the NotNil predicate on the "entitlement_template" field.
func EntitlementTemplateNotNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotNull(FieldEntitlementTemplate))
}

// TaxConfigIsNil applies the IsNil predicate on the "tax_config" field.
func TaxConfigIsNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIsNull(FieldTaxConfig))
}

// TaxConfigNotNil applies the NotNil predicate on the "tax_config" field.
func TaxConfigNotNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotNull(FieldTaxConfig))
}

// BillingCadenceEQ applies the EQ predicate on the "billing_cadence" field.
func BillingCadenceEQ(v isodate.String) predicate.PlanRateCard {
	vc := string(v)
	return predicate.PlanRateCard(sql.FieldEQ(FieldBillingCadence, vc))
}

// BillingCadenceNEQ applies the NEQ predicate on the "billing_cadence" field.
func BillingCadenceNEQ(v isodate.String) predicate.PlanRateCard {
	vc := string(v)
	return predicate.PlanRateCard(sql.FieldNEQ(FieldBillingCadence, vc))
}

// BillingCadenceIn applies the In predicate on the "billing_cadence" field.
func BillingCadenceIn(vs ...isodate.String) predicate.PlanRateCard {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.PlanRateCard(sql.FieldIn(FieldBillingCadence, v...))
}

// BillingCadenceNotIn applies the NotIn predicate on the "billing_cadence" field.
func BillingCadenceNotIn(vs ...isodate.String) predicate.PlanRateCard {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.PlanRateCard(sql.FieldNotIn(FieldBillingCadence, v...))
}

// BillingCadenceGT applies the GT predicate on the "billing_cadence" field.
func BillingCadenceGT(v isodate.String) predicate.PlanRateCard {
	vc := string(v)
	return predicate.PlanRateCard(sql.FieldGT(FieldBillingCadence, vc))
}

// BillingCadenceGTE applies the GTE predicate on the "billing_cadence" field.
func BillingCadenceGTE(v isodate.String) predicate.PlanRateCard {
	vc := string(v)
	return predicate.PlanRateCard(sql.FieldGTE(FieldBillingCadence, vc))
}

// BillingCadenceLT applies the LT predicate on the "billing_cadence" field.
func BillingCadenceLT(v isodate.String) predicate.PlanRateCard {
	vc := string(v)
	return predicate.PlanRateCard(sql.FieldLT(FieldBillingCadence, vc))
}

// BillingCadenceLTE applies the LTE predicate on the "billing_cadence" field.
func BillingCadenceLTE(v isodate.String) predicate.PlanRateCard {
	vc := string(v)
	return predicate.PlanRateCard(sql.FieldLTE(FieldBillingCadence, vc))
}

// BillingCadenceContains applies the Contains predicate on the "billing_cadence" field.
func BillingCadenceContains(v isodate.String) predicate.PlanRateCard {
	vc := string(v)
	return predicate.PlanRateCard(sql.FieldContains(FieldBillingCadence, vc))
}

// BillingCadenceHasPrefix applies the HasPrefix predicate on the "billing_cadence" field.
func BillingCadenceHasPrefix(v isodate.String) predicate.PlanRateCard {
	vc := string(v)
	return predicate.PlanRateCard(sql.FieldHasPrefix(FieldBillingCadence, vc))
}

// BillingCadenceHasSuffix applies the HasSuffix predicate on the "billing_cadence" field.
func BillingCadenceHasSuffix(v isodate.String) predicate.PlanRateCard {
	vc := string(v)
	return predicate.PlanRateCard(sql.FieldHasSuffix(FieldBillingCadence, vc))
}

// BillingCadenceIsNil applies the IsNil predicate on the "billing_cadence" field.
func BillingCadenceIsNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIsNull(FieldBillingCadence))
}

// BillingCadenceNotNil applies the NotNil predicate on the "billing_cadence" field.
func BillingCadenceNotNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotNull(FieldBillingCadence))
}

// BillingCadenceEqualFold applies the EqualFold predicate on the "billing_cadence" field.
func BillingCadenceEqualFold(v isodate.String) predicate.PlanRateCard {
	vc := string(v)
	return predicate.PlanRateCard(sql.FieldEqualFold(FieldBillingCadence, vc))
}

// BillingCadenceContainsFold applies the ContainsFold predicate on the "billing_cadence" field.
func BillingCadenceContainsFold(v isodate.String) predicate.PlanRateCard {
	vc := string(v)
	return predicate.PlanRateCard(sql.FieldContainsFold(FieldBillingCadence, vc))
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIsNull(FieldPrice))
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotNull(FieldPrice))
}

// DiscountsIsNil applies the IsNil predicate on the "discounts" field.
func DiscountsIsNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIsNull(FieldDiscounts))
}

// DiscountsNotNil applies the NotNil predicate on the "discounts" field.
func DiscountsNotNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotNull(FieldDiscounts))
}

// PhaseIDEQ applies the EQ predicate on the "phase_id" field.
func PhaseIDEQ(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldPhaseID, v))
}

// PhaseIDNEQ applies the NEQ predicate on the "phase_id" field.
func PhaseIDNEQ(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNEQ(FieldPhaseID, v))
}

// PhaseIDIn applies the In predicate on the "phase_id" field.
func PhaseIDIn(vs ...string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIn(FieldPhaseID, vs...))
}

// PhaseIDNotIn applies the NotIn predicate on the "phase_id" field.
func PhaseIDNotIn(vs ...string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotIn(FieldPhaseID, vs...))
}

// PhaseIDGT applies the GT predicate on the "phase_id" field.
func PhaseIDGT(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGT(FieldPhaseID, v))
}

// PhaseIDGTE applies the GTE predicate on the "phase_id" field.
func PhaseIDGTE(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGTE(FieldPhaseID, v))
}

// PhaseIDLT applies the LT predicate on the "phase_id" field.
func PhaseIDLT(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLT(FieldPhaseID, v))
}

// PhaseIDLTE applies the LTE predicate on the "phase_id" field.
func PhaseIDLTE(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLTE(FieldPhaseID, v))
}

// PhaseIDContains applies the Contains predicate on the "phase_id" field.
func PhaseIDContains(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldContains(FieldPhaseID, v))
}

// PhaseIDHasPrefix applies the HasPrefix predicate on the "phase_id" field.
func PhaseIDHasPrefix(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldHasPrefix(FieldPhaseID, v))
}

// PhaseIDHasSuffix applies the HasSuffix predicate on the "phase_id" field.
func PhaseIDHasSuffix(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldHasSuffix(FieldPhaseID, v))
}

// PhaseIDEqualFold applies the EqualFold predicate on the "phase_id" field.
func PhaseIDEqualFold(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEqualFold(FieldPhaseID, v))
}

// PhaseIDContainsFold applies the ContainsFold predicate on the "phase_id" field.
func PhaseIDContainsFold(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldContainsFold(FieldPhaseID, v))
}

// FeatureIDEQ applies the EQ predicate on the "feature_id" field.
func FeatureIDEQ(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEQ(FieldFeatureID, v))
}

// FeatureIDNEQ applies the NEQ predicate on the "feature_id" field.
func FeatureIDNEQ(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNEQ(FieldFeatureID, v))
}

// FeatureIDIn applies the In predicate on the "feature_id" field.
func FeatureIDIn(vs ...string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIn(FieldFeatureID, vs...))
}

// FeatureIDNotIn applies the NotIn predicate on the "feature_id" field.
func FeatureIDNotIn(vs ...string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotIn(FieldFeatureID, vs...))
}

// FeatureIDGT applies the GT predicate on the "feature_id" field.
func FeatureIDGT(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGT(FieldFeatureID, v))
}

// FeatureIDGTE applies the GTE predicate on the "feature_id" field.
func FeatureIDGTE(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldGTE(FieldFeatureID, v))
}

// FeatureIDLT applies the LT predicate on the "feature_id" field.
func FeatureIDLT(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLT(FieldFeatureID, v))
}

// FeatureIDLTE applies the LTE predicate on the "feature_id" field.
func FeatureIDLTE(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldLTE(FieldFeatureID, v))
}

// FeatureIDContains applies the Contains predicate on the "feature_id" field.
func FeatureIDContains(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldContains(FieldFeatureID, v))
}

// FeatureIDHasPrefix applies the HasPrefix predicate on the "feature_id" field.
func FeatureIDHasPrefix(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldHasPrefix(FieldFeatureID, v))
}

// FeatureIDHasSuffix applies the HasSuffix predicate on the "feature_id" field.
func FeatureIDHasSuffix(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldHasSuffix(FieldFeatureID, v))
}

// FeatureIDIsNil applies the IsNil predicate on the "feature_id" field.
func FeatureIDIsNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldIsNull(FieldFeatureID))
}

// FeatureIDNotNil applies the NotNil predicate on the "feature_id" field.
func FeatureIDNotNil() predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldNotNull(FieldFeatureID))
}

// FeatureIDEqualFold applies the EqualFold predicate on the "feature_id" field.
func FeatureIDEqualFold(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldEqualFold(FieldFeatureID, v))
}

// FeatureIDContainsFold applies the ContainsFold predicate on the "feature_id" field.
func FeatureIDContainsFold(v string) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.FieldContainsFold(FieldFeatureID, v))
}

// HasPhase applies the HasEdge predicate on the "phase" edge.
func HasPhase() predicate.PlanRateCard {
	return predicate.PlanRateCard(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PhaseTable, PhaseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPhaseWith applies the HasEdge predicate on the "phase" edge with a given conditions (other predicates).
func HasPhaseWith(preds ...predicate.PlanPhase) predicate.PlanRateCard {
	return predicate.PlanRateCard(func(s *sql.Selector) {
		step := newPhaseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFeatures applies the HasEdge predicate on the "features" edge.
func HasFeatures() predicate.PlanRateCard {
	return predicate.PlanRateCard(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FeaturesTable, FeaturesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeaturesWith applies the HasEdge predicate on the "features" edge with a given conditions (other predicates).
func HasFeaturesWith(preds ...predicate.Feature) predicate.PlanRateCard {
	return predicate.PlanRateCard(func(s *sql.Selector) {
		step := newFeaturesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlanRateCard) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlanRateCard) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlanRateCard) predicate.PlanRateCard {
	return predicate.PlanRateCard(sql.NotPredicates(p))
}
