// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicelineusagediscount"
)

// BillingInvoiceLineUsageDiscountCreate is the builder for creating a BillingInvoiceLineUsageDiscount entity.
type BillingInvoiceLineUsageDiscountCreate struct {
	config
	mutation *BillingInvoiceLineUsageDiscountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetNamespace(s string) *BillingInvoiceLineUsageDiscountCreate {
	biludc.mutation.SetNamespace(s)
	return biludc
}

// SetCreatedAt sets the "created_at" field.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetCreatedAt(t time.Time) *BillingInvoiceLineUsageDiscountCreate {
	biludc.mutation.SetCreatedAt(t)
	return biludc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetNillableCreatedAt(t *time.Time) *BillingInvoiceLineUsageDiscountCreate {
	if t != nil {
		biludc.SetCreatedAt(*t)
	}
	return biludc
}

// SetUpdatedAt sets the "updated_at" field.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetUpdatedAt(t time.Time) *BillingInvoiceLineUsageDiscountCreate {
	biludc.mutation.SetUpdatedAt(t)
	return biludc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetNillableUpdatedAt(t *time.Time) *BillingInvoiceLineUsageDiscountCreate {
	if t != nil {
		biludc.SetUpdatedAt(*t)
	}
	return biludc
}

// SetDeletedAt sets the "deleted_at" field.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetDeletedAt(t time.Time) *BillingInvoiceLineUsageDiscountCreate {
	biludc.mutation.SetDeletedAt(t)
	return biludc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetNillableDeletedAt(t *time.Time) *BillingInvoiceLineUsageDiscountCreate {
	if t != nil {
		biludc.SetDeletedAt(*t)
	}
	return biludc
}

// SetLineID sets the "line_id" field.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetLineID(s string) *BillingInvoiceLineUsageDiscountCreate {
	biludc.mutation.SetLineID(s)
	return biludc
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetChildUniqueReferenceID(s string) *BillingInvoiceLineUsageDiscountCreate {
	biludc.mutation.SetChildUniqueReferenceID(s)
	return biludc
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetNillableChildUniqueReferenceID(s *string) *BillingInvoiceLineUsageDiscountCreate {
	if s != nil {
		biludc.SetChildUniqueReferenceID(*s)
	}
	return biludc
}

// SetDescription sets the "description" field.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetDescription(s string) *BillingInvoiceLineUsageDiscountCreate {
	biludc.mutation.SetDescription(s)
	return biludc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetNillableDescription(s *string) *BillingInvoiceLineUsageDiscountCreate {
	if s != nil {
		biludc.SetDescription(*s)
	}
	return biludc
}

// SetReason sets the "reason" field.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetReason(brt billing.DiscountReasonType) *BillingInvoiceLineUsageDiscountCreate {
	biludc.mutation.SetReason(brt)
	return biludc
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetInvoicingAppExternalID(s string) *BillingInvoiceLineUsageDiscountCreate {
	biludc.mutation.SetInvoicingAppExternalID(s)
	return biludc
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetNillableInvoicingAppExternalID(s *string) *BillingInvoiceLineUsageDiscountCreate {
	if s != nil {
		biludc.SetInvoicingAppExternalID(*s)
	}
	return biludc
}

// SetQuantity sets the "quantity" field.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetQuantity(a alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountCreate {
	biludc.mutation.SetQuantity(a)
	return biludc
}

// SetPreLinePeriodQuantity sets the "pre_line_period_quantity" field.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetPreLinePeriodQuantity(a alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountCreate {
	biludc.mutation.SetPreLinePeriodQuantity(a)
	return biludc
}

// SetNillablePreLinePeriodQuantity sets the "pre_line_period_quantity" field if the given value is not nil.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetNillablePreLinePeriodQuantity(a *alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountCreate {
	if a != nil {
		biludc.SetPreLinePeriodQuantity(*a)
	}
	return biludc
}

// SetReasonDetails sets the "reason_details" field.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetReasonDetails(br *billing.DiscountReason) *BillingInvoiceLineUsageDiscountCreate {
	biludc.mutation.SetReasonDetails(br)
	return biludc
}

// SetID sets the "id" field.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetID(s string) *BillingInvoiceLineUsageDiscountCreate {
	biludc.mutation.SetID(s)
	return biludc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetNillableID(s *string) *BillingInvoiceLineUsageDiscountCreate {
	if s != nil {
		biludc.SetID(*s)
	}
	return biludc
}

// SetBillingInvoiceLineID sets the "billing_invoice_line" edge to the BillingInvoiceLine entity by ID.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetBillingInvoiceLineID(id string) *BillingInvoiceLineUsageDiscountCreate {
	biludc.mutation.SetBillingInvoiceLineID(id)
	return biludc
}

// SetBillingInvoiceLine sets the "billing_invoice_line" edge to the BillingInvoiceLine entity.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SetBillingInvoiceLine(b *BillingInvoiceLine) *BillingInvoiceLineUsageDiscountCreate {
	return biludc.SetBillingInvoiceLineID(b.ID)
}

// Mutation returns the BillingInvoiceLineUsageDiscountMutation object of the builder.
func (biludc *BillingInvoiceLineUsageDiscountCreate) Mutation() *BillingInvoiceLineUsageDiscountMutation {
	return biludc.mutation
}

// Save creates the BillingInvoiceLineUsageDiscount in the database.
func (biludc *BillingInvoiceLineUsageDiscountCreate) Save(ctx context.Context) (*BillingInvoiceLineUsageDiscount, error) {
	biludc.defaults()
	return withHooks(ctx, biludc.sqlSave, biludc.mutation, biludc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (biludc *BillingInvoiceLineUsageDiscountCreate) SaveX(ctx context.Context) *BillingInvoiceLineUsageDiscount {
	v, err := biludc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (biludc *BillingInvoiceLineUsageDiscountCreate) Exec(ctx context.Context) error {
	_, err := biludc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biludc *BillingInvoiceLineUsageDiscountCreate) ExecX(ctx context.Context) {
	if err := biludc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biludc *BillingInvoiceLineUsageDiscountCreate) defaults() {
	if _, ok := biludc.mutation.CreatedAt(); !ok {
		v := billinginvoicelineusagediscount.DefaultCreatedAt()
		biludc.mutation.SetCreatedAt(v)
	}
	if _, ok := biludc.mutation.UpdatedAt(); !ok {
		v := billinginvoicelineusagediscount.DefaultUpdatedAt()
		biludc.mutation.SetUpdatedAt(v)
	}
	if _, ok := biludc.mutation.ID(); !ok {
		v := billinginvoicelineusagediscount.DefaultID()
		biludc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biludc *BillingInvoiceLineUsageDiscountCreate) check() error {
	if _, ok := biludc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingInvoiceLineUsageDiscount.namespace"`)}
	}
	if v, ok := biludc.mutation.Namespace(); ok {
		if err := billinginvoicelineusagediscount.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLineUsageDiscount.namespace": %w`, err)}
		}
	}
	if _, ok := biludc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingInvoiceLineUsageDiscount.created_at"`)}
	}
	if _, ok := biludc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingInvoiceLineUsageDiscount.updated_at"`)}
	}
	if _, ok := biludc.mutation.LineID(); !ok {
		return &ValidationError{Name: "line_id", err: errors.New(`db: missing required field "BillingInvoiceLineUsageDiscount.line_id"`)}
	}
	if _, ok := biludc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`db: missing required field "BillingInvoiceLineUsageDiscount.reason"`)}
	}
	if v, ok := biludc.mutation.Reason(); ok {
		if err := billinginvoicelineusagediscount.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLineUsageDiscount.reason": %w`, err)}
		}
	}
	if _, ok := biludc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`db: missing required field "BillingInvoiceLineUsageDiscount.quantity"`)}
	}
	if v, ok := biludc.mutation.ReasonDetails(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "reason_details", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceLineUsageDiscount.reason_details": %w`, err)}
		}
	}
	if len(biludc.mutation.BillingInvoiceLineIDs()) == 0 {
		return &ValidationError{Name: "billing_invoice_line", err: errors.New(`db: missing required edge "BillingInvoiceLineUsageDiscount.billing_invoice_line"`)}
	}
	return nil
}

func (biludc *BillingInvoiceLineUsageDiscountCreate) sqlSave(ctx context.Context) (*BillingInvoiceLineUsageDiscount, error) {
	if err := biludc.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := biludc.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, biludc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingInvoiceLineUsageDiscount.ID type: %T", _spec.ID.Value)
		}
	}
	biludc.mutation.id = &_node.ID
	biludc.mutation.done = true
	return _node, nil
}

func (biludc *BillingInvoiceLineUsageDiscountCreate) createSpec() (*BillingInvoiceLineUsageDiscount, *sqlgraph.CreateSpec, error) {
	var (
		_node = &BillingInvoiceLineUsageDiscount{config: biludc.config}
		_spec = sqlgraph.NewCreateSpec(billinginvoicelineusagediscount.Table, sqlgraph.NewFieldSpec(billinginvoicelineusagediscount.FieldID, field.TypeString))
	)
	_spec.OnConflict = biludc.conflict
	if id, ok := biludc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := biludc.mutation.Namespace(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := biludc.mutation.CreatedAt(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := biludc.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := biludc.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := biludc.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldChildUniqueReferenceID, field.TypeString, value)
		_node.ChildUniqueReferenceID = &value
	}
	if value, ok := biludc.mutation.Description(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := biludc.mutation.Reason(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldReason, field.TypeEnum, value)
		_node.Reason = value
	}
	if value, ok := biludc.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldInvoicingAppExternalID, field.TypeString, value)
		_node.InvoicingAppExternalID = &value
	}
	if value, ok := biludc.mutation.Quantity(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldQuantity, field.TypeOther, value)
		_node.Quantity = value
	}
	if value, ok := biludc.mutation.PreLinePeriodQuantity(); ok {
		_spec.SetField(billinginvoicelineusagediscount.FieldPreLinePeriodQuantity, field.TypeOther, value)
		_node.PreLinePeriodQuantity = &value
	}
	if value, ok := biludc.mutation.ReasonDetails(); ok {
		vv, err := billinginvoicelineusagediscount.ValueScanner.ReasonDetails.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(billinginvoicelineusagediscount.FieldReasonDetails, field.TypeString, vv)
		_node.ReasonDetails = value
	}
	if nodes := biludc.mutation.BillingInvoiceLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicelineusagediscount.BillingInvoiceLineTable,
			Columns: []string{billinginvoicelineusagediscount.BillingInvoiceLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LineID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceLineUsageDiscount.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceLineUsageDiscountUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (biludc *BillingInvoiceLineUsageDiscountCreate) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceLineUsageDiscountUpsertOne {
	biludc.conflict = opts
	return &BillingInvoiceLineUsageDiscountUpsertOne{
		create: biludc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceLineUsageDiscount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (biludc *BillingInvoiceLineUsageDiscountCreate) OnConflictColumns(columns ...string) *BillingInvoiceLineUsageDiscountUpsertOne {
	biludc.conflict = append(biludc.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceLineUsageDiscountUpsertOne{
		create: biludc,
	}
}

type (
	// BillingInvoiceLineUsageDiscountUpsertOne is the builder for "upsert"-ing
	//  one BillingInvoiceLineUsageDiscount node.
	BillingInvoiceLineUsageDiscountUpsertOne struct {
		create *BillingInvoiceLineUsageDiscountCreate
	}

	// BillingInvoiceLineUsageDiscountUpsert is the "OnConflict" setter.
	BillingInvoiceLineUsageDiscountUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceLineUsageDiscountUpsert) SetUpdatedAt(v time.Time) *BillingInvoiceLineUsageDiscountUpsert {
	u.Set(billinginvoicelineusagediscount.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsert) UpdateUpdatedAt() *BillingInvoiceLineUsageDiscountUpsert {
	u.SetExcluded(billinginvoicelineusagediscount.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceLineUsageDiscountUpsert) SetDeletedAt(v time.Time) *BillingInvoiceLineUsageDiscountUpsert {
	u.Set(billinginvoicelineusagediscount.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsert) UpdateDeletedAt() *BillingInvoiceLineUsageDiscountUpsert {
	u.SetExcluded(billinginvoicelineusagediscount.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceLineUsageDiscountUpsert) ClearDeletedAt() *BillingInvoiceLineUsageDiscountUpsert {
	u.SetNull(billinginvoicelineusagediscount.FieldDeletedAt)
	return u
}

// SetLineID sets the "line_id" field.
func (u *BillingInvoiceLineUsageDiscountUpsert) SetLineID(v string) *BillingInvoiceLineUsageDiscountUpsert {
	u.Set(billinginvoicelineusagediscount.FieldLineID, v)
	return u
}

// UpdateLineID sets the "line_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsert) UpdateLineID() *BillingInvoiceLineUsageDiscountUpsert {
	u.SetExcluded(billinginvoicelineusagediscount.FieldLineID)
	return u
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (u *BillingInvoiceLineUsageDiscountUpsert) SetChildUniqueReferenceID(v string) *BillingInvoiceLineUsageDiscountUpsert {
	u.Set(billinginvoicelineusagediscount.FieldChildUniqueReferenceID, v)
	return u
}

// UpdateChildUniqueReferenceID sets the "child_unique_reference_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsert) UpdateChildUniqueReferenceID() *BillingInvoiceLineUsageDiscountUpsert {
	u.SetExcluded(billinginvoicelineusagediscount.FieldChildUniqueReferenceID)
	return u
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (u *BillingInvoiceLineUsageDiscountUpsert) ClearChildUniqueReferenceID() *BillingInvoiceLineUsageDiscountUpsert {
	u.SetNull(billinginvoicelineusagediscount.FieldChildUniqueReferenceID)
	return u
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceLineUsageDiscountUpsert) SetDescription(v string) *BillingInvoiceLineUsageDiscountUpsert {
	u.Set(billinginvoicelineusagediscount.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsert) UpdateDescription() *BillingInvoiceLineUsageDiscountUpsert {
	u.SetExcluded(billinginvoicelineusagediscount.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceLineUsageDiscountUpsert) ClearDescription() *BillingInvoiceLineUsageDiscountUpsert {
	u.SetNull(billinginvoicelineusagediscount.FieldDescription)
	return u
}

// SetReason sets the "reason" field.
func (u *BillingInvoiceLineUsageDiscountUpsert) SetReason(v billing.DiscountReasonType) *BillingInvoiceLineUsageDiscountUpsert {
	u.Set(billinginvoicelineusagediscount.FieldReason, v)
	return u
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsert) UpdateReason() *BillingInvoiceLineUsageDiscountUpsert {
	u.SetExcluded(billinginvoicelineusagediscount.FieldReason)
	return u
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineUsageDiscountUpsert) SetInvoicingAppExternalID(v string) *BillingInvoiceLineUsageDiscountUpsert {
	u.Set(billinginvoicelineusagediscount.FieldInvoicingAppExternalID, v)
	return u
}

// UpdateInvoicingAppExternalID sets the "invoicing_app_external_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsert) UpdateInvoicingAppExternalID() *BillingInvoiceLineUsageDiscountUpsert {
	u.SetExcluded(billinginvoicelineusagediscount.FieldInvoicingAppExternalID)
	return u
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineUsageDiscountUpsert) ClearInvoicingAppExternalID() *BillingInvoiceLineUsageDiscountUpsert {
	u.SetNull(billinginvoicelineusagediscount.FieldInvoicingAppExternalID)
	return u
}

// SetQuantity sets the "quantity" field.
func (u *BillingInvoiceLineUsageDiscountUpsert) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountUpsert {
	u.Set(billinginvoicelineusagediscount.FieldQuantity, v)
	return u
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsert) UpdateQuantity() *BillingInvoiceLineUsageDiscountUpsert {
	u.SetExcluded(billinginvoicelineusagediscount.FieldQuantity)
	return u
}

// SetPreLinePeriodQuantity sets the "pre_line_period_quantity" field.
func (u *BillingInvoiceLineUsageDiscountUpsert) SetPreLinePeriodQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountUpsert {
	u.Set(billinginvoicelineusagediscount.FieldPreLinePeriodQuantity, v)
	return u
}

// UpdatePreLinePeriodQuantity sets the "pre_line_period_quantity" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsert) UpdatePreLinePeriodQuantity() *BillingInvoiceLineUsageDiscountUpsert {
	u.SetExcluded(billinginvoicelineusagediscount.FieldPreLinePeriodQuantity)
	return u
}

// ClearPreLinePeriodQuantity clears the value of the "pre_line_period_quantity" field.
func (u *BillingInvoiceLineUsageDiscountUpsert) ClearPreLinePeriodQuantity() *BillingInvoiceLineUsageDiscountUpsert {
	u.SetNull(billinginvoicelineusagediscount.FieldPreLinePeriodQuantity)
	return u
}

// SetReasonDetails sets the "reason_details" field.
func (u *BillingInvoiceLineUsageDiscountUpsert) SetReasonDetails(v *billing.DiscountReason) *BillingInvoiceLineUsageDiscountUpsert {
	u.Set(billinginvoicelineusagediscount.FieldReasonDetails, v)
	return u
}

// UpdateReasonDetails sets the "reason_details" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsert) UpdateReasonDetails() *BillingInvoiceLineUsageDiscountUpsert {
	u.SetExcluded(billinginvoicelineusagediscount.FieldReasonDetails)
	return u
}

// ClearReasonDetails clears the value of the "reason_details" field.
func (u *BillingInvoiceLineUsageDiscountUpsert) ClearReasonDetails() *BillingInvoiceLineUsageDiscountUpsert {
	u.SetNull(billinginvoicelineusagediscount.FieldReasonDetails)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceLineUsageDiscount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoicelineusagediscount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceLineUsageDiscountUpsertOne) UpdateNewValues() *BillingInvoiceLineUsageDiscountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billinginvoicelineusagediscount.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billinginvoicelineusagediscount.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billinginvoicelineusagediscount.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceLineUsageDiscount.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingInvoiceLineUsageDiscountUpsertOne) Ignore() *BillingInvoiceLineUsageDiscountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) DoNothing() *BillingInvoiceLineUsageDiscountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceLineUsageDiscountCreate.OnConflict
// documentation for more info.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) Update(set func(*BillingInvoiceLineUsageDiscountUpsert)) *BillingInvoiceLineUsageDiscountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceLineUsageDiscountUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) SetUpdatedAt(v time.Time) *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) UpdateUpdatedAt() *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) SetDeletedAt(v time.Time) *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) UpdateDeletedAt() *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) ClearDeletedAt() *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLineID sets the "line_id" field.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) SetLineID(v string) *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetLineID(v)
	})
}

// UpdateLineID sets the "line_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) UpdateLineID() *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateLineID()
	})
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) SetChildUniqueReferenceID(v string) *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetChildUniqueReferenceID(v)
	})
}

// UpdateChildUniqueReferenceID sets the "child_unique_reference_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) UpdateChildUniqueReferenceID() *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateChildUniqueReferenceID()
	})
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) ClearChildUniqueReferenceID() *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.ClearChildUniqueReferenceID()
	})
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) SetDescription(v string) *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) UpdateDescription() *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) ClearDescription() *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.ClearDescription()
	})
}

// SetReason sets the "reason" field.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) SetReason(v billing.DiscountReasonType) *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) UpdateReason() *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateReason()
	})
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) SetInvoicingAppExternalID(v string) *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetInvoicingAppExternalID(v)
	})
}

// UpdateInvoicingAppExternalID sets the "invoicing_app_external_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) UpdateInvoicingAppExternalID() *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateInvoicingAppExternalID()
	})
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) ClearInvoicingAppExternalID() *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.ClearInvoicingAppExternalID()
	})
}

// SetQuantity sets the "quantity" field.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) UpdateQuantity() *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateQuantity()
	})
}

// SetPreLinePeriodQuantity sets the "pre_line_period_quantity" field.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) SetPreLinePeriodQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetPreLinePeriodQuantity(v)
	})
}

// UpdatePreLinePeriodQuantity sets the "pre_line_period_quantity" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) UpdatePreLinePeriodQuantity() *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdatePreLinePeriodQuantity()
	})
}

// ClearPreLinePeriodQuantity clears the value of the "pre_line_period_quantity" field.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) ClearPreLinePeriodQuantity() *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.ClearPreLinePeriodQuantity()
	})
}

// SetReasonDetails sets the "reason_details" field.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) SetReasonDetails(v *billing.DiscountReason) *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetReasonDetails(v)
	})
}

// UpdateReasonDetails sets the "reason_details" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) UpdateReasonDetails() *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateReasonDetails()
	})
}

// ClearReasonDetails clears the value of the "reason_details" field.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) ClearReasonDetails() *BillingInvoiceLineUsageDiscountUpsertOne {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.ClearReasonDetails()
	})
}

// Exec executes the query.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceLineUsageDiscountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingInvoiceLineUsageDiscountUpsertOne.ID is not supported by MySQL driver. Use BillingInvoiceLineUsageDiscountUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingInvoiceLineUsageDiscountUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingInvoiceLineUsageDiscountCreateBulk is the builder for creating many BillingInvoiceLineUsageDiscount entities in bulk.
type BillingInvoiceLineUsageDiscountCreateBulk struct {
	config
	err      error
	builders []*BillingInvoiceLineUsageDiscountCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingInvoiceLineUsageDiscount entities in the database.
func (biludcb *BillingInvoiceLineUsageDiscountCreateBulk) Save(ctx context.Context) ([]*BillingInvoiceLineUsageDiscount, error) {
	if biludcb.err != nil {
		return nil, biludcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(biludcb.builders))
	nodes := make([]*BillingInvoiceLineUsageDiscount, len(biludcb.builders))
	mutators := make([]Mutator, len(biludcb.builders))
	for i := range biludcb.builders {
		func(i int, root context.Context) {
			builder := biludcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingInvoiceLineUsageDiscountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, biludcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = biludcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, biludcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, biludcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (biludcb *BillingInvoiceLineUsageDiscountCreateBulk) SaveX(ctx context.Context) []*BillingInvoiceLineUsageDiscount {
	v, err := biludcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (biludcb *BillingInvoiceLineUsageDiscountCreateBulk) Exec(ctx context.Context) error {
	_, err := biludcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biludcb *BillingInvoiceLineUsageDiscountCreateBulk) ExecX(ctx context.Context) {
	if err := biludcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceLineUsageDiscount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceLineUsageDiscountUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (biludcb *BillingInvoiceLineUsageDiscountCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceLineUsageDiscountUpsertBulk {
	biludcb.conflict = opts
	return &BillingInvoiceLineUsageDiscountUpsertBulk{
		create: biludcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceLineUsageDiscount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (biludcb *BillingInvoiceLineUsageDiscountCreateBulk) OnConflictColumns(columns ...string) *BillingInvoiceLineUsageDiscountUpsertBulk {
	biludcb.conflict = append(biludcb.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceLineUsageDiscountUpsertBulk{
		create: biludcb,
	}
}

// BillingInvoiceLineUsageDiscountUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingInvoiceLineUsageDiscount nodes.
type BillingInvoiceLineUsageDiscountUpsertBulk struct {
	create *BillingInvoiceLineUsageDiscountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingInvoiceLineUsageDiscount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoicelineusagediscount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) UpdateNewValues() *BillingInvoiceLineUsageDiscountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billinginvoicelineusagediscount.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billinginvoicelineusagediscount.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billinginvoicelineusagediscount.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceLineUsageDiscount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) Ignore() *BillingInvoiceLineUsageDiscountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) DoNothing() *BillingInvoiceLineUsageDiscountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceLineUsageDiscountCreateBulk.OnConflict
// documentation for more info.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) Update(set func(*BillingInvoiceLineUsageDiscountUpsert)) *BillingInvoiceLineUsageDiscountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceLineUsageDiscountUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) SetUpdatedAt(v time.Time) *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) UpdateUpdatedAt() *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) SetDeletedAt(v time.Time) *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) UpdateDeletedAt() *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) ClearDeletedAt() *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLineID sets the "line_id" field.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) SetLineID(v string) *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetLineID(v)
	})
}

// UpdateLineID sets the "line_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) UpdateLineID() *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateLineID()
	})
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) SetChildUniqueReferenceID(v string) *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetChildUniqueReferenceID(v)
	})
}

// UpdateChildUniqueReferenceID sets the "child_unique_reference_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) UpdateChildUniqueReferenceID() *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateChildUniqueReferenceID()
	})
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) ClearChildUniqueReferenceID() *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.ClearChildUniqueReferenceID()
	})
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) SetDescription(v string) *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) UpdateDescription() *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) ClearDescription() *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.ClearDescription()
	})
}

// SetReason sets the "reason" field.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) SetReason(v billing.DiscountReasonType) *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) UpdateReason() *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateReason()
	})
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) SetInvoicingAppExternalID(v string) *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetInvoicingAppExternalID(v)
	})
}

// UpdateInvoicingAppExternalID sets the "invoicing_app_external_id" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) UpdateInvoicingAppExternalID() *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateInvoicingAppExternalID()
	})
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) ClearInvoicingAppExternalID() *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.ClearInvoicingAppExternalID()
	})
}

// SetQuantity sets the "quantity" field.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) UpdateQuantity() *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateQuantity()
	})
}

// SetPreLinePeriodQuantity sets the "pre_line_period_quantity" field.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) SetPreLinePeriodQuantity(v alpacadecimal.Decimal) *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetPreLinePeriodQuantity(v)
	})
}

// UpdatePreLinePeriodQuantity sets the "pre_line_period_quantity" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) UpdatePreLinePeriodQuantity() *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdatePreLinePeriodQuantity()
	})
}

// ClearPreLinePeriodQuantity clears the value of the "pre_line_period_quantity" field.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) ClearPreLinePeriodQuantity() *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.ClearPreLinePeriodQuantity()
	})
}

// SetReasonDetails sets the "reason_details" field.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) SetReasonDetails(v *billing.DiscountReason) *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.SetReasonDetails(v)
	})
}

// UpdateReasonDetails sets the "reason_details" field to the value that was provided on create.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) UpdateReasonDetails() *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.UpdateReasonDetails()
	})
}

// ClearReasonDetails clears the value of the "reason_details" field.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) ClearReasonDetails() *BillingInvoiceLineUsageDiscountUpsertBulk {
	return u.Update(func(s *BillingInvoiceLineUsageDiscountUpsert) {
		s.ClearReasonDetails()
	})
}

// Exec executes the query.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingInvoiceLineUsageDiscountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceLineUsageDiscountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceLineUsageDiscountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
