// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/alpacahq/alpacadecimal"
	billingentity "github.com/openmeterio/openmeter/openmeter/billing/entity"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceitem"
	"github.com/openmeterio/openmeter/pkg/currencyx"
)

// BillingInvoiceItem is the model entity for the BillingInvoiceItem schema.
type BillingInvoiceItem struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]string `json:"metadata,omitempty"`
	// InvoiceID holds the value of the "invoice_id" field.
	InvoiceID *string `json:"invoice_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID string `json:"customer_id,omitempty"`
	// PeriodStart holds the value of the "period_start" field.
	PeriodStart time.Time `json:"period_start,omitempty"`
	// PeriodEnd holds the value of the "period_end" field.
	PeriodEnd time.Time `json:"period_end,omitempty"`
	// InvoiceAt holds the value of the "invoice_at" field.
	InvoiceAt time.Time `json:"invoice_at,omitempty"`
	// Type holds the value of the "type" field.
	Type billingentity.InvoiceItemType `json:"type,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity *alpacadecimal.Decimal `json:"quantity,omitempty"`
	// UnitPrice holds the value of the "unit_price" field.
	UnitPrice alpacadecimal.Decimal `json:"unit_price,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency currencyx.Code `json:"currency,omitempty"`
	// TaxCodeOverride holds the value of the "tax_code_override" field.
	TaxCodeOverride billingentity.TaxOverrides `json:"tax_code_override,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingInvoiceItemQuery when eager-loading is set.
	Edges        BillingInvoiceItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillingInvoiceItemEdges holds the relations/edges for other nodes in the graph.
type BillingInvoiceItemEdges struct {
	// BillingInvoice holds the value of the billing_invoice edge.
	BillingInvoice *BillingInvoice `json:"billing_invoice,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BillingInvoiceOrErr returns the BillingInvoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingInvoiceItemEdges) BillingInvoiceOrErr() (*BillingInvoice, error) {
	if e.BillingInvoice != nil {
		return e.BillingInvoice, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: billinginvoice.Label}
	}
	return nil, &NotLoadedError{edge: "billing_invoice"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingInvoiceItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billinginvoiceitem.FieldQuantity:
			values[i] = &sql.NullScanner{S: new(alpacadecimal.Decimal)}
		case billinginvoiceitem.FieldMetadata, billinginvoiceitem.FieldTaxCodeOverride:
			values[i] = new([]byte)
		case billinginvoiceitem.FieldUnitPrice:
			values[i] = new(alpacadecimal.Decimal)
		case billinginvoiceitem.FieldID, billinginvoiceitem.FieldNamespace, billinginvoiceitem.FieldInvoiceID, billinginvoiceitem.FieldCustomerID, billinginvoiceitem.FieldType, billinginvoiceitem.FieldName, billinginvoiceitem.FieldCurrency:
			values[i] = new(sql.NullString)
		case billinginvoiceitem.FieldCreatedAt, billinginvoiceitem.FieldUpdatedAt, billinginvoiceitem.FieldDeletedAt, billinginvoiceitem.FieldPeriodStart, billinginvoiceitem.FieldPeriodEnd, billinginvoiceitem.FieldInvoiceAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingInvoiceItem fields.
func (bii *BillingInvoiceItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billinginvoiceitem.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bii.ID = value.String
			}
		case billinginvoiceitem.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				bii.Namespace = value.String
			}
		case billinginvoiceitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bii.CreatedAt = value.Time
			}
		case billinginvoiceitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bii.UpdatedAt = value.Time
			}
		case billinginvoiceitem.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bii.DeletedAt = new(time.Time)
				*bii.DeletedAt = value.Time
			}
		case billinginvoiceitem.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bii.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case billinginvoiceitem.FieldInvoiceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_id", values[i])
			} else if value.Valid {
				bii.InvoiceID = new(string)
				*bii.InvoiceID = value.String
			}
		case billinginvoiceitem.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				bii.CustomerID = value.String
			}
		case billinginvoiceitem.FieldPeriodStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_start", values[i])
			} else if value.Valid {
				bii.PeriodStart = value.Time
			}
		case billinginvoiceitem.FieldPeriodEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_end", values[i])
			} else if value.Valid {
				bii.PeriodEnd = value.Time
			}
		case billinginvoiceitem.FieldInvoiceAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_at", values[i])
			} else if value.Valid {
				bii.InvoiceAt = value.Time
			}
		case billinginvoiceitem.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				bii.Type = billingentity.InvoiceItemType(value.String)
			}
		case billinginvoiceitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bii.Name = value.String
			}
		case billinginvoiceitem.FieldQuantity:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				bii.Quantity = new(alpacadecimal.Decimal)
				*bii.Quantity = *value.S.(*alpacadecimal.Decimal)
			}
		case billinginvoiceitem.FieldUnitPrice:
			if value, ok := values[i].(*alpacadecimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field unit_price", values[i])
			} else if value != nil {
				bii.UnitPrice = *value
			}
		case billinginvoiceitem.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				bii.Currency = currencyx.Code(value.String)
			}
		case billinginvoiceitem.FieldTaxCodeOverride:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tax_code_override", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bii.TaxCodeOverride); err != nil {
					return fmt.Errorf("unmarshal field tax_code_override: %w", err)
				}
			}
		default:
			bii.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingInvoiceItem.
// This includes values selected through modifiers, order, etc.
func (bii *BillingInvoiceItem) Value(name string) (ent.Value, error) {
	return bii.selectValues.Get(name)
}

// QueryBillingInvoice queries the "billing_invoice" edge of the BillingInvoiceItem entity.
func (bii *BillingInvoiceItem) QueryBillingInvoice() *BillingInvoiceQuery {
	return NewBillingInvoiceItemClient(bii.config).QueryBillingInvoice(bii)
}

// Update returns a builder for updating this BillingInvoiceItem.
// Note that you need to call BillingInvoiceItem.Unwrap() before calling this method if this BillingInvoiceItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (bii *BillingInvoiceItem) Update() *BillingInvoiceItemUpdateOne {
	return NewBillingInvoiceItemClient(bii.config).UpdateOne(bii)
}

// Unwrap unwraps the BillingInvoiceItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bii *BillingInvoiceItem) Unwrap() *BillingInvoiceItem {
	_tx, ok := bii.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingInvoiceItem is not a transactional entity")
	}
	bii.config.driver = _tx.drv
	return bii
}

// String implements the fmt.Stringer.
func (bii *BillingInvoiceItem) String() string {
	var builder strings.Builder
	builder.WriteString("BillingInvoiceItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bii.ID))
	builder.WriteString("namespace=")
	builder.WriteString(bii.Namespace)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bii.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bii.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bii.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", bii.Metadata))
	builder.WriteString(", ")
	if v := bii.InvoiceID; v != nil {
		builder.WriteString("invoice_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(bii.CustomerID)
	builder.WriteString(", ")
	builder.WriteString("period_start=")
	builder.WriteString(bii.PeriodStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("period_end=")
	builder.WriteString(bii.PeriodEnd.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("invoice_at=")
	builder.WriteString(bii.InvoiceAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", bii.Type))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(bii.Name)
	builder.WriteString(", ")
	if v := bii.Quantity; v != nil {
		builder.WriteString("quantity=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("unit_price=")
	builder.WriteString(fmt.Sprintf("%v", bii.UnitPrice))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(fmt.Sprintf("%v", bii.Currency))
	builder.WriteString(", ")
	builder.WriteString("tax_code_override=")
	builder.WriteString(fmt.Sprintf("%v", bii.TaxCodeOverride))
	builder.WriteByte(')')
	return builder.String()
}

// BillingInvoiceItems is a parsable slice of BillingInvoiceItem.
type BillingInvoiceItems []*BillingInvoiceItem
