// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	dbmeter "github.com/openmeterio/openmeter/openmeter/ent/db/meter"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// MeterUpdate is the builder for updating Meter entities.
type MeterUpdate struct {
	config
	hooks    []Hook
	mutation *MeterMutation
}

// Where appends a list predicates to the MeterUpdate builder.
func (mu *MeterUpdate) Where(ps ...predicate.Meter) *MeterUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetMetadata sets the "metadata" field.
func (mu *MeterUpdate) SetMetadata(m map[string]string) *MeterUpdate {
	mu.mutation.SetMetadata(m)
	return mu
}

// ClearMetadata clears the value of the "metadata" field.
func (mu *MeterUpdate) ClearMetadata() *MeterUpdate {
	mu.mutation.ClearMetadata()
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MeterUpdate) SetUpdatedAt(t time.Time) *MeterUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetDeletedAt sets the "deleted_at" field.
func (mu *MeterUpdate) SetDeletedAt(t time.Time) *MeterUpdate {
	mu.mutation.SetDeletedAt(t)
	return mu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mu *MeterUpdate) SetNillableDeletedAt(t *time.Time) *MeterUpdate {
	if t != nil {
		mu.SetDeletedAt(*t)
	}
	return mu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mu *MeterUpdate) ClearDeletedAt() *MeterUpdate {
	mu.mutation.ClearDeletedAt()
	return mu
}

// SetName sets the "name" field.
func (mu *MeterUpdate) SetName(s string) *MeterUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MeterUpdate) SetNillableName(s *string) *MeterUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// SetDescription sets the "description" field.
func (mu *MeterUpdate) SetDescription(s string) *MeterUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mu *MeterUpdate) SetNillableDescription(s *string) *MeterUpdate {
	if s != nil {
		mu.SetDescription(*s)
	}
	return mu
}

// ClearDescription clears the value of the "description" field.
func (mu *MeterUpdate) ClearDescription() *MeterUpdate {
	mu.mutation.ClearDescription()
	return mu
}

// SetValueProperty sets the "value_property" field.
func (mu *MeterUpdate) SetValueProperty(s string) *MeterUpdate {
	mu.mutation.SetValueProperty(s)
	return mu
}

// SetNillableValueProperty sets the "value_property" field if the given value is not nil.
func (mu *MeterUpdate) SetNillableValueProperty(s *string) *MeterUpdate {
	if s != nil {
		mu.SetValueProperty(*s)
	}
	return mu
}

// ClearValueProperty clears the value of the "value_property" field.
func (mu *MeterUpdate) ClearValueProperty() *MeterUpdate {
	mu.mutation.ClearValueProperty()
	return mu
}

// SetGroupBy sets the "group_by" field.
func (mu *MeterUpdate) SetGroupBy(m map[string]string) *MeterUpdate {
	mu.mutation.SetGroupBy(m)
	return mu
}

// ClearGroupBy clears the value of the "group_by" field.
func (mu *MeterUpdate) ClearGroupBy() *MeterUpdate {
	mu.mutation.ClearGroupBy()
	return mu
}

// SetEventFrom sets the "event_from" field.
func (mu *MeterUpdate) SetEventFrom(t time.Time) *MeterUpdate {
	mu.mutation.SetEventFrom(t)
	return mu
}

// SetNillableEventFrom sets the "event_from" field if the given value is not nil.
func (mu *MeterUpdate) SetNillableEventFrom(t *time.Time) *MeterUpdate {
	if t != nil {
		mu.SetEventFrom(*t)
	}
	return mu
}

// ClearEventFrom clears the value of the "event_from" field.
func (mu *MeterUpdate) ClearEventFrom() *MeterUpdate {
	mu.mutation.ClearEventFrom()
	return mu
}

// Mutation returns the MeterMutation object of the builder.
func (mu *MeterUpdate) Mutation() *MeterMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MeterUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MeterUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MeterUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MeterUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MeterUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := dbmeter.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

func (mu *MeterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(dbmeter.Table, dbmeter.Columns, sqlgraph.NewFieldSpec(dbmeter.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Metadata(); ok {
		_spec.SetField(dbmeter.FieldMetadata, field.TypeJSON, value)
	}
	if mu.mutation.MetadataCleared() {
		_spec.ClearField(dbmeter.FieldMetadata, field.TypeJSON)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(dbmeter.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.SetField(dbmeter.FieldDeletedAt, field.TypeTime, value)
	}
	if mu.mutation.DeletedAtCleared() {
		_spec.ClearField(dbmeter.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(dbmeter.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.SetField(dbmeter.FieldDescription, field.TypeString, value)
	}
	if mu.mutation.DescriptionCleared() {
		_spec.ClearField(dbmeter.FieldDescription, field.TypeString)
	}
	if value, ok := mu.mutation.ValueProperty(); ok {
		_spec.SetField(dbmeter.FieldValueProperty, field.TypeString, value)
	}
	if mu.mutation.ValuePropertyCleared() {
		_spec.ClearField(dbmeter.FieldValueProperty, field.TypeString)
	}
	if value, ok := mu.mutation.GroupBy(); ok {
		_spec.SetField(dbmeter.FieldGroupBy, field.TypeJSON, value)
	}
	if mu.mutation.GroupByCleared() {
		_spec.ClearField(dbmeter.FieldGroupBy, field.TypeJSON)
	}
	if value, ok := mu.mutation.EventFrom(); ok {
		_spec.SetField(dbmeter.FieldEventFrom, field.TypeTime, value)
	}
	if mu.mutation.EventFromCleared() {
		_spec.ClearField(dbmeter.FieldEventFrom, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbmeter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MeterUpdateOne is the builder for updating a single Meter entity.
type MeterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MeterMutation
}

// SetMetadata sets the "metadata" field.
func (muo *MeterUpdateOne) SetMetadata(m map[string]string) *MeterUpdateOne {
	muo.mutation.SetMetadata(m)
	return muo
}

// ClearMetadata clears the value of the "metadata" field.
func (muo *MeterUpdateOne) ClearMetadata() *MeterUpdateOne {
	muo.mutation.ClearMetadata()
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MeterUpdateOne) SetUpdatedAt(t time.Time) *MeterUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetDeletedAt sets the "deleted_at" field.
func (muo *MeterUpdateOne) SetDeletedAt(t time.Time) *MeterUpdateOne {
	muo.mutation.SetDeletedAt(t)
	return muo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muo *MeterUpdateOne) SetNillableDeletedAt(t *time.Time) *MeterUpdateOne {
	if t != nil {
		muo.SetDeletedAt(*t)
	}
	return muo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (muo *MeterUpdateOne) ClearDeletedAt() *MeterUpdateOne {
	muo.mutation.ClearDeletedAt()
	return muo
}

// SetName sets the "name" field.
func (muo *MeterUpdateOne) SetName(s string) *MeterUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MeterUpdateOne) SetNillableName(s *string) *MeterUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// SetDescription sets the "description" field.
func (muo *MeterUpdateOne) SetDescription(s string) *MeterUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (muo *MeterUpdateOne) SetNillableDescription(s *string) *MeterUpdateOne {
	if s != nil {
		muo.SetDescription(*s)
	}
	return muo
}

// ClearDescription clears the value of the "description" field.
func (muo *MeterUpdateOne) ClearDescription() *MeterUpdateOne {
	muo.mutation.ClearDescription()
	return muo
}

// SetValueProperty sets the "value_property" field.
func (muo *MeterUpdateOne) SetValueProperty(s string) *MeterUpdateOne {
	muo.mutation.SetValueProperty(s)
	return muo
}

// SetNillableValueProperty sets the "value_property" field if the given value is not nil.
func (muo *MeterUpdateOne) SetNillableValueProperty(s *string) *MeterUpdateOne {
	if s != nil {
		muo.SetValueProperty(*s)
	}
	return muo
}

// ClearValueProperty clears the value of the "value_property" field.
func (muo *MeterUpdateOne) ClearValueProperty() *MeterUpdateOne {
	muo.mutation.ClearValueProperty()
	return muo
}

// SetGroupBy sets the "group_by" field.
func (muo *MeterUpdateOne) SetGroupBy(m map[string]string) *MeterUpdateOne {
	muo.mutation.SetGroupBy(m)
	return muo
}

// ClearGroupBy clears the value of the "group_by" field.
func (muo *MeterUpdateOne) ClearGroupBy() *MeterUpdateOne {
	muo.mutation.ClearGroupBy()
	return muo
}

// SetEventFrom sets the "event_from" field.
func (muo *MeterUpdateOne) SetEventFrom(t time.Time) *MeterUpdateOne {
	muo.mutation.SetEventFrom(t)
	return muo
}

// SetNillableEventFrom sets the "event_from" field if the given value is not nil.
func (muo *MeterUpdateOne) SetNillableEventFrom(t *time.Time) *MeterUpdateOne {
	if t != nil {
		muo.SetEventFrom(*t)
	}
	return muo
}

// ClearEventFrom clears the value of the "event_from" field.
func (muo *MeterUpdateOne) ClearEventFrom() *MeterUpdateOne {
	muo.mutation.ClearEventFrom()
	return muo
}

// Mutation returns the MeterMutation object of the builder.
func (muo *MeterUpdateOne) Mutation() *MeterMutation {
	return muo.mutation
}

// Where appends a list predicates to the MeterUpdate builder.
func (muo *MeterUpdateOne) Where(ps ...predicate.Meter) *MeterUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MeterUpdateOne) Select(field string, fields ...string) *MeterUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Meter entity.
func (muo *MeterUpdateOne) Save(ctx context.Context) (*Meter, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MeterUpdateOne) SaveX(ctx context.Context) *Meter {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MeterUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MeterUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MeterUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := dbmeter.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

func (muo *MeterUpdateOne) sqlSave(ctx context.Context) (_node *Meter, err error) {
	_spec := sqlgraph.NewUpdateSpec(dbmeter.Table, dbmeter.Columns, sqlgraph.NewFieldSpec(dbmeter.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Meter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dbmeter.FieldID)
		for _, f := range fields {
			if !dbmeter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != dbmeter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Metadata(); ok {
		_spec.SetField(dbmeter.FieldMetadata, field.TypeJSON, value)
	}
	if muo.mutation.MetadataCleared() {
		_spec.ClearField(dbmeter.FieldMetadata, field.TypeJSON)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(dbmeter.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.SetField(dbmeter.FieldDeletedAt, field.TypeTime, value)
	}
	if muo.mutation.DeletedAtCleared() {
		_spec.ClearField(dbmeter.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(dbmeter.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.SetField(dbmeter.FieldDescription, field.TypeString, value)
	}
	if muo.mutation.DescriptionCleared() {
		_spec.ClearField(dbmeter.FieldDescription, field.TypeString)
	}
	if value, ok := muo.mutation.ValueProperty(); ok {
		_spec.SetField(dbmeter.FieldValueProperty, field.TypeString, value)
	}
	if muo.mutation.ValuePropertyCleared() {
		_spec.ClearField(dbmeter.FieldValueProperty, field.TypeString)
	}
	if value, ok := muo.mutation.GroupBy(); ok {
		_spec.SetField(dbmeter.FieldGroupBy, field.TypeJSON, value)
	}
	if muo.mutation.GroupByCleared() {
		_spec.ClearField(dbmeter.FieldGroupBy, field.TypeJSON)
	}
	if value, ok := muo.mutation.EventFrom(); ok {
		_spec.SetField(dbmeter.FieldEventFrom, field.TypeTime, value)
	}
	if muo.mutation.EventFromCleared() {
		_spec.ClearField(dbmeter.FieldEventFrom, field.TypeTime)
	}
	_node = &Meter{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbmeter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
