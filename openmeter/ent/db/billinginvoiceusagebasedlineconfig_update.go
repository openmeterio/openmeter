// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceusagebasedlineconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
)

// BillingInvoiceUsageBasedLineConfigUpdate is the builder for updating BillingInvoiceUsageBasedLineConfig entities.
type BillingInvoiceUsageBasedLineConfigUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceUsageBasedLineConfigMutation
}

// Where appends a list predicates to the BillingInvoiceUsageBasedLineConfigUpdate builder.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) Where(ps ...predicate.BillingInvoiceUsageBasedLineConfig) *BillingInvoiceUsageBasedLineConfigUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetPriceType sets the "price_type" field.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) SetPriceType(v productcatalog.PriceType) *BillingInvoiceUsageBasedLineConfigUpdate {
	_u.mutation.SetPriceType(v)
	return _u
}

// SetNillablePriceType sets the "price_type" field if the given value is not nil.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) SetNillablePriceType(v *productcatalog.PriceType) *BillingInvoiceUsageBasedLineConfigUpdate {
	if v != nil {
		_u.SetPriceType(*v)
	}
	return _u
}

// SetPrice sets the "price" field.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) SetPrice(v *productcatalog.Price) *BillingInvoiceUsageBasedLineConfigUpdate {
	_u.mutation.SetPrice(v)
	return _u
}

// SetPreLinePeriodQuantity sets the "pre_line_period_quantity" field.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) SetPreLinePeriodQuantity(v alpacadecimal.Decimal) *BillingInvoiceUsageBasedLineConfigUpdate {
	_u.mutation.SetPreLinePeriodQuantity(v)
	return _u
}

// SetNillablePreLinePeriodQuantity sets the "pre_line_period_quantity" field if the given value is not nil.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) SetNillablePreLinePeriodQuantity(v *alpacadecimal.Decimal) *BillingInvoiceUsageBasedLineConfigUpdate {
	if v != nil {
		_u.SetPreLinePeriodQuantity(*v)
	}
	return _u
}

// ClearPreLinePeriodQuantity clears the value of the "pre_line_period_quantity" field.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) ClearPreLinePeriodQuantity() *BillingInvoiceUsageBasedLineConfigUpdate {
	_u.mutation.ClearPreLinePeriodQuantity()
	return _u
}

// SetMeteredPreLinePeriodQuantity sets the "metered_pre_line_period_quantity" field.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) SetMeteredPreLinePeriodQuantity(v alpacadecimal.Decimal) *BillingInvoiceUsageBasedLineConfigUpdate {
	_u.mutation.SetMeteredPreLinePeriodQuantity(v)
	return _u
}

// SetNillableMeteredPreLinePeriodQuantity sets the "metered_pre_line_period_quantity" field if the given value is not nil.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) SetNillableMeteredPreLinePeriodQuantity(v *alpacadecimal.Decimal) *BillingInvoiceUsageBasedLineConfigUpdate {
	if v != nil {
		_u.SetMeteredPreLinePeriodQuantity(*v)
	}
	return _u
}

// ClearMeteredPreLinePeriodQuantity clears the value of the "metered_pre_line_period_quantity" field.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) ClearMeteredPreLinePeriodQuantity() *BillingInvoiceUsageBasedLineConfigUpdate {
	_u.mutation.ClearMeteredPreLinePeriodQuantity()
	return _u
}

// SetMeteredQuantity sets the "metered_quantity" field.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) SetMeteredQuantity(v alpacadecimal.Decimal) *BillingInvoiceUsageBasedLineConfigUpdate {
	_u.mutation.SetMeteredQuantity(v)
	return _u
}

// SetNillableMeteredQuantity sets the "metered_quantity" field if the given value is not nil.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) SetNillableMeteredQuantity(v *alpacadecimal.Decimal) *BillingInvoiceUsageBasedLineConfigUpdate {
	if v != nil {
		_u.SetMeteredQuantity(*v)
	}
	return _u
}

// ClearMeteredQuantity clears the value of the "metered_quantity" field.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) ClearMeteredQuantity() *BillingInvoiceUsageBasedLineConfigUpdate {
	_u.mutation.ClearMeteredQuantity()
	return _u
}

// Mutation returns the BillingInvoiceUsageBasedLineConfigMutation object of the builder.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) Mutation() *BillingInvoiceUsageBasedLineConfigMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BillingInvoiceUsageBasedLineConfigUpdate) check() error {
	if v, ok := _u.mutation.PriceType(); ok {
		if err := billinginvoiceusagebasedlineconfig.PriceTypeValidator(v); err != nil {
			return &ValidationError{Name: "price_type", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceUsageBasedLineConfig.price_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Price(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceUsageBasedLineConfig.price": %w`, err)}
		}
	}
	return nil
}

func (_u *BillingInvoiceUsageBasedLineConfigUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoiceusagebasedlineconfig.Table, billinginvoiceusagebasedlineconfig.Columns, sqlgraph.NewFieldSpec(billinginvoiceusagebasedlineconfig.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PriceType(); ok {
		_spec.SetField(billinginvoiceusagebasedlineconfig.FieldPriceType, field.TypeEnum, value)
	}
	if _u.mutation.FeatureKeyCleared() {
		_spec.ClearField(billinginvoiceusagebasedlineconfig.FieldFeatureKey, field.TypeString)
	}
	if value, ok := _u.mutation.Price(); ok {
		vv, err := billinginvoiceusagebasedlineconfig.ValueScanner.Price.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(billinginvoiceusagebasedlineconfig.FieldPrice, field.TypeString, vv)
	}
	if value, ok := _u.mutation.PreLinePeriodQuantity(); ok {
		_spec.SetField(billinginvoiceusagebasedlineconfig.FieldPreLinePeriodQuantity, field.TypeOther, value)
	}
	if _u.mutation.PreLinePeriodQuantityCleared() {
		_spec.ClearField(billinginvoiceusagebasedlineconfig.FieldPreLinePeriodQuantity, field.TypeOther)
	}
	if value, ok := _u.mutation.MeteredPreLinePeriodQuantity(); ok {
		_spec.SetField(billinginvoiceusagebasedlineconfig.FieldMeteredPreLinePeriodQuantity, field.TypeOther, value)
	}
	if _u.mutation.MeteredPreLinePeriodQuantityCleared() {
		_spec.ClearField(billinginvoiceusagebasedlineconfig.FieldMeteredPreLinePeriodQuantity, field.TypeOther)
	}
	if value, ok := _u.mutation.MeteredQuantity(); ok {
		_spec.SetField(billinginvoiceusagebasedlineconfig.FieldMeteredQuantity, field.TypeOther, value)
	}
	if _u.mutation.MeteredQuantityCleared() {
		_spec.ClearField(billinginvoiceusagebasedlineconfig.FieldMeteredQuantity, field.TypeOther)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoiceusagebasedlineconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BillingInvoiceUsageBasedLineConfigUpdateOne is the builder for updating a single BillingInvoiceUsageBasedLineConfig entity.
type BillingInvoiceUsageBasedLineConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceUsageBasedLineConfigMutation
}

// SetPriceType sets the "price_type" field.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) SetPriceType(v productcatalog.PriceType) *BillingInvoiceUsageBasedLineConfigUpdateOne {
	_u.mutation.SetPriceType(v)
	return _u
}

// SetNillablePriceType sets the "price_type" field if the given value is not nil.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) SetNillablePriceType(v *productcatalog.PriceType) *BillingInvoiceUsageBasedLineConfigUpdateOne {
	if v != nil {
		_u.SetPriceType(*v)
	}
	return _u
}

// SetPrice sets the "price" field.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) SetPrice(v *productcatalog.Price) *BillingInvoiceUsageBasedLineConfigUpdateOne {
	_u.mutation.SetPrice(v)
	return _u
}

// SetPreLinePeriodQuantity sets the "pre_line_period_quantity" field.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) SetPreLinePeriodQuantity(v alpacadecimal.Decimal) *BillingInvoiceUsageBasedLineConfigUpdateOne {
	_u.mutation.SetPreLinePeriodQuantity(v)
	return _u
}

// SetNillablePreLinePeriodQuantity sets the "pre_line_period_quantity" field if the given value is not nil.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) SetNillablePreLinePeriodQuantity(v *alpacadecimal.Decimal) *BillingInvoiceUsageBasedLineConfigUpdateOne {
	if v != nil {
		_u.SetPreLinePeriodQuantity(*v)
	}
	return _u
}

// ClearPreLinePeriodQuantity clears the value of the "pre_line_period_quantity" field.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) ClearPreLinePeriodQuantity() *BillingInvoiceUsageBasedLineConfigUpdateOne {
	_u.mutation.ClearPreLinePeriodQuantity()
	return _u
}

// SetMeteredPreLinePeriodQuantity sets the "metered_pre_line_period_quantity" field.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) SetMeteredPreLinePeriodQuantity(v alpacadecimal.Decimal) *BillingInvoiceUsageBasedLineConfigUpdateOne {
	_u.mutation.SetMeteredPreLinePeriodQuantity(v)
	return _u
}

// SetNillableMeteredPreLinePeriodQuantity sets the "metered_pre_line_period_quantity" field if the given value is not nil.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) SetNillableMeteredPreLinePeriodQuantity(v *alpacadecimal.Decimal) *BillingInvoiceUsageBasedLineConfigUpdateOne {
	if v != nil {
		_u.SetMeteredPreLinePeriodQuantity(*v)
	}
	return _u
}

// ClearMeteredPreLinePeriodQuantity clears the value of the "metered_pre_line_period_quantity" field.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) ClearMeteredPreLinePeriodQuantity() *BillingInvoiceUsageBasedLineConfigUpdateOne {
	_u.mutation.ClearMeteredPreLinePeriodQuantity()
	return _u
}

// SetMeteredQuantity sets the "metered_quantity" field.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) SetMeteredQuantity(v alpacadecimal.Decimal) *BillingInvoiceUsageBasedLineConfigUpdateOne {
	_u.mutation.SetMeteredQuantity(v)
	return _u
}

// SetNillableMeteredQuantity sets the "metered_quantity" field if the given value is not nil.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) SetNillableMeteredQuantity(v *alpacadecimal.Decimal) *BillingInvoiceUsageBasedLineConfigUpdateOne {
	if v != nil {
		_u.SetMeteredQuantity(*v)
	}
	return _u
}

// ClearMeteredQuantity clears the value of the "metered_quantity" field.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) ClearMeteredQuantity() *BillingInvoiceUsageBasedLineConfigUpdateOne {
	_u.mutation.ClearMeteredQuantity()
	return _u
}

// Mutation returns the BillingInvoiceUsageBasedLineConfigMutation object of the builder.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) Mutation() *BillingInvoiceUsageBasedLineConfigMutation {
	return _u.mutation
}

// Where appends a list predicates to the BillingInvoiceUsageBasedLineConfigUpdate builder.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) Where(ps ...predicate.BillingInvoiceUsageBasedLineConfig) *BillingInvoiceUsageBasedLineConfigUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) Select(field string, fields ...string) *BillingInvoiceUsageBasedLineConfigUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BillingInvoiceUsageBasedLineConfig entity.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) Save(ctx context.Context) (*BillingInvoiceUsageBasedLineConfig, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) SaveX(ctx context.Context) *BillingInvoiceUsageBasedLineConfig {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) check() error {
	if v, ok := _u.mutation.PriceType(); ok {
		if err := billinginvoiceusagebasedlineconfig.PriceTypeValidator(v); err != nil {
			return &ValidationError{Name: "price_type", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceUsageBasedLineConfig.price_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Price(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceUsageBasedLineConfig.price": %w`, err)}
		}
	}
	return nil
}

func (_u *BillingInvoiceUsageBasedLineConfigUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoiceUsageBasedLineConfig, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoiceusagebasedlineconfig.Table, billinginvoiceusagebasedlineconfig.Columns, sqlgraph.NewFieldSpec(billinginvoiceusagebasedlineconfig.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoiceUsageBasedLineConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoiceusagebasedlineconfig.FieldID)
		for _, f := range fields {
			if !billinginvoiceusagebasedlineconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoiceusagebasedlineconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PriceType(); ok {
		_spec.SetField(billinginvoiceusagebasedlineconfig.FieldPriceType, field.TypeEnum, value)
	}
	if _u.mutation.FeatureKeyCleared() {
		_spec.ClearField(billinginvoiceusagebasedlineconfig.FieldFeatureKey, field.TypeString)
	}
	if value, ok := _u.mutation.Price(); ok {
		vv, err := billinginvoiceusagebasedlineconfig.ValueScanner.Price.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(billinginvoiceusagebasedlineconfig.FieldPrice, field.TypeString, vv)
	}
	if value, ok := _u.mutation.PreLinePeriodQuantity(); ok {
		_spec.SetField(billinginvoiceusagebasedlineconfig.FieldPreLinePeriodQuantity, field.TypeOther, value)
	}
	if _u.mutation.PreLinePeriodQuantityCleared() {
		_spec.ClearField(billinginvoiceusagebasedlineconfig.FieldPreLinePeriodQuantity, field.TypeOther)
	}
	if value, ok := _u.mutation.MeteredPreLinePeriodQuantity(); ok {
		_spec.SetField(billinginvoiceusagebasedlineconfig.FieldMeteredPreLinePeriodQuantity, field.TypeOther, value)
	}
	if _u.mutation.MeteredPreLinePeriodQuantityCleared() {
		_spec.ClearField(billinginvoiceusagebasedlineconfig.FieldMeteredPreLinePeriodQuantity, field.TypeOther)
	}
	if value, ok := _u.mutation.MeteredQuantity(); ok {
		_spec.SetField(billinginvoiceusagebasedlineconfig.FieldMeteredQuantity, field.TypeOther, value)
	}
	if _u.mutation.MeteredQuantityCleared() {
		_spec.ClearField(billinginvoiceusagebasedlineconfig.FieldMeteredQuantity, field.TypeOther)
	}
	_node = &BillingInvoiceUsageBasedLineConfig{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoiceusagebasedlineconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
