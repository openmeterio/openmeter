// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddonratecarditemlink"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionitem"
)

// SubscriptionAddonRateCardItemLinkCreate is the builder for creating a SubscriptionAddonRateCardItemLink entity.
type SubscriptionAddonRateCardItemLinkCreate struct {
	config
	mutation *SubscriptionAddonRateCardItemLinkMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) SetCreatedAt(t time.Time) *SubscriptionAddonRateCardItemLinkCreate {
	sarcilc.mutation.SetCreatedAt(t)
	return sarcilc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) SetNillableCreatedAt(t *time.Time) *SubscriptionAddonRateCardItemLinkCreate {
	if t != nil {
		sarcilc.SetCreatedAt(*t)
	}
	return sarcilc
}

// SetUpdatedAt sets the "updated_at" field.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) SetUpdatedAt(t time.Time) *SubscriptionAddonRateCardItemLinkCreate {
	sarcilc.mutation.SetUpdatedAt(t)
	return sarcilc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) SetNillableUpdatedAt(t *time.Time) *SubscriptionAddonRateCardItemLinkCreate {
	if t != nil {
		sarcilc.SetUpdatedAt(*t)
	}
	return sarcilc
}

// SetDeletedAt sets the "deleted_at" field.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) SetDeletedAt(t time.Time) *SubscriptionAddonRateCardItemLinkCreate {
	sarcilc.mutation.SetDeletedAt(t)
	return sarcilc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) SetNillableDeletedAt(t *time.Time) *SubscriptionAddonRateCardItemLinkCreate {
	if t != nil {
		sarcilc.SetDeletedAt(*t)
	}
	return sarcilc
}

// SetSubscriptionAddonRateCardID sets the "subscription_addon_rate_card_id" field.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) SetSubscriptionAddonRateCardID(s string) *SubscriptionAddonRateCardItemLinkCreate {
	sarcilc.mutation.SetSubscriptionAddonRateCardID(s)
	return sarcilc
}

// SetSubscriptionItemID sets the "subscription_item_id" field.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) SetSubscriptionItemID(s string) *SubscriptionAddonRateCardItemLinkCreate {
	sarcilc.mutation.SetSubscriptionItemID(s)
	return sarcilc
}

// SetID sets the "id" field.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) SetID(s string) *SubscriptionAddonRateCardItemLinkCreate {
	sarcilc.mutation.SetID(s)
	return sarcilc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) SetNillableID(s *string) *SubscriptionAddonRateCardItemLinkCreate {
	if s != nil {
		sarcilc.SetID(*s)
	}
	return sarcilc
}

// SetSubscriptionAddonRateCard sets the "subscription_addon_rate_card" edge to the SubscriptionAddonRateCard entity.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) SetSubscriptionAddonRateCard(s *SubscriptionAddonRateCard) *SubscriptionAddonRateCardItemLinkCreate {
	return sarcilc.SetSubscriptionAddonRateCardID(s.ID)
}

// SetSubscriptionItem sets the "subscription_item" edge to the SubscriptionItem entity.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) SetSubscriptionItem(s *SubscriptionItem) *SubscriptionAddonRateCardItemLinkCreate {
	return sarcilc.SetSubscriptionItemID(s.ID)
}

// Mutation returns the SubscriptionAddonRateCardItemLinkMutation object of the builder.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) Mutation() *SubscriptionAddonRateCardItemLinkMutation {
	return sarcilc.mutation
}

// Save creates the SubscriptionAddonRateCardItemLink in the database.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) Save(ctx context.Context) (*SubscriptionAddonRateCardItemLink, error) {
	sarcilc.defaults()
	return withHooks(ctx, sarcilc.sqlSave, sarcilc.mutation, sarcilc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) SaveX(ctx context.Context) *SubscriptionAddonRateCardItemLink {
	v, err := sarcilc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) Exec(ctx context.Context) error {
	_, err := sarcilc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) ExecX(ctx context.Context) {
	if err := sarcilc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) defaults() {
	if _, ok := sarcilc.mutation.CreatedAt(); !ok {
		v := subscriptionaddonratecarditemlink.DefaultCreatedAt()
		sarcilc.mutation.SetCreatedAt(v)
	}
	if _, ok := sarcilc.mutation.UpdatedAt(); !ok {
		v := subscriptionaddonratecarditemlink.DefaultUpdatedAt()
		sarcilc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sarcilc.mutation.ID(); !ok {
		v := subscriptionaddonratecarditemlink.DefaultID()
		sarcilc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) check() error {
	if _, ok := sarcilc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "SubscriptionAddonRateCardItemLink.created_at"`)}
	}
	if _, ok := sarcilc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "SubscriptionAddonRateCardItemLink.updated_at"`)}
	}
	if _, ok := sarcilc.mutation.SubscriptionAddonRateCardID(); !ok {
		return &ValidationError{Name: "subscription_addon_rate_card_id", err: errors.New(`db: missing required field "SubscriptionAddonRateCardItemLink.subscription_addon_rate_card_id"`)}
	}
	if v, ok := sarcilc.mutation.SubscriptionAddonRateCardID(); ok {
		if err := subscriptionaddonratecarditemlink.SubscriptionAddonRateCardIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_addon_rate_card_id", err: fmt.Errorf(`db: validator failed for field "SubscriptionAddonRateCardItemLink.subscription_addon_rate_card_id": %w`, err)}
		}
	}
	if _, ok := sarcilc.mutation.SubscriptionItemID(); !ok {
		return &ValidationError{Name: "subscription_item_id", err: errors.New(`db: missing required field "SubscriptionAddonRateCardItemLink.subscription_item_id"`)}
	}
	if v, ok := sarcilc.mutation.SubscriptionItemID(); ok {
		if err := subscriptionaddonratecarditemlink.SubscriptionItemIDValidator(v); err != nil {
			return &ValidationError{Name: "subscription_item_id", err: fmt.Errorf(`db: validator failed for field "SubscriptionAddonRateCardItemLink.subscription_item_id": %w`, err)}
		}
	}
	if len(sarcilc.mutation.SubscriptionAddonRateCardIDs()) == 0 {
		return &ValidationError{Name: "subscription_addon_rate_card", err: errors.New(`db: missing required edge "SubscriptionAddonRateCardItemLink.subscription_addon_rate_card"`)}
	}
	if len(sarcilc.mutation.SubscriptionItemIDs()) == 0 {
		return &ValidationError{Name: "subscription_item", err: errors.New(`db: missing required edge "SubscriptionAddonRateCardItemLink.subscription_item"`)}
	}
	return nil
}

func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) sqlSave(ctx context.Context) (*SubscriptionAddonRateCardItemLink, error) {
	if err := sarcilc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sarcilc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sarcilc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubscriptionAddonRateCardItemLink.ID type: %T", _spec.ID.Value)
		}
	}
	sarcilc.mutation.id = &_node.ID
	sarcilc.mutation.done = true
	return _node, nil
}

func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) createSpec() (*SubscriptionAddonRateCardItemLink, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionAddonRateCardItemLink{config: sarcilc.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionaddonratecarditemlink.Table, sqlgraph.NewFieldSpec(subscriptionaddonratecarditemlink.FieldID, field.TypeString))
	)
	_spec.OnConflict = sarcilc.conflict
	if id, ok := sarcilc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sarcilc.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptionaddonratecarditemlink.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sarcilc.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionaddonratecarditemlink.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sarcilc.mutation.DeletedAt(); ok {
		_spec.SetField(subscriptionaddonratecarditemlink.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := sarcilc.mutation.SubscriptionAddonRateCardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionaddonratecarditemlink.SubscriptionAddonRateCardTable,
			Columns: []string{subscriptionaddonratecarditemlink.SubscriptionAddonRateCardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddonratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionAddonRateCardID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sarcilc.mutation.SubscriptionItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionaddonratecarditemlink.SubscriptionItemTable,
			Columns: []string{subscriptionaddonratecarditemlink.SubscriptionItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionItemID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionAddonRateCardItemLink.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionAddonRateCardItemLinkUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionAddonRateCardItemLinkUpsertOne {
	sarcilc.conflict = opts
	return &SubscriptionAddonRateCardItemLinkUpsertOne{
		create: sarcilc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionAddonRateCardItemLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sarcilc *SubscriptionAddonRateCardItemLinkCreate) OnConflictColumns(columns ...string) *SubscriptionAddonRateCardItemLinkUpsertOne {
	sarcilc.conflict = append(sarcilc.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionAddonRateCardItemLinkUpsertOne{
		create: sarcilc,
	}
}

type (
	// SubscriptionAddonRateCardItemLinkUpsertOne is the builder for "upsert"-ing
	//  one SubscriptionAddonRateCardItemLink node.
	SubscriptionAddonRateCardItemLinkUpsertOne struct {
		create *SubscriptionAddonRateCardItemLinkCreate
	}

	// SubscriptionAddonRateCardItemLinkUpsert is the "OnConflict" setter.
	SubscriptionAddonRateCardItemLinkUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionAddonRateCardItemLinkUpsert) SetUpdatedAt(v time.Time) *SubscriptionAddonRateCardItemLinkUpsert {
	u.Set(subscriptionaddonratecarditemlink.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionAddonRateCardItemLinkUpsert) UpdateUpdatedAt() *SubscriptionAddonRateCardItemLinkUpsert {
	u.SetExcluded(subscriptionaddonratecarditemlink.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionAddonRateCardItemLinkUpsert) SetDeletedAt(v time.Time) *SubscriptionAddonRateCardItemLinkUpsert {
	u.Set(subscriptionaddonratecarditemlink.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionAddonRateCardItemLinkUpsert) UpdateDeletedAt() *SubscriptionAddonRateCardItemLinkUpsert {
	u.SetExcluded(subscriptionaddonratecarditemlink.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionAddonRateCardItemLinkUpsert) ClearDeletedAt() *SubscriptionAddonRateCardItemLinkUpsert {
	u.SetNull(subscriptionaddonratecarditemlink.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SubscriptionAddonRateCardItemLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionaddonratecarditemlink.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionAddonRateCardItemLinkUpsertOne) UpdateNewValues() *SubscriptionAddonRateCardItemLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscriptionaddonratecarditemlink.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(subscriptionaddonratecarditemlink.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.SubscriptionAddonRateCardID(); exists {
			s.SetIgnore(subscriptionaddonratecarditemlink.FieldSubscriptionAddonRateCardID)
		}
		if _, exists := u.create.mutation.SubscriptionItemID(); exists {
			s.SetIgnore(subscriptionaddonratecarditemlink.FieldSubscriptionItemID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionAddonRateCardItemLink.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionAddonRateCardItemLinkUpsertOne) Ignore() *SubscriptionAddonRateCardItemLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionAddonRateCardItemLinkUpsertOne) DoNothing() *SubscriptionAddonRateCardItemLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionAddonRateCardItemLinkCreate.OnConflict
// documentation for more info.
func (u *SubscriptionAddonRateCardItemLinkUpsertOne) Update(set func(*SubscriptionAddonRateCardItemLinkUpsert)) *SubscriptionAddonRateCardItemLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionAddonRateCardItemLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionAddonRateCardItemLinkUpsertOne) SetUpdatedAt(v time.Time) *SubscriptionAddonRateCardItemLinkUpsertOne {
	return u.Update(func(s *SubscriptionAddonRateCardItemLinkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionAddonRateCardItemLinkUpsertOne) UpdateUpdatedAt() *SubscriptionAddonRateCardItemLinkUpsertOne {
	return u.Update(func(s *SubscriptionAddonRateCardItemLinkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionAddonRateCardItemLinkUpsertOne) SetDeletedAt(v time.Time) *SubscriptionAddonRateCardItemLinkUpsertOne {
	return u.Update(func(s *SubscriptionAddonRateCardItemLinkUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionAddonRateCardItemLinkUpsertOne) UpdateDeletedAt() *SubscriptionAddonRateCardItemLinkUpsertOne {
	return u.Update(func(s *SubscriptionAddonRateCardItemLinkUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionAddonRateCardItemLinkUpsertOne) ClearDeletedAt() *SubscriptionAddonRateCardItemLinkUpsertOne {
	return u.Update(func(s *SubscriptionAddonRateCardItemLinkUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SubscriptionAddonRateCardItemLinkUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionAddonRateCardItemLinkCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionAddonRateCardItemLinkUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionAddonRateCardItemLinkUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: SubscriptionAddonRateCardItemLinkUpsertOne.ID is not supported by MySQL driver. Use SubscriptionAddonRateCardItemLinkUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionAddonRateCardItemLinkUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionAddonRateCardItemLinkCreateBulk is the builder for creating many SubscriptionAddonRateCardItemLink entities in bulk.
type SubscriptionAddonRateCardItemLinkCreateBulk struct {
	config
	err      error
	builders []*SubscriptionAddonRateCardItemLinkCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscriptionAddonRateCardItemLink entities in the database.
func (sarcilcb *SubscriptionAddonRateCardItemLinkCreateBulk) Save(ctx context.Context) ([]*SubscriptionAddonRateCardItemLink, error) {
	if sarcilcb.err != nil {
		return nil, sarcilcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sarcilcb.builders))
	nodes := make([]*SubscriptionAddonRateCardItemLink, len(sarcilcb.builders))
	mutators := make([]Mutator, len(sarcilcb.builders))
	for i := range sarcilcb.builders {
		func(i int, root context.Context) {
			builder := sarcilcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionAddonRateCardItemLinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sarcilcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sarcilcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sarcilcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sarcilcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sarcilcb *SubscriptionAddonRateCardItemLinkCreateBulk) SaveX(ctx context.Context) []*SubscriptionAddonRateCardItemLink {
	v, err := sarcilcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sarcilcb *SubscriptionAddonRateCardItemLinkCreateBulk) Exec(ctx context.Context) error {
	_, err := sarcilcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sarcilcb *SubscriptionAddonRateCardItemLinkCreateBulk) ExecX(ctx context.Context) {
	if err := sarcilcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscriptionAddonRateCardItemLink.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionAddonRateCardItemLinkUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sarcilcb *SubscriptionAddonRateCardItemLinkCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionAddonRateCardItemLinkUpsertBulk {
	sarcilcb.conflict = opts
	return &SubscriptionAddonRateCardItemLinkUpsertBulk{
		create: sarcilcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscriptionAddonRateCardItemLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sarcilcb *SubscriptionAddonRateCardItemLinkCreateBulk) OnConflictColumns(columns ...string) *SubscriptionAddonRateCardItemLinkUpsertBulk {
	sarcilcb.conflict = append(sarcilcb.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionAddonRateCardItemLinkUpsertBulk{
		create: sarcilcb,
	}
}

// SubscriptionAddonRateCardItemLinkUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscriptionAddonRateCardItemLink nodes.
type SubscriptionAddonRateCardItemLinkUpsertBulk struct {
	create *SubscriptionAddonRateCardItemLinkCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscriptionAddonRateCardItemLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscriptionaddonratecarditemlink.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionAddonRateCardItemLinkUpsertBulk) UpdateNewValues() *SubscriptionAddonRateCardItemLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscriptionaddonratecarditemlink.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(subscriptionaddonratecarditemlink.FieldCreatedAt)
			}
			if _, exists := b.mutation.SubscriptionAddonRateCardID(); exists {
				s.SetIgnore(subscriptionaddonratecarditemlink.FieldSubscriptionAddonRateCardID)
			}
			if _, exists := b.mutation.SubscriptionItemID(); exists {
				s.SetIgnore(subscriptionaddonratecarditemlink.FieldSubscriptionItemID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscriptionAddonRateCardItemLink.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionAddonRateCardItemLinkUpsertBulk) Ignore() *SubscriptionAddonRateCardItemLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionAddonRateCardItemLinkUpsertBulk) DoNothing() *SubscriptionAddonRateCardItemLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionAddonRateCardItemLinkCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionAddonRateCardItemLinkUpsertBulk) Update(set func(*SubscriptionAddonRateCardItemLinkUpsert)) *SubscriptionAddonRateCardItemLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionAddonRateCardItemLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscriptionAddonRateCardItemLinkUpsertBulk) SetUpdatedAt(v time.Time) *SubscriptionAddonRateCardItemLinkUpsertBulk {
	return u.Update(func(s *SubscriptionAddonRateCardItemLinkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscriptionAddonRateCardItemLinkUpsertBulk) UpdateUpdatedAt() *SubscriptionAddonRateCardItemLinkUpsertBulk {
	return u.Update(func(s *SubscriptionAddonRateCardItemLinkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscriptionAddonRateCardItemLinkUpsertBulk) SetDeletedAt(v time.Time) *SubscriptionAddonRateCardItemLinkUpsertBulk {
	return u.Update(func(s *SubscriptionAddonRateCardItemLinkUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscriptionAddonRateCardItemLinkUpsertBulk) UpdateDeletedAt() *SubscriptionAddonRateCardItemLinkUpsertBulk {
	return u.Update(func(s *SubscriptionAddonRateCardItemLinkUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscriptionAddonRateCardItemLinkUpsertBulk) ClearDeletedAt() *SubscriptionAddonRateCardItemLinkUpsertBulk {
	return u.Update(func(s *SubscriptionAddonRateCardItemLinkUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SubscriptionAddonRateCardItemLinkUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the SubscriptionAddonRateCardItemLinkCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SubscriptionAddonRateCardItemLinkCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionAddonRateCardItemLinkUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
