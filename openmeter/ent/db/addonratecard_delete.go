// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// AddonRateCardDelete is the builder for deleting a AddonRateCard entity.
type AddonRateCardDelete struct {
	config
	hooks    []Hook
	mutation *AddonRateCardMutation
}

// Where appends a list predicates to the AddonRateCardDelete builder.
func (arcd *AddonRateCardDelete) Where(ps ...predicate.AddonRateCard) *AddonRateCardDelete {
	arcd.mutation.Where(ps...)
	return arcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (arcd *AddonRateCardDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, arcd.sqlExec, arcd.mutation, arcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (arcd *AddonRateCardDelete) ExecX(ctx context.Context) int {
	n, err := arcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (arcd *AddonRateCardDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(addonratecard.Table, sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString))
	if ps := arcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, arcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	arcd.mutation.done = true
	return affected, err
}

// AddonRateCardDeleteOne is the builder for deleting a single AddonRateCard entity.
type AddonRateCardDeleteOne struct {
	arcd *AddonRateCardDelete
}

// Where appends a list predicates to the AddonRateCardDelete builder.
func (arcdo *AddonRateCardDeleteOne) Where(ps ...predicate.AddonRateCard) *AddonRateCardDeleteOne {
	arcdo.arcd.mutation.Where(ps...)
	return arcdo
}

// Exec executes the deletion query.
func (arcdo *AddonRateCardDeleteOne) Exec(ctx context.Context) error {
	n, err := arcdo.arcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{addonratecard.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (arcdo *AddonRateCardDeleteOne) ExecX(ctx context.Context) {
	if err := arcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
