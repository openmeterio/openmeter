// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alpacahq/alpacadecimal"
	"github.com/openmeterio/openmeter/openmeter/billing"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicedetailedline"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicedetailedlineamountdiscount"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceline"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/currencyx"
)

// BillingInvoiceDetailedLineCreate is the builder for creating a BillingInvoiceDetailedLine entity.
type BillingInvoiceDetailedLineCreate struct {
	config
	mutation *BillingInvoiceDetailedLineMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAnnotations sets the "annotations" field.
func (_c *BillingInvoiceDetailedLineCreate) SetAnnotations(v map[string]interface{}) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetAnnotations(v)
	return _c
}

// SetNamespace sets the "namespace" field.
func (_c *BillingInvoiceDetailedLineCreate) SetNamespace(v string) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetNamespace(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *BillingInvoiceDetailedLineCreate) SetMetadata(v map[string]string) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BillingInvoiceDetailedLineCreate) SetCreatedAt(v time.Time) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BillingInvoiceDetailedLineCreate) SetNillableCreatedAt(v *time.Time) *BillingInvoiceDetailedLineCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BillingInvoiceDetailedLineCreate) SetUpdatedAt(v time.Time) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BillingInvoiceDetailedLineCreate) SetNillableUpdatedAt(v *time.Time) *BillingInvoiceDetailedLineCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *BillingInvoiceDetailedLineCreate) SetDeletedAt(v time.Time) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *BillingInvoiceDetailedLineCreate) SetNillableDeletedAt(v *time.Time) *BillingInvoiceDetailedLineCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *BillingInvoiceDetailedLineCreate) SetName(v string) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *BillingInvoiceDetailedLineCreate) SetDescription(v string) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *BillingInvoiceDetailedLineCreate) SetNillableDescription(v *string) *BillingInvoiceDetailedLineCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetCurrency sets the "currency" field.
func (_c *BillingInvoiceDetailedLineCreate) SetCurrency(v currencyx.Code) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetCurrency(v)
	return _c
}

// SetTaxConfig sets the "tax_config" field.
func (_c *BillingInvoiceDetailedLineCreate) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetTaxConfig(v)
	return _c
}

// SetNillableTaxConfig sets the "tax_config" field if the given value is not nil.
func (_c *BillingInvoiceDetailedLineCreate) SetNillableTaxConfig(v *productcatalog.TaxConfig) *BillingInvoiceDetailedLineCreate {
	if v != nil {
		_c.SetTaxConfig(*v)
	}
	return _c
}

// SetAmount sets the "amount" field.
func (_c *BillingInvoiceDetailedLineCreate) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetAmount(v)
	return _c
}

// SetTaxesTotal sets the "taxes_total" field.
func (_c *BillingInvoiceDetailedLineCreate) SetTaxesTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetTaxesTotal(v)
	return _c
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (_c *BillingInvoiceDetailedLineCreate) SetTaxesInclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetTaxesInclusiveTotal(v)
	return _c
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (_c *BillingInvoiceDetailedLineCreate) SetTaxesExclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetTaxesExclusiveTotal(v)
	return _c
}

// SetChargesTotal sets the "charges_total" field.
func (_c *BillingInvoiceDetailedLineCreate) SetChargesTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetChargesTotal(v)
	return _c
}

// SetDiscountsTotal sets the "discounts_total" field.
func (_c *BillingInvoiceDetailedLineCreate) SetDiscountsTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetDiscountsTotal(v)
	return _c
}

// SetTotal sets the "total" field.
func (_c *BillingInvoiceDetailedLineCreate) SetTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetTotal(v)
	return _c
}

// SetServicePeriodFrom sets the "service_period_from" field.
func (_c *BillingInvoiceDetailedLineCreate) SetServicePeriodFrom(v time.Time) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetServicePeriodFrom(v)
	return _c
}

// SetServicePeriodTo sets the "service_period_to" field.
func (_c *BillingInvoiceDetailedLineCreate) SetServicePeriodTo(v time.Time) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetServicePeriodTo(v)
	return _c
}

// SetInvoiceID sets the "invoice_id" field.
func (_c *BillingInvoiceDetailedLineCreate) SetInvoiceID(v string) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetInvoiceID(v)
	return _c
}

// SetParentLineID sets the "parent_line_id" field.
func (_c *BillingInvoiceDetailedLineCreate) SetParentLineID(v string) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetParentLineID(v)
	return _c
}

// SetQuantity sets the "quantity" field.
func (_c *BillingInvoiceDetailedLineCreate) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetQuantity(v)
	return _c
}

// SetPerUnitAmount sets the "per_unit_amount" field.
func (_c *BillingInvoiceDetailedLineCreate) SetPerUnitAmount(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetPerUnitAmount(v)
	return _c
}

// SetCategory sets the "category" field.
func (_c *BillingInvoiceDetailedLineCreate) SetCategory(v billing.DetailedLineCategory) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetCategory(v)
	return _c
}

// SetPaymentTerm sets the "payment_term" field.
func (_c *BillingInvoiceDetailedLineCreate) SetPaymentTerm(v productcatalog.PaymentTermType) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetPaymentTerm(v)
	return _c
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (_c *BillingInvoiceDetailedLineCreate) SetInvoicingAppExternalID(v string) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetInvoicingAppExternalID(v)
	return _c
}

// SetNillableInvoicingAppExternalID sets the "invoicing_app_external_id" field if the given value is not nil.
func (_c *BillingInvoiceDetailedLineCreate) SetNillableInvoicingAppExternalID(v *string) *BillingInvoiceDetailedLineCreate {
	if v != nil {
		_c.SetInvoicingAppExternalID(*v)
	}
	return _c
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (_c *BillingInvoiceDetailedLineCreate) SetChildUniqueReferenceID(v string) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetChildUniqueReferenceID(v)
	return _c
}

// SetNillableChildUniqueReferenceID sets the "child_unique_reference_id" field if the given value is not nil.
func (_c *BillingInvoiceDetailedLineCreate) SetNillableChildUniqueReferenceID(v *string) *BillingInvoiceDetailedLineCreate {
	if v != nil {
		_c.SetChildUniqueReferenceID(*v)
	}
	return _c
}

// SetIndex sets the "index" field.
func (_c *BillingInvoiceDetailedLineCreate) SetIndex(v int) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetIndex(v)
	return _c
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (_c *BillingInvoiceDetailedLineCreate) SetNillableIndex(v *int) *BillingInvoiceDetailedLineCreate {
	if v != nil {
		_c.SetIndex(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *BillingInvoiceDetailedLineCreate) SetID(v string) *BillingInvoiceDetailedLineCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *BillingInvoiceDetailedLineCreate) SetNillableID(v *string) *BillingInvoiceDetailedLineCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetInvoice sets the "invoice" edge to the BillingInvoice entity.
func (_c *BillingInvoiceDetailedLineCreate) SetInvoice(v *BillingInvoice) *BillingInvoiceDetailedLineCreate {
	return _c.SetInvoiceID(v.ID)
}

// SetParentLine sets the "parent_line" edge to the BillingInvoiceLine entity.
func (_c *BillingInvoiceDetailedLineCreate) SetParentLine(v *BillingInvoiceLine) *BillingInvoiceDetailedLineCreate {
	return _c.SetParentLineID(v.ID)
}

// AddAmountDiscountIDs adds the "amount_discounts" edge to the BillingInvoiceDetailedLineAmountDiscount entity by IDs.
func (_c *BillingInvoiceDetailedLineCreate) AddAmountDiscountIDs(ids ...string) *BillingInvoiceDetailedLineCreate {
	_c.mutation.AddAmountDiscountIDs(ids...)
	return _c
}

// AddAmountDiscounts adds the "amount_discounts" edges to the BillingInvoiceDetailedLineAmountDiscount entity.
func (_c *BillingInvoiceDetailedLineCreate) AddAmountDiscounts(v ...*BillingInvoiceDetailedLineAmountDiscount) *BillingInvoiceDetailedLineCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAmountDiscountIDs(ids...)
}

// Mutation returns the BillingInvoiceDetailedLineMutation object of the builder.
func (_c *BillingInvoiceDetailedLineCreate) Mutation() *BillingInvoiceDetailedLineMutation {
	return _c.mutation
}

// Save creates the BillingInvoiceDetailedLine in the database.
func (_c *BillingInvoiceDetailedLineCreate) Save(ctx context.Context) (*BillingInvoiceDetailedLine, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BillingInvoiceDetailedLineCreate) SaveX(ctx context.Context) *BillingInvoiceDetailedLine {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BillingInvoiceDetailedLineCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BillingInvoiceDetailedLineCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BillingInvoiceDetailedLineCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := billinginvoicedetailedline.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := billinginvoicedetailedline.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := billinginvoicedetailedline.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BillingInvoiceDetailedLineCreate) check() error {
	if _, ok := _c.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.namespace"`)}
	}
	if v, ok := _c.mutation.Namespace(); ok {
		if err := billinginvoicedetailedline.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceDetailedLine.namespace": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.updated_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.name"`)}
	}
	if _, ok := _c.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.currency"`)}
	}
	if v, ok := _c.mutation.Currency(); ok {
		if err := billinginvoicedetailedline.CurrencyValidator(string(v)); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceDetailedLine.currency": %w`, err)}
		}
	}
	if v, ok := _c.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceDetailedLine.tax_config": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.amount"`)}
	}
	if _, ok := _c.mutation.TaxesTotal(); !ok {
		return &ValidationError{Name: "taxes_total", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.taxes_total"`)}
	}
	if _, ok := _c.mutation.TaxesInclusiveTotal(); !ok {
		return &ValidationError{Name: "taxes_inclusive_total", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.taxes_inclusive_total"`)}
	}
	if _, ok := _c.mutation.TaxesExclusiveTotal(); !ok {
		return &ValidationError{Name: "taxes_exclusive_total", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.taxes_exclusive_total"`)}
	}
	if _, ok := _c.mutation.ChargesTotal(); !ok {
		return &ValidationError{Name: "charges_total", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.charges_total"`)}
	}
	if _, ok := _c.mutation.DiscountsTotal(); !ok {
		return &ValidationError{Name: "discounts_total", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.discounts_total"`)}
	}
	if _, ok := _c.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.total"`)}
	}
	if _, ok := _c.mutation.ServicePeriodFrom(); !ok {
		return &ValidationError{Name: "service_period_from", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.service_period_from"`)}
	}
	if _, ok := _c.mutation.ServicePeriodTo(); !ok {
		return &ValidationError{Name: "service_period_to", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.service_period_to"`)}
	}
	if _, ok := _c.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice_id", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.invoice_id"`)}
	}
	if _, ok := _c.mutation.ParentLineID(); !ok {
		return &ValidationError{Name: "parent_line_id", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.parent_line_id"`)}
	}
	if _, ok := _c.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.quantity"`)}
	}
	if _, ok := _c.mutation.PerUnitAmount(); !ok {
		return &ValidationError{Name: "per_unit_amount", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.per_unit_amount"`)}
	}
	if _, ok := _c.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.category"`)}
	}
	if v, ok := _c.mutation.Category(); ok {
		if err := billinginvoicedetailedline.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceDetailedLine.category": %w`, err)}
		}
	}
	if _, ok := _c.mutation.PaymentTerm(); !ok {
		return &ValidationError{Name: "payment_term", err: errors.New(`db: missing required field "BillingInvoiceDetailedLine.payment_term"`)}
	}
	if v, ok := _c.mutation.PaymentTerm(); ok {
		if err := billinginvoicedetailedline.PaymentTermValidator(v); err != nil {
			return &ValidationError{Name: "payment_term", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceDetailedLine.payment_term": %w`, err)}
		}
	}
	if len(_c.mutation.InvoiceIDs()) == 0 {
		return &ValidationError{Name: "invoice", err: errors.New(`db: missing required edge "BillingInvoiceDetailedLine.invoice"`)}
	}
	if len(_c.mutation.ParentLineIDs()) == 0 {
		return &ValidationError{Name: "parent_line", err: errors.New(`db: missing required edge "BillingInvoiceDetailedLine.parent_line"`)}
	}
	return nil
}

func (_c *BillingInvoiceDetailedLineCreate) sqlSave(ctx context.Context) (*BillingInvoiceDetailedLine, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingInvoiceDetailedLine.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BillingInvoiceDetailedLineCreate) createSpec() (*BillingInvoiceDetailedLine, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingInvoiceDetailedLine{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(billinginvoicedetailedline.Table, sqlgraph.NewFieldSpec(billinginvoicedetailedline.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Annotations(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldAnnotations, field.TypeJSON, value)
		_node.Annotations = value
	}
	if value, ok := _c.mutation.Namespace(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.Currency(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := _c.mutation.TaxConfig(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldTaxConfig, field.TypeJSON, value)
		_node.TaxConfig = value
	}
	if value, ok := _c.mutation.Amount(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldAmount, field.TypeOther, value)
		_node.Amount = value
	}
	if value, ok := _c.mutation.TaxesTotal(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldTaxesTotal, field.TypeOther, value)
		_node.TaxesTotal = value
	}
	if value, ok := _c.mutation.TaxesInclusiveTotal(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldTaxesInclusiveTotal, field.TypeOther, value)
		_node.TaxesInclusiveTotal = value
	}
	if value, ok := _c.mutation.TaxesExclusiveTotal(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldTaxesExclusiveTotal, field.TypeOther, value)
		_node.TaxesExclusiveTotal = value
	}
	if value, ok := _c.mutation.ChargesTotal(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldChargesTotal, field.TypeOther, value)
		_node.ChargesTotal = value
	}
	if value, ok := _c.mutation.DiscountsTotal(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldDiscountsTotal, field.TypeOther, value)
		_node.DiscountsTotal = value
	}
	if value, ok := _c.mutation.Total(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldTotal, field.TypeOther, value)
		_node.Total = value
	}
	if value, ok := _c.mutation.ServicePeriodFrom(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldServicePeriodFrom, field.TypeTime, value)
		_node.ServicePeriodFrom = value
	}
	if value, ok := _c.mutation.ServicePeriodTo(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldServicePeriodTo, field.TypeTime, value)
		_node.ServicePeriodTo = value
	}
	if value, ok := _c.mutation.Quantity(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldQuantity, field.TypeOther, value)
		_node.Quantity = value
	}
	if value, ok := _c.mutation.PerUnitAmount(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldPerUnitAmount, field.TypeOther, value)
		_node.PerUnitAmount = value
	}
	if value, ok := _c.mutation.Category(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if value, ok := _c.mutation.PaymentTerm(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldPaymentTerm, field.TypeEnum, value)
		_node.PaymentTerm = value
	}
	if value, ok := _c.mutation.InvoicingAppExternalID(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldInvoicingAppExternalID, field.TypeString, value)
		_node.InvoicingAppExternalID = &value
	}
	if value, ok := _c.mutation.ChildUniqueReferenceID(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldChildUniqueReferenceID, field.TypeString, value)
		_node.ChildUniqueReferenceID = &value
	}
	if value, ok := _c.mutation.Index(); ok {
		_spec.SetField(billinginvoicedetailedline.FieldIndex, field.TypeInt, value)
		_node.Index = &value
	}
	if nodes := _c.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicedetailedline.InvoiceTable,
			Columns: []string{billinginvoicedetailedline.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InvoiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ParentLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billinginvoicedetailedline.ParentLineTable,
			Columns: []string{billinginvoicedetailedline.ParentLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoiceline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentLineID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AmountDiscountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   billinginvoicedetailedline.AmountDiscountsTable,
			Columns: []string{billinginvoicedetailedline.AmountDiscountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billinginvoicedetailedlineamountdiscount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceDetailedLine.Create().
//		SetAnnotations(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceDetailedLineUpsert) {
//			SetAnnotations(v+v).
//		}).
//		Exec(ctx)
func (_c *BillingInvoiceDetailedLineCreate) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceDetailedLineUpsertOne {
	_c.conflict = opts
	return &BillingInvoiceDetailedLineUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceDetailedLine.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BillingInvoiceDetailedLineCreate) OnConflictColumns(columns ...string) *BillingInvoiceDetailedLineUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceDetailedLineUpsertOne{
		create: _c,
	}
}

type (
	// BillingInvoiceDetailedLineUpsertOne is the builder for "upsert"-ing
	//  one BillingInvoiceDetailedLine node.
	BillingInvoiceDetailedLineUpsertOne struct {
		create *BillingInvoiceDetailedLineCreate
	}

	// BillingInvoiceDetailedLineUpsert is the "OnConflict" setter.
	BillingInvoiceDetailedLineUpsert struct {
		*sql.UpdateSet
	}
)

// SetAnnotations sets the "annotations" field.
func (u *BillingInvoiceDetailedLineUpsert) SetAnnotations(v map[string]interface{}) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateAnnotations() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldAnnotations)
	return u
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *BillingInvoiceDetailedLineUpsert) ClearAnnotations() *BillingInvoiceDetailedLineUpsert {
	u.SetNull(billinginvoicedetailedline.FieldAnnotations)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceDetailedLineUpsert) SetMetadata(v map[string]string) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateMetadata() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceDetailedLineUpsert) ClearMetadata() *BillingInvoiceDetailedLineUpsert {
	u.SetNull(billinginvoicedetailedline.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceDetailedLineUpsert) SetUpdatedAt(v time.Time) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateUpdatedAt() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceDetailedLineUpsert) SetDeletedAt(v time.Time) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateDeletedAt() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceDetailedLineUpsert) ClearDeletedAt() *BillingInvoiceDetailedLineUpsert {
	u.SetNull(billinginvoicedetailedline.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *BillingInvoiceDetailedLineUpsert) SetName(v string) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateName() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceDetailedLineUpsert) SetDescription(v string) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateDescription() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceDetailedLineUpsert) ClearDescription() *BillingInvoiceDetailedLineUpsert {
	u.SetNull(billinginvoicedetailedline.FieldDescription)
	return u
}

// SetTaxConfig sets the "tax_config" field.
func (u *BillingInvoiceDetailedLineUpsert) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldTaxConfig, v)
	return u
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateTaxConfig() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldTaxConfig)
	return u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *BillingInvoiceDetailedLineUpsert) ClearTaxConfig() *BillingInvoiceDetailedLineUpsert {
	u.SetNull(billinginvoicedetailedline.FieldTaxConfig)
	return u
}

// SetAmount sets the "amount" field.
func (u *BillingInvoiceDetailedLineUpsert) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateAmount() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldAmount)
	return u
}

// SetTaxesTotal sets the "taxes_total" field.
func (u *BillingInvoiceDetailedLineUpsert) SetTaxesTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldTaxesTotal, v)
	return u
}

// UpdateTaxesTotal sets the "taxes_total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateTaxesTotal() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldTaxesTotal)
	return u
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (u *BillingInvoiceDetailedLineUpsert) SetTaxesInclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldTaxesInclusiveTotal, v)
	return u
}

// UpdateTaxesInclusiveTotal sets the "taxes_inclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateTaxesInclusiveTotal() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldTaxesInclusiveTotal)
	return u
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (u *BillingInvoiceDetailedLineUpsert) SetTaxesExclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldTaxesExclusiveTotal, v)
	return u
}

// UpdateTaxesExclusiveTotal sets the "taxes_exclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateTaxesExclusiveTotal() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldTaxesExclusiveTotal)
	return u
}

// SetChargesTotal sets the "charges_total" field.
func (u *BillingInvoiceDetailedLineUpsert) SetChargesTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldChargesTotal, v)
	return u
}

// UpdateChargesTotal sets the "charges_total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateChargesTotal() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldChargesTotal)
	return u
}

// SetDiscountsTotal sets the "discounts_total" field.
func (u *BillingInvoiceDetailedLineUpsert) SetDiscountsTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldDiscountsTotal, v)
	return u
}

// UpdateDiscountsTotal sets the "discounts_total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateDiscountsTotal() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldDiscountsTotal)
	return u
}

// SetTotal sets the "total" field.
func (u *BillingInvoiceDetailedLineUpsert) SetTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldTotal, v)
	return u
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateTotal() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldTotal)
	return u
}

// SetServicePeriodFrom sets the "service_period_from" field.
func (u *BillingInvoiceDetailedLineUpsert) SetServicePeriodFrom(v time.Time) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldServicePeriodFrom, v)
	return u
}

// UpdateServicePeriodFrom sets the "service_period_from" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateServicePeriodFrom() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldServicePeriodFrom)
	return u
}

// SetServicePeriodTo sets the "service_period_to" field.
func (u *BillingInvoiceDetailedLineUpsert) SetServicePeriodTo(v time.Time) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldServicePeriodTo, v)
	return u
}

// UpdateServicePeriodTo sets the "service_period_to" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateServicePeriodTo() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldServicePeriodTo)
	return u
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceDetailedLineUpsert) SetInvoiceID(v string) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldInvoiceID, v)
	return u
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateInvoiceID() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldInvoiceID)
	return u
}

// SetParentLineID sets the "parent_line_id" field.
func (u *BillingInvoiceDetailedLineUpsert) SetParentLineID(v string) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldParentLineID, v)
	return u
}

// UpdateParentLineID sets the "parent_line_id" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateParentLineID() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldParentLineID)
	return u
}

// SetQuantity sets the "quantity" field.
func (u *BillingInvoiceDetailedLineUpsert) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldQuantity, v)
	return u
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateQuantity() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldQuantity)
	return u
}

// SetPerUnitAmount sets the "per_unit_amount" field.
func (u *BillingInvoiceDetailedLineUpsert) SetPerUnitAmount(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldPerUnitAmount, v)
	return u
}

// UpdatePerUnitAmount sets the "per_unit_amount" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdatePerUnitAmount() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldPerUnitAmount)
	return u
}

// SetCategory sets the "category" field.
func (u *BillingInvoiceDetailedLineUpsert) SetCategory(v billing.DetailedLineCategory) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateCategory() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldCategory)
	return u
}

// SetPaymentTerm sets the "payment_term" field.
func (u *BillingInvoiceDetailedLineUpsert) SetPaymentTerm(v productcatalog.PaymentTermType) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldPaymentTerm, v)
	return u
}

// UpdatePaymentTerm sets the "payment_term" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdatePaymentTerm() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldPaymentTerm)
	return u
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (u *BillingInvoiceDetailedLineUpsert) SetInvoicingAppExternalID(v string) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldInvoicingAppExternalID, v)
	return u
}

// UpdateInvoicingAppExternalID sets the "invoicing_app_external_id" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateInvoicingAppExternalID() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldInvoicingAppExternalID)
	return u
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (u *BillingInvoiceDetailedLineUpsert) ClearInvoicingAppExternalID() *BillingInvoiceDetailedLineUpsert {
	u.SetNull(billinginvoicedetailedline.FieldInvoicingAppExternalID)
	return u
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (u *BillingInvoiceDetailedLineUpsert) SetChildUniqueReferenceID(v string) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldChildUniqueReferenceID, v)
	return u
}

// UpdateChildUniqueReferenceID sets the "child_unique_reference_id" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateChildUniqueReferenceID() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldChildUniqueReferenceID)
	return u
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (u *BillingInvoiceDetailedLineUpsert) ClearChildUniqueReferenceID() *BillingInvoiceDetailedLineUpsert {
	u.SetNull(billinginvoicedetailedline.FieldChildUniqueReferenceID)
	return u
}

// SetIndex sets the "index" field.
func (u *BillingInvoiceDetailedLineUpsert) SetIndex(v int) *BillingInvoiceDetailedLineUpsert {
	u.Set(billinginvoicedetailedline.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsert) UpdateIndex() *BillingInvoiceDetailedLineUpsert {
	u.SetExcluded(billinginvoicedetailedline.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *BillingInvoiceDetailedLineUpsert) AddIndex(v int) *BillingInvoiceDetailedLineUpsert {
	u.Add(billinginvoicedetailedline.FieldIndex, v)
	return u
}

// ClearIndex clears the value of the "index" field.
func (u *BillingInvoiceDetailedLineUpsert) ClearIndex() *BillingInvoiceDetailedLineUpsert {
	u.SetNull(billinginvoicedetailedline.FieldIndex)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceDetailedLine.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoicedetailedline.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateNewValues() *BillingInvoiceDetailedLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billinginvoicedetailedline.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billinginvoicedetailedline.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billinginvoicedetailedline.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Currency(); exists {
			s.SetIgnore(billinginvoicedetailedline.FieldCurrency)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceDetailedLine.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingInvoiceDetailedLineUpsertOne) Ignore() *BillingInvoiceDetailedLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceDetailedLineUpsertOne) DoNothing() *BillingInvoiceDetailedLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceDetailedLineCreate.OnConflict
// documentation for more info.
func (u *BillingInvoiceDetailedLineUpsertOne) Update(set func(*BillingInvoiceDetailedLineUpsert)) *BillingInvoiceDetailedLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceDetailedLineUpsert{UpdateSet: update})
	}))
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetAnnotations(v map[string]interface{}) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateAnnotations() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *BillingInvoiceDetailedLineUpsertOne) ClearAnnotations() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.ClearAnnotations()
	})
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetMetadata(v map[string]string) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateMetadata() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceDetailedLineUpsertOne) ClearMetadata() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetUpdatedAt(v time.Time) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateUpdatedAt() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetDeletedAt(v time.Time) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateDeletedAt() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceDetailedLineUpsertOne) ClearDeletedAt() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetName(v string) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateName() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetDescription(v string) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateDescription() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceDetailedLineUpsertOne) ClearDescription() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.ClearDescription()
	})
}

// SetTaxConfig sets the "tax_config" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetTaxConfig(v)
	})
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateTaxConfig() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateTaxConfig()
	})
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *BillingInvoiceDetailedLineUpsertOne) ClearTaxConfig() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.ClearTaxConfig()
	})
}

// SetAmount sets the "amount" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateAmount() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateAmount()
	})
}

// SetTaxesTotal sets the "taxes_total" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetTaxesTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetTaxesTotal(v)
	})
}

// UpdateTaxesTotal sets the "taxes_total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateTaxesTotal() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateTaxesTotal()
	})
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetTaxesInclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetTaxesInclusiveTotal(v)
	})
}

// UpdateTaxesInclusiveTotal sets the "taxes_inclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateTaxesInclusiveTotal() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateTaxesInclusiveTotal()
	})
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetTaxesExclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetTaxesExclusiveTotal(v)
	})
}

// UpdateTaxesExclusiveTotal sets the "taxes_exclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateTaxesExclusiveTotal() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateTaxesExclusiveTotal()
	})
}

// SetChargesTotal sets the "charges_total" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetChargesTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetChargesTotal(v)
	})
}

// UpdateChargesTotal sets the "charges_total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateChargesTotal() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateChargesTotal()
	})
}

// SetDiscountsTotal sets the "discounts_total" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetDiscountsTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetDiscountsTotal(v)
	})
}

// UpdateDiscountsTotal sets the "discounts_total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateDiscountsTotal() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateDiscountsTotal()
	})
}

// SetTotal sets the "total" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateTotal() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateTotal()
	})
}

// SetServicePeriodFrom sets the "service_period_from" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetServicePeriodFrom(v time.Time) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetServicePeriodFrom(v)
	})
}

// UpdateServicePeriodFrom sets the "service_period_from" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateServicePeriodFrom() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateServicePeriodFrom()
	})
}

// SetServicePeriodTo sets the "service_period_to" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetServicePeriodTo(v time.Time) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetServicePeriodTo(v)
	})
}

// UpdateServicePeriodTo sets the "service_period_to" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateServicePeriodTo() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateServicePeriodTo()
	})
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetInvoiceID(v string) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetInvoiceID(v)
	})
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateInvoiceID() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateInvoiceID()
	})
}

// SetParentLineID sets the "parent_line_id" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetParentLineID(v string) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetParentLineID(v)
	})
}

// UpdateParentLineID sets the "parent_line_id" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateParentLineID() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateParentLineID()
	})
}

// SetQuantity sets the "quantity" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateQuantity() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateQuantity()
	})
}

// SetPerUnitAmount sets the "per_unit_amount" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetPerUnitAmount(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetPerUnitAmount(v)
	})
}

// UpdatePerUnitAmount sets the "per_unit_amount" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdatePerUnitAmount() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdatePerUnitAmount()
	})
}

// SetCategory sets the "category" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetCategory(v billing.DetailedLineCategory) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateCategory() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateCategory()
	})
}

// SetPaymentTerm sets the "payment_term" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetPaymentTerm(v productcatalog.PaymentTermType) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetPaymentTerm(v)
	})
}

// UpdatePaymentTerm sets the "payment_term" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdatePaymentTerm() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdatePaymentTerm()
	})
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetInvoicingAppExternalID(v string) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetInvoicingAppExternalID(v)
	})
}

// UpdateInvoicingAppExternalID sets the "invoicing_app_external_id" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateInvoicingAppExternalID() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateInvoicingAppExternalID()
	})
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (u *BillingInvoiceDetailedLineUpsertOne) ClearInvoicingAppExternalID() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.ClearInvoicingAppExternalID()
	})
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetChildUniqueReferenceID(v string) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetChildUniqueReferenceID(v)
	})
}

// UpdateChildUniqueReferenceID sets the "child_unique_reference_id" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateChildUniqueReferenceID() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateChildUniqueReferenceID()
	})
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (u *BillingInvoiceDetailedLineUpsertOne) ClearChildUniqueReferenceID() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.ClearChildUniqueReferenceID()
	})
}

// SetIndex sets the "index" field.
func (u *BillingInvoiceDetailedLineUpsertOne) SetIndex(v int) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *BillingInvoiceDetailedLineUpsertOne) AddIndex(v int) *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertOne) UpdateIndex() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *BillingInvoiceDetailedLineUpsertOne) ClearIndex() *BillingInvoiceDetailedLineUpsertOne {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *BillingInvoiceDetailedLineUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceDetailedLineCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceDetailedLineUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingInvoiceDetailedLineUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingInvoiceDetailedLineUpsertOne.ID is not supported by MySQL driver. Use BillingInvoiceDetailedLineUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingInvoiceDetailedLineUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingInvoiceDetailedLineCreateBulk is the builder for creating many BillingInvoiceDetailedLine entities in bulk.
type BillingInvoiceDetailedLineCreateBulk struct {
	config
	err      error
	builders []*BillingInvoiceDetailedLineCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingInvoiceDetailedLine entities in the database.
func (_c *BillingInvoiceDetailedLineCreateBulk) Save(ctx context.Context) ([]*BillingInvoiceDetailedLine, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BillingInvoiceDetailedLine, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingInvoiceDetailedLineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BillingInvoiceDetailedLineCreateBulk) SaveX(ctx context.Context) []*BillingInvoiceDetailedLine {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BillingInvoiceDetailedLineCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BillingInvoiceDetailedLineCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceDetailedLine.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceDetailedLineUpsert) {
//			SetAnnotations(v+v).
//		}).
//		Exec(ctx)
func (_c *BillingInvoiceDetailedLineCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceDetailedLineUpsertBulk {
	_c.conflict = opts
	return &BillingInvoiceDetailedLineUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceDetailedLine.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BillingInvoiceDetailedLineCreateBulk) OnConflictColumns(columns ...string) *BillingInvoiceDetailedLineUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceDetailedLineUpsertBulk{
		create: _c,
	}
}

// BillingInvoiceDetailedLineUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingInvoiceDetailedLine nodes.
type BillingInvoiceDetailedLineUpsertBulk struct {
	create *BillingInvoiceDetailedLineCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingInvoiceDetailedLine.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoicedetailedline.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateNewValues() *BillingInvoiceDetailedLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billinginvoicedetailedline.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billinginvoicedetailedline.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billinginvoicedetailedline.FieldCreatedAt)
			}
			if _, exists := b.mutation.Currency(); exists {
				s.SetIgnore(billinginvoicedetailedline.FieldCurrency)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceDetailedLine.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingInvoiceDetailedLineUpsertBulk) Ignore() *BillingInvoiceDetailedLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceDetailedLineUpsertBulk) DoNothing() *BillingInvoiceDetailedLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceDetailedLineCreateBulk.OnConflict
// documentation for more info.
func (u *BillingInvoiceDetailedLineUpsertBulk) Update(set func(*BillingInvoiceDetailedLineUpsert)) *BillingInvoiceDetailedLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceDetailedLineUpsert{UpdateSet: update})
	}))
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetAnnotations(v map[string]interface{}) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateAnnotations() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) ClearAnnotations() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.ClearAnnotations()
	})
}

// SetMetadata sets the "metadata" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetMetadata(v map[string]string) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateMetadata() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) ClearMetadata() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetUpdatedAt(v time.Time) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateUpdatedAt() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetDeletedAt(v time.Time) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateDeletedAt() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) ClearDeletedAt() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetName(v string) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateName() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetDescription(v string) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateDescription() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) ClearDescription() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.ClearDescription()
	})
}

// SetTaxConfig sets the "tax_config" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetTaxConfig(v productcatalog.TaxConfig) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetTaxConfig(v)
	})
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateTaxConfig() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateTaxConfig()
	})
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) ClearTaxConfig() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.ClearTaxConfig()
	})
}

// SetAmount sets the "amount" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetAmount(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateAmount() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateAmount()
	})
}

// SetTaxesTotal sets the "taxes_total" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetTaxesTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetTaxesTotal(v)
	})
}

// UpdateTaxesTotal sets the "taxes_total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateTaxesTotal() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateTaxesTotal()
	})
}

// SetTaxesInclusiveTotal sets the "taxes_inclusive_total" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetTaxesInclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetTaxesInclusiveTotal(v)
	})
}

// UpdateTaxesInclusiveTotal sets the "taxes_inclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateTaxesInclusiveTotal() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateTaxesInclusiveTotal()
	})
}

// SetTaxesExclusiveTotal sets the "taxes_exclusive_total" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetTaxesExclusiveTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetTaxesExclusiveTotal(v)
	})
}

// UpdateTaxesExclusiveTotal sets the "taxes_exclusive_total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateTaxesExclusiveTotal() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateTaxesExclusiveTotal()
	})
}

// SetChargesTotal sets the "charges_total" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetChargesTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetChargesTotal(v)
	})
}

// UpdateChargesTotal sets the "charges_total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateChargesTotal() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateChargesTotal()
	})
}

// SetDiscountsTotal sets the "discounts_total" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetDiscountsTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetDiscountsTotal(v)
	})
}

// UpdateDiscountsTotal sets the "discounts_total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateDiscountsTotal() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateDiscountsTotal()
	})
}

// SetTotal sets the "total" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetTotal(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateTotal() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateTotal()
	})
}

// SetServicePeriodFrom sets the "service_period_from" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetServicePeriodFrom(v time.Time) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetServicePeriodFrom(v)
	})
}

// UpdateServicePeriodFrom sets the "service_period_from" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateServicePeriodFrom() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateServicePeriodFrom()
	})
}

// SetServicePeriodTo sets the "service_period_to" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetServicePeriodTo(v time.Time) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetServicePeriodTo(v)
	})
}

// UpdateServicePeriodTo sets the "service_period_to" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateServicePeriodTo() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateServicePeriodTo()
	})
}

// SetInvoiceID sets the "invoice_id" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetInvoiceID(v string) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetInvoiceID(v)
	})
}

// UpdateInvoiceID sets the "invoice_id" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateInvoiceID() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateInvoiceID()
	})
}

// SetParentLineID sets the "parent_line_id" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetParentLineID(v string) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetParentLineID(v)
	})
}

// UpdateParentLineID sets the "parent_line_id" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateParentLineID() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateParentLineID()
	})
}

// SetQuantity sets the "quantity" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetQuantity(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateQuantity() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateQuantity()
	})
}

// SetPerUnitAmount sets the "per_unit_amount" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetPerUnitAmount(v alpacadecimal.Decimal) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetPerUnitAmount(v)
	})
}

// UpdatePerUnitAmount sets the "per_unit_amount" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdatePerUnitAmount() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdatePerUnitAmount()
	})
}

// SetCategory sets the "category" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetCategory(v billing.DetailedLineCategory) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateCategory() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateCategory()
	})
}

// SetPaymentTerm sets the "payment_term" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetPaymentTerm(v productcatalog.PaymentTermType) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetPaymentTerm(v)
	})
}

// UpdatePaymentTerm sets the "payment_term" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdatePaymentTerm() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdatePaymentTerm()
	})
}

// SetInvoicingAppExternalID sets the "invoicing_app_external_id" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetInvoicingAppExternalID(v string) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetInvoicingAppExternalID(v)
	})
}

// UpdateInvoicingAppExternalID sets the "invoicing_app_external_id" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateInvoicingAppExternalID() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateInvoicingAppExternalID()
	})
}

// ClearInvoicingAppExternalID clears the value of the "invoicing_app_external_id" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) ClearInvoicingAppExternalID() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.ClearInvoicingAppExternalID()
	})
}

// SetChildUniqueReferenceID sets the "child_unique_reference_id" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetChildUniqueReferenceID(v string) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetChildUniqueReferenceID(v)
	})
}

// UpdateChildUniqueReferenceID sets the "child_unique_reference_id" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateChildUniqueReferenceID() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateChildUniqueReferenceID()
	})
}

// ClearChildUniqueReferenceID clears the value of the "child_unique_reference_id" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) ClearChildUniqueReferenceID() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.ClearChildUniqueReferenceID()
	})
}

// SetIndex sets the "index" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) SetIndex(v int) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) AddIndex(v int) *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *BillingInvoiceDetailedLineUpsertBulk) UpdateIndex() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *BillingInvoiceDetailedLineUpsertBulk) ClearIndex() *BillingInvoiceDetailedLineUpsertBulk {
	return u.Update(func(s *BillingInvoiceDetailedLineUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *BillingInvoiceDetailedLineUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingInvoiceDetailedLineCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceDetailedLineCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceDetailedLineUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
