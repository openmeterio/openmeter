// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/feature"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
	"github.com/openmeterio/openmeter/pkg/isodate"
)

// AddonRateCardCreate is the builder for creating a AddonRateCard entity.
type AddonRateCardCreate struct {
	config
	mutation *AddonRateCardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (_c *AddonRateCardCreate) SetNamespace(v string) *AddonRateCardCreate {
	_c.mutation.SetNamespace(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *AddonRateCardCreate) SetMetadata(v map[string]string) *AddonRateCardCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *AddonRateCardCreate) SetCreatedAt(v time.Time) *AddonRateCardCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *AddonRateCardCreate) SetNillableCreatedAt(v *time.Time) *AddonRateCardCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *AddonRateCardCreate) SetUpdatedAt(v time.Time) *AddonRateCardCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *AddonRateCardCreate) SetNillableUpdatedAt(v *time.Time) *AddonRateCardCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *AddonRateCardCreate) SetDeletedAt(v time.Time) *AddonRateCardCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *AddonRateCardCreate) SetNillableDeletedAt(v *time.Time) *AddonRateCardCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *AddonRateCardCreate) SetName(v string) *AddonRateCardCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *AddonRateCardCreate) SetDescription(v string) *AddonRateCardCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *AddonRateCardCreate) SetNillableDescription(v *string) *AddonRateCardCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetKey sets the "key" field.
func (_c *AddonRateCardCreate) SetKey(v string) *AddonRateCardCreate {
	_c.mutation.SetKey(v)
	return _c
}

// SetType sets the "type" field.
func (_c *AddonRateCardCreate) SetType(v productcatalog.RateCardType) *AddonRateCardCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetFeatureKey sets the "feature_key" field.
func (_c *AddonRateCardCreate) SetFeatureKey(v string) *AddonRateCardCreate {
	_c.mutation.SetFeatureKey(v)
	return _c
}

// SetNillableFeatureKey sets the "feature_key" field if the given value is not nil.
func (_c *AddonRateCardCreate) SetNillableFeatureKey(v *string) *AddonRateCardCreate {
	if v != nil {
		_c.SetFeatureKey(*v)
	}
	return _c
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (_c *AddonRateCardCreate) SetEntitlementTemplate(v *productcatalog.EntitlementTemplate) *AddonRateCardCreate {
	_c.mutation.SetEntitlementTemplate(v)
	return _c
}

// SetTaxConfig sets the "tax_config" field.
func (_c *AddonRateCardCreate) SetTaxConfig(v *productcatalog.TaxConfig) *AddonRateCardCreate {
	_c.mutation.SetTaxConfig(v)
	return _c
}

// SetBillingCadence sets the "billing_cadence" field.
func (_c *AddonRateCardCreate) SetBillingCadence(v isodate.String) *AddonRateCardCreate {
	_c.mutation.SetBillingCadence(v)
	return _c
}

// SetNillableBillingCadence sets the "billing_cadence" field if the given value is not nil.
func (_c *AddonRateCardCreate) SetNillableBillingCadence(v *isodate.String) *AddonRateCardCreate {
	if v != nil {
		_c.SetBillingCadence(*v)
	}
	return _c
}

// SetPrice sets the "price" field.
func (_c *AddonRateCardCreate) SetPrice(v *productcatalog.Price) *AddonRateCardCreate {
	_c.mutation.SetPrice(v)
	return _c
}

// SetDiscounts sets the "discounts" field.
func (_c *AddonRateCardCreate) SetDiscounts(v *productcatalog.Discounts) *AddonRateCardCreate {
	_c.mutation.SetDiscounts(v)
	return _c
}

// SetAddonID sets the "addon_id" field.
func (_c *AddonRateCardCreate) SetAddonID(v string) *AddonRateCardCreate {
	_c.mutation.SetAddonID(v)
	return _c
}

// SetFeatureID sets the "feature_id" field.
func (_c *AddonRateCardCreate) SetFeatureID(v string) *AddonRateCardCreate {
	_c.mutation.SetFeatureID(v)
	return _c
}

// SetNillableFeatureID sets the "feature_id" field if the given value is not nil.
func (_c *AddonRateCardCreate) SetNillableFeatureID(v *string) *AddonRateCardCreate {
	if v != nil {
		_c.SetFeatureID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *AddonRateCardCreate) SetID(v string) *AddonRateCardCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *AddonRateCardCreate) SetNillableID(v *string) *AddonRateCardCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetAddon sets the "addon" edge to the Addon entity.
func (_c *AddonRateCardCreate) SetAddon(v *Addon) *AddonRateCardCreate {
	return _c.SetAddonID(v.ID)
}

// SetFeaturesID sets the "features" edge to the Feature entity by ID.
func (_c *AddonRateCardCreate) SetFeaturesID(id string) *AddonRateCardCreate {
	_c.mutation.SetFeaturesID(id)
	return _c
}

// SetNillableFeaturesID sets the "features" edge to the Feature entity by ID if the given value is not nil.
func (_c *AddonRateCardCreate) SetNillableFeaturesID(id *string) *AddonRateCardCreate {
	if id != nil {
		_c = _c.SetFeaturesID(*id)
	}
	return _c
}

// SetFeatures sets the "features" edge to the Feature entity.
func (_c *AddonRateCardCreate) SetFeatures(v *Feature) *AddonRateCardCreate {
	return _c.SetFeaturesID(v.ID)
}

// Mutation returns the AddonRateCardMutation object of the builder.
func (_c *AddonRateCardCreate) Mutation() *AddonRateCardMutation {
	return _c.mutation
}

// Save creates the AddonRateCard in the database.
func (_c *AddonRateCardCreate) Save(ctx context.Context) (*AddonRateCard, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AddonRateCardCreate) SaveX(ctx context.Context) *AddonRateCard {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AddonRateCardCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AddonRateCardCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AddonRateCardCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := addonratecard.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := addonratecard.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := addonratecard.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AddonRateCardCreate) check() error {
	if _, ok := _c.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "AddonRateCard.namespace"`)}
	}
	if v, ok := _c.mutation.Namespace(); ok {
		if err := addonratecard.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.namespace": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "AddonRateCard.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "AddonRateCard.updated_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "AddonRateCard.name"`)}
	}
	if _, ok := _c.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`db: missing required field "AddonRateCard.key"`)}
	}
	if v, ok := _c.mutation.Key(); ok {
		if err := addonratecard.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.key": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "AddonRateCard.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := addonratecard.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.type": %w`, err)}
		}
	}
	if v, ok := _c.mutation.EntitlementTemplate(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "entitlement_template", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.entitlement_template": %w`, err)}
		}
	}
	if v, ok := _c.mutation.TaxConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "tax_config", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.tax_config": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Price(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.price": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Discounts(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "discounts", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.discounts": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AddonID(); !ok {
		return &ValidationError{Name: "addon_id", err: errors.New(`db: missing required field "AddonRateCard.addon_id"`)}
	}
	if v, ok := _c.mutation.AddonID(); ok {
		if err := addonratecard.AddonIDValidator(v); err != nil {
			return &ValidationError{Name: "addon_id", err: fmt.Errorf(`db: validator failed for field "AddonRateCard.addon_id": %w`, err)}
		}
	}
	if len(_c.mutation.AddonIDs()) == 0 {
		return &ValidationError{Name: "addon", err: errors.New(`db: missing required edge "AddonRateCard.addon"`)}
	}
	return nil
}

func (_c *AddonRateCardCreate) sqlSave(ctx context.Context) (*AddonRateCard, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := _c.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AddonRateCard.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AddonRateCardCreate) createSpec() (*AddonRateCard, *sqlgraph.CreateSpec, error) {
	var (
		_node = &AddonRateCard{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(addonratecard.Table, sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Namespace(); ok {
		_spec.SetField(addonratecard.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(addonratecard.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(addonratecard.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(addonratecard.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(addonratecard.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(addonratecard.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(addonratecard.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.Key(); ok {
		_spec.SetField(addonratecard.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(addonratecard.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.FeatureKey(); ok {
		_spec.SetField(addonratecard.FieldFeatureKey, field.TypeString, value)
		_node.FeatureKey = &value
	}
	if value, ok := _c.mutation.EntitlementTemplate(); ok {
		vv, err := addonratecard.ValueScanner.EntitlementTemplate.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(addonratecard.FieldEntitlementTemplate, field.TypeString, vv)
		_node.EntitlementTemplate = value
	}
	if value, ok := _c.mutation.TaxConfig(); ok {
		vv, err := addonratecard.ValueScanner.TaxConfig.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(addonratecard.FieldTaxConfig, field.TypeString, vv)
		_node.TaxConfig = value
	}
	if value, ok := _c.mutation.BillingCadence(); ok {
		_spec.SetField(addonratecard.FieldBillingCadence, field.TypeString, value)
		_node.BillingCadence = &value
	}
	if value, ok := _c.mutation.Price(); ok {
		vv, err := addonratecard.ValueScanner.Price.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(addonratecard.FieldPrice, field.TypeString, vv)
		_node.Price = value
	}
	if value, ok := _c.mutation.Discounts(); ok {
		vv, err := addonratecard.ValueScanner.Discounts.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(addonratecard.FieldDiscounts, field.TypeString, vv)
		_node.Discounts = value
	}
	if nodes := _c.mutation.AddonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addonratecard.AddonTable,
			Columns: []string{addonratecard.AddonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AddonID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addonratecard.FeaturesTable,
			Columns: []string{addonratecard.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FeatureID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AddonRateCard.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddonRateCardUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *AddonRateCardCreate) OnConflict(opts ...sql.ConflictOption) *AddonRateCardUpsertOne {
	_c.conflict = opts
	return &AddonRateCardUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AddonRateCard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AddonRateCardCreate) OnConflictColumns(columns ...string) *AddonRateCardUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AddonRateCardUpsertOne{
		create: _c,
	}
}

type (
	// AddonRateCardUpsertOne is the builder for "upsert"-ing
	//  one AddonRateCard node.
	AddonRateCardUpsertOne struct {
		create *AddonRateCardCreate
	}

	// AddonRateCardUpsert is the "OnConflict" setter.
	AddonRateCardUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *AddonRateCardUpsert) SetMetadata(v map[string]string) *AddonRateCardUpsert {
	u.Set(addonratecard.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *AddonRateCardUpsert) UpdateMetadata() *AddonRateCardUpsert {
	u.SetExcluded(addonratecard.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *AddonRateCardUpsert) ClearMetadata() *AddonRateCardUpsert {
	u.SetNull(addonratecard.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AddonRateCardUpsert) SetUpdatedAt(v time.Time) *AddonRateCardUpsert {
	u.Set(addonratecard.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AddonRateCardUpsert) UpdateUpdatedAt() *AddonRateCardUpsert {
	u.SetExcluded(addonratecard.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AddonRateCardUpsert) SetDeletedAt(v time.Time) *AddonRateCardUpsert {
	u.Set(addonratecard.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AddonRateCardUpsert) UpdateDeletedAt() *AddonRateCardUpsert {
	u.SetExcluded(addonratecard.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AddonRateCardUpsert) ClearDeletedAt() *AddonRateCardUpsert {
	u.SetNull(addonratecard.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *AddonRateCardUpsert) SetName(v string) *AddonRateCardUpsert {
	u.Set(addonratecard.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AddonRateCardUpsert) UpdateName() *AddonRateCardUpsert {
	u.SetExcluded(addonratecard.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *AddonRateCardUpsert) SetDescription(v string) *AddonRateCardUpsert {
	u.Set(addonratecard.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AddonRateCardUpsert) UpdateDescription() *AddonRateCardUpsert {
	u.SetExcluded(addonratecard.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *AddonRateCardUpsert) ClearDescription() *AddonRateCardUpsert {
	u.SetNull(addonratecard.FieldDescription)
	return u
}

// SetFeatureKey sets the "feature_key" field.
func (u *AddonRateCardUpsert) SetFeatureKey(v string) *AddonRateCardUpsert {
	u.Set(addonratecard.FieldFeatureKey, v)
	return u
}

// UpdateFeatureKey sets the "feature_key" field to the value that was provided on create.
func (u *AddonRateCardUpsert) UpdateFeatureKey() *AddonRateCardUpsert {
	u.SetExcluded(addonratecard.FieldFeatureKey)
	return u
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (u *AddonRateCardUpsert) ClearFeatureKey() *AddonRateCardUpsert {
	u.SetNull(addonratecard.FieldFeatureKey)
	return u
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (u *AddonRateCardUpsert) SetEntitlementTemplate(v *productcatalog.EntitlementTemplate) *AddonRateCardUpsert {
	u.Set(addonratecard.FieldEntitlementTemplate, v)
	return u
}

// UpdateEntitlementTemplate sets the "entitlement_template" field to the value that was provided on create.
func (u *AddonRateCardUpsert) UpdateEntitlementTemplate() *AddonRateCardUpsert {
	u.SetExcluded(addonratecard.FieldEntitlementTemplate)
	return u
}

// ClearEntitlementTemplate clears the value of the "entitlement_template" field.
func (u *AddonRateCardUpsert) ClearEntitlementTemplate() *AddonRateCardUpsert {
	u.SetNull(addonratecard.FieldEntitlementTemplate)
	return u
}

// SetTaxConfig sets the "tax_config" field.
func (u *AddonRateCardUpsert) SetTaxConfig(v *productcatalog.TaxConfig) *AddonRateCardUpsert {
	u.Set(addonratecard.FieldTaxConfig, v)
	return u
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *AddonRateCardUpsert) UpdateTaxConfig() *AddonRateCardUpsert {
	u.SetExcluded(addonratecard.FieldTaxConfig)
	return u
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *AddonRateCardUpsert) ClearTaxConfig() *AddonRateCardUpsert {
	u.SetNull(addonratecard.FieldTaxConfig)
	return u
}

// SetBillingCadence sets the "billing_cadence" field.
func (u *AddonRateCardUpsert) SetBillingCadence(v isodate.String) *AddonRateCardUpsert {
	u.Set(addonratecard.FieldBillingCadence, v)
	return u
}

// UpdateBillingCadence sets the "billing_cadence" field to the value that was provided on create.
func (u *AddonRateCardUpsert) UpdateBillingCadence() *AddonRateCardUpsert {
	u.SetExcluded(addonratecard.FieldBillingCadence)
	return u
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (u *AddonRateCardUpsert) ClearBillingCadence() *AddonRateCardUpsert {
	u.SetNull(addonratecard.FieldBillingCadence)
	return u
}

// SetPrice sets the "price" field.
func (u *AddonRateCardUpsert) SetPrice(v *productcatalog.Price) *AddonRateCardUpsert {
	u.Set(addonratecard.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *AddonRateCardUpsert) UpdatePrice() *AddonRateCardUpsert {
	u.SetExcluded(addonratecard.FieldPrice)
	return u
}

// ClearPrice clears the value of the "price" field.
func (u *AddonRateCardUpsert) ClearPrice() *AddonRateCardUpsert {
	u.SetNull(addonratecard.FieldPrice)
	return u
}

// SetDiscounts sets the "discounts" field.
func (u *AddonRateCardUpsert) SetDiscounts(v *productcatalog.Discounts) *AddonRateCardUpsert {
	u.Set(addonratecard.FieldDiscounts, v)
	return u
}

// UpdateDiscounts sets the "discounts" field to the value that was provided on create.
func (u *AddonRateCardUpsert) UpdateDiscounts() *AddonRateCardUpsert {
	u.SetExcluded(addonratecard.FieldDiscounts)
	return u
}

// ClearDiscounts clears the value of the "discounts" field.
func (u *AddonRateCardUpsert) ClearDiscounts() *AddonRateCardUpsert {
	u.SetNull(addonratecard.FieldDiscounts)
	return u
}

// SetAddonID sets the "addon_id" field.
func (u *AddonRateCardUpsert) SetAddonID(v string) *AddonRateCardUpsert {
	u.Set(addonratecard.FieldAddonID, v)
	return u
}

// UpdateAddonID sets the "addon_id" field to the value that was provided on create.
func (u *AddonRateCardUpsert) UpdateAddonID() *AddonRateCardUpsert {
	u.SetExcluded(addonratecard.FieldAddonID)
	return u
}

// SetFeatureID sets the "feature_id" field.
func (u *AddonRateCardUpsert) SetFeatureID(v string) *AddonRateCardUpsert {
	u.Set(addonratecard.FieldFeatureID, v)
	return u
}

// UpdateFeatureID sets the "feature_id" field to the value that was provided on create.
func (u *AddonRateCardUpsert) UpdateFeatureID() *AddonRateCardUpsert {
	u.SetExcluded(addonratecard.FieldFeatureID)
	return u
}

// ClearFeatureID clears the value of the "feature_id" field.
func (u *AddonRateCardUpsert) ClearFeatureID() *AddonRateCardUpsert {
	u.SetNull(addonratecard.FieldFeatureID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AddonRateCard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(addonratecard.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AddonRateCardUpsertOne) UpdateNewValues() *AddonRateCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(addonratecard.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(addonratecard.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(addonratecard.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Key(); exists {
			s.SetIgnore(addonratecard.FieldKey)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(addonratecard.FieldType)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AddonRateCard.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AddonRateCardUpsertOne) Ignore() *AddonRateCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddonRateCardUpsertOne) DoNothing() *AddonRateCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddonRateCardCreate.OnConflict
// documentation for more info.
func (u *AddonRateCardUpsertOne) Update(set func(*AddonRateCardUpsert)) *AddonRateCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddonRateCardUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *AddonRateCardUpsertOne) SetMetadata(v map[string]string) *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *AddonRateCardUpsertOne) UpdateMetadata() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *AddonRateCardUpsertOne) ClearMetadata() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AddonRateCardUpsertOne) SetUpdatedAt(v time.Time) *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AddonRateCardUpsertOne) UpdateUpdatedAt() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AddonRateCardUpsertOne) SetDeletedAt(v time.Time) *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AddonRateCardUpsertOne) UpdateDeletedAt() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AddonRateCardUpsertOne) ClearDeletedAt() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *AddonRateCardUpsertOne) SetName(v string) *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AddonRateCardUpsertOne) UpdateName() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *AddonRateCardUpsertOne) SetDescription(v string) *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AddonRateCardUpsertOne) UpdateDescription() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AddonRateCardUpsertOne) ClearDescription() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearDescription()
	})
}

// SetFeatureKey sets the "feature_key" field.
func (u *AddonRateCardUpsertOne) SetFeatureKey(v string) *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetFeatureKey(v)
	})
}

// UpdateFeatureKey sets the "feature_key" field to the value that was provided on create.
func (u *AddonRateCardUpsertOne) UpdateFeatureKey() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateFeatureKey()
	})
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (u *AddonRateCardUpsertOne) ClearFeatureKey() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearFeatureKey()
	})
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (u *AddonRateCardUpsertOne) SetEntitlementTemplate(v *productcatalog.EntitlementTemplate) *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetEntitlementTemplate(v)
	})
}

// UpdateEntitlementTemplate sets the "entitlement_template" field to the value that was provided on create.
func (u *AddonRateCardUpsertOne) UpdateEntitlementTemplate() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateEntitlementTemplate()
	})
}

// ClearEntitlementTemplate clears the value of the "entitlement_template" field.
func (u *AddonRateCardUpsertOne) ClearEntitlementTemplate() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearEntitlementTemplate()
	})
}

// SetTaxConfig sets the "tax_config" field.
func (u *AddonRateCardUpsertOne) SetTaxConfig(v *productcatalog.TaxConfig) *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetTaxConfig(v)
	})
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *AddonRateCardUpsertOne) UpdateTaxConfig() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateTaxConfig()
	})
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *AddonRateCardUpsertOne) ClearTaxConfig() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearTaxConfig()
	})
}

// SetBillingCadence sets the "billing_cadence" field.
func (u *AddonRateCardUpsertOne) SetBillingCadence(v isodate.String) *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetBillingCadence(v)
	})
}

// UpdateBillingCadence sets the "billing_cadence" field to the value that was provided on create.
func (u *AddonRateCardUpsertOne) UpdateBillingCadence() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateBillingCadence()
	})
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (u *AddonRateCardUpsertOne) ClearBillingCadence() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearBillingCadence()
	})
}

// SetPrice sets the "price" field.
func (u *AddonRateCardUpsertOne) SetPrice(v *productcatalog.Price) *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *AddonRateCardUpsertOne) UpdatePrice() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdatePrice()
	})
}

// ClearPrice clears the value of the "price" field.
func (u *AddonRateCardUpsertOne) ClearPrice() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearPrice()
	})
}

// SetDiscounts sets the "discounts" field.
func (u *AddonRateCardUpsertOne) SetDiscounts(v *productcatalog.Discounts) *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetDiscounts(v)
	})
}

// UpdateDiscounts sets the "discounts" field to the value that was provided on create.
func (u *AddonRateCardUpsertOne) UpdateDiscounts() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateDiscounts()
	})
}

// ClearDiscounts clears the value of the "discounts" field.
func (u *AddonRateCardUpsertOne) ClearDiscounts() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearDiscounts()
	})
}

// SetAddonID sets the "addon_id" field.
func (u *AddonRateCardUpsertOne) SetAddonID(v string) *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetAddonID(v)
	})
}

// UpdateAddonID sets the "addon_id" field to the value that was provided on create.
func (u *AddonRateCardUpsertOne) UpdateAddonID() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateAddonID()
	})
}

// SetFeatureID sets the "feature_id" field.
func (u *AddonRateCardUpsertOne) SetFeatureID(v string) *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetFeatureID(v)
	})
}

// UpdateFeatureID sets the "feature_id" field to the value that was provided on create.
func (u *AddonRateCardUpsertOne) UpdateFeatureID() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateFeatureID()
	})
}

// ClearFeatureID clears the value of the "feature_id" field.
func (u *AddonRateCardUpsertOne) ClearFeatureID() *AddonRateCardUpsertOne {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearFeatureID()
	})
}

// Exec executes the query.
func (u *AddonRateCardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for AddonRateCardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddonRateCardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AddonRateCardUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: AddonRateCardUpsertOne.ID is not supported by MySQL driver. Use AddonRateCardUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AddonRateCardUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AddonRateCardCreateBulk is the builder for creating many AddonRateCard entities in bulk.
type AddonRateCardCreateBulk struct {
	config
	err      error
	builders []*AddonRateCardCreate
	conflict []sql.ConflictOption
}

// Save creates the AddonRateCard entities in the database.
func (_c *AddonRateCardCreateBulk) Save(ctx context.Context) ([]*AddonRateCard, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*AddonRateCard, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AddonRateCardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AddonRateCardCreateBulk) SaveX(ctx context.Context) []*AddonRateCard {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AddonRateCardCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AddonRateCardCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AddonRateCard.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddonRateCardUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (_c *AddonRateCardCreateBulk) OnConflict(opts ...sql.ConflictOption) *AddonRateCardUpsertBulk {
	_c.conflict = opts
	return &AddonRateCardUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AddonRateCard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AddonRateCardCreateBulk) OnConflictColumns(columns ...string) *AddonRateCardUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AddonRateCardUpsertBulk{
		create: _c,
	}
}

// AddonRateCardUpsertBulk is the builder for "upsert"-ing
// a bulk of AddonRateCard nodes.
type AddonRateCardUpsertBulk struct {
	create *AddonRateCardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AddonRateCard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(addonratecard.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AddonRateCardUpsertBulk) UpdateNewValues() *AddonRateCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(addonratecard.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(addonratecard.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(addonratecard.FieldCreatedAt)
			}
			if _, exists := b.mutation.Key(); exists {
				s.SetIgnore(addonratecard.FieldKey)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(addonratecard.FieldType)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AddonRateCard.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AddonRateCardUpsertBulk) Ignore() *AddonRateCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddonRateCardUpsertBulk) DoNothing() *AddonRateCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddonRateCardCreateBulk.OnConflict
// documentation for more info.
func (u *AddonRateCardUpsertBulk) Update(set func(*AddonRateCardUpsert)) *AddonRateCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddonRateCardUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *AddonRateCardUpsertBulk) SetMetadata(v map[string]string) *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *AddonRateCardUpsertBulk) UpdateMetadata() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *AddonRateCardUpsertBulk) ClearMetadata() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AddonRateCardUpsertBulk) SetUpdatedAt(v time.Time) *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AddonRateCardUpsertBulk) UpdateUpdatedAt() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AddonRateCardUpsertBulk) SetDeletedAt(v time.Time) *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AddonRateCardUpsertBulk) UpdateDeletedAt() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AddonRateCardUpsertBulk) ClearDeletedAt() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *AddonRateCardUpsertBulk) SetName(v string) *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AddonRateCardUpsertBulk) UpdateName() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *AddonRateCardUpsertBulk) SetDescription(v string) *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AddonRateCardUpsertBulk) UpdateDescription() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AddonRateCardUpsertBulk) ClearDescription() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearDescription()
	})
}

// SetFeatureKey sets the "feature_key" field.
func (u *AddonRateCardUpsertBulk) SetFeatureKey(v string) *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetFeatureKey(v)
	})
}

// UpdateFeatureKey sets the "feature_key" field to the value that was provided on create.
func (u *AddonRateCardUpsertBulk) UpdateFeatureKey() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateFeatureKey()
	})
}

// ClearFeatureKey clears the value of the "feature_key" field.
func (u *AddonRateCardUpsertBulk) ClearFeatureKey() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearFeatureKey()
	})
}

// SetEntitlementTemplate sets the "entitlement_template" field.
func (u *AddonRateCardUpsertBulk) SetEntitlementTemplate(v *productcatalog.EntitlementTemplate) *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetEntitlementTemplate(v)
	})
}

// UpdateEntitlementTemplate sets the "entitlement_template" field to the value that was provided on create.
func (u *AddonRateCardUpsertBulk) UpdateEntitlementTemplate() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateEntitlementTemplate()
	})
}

// ClearEntitlementTemplate clears the value of the "entitlement_template" field.
func (u *AddonRateCardUpsertBulk) ClearEntitlementTemplate() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearEntitlementTemplate()
	})
}

// SetTaxConfig sets the "tax_config" field.
func (u *AddonRateCardUpsertBulk) SetTaxConfig(v *productcatalog.TaxConfig) *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetTaxConfig(v)
	})
}

// UpdateTaxConfig sets the "tax_config" field to the value that was provided on create.
func (u *AddonRateCardUpsertBulk) UpdateTaxConfig() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateTaxConfig()
	})
}

// ClearTaxConfig clears the value of the "tax_config" field.
func (u *AddonRateCardUpsertBulk) ClearTaxConfig() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearTaxConfig()
	})
}

// SetBillingCadence sets the "billing_cadence" field.
func (u *AddonRateCardUpsertBulk) SetBillingCadence(v isodate.String) *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetBillingCadence(v)
	})
}

// UpdateBillingCadence sets the "billing_cadence" field to the value that was provided on create.
func (u *AddonRateCardUpsertBulk) UpdateBillingCadence() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateBillingCadence()
	})
}

// ClearBillingCadence clears the value of the "billing_cadence" field.
func (u *AddonRateCardUpsertBulk) ClearBillingCadence() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearBillingCadence()
	})
}

// SetPrice sets the "price" field.
func (u *AddonRateCardUpsertBulk) SetPrice(v *productcatalog.Price) *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *AddonRateCardUpsertBulk) UpdatePrice() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdatePrice()
	})
}

// ClearPrice clears the value of the "price" field.
func (u *AddonRateCardUpsertBulk) ClearPrice() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearPrice()
	})
}

// SetDiscounts sets the "discounts" field.
func (u *AddonRateCardUpsertBulk) SetDiscounts(v *productcatalog.Discounts) *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetDiscounts(v)
	})
}

// UpdateDiscounts sets the "discounts" field to the value that was provided on create.
func (u *AddonRateCardUpsertBulk) UpdateDiscounts() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateDiscounts()
	})
}

// ClearDiscounts clears the value of the "discounts" field.
func (u *AddonRateCardUpsertBulk) ClearDiscounts() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearDiscounts()
	})
}

// SetAddonID sets the "addon_id" field.
func (u *AddonRateCardUpsertBulk) SetAddonID(v string) *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetAddonID(v)
	})
}

// UpdateAddonID sets the "addon_id" field to the value that was provided on create.
func (u *AddonRateCardUpsertBulk) UpdateAddonID() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateAddonID()
	})
}

// SetFeatureID sets the "feature_id" field.
func (u *AddonRateCardUpsertBulk) SetFeatureID(v string) *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.SetFeatureID(v)
	})
}

// UpdateFeatureID sets the "feature_id" field to the value that was provided on create.
func (u *AddonRateCardUpsertBulk) UpdateFeatureID() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.UpdateFeatureID()
	})
}

// ClearFeatureID clears the value of the "feature_id" field.
func (u *AddonRateCardUpsertBulk) ClearFeatureID() *AddonRateCardUpsertBulk {
	return u.Update(func(s *AddonRateCardUpsert) {
		s.ClearFeatureID()
	})
}

// Exec executes the query.
func (u *AddonRateCardUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the AddonRateCardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for AddonRateCardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddonRateCardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
