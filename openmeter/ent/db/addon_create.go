// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addon"
	"github.com/openmeterio/openmeter/openmeter/ent/db/addonratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/subscriptionaddon"
	"github.com/openmeterio/openmeter/openmeter/productcatalog"
)

// AddonCreate is the builder for creating a Addon entity.
type AddonCreate struct {
	config
	mutation *AddonMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (ac *AddonCreate) SetNamespace(s string) *AddonCreate {
	ac.mutation.SetNamespace(s)
	return ac
}

// SetMetadata sets the "metadata" field.
func (ac *AddonCreate) SetMetadata(m map[string]string) *AddonCreate {
	ac.mutation.SetMetadata(m)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AddonCreate) SetCreatedAt(t time.Time) *AddonCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AddonCreate) SetNillableCreatedAt(t *time.Time) *AddonCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AddonCreate) SetUpdatedAt(t time.Time) *AddonCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AddonCreate) SetNillableUpdatedAt(t *time.Time) *AddonCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AddonCreate) SetDeletedAt(t time.Time) *AddonCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AddonCreate) SetNillableDeletedAt(t *time.Time) *AddonCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *AddonCreate) SetName(s string) *AddonCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetDescription sets the "description" field.
func (ac *AddonCreate) SetDescription(s string) *AddonCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ac *AddonCreate) SetNillableDescription(s *string) *AddonCreate {
	if s != nil {
		ac.SetDescription(*s)
	}
	return ac
}

// SetKey sets the "key" field.
func (ac *AddonCreate) SetKey(s string) *AddonCreate {
	ac.mutation.SetKey(s)
	return ac
}

// SetVersion sets the "version" field.
func (ac *AddonCreate) SetVersion(i int) *AddonCreate {
	ac.mutation.SetVersion(i)
	return ac
}

// SetCurrency sets the "currency" field.
func (ac *AddonCreate) SetCurrency(s string) *AddonCreate {
	ac.mutation.SetCurrency(s)
	return ac
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (ac *AddonCreate) SetNillableCurrency(s *string) *AddonCreate {
	if s != nil {
		ac.SetCurrency(*s)
	}
	return ac
}

// SetInstanceType sets the "instance_type" field.
func (ac *AddonCreate) SetInstanceType(pit productcatalog.AddonInstanceType) *AddonCreate {
	ac.mutation.SetInstanceType(pit)
	return ac
}

// SetNillableInstanceType sets the "instance_type" field if the given value is not nil.
func (ac *AddonCreate) SetNillableInstanceType(pit *productcatalog.AddonInstanceType) *AddonCreate {
	if pit != nil {
		ac.SetInstanceType(*pit)
	}
	return ac
}

// SetEffectiveFrom sets the "effective_from" field.
func (ac *AddonCreate) SetEffectiveFrom(t time.Time) *AddonCreate {
	ac.mutation.SetEffectiveFrom(t)
	return ac
}

// SetNillableEffectiveFrom sets the "effective_from" field if the given value is not nil.
func (ac *AddonCreate) SetNillableEffectiveFrom(t *time.Time) *AddonCreate {
	if t != nil {
		ac.SetEffectiveFrom(*t)
	}
	return ac
}

// SetEffectiveTo sets the "effective_to" field.
func (ac *AddonCreate) SetEffectiveTo(t time.Time) *AddonCreate {
	ac.mutation.SetEffectiveTo(t)
	return ac
}

// SetNillableEffectiveTo sets the "effective_to" field if the given value is not nil.
func (ac *AddonCreate) SetNillableEffectiveTo(t *time.Time) *AddonCreate {
	if t != nil {
		ac.SetEffectiveTo(*t)
	}
	return ac
}

// SetAnnotations sets the "annotations" field.
func (ac *AddonCreate) SetAnnotations(m map[string]interface{}) *AddonCreate {
	ac.mutation.SetAnnotations(m)
	return ac
}

// SetID sets the "id" field.
func (ac *AddonCreate) SetID(s string) *AddonCreate {
	ac.mutation.SetID(s)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AddonCreate) SetNillableID(s *string) *AddonCreate {
	if s != nil {
		ac.SetID(*s)
	}
	return ac
}

// AddRatecardIDs adds the "ratecards" edge to the AddonRateCard entity by IDs.
func (ac *AddonCreate) AddRatecardIDs(ids ...string) *AddonCreate {
	ac.mutation.AddRatecardIDs(ids...)
	return ac
}

// AddRatecards adds the "ratecards" edges to the AddonRateCard entity.
func (ac *AddonCreate) AddRatecards(a ...*AddonRateCard) *AddonCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddRatecardIDs(ids...)
}

// AddSubscriptionAddonIDs adds the "subscription_addons" edge to the SubscriptionAddon entity by IDs.
func (ac *AddonCreate) AddSubscriptionAddonIDs(ids ...string) *AddonCreate {
	ac.mutation.AddSubscriptionAddonIDs(ids...)
	return ac
}

// AddSubscriptionAddons adds the "subscription_addons" edges to the SubscriptionAddon entity.
func (ac *AddonCreate) AddSubscriptionAddons(s ...*SubscriptionAddon) *AddonCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddSubscriptionAddonIDs(ids...)
}

// Mutation returns the AddonMutation object of the builder.
func (ac *AddonCreate) Mutation() *AddonMutation {
	return ac.mutation
}

// Save creates the Addon in the database.
func (ac *AddonCreate) Save(ctx context.Context) (*Addon, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AddonCreate) SaveX(ctx context.Context) *Addon {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AddonCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AddonCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AddonCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := addon.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := addon.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Currency(); !ok {
		v := addon.DefaultCurrency
		ac.mutation.SetCurrency(v)
	}
	if _, ok := ac.mutation.InstanceType(); !ok {
		v := addon.DefaultInstanceType
		ac.mutation.SetInstanceType(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := addon.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AddonCreate) check() error {
	if _, ok := ac.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "Addon.namespace"`)}
	}
	if v, ok := ac.mutation.Namespace(); ok {
		if err := addon.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "Addon.namespace": %w`, err)}
		}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Addon.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Addon.updated_at"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "Addon.name"`)}
	}
	if _, ok := ac.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`db: missing required field "Addon.key"`)}
	}
	if v, ok := ac.mutation.Key(); ok {
		if err := addon.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`db: validator failed for field "Addon.key": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`db: missing required field "Addon.version"`)}
	}
	if v, ok := ac.mutation.Version(); ok {
		if err := addon.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`db: validator failed for field "Addon.version": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`db: missing required field "Addon.currency"`)}
	}
	if v, ok := ac.mutation.Currency(); ok {
		if err := addon.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`db: validator failed for field "Addon.currency": %w`, err)}
		}
	}
	if _, ok := ac.mutation.InstanceType(); !ok {
		return &ValidationError{Name: "instance_type", err: errors.New(`db: missing required field "Addon.instance_type"`)}
	}
	if v, ok := ac.mutation.InstanceType(); ok {
		if err := addon.InstanceTypeValidator(v); err != nil {
			return &ValidationError{Name: "instance_type", err: fmt.Errorf(`db: validator failed for field "Addon.instance_type": %w`, err)}
		}
	}
	return nil
}

func (ac *AddonCreate) sqlSave(ctx context.Context) (*Addon, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := ac.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Addon.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AddonCreate) createSpec() (*Addon, *sqlgraph.CreateSpec, error) {
	var (
		_node = &Addon{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(addon.Table, sqlgraph.NewFieldSpec(addon.FieldID, field.TypeString))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Namespace(); ok {
		_spec.SetField(addon.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := ac.mutation.Metadata(); ok {
		_spec.SetField(addon.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(addon.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(addon.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(addon.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(addon.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(addon.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := ac.mutation.Key(); ok {
		_spec.SetField(addon.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := ac.mutation.Version(); ok {
		_spec.SetField(addon.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := ac.mutation.Currency(); ok {
		_spec.SetField(addon.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := ac.mutation.InstanceType(); ok {
		_spec.SetField(addon.FieldInstanceType, field.TypeEnum, value)
		_node.InstanceType = value
	}
	if value, ok := ac.mutation.EffectiveFrom(); ok {
		_spec.SetField(addon.FieldEffectiveFrom, field.TypeTime, value)
		_node.EffectiveFrom = &value
	}
	if value, ok := ac.mutation.EffectiveTo(); ok {
		_spec.SetField(addon.FieldEffectiveTo, field.TypeTime, value)
		_node.EffectiveTo = &value
	}
	if value, ok := ac.mutation.Annotations(); ok {
		vv, err := addon.ValueScanner.Annotations.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(addon.FieldAnnotations, field.TypeString, vv)
		_node.Annotations = value
	}
	if nodes := ac.mutation.RatecardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   addon.RatecardsTable,
			Columns: []string{addon.RatecardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addonratecard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SubscriptionAddonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   addon.SubscriptionAddonsTable,
			Columns: []string{addon.SubscriptionAddonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriptionaddon.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Addon.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddonUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (ac *AddonCreate) OnConflict(opts ...sql.ConflictOption) *AddonUpsertOne {
	ac.conflict = opts
	return &AddonUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Addon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AddonCreate) OnConflictColumns(columns ...string) *AddonUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AddonUpsertOne{
		create: ac,
	}
}

type (
	// AddonUpsertOne is the builder for "upsert"-ing
	//  one Addon node.
	AddonUpsertOne struct {
		create *AddonCreate
	}

	// AddonUpsert is the "OnConflict" setter.
	AddonUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *AddonUpsert) SetMetadata(v map[string]string) *AddonUpsert {
	u.Set(addon.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *AddonUpsert) UpdateMetadata() *AddonUpsert {
	u.SetExcluded(addon.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *AddonUpsert) ClearMetadata() *AddonUpsert {
	u.SetNull(addon.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AddonUpsert) SetUpdatedAt(v time.Time) *AddonUpsert {
	u.Set(addon.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AddonUpsert) UpdateUpdatedAt() *AddonUpsert {
	u.SetExcluded(addon.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AddonUpsert) SetDeletedAt(v time.Time) *AddonUpsert {
	u.Set(addon.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AddonUpsert) UpdateDeletedAt() *AddonUpsert {
	u.SetExcluded(addon.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AddonUpsert) ClearDeletedAt() *AddonUpsert {
	u.SetNull(addon.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *AddonUpsert) SetName(v string) *AddonUpsert {
	u.Set(addon.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AddonUpsert) UpdateName() *AddonUpsert {
	u.SetExcluded(addon.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *AddonUpsert) SetDescription(v string) *AddonUpsert {
	u.Set(addon.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AddonUpsert) UpdateDescription() *AddonUpsert {
	u.SetExcluded(addon.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *AddonUpsert) ClearDescription() *AddonUpsert {
	u.SetNull(addon.FieldDescription)
	return u
}

// SetVersion sets the "version" field.
func (u *AddonUpsert) SetVersion(v int) *AddonUpsert {
	u.Set(addon.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *AddonUpsert) UpdateVersion() *AddonUpsert {
	u.SetExcluded(addon.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *AddonUpsert) AddVersion(v int) *AddonUpsert {
	u.Add(addon.FieldVersion, v)
	return u
}

// SetInstanceType sets the "instance_type" field.
func (u *AddonUpsert) SetInstanceType(v productcatalog.AddonInstanceType) *AddonUpsert {
	u.Set(addon.FieldInstanceType, v)
	return u
}

// UpdateInstanceType sets the "instance_type" field to the value that was provided on create.
func (u *AddonUpsert) UpdateInstanceType() *AddonUpsert {
	u.SetExcluded(addon.FieldInstanceType)
	return u
}

// SetEffectiveFrom sets the "effective_from" field.
func (u *AddonUpsert) SetEffectiveFrom(v time.Time) *AddonUpsert {
	u.Set(addon.FieldEffectiveFrom, v)
	return u
}

// UpdateEffectiveFrom sets the "effective_from" field to the value that was provided on create.
func (u *AddonUpsert) UpdateEffectiveFrom() *AddonUpsert {
	u.SetExcluded(addon.FieldEffectiveFrom)
	return u
}

// ClearEffectiveFrom clears the value of the "effective_from" field.
func (u *AddonUpsert) ClearEffectiveFrom() *AddonUpsert {
	u.SetNull(addon.FieldEffectiveFrom)
	return u
}

// SetEffectiveTo sets the "effective_to" field.
func (u *AddonUpsert) SetEffectiveTo(v time.Time) *AddonUpsert {
	u.Set(addon.FieldEffectiveTo, v)
	return u
}

// UpdateEffectiveTo sets the "effective_to" field to the value that was provided on create.
func (u *AddonUpsert) UpdateEffectiveTo() *AddonUpsert {
	u.SetExcluded(addon.FieldEffectiveTo)
	return u
}

// ClearEffectiveTo clears the value of the "effective_to" field.
func (u *AddonUpsert) ClearEffectiveTo() *AddonUpsert {
	u.SetNull(addon.FieldEffectiveTo)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *AddonUpsert) SetAnnotations(v map[string]interface{}) *AddonUpsert {
	u.Set(addon.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *AddonUpsert) UpdateAnnotations() *AddonUpsert {
	u.SetExcluded(addon.FieldAnnotations)
	return u
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *AddonUpsert) ClearAnnotations() *AddonUpsert {
	u.SetNull(addon.FieldAnnotations)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Addon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(addon.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AddonUpsertOne) UpdateNewValues() *AddonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(addon.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(addon.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(addon.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Key(); exists {
			s.SetIgnore(addon.FieldKey)
		}
		if _, exists := u.create.mutation.Currency(); exists {
			s.SetIgnore(addon.FieldCurrency)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Addon.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AddonUpsertOne) Ignore() *AddonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddonUpsertOne) DoNothing() *AddonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddonCreate.OnConflict
// documentation for more info.
func (u *AddonUpsertOne) Update(set func(*AddonUpsert)) *AddonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddonUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *AddonUpsertOne) SetMetadata(v map[string]string) *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *AddonUpsertOne) UpdateMetadata() *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *AddonUpsertOne) ClearMetadata() *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AddonUpsertOne) SetUpdatedAt(v time.Time) *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AddonUpsertOne) UpdateUpdatedAt() *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AddonUpsertOne) SetDeletedAt(v time.Time) *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AddonUpsertOne) UpdateDeletedAt() *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AddonUpsertOne) ClearDeletedAt() *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *AddonUpsertOne) SetName(v string) *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AddonUpsertOne) UpdateName() *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *AddonUpsertOne) SetDescription(v string) *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AddonUpsertOne) UpdateDescription() *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AddonUpsertOne) ClearDescription() *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.ClearDescription()
	})
}

// SetVersion sets the "version" field.
func (u *AddonUpsertOne) SetVersion(v int) *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *AddonUpsertOne) AddVersion(v int) *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *AddonUpsertOne) UpdateVersion() *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateVersion()
	})
}

// SetInstanceType sets the "instance_type" field.
func (u *AddonUpsertOne) SetInstanceType(v productcatalog.AddonInstanceType) *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.SetInstanceType(v)
	})
}

// UpdateInstanceType sets the "instance_type" field to the value that was provided on create.
func (u *AddonUpsertOne) UpdateInstanceType() *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateInstanceType()
	})
}

// SetEffectiveFrom sets the "effective_from" field.
func (u *AddonUpsertOne) SetEffectiveFrom(v time.Time) *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.SetEffectiveFrom(v)
	})
}

// UpdateEffectiveFrom sets the "effective_from" field to the value that was provided on create.
func (u *AddonUpsertOne) UpdateEffectiveFrom() *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateEffectiveFrom()
	})
}

// ClearEffectiveFrom clears the value of the "effective_from" field.
func (u *AddonUpsertOne) ClearEffectiveFrom() *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.ClearEffectiveFrom()
	})
}

// SetEffectiveTo sets the "effective_to" field.
func (u *AddonUpsertOne) SetEffectiveTo(v time.Time) *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.SetEffectiveTo(v)
	})
}

// UpdateEffectiveTo sets the "effective_to" field to the value that was provided on create.
func (u *AddonUpsertOne) UpdateEffectiveTo() *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateEffectiveTo()
	})
}

// ClearEffectiveTo clears the value of the "effective_to" field.
func (u *AddonUpsertOne) ClearEffectiveTo() *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.ClearEffectiveTo()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *AddonUpsertOne) SetAnnotations(v map[string]interface{}) *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *AddonUpsertOne) UpdateAnnotations() *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *AddonUpsertOne) ClearAnnotations() *AddonUpsertOne {
	return u.Update(func(s *AddonUpsert) {
		s.ClearAnnotations()
	})
}

// Exec executes the query.
func (u *AddonUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for AddonCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddonUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AddonUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: AddonUpsertOne.ID is not supported by MySQL driver. Use AddonUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AddonUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AddonCreateBulk is the builder for creating many Addon entities in bulk.
type AddonCreateBulk struct {
	config
	err      error
	builders []*AddonCreate
	conflict []sql.ConflictOption
}

// Save creates the Addon entities in the database.
func (acb *AddonCreateBulk) Save(ctx context.Context) ([]*Addon, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Addon, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AddonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AddonCreateBulk) SaveX(ctx context.Context) []*Addon {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AddonCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AddonCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Addon.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddonUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (acb *AddonCreateBulk) OnConflict(opts ...sql.ConflictOption) *AddonUpsertBulk {
	acb.conflict = opts
	return &AddonUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Addon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AddonCreateBulk) OnConflictColumns(columns ...string) *AddonUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AddonUpsertBulk{
		create: acb,
	}
}

// AddonUpsertBulk is the builder for "upsert"-ing
// a bulk of Addon nodes.
type AddonUpsertBulk struct {
	create *AddonCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Addon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(addon.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AddonUpsertBulk) UpdateNewValues() *AddonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(addon.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(addon.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(addon.FieldCreatedAt)
			}
			if _, exists := b.mutation.Key(); exists {
				s.SetIgnore(addon.FieldKey)
			}
			if _, exists := b.mutation.Currency(); exists {
				s.SetIgnore(addon.FieldCurrency)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Addon.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AddonUpsertBulk) Ignore() *AddonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddonUpsertBulk) DoNothing() *AddonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddonCreateBulk.OnConflict
// documentation for more info.
func (u *AddonUpsertBulk) Update(set func(*AddonUpsert)) *AddonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddonUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *AddonUpsertBulk) SetMetadata(v map[string]string) *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *AddonUpsertBulk) UpdateMetadata() *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *AddonUpsertBulk) ClearMetadata() *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AddonUpsertBulk) SetUpdatedAt(v time.Time) *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AddonUpsertBulk) UpdateUpdatedAt() *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AddonUpsertBulk) SetDeletedAt(v time.Time) *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AddonUpsertBulk) UpdateDeletedAt() *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AddonUpsertBulk) ClearDeletedAt() *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *AddonUpsertBulk) SetName(v string) *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AddonUpsertBulk) UpdateName() *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *AddonUpsertBulk) SetDescription(v string) *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AddonUpsertBulk) UpdateDescription() *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AddonUpsertBulk) ClearDescription() *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.ClearDescription()
	})
}

// SetVersion sets the "version" field.
func (u *AddonUpsertBulk) SetVersion(v int) *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *AddonUpsertBulk) AddVersion(v int) *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *AddonUpsertBulk) UpdateVersion() *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateVersion()
	})
}

// SetInstanceType sets the "instance_type" field.
func (u *AddonUpsertBulk) SetInstanceType(v productcatalog.AddonInstanceType) *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.SetInstanceType(v)
	})
}

// UpdateInstanceType sets the "instance_type" field to the value that was provided on create.
func (u *AddonUpsertBulk) UpdateInstanceType() *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateInstanceType()
	})
}

// SetEffectiveFrom sets the "effective_from" field.
func (u *AddonUpsertBulk) SetEffectiveFrom(v time.Time) *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.SetEffectiveFrom(v)
	})
}

// UpdateEffectiveFrom sets the "effective_from" field to the value that was provided on create.
func (u *AddonUpsertBulk) UpdateEffectiveFrom() *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateEffectiveFrom()
	})
}

// ClearEffectiveFrom clears the value of the "effective_from" field.
func (u *AddonUpsertBulk) ClearEffectiveFrom() *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.ClearEffectiveFrom()
	})
}

// SetEffectiveTo sets the "effective_to" field.
func (u *AddonUpsertBulk) SetEffectiveTo(v time.Time) *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.SetEffectiveTo(v)
	})
}

// UpdateEffectiveTo sets the "effective_to" field to the value that was provided on create.
func (u *AddonUpsertBulk) UpdateEffectiveTo() *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateEffectiveTo()
	})
}

// ClearEffectiveTo clears the value of the "effective_to" field.
func (u *AddonUpsertBulk) ClearEffectiveTo() *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.ClearEffectiveTo()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *AddonUpsertBulk) SetAnnotations(v map[string]interface{}) *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *AddonUpsertBulk) UpdateAnnotations() *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *AddonUpsertBulk) ClearAnnotations() *AddonUpsertBulk {
	return u.Update(func(s *AddonUpsert) {
		s.ClearAnnotations()
	})
}

// Exec executes the query.
func (u *AddonUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the AddonCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for AddonCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddonUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
