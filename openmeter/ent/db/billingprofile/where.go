// Code generated by ent, DO NOT EDIT.

package billingprofile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmeterio/openmeter/openmeter/billing/provider"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/pkg/models"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContainsFold(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldNamespace, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldDescription, v))
}

// SupplierAddressCountry applies equality check predicate on the "supplier_address_country" field. It's identical to SupplierAddressCountryEQ.
func SupplierAddressCountry(v models.CountryCode) predicate.BillingProfile {
	vc := string(v)
	return predicate.BillingProfile(sql.FieldEQ(FieldSupplierAddressCountry, vc))
}

// SupplierAddressPostalCode applies equality check predicate on the "supplier_address_postal_code" field. It's identical to SupplierAddressPostalCodeEQ.
func SupplierAddressPostalCode(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldSupplierAddressPostalCode, v))
}

// SupplierAddressState applies equality check predicate on the "supplier_address_state" field. It's identical to SupplierAddressStateEQ.
func SupplierAddressState(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldSupplierAddressState, v))
}

// SupplierAddressCity applies equality check predicate on the "supplier_address_city" field. It's identical to SupplierAddressCityEQ.
func SupplierAddressCity(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldSupplierAddressCity, v))
}

// SupplierAddressLine1 applies equality check predicate on the "supplier_address_line1" field. It's identical to SupplierAddressLine1EQ.
func SupplierAddressLine1(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldSupplierAddressLine1, v))
}

// SupplierAddressLine2 applies equality check predicate on the "supplier_address_line2" field. It's identical to SupplierAddressLine2EQ.
func SupplierAddressLine2(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldSupplierAddressLine2, v))
}

// SupplierAddressPhoneNumber applies equality check predicate on the "supplier_address_phone_number" field. It's identical to SupplierAddressPhoneNumberEQ.
func SupplierAddressPhoneNumber(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldSupplierAddressPhoneNumber, v))
}

// WorkflowConfigID applies equality check predicate on the "workflow_config_id" field. It's identical to WorkflowConfigIDEQ.
func WorkflowConfigID(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldWorkflowConfigID, v))
}

// Default applies equality check predicate on the "default" field. It's identical to DefaultEQ.
func Default(v bool) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldDefault, v))
}

// SupplierName applies equality check predicate on the "supplier_name" field. It's identical to SupplierNameEQ.
func SupplierName(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldSupplierName, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContainsFold(FieldNamespace, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContainsFold(FieldDescription, v))
}

// SupplierAddressCountryEQ applies the EQ predicate on the "supplier_address_country" field.
func SupplierAddressCountryEQ(v models.CountryCode) predicate.BillingProfile {
	vc := string(v)
	return predicate.BillingProfile(sql.FieldEQ(FieldSupplierAddressCountry, vc))
}

// SupplierAddressCountryNEQ applies the NEQ predicate on the "supplier_address_country" field.
func SupplierAddressCountryNEQ(v models.CountryCode) predicate.BillingProfile {
	vc := string(v)
	return predicate.BillingProfile(sql.FieldNEQ(FieldSupplierAddressCountry, vc))
}

// SupplierAddressCountryIn applies the In predicate on the "supplier_address_country" field.
func SupplierAddressCountryIn(vs ...models.CountryCode) predicate.BillingProfile {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.BillingProfile(sql.FieldIn(FieldSupplierAddressCountry, v...))
}

// SupplierAddressCountryNotIn applies the NotIn predicate on the "supplier_address_country" field.
func SupplierAddressCountryNotIn(vs ...models.CountryCode) predicate.BillingProfile {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.BillingProfile(sql.FieldNotIn(FieldSupplierAddressCountry, v...))
}

// SupplierAddressCountryGT applies the GT predicate on the "supplier_address_country" field.
func SupplierAddressCountryGT(v models.CountryCode) predicate.BillingProfile {
	vc := string(v)
	return predicate.BillingProfile(sql.FieldGT(FieldSupplierAddressCountry, vc))
}

// SupplierAddressCountryGTE applies the GTE predicate on the "supplier_address_country" field.
func SupplierAddressCountryGTE(v models.CountryCode) predicate.BillingProfile {
	vc := string(v)
	return predicate.BillingProfile(sql.FieldGTE(FieldSupplierAddressCountry, vc))
}

// SupplierAddressCountryLT applies the LT predicate on the "supplier_address_country" field.
func SupplierAddressCountryLT(v models.CountryCode) predicate.BillingProfile {
	vc := string(v)
	return predicate.BillingProfile(sql.FieldLT(FieldSupplierAddressCountry, vc))
}

// SupplierAddressCountryLTE applies the LTE predicate on the "supplier_address_country" field.
func SupplierAddressCountryLTE(v models.CountryCode) predicate.BillingProfile {
	vc := string(v)
	return predicate.BillingProfile(sql.FieldLTE(FieldSupplierAddressCountry, vc))
}

// SupplierAddressCountryContains applies the Contains predicate on the "supplier_address_country" field.
func SupplierAddressCountryContains(v models.CountryCode) predicate.BillingProfile {
	vc := string(v)
	return predicate.BillingProfile(sql.FieldContains(FieldSupplierAddressCountry, vc))
}

// SupplierAddressCountryHasPrefix applies the HasPrefix predicate on the "supplier_address_country" field.
func SupplierAddressCountryHasPrefix(v models.CountryCode) predicate.BillingProfile {
	vc := string(v)
	return predicate.BillingProfile(sql.FieldHasPrefix(FieldSupplierAddressCountry, vc))
}

// SupplierAddressCountryHasSuffix applies the HasSuffix predicate on the "supplier_address_country" field.
func SupplierAddressCountryHasSuffix(v models.CountryCode) predicate.BillingProfile {
	vc := string(v)
	return predicate.BillingProfile(sql.FieldHasSuffix(FieldSupplierAddressCountry, vc))
}

// SupplierAddressCountryIsNil applies the IsNil predicate on the "supplier_address_country" field.
func SupplierAddressCountryIsNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIsNull(FieldSupplierAddressCountry))
}

// SupplierAddressCountryNotNil applies the NotNil predicate on the "supplier_address_country" field.
func SupplierAddressCountryNotNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotNull(FieldSupplierAddressCountry))
}

// SupplierAddressCountryEqualFold applies the EqualFold predicate on the "supplier_address_country" field.
func SupplierAddressCountryEqualFold(v models.CountryCode) predicate.BillingProfile {
	vc := string(v)
	return predicate.BillingProfile(sql.FieldEqualFold(FieldSupplierAddressCountry, vc))
}

// SupplierAddressCountryContainsFold applies the ContainsFold predicate on the "supplier_address_country" field.
func SupplierAddressCountryContainsFold(v models.CountryCode) predicate.BillingProfile {
	vc := string(v)
	return predicate.BillingProfile(sql.FieldContainsFold(FieldSupplierAddressCountry, vc))
}

// SupplierAddressPostalCodeEQ applies the EQ predicate on the "supplier_address_postal_code" field.
func SupplierAddressPostalCodeEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldSupplierAddressPostalCode, v))
}

// SupplierAddressPostalCodeNEQ applies the NEQ predicate on the "supplier_address_postal_code" field.
func SupplierAddressPostalCodeNEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNEQ(FieldSupplierAddressPostalCode, v))
}

// SupplierAddressPostalCodeIn applies the In predicate on the "supplier_address_postal_code" field.
func SupplierAddressPostalCodeIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIn(FieldSupplierAddressPostalCode, vs...))
}

// SupplierAddressPostalCodeNotIn applies the NotIn predicate on the "supplier_address_postal_code" field.
func SupplierAddressPostalCodeNotIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotIn(FieldSupplierAddressPostalCode, vs...))
}

// SupplierAddressPostalCodeGT applies the GT predicate on the "supplier_address_postal_code" field.
func SupplierAddressPostalCodeGT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGT(FieldSupplierAddressPostalCode, v))
}

// SupplierAddressPostalCodeGTE applies the GTE predicate on the "supplier_address_postal_code" field.
func SupplierAddressPostalCodeGTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGTE(FieldSupplierAddressPostalCode, v))
}

// SupplierAddressPostalCodeLT applies the LT predicate on the "supplier_address_postal_code" field.
func SupplierAddressPostalCodeLT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLT(FieldSupplierAddressPostalCode, v))
}

// SupplierAddressPostalCodeLTE applies the LTE predicate on the "supplier_address_postal_code" field.
func SupplierAddressPostalCodeLTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLTE(FieldSupplierAddressPostalCode, v))
}

// SupplierAddressPostalCodeContains applies the Contains predicate on the "supplier_address_postal_code" field.
func SupplierAddressPostalCodeContains(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContains(FieldSupplierAddressPostalCode, v))
}

// SupplierAddressPostalCodeHasPrefix applies the HasPrefix predicate on the "supplier_address_postal_code" field.
func SupplierAddressPostalCodeHasPrefix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasPrefix(FieldSupplierAddressPostalCode, v))
}

// SupplierAddressPostalCodeHasSuffix applies the HasSuffix predicate on the "supplier_address_postal_code" field.
func SupplierAddressPostalCodeHasSuffix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasSuffix(FieldSupplierAddressPostalCode, v))
}

// SupplierAddressPostalCodeIsNil applies the IsNil predicate on the "supplier_address_postal_code" field.
func SupplierAddressPostalCodeIsNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIsNull(FieldSupplierAddressPostalCode))
}

// SupplierAddressPostalCodeNotNil applies the NotNil predicate on the "supplier_address_postal_code" field.
func SupplierAddressPostalCodeNotNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotNull(FieldSupplierAddressPostalCode))
}

// SupplierAddressPostalCodeEqualFold applies the EqualFold predicate on the "supplier_address_postal_code" field.
func SupplierAddressPostalCodeEqualFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEqualFold(FieldSupplierAddressPostalCode, v))
}

// SupplierAddressPostalCodeContainsFold applies the ContainsFold predicate on the "supplier_address_postal_code" field.
func SupplierAddressPostalCodeContainsFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContainsFold(FieldSupplierAddressPostalCode, v))
}

// SupplierAddressStateEQ applies the EQ predicate on the "supplier_address_state" field.
func SupplierAddressStateEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldSupplierAddressState, v))
}

// SupplierAddressStateNEQ applies the NEQ predicate on the "supplier_address_state" field.
func SupplierAddressStateNEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNEQ(FieldSupplierAddressState, v))
}

// SupplierAddressStateIn applies the In predicate on the "supplier_address_state" field.
func SupplierAddressStateIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIn(FieldSupplierAddressState, vs...))
}

// SupplierAddressStateNotIn applies the NotIn predicate on the "supplier_address_state" field.
func SupplierAddressStateNotIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotIn(FieldSupplierAddressState, vs...))
}

// SupplierAddressStateGT applies the GT predicate on the "supplier_address_state" field.
func SupplierAddressStateGT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGT(FieldSupplierAddressState, v))
}

// SupplierAddressStateGTE applies the GTE predicate on the "supplier_address_state" field.
func SupplierAddressStateGTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGTE(FieldSupplierAddressState, v))
}

// SupplierAddressStateLT applies the LT predicate on the "supplier_address_state" field.
func SupplierAddressStateLT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLT(FieldSupplierAddressState, v))
}

// SupplierAddressStateLTE applies the LTE predicate on the "supplier_address_state" field.
func SupplierAddressStateLTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLTE(FieldSupplierAddressState, v))
}

// SupplierAddressStateContains applies the Contains predicate on the "supplier_address_state" field.
func SupplierAddressStateContains(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContains(FieldSupplierAddressState, v))
}

// SupplierAddressStateHasPrefix applies the HasPrefix predicate on the "supplier_address_state" field.
func SupplierAddressStateHasPrefix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasPrefix(FieldSupplierAddressState, v))
}

// SupplierAddressStateHasSuffix applies the HasSuffix predicate on the "supplier_address_state" field.
func SupplierAddressStateHasSuffix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasSuffix(FieldSupplierAddressState, v))
}

// SupplierAddressStateIsNil applies the IsNil predicate on the "supplier_address_state" field.
func SupplierAddressStateIsNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIsNull(FieldSupplierAddressState))
}

// SupplierAddressStateNotNil applies the NotNil predicate on the "supplier_address_state" field.
func SupplierAddressStateNotNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotNull(FieldSupplierAddressState))
}

// SupplierAddressStateEqualFold applies the EqualFold predicate on the "supplier_address_state" field.
func SupplierAddressStateEqualFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEqualFold(FieldSupplierAddressState, v))
}

// SupplierAddressStateContainsFold applies the ContainsFold predicate on the "supplier_address_state" field.
func SupplierAddressStateContainsFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContainsFold(FieldSupplierAddressState, v))
}

// SupplierAddressCityEQ applies the EQ predicate on the "supplier_address_city" field.
func SupplierAddressCityEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldSupplierAddressCity, v))
}

// SupplierAddressCityNEQ applies the NEQ predicate on the "supplier_address_city" field.
func SupplierAddressCityNEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNEQ(FieldSupplierAddressCity, v))
}

// SupplierAddressCityIn applies the In predicate on the "supplier_address_city" field.
func SupplierAddressCityIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIn(FieldSupplierAddressCity, vs...))
}

// SupplierAddressCityNotIn applies the NotIn predicate on the "supplier_address_city" field.
func SupplierAddressCityNotIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotIn(FieldSupplierAddressCity, vs...))
}

// SupplierAddressCityGT applies the GT predicate on the "supplier_address_city" field.
func SupplierAddressCityGT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGT(FieldSupplierAddressCity, v))
}

// SupplierAddressCityGTE applies the GTE predicate on the "supplier_address_city" field.
func SupplierAddressCityGTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGTE(FieldSupplierAddressCity, v))
}

// SupplierAddressCityLT applies the LT predicate on the "supplier_address_city" field.
func SupplierAddressCityLT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLT(FieldSupplierAddressCity, v))
}

// SupplierAddressCityLTE applies the LTE predicate on the "supplier_address_city" field.
func SupplierAddressCityLTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLTE(FieldSupplierAddressCity, v))
}

// SupplierAddressCityContains applies the Contains predicate on the "supplier_address_city" field.
func SupplierAddressCityContains(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContains(FieldSupplierAddressCity, v))
}

// SupplierAddressCityHasPrefix applies the HasPrefix predicate on the "supplier_address_city" field.
func SupplierAddressCityHasPrefix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasPrefix(FieldSupplierAddressCity, v))
}

// SupplierAddressCityHasSuffix applies the HasSuffix predicate on the "supplier_address_city" field.
func SupplierAddressCityHasSuffix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasSuffix(FieldSupplierAddressCity, v))
}

// SupplierAddressCityIsNil applies the IsNil predicate on the "supplier_address_city" field.
func SupplierAddressCityIsNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIsNull(FieldSupplierAddressCity))
}

// SupplierAddressCityNotNil applies the NotNil predicate on the "supplier_address_city" field.
func SupplierAddressCityNotNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotNull(FieldSupplierAddressCity))
}

// SupplierAddressCityEqualFold applies the EqualFold predicate on the "supplier_address_city" field.
func SupplierAddressCityEqualFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEqualFold(FieldSupplierAddressCity, v))
}

// SupplierAddressCityContainsFold applies the ContainsFold predicate on the "supplier_address_city" field.
func SupplierAddressCityContainsFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContainsFold(FieldSupplierAddressCity, v))
}

// SupplierAddressLine1EQ applies the EQ predicate on the "supplier_address_line1" field.
func SupplierAddressLine1EQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldSupplierAddressLine1, v))
}

// SupplierAddressLine1NEQ applies the NEQ predicate on the "supplier_address_line1" field.
func SupplierAddressLine1NEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNEQ(FieldSupplierAddressLine1, v))
}

// SupplierAddressLine1In applies the In predicate on the "supplier_address_line1" field.
func SupplierAddressLine1In(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIn(FieldSupplierAddressLine1, vs...))
}

// SupplierAddressLine1NotIn applies the NotIn predicate on the "supplier_address_line1" field.
func SupplierAddressLine1NotIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotIn(FieldSupplierAddressLine1, vs...))
}

// SupplierAddressLine1GT applies the GT predicate on the "supplier_address_line1" field.
func SupplierAddressLine1GT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGT(FieldSupplierAddressLine1, v))
}

// SupplierAddressLine1GTE applies the GTE predicate on the "supplier_address_line1" field.
func SupplierAddressLine1GTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGTE(FieldSupplierAddressLine1, v))
}

// SupplierAddressLine1LT applies the LT predicate on the "supplier_address_line1" field.
func SupplierAddressLine1LT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLT(FieldSupplierAddressLine1, v))
}

// SupplierAddressLine1LTE applies the LTE predicate on the "supplier_address_line1" field.
func SupplierAddressLine1LTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLTE(FieldSupplierAddressLine1, v))
}

// SupplierAddressLine1Contains applies the Contains predicate on the "supplier_address_line1" field.
func SupplierAddressLine1Contains(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContains(FieldSupplierAddressLine1, v))
}

// SupplierAddressLine1HasPrefix applies the HasPrefix predicate on the "supplier_address_line1" field.
func SupplierAddressLine1HasPrefix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasPrefix(FieldSupplierAddressLine1, v))
}

// SupplierAddressLine1HasSuffix applies the HasSuffix predicate on the "supplier_address_line1" field.
func SupplierAddressLine1HasSuffix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasSuffix(FieldSupplierAddressLine1, v))
}

// SupplierAddressLine1IsNil applies the IsNil predicate on the "supplier_address_line1" field.
func SupplierAddressLine1IsNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIsNull(FieldSupplierAddressLine1))
}

// SupplierAddressLine1NotNil applies the NotNil predicate on the "supplier_address_line1" field.
func SupplierAddressLine1NotNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotNull(FieldSupplierAddressLine1))
}

// SupplierAddressLine1EqualFold applies the EqualFold predicate on the "supplier_address_line1" field.
func SupplierAddressLine1EqualFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEqualFold(FieldSupplierAddressLine1, v))
}

// SupplierAddressLine1ContainsFold applies the ContainsFold predicate on the "supplier_address_line1" field.
func SupplierAddressLine1ContainsFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContainsFold(FieldSupplierAddressLine1, v))
}

// SupplierAddressLine2EQ applies the EQ predicate on the "supplier_address_line2" field.
func SupplierAddressLine2EQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldSupplierAddressLine2, v))
}

// SupplierAddressLine2NEQ applies the NEQ predicate on the "supplier_address_line2" field.
func SupplierAddressLine2NEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNEQ(FieldSupplierAddressLine2, v))
}

// SupplierAddressLine2In applies the In predicate on the "supplier_address_line2" field.
func SupplierAddressLine2In(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIn(FieldSupplierAddressLine2, vs...))
}

// SupplierAddressLine2NotIn applies the NotIn predicate on the "supplier_address_line2" field.
func SupplierAddressLine2NotIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotIn(FieldSupplierAddressLine2, vs...))
}

// SupplierAddressLine2GT applies the GT predicate on the "supplier_address_line2" field.
func SupplierAddressLine2GT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGT(FieldSupplierAddressLine2, v))
}

// SupplierAddressLine2GTE applies the GTE predicate on the "supplier_address_line2" field.
func SupplierAddressLine2GTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGTE(FieldSupplierAddressLine2, v))
}

// SupplierAddressLine2LT applies the LT predicate on the "supplier_address_line2" field.
func SupplierAddressLine2LT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLT(FieldSupplierAddressLine2, v))
}

// SupplierAddressLine2LTE applies the LTE predicate on the "supplier_address_line2" field.
func SupplierAddressLine2LTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLTE(FieldSupplierAddressLine2, v))
}

// SupplierAddressLine2Contains applies the Contains predicate on the "supplier_address_line2" field.
func SupplierAddressLine2Contains(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContains(FieldSupplierAddressLine2, v))
}

// SupplierAddressLine2HasPrefix applies the HasPrefix predicate on the "supplier_address_line2" field.
func SupplierAddressLine2HasPrefix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasPrefix(FieldSupplierAddressLine2, v))
}

// SupplierAddressLine2HasSuffix applies the HasSuffix predicate on the "supplier_address_line2" field.
func SupplierAddressLine2HasSuffix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasSuffix(FieldSupplierAddressLine2, v))
}

// SupplierAddressLine2IsNil applies the IsNil predicate on the "supplier_address_line2" field.
func SupplierAddressLine2IsNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIsNull(FieldSupplierAddressLine2))
}

// SupplierAddressLine2NotNil applies the NotNil predicate on the "supplier_address_line2" field.
func SupplierAddressLine2NotNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotNull(FieldSupplierAddressLine2))
}

// SupplierAddressLine2EqualFold applies the EqualFold predicate on the "supplier_address_line2" field.
func SupplierAddressLine2EqualFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEqualFold(FieldSupplierAddressLine2, v))
}

// SupplierAddressLine2ContainsFold applies the ContainsFold predicate on the "supplier_address_line2" field.
func SupplierAddressLine2ContainsFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContainsFold(FieldSupplierAddressLine2, v))
}

// SupplierAddressPhoneNumberEQ applies the EQ predicate on the "supplier_address_phone_number" field.
func SupplierAddressPhoneNumberEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldSupplierAddressPhoneNumber, v))
}

// SupplierAddressPhoneNumberNEQ applies the NEQ predicate on the "supplier_address_phone_number" field.
func SupplierAddressPhoneNumberNEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNEQ(FieldSupplierAddressPhoneNumber, v))
}

// SupplierAddressPhoneNumberIn applies the In predicate on the "supplier_address_phone_number" field.
func SupplierAddressPhoneNumberIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIn(FieldSupplierAddressPhoneNumber, vs...))
}

// SupplierAddressPhoneNumberNotIn applies the NotIn predicate on the "supplier_address_phone_number" field.
func SupplierAddressPhoneNumberNotIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotIn(FieldSupplierAddressPhoneNumber, vs...))
}

// SupplierAddressPhoneNumberGT applies the GT predicate on the "supplier_address_phone_number" field.
func SupplierAddressPhoneNumberGT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGT(FieldSupplierAddressPhoneNumber, v))
}

// SupplierAddressPhoneNumberGTE applies the GTE predicate on the "supplier_address_phone_number" field.
func SupplierAddressPhoneNumberGTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGTE(FieldSupplierAddressPhoneNumber, v))
}

// SupplierAddressPhoneNumberLT applies the LT predicate on the "supplier_address_phone_number" field.
func SupplierAddressPhoneNumberLT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLT(FieldSupplierAddressPhoneNumber, v))
}

// SupplierAddressPhoneNumberLTE applies the LTE predicate on the "supplier_address_phone_number" field.
func SupplierAddressPhoneNumberLTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLTE(FieldSupplierAddressPhoneNumber, v))
}

// SupplierAddressPhoneNumberContains applies the Contains predicate on the "supplier_address_phone_number" field.
func SupplierAddressPhoneNumberContains(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContains(FieldSupplierAddressPhoneNumber, v))
}

// SupplierAddressPhoneNumberHasPrefix applies the HasPrefix predicate on the "supplier_address_phone_number" field.
func SupplierAddressPhoneNumberHasPrefix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasPrefix(FieldSupplierAddressPhoneNumber, v))
}

// SupplierAddressPhoneNumberHasSuffix applies the HasSuffix predicate on the "supplier_address_phone_number" field.
func SupplierAddressPhoneNumberHasSuffix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasSuffix(FieldSupplierAddressPhoneNumber, v))
}

// SupplierAddressPhoneNumberIsNil applies the IsNil predicate on the "supplier_address_phone_number" field.
func SupplierAddressPhoneNumberIsNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIsNull(FieldSupplierAddressPhoneNumber))
}

// SupplierAddressPhoneNumberNotNil applies the NotNil predicate on the "supplier_address_phone_number" field.
func SupplierAddressPhoneNumberNotNil() predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotNull(FieldSupplierAddressPhoneNumber))
}

// SupplierAddressPhoneNumberEqualFold applies the EqualFold predicate on the "supplier_address_phone_number" field.
func SupplierAddressPhoneNumberEqualFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEqualFold(FieldSupplierAddressPhoneNumber, v))
}

// SupplierAddressPhoneNumberContainsFold applies the ContainsFold predicate on the "supplier_address_phone_number" field.
func SupplierAddressPhoneNumberContainsFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContainsFold(FieldSupplierAddressPhoneNumber, v))
}

// TaxProviderEQ applies the EQ predicate on the "tax_provider" field.
func TaxProviderEQ(v provider.TaxProvider) predicate.BillingProfile {
	vc := v
	return predicate.BillingProfile(sql.FieldEQ(FieldTaxProvider, vc))
}

// TaxProviderNEQ applies the NEQ predicate on the "tax_provider" field.
func TaxProviderNEQ(v provider.TaxProvider) predicate.BillingProfile {
	vc := v
	return predicate.BillingProfile(sql.FieldNEQ(FieldTaxProvider, vc))
}

// TaxProviderIn applies the In predicate on the "tax_provider" field.
func TaxProviderIn(vs ...provider.TaxProvider) predicate.BillingProfile {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BillingProfile(sql.FieldIn(FieldTaxProvider, v...))
}

// TaxProviderNotIn applies the NotIn predicate on the "tax_provider" field.
func TaxProviderNotIn(vs ...provider.TaxProvider) predicate.BillingProfile {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BillingProfile(sql.FieldNotIn(FieldTaxProvider, v...))
}

// InvoicingProviderEQ applies the EQ predicate on the "invoicing_provider" field.
func InvoicingProviderEQ(v provider.InvoicingProvider) predicate.BillingProfile {
	vc := v
	return predicate.BillingProfile(sql.FieldEQ(FieldInvoicingProvider, vc))
}

// InvoicingProviderNEQ applies the NEQ predicate on the "invoicing_provider" field.
func InvoicingProviderNEQ(v provider.InvoicingProvider) predicate.BillingProfile {
	vc := v
	return predicate.BillingProfile(sql.FieldNEQ(FieldInvoicingProvider, vc))
}

// InvoicingProviderIn applies the In predicate on the "invoicing_provider" field.
func InvoicingProviderIn(vs ...provider.InvoicingProvider) predicate.BillingProfile {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BillingProfile(sql.FieldIn(FieldInvoicingProvider, v...))
}

// InvoicingProviderNotIn applies the NotIn predicate on the "invoicing_provider" field.
func InvoicingProviderNotIn(vs ...provider.InvoicingProvider) predicate.BillingProfile {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BillingProfile(sql.FieldNotIn(FieldInvoicingProvider, v...))
}

// PaymentProviderEQ applies the EQ predicate on the "payment_provider" field.
func PaymentProviderEQ(v provider.PaymentProvider) predicate.BillingProfile {
	vc := v
	return predicate.BillingProfile(sql.FieldEQ(FieldPaymentProvider, vc))
}

// PaymentProviderNEQ applies the NEQ predicate on the "payment_provider" field.
func PaymentProviderNEQ(v provider.PaymentProvider) predicate.BillingProfile {
	vc := v
	return predicate.BillingProfile(sql.FieldNEQ(FieldPaymentProvider, vc))
}

// PaymentProviderIn applies the In predicate on the "payment_provider" field.
func PaymentProviderIn(vs ...provider.PaymentProvider) predicate.BillingProfile {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BillingProfile(sql.FieldIn(FieldPaymentProvider, v...))
}

// PaymentProviderNotIn applies the NotIn predicate on the "payment_provider" field.
func PaymentProviderNotIn(vs ...provider.PaymentProvider) predicate.BillingProfile {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BillingProfile(sql.FieldNotIn(FieldPaymentProvider, v...))
}

// WorkflowConfigIDEQ applies the EQ predicate on the "workflow_config_id" field.
func WorkflowConfigIDEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDNEQ applies the NEQ predicate on the "workflow_config_id" field.
func WorkflowConfigIDNEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNEQ(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDIn applies the In predicate on the "workflow_config_id" field.
func WorkflowConfigIDIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIn(FieldWorkflowConfigID, vs...))
}

// WorkflowConfigIDNotIn applies the NotIn predicate on the "workflow_config_id" field.
func WorkflowConfigIDNotIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotIn(FieldWorkflowConfigID, vs...))
}

// WorkflowConfigIDGT applies the GT predicate on the "workflow_config_id" field.
func WorkflowConfigIDGT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGT(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDGTE applies the GTE predicate on the "workflow_config_id" field.
func WorkflowConfigIDGTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGTE(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDLT applies the LT predicate on the "workflow_config_id" field.
func WorkflowConfigIDLT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLT(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDLTE applies the LTE predicate on the "workflow_config_id" field.
func WorkflowConfigIDLTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLTE(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDContains applies the Contains predicate on the "workflow_config_id" field.
func WorkflowConfigIDContains(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContains(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDHasPrefix applies the HasPrefix predicate on the "workflow_config_id" field.
func WorkflowConfigIDHasPrefix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasPrefix(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDHasSuffix applies the HasSuffix predicate on the "workflow_config_id" field.
func WorkflowConfigIDHasSuffix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasSuffix(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDEqualFold applies the EqualFold predicate on the "workflow_config_id" field.
func WorkflowConfigIDEqualFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEqualFold(FieldWorkflowConfigID, v))
}

// WorkflowConfigIDContainsFold applies the ContainsFold predicate on the "workflow_config_id" field.
func WorkflowConfigIDContainsFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContainsFold(FieldWorkflowConfigID, v))
}

// DefaultEQ applies the EQ predicate on the "default" field.
func DefaultEQ(v bool) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldDefault, v))
}

// DefaultNEQ applies the NEQ predicate on the "default" field.
func DefaultNEQ(v bool) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNEQ(FieldDefault, v))
}

// SupplierNameEQ applies the EQ predicate on the "supplier_name" field.
func SupplierNameEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEQ(FieldSupplierName, v))
}

// SupplierNameNEQ applies the NEQ predicate on the "supplier_name" field.
func SupplierNameNEQ(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNEQ(FieldSupplierName, v))
}

// SupplierNameIn applies the In predicate on the "supplier_name" field.
func SupplierNameIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldIn(FieldSupplierName, vs...))
}

// SupplierNameNotIn applies the NotIn predicate on the "supplier_name" field.
func SupplierNameNotIn(vs ...string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldNotIn(FieldSupplierName, vs...))
}

// SupplierNameGT applies the GT predicate on the "supplier_name" field.
func SupplierNameGT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGT(FieldSupplierName, v))
}

// SupplierNameGTE applies the GTE predicate on the "supplier_name" field.
func SupplierNameGTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldGTE(FieldSupplierName, v))
}

// SupplierNameLT applies the LT predicate on the "supplier_name" field.
func SupplierNameLT(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLT(FieldSupplierName, v))
}

// SupplierNameLTE applies the LTE predicate on the "supplier_name" field.
func SupplierNameLTE(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldLTE(FieldSupplierName, v))
}

// SupplierNameContains applies the Contains predicate on the "supplier_name" field.
func SupplierNameContains(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContains(FieldSupplierName, v))
}

// SupplierNameHasPrefix applies the HasPrefix predicate on the "supplier_name" field.
func SupplierNameHasPrefix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasPrefix(FieldSupplierName, v))
}

// SupplierNameHasSuffix applies the HasSuffix predicate on the "supplier_name" field.
func SupplierNameHasSuffix(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldHasSuffix(FieldSupplierName, v))
}

// SupplierNameEqualFold applies the EqualFold predicate on the "supplier_name" field.
func SupplierNameEqualFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldEqualFold(FieldSupplierName, v))
}

// SupplierNameContainsFold applies the ContainsFold predicate on the "supplier_name" field.
func SupplierNameContainsFold(v string) predicate.BillingProfile {
	return predicate.BillingProfile(sql.FieldContainsFold(FieldSupplierName, v))
}

// HasBillingInvoices applies the HasEdge predicate on the "billing_invoices" edge.
func HasBillingInvoices() predicate.BillingProfile {
	return predicate.BillingProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BillingInvoicesTable, BillingInvoicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBillingInvoicesWith applies the HasEdge predicate on the "billing_invoices" edge with a given conditions (other predicates).
func HasBillingInvoicesWith(preds ...predicate.BillingInvoice) predicate.BillingProfile {
	return predicate.BillingProfile(func(s *sql.Selector) {
		step := newBillingInvoicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBillingCustomerOverride applies the HasEdge predicate on the "billing_customer_override" edge.
func HasBillingCustomerOverride() predicate.BillingProfile {
	return predicate.BillingProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BillingCustomerOverrideTable, BillingCustomerOverrideColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBillingCustomerOverrideWith applies the HasEdge predicate on the "billing_customer_override" edge with a given conditions (other predicates).
func HasBillingCustomerOverrideWith(preds ...predicate.BillingCustomerOverride) predicate.BillingProfile {
	return predicate.BillingProfile(func(s *sql.Selector) {
		step := newBillingCustomerOverrideStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkflowConfig applies the HasEdge predicate on the "workflow_config" edge.
func HasWorkflowConfig() predicate.BillingProfile {
	return predicate.BillingProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, WorkflowConfigTable, WorkflowConfigColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkflowConfigWith applies the HasEdge predicate on the "workflow_config" edge with a given conditions (other predicates).
func HasWorkflowConfigWith(preds ...predicate.BillingWorkflowConfig) predicate.BillingProfile {
	return predicate.BillingProfile(func(s *sql.Selector) {
		step := newWorkflowConfigStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BillingProfile) predicate.BillingProfile {
	return predicate.BillingProfile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BillingProfile) predicate.BillingProfile {
	return predicate.BillingProfile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BillingProfile) predicate.BillingProfile {
	return predicate.BillingProfile(sql.NotPredicates(p))
}
