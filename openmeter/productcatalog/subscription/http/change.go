package httpdriver

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/openmeterio/openmeter/api"
	"github.com/openmeterio/openmeter/openmeter/productcatalog/plan"
	planhttp "github.com/openmeterio/openmeter/openmeter/productcatalog/plan/httpdriver"
	plansubscription "github.com/openmeterio/openmeter/openmeter/productcatalog/subscription"
	"github.com/openmeterio/openmeter/openmeter/subscription"
	"github.com/openmeterio/openmeter/pkg/convert"
	"github.com/openmeterio/openmeter/pkg/framework/commonhttp"
	"github.com/openmeterio/openmeter/pkg/framework/transport/httptransport"
	"github.com/openmeterio/openmeter/pkg/models"
)

type (
	ChangeSubscriptionRequest = struct {
		id      models.NamespacedID
		inp     subscription.ChangeSubscriptionWorkflowInput
		planRef *plansubscription.PlanRefInput
		plan    *plan.CreatePlanInput
	}
	ChangeSubscriptionResponse = api.SubscriptionChangeResponseBody
	ChangeSubscriptionParams   = struct {
		ID string
	}
	ChangeSubscriptionHandler = httptransport.HandlerWithArgs[ChangeSubscriptionRequest, ChangeSubscriptionResponse, ChangeSubscriptionParams]
)

func (h *handler) ChangeSubscription() ChangeSubscriptionHandler {
	return httptransport.NewHandlerWithArgs(
		func(ctx context.Context, r *http.Request, params ChangeSubscriptionParams) (ChangeSubscriptionRequest, error) {
			var body api.ChangeSubscriptionJSONRequestBody

			if err := commonhttp.JSONRequestBodyDecoder(r, &body); err != nil {
				return ChangeSubscriptionRequest{}, err
			}

			ns, err := h.resolveNamespace(ctx)
			if err != nil {
				return ChangeSubscriptionRequest{}, err
			}

			// Any transformation function generated by the API will succeed if the body is serializable, so we have to check for the presence of
			// fields to determine what body type we're dealing with
			type testForCustomPlan struct {
				CustomPlan any `json:"customPlan"`
			}

			var t testForCustomPlan

			bodyBytes, err := json.Marshal(body)
			if err != nil {
				return ChangeSubscriptionRequest{}, fmt.Errorf("failed to marshal request body: %w", err)
			}

			if err := json.Unmarshal(bodyBytes, &t); err != nil {
				return ChangeSubscriptionRequest{}, fmt.Errorf("failed to unmarshal request body: %w", err)
			}

			if t.CustomPlan != nil {
				// Changing to a custom Plan
				parsedBody, err := body.AsCustomSubscriptionChange()
				if err != nil {
					return ChangeSubscriptionRequest{}, fmt.Errorf("failed to parse custom plan: %w", err)
				}

				req, err := planhttp.AsCreatePlanRequest(parsedBody.CustomPlan, ns)
				if err != nil {
					return ChangeSubscriptionRequest{}, fmt.Errorf("failed to create plan request: %w", err)
				}

				return ChangeSubscriptionRequest{
					id:   models.NamespacedID{Namespace: ns, ID: params.ID},
					plan: &req,
					inp: subscription.ChangeSubscriptionWorkflowInput{
						ActiveFrom:  parsedBody.ActiveFrom,
						Name:        req.Name,
						Description: req.Description,
						AnnotatedModel: models.AnnotatedModel{
							Metadata: req.Metadata,
						},
					},
				}, nil
			} else {
				// Changing to a Plan
				parsedBody, err := body.AsPlanSubscriptionChange()
				if err != nil {
					return ChangeSubscriptionRequest{}, fmt.Errorf("failed to parse plan: %w", err)
				}

				return ChangeSubscriptionRequest{
					id: models.NamespacedID{Namespace: ns, ID: params.ID},
					planRef: &plansubscription.PlanRefInput{
						Key:     parsedBody.Plan.Key,
						Version: parsedBody.Plan.Version,
					},
					inp: subscription.ChangeSubscriptionWorkflowInput{
						ActiveFrom: parsedBody.ActiveFrom,
						AnnotatedModel: models.AnnotatedModel{
							Metadata: convert.DerefHeaderPtr[string](parsedBody.Metadata),
						},
						Name:        parsedBody.Name,
						Description: parsedBody.Description,
					},
				}, nil
			}
		},
		func(ctx context.Context, request ChangeSubscriptionRequest) (ChangeSubscriptionResponse, error) {
			// First, lets map the input to a plan
			var plan subscription.Plan

			if request.plan != nil {
				p, err := h.SubscrpiptionPlanAdapter.FromInput(ctx, request.id.Namespace, *request.plan)
				if err != nil {
					return ChangeSubscriptionResponse{}, err
				}

				plan = p
			} else if request.planRef != nil {
				p, err := h.SubscrpiptionPlanAdapter.GetVersion(ctx, request.id.Namespace, *request.planRef)
				if err != nil {
					return ChangeSubscriptionResponse{}, err
				}

				plan = p
			} else {
				return ChangeSubscriptionResponse{}, fmt.Errorf("plan or plan reference must be provided")
			}

			// Then let's create the subscription from the plan
			curr, new, err := h.SubscriptionWorkflowService.ChangeToPlan(ctx, request.id, request.inp, plan)
			if err != nil {
				return ChangeSubscriptionResponse{}, err
			}

			v, err := MapSubscriptionViewToAPI(new)

			return ChangeSubscriptionResponse{
				Current: MapSubscriptionToAPI(curr),
				New:     v,
			}, err
		},
		commonhttp.JSONResponseEncoderWithStatus[ChangeSubscriptionResponse](http.StatusOK),
		httptransport.AppendOptions(
			h.Options,
			httptransport.WithOperationName("changeSubscription"),
			httptransport.WithErrorEncoder(errorEncoder()),
		)...,
	)
}
