name: CI

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read

env:
  DAGGER_VERSION: 0.18.14

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cache-rebuild:
    name: Rebuild GitHub Actions Caches
    runs-on: depot-ubuntu-latest-4
    # To test e2e feel free to comment this out for a branch, then a branch specific cache will be created
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Nix
        uses: nixbuild/nix-quick-install-action@63ca48f939ee3b8d835f4126562537df0fee5b91 # v32
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_conf: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            keep-env-derivations = true
            keep-outputs = true

      - name: Build nix environment
        run: |
          nix flake check --impure
          nix develop --impure .#ci
      - name: Save Nix store cache
        uses: nix-community/cache-nix-action/save@135667ec418502fa5a3598af6fb9eb733888ce6a  # v6.1.3
        with:
          primary-key: ${{ runner.os }}-openmeter-nix-build-${{ github.ref_name }}-${{ hashFiles('flake.*') }}
          save: 'true'

      - name: Populate go caches - go mod download
        run: nix develop --impure .#ci -c go mod download

      - name: Save go caches - go mod
        uses: actions/cache/save@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: .devenv/state/go
          key: ${{ runner.os }}-openmeter-go-modules-${{ github.ref_name }}-${{ hashFiles('flake.*', 'go.*', '.github/workflows/*.yaml') }}

  build:
    name: Build
    runs-on: depot-ubuntu-latest-8

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Nix
        uses: nixbuild/nix-quick-install-action@63ca48f939ee3b8d835f4126562537df0fee5b91 # v32
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_conf: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            keep-env-derivations = true
            keep-outputs = true

      - name: Restore Nix store
        uses: nix-community/cache-nix-action/restore@135667ec418502fa5a3598af6fb9eb733888ce6a  # v6.1.3
        with:
          primary-key: ${{ runner.os }}-openmeter-nix-build-${{ github.ref_name }}-${{ hashFiles('flake.*') }}
          restore-prefixes-first-match: |
            ${{ runner.os }}-openmeter-nix-build-${{ github.ref_name }}-
            ${{ runner.os }}-openmeter-nix-build-main-${{ hashFiles('flake.*') }}
            ${{ runner.os }}-openmeter-nix-build-main-
            ${{ runner.os }}-openmeter-nix-build-

      - name: Restore go.mod cache if exists
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: .devenv/state/go
          key: ${{ runner.os }}-openmeter-go-modules-${{ github.ref_name }}-${{ hashFiles('flake.*', 'go.*', '.github/workflows/*.yaml') }}
          # Prefer to restore the branch cache over the main cache
          restore-keys: |
            ${{ runner.os }}-openmeter-go-modules-${{ github.ref_name }}-
            ${{ runner.os }}-openmeter-go-modules-main-${{ hashFiles('flake.*', 'go.*', '.github/workflows/*.yaml') }}
            ${{ runner.os }}-openmeter-go-modules-main

      - name: Validate Nix flake
        run: nix flake check --impure

      - name: Build components
        run: nix develop --impure .#ci -c make -j 10 build

      - name: Validate commit messages
        run: |
          nix develop --impure .#ci -c pre-commit run -a
          nix develop --impure .#ci -c pre-commit run --hook-stage manual

  test:
    name: Test
    runs-on: depot-ubuntu-latest-8

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Let's start docker-compose early so that by the time we have the nix env set up it's already running
      - name: Start docker-compose dependencies
        run: |
          docker compose up postgres svix redis -d

      - name: Set up Nix
        uses: nixbuild/nix-quick-install-action@63ca48f939ee3b8d835f4126562537df0fee5b91 # v32
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_conf: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            keep-env-derivations = true
            keep-outputs = true

      - name: Restore Nix store
        uses: nix-community/cache-nix-action/restore@135667ec418502fa5a3598af6fb9eb733888ce6a  # v6.1.3
        with:
          primary-key: ${{ runner.os }}-openmeter-nix-build-${{ github.ref_name }}-${{ hashFiles('flake.*') }}
          restore-prefixes-first-match: |
            ${{ runner.os }}-openmeter-nix-build-${{ github.ref_name }}-
            ${{ runner.os }}-openmeter-nix-build-main-${{ hashFiles('flake.*') }}
            ${{ runner.os }}-openmeter-nix-build-main-
            ${{ runner.os }}-openmeter-nix-build-

      - name: Upsert Nix store
        run: nix develop --impure .#ci

      # This shaves off 5s or so
      - name: Restore go.mod cache if exists
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: .devenv/state/go
          key: ${{ runner.os }}-openmeter-go-modules-${{ github.ref_name }}-${{ hashFiles('flake.*', 'go.*', '.github/workflows/*.yaml') }}
          # Prefer to restore the branch cache over the main cache
          restore-keys: |
            ${{ runner.os }}-openmeter-go-modules-${{ github.ref_name }}-
            ${{ runner.os }}-openmeter-go-modules-main-${{ hashFiles('flake.*', 'go.*', '.github/workflows/*.yaml') }}
            ${{ runner.os }}-openmeter-go-modules-main

      - name: Wait for dependencies to be ready
        run: |
          ./tools/wait-for-compose.sh postgres svix redis

      - name: Run tests
        env:
          SVIX_HOST: localhost
          # Dev JWT secret, non-sensitive
          SVIX_JWT_SECRET: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE3MjI5NzYyNzMsImV4cCI6MjAzODMzNjI3MywibmJmIjoxNzIyOTc2MjczLCJpc3MiOiJzdml4LXNlcnZlciIsInN1YiI6Im9yZ18yM3JiOFlkR3FNVDBxSXpwZ0d3ZFhmSGlyTXUifQ.PomP6JWRI62W5N4GtNdJm2h635Q5F54eij0J3BU-_Ds
        # count=1 is needed to force retest
        run: |
          nix develop --impure .#ci -c go test -p 128 -tags=dynamic -parallel 16 -count=1 ./...

      - name: Stop docker-compose dependencies
        if: always()
        run: |
          docker compose down -v

  migrations:
    name: Migration Checks
    runs-on: depot-ubuntu-latest-8

    steps:
      # Required as a workaround for Dagger to properly detect Git metadata
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # Needed to compare against base branch

      - name: Run pipeline
        uses: dagger/dagger-for-github@e47aba410ef9bb9ed81a4d2a97df31061e5e842e # v8.0.0
        with:
          verb: call
          args: migrate check
          cloud-token: ${{ secrets.DAGGER_CLOUD_NO_CACHE_TOKEN }}
          version: ${{ env.DAGGER_VERSION }}

      - name: Export Dagger Engine logs
        id: export-dagger-engine-logs
        run: docker logs $(docker container list --all --filter 'name=^dagger-engine-*' --format '{{.Names}}') > engine.stdout.log 2> engine.stderr.log
        if: always()
        continue-on-error: true

      - name: Upload Dagger Engine logs as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always() && steps.export-dagger-engine-logs.outcome == 'success'
        with:
          name: "[${{ github.job }}] Dagger Engine logs"
          path: |
            engine.stdout.log
            engine.stderr.log
          retention-days: 14

  lint:
    name: Lint
    runs-on: depot-ubuntu-latest-8,dagger=0.18.14

    steps:
      # Required as a workaround for Dagger to properly detect Git metadata
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Run pipeline
        run: dagger call lint all

      - name: Export Dagger Engine logs
        id: export-dagger-engine-logs
        run: docker logs $(docker container list --all --filter 'name=^dagger-engine-*' --format '{{.Names}}') > engine.stdout.log 2> engine.stderr.log
        if: always()
        continue-on-error: true

      - name: Upload Dagger Engine logs as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always() && steps.export-dagger-engine-logs.outcome == 'success'
        with:
          name: "[${{ github.job }}] Dagger Engine logs"
          path: |
            engine.stdout.log
            engine.stderr.log
          retention-days: 14

  artifacts:
    name: Artifacts
    uses: ./.github/workflows/artifacts.yaml
    with:
      publish: ${{ github.event_name == 'push' }}
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

  dependency-review:
    name: Dependency review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Dependency Review
        uses: actions/dependency-review-action@da24556b548a50705dd671f47852072ea4c105d9 # v4.7.1

  fossa-scan:
    name: FOSSA Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Run FOSSA Scan
        uses: fossas/fossa-action@3ebcea1862c6ffbd5cf1b4d0bd6b3fe7bd6f2cac # v1.7.0
        with:
          api-key: ${{secrets.FOSSA_API_KEY}}

  quickstart:
    name: Quickstart
    runs-on: depot-ubuntu-latest-8

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Launch Docker Compose
        run: docker compose -f docker-compose.yaml -f docker-compose.ci.yaml up -d
        working-directory: quickstart

      - name: Check container health
        run: docker inspect --format "{{json .State.Health }}" $(docker container list --all --filter 'name=^*-openmeter-*' --format '{{.Names}}')
        if: always()
        continue-on-error: true

      - name: Wait for worker to become ready
        run: curl --retry 10 --retry-max-time 120 --retry-all-errors http://localhost:10000/healthz

      - name: Run tests
        uses: dagger/dagger-for-github@e47aba410ef9bb9ed81a4d2a97df31061e5e842e # v8.0.0
        with:
          verb: call
          args: quickstart-test --service tcp://localhost:8888 --port 8888
          cloud-token: ${{ secrets.DAGGER_CLOUD_NO_CACHE_TOKEN }}
          version: ${{ env.DAGGER_VERSION }}

      - name: Export Container Logs
        id: export-container-logs
        run: docker logs $(docker container list --all --filter 'name=^*-openmeter-*' --format '{{.Names}}') > container.stdout.log 2> container.stderr.log
        if: always()
        continue-on-error: true

      - name: Upload Container logs as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always() && steps.export-container-logs.outcome == 'success'
        with:
          name: "[${{ github.job }}] Container logs"
          path: |
            container.stdout.log
            container.stderr.log
          retention-days: 14

      - name: Cleanup Docker Compose
        run: docker compose -f docker-compose.yaml -f docker-compose.ci.yaml down -v
        working-directory: quickstart
        if: always()

  e2e:
    name: E2E
    runs-on: depot-ubuntu-latest-16

    steps:
      # Required as a workaround for Dagger to properly detect Git metadata
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Run pipeline
        uses: dagger/dagger-for-github@e47aba410ef9bb9ed81a4d2a97df31061e5e842e # v8.0.0
        with:
          verb: call
          args: etoe
          cloud-token: ${{ secrets.DAGGER_CLOUD_NO_CACHE_TOKEN }}
          version: ${{ env.DAGGER_VERSION }}

      - name: Export Dagger Engine logs
        id: export-dagger-engine-logs
        run: docker logs $(docker container list --all --filter 'name=^dagger-engine-*' --format '{{.Names}}') > engine.stdout.log 2> engine.stderr.log
        if: always()
        continue-on-error: true

      - name: Upload Dagger Engine logs as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always() && steps.export-dagger-engine-logs.outcome == 'success'
        with:
          name: "[${{ github.job }}] Dagger Engine logs"
          path: |
            engine.stdout.log
            engine.stderr.log
          retention-days: 14
