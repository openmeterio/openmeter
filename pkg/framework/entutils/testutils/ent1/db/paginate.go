// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"fmt"

	"github.com/openmeterio/openmeter/pkg/pagination"
)

func (e *Example1) GoString() string {
	if e == nil {
		return fmt.Sprintf("Example1(nil)")
	}
	return e.String()
}

func (e *Example1Query) Paginate(ctx context.Context, page pagination.Page) (pagination.PagedResponse[*Example1], error) {
	// Get the limit and offset
	limit, offset := page.Limit(), page.Offset()

	// Unset previous pagination settings
	zero := 0
	e.ctx.Offset = &zero
	e.ctx.Limit = &zero

	// Create duplicate of the query to run for
	countQuery := e.Clone()
	pagedQuery := e

	// Set the limit and offset
	pagedQuery.ctx.Limit = &limit
	pagedQuery.ctx.Offset = &offset

	// Unset ordering for count query
	countQuery.order = nil

	pagedResponse := pagination.PagedResponse[*Example1]{
		Page: page,
	}

	// Get the total count
	count, err := countQuery.Count(ctx)
	if err != nil {
		return pagedResponse, fmt.Errorf("failed to get count: %w", err)
	}
	pagedResponse.TotalCount = count

	// Get the paged items
	items, err := pagedQuery.All(ctx)
	pagedResponse.Items = items
	return pagedResponse, err
}

// type check
var _ pagination.Paginator[*Example1] = (*Example1Query)(nil)
