// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/pkg/framework/entutils/testutils/ent1/db/example1"
	"github.com/openmeterio/openmeter/pkg/framework/entutils/testutils/ent1/db/predicate"
)

// Example1Update is the builder for updating Example1 entities.
type Example1Update struct {
	config
	hooks    []Hook
	mutation *Example1Mutation
}

// Where appends a list predicates to the Example1Update builder.
func (e *Example1Update) Where(ps ...predicate.Example1) *Example1Update {
	e.mutation.Where(ps...)
	return e
}

// SetUpdatedAt sets the "updated_at" field.
func (e *Example1Update) SetUpdatedAt(t time.Time) *Example1Update {
	e.mutation.SetUpdatedAt(t)
	return e
}

// SetDeletedAt sets the "deleted_at" field.
func (e *Example1Update) SetDeletedAt(t time.Time) *Example1Update {
	e.mutation.SetDeletedAt(t)
	return e
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (e *Example1Update) SetNillableDeletedAt(t *time.Time) *Example1Update {
	if t != nil {
		e.SetDeletedAt(*t)
	}
	return e
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (e *Example1Update) ClearDeletedAt() *Example1Update {
	e.mutation.ClearDeletedAt()
	return e
}

// SetExampleValue1 sets the "example_value_1" field.
func (e *Example1Update) SetExampleValue1(s string) *Example1Update {
	e.mutation.SetExampleValue1(s)
	return e
}

// SetNillableExampleValue1 sets the "example_value_1" field if the given value is not nil.
func (e *Example1Update) SetNillableExampleValue1(s *string) *Example1Update {
	if s != nil {
		e.SetExampleValue1(*s)
	}
	return e
}

// Mutation returns the Example1Mutation object of the builder.
func (e *Example1Update) Mutation() *Example1Mutation {
	return e.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (e *Example1Update) Save(ctx context.Context) (int, error) {
	e.defaults()
	return withHooks(ctx, e.sqlSave, e.mutation, e.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (e *Example1Update) SaveX(ctx context.Context) int {
	affected, err := e.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (e *Example1Update) Exec(ctx context.Context) error {
	_, err := e.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (e *Example1Update) ExecX(ctx context.Context) {
	if err := e.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (e *Example1Update) defaults() {
	if _, ok := e.mutation.UpdatedAt(); !ok {
		v := example1.UpdateDefaultUpdatedAt()
		e.mutation.SetUpdatedAt(v)
	}
}

func (e *Example1Update) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(example1.Table, example1.Columns, sqlgraph.NewFieldSpec(example1.FieldID, field.TypeString))
	if ps := e.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := e.mutation.UpdatedAt(); ok {
		_spec.SetField(example1.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := e.mutation.DeletedAt(); ok {
		_spec.SetField(example1.FieldDeletedAt, field.TypeTime, value)
	}
	if e.mutation.DeletedAtCleared() {
		_spec.ClearField(example1.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := e.mutation.ExampleValue1(); ok {
		_spec.SetField(example1.FieldExampleValue1, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, e.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{example1.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	e.mutation.done = true
	return n, nil
}

// Example1UpdateOne is the builder for updating a single Example1 entity.
type Example1UpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *Example1Mutation
}

// SetUpdatedAt sets the "updated_at" field.
func (eo *Example1UpdateOne) SetUpdatedAt(t time.Time) *Example1UpdateOne {
	eo.mutation.SetUpdatedAt(t)
	return eo
}

// SetDeletedAt sets the "deleted_at" field.
func (eo *Example1UpdateOne) SetDeletedAt(t time.Time) *Example1UpdateOne {
	eo.mutation.SetDeletedAt(t)
	return eo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eo *Example1UpdateOne) SetNillableDeletedAt(t *time.Time) *Example1UpdateOne {
	if t != nil {
		eo.SetDeletedAt(*t)
	}
	return eo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eo *Example1UpdateOne) ClearDeletedAt() *Example1UpdateOne {
	eo.mutation.ClearDeletedAt()
	return eo
}

// SetExampleValue1 sets the "example_value_1" field.
func (eo *Example1UpdateOne) SetExampleValue1(s string) *Example1UpdateOne {
	eo.mutation.SetExampleValue1(s)
	return eo
}

// SetNillableExampleValue1 sets the "example_value_1" field if the given value is not nil.
func (eo *Example1UpdateOne) SetNillableExampleValue1(s *string) *Example1UpdateOne {
	if s != nil {
		eo.SetExampleValue1(*s)
	}
	return eo
}

// Mutation returns the Example1Mutation object of the builder.
func (eo *Example1UpdateOne) Mutation() *Example1Mutation {
	return eo.mutation
}

// Where appends a list predicates to the Example1Update builder.
func (eo *Example1UpdateOne) Where(ps ...predicate.Example1) *Example1UpdateOne {
	eo.mutation.Where(ps...)
	return eo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eo *Example1UpdateOne) Select(field string, fields ...string) *Example1UpdateOne {
	eo.fields = append([]string{field}, fields...)
	return eo
}

// Save executes the query and returns the updated Example1 entity.
func (eo *Example1UpdateOne) Save(ctx context.Context) (*Example1, error) {
	eo.defaults()
	return withHooks(ctx, eo.sqlSave, eo.mutation, eo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eo *Example1UpdateOne) SaveX(ctx context.Context) *Example1 {
	node, err := eo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eo *Example1UpdateOne) Exec(ctx context.Context) error {
	_, err := eo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eo *Example1UpdateOne) ExecX(ctx context.Context) {
	if err := eo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eo *Example1UpdateOne) defaults() {
	if _, ok := eo.mutation.UpdatedAt(); !ok {
		v := example1.UpdateDefaultUpdatedAt()
		eo.mutation.SetUpdatedAt(v)
	}
}

func (eo *Example1UpdateOne) sqlSave(ctx context.Context) (_node *Example1, err error) {
	_spec := sqlgraph.NewUpdateSpec(example1.Table, example1.Columns, sqlgraph.NewFieldSpec(example1.FieldID, field.TypeString))
	id, ok := eo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Example1.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, example1.FieldID)
		for _, f := range fields {
			if !example1.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != example1.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eo.mutation.UpdatedAt(); ok {
		_spec.SetField(example1.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eo.mutation.DeletedAt(); ok {
		_spec.SetField(example1.FieldDeletedAt, field.TypeTime, value)
	}
	if eo.mutation.DeletedAtCleared() {
		_spec.ClearField(example1.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := eo.mutation.ExampleValue1(); ok {
		_spec.SetField(example1.FieldExampleValue1, field.TypeString, value)
	}
	_node = &Example1{config: eo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{example1.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eo.mutation.done = true
	return _node, nil
}
