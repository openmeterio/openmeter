// Code generated by ent, DO NOT EDIT.

package example2

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/pkg/framework/entutils/testutils/ent2/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Example2 {
	return predicate.Example2(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Example2 {
	return predicate.Example2(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Example2 {
	return predicate.Example2(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Example2 {
	return predicate.Example2(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Example2 {
	return predicate.Example2(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Example2 {
	return predicate.Example2(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Example2 {
	return predicate.Example2(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Example2 {
	return predicate.Example2(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Example2 {
	return predicate.Example2(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Example2 {
	return predicate.Example2(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Example2 {
	return predicate.Example2(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldEQ(FieldDeletedAt, v))
}

// ExampleValue2 applies equality check predicate on the "example_value_2" field. It's identical to ExampleValue2EQ.
func ExampleValue2(v string) predicate.Example2 {
	return predicate.Example2(sql.FieldEQ(FieldExampleValue2, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Example2 {
	return predicate.Example2(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Example2 {
	return predicate.Example2(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Example2 {
	return predicate.Example2(sql.FieldNotNull(FieldDeletedAt))
}

// ExampleValue2EQ applies the EQ predicate on the "example_value_2" field.
func ExampleValue2EQ(v string) predicate.Example2 {
	return predicate.Example2(sql.FieldEQ(FieldExampleValue2, v))
}

// ExampleValue2NEQ applies the NEQ predicate on the "example_value_2" field.
func ExampleValue2NEQ(v string) predicate.Example2 {
	return predicate.Example2(sql.FieldNEQ(FieldExampleValue2, v))
}

// ExampleValue2In applies the In predicate on the "example_value_2" field.
func ExampleValue2In(vs ...string) predicate.Example2 {
	return predicate.Example2(sql.FieldIn(FieldExampleValue2, vs...))
}

// ExampleValue2NotIn applies the NotIn predicate on the "example_value_2" field.
func ExampleValue2NotIn(vs ...string) predicate.Example2 {
	return predicate.Example2(sql.FieldNotIn(FieldExampleValue2, vs...))
}

// ExampleValue2GT applies the GT predicate on the "example_value_2" field.
func ExampleValue2GT(v string) predicate.Example2 {
	return predicate.Example2(sql.FieldGT(FieldExampleValue2, v))
}

// ExampleValue2GTE applies the GTE predicate on the "example_value_2" field.
func ExampleValue2GTE(v string) predicate.Example2 {
	return predicate.Example2(sql.FieldGTE(FieldExampleValue2, v))
}

// ExampleValue2LT applies the LT predicate on the "example_value_2" field.
func ExampleValue2LT(v string) predicate.Example2 {
	return predicate.Example2(sql.FieldLT(FieldExampleValue2, v))
}

// ExampleValue2LTE applies the LTE predicate on the "example_value_2" field.
func ExampleValue2LTE(v string) predicate.Example2 {
	return predicate.Example2(sql.FieldLTE(FieldExampleValue2, v))
}

// ExampleValue2Contains applies the Contains predicate on the "example_value_2" field.
func ExampleValue2Contains(v string) predicate.Example2 {
	return predicate.Example2(sql.FieldContains(FieldExampleValue2, v))
}

// ExampleValue2HasPrefix applies the HasPrefix predicate on the "example_value_2" field.
func ExampleValue2HasPrefix(v string) predicate.Example2 {
	return predicate.Example2(sql.FieldHasPrefix(FieldExampleValue2, v))
}

// ExampleValue2HasSuffix applies the HasSuffix predicate on the "example_value_2" field.
func ExampleValue2HasSuffix(v string) predicate.Example2 {
	return predicate.Example2(sql.FieldHasSuffix(FieldExampleValue2, v))
}

// ExampleValue2EqualFold applies the EqualFold predicate on the "example_value_2" field.
func ExampleValue2EqualFold(v string) predicate.Example2 {
	return predicate.Example2(sql.FieldEqualFold(FieldExampleValue2, v))
}

// ExampleValue2ContainsFold applies the ContainsFold predicate on the "example_value_2" field.
func ExampleValue2ContainsFold(v string) predicate.Example2 {
	return predicate.Example2(sql.FieldContainsFold(FieldExampleValue2, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Example2) predicate.Example2 {
	return predicate.Example2(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Example2) predicate.Example2 {
	return predicate.Example2(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Example2) predicate.Example2 {
	return predicate.Example2(sql.NotPredicates(p))
}
