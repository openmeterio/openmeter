package models

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/render"
)

// ProblemContentType is the default content type for a Problem response
const ProblemContentType = "application/problem+json"

// ProblemDefaultURL is the default url to use for problem types
const ProblemDefaultURL = "about:blank"

// Problem is the RFC 7807 response body.
type Problem interface {
	render.Renderer

	Error() string
	ProblemType() string
	ProblemTitle() string
}

// StatusProblem is the RFC 7807 response body without additional fields.
type StatusProblem struct {
	Err error `json:"-"` // low-level runtime error

	// Type contains a URI that identifies the problem type. This URI will,
	// ideally, contain human-readable documentation for the problem when
	// de-referenced.
	Type string `json:"type"`
	// Title is a short, human-readable summary of the problem type.
	Title string `json:"title"`
	// Status is the HTTP status code generated by the origin server for this occurrence of the problem.
	Status int `json:"status"`
	// Detail is a human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`
	// Instance is a URI reference that identifies the specific occurrence of the problem.
	Instance string `json:"instance,omitempty"`
}

func (p *StatusProblem) Error() string {
	return p.Err.Error()
}

func (p *StatusProblem) ProblemType() string {
	return p.Type
}

func (p *StatusProblem) ProblemTitle() string {
	return p.Title
}

// Render will render the problem as JSON to the provided ResponseWriter.
func (p *StatusProblem) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", ProblemContentType)
	render.Status(r, p.Status)
	return nil
}

// NewStatusProblem will generate a problem for the provided HTTP status
// code. The Problem's Status field will be set to match the status argument,
// and the Title will be set to the default Go status text for that code.
func NewStatusProblem(ctx context.Context, err error, status int) Problem {
	var instance string
	reqID := middleware.GetReqID(ctx)
	if reqID != "" {
		instance = fmt.Sprintf("/request/%s", reqID)
	}

	var detail string
	if err != nil {
		detail = err.Error()
	}

	return &StatusProblem{
		Err:      err,
		Type:     ProblemDefaultURL,
		Title:    http.StatusText(status),
		Status:   status,
		Detail:   detail,
		Instance: instance,
	}
}
