// Package kafkaconnect provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package kafkaconnect

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ConnectorInfoType.
const (
	ConnectorInfoTypeSink    ConnectorInfoType = "sink"
	ConnectorInfoTypeSource  ConnectorInfoType = "source"
	ConnectorInfoTypeUnknown ConnectorInfoType = "unknown"
)

// Defines values for ConnectorStateInfoType.
const (
	ConnectorStateInfoTypeSink    ConnectorStateInfoType = "sink"
	ConnectorStateInfoTypeSource  ConnectorStateInfoType = "source"
	ConnectorStateInfoTypeUnknown ConnectorStateInfoType = "unknown"
)

// ConfigInfo defines model for ConfigInfo.
type ConfigInfo struct {
	Definition *ConfigKeyInfo   `json:"definition,omitempty"`
	Value      *ConfigValueInfo `json:"value,omitempty"`
}

// ConfigInfos defines model for ConfigInfos.
type ConfigInfos struct {
	Configs    *[]ConfigInfo `json:"configs,omitempty"`
	ErrorCount *int32        `json:"error_count,omitempty"`
	Groups     *[]string     `json:"groups,omitempty"`
	Name       *string       `json:"name,omitempty"`
}

// ConfigKeyInfo defines model for ConfigKeyInfo.
type ConfigKeyInfo struct {
	DefaultValue  *string   `json:"default_value,omitempty"`
	Dependents    *[]string `json:"dependents,omitempty"`
	DisplayName   *string   `json:"display_name,omitempty"`
	Documentation *string   `json:"documentation,omitempty"`
	Group         *string   `json:"group,omitempty"`
	Importance    *string   `json:"importance,omitempty"`
	Name          *string   `json:"name,omitempty"`
	Order         *int32    `json:"order,omitempty"`
	OrderInGroup  *int32    `json:"order_in_group,omitempty"`
	Required      *bool     `json:"required,omitempty"`
	Type          *string   `json:"type,omitempty"`
	Width         *string   `json:"width,omitempty"`
}

// ConfigValueInfo defines model for ConfigValueInfo.
type ConfigValueInfo struct {
	Errors            *[]string `json:"errors,omitempty"`
	Name              *string   `json:"name,omitempty"`
	RecommendedValues *[]string `json:"recommended_values,omitempty"`
	Value             *string   `json:"value,omitempty"`
	Visible           *bool     `json:"visible,omitempty"`
}

// ConnectorInfo defines model for ConnectorInfo.
type ConnectorInfo struct {
	Config *map[string]string `json:"config,omitempty"`
	Name   *string            `json:"name,omitempty"`
	Tasks  *[]ConnectorTaskId `json:"tasks,omitempty"`
	Type   *ConnectorInfoType `json:"type,omitempty"`
}

// ConnectorInfoType defines model for ConnectorInfo.Type.
type ConnectorInfoType string

// ConnectorOffset defines model for ConnectorOffset.
type ConnectorOffset struct {
	Offset    *map[string]map[string]interface{} `json:"offset,omitempty"`
	Partition *map[string]map[string]interface{} `json:"partition,omitempty"`
}

// ConnectorOffsets defines model for ConnectorOffsets.
type ConnectorOffsets struct {
	Offsets *[]ConnectorOffset `json:"offsets,omitempty"`
}

// ConnectorState defines model for ConnectorState.
type ConnectorState struct {
	Msg      *string `json:"msg,omitempty"`
	State    *string `json:"state,omitempty"`
	Trace    *string `json:"trace,omitempty"`
	WorkerId *string `json:"worker_id,omitempty"`
}

// ConnectorStateInfo defines model for ConnectorStateInfo.
type ConnectorStateInfo struct {
	Connector *ConnectorState         `json:"connector,omitempty"`
	Name      *string                 `json:"name,omitempty"`
	Tasks     *[]TaskState            `json:"tasks,omitempty"`
	Type      *ConnectorStateInfoType `json:"type,omitempty"`
}

// ConnectorStateInfoType defines model for ConnectorStateInfo.Type.
type ConnectorStateInfoType string

// ConnectorTaskId defines model for ConnectorTaskId.
type ConnectorTaskId struct {
	Connector *string `json:"connector,omitempty"`
	Task      *int32  `json:"task,omitempty"`
}

// CreateConnectorRequest defines model for CreateConnectorRequest.
type CreateConnectorRequest struct {
	Config *map[string]string `json:"config,omitempty"`
	Name   *string            `json:"name,omitempty"`
}

// PluginInfo defines model for PluginInfo.
type PluginInfo struct {
	Class   *string `json:"class,omitempty"`
	Type    *string `json:"type,omitempty"`
	Version *string `json:"version,omitempty"`
}

// ServerInfo defines model for ServerInfo.
type ServerInfo struct {
	Commit         *string `json:"commit,omitempty"`
	KafkaClusterId *string `json:"kafka_cluster_id,omitempty"`
	Version        *string `json:"version,omitempty"`
}

// TaskInfo defines model for TaskInfo.
type TaskInfo struct {
	Config *map[string]string `json:"config,omitempty"`
	Id     *ConnectorTaskId   `json:"id,omitempty"`
}

// TaskState defines model for TaskState.
type TaskState struct {
	Id       *int32  `json:"id,omitempty"`
	Msg      *string `json:"msg,omitempty"`
	State    *string `json:"state,omitempty"`
	Trace    *string `json:"trace,omitempty"`
	WorkerId *string `json:"worker_id,omitempty"`
}

// SetLevelJSONBody defines parameters for SetLevel.
type SetLevelJSONBody map[string]string

// ListConnectorPluginsParams defines parameters for ListConnectorPlugins.
type ListConnectorPluginsParams struct {
	// ConnectorsOnly Whether to list only connectors instead of all plugins
	ConnectorsOnly *bool `form:"connectorsOnly,omitempty" json:"connectorsOnly,omitempty"`
}

// ValidateConfigsJSONBody defines parameters for ValidateConfigs.
type ValidateConfigsJSONBody map[string]string

// PutConnectorConfigJSONBody defines parameters for PutConnectorConfig.
type PutConnectorConfigJSONBody map[string]string

// RestartConnectorParams defines parameters for RestartConnector.
type RestartConnectorParams struct {
	// IncludeTasks Whether to also restart tasks
	IncludeTasks *bool `form:"includeTasks,omitempty" json:"includeTasks,omitempty"`

	// OnlyFailed Whether to only restart failed tasks/connectors
	OnlyFailed *bool `form:"onlyFailed,omitempty" json:"onlyFailed,omitempty"`
}

// SetLevelJSONRequestBody defines body for SetLevel for application/json ContentType.
type SetLevelJSONRequestBody SetLevelJSONBody

// ValidateConfigsJSONRequestBody defines body for ValidateConfigs for application/json ContentType.
type ValidateConfigsJSONRequestBody ValidateConfigsJSONBody

// CreateConnectorJSONRequestBody defines body for CreateConnector for application/json ContentType.
type CreateConnectorJSONRequestBody = CreateConnectorRequest

// PutConnectorConfigJSONRequestBody defines body for PutConnectorConfig for application/json ContentType.
type PutConnectorConfigJSONRequestBody PutConnectorConfigJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ServerInfo request
	ServerInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListLoggers request
	ListLoggers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogger request
	GetLogger(ctx context.Context, logger string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetLevelWithBody request with any body
	SetLevelWithBody(ctx context.Context, logger string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetLevel(ctx context.Context, logger string, body SetLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListConnectorPlugins request
	ListConnectorPlugins(ctx context.Context, params *ListConnectorPluginsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectorConfigDef request
	GetConnectorConfigDef(ctx context.Context, pluginName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateConfigsWithBody request with any body
	ValidateConfigsWithBody(ctx context.Context, pluginName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateConfigs(ctx context.Context, pluginName string, body ValidateConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListConnectors request
	ListConnectors(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateConnectorWithBody request with any body
	CreateConnectorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateConnector(ctx context.Context, body CreateConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DestroyConnector request
	DestroyConnector(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnector request
	GetConnector(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectorConfig request
	GetConnectorConfig(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConnectorConfigWithBody request with any body
	PutConnectorConfigWithBody(ctx context.Context, connector string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutConnectorConfig(ctx context.Context, connector string, body PutConnectorConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOffsets request
	GetOffsets(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PauseConnector request
	PauseConnector(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestartConnector request
	RestartConnector(ctx context.Context, connector string, params *RestartConnectorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResumeConnector request
	ResumeConnector(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectorStatus request
	GetConnectorStatus(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopConnector request
	StopConnector(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskConfigs request
	GetTaskConfigs(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTasksConfig request
	GetTasksConfig(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestartTask request
	RestartTask(ctx context.Context, connector string, task int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskStatus request
	GetTaskStatus(ctx context.Context, connector string, task int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectorActiveTopics request
	GetConnectorActiveTopics(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetConnectorActiveTopics request
	ResetConnectorActiveTopics(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ServerInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServerInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListLoggers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListLoggersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogger(ctx context.Context, logger string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLoggerRequest(c.Server, logger)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetLevelWithBody(ctx context.Context, logger string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetLevelRequestWithBody(c.Server, logger, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetLevel(ctx context.Context, logger string, body SetLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetLevelRequest(c.Server, logger, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConnectorPlugins(ctx context.Context, params *ListConnectorPluginsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConnectorPluginsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectorConfigDef(ctx context.Context, pluginName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectorConfigDefRequest(c.Server, pluginName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateConfigsWithBody(ctx context.Context, pluginName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateConfigsRequestWithBody(c.Server, pluginName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateConfigs(ctx context.Context, pluginName string, body ValidateConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateConfigsRequest(c.Server, pluginName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConnectors(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConnectorsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnectorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnector(ctx context.Context, body CreateConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DestroyConnector(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDestroyConnectorRequest(c.Server, connector)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnector(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectorRequest(c.Server, connector)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectorConfig(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectorConfigRequest(c.Server, connector)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConnectorConfigWithBody(ctx context.Context, connector string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConnectorConfigRequestWithBody(c.Server, connector, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConnectorConfig(ctx context.Context, connector string, body PutConnectorConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConnectorConfigRequest(c.Server, connector, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOffsets(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOffsetsRequest(c.Server, connector)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PauseConnector(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPauseConnectorRequest(c.Server, connector)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestartConnector(ctx context.Context, connector string, params *RestartConnectorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestartConnectorRequest(c.Server, connector, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResumeConnector(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResumeConnectorRequest(c.Server, connector)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectorStatus(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectorStatusRequest(c.Server, connector)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopConnector(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopConnectorRequest(c.Server, connector)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskConfigs(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskConfigsRequest(c.Server, connector)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasksConfig(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksConfigRequest(c.Server, connector)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestartTask(ctx context.Context, connector string, task int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestartTaskRequest(c.Server, connector, task)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskStatus(ctx context.Context, connector string, task int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskStatusRequest(c.Server, connector, task)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectorActiveTopics(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectorActiveTopicsRequest(c.Server, connector)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetConnectorActiveTopics(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetConnectorActiveTopicsRequest(c.Server, connector)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewServerInfoRequest generates requests for ServerInfo
func NewServerInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListLoggersRequest generates requests for ListLoggers
func NewListLoggersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/loggers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLoggerRequest generates requests for GetLogger
func NewGetLoggerRequest(server string, logger string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "logger", runtime.ParamLocationPath, logger)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/loggers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetLevelRequest calls the generic SetLevel builder with application/json body
func NewSetLevelRequest(server string, logger string, body SetLevelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetLevelRequestWithBody(server, logger, "application/json", bodyReader)
}

// NewSetLevelRequestWithBody generates requests for SetLevel with any type of body
func NewSetLevelRequestWithBody(server string, logger string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "logger", runtime.ParamLocationPath, logger)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/loggers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListConnectorPluginsRequest generates requests for ListConnectorPlugins
func NewListConnectorPluginsRequest(server string, params *ListConnectorPluginsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connector-plugins")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConnectorsOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "connectorsOnly", runtime.ParamLocationQuery, *params.ConnectorsOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectorConfigDefRequest generates requests for GetConnectorConfigDef
func NewGetConnectorConfigDefRequest(server string, pluginName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pluginName", runtime.ParamLocationPath, pluginName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connector-plugins/%s/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateConfigsRequest calls the generic ValidateConfigs builder with application/json body
func NewValidateConfigsRequest(server string, pluginName string, body ValidateConfigsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateConfigsRequestWithBody(server, pluginName, "application/json", bodyReader)
}

// NewValidateConfigsRequestWithBody generates requests for ValidateConfigs with any type of body
func NewValidateConfigsRequestWithBody(server string, pluginName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pluginName", runtime.ParamLocationPath, pluginName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connector-plugins/%s/config/validate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListConnectorsRequest generates requests for ListConnectors
func NewListConnectorsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateConnectorRequest calls the generic CreateConnector builder with application/json body
func NewCreateConnectorRequest(server string, body CreateConnectorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConnectorRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateConnectorRequestWithBody generates requests for CreateConnector with any type of body
func NewCreateConnectorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDestroyConnectorRequest generates requests for DestroyConnector
func NewDestroyConnectorRequest(server string, connector string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connector", runtime.ParamLocationPath, connector)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectorRequest generates requests for GetConnector
func NewGetConnectorRequest(server string, connector string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connector", runtime.ParamLocationPath, connector)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectorConfigRequest generates requests for GetConnectorConfig
func NewGetConnectorConfigRequest(server string, connector string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connector", runtime.ParamLocationPath, connector)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors/%s/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutConnectorConfigRequest calls the generic PutConnectorConfig builder with application/json body
func NewPutConnectorConfigRequest(server string, connector string, body PutConnectorConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutConnectorConfigRequestWithBody(server, connector, "application/json", bodyReader)
}

// NewPutConnectorConfigRequestWithBody generates requests for PutConnectorConfig with any type of body
func NewPutConnectorConfigRequestWithBody(server string, connector string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connector", runtime.ParamLocationPath, connector)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors/%s/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOffsetsRequest generates requests for GetOffsets
func NewGetOffsetsRequest(server string, connector string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connector", runtime.ParamLocationPath, connector)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors/%s/offsets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPauseConnectorRequest generates requests for PauseConnector
func NewPauseConnectorRequest(server string, connector string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connector", runtime.ParamLocationPath, connector)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors/%s/pause", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRestartConnectorRequest generates requests for RestartConnector
func NewRestartConnectorRequest(server string, connector string, params *RestartConnectorParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connector", runtime.ParamLocationPath, connector)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors/%s/restart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeTasks != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeTasks", runtime.ParamLocationQuery, *params.IncludeTasks); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyFailed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "onlyFailed", runtime.ParamLocationQuery, *params.OnlyFailed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResumeConnectorRequest generates requests for ResumeConnector
func NewResumeConnectorRequest(server string, connector string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connector", runtime.ParamLocationPath, connector)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors/%s/resume", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectorStatusRequest generates requests for GetConnectorStatus
func NewGetConnectorStatusRequest(server string, connector string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connector", runtime.ParamLocationPath, connector)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopConnectorRequest generates requests for StopConnector
func NewStopConnectorRequest(server string, connector string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connector", runtime.ParamLocationPath, connector)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskConfigsRequest generates requests for GetTaskConfigs
func NewGetTaskConfigsRequest(server string, connector string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connector", runtime.ParamLocationPath, connector)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTasksConfigRequest generates requests for GetTasksConfig
func NewGetTasksConfigRequest(server string, connector string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connector", runtime.ParamLocationPath, connector)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors/%s/tasks-config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRestartTaskRequest generates requests for RestartTask
func NewRestartTaskRequest(server string, connector string, task int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connector", runtime.ParamLocationPath, connector)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "task", runtime.ParamLocationPath, task)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors/%s/tasks/%s/restart", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskStatusRequest generates requests for GetTaskStatus
func NewGetTaskStatusRequest(server string, connector string, task int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connector", runtime.ParamLocationPath, connector)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "task", runtime.ParamLocationPath, task)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors/%s/tasks/%s/status", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectorActiveTopicsRequest generates requests for GetConnectorActiveTopics
func NewGetConnectorActiveTopicsRequest(server string, connector string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connector", runtime.ParamLocationPath, connector)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors/%s/topics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResetConnectorActiveTopicsRequest generates requests for ResetConnectorActiveTopics
func NewResetConnectorActiveTopicsRequest(server string, connector string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connector", runtime.ParamLocationPath, connector)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connectors/%s/topics/reset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ServerInfoWithResponse request
	ServerInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServerInfoResponse, error)

	// ListLoggersWithResponse request
	ListLoggersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLoggersResponse, error)

	// GetLoggerWithResponse request
	GetLoggerWithResponse(ctx context.Context, logger string, reqEditors ...RequestEditorFn) (*GetLoggerResponse, error)

	// SetLevelWithBodyWithResponse request with any body
	SetLevelWithBodyWithResponse(ctx context.Context, logger string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetLevelResponse, error)

	SetLevelWithResponse(ctx context.Context, logger string, body SetLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*SetLevelResponse, error)

	// ListConnectorPluginsWithResponse request
	ListConnectorPluginsWithResponse(ctx context.Context, params *ListConnectorPluginsParams, reqEditors ...RequestEditorFn) (*ListConnectorPluginsResponse, error)

	// GetConnectorConfigDefWithResponse request
	GetConnectorConfigDefWithResponse(ctx context.Context, pluginName string, reqEditors ...RequestEditorFn) (*GetConnectorConfigDefResponse, error)

	// ValidateConfigsWithBodyWithResponse request with any body
	ValidateConfigsWithBodyWithResponse(ctx context.Context, pluginName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateConfigsResponse, error)

	ValidateConfigsWithResponse(ctx context.Context, pluginName string, body ValidateConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateConfigsResponse, error)

	// ListConnectorsWithResponse request
	ListConnectorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListConnectorsResponse, error)

	// CreateConnectorWithBodyWithResponse request with any body
	CreateConnectorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectorResponse, error)

	CreateConnectorWithResponse(ctx context.Context, body CreateConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectorResponse, error)

	// DestroyConnectorWithResponse request
	DestroyConnectorWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*DestroyConnectorResponse, error)

	// GetConnectorWithResponse request
	GetConnectorWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*GetConnectorResponse, error)

	// GetConnectorConfigWithResponse request
	GetConnectorConfigWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*GetConnectorConfigResponse, error)

	// PutConnectorConfigWithBodyWithResponse request with any body
	PutConnectorConfigWithBodyWithResponse(ctx context.Context, connector string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConnectorConfigResponse, error)

	PutConnectorConfigWithResponse(ctx context.Context, connector string, body PutConnectorConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConnectorConfigResponse, error)

	// GetOffsetsWithResponse request
	GetOffsetsWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*GetOffsetsResponse, error)

	// PauseConnectorWithResponse request
	PauseConnectorWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*PauseConnectorResponse, error)

	// RestartConnectorWithResponse request
	RestartConnectorWithResponse(ctx context.Context, connector string, params *RestartConnectorParams, reqEditors ...RequestEditorFn) (*RestartConnectorResponse, error)

	// ResumeConnectorWithResponse request
	ResumeConnectorWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*ResumeConnectorResponse, error)

	// GetConnectorStatusWithResponse request
	GetConnectorStatusWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*GetConnectorStatusResponse, error)

	// StopConnectorWithResponse request
	StopConnectorWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*StopConnectorResponse, error)

	// GetTaskConfigsWithResponse request
	GetTaskConfigsWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*GetTaskConfigsResponse, error)

	// GetTasksConfigWithResponse request
	GetTasksConfigWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*GetTasksConfigResponse, error)

	// RestartTaskWithResponse request
	RestartTaskWithResponse(ctx context.Context, connector string, task int32, reqEditors ...RequestEditorFn) (*RestartTaskResponse, error)

	// GetTaskStatusWithResponse request
	GetTaskStatusWithResponse(ctx context.Context, connector string, task int32, reqEditors ...RequestEditorFn) (*GetTaskStatusResponse, error)

	// GetConnectorActiveTopicsWithResponse request
	GetConnectorActiveTopicsWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*GetConnectorActiveTopicsResponse, error)

	// ResetConnectorActiveTopicsWithResponse request
	ResetConnectorActiveTopicsWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*ResetConnectorActiveTopicsResponse, error)
}

type ServerInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ServerInfo
}

// Status returns HTTPResponse.Status
func (r ServerInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServerInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLoggersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListLoggersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLoggersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoggerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLoggerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoggerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListConnectorPluginsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *[]PluginInfo
}

// Status returns HTTPResponse.Status
func (r ListConnectorPluginsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListConnectorPluginsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectorConfigDefResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *[]ConfigKeyInfo
}

// Status returns HTTPResponse.Status
func (r GetConnectorConfigDefResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectorConfigDefResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ConfigInfos
}

// Status returns HTTPResponse.Status
func (r ValidateConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListConnectorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListConnectorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListConnectorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DestroyConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DestroyConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DestroyConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ConnectorInfo
}

// Status returns HTTPResponse.Status
func (r GetConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectorConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetConnectorConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectorConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConnectorConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutConnectorConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConnectorConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOffsetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ConnectorOffsets
}

// Status returns HTTPResponse.Status
func (r GetOffsetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOffsetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PauseConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PauseConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PauseConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestartConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RestartConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestartConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResumeConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResumeConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResumeConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectorStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ConnectorStateInfo
}

// Status returns HTTPResponse.Status
func (r GetConnectorStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectorStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopConnectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StopConnectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopConnectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *[]TaskInfo
}

// Status returns HTTPResponse.Status
func (r GetTaskConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTasksConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *map[string]map[string]string
}

// Status returns HTTPResponse.Status
func (r GetTasksConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestartTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RestartTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestartTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *TaskState
}

// Status returns HTTPResponse.Status
func (r GetTaskStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectorActiveTopicsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetConnectorActiveTopicsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectorActiveTopicsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetConnectorActiveTopicsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetConnectorActiveTopicsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetConnectorActiveTopicsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ServerInfoWithResponse request returning *ServerInfoResponse
func (c *ClientWithResponses) ServerInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServerInfoResponse, error) {
	rsp, err := c.ServerInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServerInfoResponse(rsp)
}

// ListLoggersWithResponse request returning *ListLoggersResponse
func (c *ClientWithResponses) ListLoggersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLoggersResponse, error) {
	rsp, err := c.ListLoggers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListLoggersResponse(rsp)
}

// GetLoggerWithResponse request returning *GetLoggerResponse
func (c *ClientWithResponses) GetLoggerWithResponse(ctx context.Context, logger string, reqEditors ...RequestEditorFn) (*GetLoggerResponse, error) {
	rsp, err := c.GetLogger(ctx, logger, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLoggerResponse(rsp)
}

// SetLevelWithBodyWithResponse request with arbitrary body returning *SetLevelResponse
func (c *ClientWithResponses) SetLevelWithBodyWithResponse(ctx context.Context, logger string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetLevelResponse, error) {
	rsp, err := c.SetLevelWithBody(ctx, logger, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetLevelResponse(rsp)
}

func (c *ClientWithResponses) SetLevelWithResponse(ctx context.Context, logger string, body SetLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*SetLevelResponse, error) {
	rsp, err := c.SetLevel(ctx, logger, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetLevelResponse(rsp)
}

// ListConnectorPluginsWithResponse request returning *ListConnectorPluginsResponse
func (c *ClientWithResponses) ListConnectorPluginsWithResponse(ctx context.Context, params *ListConnectorPluginsParams, reqEditors ...RequestEditorFn) (*ListConnectorPluginsResponse, error) {
	rsp, err := c.ListConnectorPlugins(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConnectorPluginsResponse(rsp)
}

// GetConnectorConfigDefWithResponse request returning *GetConnectorConfigDefResponse
func (c *ClientWithResponses) GetConnectorConfigDefWithResponse(ctx context.Context, pluginName string, reqEditors ...RequestEditorFn) (*GetConnectorConfigDefResponse, error) {
	rsp, err := c.GetConnectorConfigDef(ctx, pluginName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectorConfigDefResponse(rsp)
}

// ValidateConfigsWithBodyWithResponse request with arbitrary body returning *ValidateConfigsResponse
func (c *ClientWithResponses) ValidateConfigsWithBodyWithResponse(ctx context.Context, pluginName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateConfigsResponse, error) {
	rsp, err := c.ValidateConfigsWithBody(ctx, pluginName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateConfigsResponse(rsp)
}

func (c *ClientWithResponses) ValidateConfigsWithResponse(ctx context.Context, pluginName string, body ValidateConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateConfigsResponse, error) {
	rsp, err := c.ValidateConfigs(ctx, pluginName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateConfigsResponse(rsp)
}

// ListConnectorsWithResponse request returning *ListConnectorsResponse
func (c *ClientWithResponses) ListConnectorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListConnectorsResponse, error) {
	rsp, err := c.ListConnectors(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConnectorsResponse(rsp)
}

// CreateConnectorWithBodyWithResponse request with arbitrary body returning *CreateConnectorResponse
func (c *ClientWithResponses) CreateConnectorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectorResponse, error) {
	rsp, err := c.CreateConnectorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectorResponse(rsp)
}

func (c *ClientWithResponses) CreateConnectorWithResponse(ctx context.Context, body CreateConnectorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectorResponse, error) {
	rsp, err := c.CreateConnector(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectorResponse(rsp)
}

// DestroyConnectorWithResponse request returning *DestroyConnectorResponse
func (c *ClientWithResponses) DestroyConnectorWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*DestroyConnectorResponse, error) {
	rsp, err := c.DestroyConnector(ctx, connector, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDestroyConnectorResponse(rsp)
}

// GetConnectorWithResponse request returning *GetConnectorResponse
func (c *ClientWithResponses) GetConnectorWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*GetConnectorResponse, error) {
	rsp, err := c.GetConnector(ctx, connector, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectorResponse(rsp)
}

// GetConnectorConfigWithResponse request returning *GetConnectorConfigResponse
func (c *ClientWithResponses) GetConnectorConfigWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*GetConnectorConfigResponse, error) {
	rsp, err := c.GetConnectorConfig(ctx, connector, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectorConfigResponse(rsp)
}

// PutConnectorConfigWithBodyWithResponse request with arbitrary body returning *PutConnectorConfigResponse
func (c *ClientWithResponses) PutConnectorConfigWithBodyWithResponse(ctx context.Context, connector string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConnectorConfigResponse, error) {
	rsp, err := c.PutConnectorConfigWithBody(ctx, connector, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConnectorConfigResponse(rsp)
}

func (c *ClientWithResponses) PutConnectorConfigWithResponse(ctx context.Context, connector string, body PutConnectorConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConnectorConfigResponse, error) {
	rsp, err := c.PutConnectorConfig(ctx, connector, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConnectorConfigResponse(rsp)
}

// GetOffsetsWithResponse request returning *GetOffsetsResponse
func (c *ClientWithResponses) GetOffsetsWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*GetOffsetsResponse, error) {
	rsp, err := c.GetOffsets(ctx, connector, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOffsetsResponse(rsp)
}

// PauseConnectorWithResponse request returning *PauseConnectorResponse
func (c *ClientWithResponses) PauseConnectorWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*PauseConnectorResponse, error) {
	rsp, err := c.PauseConnector(ctx, connector, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePauseConnectorResponse(rsp)
}

// RestartConnectorWithResponse request returning *RestartConnectorResponse
func (c *ClientWithResponses) RestartConnectorWithResponse(ctx context.Context, connector string, params *RestartConnectorParams, reqEditors ...RequestEditorFn) (*RestartConnectorResponse, error) {
	rsp, err := c.RestartConnector(ctx, connector, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestartConnectorResponse(rsp)
}

// ResumeConnectorWithResponse request returning *ResumeConnectorResponse
func (c *ClientWithResponses) ResumeConnectorWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*ResumeConnectorResponse, error) {
	rsp, err := c.ResumeConnector(ctx, connector, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResumeConnectorResponse(rsp)
}

// GetConnectorStatusWithResponse request returning *GetConnectorStatusResponse
func (c *ClientWithResponses) GetConnectorStatusWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*GetConnectorStatusResponse, error) {
	rsp, err := c.GetConnectorStatus(ctx, connector, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectorStatusResponse(rsp)
}

// StopConnectorWithResponse request returning *StopConnectorResponse
func (c *ClientWithResponses) StopConnectorWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*StopConnectorResponse, error) {
	rsp, err := c.StopConnector(ctx, connector, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopConnectorResponse(rsp)
}

// GetTaskConfigsWithResponse request returning *GetTaskConfigsResponse
func (c *ClientWithResponses) GetTaskConfigsWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*GetTaskConfigsResponse, error) {
	rsp, err := c.GetTaskConfigs(ctx, connector, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskConfigsResponse(rsp)
}

// GetTasksConfigWithResponse request returning *GetTasksConfigResponse
func (c *ClientWithResponses) GetTasksConfigWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*GetTasksConfigResponse, error) {
	rsp, err := c.GetTasksConfig(ctx, connector, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksConfigResponse(rsp)
}

// RestartTaskWithResponse request returning *RestartTaskResponse
func (c *ClientWithResponses) RestartTaskWithResponse(ctx context.Context, connector string, task int32, reqEditors ...RequestEditorFn) (*RestartTaskResponse, error) {
	rsp, err := c.RestartTask(ctx, connector, task, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestartTaskResponse(rsp)
}

// GetTaskStatusWithResponse request returning *GetTaskStatusResponse
func (c *ClientWithResponses) GetTaskStatusWithResponse(ctx context.Context, connector string, task int32, reqEditors ...RequestEditorFn) (*GetTaskStatusResponse, error) {
	rsp, err := c.GetTaskStatus(ctx, connector, task, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskStatusResponse(rsp)
}

// GetConnectorActiveTopicsWithResponse request returning *GetConnectorActiveTopicsResponse
func (c *ClientWithResponses) GetConnectorActiveTopicsWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*GetConnectorActiveTopicsResponse, error) {
	rsp, err := c.GetConnectorActiveTopics(ctx, connector, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectorActiveTopicsResponse(rsp)
}

// ResetConnectorActiveTopicsWithResponse request returning *ResetConnectorActiveTopicsResponse
func (c *ClientWithResponses) ResetConnectorActiveTopicsWithResponse(ctx context.Context, connector string, reqEditors ...RequestEditorFn) (*ResetConnectorActiveTopicsResponse, error) {
	rsp, err := c.ResetConnectorActiveTopics(ctx, connector, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetConnectorActiveTopicsResponse(rsp)
}

// ParseServerInfoResponse parses an HTTP response from a ServerInfoWithResponse call
func ParseServerInfoResponse(rsp *http.Response) (*ServerInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServerInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ServerInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListLoggersResponse parses an HTTP response from a ListLoggersWithResponse call
func ParseListLoggersResponse(rsp *http.Response) (*ListLoggersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListLoggersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLoggerResponse parses an HTTP response from a GetLoggerWithResponse call
func ParseGetLoggerResponse(rsp *http.Response) (*GetLoggerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLoggerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSetLevelResponse parses an HTTP response from a SetLevelWithResponse call
func ParseSetLevelResponse(rsp *http.Response) (*SetLevelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListConnectorPluginsResponse parses an HTTP response from a ListConnectorPluginsWithResponse call
func ParseListConnectorPluginsResponse(rsp *http.Response) (*ListConnectorPluginsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListConnectorPluginsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest []PluginInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetConnectorConfigDefResponse parses an HTTP response from a GetConnectorConfigDefWithResponse call
func ParseGetConnectorConfigDefResponse(rsp *http.Response) (*GetConnectorConfigDefResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectorConfigDefResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest []ConfigKeyInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseValidateConfigsResponse parses an HTTP response from a ValidateConfigsWithResponse call
func ParseValidateConfigsResponse(rsp *http.Response) (*ValidateConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConfigInfos
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListConnectorsResponse parses an HTTP response from a ListConnectorsWithResponse call
func ParseListConnectorsResponse(rsp *http.Response) (*ListConnectorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListConnectorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateConnectorResponse parses an HTTP response from a CreateConnectorWithResponse call
func ParseCreateConnectorResponse(rsp *http.Response) (*CreateConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDestroyConnectorResponse parses an HTTP response from a DestroyConnectorWithResponse call
func ParseDestroyConnectorResponse(rsp *http.Response) (*DestroyConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DestroyConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConnectorResponse parses an HTTP response from a GetConnectorWithResponse call
func ParseGetConnectorResponse(rsp *http.Response) (*GetConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetConnectorConfigResponse parses an HTTP response from a GetConnectorConfigWithResponse call
func ParseGetConnectorConfigResponse(rsp *http.Response) (*GetConnectorConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectorConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutConnectorConfigResponse parses an HTTP response from a PutConnectorConfigWithResponse call
func ParsePutConnectorConfigResponse(rsp *http.Response) (*PutConnectorConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConnectorConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOffsetsResponse parses an HTTP response from a GetOffsetsWithResponse call
func ParseGetOffsetsResponse(rsp *http.Response) (*GetOffsetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOffsetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectorOffsets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePauseConnectorResponse parses an HTTP response from a PauseConnectorWithResponse call
func ParsePauseConnectorResponse(rsp *http.Response) (*PauseConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PauseConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRestartConnectorResponse parses an HTTP response from a RestartConnectorWithResponse call
func ParseRestartConnectorResponse(rsp *http.Response) (*RestartConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestartConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResumeConnectorResponse parses an HTTP response from a ResumeConnectorWithResponse call
func ParseResumeConnectorResponse(rsp *http.Response) (*ResumeConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResumeConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConnectorStatusResponse parses an HTTP response from a GetConnectorStatusWithResponse call
func ParseGetConnectorStatusResponse(rsp *http.Response) (*GetConnectorStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectorStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConnectorStateInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStopConnectorResponse parses an HTTP response from a StopConnectorWithResponse call
func ParseStopConnectorResponse(rsp *http.Response) (*StopConnectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopConnectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTaskConfigsResponse parses an HTTP response from a GetTaskConfigsWithResponse call
func ParseGetTaskConfigsResponse(rsp *http.Response) (*GetTaskConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest []TaskInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTasksConfigResponse parses an HTTP response from a GetTasksConfigWithResponse call
func ParseGetTasksConfigResponse(rsp *http.Response) (*GetTasksConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTasksConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest map[string]map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRestartTaskResponse parses an HTTP response from a RestartTaskWithResponse call
func ParseRestartTaskResponse(rsp *http.Response) (*RestartTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestartTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTaskStatusResponse parses an HTTP response from a GetTaskStatusWithResponse call
func ParseGetTaskStatusResponse(rsp *http.Response) (*GetTaskStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest TaskState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetConnectorActiveTopicsResponse parses an HTTP response from a GetConnectorActiveTopicsWithResponse call
func ParseGetConnectorActiveTopicsResponse(rsp *http.Response) (*GetConnectorActiveTopicsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectorActiveTopicsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetConnectorActiveTopicsResponse parses an HTTP response from a ResetConnectorActiveTopicsWithResponse call
func ParseResetConnectorActiveTopicsResponse(rsp *http.Response) (*ResetConnectorActiveTopicsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetConnectorActiveTopicsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xaz27bPhJ+FYK7h13AtYIWe/Fpu223CBq0QRJ0D0UQMNLIZkORKjmy1wj87j+QlGTF",
	"omxZcdzUl0SWSM7M980/UnqkscpyJUGioZNHauIZZMxdflAy5dNzmSr7K9cqB40c3LMEUi45ciXtr79r",
	"SOmE/i1arxWVC0V+lS+wdAutRnTORAH9Zn23Q/281YjiMgc6oer+J8RoV1oraNoaxu6hu+QImeknsVKy",
	"lMW0Zkv7G7RW+i5WhUS7UKp0xpBOKJf47i2tx3OJMAVtZ0y1KvKn4stBBjWX05AUyTIIDOy2vYI1xA8r",
	"BN7VYLdkJ5CDTCra++uYcJMLtrzr0HVEExUXGUhklXe0Rjhogk94liuNTMbhpTtlKp2A7kmMG3vH5V2t",
	"xq5JI7rQHOGbFEs6QV3AakQ1/Cq4hqShzr1SAphcgxZQdMETnO1F8ToGWiQ7pzyMi1mDYpVl1iUS7zV7",
	"LtztaXNu+L2AEFIdZkuIUemw0T6u7RVLEpeBmLh8MqJL1bWIThCQmYe9UobX9IaZh/MkhErlCCCLjE5+",
	"UKMKHQMdUcPlAx3RQj5ItZD0dtTTI7zAb2lqANvgqPr+DnDWa7Zu5ExjndmHLtNDe9Ol/gACSjxaBGxV",
	"4xoZQluJzEzbvhFKAaaa33YjzToy2ELpB5t9kv45oKFsZ0T4Mb3h8pYfLhCs/9drHikEypjbjkbQrl51",
	"IihbA0OoNbiCXwUYPGqKCg29FMWUyw7fEMxskxhK16BNuHKHhF+DnkNnqs4yjkEhDyx9YHexKAx2hcO+",
	"mjiHeLGS4VXcqxp0KdmRd7yEHg3MK0pQ9hYvMY+VRBY7uiFjXNAJTWD+b8f0mOUsnsFY6bL3NLHmuS8y",
	"9GbGDeGG4AzIk+aRqNTd/PHezSZf7FK3/5gh5mYSRZsr/5OUFJCrT9c35P3l+ZiOqOAxSOOM9TFFy9Xe",
	"js9s9tFW0WrJxWLRWDAq55ro4vzDp6/Xn968HZ+NZ5gJhyFH29RQp1VLNG24L303/tf4zPWeOUiWc3fr",
	"zMnPGc4c/ZH9M/XF27qFQ8AmuGaI2TbN5Mrq1OjyK/TBb05Yngseu/nRT+PjxzvpLhduSHLUPuWplEYq",
	"FZxDmCLLmF7SCf0MSBJAxoUh7F4VSNASWwHjHYswmThOeVKx6/ErUwHhaF2hTOKQEPR7v4glGZeRUNMp",
	"+JY3CNUFN3hRjhmK1d6GW6HOkrjQGiSSUkuCM4ZkxuZgn3JNBMxBGAL/tzI5iiUxgBUi9rmalmMCNkeP",
	"/mLVafxnKG13bqVZBuiw+vFIuTXDuhqtKgsV1dD1TsamjVHDVTbD//ZokFpfsojWiJBUaXfH5BDzlENS",
	"ouw61iIYNXhhZ74oGK4B+I9KlnuF4NAq5GLySAxcVwzsQN/6ad1yvcldK7I9Pus6eVkObhH0VNH/zQBn",
	"oAkqImykKSmWpBZpCJcGgbl0woQgeb2q4/lXAXq5Jno9z1XKJsE1lp751lb19gDJt1c33ejn2huaQcnJ",
	"4lJbXiHkgGNCQNLBYvToL76yDFbRuonqSj41sf7g4iOkvWJvLeQ4yWhfOloHmM9kpMptHtDCY0jWB6qB",
	"YGtA1J+qaM4ET6pWM5Qiv5cDPpRHpS/N1h+TLXu2S83z5/39oELfcZ1rNecJJBtewabMRunB/KVnZj52",
	"82TzE4uRz6GR2F1lVyag68Y+nA73ra3shnf7R63CXgfCiITFGppNUqPH+nrl9RHgw/4pbh/BoFbLJnC7",
	"Az7egPm1tYofnbEbAdCAarS7Xr1GHPqnoMZh+fBiVG3c2rmkl9ft3x28csyHF52DdANbaejY8FwWx8b4",
	"dHc/Zd5VmmiomIFBgdF4pdEVGdXrkBPIQpUpz4iD8gylxG1wQspZYZqdb+DIsSaCcEN4AlmuLBTuQGbG",
	"DJGKQJpCjIbwtArScg/FDWFCA0uWxElK6GgzHO3t0yq1zqRBbGgwyLR/VRJs6a78gGPgNdpywMCEUaRU",
	"lvh3YOFzBC5jUSRwUw4JnCKkTJjQMcI28e5ooxKfMi4g8Vo0O/iwQnbqf92M/dQ5nvdcVbAO858iO044",
	"60JK/0Kl5aFFdmIB7W0axIhBhoXp1fBd+6EnUN7WL+GHFzgP3OC6ZlDlR4kDKygP1LVrVPlpRYG1aBAX",
	"9UcSXSFgy8M+h2u/z/17f+Zx6GNph+HgaHCz3+zefLo6/UdvPId/ufAyO9TybcsB6Ise7b/+PaLl8mXb",
	"w8Ba6IV2L7P7g6Lf3WlZEw7D1O7aX33m8qJl//Ux1bOfaHwu96w2AqpPKA5Fssp53K+ne+9O62/8hFNo",
	"AuovDtwr5pR4LMq3EmJJ7B6f3C+fgatNcOU3u0U4u50yvs68ZyK8Wv0VAAD//9LkRACuMgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
