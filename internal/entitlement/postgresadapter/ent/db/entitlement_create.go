// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/internal/entitlement/postgresadapter/ent/db/entitlement"
	"github.com/openmeterio/openmeter/internal/entitlement/postgresadapter/ent/db/usagereset"
)

// EntitlementCreate is the builder for creating a Entitlement entity.
type EntitlementCreate struct {
	config
	mutation *EntitlementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (ec *EntitlementCreate) SetNamespace(s string) *EntitlementCreate {
	ec.mutation.SetNamespace(s)
	return ec
}

// SetMetadata sets the "metadata" field.
func (ec *EntitlementCreate) SetMetadata(m map[string]string) *EntitlementCreate {
	ec.mutation.SetMetadata(m)
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EntitlementCreate) SetCreatedAt(t time.Time) *EntitlementCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableCreatedAt(t *time.Time) *EntitlementCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EntitlementCreate) SetUpdatedAt(t time.Time) *EntitlementCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableUpdatedAt(t *time.Time) *EntitlementCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetDeletedAt sets the "deleted_at" field.
func (ec *EntitlementCreate) SetDeletedAt(t time.Time) *EntitlementCreate {
	ec.mutation.SetDeletedAt(t)
	return ec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableDeletedAt(t *time.Time) *EntitlementCreate {
	if t != nil {
		ec.SetDeletedAt(*t)
	}
	return ec
}

// SetEntitlementType sets the "entitlement_type" field.
func (ec *EntitlementCreate) SetEntitlementType(et entitlement.EntitlementType) *EntitlementCreate {
	ec.mutation.SetEntitlementType(et)
	return ec
}

// SetFeatureID sets the "feature_id" field.
func (ec *EntitlementCreate) SetFeatureID(s string) *EntitlementCreate {
	ec.mutation.SetFeatureID(s)
	return ec
}

// SetFeatureKey sets the "feature_key" field.
func (ec *EntitlementCreate) SetFeatureKey(s string) *EntitlementCreate {
	ec.mutation.SetFeatureKey(s)
	return ec
}

// SetSubjectKey sets the "subject_key" field.
func (ec *EntitlementCreate) SetSubjectKey(s string) *EntitlementCreate {
	ec.mutation.SetSubjectKey(s)
	return ec
}

// SetMeasureUsageFrom sets the "measure_usage_from" field.
func (ec *EntitlementCreate) SetMeasureUsageFrom(t time.Time) *EntitlementCreate {
	ec.mutation.SetMeasureUsageFrom(t)
	return ec
}

// SetNillableMeasureUsageFrom sets the "measure_usage_from" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableMeasureUsageFrom(t *time.Time) *EntitlementCreate {
	if t != nil {
		ec.SetMeasureUsageFrom(*t)
	}
	return ec
}

// SetIssueAfterReset sets the "issue_after_reset" field.
func (ec *EntitlementCreate) SetIssueAfterReset(f float64) *EntitlementCreate {
	ec.mutation.SetIssueAfterReset(f)
	return ec
}

// SetNillableIssueAfterReset sets the "issue_after_reset" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableIssueAfterReset(f *float64) *EntitlementCreate {
	if f != nil {
		ec.SetIssueAfterReset(*f)
	}
	return ec
}

// SetIssueAfterResetPriority sets the "issue_after_reset_priority" field.
func (ec *EntitlementCreate) SetIssueAfterResetPriority(u uint8) *EntitlementCreate {
	ec.mutation.SetIssueAfterResetPriority(u)
	return ec
}

// SetNillableIssueAfterResetPriority sets the "issue_after_reset_priority" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableIssueAfterResetPriority(u *uint8) *EntitlementCreate {
	if u != nil {
		ec.SetIssueAfterResetPriority(*u)
	}
	return ec
}

// SetIsSoftLimit sets the "is_soft_limit" field.
func (ec *EntitlementCreate) SetIsSoftLimit(b bool) *EntitlementCreate {
	ec.mutation.SetIsSoftLimit(b)
	return ec
}

// SetNillableIsSoftLimit sets the "is_soft_limit" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableIsSoftLimit(b *bool) *EntitlementCreate {
	if b != nil {
		ec.SetIsSoftLimit(*b)
	}
	return ec
}

// SetConfig sets the "config" field.
func (ec *EntitlementCreate) SetConfig(u []uint8) *EntitlementCreate {
	ec.mutation.SetConfig(u)
	return ec
}

// SetUsagePeriodInterval sets the "usage_period_interval" field.
func (ec *EntitlementCreate) SetUsagePeriodInterval(epi entitlement.UsagePeriodInterval) *EntitlementCreate {
	ec.mutation.SetUsagePeriodInterval(epi)
	return ec
}

// SetNillableUsagePeriodInterval sets the "usage_period_interval" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableUsagePeriodInterval(epi *entitlement.UsagePeriodInterval) *EntitlementCreate {
	if epi != nil {
		ec.SetUsagePeriodInterval(*epi)
	}
	return ec
}

// SetUsagePeriodAnchor sets the "usage_period_anchor" field.
func (ec *EntitlementCreate) SetUsagePeriodAnchor(t time.Time) *EntitlementCreate {
	ec.mutation.SetUsagePeriodAnchor(t)
	return ec
}

// SetNillableUsagePeriodAnchor sets the "usage_period_anchor" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableUsagePeriodAnchor(t *time.Time) *EntitlementCreate {
	if t != nil {
		ec.SetUsagePeriodAnchor(*t)
	}
	return ec
}

// SetCurrentUsagePeriodStart sets the "current_usage_period_start" field.
func (ec *EntitlementCreate) SetCurrentUsagePeriodStart(t time.Time) *EntitlementCreate {
	ec.mutation.SetCurrentUsagePeriodStart(t)
	return ec
}

// SetNillableCurrentUsagePeriodStart sets the "current_usage_period_start" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableCurrentUsagePeriodStart(t *time.Time) *EntitlementCreate {
	if t != nil {
		ec.SetCurrentUsagePeriodStart(*t)
	}
	return ec
}

// SetCurrentUsagePeriodEnd sets the "current_usage_period_end" field.
func (ec *EntitlementCreate) SetCurrentUsagePeriodEnd(t time.Time) *EntitlementCreate {
	ec.mutation.SetCurrentUsagePeriodEnd(t)
	return ec
}

// SetNillableCurrentUsagePeriodEnd sets the "current_usage_period_end" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableCurrentUsagePeriodEnd(t *time.Time) *EntitlementCreate {
	if t != nil {
		ec.SetCurrentUsagePeriodEnd(*t)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EntitlementCreate) SetID(s string) *EntitlementCreate {
	ec.mutation.SetID(s)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableID(s *string) *EntitlementCreate {
	if s != nil {
		ec.SetID(*s)
	}
	return ec
}

// AddUsageResetIDs adds the "usage_reset" edge to the UsageReset entity by IDs.
func (ec *EntitlementCreate) AddUsageResetIDs(ids ...string) *EntitlementCreate {
	ec.mutation.AddUsageResetIDs(ids...)
	return ec
}

// AddUsageReset adds the "usage_reset" edges to the UsageReset entity.
func (ec *EntitlementCreate) AddUsageReset(u ...*UsageReset) *EntitlementCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ec.AddUsageResetIDs(ids...)
}

// Mutation returns the EntitlementMutation object of the builder.
func (ec *EntitlementCreate) Mutation() *EntitlementMutation {
	return ec.mutation
}

// Save creates the Entitlement in the database.
func (ec *EntitlementCreate) Save(ctx context.Context) (*Entitlement, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EntitlementCreate) SaveX(ctx context.Context) *Entitlement {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EntitlementCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EntitlementCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EntitlementCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := entitlement.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := entitlement.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		v := entitlement.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EntitlementCreate) check() error {
	if _, ok := ec.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "Entitlement.namespace"`)}
	}
	if v, ok := ec.mutation.Namespace(); ok {
		if err := entitlement.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "Entitlement.namespace": %w`, err)}
		}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Entitlement.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Entitlement.updated_at"`)}
	}
	if _, ok := ec.mutation.EntitlementType(); !ok {
		return &ValidationError{Name: "entitlement_type", err: errors.New(`db: missing required field "Entitlement.entitlement_type"`)}
	}
	if v, ok := ec.mutation.EntitlementType(); ok {
		if err := entitlement.EntitlementTypeValidator(v); err != nil {
			return &ValidationError{Name: "entitlement_type", err: fmt.Errorf(`db: validator failed for field "Entitlement.entitlement_type": %w`, err)}
		}
	}
	if _, ok := ec.mutation.FeatureID(); !ok {
		return &ValidationError{Name: "feature_id", err: errors.New(`db: missing required field "Entitlement.feature_id"`)}
	}
	if _, ok := ec.mutation.FeatureKey(); !ok {
		return &ValidationError{Name: "feature_key", err: errors.New(`db: missing required field "Entitlement.feature_key"`)}
	}
	if v, ok := ec.mutation.FeatureKey(); ok {
		if err := entitlement.FeatureKeyValidator(v); err != nil {
			return &ValidationError{Name: "feature_key", err: fmt.Errorf(`db: validator failed for field "Entitlement.feature_key": %w`, err)}
		}
	}
	if _, ok := ec.mutation.SubjectKey(); !ok {
		return &ValidationError{Name: "subject_key", err: errors.New(`db: missing required field "Entitlement.subject_key"`)}
	}
	if v, ok := ec.mutation.SubjectKey(); ok {
		if err := entitlement.SubjectKeyValidator(v); err != nil {
			return &ValidationError{Name: "subject_key", err: fmt.Errorf(`db: validator failed for field "Entitlement.subject_key": %w`, err)}
		}
	}
	if v, ok := ec.mutation.UsagePeriodInterval(); ok {
		if err := entitlement.UsagePeriodIntervalValidator(v); err != nil {
			return &ValidationError{Name: "usage_period_interval", err: fmt.Errorf(`db: validator failed for field "Entitlement.usage_period_interval": %w`, err)}
		}
	}
	return nil
}

func (ec *EntitlementCreate) sqlSave(ctx context.Context) (*Entitlement, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Entitlement.ID type: %T", _spec.ID.Value)
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EntitlementCreate) createSpec() (*Entitlement, *sqlgraph.CreateSpec) {
	var (
		_node = &Entitlement{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(entitlement.Table, sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString))
	)
	_spec.OnConflict = ec.conflict
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.Namespace(); ok {
		_spec.SetField(entitlement.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := ec.mutation.Metadata(); ok {
		_spec.SetField(entitlement.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(entitlement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlement.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.DeletedAt(); ok {
		_spec.SetField(entitlement.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ec.mutation.EntitlementType(); ok {
		_spec.SetField(entitlement.FieldEntitlementType, field.TypeEnum, value)
		_node.EntitlementType = value
	}
	if value, ok := ec.mutation.FeatureID(); ok {
		_spec.SetField(entitlement.FieldFeatureID, field.TypeString, value)
		_node.FeatureID = value
	}
	if value, ok := ec.mutation.FeatureKey(); ok {
		_spec.SetField(entitlement.FieldFeatureKey, field.TypeString, value)
		_node.FeatureKey = value
	}
	if value, ok := ec.mutation.SubjectKey(); ok {
		_spec.SetField(entitlement.FieldSubjectKey, field.TypeString, value)
		_node.SubjectKey = value
	}
	if value, ok := ec.mutation.MeasureUsageFrom(); ok {
		_spec.SetField(entitlement.FieldMeasureUsageFrom, field.TypeTime, value)
		_node.MeasureUsageFrom = &value
	}
	if value, ok := ec.mutation.IssueAfterReset(); ok {
		_spec.SetField(entitlement.FieldIssueAfterReset, field.TypeFloat64, value)
		_node.IssueAfterReset = &value
	}
	if value, ok := ec.mutation.IssueAfterResetPriority(); ok {
		_spec.SetField(entitlement.FieldIssueAfterResetPriority, field.TypeUint8, value)
		_node.IssueAfterResetPriority = &value
	}
	if value, ok := ec.mutation.IsSoftLimit(); ok {
		_spec.SetField(entitlement.FieldIsSoftLimit, field.TypeBool, value)
		_node.IsSoftLimit = &value
	}
	if value, ok := ec.mutation.Config(); ok {
		_spec.SetField(entitlement.FieldConfig, field.TypeJSON, value)
		_node.Config = value
	}
	if value, ok := ec.mutation.UsagePeriodInterval(); ok {
		_spec.SetField(entitlement.FieldUsagePeriodInterval, field.TypeEnum, value)
		_node.UsagePeriodInterval = &value
	}
	if value, ok := ec.mutation.UsagePeriodAnchor(); ok {
		_spec.SetField(entitlement.FieldUsagePeriodAnchor, field.TypeTime, value)
		_node.UsagePeriodAnchor = &value
	}
	if value, ok := ec.mutation.CurrentUsagePeriodStart(); ok {
		_spec.SetField(entitlement.FieldCurrentUsagePeriodStart, field.TypeTime, value)
		_node.CurrentUsagePeriodStart = &value
	}
	if value, ok := ec.mutation.CurrentUsagePeriodEnd(); ok {
		_spec.SetField(entitlement.FieldCurrentUsagePeriodEnd, field.TypeTime, value)
		_node.CurrentUsagePeriodEnd = &value
	}
	if nodes := ec.mutation.UsageResetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlement.UsageResetTable,
			Columns: []string{entitlement.UsageResetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usagereset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Entitlement.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EntitlementUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (ec *EntitlementCreate) OnConflict(opts ...sql.ConflictOption) *EntitlementUpsertOne {
	ec.conflict = opts
	return &EntitlementUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Entitlement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EntitlementCreate) OnConflictColumns(columns ...string) *EntitlementUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EntitlementUpsertOne{
		create: ec,
	}
}

type (
	// EntitlementUpsertOne is the builder for "upsert"-ing
	//  one Entitlement node.
	EntitlementUpsertOne struct {
		create *EntitlementCreate
	}

	// EntitlementUpsert is the "OnConflict" setter.
	EntitlementUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *EntitlementUpsert) SetMetadata(v map[string]string) *EntitlementUpsert {
	u.Set(entitlement.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *EntitlementUpsert) UpdateMetadata() *EntitlementUpsert {
	u.SetExcluded(entitlement.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *EntitlementUpsert) ClearMetadata() *EntitlementUpsert {
	u.SetNull(entitlement.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EntitlementUpsert) SetUpdatedAt(v time.Time) *EntitlementUpsert {
	u.Set(entitlement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EntitlementUpsert) UpdateUpdatedAt() *EntitlementUpsert {
	u.SetExcluded(entitlement.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EntitlementUpsert) SetDeletedAt(v time.Time) *EntitlementUpsert {
	u.Set(entitlement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EntitlementUpsert) UpdateDeletedAt() *EntitlementUpsert {
	u.SetExcluded(entitlement.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EntitlementUpsert) ClearDeletedAt() *EntitlementUpsert {
	u.SetNull(entitlement.FieldDeletedAt)
	return u
}

// SetConfig sets the "config" field.
func (u *EntitlementUpsert) SetConfig(v []uint8) *EntitlementUpsert {
	u.Set(entitlement.FieldConfig, v)
	return u
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *EntitlementUpsert) UpdateConfig() *EntitlementUpsert {
	u.SetExcluded(entitlement.FieldConfig)
	return u
}

// ClearConfig clears the value of the "config" field.
func (u *EntitlementUpsert) ClearConfig() *EntitlementUpsert {
	u.SetNull(entitlement.FieldConfig)
	return u
}

// SetUsagePeriodAnchor sets the "usage_period_anchor" field.
func (u *EntitlementUpsert) SetUsagePeriodAnchor(v time.Time) *EntitlementUpsert {
	u.Set(entitlement.FieldUsagePeriodAnchor, v)
	return u
}

// UpdateUsagePeriodAnchor sets the "usage_period_anchor" field to the value that was provided on create.
func (u *EntitlementUpsert) UpdateUsagePeriodAnchor() *EntitlementUpsert {
	u.SetExcluded(entitlement.FieldUsagePeriodAnchor)
	return u
}

// ClearUsagePeriodAnchor clears the value of the "usage_period_anchor" field.
func (u *EntitlementUpsert) ClearUsagePeriodAnchor() *EntitlementUpsert {
	u.SetNull(entitlement.FieldUsagePeriodAnchor)
	return u
}

// SetCurrentUsagePeriodStart sets the "current_usage_period_start" field.
func (u *EntitlementUpsert) SetCurrentUsagePeriodStart(v time.Time) *EntitlementUpsert {
	u.Set(entitlement.FieldCurrentUsagePeriodStart, v)
	return u
}

// UpdateCurrentUsagePeriodStart sets the "current_usage_period_start" field to the value that was provided on create.
func (u *EntitlementUpsert) UpdateCurrentUsagePeriodStart() *EntitlementUpsert {
	u.SetExcluded(entitlement.FieldCurrentUsagePeriodStart)
	return u
}

// ClearCurrentUsagePeriodStart clears the value of the "current_usage_period_start" field.
func (u *EntitlementUpsert) ClearCurrentUsagePeriodStart() *EntitlementUpsert {
	u.SetNull(entitlement.FieldCurrentUsagePeriodStart)
	return u
}

// SetCurrentUsagePeriodEnd sets the "current_usage_period_end" field.
func (u *EntitlementUpsert) SetCurrentUsagePeriodEnd(v time.Time) *EntitlementUpsert {
	u.Set(entitlement.FieldCurrentUsagePeriodEnd, v)
	return u
}

// UpdateCurrentUsagePeriodEnd sets the "current_usage_period_end" field to the value that was provided on create.
func (u *EntitlementUpsert) UpdateCurrentUsagePeriodEnd() *EntitlementUpsert {
	u.SetExcluded(entitlement.FieldCurrentUsagePeriodEnd)
	return u
}

// ClearCurrentUsagePeriodEnd clears the value of the "current_usage_period_end" field.
func (u *EntitlementUpsert) ClearCurrentUsagePeriodEnd() *EntitlementUpsert {
	u.SetNull(entitlement.FieldCurrentUsagePeriodEnd)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Entitlement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(entitlement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EntitlementUpsertOne) UpdateNewValues() *EntitlementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(entitlement.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(entitlement.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(entitlement.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.EntitlementType(); exists {
			s.SetIgnore(entitlement.FieldEntitlementType)
		}
		if _, exists := u.create.mutation.FeatureID(); exists {
			s.SetIgnore(entitlement.FieldFeatureID)
		}
		if _, exists := u.create.mutation.FeatureKey(); exists {
			s.SetIgnore(entitlement.FieldFeatureKey)
		}
		if _, exists := u.create.mutation.SubjectKey(); exists {
			s.SetIgnore(entitlement.FieldSubjectKey)
		}
		if _, exists := u.create.mutation.MeasureUsageFrom(); exists {
			s.SetIgnore(entitlement.FieldMeasureUsageFrom)
		}
		if _, exists := u.create.mutation.IssueAfterReset(); exists {
			s.SetIgnore(entitlement.FieldIssueAfterReset)
		}
		if _, exists := u.create.mutation.IssueAfterResetPriority(); exists {
			s.SetIgnore(entitlement.FieldIssueAfterResetPriority)
		}
		if _, exists := u.create.mutation.IsSoftLimit(); exists {
			s.SetIgnore(entitlement.FieldIsSoftLimit)
		}
		if _, exists := u.create.mutation.UsagePeriodInterval(); exists {
			s.SetIgnore(entitlement.FieldUsagePeriodInterval)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Entitlement.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EntitlementUpsertOne) Ignore() *EntitlementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EntitlementUpsertOne) DoNothing() *EntitlementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EntitlementCreate.OnConflict
// documentation for more info.
func (u *EntitlementUpsertOne) Update(set func(*EntitlementUpsert)) *EntitlementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EntitlementUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *EntitlementUpsertOne) SetMetadata(v map[string]string) *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *EntitlementUpsertOne) UpdateMetadata() *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *EntitlementUpsertOne) ClearMetadata() *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EntitlementUpsertOne) SetUpdatedAt(v time.Time) *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EntitlementUpsertOne) UpdateUpdatedAt() *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EntitlementUpsertOne) SetDeletedAt(v time.Time) *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EntitlementUpsertOne) UpdateDeletedAt() *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EntitlementUpsertOne) ClearDeletedAt() *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.ClearDeletedAt()
	})
}

// SetConfig sets the "config" field.
func (u *EntitlementUpsertOne) SetConfig(v []uint8) *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *EntitlementUpsertOne) UpdateConfig() *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.UpdateConfig()
	})
}

// ClearConfig clears the value of the "config" field.
func (u *EntitlementUpsertOne) ClearConfig() *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.ClearConfig()
	})
}

// SetUsagePeriodAnchor sets the "usage_period_anchor" field.
func (u *EntitlementUpsertOne) SetUsagePeriodAnchor(v time.Time) *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.SetUsagePeriodAnchor(v)
	})
}

// UpdateUsagePeriodAnchor sets the "usage_period_anchor" field to the value that was provided on create.
func (u *EntitlementUpsertOne) UpdateUsagePeriodAnchor() *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.UpdateUsagePeriodAnchor()
	})
}

// ClearUsagePeriodAnchor clears the value of the "usage_period_anchor" field.
func (u *EntitlementUpsertOne) ClearUsagePeriodAnchor() *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.ClearUsagePeriodAnchor()
	})
}

// SetCurrentUsagePeriodStart sets the "current_usage_period_start" field.
func (u *EntitlementUpsertOne) SetCurrentUsagePeriodStart(v time.Time) *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.SetCurrentUsagePeriodStart(v)
	})
}

// UpdateCurrentUsagePeriodStart sets the "current_usage_period_start" field to the value that was provided on create.
func (u *EntitlementUpsertOne) UpdateCurrentUsagePeriodStart() *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.UpdateCurrentUsagePeriodStart()
	})
}

// ClearCurrentUsagePeriodStart clears the value of the "current_usage_period_start" field.
func (u *EntitlementUpsertOne) ClearCurrentUsagePeriodStart() *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.ClearCurrentUsagePeriodStart()
	})
}

// SetCurrentUsagePeriodEnd sets the "current_usage_period_end" field.
func (u *EntitlementUpsertOne) SetCurrentUsagePeriodEnd(v time.Time) *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.SetCurrentUsagePeriodEnd(v)
	})
}

// UpdateCurrentUsagePeriodEnd sets the "current_usage_period_end" field to the value that was provided on create.
func (u *EntitlementUpsertOne) UpdateCurrentUsagePeriodEnd() *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.UpdateCurrentUsagePeriodEnd()
	})
}

// ClearCurrentUsagePeriodEnd clears the value of the "current_usage_period_end" field.
func (u *EntitlementUpsertOne) ClearCurrentUsagePeriodEnd() *EntitlementUpsertOne {
	return u.Update(func(s *EntitlementUpsert) {
		s.ClearCurrentUsagePeriodEnd()
	})
}

// Exec executes the query.
func (u *EntitlementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for EntitlementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EntitlementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EntitlementUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: EntitlementUpsertOne.ID is not supported by MySQL driver. Use EntitlementUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EntitlementUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EntitlementCreateBulk is the builder for creating many Entitlement entities in bulk.
type EntitlementCreateBulk struct {
	config
	err      error
	builders []*EntitlementCreate
	conflict []sql.ConflictOption
}

// Save creates the Entitlement entities in the database.
func (ecb *EntitlementCreateBulk) Save(ctx context.Context) ([]*Entitlement, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Entitlement, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntitlementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EntitlementCreateBulk) SaveX(ctx context.Context) []*Entitlement {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EntitlementCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EntitlementCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Entitlement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EntitlementUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (ecb *EntitlementCreateBulk) OnConflict(opts ...sql.ConflictOption) *EntitlementUpsertBulk {
	ecb.conflict = opts
	return &EntitlementUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Entitlement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EntitlementCreateBulk) OnConflictColumns(columns ...string) *EntitlementUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EntitlementUpsertBulk{
		create: ecb,
	}
}

// EntitlementUpsertBulk is the builder for "upsert"-ing
// a bulk of Entitlement nodes.
type EntitlementUpsertBulk struct {
	create *EntitlementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Entitlement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(entitlement.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EntitlementUpsertBulk) UpdateNewValues() *EntitlementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(entitlement.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(entitlement.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(entitlement.FieldCreatedAt)
			}
			if _, exists := b.mutation.EntitlementType(); exists {
				s.SetIgnore(entitlement.FieldEntitlementType)
			}
			if _, exists := b.mutation.FeatureID(); exists {
				s.SetIgnore(entitlement.FieldFeatureID)
			}
			if _, exists := b.mutation.FeatureKey(); exists {
				s.SetIgnore(entitlement.FieldFeatureKey)
			}
			if _, exists := b.mutation.SubjectKey(); exists {
				s.SetIgnore(entitlement.FieldSubjectKey)
			}
			if _, exists := b.mutation.MeasureUsageFrom(); exists {
				s.SetIgnore(entitlement.FieldMeasureUsageFrom)
			}
			if _, exists := b.mutation.IssueAfterReset(); exists {
				s.SetIgnore(entitlement.FieldIssueAfterReset)
			}
			if _, exists := b.mutation.IssueAfterResetPriority(); exists {
				s.SetIgnore(entitlement.FieldIssueAfterResetPriority)
			}
			if _, exists := b.mutation.IsSoftLimit(); exists {
				s.SetIgnore(entitlement.FieldIsSoftLimit)
			}
			if _, exists := b.mutation.UsagePeriodInterval(); exists {
				s.SetIgnore(entitlement.FieldUsagePeriodInterval)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Entitlement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EntitlementUpsertBulk) Ignore() *EntitlementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EntitlementUpsertBulk) DoNothing() *EntitlementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EntitlementCreateBulk.OnConflict
// documentation for more info.
func (u *EntitlementUpsertBulk) Update(set func(*EntitlementUpsert)) *EntitlementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EntitlementUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *EntitlementUpsertBulk) SetMetadata(v map[string]string) *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *EntitlementUpsertBulk) UpdateMetadata() *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *EntitlementUpsertBulk) ClearMetadata() *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EntitlementUpsertBulk) SetUpdatedAt(v time.Time) *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EntitlementUpsertBulk) UpdateUpdatedAt() *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EntitlementUpsertBulk) SetDeletedAt(v time.Time) *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EntitlementUpsertBulk) UpdateDeletedAt() *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EntitlementUpsertBulk) ClearDeletedAt() *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.ClearDeletedAt()
	})
}

// SetConfig sets the "config" field.
func (u *EntitlementUpsertBulk) SetConfig(v []uint8) *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *EntitlementUpsertBulk) UpdateConfig() *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.UpdateConfig()
	})
}

// ClearConfig clears the value of the "config" field.
func (u *EntitlementUpsertBulk) ClearConfig() *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.ClearConfig()
	})
}

// SetUsagePeriodAnchor sets the "usage_period_anchor" field.
func (u *EntitlementUpsertBulk) SetUsagePeriodAnchor(v time.Time) *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.SetUsagePeriodAnchor(v)
	})
}

// UpdateUsagePeriodAnchor sets the "usage_period_anchor" field to the value that was provided on create.
func (u *EntitlementUpsertBulk) UpdateUsagePeriodAnchor() *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.UpdateUsagePeriodAnchor()
	})
}

// ClearUsagePeriodAnchor clears the value of the "usage_period_anchor" field.
func (u *EntitlementUpsertBulk) ClearUsagePeriodAnchor() *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.ClearUsagePeriodAnchor()
	})
}

// SetCurrentUsagePeriodStart sets the "current_usage_period_start" field.
func (u *EntitlementUpsertBulk) SetCurrentUsagePeriodStart(v time.Time) *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.SetCurrentUsagePeriodStart(v)
	})
}

// UpdateCurrentUsagePeriodStart sets the "current_usage_period_start" field to the value that was provided on create.
func (u *EntitlementUpsertBulk) UpdateCurrentUsagePeriodStart() *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.UpdateCurrentUsagePeriodStart()
	})
}

// ClearCurrentUsagePeriodStart clears the value of the "current_usage_period_start" field.
func (u *EntitlementUpsertBulk) ClearCurrentUsagePeriodStart() *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.ClearCurrentUsagePeriodStart()
	})
}

// SetCurrentUsagePeriodEnd sets the "current_usage_period_end" field.
func (u *EntitlementUpsertBulk) SetCurrentUsagePeriodEnd(v time.Time) *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.SetCurrentUsagePeriodEnd(v)
	})
}

// UpdateCurrentUsagePeriodEnd sets the "current_usage_period_end" field to the value that was provided on create.
func (u *EntitlementUpsertBulk) UpdateCurrentUsagePeriodEnd() *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.UpdateCurrentUsagePeriodEnd()
	})
}

// ClearCurrentUsagePeriodEnd clears the value of the "current_usage_period_end" field.
func (u *EntitlementUpsertBulk) ClearCurrentUsagePeriodEnd() *EntitlementUpsertBulk {
	return u.Update(func(s *EntitlementUpsert) {
		s.ClearCurrentUsagePeriodEnd()
	})
}

// Exec executes the query.
func (u *EntitlementUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the EntitlementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for EntitlementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EntitlementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
