// Code generated by ent, DO NOT EDIT.

package dbgrant

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openmeterio/openmeter/pkg/recurrence"
)

const (
	// Label holds the string label denoting the grant type in the database.
	Label = "grant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldEffectiveAt holds the string denoting the effective_at field in the database.
	FieldEffectiveAt = "effective_at"
	// FieldExpiration holds the string denoting the expiration field in the database.
	FieldExpiration = "expiration"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldVoidedAt holds the string denoting the voided_at field in the database.
	FieldVoidedAt = "voided_at"
	// FieldResetMaxRollover holds the string denoting the reset_max_rollover field in the database.
	FieldResetMaxRollover = "reset_max_rollover"
	// FieldResetMinRollover holds the string denoting the reset_min_rollover field in the database.
	FieldResetMinRollover = "reset_min_rollover"
	// FieldRecurrencePeriod holds the string denoting the recurrence_period field in the database.
	FieldRecurrencePeriod = "recurrence_period"
	// FieldRecurrenceAnchor holds the string denoting the recurrence_anchor field in the database.
	FieldRecurrenceAnchor = "recurrence_anchor"
	// EdgeEntitlement holds the string denoting the entitlement edge name in mutations.
	EdgeEntitlement = "entitlement"
	// Table holds the table name of the grant in the database.
	Table = "grants"
	// EntitlementTable is the table that holds the entitlement relation/edge.
	EntitlementTable = "grants"
	// EntitlementInverseTable is the table name for the Entitlement entity.
	// It exists in this package in order to avoid circular dependency with the "entitlement" package.
	EntitlementInverseTable = "entitlements"
	// EntitlementColumn is the table column denoting the entitlement relation/edge.
	EntitlementColumn = "owner_id"
)

// Columns holds all SQL columns for grant fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldOwnerID,
	FieldAmount,
	FieldPriority,
	FieldEffectiveAt,
	FieldExpiration,
	FieldExpiresAt,
	FieldVoidedAt,
	FieldResetMaxRollover,
	FieldResetMinRollover,
	FieldRecurrencePeriod,
	FieldRecurrenceAnchor,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NamespaceValidator is a validator for the "namespace" field. It is called by the builders before save.
	NamespaceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultPriority holds the default value on creation for the "priority" field.
	DefaultPriority uint8
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// RecurrencePeriodValidator is a validator for the "recurrence_period" field enum values. It is called by the builders before save.
func RecurrencePeriodValidator(rp recurrence.RecurrenceInterval) error {
	switch rp {
	case "DAY", "WEEK", "MONTH", "YEAR":
		return nil
	default:
		return fmt.Errorf("dbgrant: invalid enum value for recurrence_period field: %q", rp)
	}
}

// OrderOption defines the ordering options for the Grant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByEffectiveAt orders the results by the effective_at field.
func ByEffectiveAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffectiveAt, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByVoidedAt orders the results by the voided_at field.
func ByVoidedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoidedAt, opts...).ToFunc()
}

// ByResetMaxRollover orders the results by the reset_max_rollover field.
func ByResetMaxRollover(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResetMaxRollover, opts...).ToFunc()
}

// ByResetMinRollover orders the results by the reset_min_rollover field.
func ByResetMinRollover(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResetMinRollover, opts...).ToFunc()
}

// ByRecurrencePeriod orders the results by the recurrence_period field.
func ByRecurrencePeriod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecurrencePeriod, opts...).ToFunc()
}

// ByRecurrenceAnchor orders the results by the recurrence_anchor field.
func ByRecurrenceAnchor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecurrenceAnchor, opts...).ToFunc()
}

// ByEntitlementField orders the results by entitlement field.
func ByEntitlementField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntitlementStep(), sql.OrderByField(field, opts...))
	}
}
func newEntitlementStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntitlementInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EntitlementTable, EntitlementColumn),
	)
}
