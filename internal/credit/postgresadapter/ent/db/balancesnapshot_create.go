// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/internal/credit"
	"github.com/openmeterio/openmeter/internal/credit/postgresadapter/ent/db/balancesnapshot"
)

// BalanceSnapshotCreate is the builder for creating a BalanceSnapshot entity.
type BalanceSnapshotCreate struct {
	config
	mutation *BalanceSnapshotMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (bsc *BalanceSnapshotCreate) SetNamespace(s string) *BalanceSnapshotCreate {
	bsc.mutation.SetNamespace(s)
	return bsc
}

// SetCreatedAt sets the "created_at" field.
func (bsc *BalanceSnapshotCreate) SetCreatedAt(t time.Time) *BalanceSnapshotCreate {
	bsc.mutation.SetCreatedAt(t)
	return bsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bsc *BalanceSnapshotCreate) SetNillableCreatedAt(t *time.Time) *BalanceSnapshotCreate {
	if t != nil {
		bsc.SetCreatedAt(*t)
	}
	return bsc
}

// SetUpdatedAt sets the "updated_at" field.
func (bsc *BalanceSnapshotCreate) SetUpdatedAt(t time.Time) *BalanceSnapshotCreate {
	bsc.mutation.SetUpdatedAt(t)
	return bsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bsc *BalanceSnapshotCreate) SetNillableUpdatedAt(t *time.Time) *BalanceSnapshotCreate {
	if t != nil {
		bsc.SetUpdatedAt(*t)
	}
	return bsc
}

// SetDeletedAt sets the "deleted_at" field.
func (bsc *BalanceSnapshotCreate) SetDeletedAt(t time.Time) *BalanceSnapshotCreate {
	bsc.mutation.SetDeletedAt(t)
	return bsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bsc *BalanceSnapshotCreate) SetNillableDeletedAt(t *time.Time) *BalanceSnapshotCreate {
	if t != nil {
		bsc.SetDeletedAt(*t)
	}
	return bsc
}

// SetOwnerID sets the "owner_id" field.
func (bsc *BalanceSnapshotCreate) SetOwnerID(co credit.GrantOwner) *BalanceSnapshotCreate {
	bsc.mutation.SetOwnerID(co)
	return bsc
}

// SetGrantBalances sets the "grant_balances" field.
func (bsc *BalanceSnapshotCreate) SetGrantBalances(cbm credit.GrantBalanceMap) *BalanceSnapshotCreate {
	bsc.mutation.SetGrantBalances(cbm)
	return bsc
}

// SetBalance sets the "balance" field.
func (bsc *BalanceSnapshotCreate) SetBalance(f float64) *BalanceSnapshotCreate {
	bsc.mutation.SetBalance(f)
	return bsc
}

// SetOverage sets the "overage" field.
func (bsc *BalanceSnapshotCreate) SetOverage(f float64) *BalanceSnapshotCreate {
	bsc.mutation.SetOverage(f)
	return bsc
}

// SetAt sets the "at" field.
func (bsc *BalanceSnapshotCreate) SetAt(t time.Time) *BalanceSnapshotCreate {
	bsc.mutation.SetAt(t)
	return bsc
}

// Mutation returns the BalanceSnapshotMutation object of the builder.
func (bsc *BalanceSnapshotCreate) Mutation() *BalanceSnapshotMutation {
	return bsc.mutation
}

// Save creates the BalanceSnapshot in the database.
func (bsc *BalanceSnapshotCreate) Save(ctx context.Context) (*BalanceSnapshot, error) {
	bsc.defaults()
	return withHooks(ctx, bsc.sqlSave, bsc.mutation, bsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bsc *BalanceSnapshotCreate) SaveX(ctx context.Context) *BalanceSnapshot {
	v, err := bsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bsc *BalanceSnapshotCreate) Exec(ctx context.Context) error {
	_, err := bsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsc *BalanceSnapshotCreate) ExecX(ctx context.Context) {
	if err := bsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsc *BalanceSnapshotCreate) defaults() {
	if _, ok := bsc.mutation.CreatedAt(); !ok {
		v := balancesnapshot.DefaultCreatedAt()
		bsc.mutation.SetCreatedAt(v)
	}
	if _, ok := bsc.mutation.UpdatedAt(); !ok {
		v := balancesnapshot.DefaultUpdatedAt()
		bsc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsc *BalanceSnapshotCreate) check() error {
	if _, ok := bsc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BalanceSnapshot.namespace"`)}
	}
	if v, ok := bsc.mutation.Namespace(); ok {
		if err := balancesnapshot.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BalanceSnapshot.namespace": %w`, err)}
		}
	}
	if _, ok := bsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BalanceSnapshot.created_at"`)}
	}
	if _, ok := bsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BalanceSnapshot.updated_at"`)}
	}
	if _, ok := bsc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`db: missing required field "BalanceSnapshot.owner_id"`)}
	}
	if _, ok := bsc.mutation.GrantBalances(); !ok {
		return &ValidationError{Name: "grant_balances", err: errors.New(`db: missing required field "BalanceSnapshot.grant_balances"`)}
	}
	if _, ok := bsc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`db: missing required field "BalanceSnapshot.balance"`)}
	}
	if _, ok := bsc.mutation.Overage(); !ok {
		return &ValidationError{Name: "overage", err: errors.New(`db: missing required field "BalanceSnapshot.overage"`)}
	}
	if _, ok := bsc.mutation.At(); !ok {
		return &ValidationError{Name: "at", err: errors.New(`db: missing required field "BalanceSnapshot.at"`)}
	}
	return nil
}

func (bsc *BalanceSnapshotCreate) sqlSave(ctx context.Context) (*BalanceSnapshot, error) {
	if err := bsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bsc.mutation.id = &_node.ID
	bsc.mutation.done = true
	return _node, nil
}

func (bsc *BalanceSnapshotCreate) createSpec() (*BalanceSnapshot, *sqlgraph.CreateSpec) {
	var (
		_node = &BalanceSnapshot{config: bsc.config}
		_spec = sqlgraph.NewCreateSpec(balancesnapshot.Table, sqlgraph.NewFieldSpec(balancesnapshot.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bsc.conflict
	if value, ok := bsc.mutation.Namespace(); ok {
		_spec.SetField(balancesnapshot.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := bsc.mutation.CreatedAt(); ok {
		_spec.SetField(balancesnapshot.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bsc.mutation.UpdatedAt(); ok {
		_spec.SetField(balancesnapshot.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bsc.mutation.DeletedAt(); ok {
		_spec.SetField(balancesnapshot.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bsc.mutation.OwnerID(); ok {
		_spec.SetField(balancesnapshot.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := bsc.mutation.GrantBalances(); ok {
		_spec.SetField(balancesnapshot.FieldGrantBalances, field.TypeJSON, value)
		_node.GrantBalances = value
	}
	if value, ok := bsc.mutation.Balance(); ok {
		_spec.SetField(balancesnapshot.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if value, ok := bsc.mutation.Overage(); ok {
		_spec.SetField(balancesnapshot.FieldOverage, field.TypeFloat64, value)
		_node.Overage = value
	}
	if value, ok := bsc.mutation.At(); ok {
		_spec.SetField(balancesnapshot.FieldAt, field.TypeTime, value)
		_node.At = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BalanceSnapshot.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BalanceSnapshotUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bsc *BalanceSnapshotCreate) OnConflict(opts ...sql.ConflictOption) *BalanceSnapshotUpsertOne {
	bsc.conflict = opts
	return &BalanceSnapshotUpsertOne{
		create: bsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BalanceSnapshot.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bsc *BalanceSnapshotCreate) OnConflictColumns(columns ...string) *BalanceSnapshotUpsertOne {
	bsc.conflict = append(bsc.conflict, sql.ConflictColumns(columns...))
	return &BalanceSnapshotUpsertOne{
		create: bsc,
	}
}

type (
	// BalanceSnapshotUpsertOne is the builder for "upsert"-ing
	//  one BalanceSnapshot node.
	BalanceSnapshotUpsertOne struct {
		create *BalanceSnapshotCreate
	}

	// BalanceSnapshotUpsert is the "OnConflict" setter.
	BalanceSnapshotUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BalanceSnapshotUpsert) SetUpdatedAt(v time.Time) *BalanceSnapshotUpsert {
	u.Set(balancesnapshot.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BalanceSnapshotUpsert) UpdateUpdatedAt() *BalanceSnapshotUpsert {
	u.SetExcluded(balancesnapshot.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BalanceSnapshotUpsert) SetDeletedAt(v time.Time) *BalanceSnapshotUpsert {
	u.Set(balancesnapshot.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BalanceSnapshotUpsert) UpdateDeletedAt() *BalanceSnapshotUpsert {
	u.SetExcluded(balancesnapshot.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BalanceSnapshotUpsert) ClearDeletedAt() *BalanceSnapshotUpsert {
	u.SetNull(balancesnapshot.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BalanceSnapshot.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BalanceSnapshotUpsertOne) UpdateNewValues() *BalanceSnapshotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(balancesnapshot.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(balancesnapshot.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.OwnerID(); exists {
			s.SetIgnore(balancesnapshot.FieldOwnerID)
		}
		if _, exists := u.create.mutation.GrantBalances(); exists {
			s.SetIgnore(balancesnapshot.FieldGrantBalances)
		}
		if _, exists := u.create.mutation.Balance(); exists {
			s.SetIgnore(balancesnapshot.FieldBalance)
		}
		if _, exists := u.create.mutation.Overage(); exists {
			s.SetIgnore(balancesnapshot.FieldOverage)
		}
		if _, exists := u.create.mutation.At(); exists {
			s.SetIgnore(balancesnapshot.FieldAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BalanceSnapshot.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BalanceSnapshotUpsertOne) Ignore() *BalanceSnapshotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BalanceSnapshotUpsertOne) DoNothing() *BalanceSnapshotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BalanceSnapshotCreate.OnConflict
// documentation for more info.
func (u *BalanceSnapshotUpsertOne) Update(set func(*BalanceSnapshotUpsert)) *BalanceSnapshotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BalanceSnapshotUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BalanceSnapshotUpsertOne) SetUpdatedAt(v time.Time) *BalanceSnapshotUpsertOne {
	return u.Update(func(s *BalanceSnapshotUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BalanceSnapshotUpsertOne) UpdateUpdatedAt() *BalanceSnapshotUpsertOne {
	return u.Update(func(s *BalanceSnapshotUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BalanceSnapshotUpsertOne) SetDeletedAt(v time.Time) *BalanceSnapshotUpsertOne {
	return u.Update(func(s *BalanceSnapshotUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BalanceSnapshotUpsertOne) UpdateDeletedAt() *BalanceSnapshotUpsertOne {
	return u.Update(func(s *BalanceSnapshotUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BalanceSnapshotUpsertOne) ClearDeletedAt() *BalanceSnapshotUpsertOne {
	return u.Update(func(s *BalanceSnapshotUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *BalanceSnapshotUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BalanceSnapshotCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BalanceSnapshotUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BalanceSnapshotUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BalanceSnapshotUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BalanceSnapshotCreateBulk is the builder for creating many BalanceSnapshot entities in bulk.
type BalanceSnapshotCreateBulk struct {
	config
	err      error
	builders []*BalanceSnapshotCreate
	conflict []sql.ConflictOption
}

// Save creates the BalanceSnapshot entities in the database.
func (bscb *BalanceSnapshotCreateBulk) Save(ctx context.Context) ([]*BalanceSnapshot, error) {
	if bscb.err != nil {
		return nil, bscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bscb.builders))
	nodes := make([]*BalanceSnapshot, len(bscb.builders))
	mutators := make([]Mutator, len(bscb.builders))
	for i := range bscb.builders {
		func(i int, root context.Context) {
			builder := bscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BalanceSnapshotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bscb *BalanceSnapshotCreateBulk) SaveX(ctx context.Context) []*BalanceSnapshot {
	v, err := bscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bscb *BalanceSnapshotCreateBulk) Exec(ctx context.Context) error {
	_, err := bscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bscb *BalanceSnapshotCreateBulk) ExecX(ctx context.Context) {
	if err := bscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BalanceSnapshot.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BalanceSnapshotUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bscb *BalanceSnapshotCreateBulk) OnConflict(opts ...sql.ConflictOption) *BalanceSnapshotUpsertBulk {
	bscb.conflict = opts
	return &BalanceSnapshotUpsertBulk{
		create: bscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BalanceSnapshot.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bscb *BalanceSnapshotCreateBulk) OnConflictColumns(columns ...string) *BalanceSnapshotUpsertBulk {
	bscb.conflict = append(bscb.conflict, sql.ConflictColumns(columns...))
	return &BalanceSnapshotUpsertBulk{
		create: bscb,
	}
}

// BalanceSnapshotUpsertBulk is the builder for "upsert"-ing
// a bulk of BalanceSnapshot nodes.
type BalanceSnapshotUpsertBulk struct {
	create *BalanceSnapshotCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BalanceSnapshot.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BalanceSnapshotUpsertBulk) UpdateNewValues() *BalanceSnapshotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(balancesnapshot.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(balancesnapshot.FieldCreatedAt)
			}
			if _, exists := b.mutation.OwnerID(); exists {
				s.SetIgnore(balancesnapshot.FieldOwnerID)
			}
			if _, exists := b.mutation.GrantBalances(); exists {
				s.SetIgnore(balancesnapshot.FieldGrantBalances)
			}
			if _, exists := b.mutation.Balance(); exists {
				s.SetIgnore(balancesnapshot.FieldBalance)
			}
			if _, exists := b.mutation.Overage(); exists {
				s.SetIgnore(balancesnapshot.FieldOverage)
			}
			if _, exists := b.mutation.At(); exists {
				s.SetIgnore(balancesnapshot.FieldAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BalanceSnapshot.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BalanceSnapshotUpsertBulk) Ignore() *BalanceSnapshotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BalanceSnapshotUpsertBulk) DoNothing() *BalanceSnapshotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BalanceSnapshotCreateBulk.OnConflict
// documentation for more info.
func (u *BalanceSnapshotUpsertBulk) Update(set func(*BalanceSnapshotUpsert)) *BalanceSnapshotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BalanceSnapshotUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BalanceSnapshotUpsertBulk) SetUpdatedAt(v time.Time) *BalanceSnapshotUpsertBulk {
	return u.Update(func(s *BalanceSnapshotUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BalanceSnapshotUpsertBulk) UpdateUpdatedAt() *BalanceSnapshotUpsertBulk {
	return u.Update(func(s *BalanceSnapshotUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BalanceSnapshotUpsertBulk) SetDeletedAt(v time.Time) *BalanceSnapshotUpsertBulk {
	return u.Update(func(s *BalanceSnapshotUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BalanceSnapshotUpsertBulk) UpdateDeletedAt() *BalanceSnapshotUpsertBulk {
	return u.Update(func(s *BalanceSnapshotUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BalanceSnapshotUpsertBulk) ClearDeletedAt() *BalanceSnapshotUpsertBulk {
	return u.Update(func(s *BalanceSnapshotUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *BalanceSnapshotUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BalanceSnapshotCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BalanceSnapshotCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BalanceSnapshotUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
