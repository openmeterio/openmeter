// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/internal/credit/postgres_connector/ent/db/creditentry"
	"github.com/openmeterio/openmeter/internal/credit/postgres_connector/ent/db/feature"
	"github.com/openmeterio/openmeter/internal/credit/postgres_connector/ent/db/predicate"
)

// CreditEntryQuery is the builder for querying CreditEntry entities.
type CreditEntryQuery struct {
	config
	ctx          *QueryContext
	order        []creditentry.OrderOption
	inters       []Interceptor
	predicates   []predicate.CreditEntry
	withParent   *CreditEntryQuery
	withChildren *CreditEntryQuery
	withFeature  *FeatureQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CreditEntryQuery builder.
func (ceq *CreditEntryQuery) Where(ps ...predicate.CreditEntry) *CreditEntryQuery {
	ceq.predicates = append(ceq.predicates, ps...)
	return ceq
}

// Limit the number of records to be returned by this query.
func (ceq *CreditEntryQuery) Limit(limit int) *CreditEntryQuery {
	ceq.ctx.Limit = &limit
	return ceq
}

// Offset to start from.
func (ceq *CreditEntryQuery) Offset(offset int) *CreditEntryQuery {
	ceq.ctx.Offset = &offset
	return ceq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ceq *CreditEntryQuery) Unique(unique bool) *CreditEntryQuery {
	ceq.ctx.Unique = &unique
	return ceq
}

// Order specifies how the records should be ordered.
func (ceq *CreditEntryQuery) Order(o ...creditentry.OrderOption) *CreditEntryQuery {
	ceq.order = append(ceq.order, o...)
	return ceq
}

// QueryParent chains the current query on the "parent" edge.
func (ceq *CreditEntryQuery) QueryParent() *CreditEntryQuery {
	query := (&CreditEntryClient{config: ceq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ceq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ceq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(creditentry.Table, creditentry.FieldID, selector),
			sqlgraph.To(creditentry.Table, creditentry.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, creditentry.ParentTable, creditentry.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(ceq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (ceq *CreditEntryQuery) QueryChildren() *CreditEntryQuery {
	query := (&CreditEntryClient{config: ceq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ceq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ceq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(creditentry.Table, creditentry.FieldID, selector),
			sqlgraph.To(creditentry.Table, creditentry.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, creditentry.ChildrenTable, creditentry.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(ceq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeature chains the current query on the "feature" edge.
func (ceq *CreditEntryQuery) QueryFeature() *FeatureQuery {
	query := (&FeatureClient{config: ceq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ceq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ceq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(creditentry.Table, creditentry.FieldID, selector),
			sqlgraph.To(feature.Table, feature.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, creditentry.FeatureTable, creditentry.FeatureColumn),
		)
		fromU = sqlgraph.SetNeighbors(ceq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CreditEntry entity from the query.
// Returns a *NotFoundError when no CreditEntry was found.
func (ceq *CreditEntryQuery) First(ctx context.Context) (*CreditEntry, error) {
	nodes, err := ceq.Limit(1).All(setContextOp(ctx, ceq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{creditentry.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ceq *CreditEntryQuery) FirstX(ctx context.Context) *CreditEntry {
	node, err := ceq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CreditEntry ID from the query.
// Returns a *NotFoundError when no CreditEntry ID was found.
func (ceq *CreditEntryQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ceq.Limit(1).IDs(setContextOp(ctx, ceq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{creditentry.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ceq *CreditEntryQuery) FirstIDX(ctx context.Context) string {
	id, err := ceq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CreditEntry entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CreditEntry entity is found.
// Returns a *NotFoundError when no CreditEntry entities are found.
func (ceq *CreditEntryQuery) Only(ctx context.Context) (*CreditEntry, error) {
	nodes, err := ceq.Limit(2).All(setContextOp(ctx, ceq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{creditentry.Label}
	default:
		return nil, &NotSingularError{creditentry.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ceq *CreditEntryQuery) OnlyX(ctx context.Context) *CreditEntry {
	node, err := ceq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CreditEntry ID in the query.
// Returns a *NotSingularError when more than one CreditEntry ID is found.
// Returns a *NotFoundError when no entities are found.
func (ceq *CreditEntryQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ceq.Limit(2).IDs(setContextOp(ctx, ceq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{creditentry.Label}
	default:
		err = &NotSingularError{creditentry.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ceq *CreditEntryQuery) OnlyIDX(ctx context.Context) string {
	id, err := ceq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CreditEntries.
func (ceq *CreditEntryQuery) All(ctx context.Context) ([]*CreditEntry, error) {
	ctx = setContextOp(ctx, ceq.ctx, "All")
	if err := ceq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CreditEntry, *CreditEntryQuery]()
	return withInterceptors[[]*CreditEntry](ctx, ceq, qr, ceq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ceq *CreditEntryQuery) AllX(ctx context.Context) []*CreditEntry {
	nodes, err := ceq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CreditEntry IDs.
func (ceq *CreditEntryQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ceq.ctx.Unique == nil && ceq.path != nil {
		ceq.Unique(true)
	}
	ctx = setContextOp(ctx, ceq.ctx, "IDs")
	if err = ceq.Select(creditentry.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ceq *CreditEntryQuery) IDsX(ctx context.Context) []string {
	ids, err := ceq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ceq *CreditEntryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ceq.ctx, "Count")
	if err := ceq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ceq, querierCount[*CreditEntryQuery](), ceq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ceq *CreditEntryQuery) CountX(ctx context.Context) int {
	count, err := ceq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ceq *CreditEntryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ceq.ctx, "Exist")
	switch _, err := ceq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ceq *CreditEntryQuery) ExistX(ctx context.Context) bool {
	exist, err := ceq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CreditEntryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ceq *CreditEntryQuery) Clone() *CreditEntryQuery {
	if ceq == nil {
		return nil
	}
	return &CreditEntryQuery{
		config:       ceq.config,
		ctx:          ceq.ctx.Clone(),
		order:        append([]creditentry.OrderOption{}, ceq.order...),
		inters:       append([]Interceptor{}, ceq.inters...),
		predicates:   append([]predicate.CreditEntry{}, ceq.predicates...),
		withParent:   ceq.withParent.Clone(),
		withChildren: ceq.withChildren.Clone(),
		withFeature:  ceq.withFeature.Clone(),
		// clone intermediate query.
		sql:  ceq.sql.Clone(),
		path: ceq.path,
	}
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (ceq *CreditEntryQuery) WithParent(opts ...func(*CreditEntryQuery)) *CreditEntryQuery {
	query := (&CreditEntryClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ceq.withParent = query
	return ceq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (ceq *CreditEntryQuery) WithChildren(opts ...func(*CreditEntryQuery)) *CreditEntryQuery {
	query := (&CreditEntryClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ceq.withChildren = query
	return ceq
}

// WithFeature tells the query-builder to eager-load the nodes that are connected to
// the "feature" edge. The optional arguments are used to configure the query builder of the edge.
func (ceq *CreditEntryQuery) WithFeature(opts ...func(*FeatureQuery)) *CreditEntryQuery {
	query := (&FeatureClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ceq.withFeature = query
	return ceq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CreditEntry.Query().
//		GroupBy(creditentry.FieldCreatedAt).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (ceq *CreditEntryQuery) GroupBy(field string, fields ...string) *CreditEntryGroupBy {
	ceq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CreditEntryGroupBy{build: ceq}
	grbuild.flds = &ceq.ctx.Fields
	grbuild.label = creditentry.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.CreditEntry.Query().
//		Select(creditentry.FieldCreatedAt).
//		Scan(ctx, &v)
func (ceq *CreditEntryQuery) Select(fields ...string) *CreditEntrySelect {
	ceq.ctx.Fields = append(ceq.ctx.Fields, fields...)
	sbuild := &CreditEntrySelect{CreditEntryQuery: ceq}
	sbuild.label = creditentry.Label
	sbuild.flds, sbuild.scan = &ceq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CreditEntrySelect configured with the given aggregations.
func (ceq *CreditEntryQuery) Aggregate(fns ...AggregateFunc) *CreditEntrySelect {
	return ceq.Select().Aggregate(fns...)
}

func (ceq *CreditEntryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ceq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ceq); err != nil {
				return err
			}
		}
	}
	for _, f := range ceq.ctx.Fields {
		if !creditentry.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if ceq.path != nil {
		prev, err := ceq.path(ctx)
		if err != nil {
			return err
		}
		ceq.sql = prev
	}
	return nil
}

func (ceq *CreditEntryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CreditEntry, error) {
	var (
		nodes       = []*CreditEntry{}
		_spec       = ceq.querySpec()
		loadedTypes = [3]bool{
			ceq.withParent != nil,
			ceq.withChildren != nil,
			ceq.withFeature != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CreditEntry).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CreditEntry{config: ceq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ceq.modifiers) > 0 {
		_spec.Modifiers = ceq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ceq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ceq.withParent; query != nil {
		if err := ceq.loadParent(ctx, query, nodes, nil,
			func(n *CreditEntry, e *CreditEntry) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := ceq.withChildren; query != nil {
		if err := ceq.loadChildren(ctx, query, nodes, nil,
			func(n *CreditEntry, e *CreditEntry) { n.Edges.Children = e }); err != nil {
			return nil, err
		}
	}
	if query := ceq.withFeature; query != nil {
		if err := ceq.loadFeature(ctx, query, nodes, nil,
			func(n *CreditEntry, e *Feature) { n.Edges.Feature = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ceq *CreditEntryQuery) loadParent(ctx context.Context, query *CreditEntryQuery, nodes []*CreditEntry, init func(*CreditEntry), assign func(*CreditEntry, *CreditEntry)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*CreditEntry)
	for i := range nodes {
		if nodes[i].ParentID == nil {
			continue
		}
		fk := *nodes[i].ParentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(creditentry.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ceq *CreditEntryQuery) loadChildren(ctx context.Context, query *CreditEntryQuery, nodes []*CreditEntry, init func(*CreditEntry), assign func(*CreditEntry, *CreditEntry)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*CreditEntry)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(creditentry.FieldParentID)
	}
	query.Where(predicate.CreditEntry(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(creditentry.ChildrenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ParentID
		if fk == nil {
			return fmt.Errorf(`foreign-key "parent_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parent_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ceq *CreditEntryQuery) loadFeature(ctx context.Context, query *FeatureQuery, nodes []*CreditEntry, init func(*CreditEntry), assign func(*CreditEntry, *Feature)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*CreditEntry)
	for i := range nodes {
		if nodes[i].FeatureID == nil {
			continue
		}
		fk := *nodes[i].FeatureID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(feature.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "feature_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ceq *CreditEntryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ceq.querySpec()
	if len(ceq.modifiers) > 0 {
		_spec.Modifiers = ceq.modifiers
	}
	_spec.Node.Columns = ceq.ctx.Fields
	if len(ceq.ctx.Fields) > 0 {
		_spec.Unique = ceq.ctx.Unique != nil && *ceq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ceq.driver, _spec)
}

func (ceq *CreditEntryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(creditentry.Table, creditentry.Columns, sqlgraph.NewFieldSpec(creditentry.FieldID, field.TypeString))
	_spec.From = ceq.sql
	if unique := ceq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ceq.path != nil {
		_spec.Unique = true
	}
	if fields := ceq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, creditentry.FieldID)
		for i := range fields {
			if fields[i] != creditentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ceq.withParent != nil {
			_spec.Node.AddColumnOnce(creditentry.FieldParentID)
		}
		if ceq.withFeature != nil {
			_spec.Node.AddColumnOnce(creditentry.FieldFeatureID)
		}
	}
	if ps := ceq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ceq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ceq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ceq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ceq *CreditEntryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ceq.driver.Dialect())
	t1 := builder.Table(creditentry.Table)
	columns := ceq.ctx.Fields
	if len(columns) == 0 {
		columns = creditentry.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ceq.sql != nil {
		selector = ceq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ceq.ctx.Unique != nil && *ceq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ceq.modifiers {
		m(selector)
	}
	for _, p := range ceq.predicates {
		p(selector)
	}
	for _, p := range ceq.order {
		p(selector)
	}
	if offset := ceq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ceq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (ceq *CreditEntryQuery) ForUpdate(opts ...sql.LockOption) *CreditEntryQuery {
	if ceq.driver.Dialect() == dialect.Postgres {
		ceq.Unique(false)
	}
	ceq.modifiers = append(ceq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return ceq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (ceq *CreditEntryQuery) ForShare(opts ...sql.LockOption) *CreditEntryQuery {
	if ceq.driver.Dialect() == dialect.Postgres {
		ceq.Unique(false)
	}
	ceq.modifiers = append(ceq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return ceq
}

// CreditEntryGroupBy is the group-by builder for CreditEntry entities.
type CreditEntryGroupBy struct {
	selector
	build *CreditEntryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cegb *CreditEntryGroupBy) Aggregate(fns ...AggregateFunc) *CreditEntryGroupBy {
	cegb.fns = append(cegb.fns, fns...)
	return cegb
}

// Scan applies the selector query and scans the result into the given value.
func (cegb *CreditEntryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cegb.build.ctx, "GroupBy")
	if err := cegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CreditEntryQuery, *CreditEntryGroupBy](ctx, cegb.build, cegb, cegb.build.inters, v)
}

func (cegb *CreditEntryGroupBy) sqlScan(ctx context.Context, root *CreditEntryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cegb.fns))
	for _, fn := range cegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cegb.flds)+len(cegb.fns))
		for _, f := range *cegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CreditEntrySelect is the builder for selecting fields of CreditEntry entities.
type CreditEntrySelect struct {
	*CreditEntryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ces *CreditEntrySelect) Aggregate(fns ...AggregateFunc) *CreditEntrySelect {
	ces.fns = append(ces.fns, fns...)
	return ces
}

// Scan applies the selector query and scans the result into the given value.
func (ces *CreditEntrySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ces.ctx, "Select")
	if err := ces.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CreditEntryQuery, *CreditEntrySelect](ctx, ces.CreditEntryQuery, ces, ces.inters, v)
}

func (ces *CreditEntrySelect) sqlScan(ctx context.Context, root *CreditEntryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ces.fns))
	for _, fn := range ces.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ces.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ces.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
