// Code generated by ent, DO NOT EDIT.

package ledger

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/internal/credit/postgres_connector/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldUpdatedAt, v))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldNamespace, v))
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldSubject, v))
}

// Highwatermark applies equality check predicate on the "highwatermark" field. It's identical to HighwatermarkEQ.
func Highwatermark(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldHighwatermark, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldUpdatedAt, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldContainsFold(FieldNamespace, v))
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.Ledger {
	return predicate.Ledger(sql.FieldContainsFold(FieldSubject, v))
}

// HighwatermarkEQ applies the EQ predicate on the "highwatermark" field.
func HighwatermarkEQ(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldEQ(FieldHighwatermark, v))
}

// HighwatermarkNEQ applies the NEQ predicate on the "highwatermark" field.
func HighwatermarkNEQ(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldNEQ(FieldHighwatermark, v))
}

// HighwatermarkIn applies the In predicate on the "highwatermark" field.
func HighwatermarkIn(vs ...time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldIn(FieldHighwatermark, vs...))
}

// HighwatermarkNotIn applies the NotIn predicate on the "highwatermark" field.
func HighwatermarkNotIn(vs ...time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldNotIn(FieldHighwatermark, vs...))
}

// HighwatermarkGT applies the GT predicate on the "highwatermark" field.
func HighwatermarkGT(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldGT(FieldHighwatermark, v))
}

// HighwatermarkGTE applies the GTE predicate on the "highwatermark" field.
func HighwatermarkGTE(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldGTE(FieldHighwatermark, v))
}

// HighwatermarkLT applies the LT predicate on the "highwatermark" field.
func HighwatermarkLT(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldLT(FieldHighwatermark, v))
}

// HighwatermarkLTE applies the LTE predicate on the "highwatermark" field.
func HighwatermarkLTE(v time.Time) predicate.Ledger {
	return predicate.Ledger(sql.FieldLTE(FieldHighwatermark, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ledger) predicate.Ledger {
	return predicate.Ledger(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ledger) predicate.Ledger {
	return predicate.Ledger(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ledger) predicate.Ledger {
	return predicate.Ledger(sql.NotPredicates(p))
}
