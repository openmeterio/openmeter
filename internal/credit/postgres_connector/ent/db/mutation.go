// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/internal/credit/postgres_connector/ent/db/creditentry"
	"github.com/openmeterio/openmeter/internal/credit/postgres_connector/ent/db/predicate"
	"github.com/openmeterio/openmeter/internal/credit/postgres_connector/ent/db/product"
	"github.com/openmeterio/openmeter/pkg/credit"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCreditEntry = "CreditEntry"
	TypeProduct     = "Product"
)

// CreditEntryMutation represents an operation that mutates the CreditEntry nodes in the graph.
type CreditEntryMutation struct {
	config
	op                         Op
	typ                        string
	id                         *string
	created_at                 *time.Time
	updated_at                 *time.Time
	namespace                  *string
	subject                    *string
	entry_type                 *credit.EntryType
	_type                      *credit.GrantType
	amount                     *float64
	addamount                  *float64
	priority                   *uint8
	addpriority                *int8
	effective_at               *time.Time
	expiration_period_duration *credit.ExpirationPeriodDuration
	expiration_period_count    *uint8
	addexpiration_period_count *int8
	rollover_type              *credit.GrantRolloverType
	rollover_max_amount        *float64
	addrollover_max_amount     *float64
	metadata                   *map[string]string
	clearedFields              map[string]struct{}
	parent                     *string
	clearedparent              bool
	children                   *string
	clearedchildren            bool
	product                    *string
	clearedproduct             bool
	done                       bool
	oldValue                   func(context.Context) (*CreditEntry, error)
	predicates                 []predicate.CreditEntry
}

var _ ent.Mutation = (*CreditEntryMutation)(nil)

// creditentryOption allows management of the mutation configuration using functional options.
type creditentryOption func(*CreditEntryMutation)

// newCreditEntryMutation creates new mutation for the CreditEntry entity.
func newCreditEntryMutation(c config, op Op, opts ...creditentryOption) *CreditEntryMutation {
	m := &CreditEntryMutation{
		config:        c,
		op:            op,
		typ:           TypeCreditEntry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCreditEntryID sets the ID field of the mutation.
func withCreditEntryID(id string) creditentryOption {
	return func(m *CreditEntryMutation) {
		var (
			err   error
			once  sync.Once
			value *CreditEntry
		)
		m.oldValue = func(ctx context.Context) (*CreditEntry, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CreditEntry.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCreditEntry sets the old CreditEntry of the mutation.
func withCreditEntry(node *CreditEntry) creditentryOption {
	return func(m *CreditEntryMutation) {
		m.oldValue = func(context.Context) (*CreditEntry, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CreditEntryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CreditEntryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("db: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CreditEntry entities.
func (m *CreditEntryMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CreditEntryMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CreditEntryMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CreditEntry.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CreditEntryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CreditEntryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CreditEntry entity.
// If the CreditEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditEntryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CreditEntryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CreditEntryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CreditEntryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CreditEntry entity.
// If the CreditEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditEntryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CreditEntryMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetNamespace sets the "namespace" field.
func (m *CreditEntryMutation) SetNamespace(s string) {
	m.namespace = &s
}

// Namespace returns the value of the "namespace" field in the mutation.
func (m *CreditEntryMutation) Namespace() (r string, exists bool) {
	v := m.namespace
	if v == nil {
		return
	}
	return *v, true
}

// OldNamespace returns the old "namespace" field's value of the CreditEntry entity.
// If the CreditEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditEntryMutation) OldNamespace(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNamespace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNamespace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNamespace: %w", err)
	}
	return oldValue.Namespace, nil
}

// ResetNamespace resets all changes to the "namespace" field.
func (m *CreditEntryMutation) ResetNamespace() {
	m.namespace = nil
}

// SetSubject sets the "subject" field.
func (m *CreditEntryMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *CreditEntryMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the CreditEntry entity.
// If the CreditEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditEntryMutation) OldSubject(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ResetSubject resets all changes to the "subject" field.
func (m *CreditEntryMutation) ResetSubject() {
	m.subject = nil
}

// SetEntryType sets the "entry_type" field.
func (m *CreditEntryMutation) SetEntryType(ct credit.EntryType) {
	m.entry_type = &ct
}

// EntryType returns the value of the "entry_type" field in the mutation.
func (m *CreditEntryMutation) EntryType() (r credit.EntryType, exists bool) {
	v := m.entry_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEntryType returns the old "entry_type" field's value of the CreditEntry entity.
// If the CreditEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditEntryMutation) OldEntryType(ctx context.Context) (v credit.EntryType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntryType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntryType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntryType: %w", err)
	}
	return oldValue.EntryType, nil
}

// ResetEntryType resets all changes to the "entry_type" field.
func (m *CreditEntryMutation) ResetEntryType() {
	m.entry_type = nil
}

// SetType sets the "type" field.
func (m *CreditEntryMutation) SetType(ct credit.GrantType) {
	m._type = &ct
}

// GetType returns the value of the "type" field in the mutation.
func (m *CreditEntryMutation) GetType() (r credit.GrantType, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the CreditEntry entity.
// If the CreditEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditEntryMutation) OldType(ctx context.Context) (v *credit.GrantType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *CreditEntryMutation) ClearType() {
	m._type = nil
	m.clearedFields[creditentry.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *CreditEntryMutation) TypeCleared() bool {
	_, ok := m.clearedFields[creditentry.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *CreditEntryMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, creditentry.FieldType)
}

// SetProductID sets the "product_id" field.
func (m *CreditEntryMutation) SetProductID(s string) {
	m.product = &s
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *CreditEntryMutation) ProductID() (r string, exists bool) {
	v := m.product
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the CreditEntry entity.
// If the CreditEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditEntryMutation) OldProductID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// ClearProductID clears the value of the "product_id" field.
func (m *CreditEntryMutation) ClearProductID() {
	m.product = nil
	m.clearedFields[creditentry.FieldProductID] = struct{}{}
}

// ProductIDCleared returns if the "product_id" field was cleared in this mutation.
func (m *CreditEntryMutation) ProductIDCleared() bool {
	_, ok := m.clearedFields[creditentry.FieldProductID]
	return ok
}

// ResetProductID resets all changes to the "product_id" field.
func (m *CreditEntryMutation) ResetProductID() {
	m.product = nil
	delete(m.clearedFields, creditentry.FieldProductID)
}

// SetAmount sets the "amount" field.
func (m *CreditEntryMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *CreditEntryMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the CreditEntry entity.
// If the CreditEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditEntryMutation) OldAmount(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *CreditEntryMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *CreditEntryMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ClearAmount clears the value of the "amount" field.
func (m *CreditEntryMutation) ClearAmount() {
	m.amount = nil
	m.addamount = nil
	m.clearedFields[creditentry.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *CreditEntryMutation) AmountCleared() bool {
	_, ok := m.clearedFields[creditentry.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *CreditEntryMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
	delete(m.clearedFields, creditentry.FieldAmount)
}

// SetPriority sets the "priority" field.
func (m *CreditEntryMutation) SetPriority(u uint8) {
	m.priority = &u
	m.addpriority = nil
}

// Priority returns the value of the "priority" field in the mutation.
func (m *CreditEntryMutation) Priority() (r uint8, exists bool) {
	v := m.priority
	if v == nil {
		return
	}
	return *v, true
}

// OldPriority returns the old "priority" field's value of the CreditEntry entity.
// If the CreditEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditEntryMutation) OldPriority(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriority: %w", err)
	}
	return oldValue.Priority, nil
}

// AddPriority adds u to the "priority" field.
func (m *CreditEntryMutation) AddPriority(u int8) {
	if m.addpriority != nil {
		*m.addpriority += u
	} else {
		m.addpriority = &u
	}
}

// AddedPriority returns the value that was added to the "priority" field in this mutation.
func (m *CreditEntryMutation) AddedPriority() (r int8, exists bool) {
	v := m.addpriority
	if v == nil {
		return
	}
	return *v, true
}

// ResetPriority resets all changes to the "priority" field.
func (m *CreditEntryMutation) ResetPriority() {
	m.priority = nil
	m.addpriority = nil
}

// SetEffectiveAt sets the "effective_at" field.
func (m *CreditEntryMutation) SetEffectiveAt(t time.Time) {
	m.effective_at = &t
}

// EffectiveAt returns the value of the "effective_at" field in the mutation.
func (m *CreditEntryMutation) EffectiveAt() (r time.Time, exists bool) {
	v := m.effective_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEffectiveAt returns the old "effective_at" field's value of the CreditEntry entity.
// If the CreditEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditEntryMutation) OldEffectiveAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEffectiveAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEffectiveAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEffectiveAt: %w", err)
	}
	return oldValue.EffectiveAt, nil
}

// ResetEffectiveAt resets all changes to the "effective_at" field.
func (m *CreditEntryMutation) ResetEffectiveAt() {
	m.effective_at = nil
}

// SetExpirationPeriodDuration sets the "expiration_period_duration" field.
func (m *CreditEntryMutation) SetExpirationPeriodDuration(cpd credit.ExpirationPeriodDuration) {
	m.expiration_period_duration = &cpd
}

// ExpirationPeriodDuration returns the value of the "expiration_period_duration" field in the mutation.
func (m *CreditEntryMutation) ExpirationPeriodDuration() (r credit.ExpirationPeriodDuration, exists bool) {
	v := m.expiration_period_duration
	if v == nil {
		return
	}
	return *v, true
}

// OldExpirationPeriodDuration returns the old "expiration_period_duration" field's value of the CreditEntry entity.
// If the CreditEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditEntryMutation) OldExpirationPeriodDuration(ctx context.Context) (v *credit.ExpirationPeriodDuration, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpirationPeriodDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpirationPeriodDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpirationPeriodDuration: %w", err)
	}
	return oldValue.ExpirationPeriodDuration, nil
}

// ClearExpirationPeriodDuration clears the value of the "expiration_period_duration" field.
func (m *CreditEntryMutation) ClearExpirationPeriodDuration() {
	m.expiration_period_duration = nil
	m.clearedFields[creditentry.FieldExpirationPeriodDuration] = struct{}{}
}

// ExpirationPeriodDurationCleared returns if the "expiration_period_duration" field was cleared in this mutation.
func (m *CreditEntryMutation) ExpirationPeriodDurationCleared() bool {
	_, ok := m.clearedFields[creditentry.FieldExpirationPeriodDuration]
	return ok
}

// ResetExpirationPeriodDuration resets all changes to the "expiration_period_duration" field.
func (m *CreditEntryMutation) ResetExpirationPeriodDuration() {
	m.expiration_period_duration = nil
	delete(m.clearedFields, creditentry.FieldExpirationPeriodDuration)
}

// SetExpirationPeriodCount sets the "expiration_period_count" field.
func (m *CreditEntryMutation) SetExpirationPeriodCount(u uint8) {
	m.expiration_period_count = &u
	m.addexpiration_period_count = nil
}

// ExpirationPeriodCount returns the value of the "expiration_period_count" field in the mutation.
func (m *CreditEntryMutation) ExpirationPeriodCount() (r uint8, exists bool) {
	v := m.expiration_period_count
	if v == nil {
		return
	}
	return *v, true
}

// OldExpirationPeriodCount returns the old "expiration_period_count" field's value of the CreditEntry entity.
// If the CreditEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditEntryMutation) OldExpirationPeriodCount(ctx context.Context) (v *uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpirationPeriodCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpirationPeriodCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpirationPeriodCount: %w", err)
	}
	return oldValue.ExpirationPeriodCount, nil
}

// AddExpirationPeriodCount adds u to the "expiration_period_count" field.
func (m *CreditEntryMutation) AddExpirationPeriodCount(u int8) {
	if m.addexpiration_period_count != nil {
		*m.addexpiration_period_count += u
	} else {
		m.addexpiration_period_count = &u
	}
}

// AddedExpirationPeriodCount returns the value that was added to the "expiration_period_count" field in this mutation.
func (m *CreditEntryMutation) AddedExpirationPeriodCount() (r int8, exists bool) {
	v := m.addexpiration_period_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearExpirationPeriodCount clears the value of the "expiration_period_count" field.
func (m *CreditEntryMutation) ClearExpirationPeriodCount() {
	m.expiration_period_count = nil
	m.addexpiration_period_count = nil
	m.clearedFields[creditentry.FieldExpirationPeriodCount] = struct{}{}
}

// ExpirationPeriodCountCleared returns if the "expiration_period_count" field was cleared in this mutation.
func (m *CreditEntryMutation) ExpirationPeriodCountCleared() bool {
	_, ok := m.clearedFields[creditentry.FieldExpirationPeriodCount]
	return ok
}

// ResetExpirationPeriodCount resets all changes to the "expiration_period_count" field.
func (m *CreditEntryMutation) ResetExpirationPeriodCount() {
	m.expiration_period_count = nil
	m.addexpiration_period_count = nil
	delete(m.clearedFields, creditentry.FieldExpirationPeriodCount)
}

// SetRolloverType sets the "rollover_type" field.
func (m *CreditEntryMutation) SetRolloverType(crt credit.GrantRolloverType) {
	m.rollover_type = &crt
}

// RolloverType returns the value of the "rollover_type" field in the mutation.
func (m *CreditEntryMutation) RolloverType() (r credit.GrantRolloverType, exists bool) {
	v := m.rollover_type
	if v == nil {
		return
	}
	return *v, true
}

// OldRolloverType returns the old "rollover_type" field's value of the CreditEntry entity.
// If the CreditEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditEntryMutation) OldRolloverType(ctx context.Context) (v *credit.GrantRolloverType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRolloverType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRolloverType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRolloverType: %w", err)
	}
	return oldValue.RolloverType, nil
}

// ClearRolloverType clears the value of the "rollover_type" field.
func (m *CreditEntryMutation) ClearRolloverType() {
	m.rollover_type = nil
	m.clearedFields[creditentry.FieldRolloverType] = struct{}{}
}

// RolloverTypeCleared returns if the "rollover_type" field was cleared in this mutation.
func (m *CreditEntryMutation) RolloverTypeCleared() bool {
	_, ok := m.clearedFields[creditentry.FieldRolloverType]
	return ok
}

// ResetRolloverType resets all changes to the "rollover_type" field.
func (m *CreditEntryMutation) ResetRolloverType() {
	m.rollover_type = nil
	delete(m.clearedFields, creditentry.FieldRolloverType)
}

// SetRolloverMaxAmount sets the "rollover_max_amount" field.
func (m *CreditEntryMutation) SetRolloverMaxAmount(f float64) {
	m.rollover_max_amount = &f
	m.addrollover_max_amount = nil
}

// RolloverMaxAmount returns the value of the "rollover_max_amount" field in the mutation.
func (m *CreditEntryMutation) RolloverMaxAmount() (r float64, exists bool) {
	v := m.rollover_max_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldRolloverMaxAmount returns the old "rollover_max_amount" field's value of the CreditEntry entity.
// If the CreditEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditEntryMutation) OldRolloverMaxAmount(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRolloverMaxAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRolloverMaxAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRolloverMaxAmount: %w", err)
	}
	return oldValue.RolloverMaxAmount, nil
}

// AddRolloverMaxAmount adds f to the "rollover_max_amount" field.
func (m *CreditEntryMutation) AddRolloverMaxAmount(f float64) {
	if m.addrollover_max_amount != nil {
		*m.addrollover_max_amount += f
	} else {
		m.addrollover_max_amount = &f
	}
}

// AddedRolloverMaxAmount returns the value that was added to the "rollover_max_amount" field in this mutation.
func (m *CreditEntryMutation) AddedRolloverMaxAmount() (r float64, exists bool) {
	v := m.addrollover_max_amount
	if v == nil {
		return
	}
	return *v, true
}

// ClearRolloverMaxAmount clears the value of the "rollover_max_amount" field.
func (m *CreditEntryMutation) ClearRolloverMaxAmount() {
	m.rollover_max_amount = nil
	m.addrollover_max_amount = nil
	m.clearedFields[creditentry.FieldRolloverMaxAmount] = struct{}{}
}

// RolloverMaxAmountCleared returns if the "rollover_max_amount" field was cleared in this mutation.
func (m *CreditEntryMutation) RolloverMaxAmountCleared() bool {
	_, ok := m.clearedFields[creditentry.FieldRolloverMaxAmount]
	return ok
}

// ResetRolloverMaxAmount resets all changes to the "rollover_max_amount" field.
func (m *CreditEntryMutation) ResetRolloverMaxAmount() {
	m.rollover_max_amount = nil
	m.addrollover_max_amount = nil
	delete(m.clearedFields, creditentry.FieldRolloverMaxAmount)
}

// SetMetadata sets the "metadata" field.
func (m *CreditEntryMutation) SetMetadata(value map[string]string) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *CreditEntryMutation) Metadata() (r map[string]string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the CreditEntry entity.
// If the CreditEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditEntryMutation) OldMetadata(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *CreditEntryMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[creditentry.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *CreditEntryMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[creditentry.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *CreditEntryMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, creditentry.FieldMetadata)
}

// SetParentID sets the "parent_id" field.
func (m *CreditEntryMutation) SetParentID(s string) {
	m.parent = &s
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *CreditEntryMutation) ParentID() (r string, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the CreditEntry entity.
// If the CreditEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreditEntryMutation) OldParentID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *CreditEntryMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[creditentry.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *CreditEntryMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[creditentry.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *CreditEntryMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, creditentry.FieldParentID)
}

// ClearParent clears the "parent" edge to the CreditEntry entity.
func (m *CreditEntryMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[creditentry.FieldParentID] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the CreditEntry entity was cleared.
func (m *CreditEntryMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *CreditEntryMutation) ParentIDs() (ids []string) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *CreditEntryMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// SetChildrenID sets the "children" edge to the CreditEntry entity by id.
func (m *CreditEntryMutation) SetChildrenID(id string) {
	m.children = &id
}

// ClearChildren clears the "children" edge to the CreditEntry entity.
func (m *CreditEntryMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the CreditEntry entity was cleared.
func (m *CreditEntryMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// ChildrenID returns the "children" edge ID in the mutation.
func (m *CreditEntryMutation) ChildrenID() (id string, exists bool) {
	if m.children != nil {
		return *m.children, true
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChildrenID instead. It exists only for internal usage by the builders.
func (m *CreditEntryMutation) ChildrenIDs() (ids []string) {
	if id := m.children; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *CreditEntryMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *CreditEntryMutation) ClearProduct() {
	m.clearedproduct = true
	m.clearedFields[creditentry.FieldProductID] = struct{}{}
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *CreditEntryMutation) ProductCleared() bool {
	return m.ProductIDCleared() || m.clearedproduct
}

// ProductIDs returns the "product" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductID instead. It exists only for internal usage by the builders.
func (m *CreditEntryMutation) ProductIDs() (ids []string) {
	if id := m.product; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *CreditEntryMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
}

// Where appends a list predicates to the CreditEntryMutation builder.
func (m *CreditEntryMutation) Where(ps ...predicate.CreditEntry) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CreditEntryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CreditEntryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CreditEntry, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CreditEntryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CreditEntryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CreditEntry).
func (m *CreditEntryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CreditEntryMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.created_at != nil {
		fields = append(fields, creditentry.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, creditentry.FieldUpdatedAt)
	}
	if m.namespace != nil {
		fields = append(fields, creditentry.FieldNamespace)
	}
	if m.subject != nil {
		fields = append(fields, creditentry.FieldSubject)
	}
	if m.entry_type != nil {
		fields = append(fields, creditentry.FieldEntryType)
	}
	if m._type != nil {
		fields = append(fields, creditentry.FieldType)
	}
	if m.product != nil {
		fields = append(fields, creditentry.FieldProductID)
	}
	if m.amount != nil {
		fields = append(fields, creditentry.FieldAmount)
	}
	if m.priority != nil {
		fields = append(fields, creditentry.FieldPriority)
	}
	if m.effective_at != nil {
		fields = append(fields, creditentry.FieldEffectiveAt)
	}
	if m.expiration_period_duration != nil {
		fields = append(fields, creditentry.FieldExpirationPeriodDuration)
	}
	if m.expiration_period_count != nil {
		fields = append(fields, creditentry.FieldExpirationPeriodCount)
	}
	if m.rollover_type != nil {
		fields = append(fields, creditentry.FieldRolloverType)
	}
	if m.rollover_max_amount != nil {
		fields = append(fields, creditentry.FieldRolloverMaxAmount)
	}
	if m.metadata != nil {
		fields = append(fields, creditentry.FieldMetadata)
	}
	if m.parent != nil {
		fields = append(fields, creditentry.FieldParentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CreditEntryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case creditentry.FieldCreatedAt:
		return m.CreatedAt()
	case creditentry.FieldUpdatedAt:
		return m.UpdatedAt()
	case creditentry.FieldNamespace:
		return m.Namespace()
	case creditentry.FieldSubject:
		return m.Subject()
	case creditentry.FieldEntryType:
		return m.EntryType()
	case creditentry.FieldType:
		return m.GetType()
	case creditentry.FieldProductID:
		return m.ProductID()
	case creditentry.FieldAmount:
		return m.Amount()
	case creditentry.FieldPriority:
		return m.Priority()
	case creditentry.FieldEffectiveAt:
		return m.EffectiveAt()
	case creditentry.FieldExpirationPeriodDuration:
		return m.ExpirationPeriodDuration()
	case creditentry.FieldExpirationPeriodCount:
		return m.ExpirationPeriodCount()
	case creditentry.FieldRolloverType:
		return m.RolloverType()
	case creditentry.FieldRolloverMaxAmount:
		return m.RolloverMaxAmount()
	case creditentry.FieldMetadata:
		return m.Metadata()
	case creditentry.FieldParentID:
		return m.ParentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CreditEntryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case creditentry.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case creditentry.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case creditentry.FieldNamespace:
		return m.OldNamespace(ctx)
	case creditentry.FieldSubject:
		return m.OldSubject(ctx)
	case creditentry.FieldEntryType:
		return m.OldEntryType(ctx)
	case creditentry.FieldType:
		return m.OldType(ctx)
	case creditentry.FieldProductID:
		return m.OldProductID(ctx)
	case creditentry.FieldAmount:
		return m.OldAmount(ctx)
	case creditentry.FieldPriority:
		return m.OldPriority(ctx)
	case creditentry.FieldEffectiveAt:
		return m.OldEffectiveAt(ctx)
	case creditentry.FieldExpirationPeriodDuration:
		return m.OldExpirationPeriodDuration(ctx)
	case creditentry.FieldExpirationPeriodCount:
		return m.OldExpirationPeriodCount(ctx)
	case creditentry.FieldRolloverType:
		return m.OldRolloverType(ctx)
	case creditentry.FieldRolloverMaxAmount:
		return m.OldRolloverMaxAmount(ctx)
	case creditentry.FieldMetadata:
		return m.OldMetadata(ctx)
	case creditentry.FieldParentID:
		return m.OldParentID(ctx)
	}
	return nil, fmt.Errorf("unknown CreditEntry field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CreditEntryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case creditentry.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case creditentry.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case creditentry.FieldNamespace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNamespace(v)
		return nil
	case creditentry.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case creditentry.FieldEntryType:
		v, ok := value.(credit.EntryType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntryType(v)
		return nil
	case creditentry.FieldType:
		v, ok := value.(credit.GrantType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case creditentry.FieldProductID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	case creditentry.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case creditentry.FieldPriority:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriority(v)
		return nil
	case creditentry.FieldEffectiveAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEffectiveAt(v)
		return nil
	case creditentry.FieldExpirationPeriodDuration:
		v, ok := value.(credit.ExpirationPeriodDuration)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpirationPeriodDuration(v)
		return nil
	case creditentry.FieldExpirationPeriodCount:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpirationPeriodCount(v)
		return nil
	case creditentry.FieldRolloverType:
		v, ok := value.(credit.GrantRolloverType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRolloverType(v)
		return nil
	case creditentry.FieldRolloverMaxAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRolloverMaxAmount(v)
		return nil
	case creditentry.FieldMetadata:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case creditentry.FieldParentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	}
	return fmt.Errorf("unknown CreditEntry field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CreditEntryMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, creditentry.FieldAmount)
	}
	if m.addpriority != nil {
		fields = append(fields, creditentry.FieldPriority)
	}
	if m.addexpiration_period_count != nil {
		fields = append(fields, creditentry.FieldExpirationPeriodCount)
	}
	if m.addrollover_max_amount != nil {
		fields = append(fields, creditentry.FieldRolloverMaxAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CreditEntryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case creditentry.FieldAmount:
		return m.AddedAmount()
	case creditentry.FieldPriority:
		return m.AddedPriority()
	case creditentry.FieldExpirationPeriodCount:
		return m.AddedExpirationPeriodCount()
	case creditentry.FieldRolloverMaxAmount:
		return m.AddedRolloverMaxAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CreditEntryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case creditentry.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case creditentry.FieldPriority:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPriority(v)
		return nil
	case creditentry.FieldExpirationPeriodCount:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpirationPeriodCount(v)
		return nil
	case creditentry.FieldRolloverMaxAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRolloverMaxAmount(v)
		return nil
	}
	return fmt.Errorf("unknown CreditEntry numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CreditEntryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(creditentry.FieldType) {
		fields = append(fields, creditentry.FieldType)
	}
	if m.FieldCleared(creditentry.FieldProductID) {
		fields = append(fields, creditentry.FieldProductID)
	}
	if m.FieldCleared(creditentry.FieldAmount) {
		fields = append(fields, creditentry.FieldAmount)
	}
	if m.FieldCleared(creditentry.FieldExpirationPeriodDuration) {
		fields = append(fields, creditentry.FieldExpirationPeriodDuration)
	}
	if m.FieldCleared(creditentry.FieldExpirationPeriodCount) {
		fields = append(fields, creditentry.FieldExpirationPeriodCount)
	}
	if m.FieldCleared(creditentry.FieldRolloverType) {
		fields = append(fields, creditentry.FieldRolloverType)
	}
	if m.FieldCleared(creditentry.FieldRolloverMaxAmount) {
		fields = append(fields, creditentry.FieldRolloverMaxAmount)
	}
	if m.FieldCleared(creditentry.FieldMetadata) {
		fields = append(fields, creditentry.FieldMetadata)
	}
	if m.FieldCleared(creditentry.FieldParentID) {
		fields = append(fields, creditentry.FieldParentID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CreditEntryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CreditEntryMutation) ClearField(name string) error {
	switch name {
	case creditentry.FieldType:
		m.ClearType()
		return nil
	case creditentry.FieldProductID:
		m.ClearProductID()
		return nil
	case creditentry.FieldAmount:
		m.ClearAmount()
		return nil
	case creditentry.FieldExpirationPeriodDuration:
		m.ClearExpirationPeriodDuration()
		return nil
	case creditentry.FieldExpirationPeriodCount:
		m.ClearExpirationPeriodCount()
		return nil
	case creditentry.FieldRolloverType:
		m.ClearRolloverType()
		return nil
	case creditentry.FieldRolloverMaxAmount:
		m.ClearRolloverMaxAmount()
		return nil
	case creditentry.FieldMetadata:
		m.ClearMetadata()
		return nil
	case creditentry.FieldParentID:
		m.ClearParentID()
		return nil
	}
	return fmt.Errorf("unknown CreditEntry nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CreditEntryMutation) ResetField(name string) error {
	switch name {
	case creditentry.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case creditentry.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case creditentry.FieldNamespace:
		m.ResetNamespace()
		return nil
	case creditentry.FieldSubject:
		m.ResetSubject()
		return nil
	case creditentry.FieldEntryType:
		m.ResetEntryType()
		return nil
	case creditentry.FieldType:
		m.ResetType()
		return nil
	case creditentry.FieldProductID:
		m.ResetProductID()
		return nil
	case creditentry.FieldAmount:
		m.ResetAmount()
		return nil
	case creditentry.FieldPriority:
		m.ResetPriority()
		return nil
	case creditentry.FieldEffectiveAt:
		m.ResetEffectiveAt()
		return nil
	case creditentry.FieldExpirationPeriodDuration:
		m.ResetExpirationPeriodDuration()
		return nil
	case creditentry.FieldExpirationPeriodCount:
		m.ResetExpirationPeriodCount()
		return nil
	case creditentry.FieldRolloverType:
		m.ResetRolloverType()
		return nil
	case creditentry.FieldRolloverMaxAmount:
		m.ResetRolloverMaxAmount()
		return nil
	case creditentry.FieldMetadata:
		m.ResetMetadata()
		return nil
	case creditentry.FieldParentID:
		m.ResetParentID()
		return nil
	}
	return fmt.Errorf("unknown CreditEntry field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CreditEntryMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.parent != nil {
		edges = append(edges, creditentry.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, creditentry.EdgeChildren)
	}
	if m.product != nil {
		edges = append(edges, creditentry.EdgeProduct)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CreditEntryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case creditentry.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case creditentry.EdgeChildren:
		if id := m.children; id != nil {
			return []ent.Value{*id}
		}
	case creditentry.EdgeProduct:
		if id := m.product; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CreditEntryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CreditEntryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CreditEntryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedparent {
		edges = append(edges, creditentry.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, creditentry.EdgeChildren)
	}
	if m.clearedproduct {
		edges = append(edges, creditentry.EdgeProduct)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CreditEntryMutation) EdgeCleared(name string) bool {
	switch name {
	case creditentry.EdgeParent:
		return m.clearedparent
	case creditentry.EdgeChildren:
		return m.clearedchildren
	case creditentry.EdgeProduct:
		return m.clearedproduct
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CreditEntryMutation) ClearEdge(name string) error {
	switch name {
	case creditentry.EdgeParent:
		m.ClearParent()
		return nil
	case creditentry.EdgeChildren:
		m.ClearChildren()
		return nil
	case creditentry.EdgeProduct:
		m.ClearProduct()
		return nil
	}
	return fmt.Errorf("unknown CreditEntry unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CreditEntryMutation) ResetEdge(name string) error {
	switch name {
	case creditentry.EdgeParent:
		m.ResetParent()
		return nil
	case creditentry.EdgeChildren:
		m.ResetChildren()
		return nil
	case creditentry.EdgeProduct:
		m.ResetProduct()
		return nil
	}
	return fmt.Errorf("unknown CreditEntry edge %s", name)
}

// ProductMutation represents an operation that mutates the Product nodes in the graph.
type ProductMutation struct {
	config
	op                     Op
	typ                    string
	id                     *string
	created_at             *time.Time
	updated_at             *time.Time
	namespace              *string
	name                   *string
	meter_slug             *string
	meter_group_by_filters *map[string]string
	archived               *bool
	clearedFields          map[string]struct{}
	credit_grants          map[string]struct{}
	removedcredit_grants   map[string]struct{}
	clearedcredit_grants   bool
	done                   bool
	oldValue               func(context.Context) (*Product, error)
	predicates             []predicate.Product
}

var _ ent.Mutation = (*ProductMutation)(nil)

// productOption allows management of the mutation configuration using functional options.
type productOption func(*ProductMutation)

// newProductMutation creates new mutation for the Product entity.
func newProductMutation(c config, op Op, opts ...productOption) *ProductMutation {
	m := &ProductMutation{
		config:        c,
		op:            op,
		typ:           TypeProduct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductID sets the ID field of the mutation.
func withProductID(id string) productOption {
	return func(m *ProductMutation) {
		var (
			err   error
			once  sync.Once
			value *Product
		)
		m.oldValue = func(ctx context.Context) (*Product, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Product.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProduct sets the old Product of the mutation.
func withProduct(node *Product) productOption {
	return func(m *ProductMutation) {
		m.oldValue = func(context.Context) (*Product, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("db: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Product entities.
func (m *ProductMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProductMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProductMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Product.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ProductMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProductMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProductMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProductMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProductMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProductMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetNamespace sets the "namespace" field.
func (m *ProductMutation) SetNamespace(s string) {
	m.namespace = &s
}

// Namespace returns the value of the "namespace" field in the mutation.
func (m *ProductMutation) Namespace() (r string, exists bool) {
	v := m.namespace
	if v == nil {
		return
	}
	return *v, true
}

// OldNamespace returns the old "namespace" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldNamespace(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNamespace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNamespace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNamespace: %w", err)
	}
	return oldValue.Namespace, nil
}

// ResetNamespace resets all changes to the "namespace" field.
func (m *ProductMutation) ResetNamespace() {
	m.namespace = nil
}

// SetName sets the "name" field.
func (m *ProductMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProductMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProductMutation) ResetName() {
	m.name = nil
}

// SetMeterSlug sets the "meter_slug" field.
func (m *ProductMutation) SetMeterSlug(s string) {
	m.meter_slug = &s
}

// MeterSlug returns the value of the "meter_slug" field in the mutation.
func (m *ProductMutation) MeterSlug() (r string, exists bool) {
	v := m.meter_slug
	if v == nil {
		return
	}
	return *v, true
}

// OldMeterSlug returns the old "meter_slug" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldMeterSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeterSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeterSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeterSlug: %w", err)
	}
	return oldValue.MeterSlug, nil
}

// ResetMeterSlug resets all changes to the "meter_slug" field.
func (m *ProductMutation) ResetMeterSlug() {
	m.meter_slug = nil
}

// SetMeterGroupByFilters sets the "meter_group_by_filters" field.
func (m *ProductMutation) SetMeterGroupByFilters(value map[string]string) {
	m.meter_group_by_filters = &value
}

// MeterGroupByFilters returns the value of the "meter_group_by_filters" field in the mutation.
func (m *ProductMutation) MeterGroupByFilters() (r map[string]string, exists bool) {
	v := m.meter_group_by_filters
	if v == nil {
		return
	}
	return *v, true
}

// OldMeterGroupByFilters returns the old "meter_group_by_filters" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldMeterGroupByFilters(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeterGroupByFilters is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeterGroupByFilters requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeterGroupByFilters: %w", err)
	}
	return oldValue.MeterGroupByFilters, nil
}

// ClearMeterGroupByFilters clears the value of the "meter_group_by_filters" field.
func (m *ProductMutation) ClearMeterGroupByFilters() {
	m.meter_group_by_filters = nil
	m.clearedFields[product.FieldMeterGroupByFilters] = struct{}{}
}

// MeterGroupByFiltersCleared returns if the "meter_group_by_filters" field was cleared in this mutation.
func (m *ProductMutation) MeterGroupByFiltersCleared() bool {
	_, ok := m.clearedFields[product.FieldMeterGroupByFilters]
	return ok
}

// ResetMeterGroupByFilters resets all changes to the "meter_group_by_filters" field.
func (m *ProductMutation) ResetMeterGroupByFilters() {
	m.meter_group_by_filters = nil
	delete(m.clearedFields, product.FieldMeterGroupByFilters)
}

// SetArchived sets the "archived" field.
func (m *ProductMutation) SetArchived(b bool) {
	m.archived = &b
}

// Archived returns the value of the "archived" field in the mutation.
func (m *ProductMutation) Archived() (r bool, exists bool) {
	v := m.archived
	if v == nil {
		return
	}
	return *v, true
}

// OldArchived returns the old "archived" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldArchived(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArchived is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArchived requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArchived: %w", err)
	}
	return oldValue.Archived, nil
}

// ResetArchived resets all changes to the "archived" field.
func (m *ProductMutation) ResetArchived() {
	m.archived = nil
}

// AddCreditGrantIDs adds the "credit_grants" edge to the CreditEntry entity by ids.
func (m *ProductMutation) AddCreditGrantIDs(ids ...string) {
	if m.credit_grants == nil {
		m.credit_grants = make(map[string]struct{})
	}
	for i := range ids {
		m.credit_grants[ids[i]] = struct{}{}
	}
}

// ClearCreditGrants clears the "credit_grants" edge to the CreditEntry entity.
func (m *ProductMutation) ClearCreditGrants() {
	m.clearedcredit_grants = true
}

// CreditGrantsCleared reports if the "credit_grants" edge to the CreditEntry entity was cleared.
func (m *ProductMutation) CreditGrantsCleared() bool {
	return m.clearedcredit_grants
}

// RemoveCreditGrantIDs removes the "credit_grants" edge to the CreditEntry entity by IDs.
func (m *ProductMutation) RemoveCreditGrantIDs(ids ...string) {
	if m.removedcredit_grants == nil {
		m.removedcredit_grants = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.credit_grants, ids[i])
		m.removedcredit_grants[ids[i]] = struct{}{}
	}
}

// RemovedCreditGrants returns the removed IDs of the "credit_grants" edge to the CreditEntry entity.
func (m *ProductMutation) RemovedCreditGrantsIDs() (ids []string) {
	for id := range m.removedcredit_grants {
		ids = append(ids, id)
	}
	return
}

// CreditGrantsIDs returns the "credit_grants" edge IDs in the mutation.
func (m *ProductMutation) CreditGrantsIDs() (ids []string) {
	for id := range m.credit_grants {
		ids = append(ids, id)
	}
	return
}

// ResetCreditGrants resets all changes to the "credit_grants" edge.
func (m *ProductMutation) ResetCreditGrants() {
	m.credit_grants = nil
	m.clearedcredit_grants = false
	m.removedcredit_grants = nil
}

// Where appends a list predicates to the ProductMutation builder.
func (m *ProductMutation) Where(ps ...predicate.Product) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProductMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProductMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Product, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProductMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProductMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Product).
func (m *ProductMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProductMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, product.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, product.FieldUpdatedAt)
	}
	if m.namespace != nil {
		fields = append(fields, product.FieldNamespace)
	}
	if m.name != nil {
		fields = append(fields, product.FieldName)
	}
	if m.meter_slug != nil {
		fields = append(fields, product.FieldMeterSlug)
	}
	if m.meter_group_by_filters != nil {
		fields = append(fields, product.FieldMeterGroupByFilters)
	}
	if m.archived != nil {
		fields = append(fields, product.FieldArchived)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProductMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case product.FieldCreatedAt:
		return m.CreatedAt()
	case product.FieldUpdatedAt:
		return m.UpdatedAt()
	case product.FieldNamespace:
		return m.Namespace()
	case product.FieldName:
		return m.Name()
	case product.FieldMeterSlug:
		return m.MeterSlug()
	case product.FieldMeterGroupByFilters:
		return m.MeterGroupByFilters()
	case product.FieldArchived:
		return m.Archived()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProductMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case product.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case product.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case product.FieldNamespace:
		return m.OldNamespace(ctx)
	case product.FieldName:
		return m.OldName(ctx)
	case product.FieldMeterSlug:
		return m.OldMeterSlug(ctx)
	case product.FieldMeterGroupByFilters:
		return m.OldMeterGroupByFilters(ctx)
	case product.FieldArchived:
		return m.OldArchived(ctx)
	}
	return nil, fmt.Errorf("unknown Product field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) SetField(name string, value ent.Value) error {
	switch name {
	case product.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case product.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case product.FieldNamespace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNamespace(v)
		return nil
	case product.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case product.FieldMeterSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeterSlug(v)
		return nil
	case product.FieldMeterGroupByFilters:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeterGroupByFilters(v)
		return nil
	case product.FieldArchived:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArchived(v)
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProductMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProductMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Product numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProductMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(product.FieldMeterGroupByFilters) {
		fields = append(fields, product.FieldMeterGroupByFilters)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProductMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductMutation) ClearField(name string) error {
	switch name {
	case product.FieldMeterGroupByFilters:
		m.ClearMeterGroupByFilters()
		return nil
	}
	return fmt.Errorf("unknown Product nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProductMutation) ResetField(name string) error {
	switch name {
	case product.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case product.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case product.FieldNamespace:
		m.ResetNamespace()
		return nil
	case product.FieldName:
		m.ResetName()
		return nil
	case product.FieldMeterSlug:
		m.ResetMeterSlug()
		return nil
	case product.FieldMeterGroupByFilters:
		m.ResetMeterGroupByFilters()
		return nil
	case product.FieldArchived:
		m.ResetArchived()
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProductMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.credit_grants != nil {
		edges = append(edges, product.EdgeCreditGrants)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProductMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeCreditGrants:
		ids := make([]ent.Value, 0, len(m.credit_grants))
		for id := range m.credit_grants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProductMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcredit_grants != nil {
		edges = append(edges, product.EdgeCreditGrants)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProductMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeCreditGrants:
		ids := make([]ent.Value, 0, len(m.removedcredit_grants))
		for id := range m.removedcredit_grants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProductMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcredit_grants {
		edges = append(edges, product.EdgeCreditGrants)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProductMutation) EdgeCleared(name string) bool {
	switch name {
	case product.EdgeCreditGrants:
		return m.clearedcredit_grants
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProductMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Product unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProductMutation) ResetEdge(name string) error {
	switch name {
	case product.EdgeCreditGrants:
		m.ResetCreditGrants()
		return nil
	}
	return fmt.Errorf("unknown Product edge %s", name)
}
