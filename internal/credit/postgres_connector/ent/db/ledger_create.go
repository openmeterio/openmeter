// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/internal/credit/postgres_connector/ent/db/ledger"
)

// LedgerCreate is the builder for creating a Ledger entity.
type LedgerCreate struct {
	config
	mutation *LedgerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (lc *LedgerCreate) SetCreatedAt(t time.Time) *LedgerCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableCreatedAt(t *time.Time) *LedgerCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetUpdatedAt sets the "updated_at" field.
func (lc *LedgerCreate) SetUpdatedAt(t time.Time) *LedgerCreate {
	lc.mutation.SetUpdatedAt(t)
	return lc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableUpdatedAt(t *time.Time) *LedgerCreate {
	if t != nil {
		lc.SetUpdatedAt(*t)
	}
	return lc
}

// SetNamespace sets the "namespace" field.
func (lc *LedgerCreate) SetNamespace(s string) *LedgerCreate {
	lc.mutation.SetNamespace(s)
	return lc
}

// SetSubject sets the "subject" field.
func (lc *LedgerCreate) SetSubject(s string) *LedgerCreate {
	lc.mutation.SetSubject(s)
	return lc
}

// SetHighwatermark sets the "highwatermark" field.
func (lc *LedgerCreate) SetHighwatermark(t time.Time) *LedgerCreate {
	lc.mutation.SetHighwatermark(t)
	return lc
}

// SetNillableHighwatermark sets the "highwatermark" field if the given value is not nil.
func (lc *LedgerCreate) SetNillableHighwatermark(t *time.Time) *LedgerCreate {
	if t != nil {
		lc.SetHighwatermark(*t)
	}
	return lc
}

// Mutation returns the LedgerMutation object of the builder.
func (lc *LedgerCreate) Mutation() *LedgerMutation {
	return lc.mutation
}

// Save creates the Ledger in the database.
func (lc *LedgerCreate) Save(ctx context.Context) (*Ledger, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LedgerCreate) SaveX(ctx context.Context) *Ledger {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LedgerCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LedgerCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LedgerCreate) defaults() {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := ledger.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		v := ledger.DefaultUpdatedAt()
		lc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lc.mutation.Highwatermark(); !ok {
		v := ledger.DefaultHighwatermark()
		lc.mutation.SetHighwatermark(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LedgerCreate) check() error {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Ledger.created_at"`)}
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Ledger.updated_at"`)}
	}
	if _, ok := lc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "Ledger.namespace"`)}
	}
	if v, ok := lc.mutation.Namespace(); ok {
		if err := ledger.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "Ledger.namespace": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`db: missing required field "Ledger.subject"`)}
	}
	if v, ok := lc.mutation.Subject(); ok {
		if err := ledger.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`db: validator failed for field "Ledger.subject": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Highwatermark(); !ok {
		return &ValidationError{Name: "highwatermark", err: errors.New(`db: missing required field "Ledger.highwatermark"`)}
	}
	return nil
}

func (lc *LedgerCreate) sqlSave(ctx context.Context) (*Ledger, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LedgerCreate) createSpec() (*Ledger, *sqlgraph.CreateSpec) {
	var (
		_node = &Ledger{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(ledger.Table, sqlgraph.NewFieldSpec(ledger.FieldID, field.TypeInt))
	)
	_spec.OnConflict = lc.conflict
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.SetField(ledger.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.SetField(ledger.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lc.mutation.Namespace(); ok {
		_spec.SetField(ledger.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := lc.mutation.Subject(); ok {
		_spec.SetField(ledger.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := lc.mutation.Highwatermark(); ok {
		_spec.SetField(ledger.FieldHighwatermark, field.TypeTime, value)
		_node.Highwatermark = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ledger.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LedgerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (lc *LedgerCreate) OnConflict(opts ...sql.ConflictOption) *LedgerUpsertOne {
	lc.conflict = opts
	return &LedgerUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ledger.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lc *LedgerCreate) OnConflictColumns(columns ...string) *LedgerUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LedgerUpsertOne{
		create: lc,
	}
}

type (
	// LedgerUpsertOne is the builder for "upsert"-ing
	//  one Ledger node.
	LedgerUpsertOne struct {
		create *LedgerCreate
	}

	// LedgerUpsert is the "OnConflict" setter.
	LedgerUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *LedgerUpsert) SetUpdatedAt(v time.Time) *LedgerUpsert {
	u.Set(ledger.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LedgerUpsert) UpdateUpdatedAt() *LedgerUpsert {
	u.SetExcluded(ledger.FieldUpdatedAt)
	return u
}

// SetHighwatermark sets the "highwatermark" field.
func (u *LedgerUpsert) SetHighwatermark(v time.Time) *LedgerUpsert {
	u.Set(ledger.FieldHighwatermark, v)
	return u
}

// UpdateHighwatermark sets the "highwatermark" field to the value that was provided on create.
func (u *LedgerUpsert) UpdateHighwatermark() *LedgerUpsert {
	u.SetExcluded(ledger.FieldHighwatermark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Ledger.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LedgerUpsertOne) UpdateNewValues() *LedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(ledger.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(ledger.FieldNamespace)
		}
		if _, exists := u.create.mutation.Subject(); exists {
			s.SetIgnore(ledger.FieldSubject)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ledger.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LedgerUpsertOne) Ignore() *LedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LedgerUpsertOne) DoNothing() *LedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LedgerCreate.OnConflict
// documentation for more info.
func (u *LedgerUpsertOne) Update(set func(*LedgerUpsert)) *LedgerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LedgerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LedgerUpsertOne) SetUpdatedAt(v time.Time) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LedgerUpsertOne) UpdateUpdatedAt() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetHighwatermark sets the "highwatermark" field.
func (u *LedgerUpsertOne) SetHighwatermark(v time.Time) *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.SetHighwatermark(v)
	})
}

// UpdateHighwatermark sets the "highwatermark" field to the value that was provided on create.
func (u *LedgerUpsertOne) UpdateHighwatermark() *LedgerUpsertOne {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateHighwatermark()
	})
}

// Exec executes the query.
func (u *LedgerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for LedgerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LedgerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LedgerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LedgerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LedgerCreateBulk is the builder for creating many Ledger entities in bulk.
type LedgerCreateBulk struct {
	config
	err      error
	builders []*LedgerCreate
	conflict []sql.ConflictOption
}

// Save creates the Ledger entities in the database.
func (lcb *LedgerCreateBulk) Save(ctx context.Context) ([]*Ledger, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Ledger, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LedgerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LedgerCreateBulk) SaveX(ctx context.Context) []*Ledger {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LedgerCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LedgerCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ledger.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LedgerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (lcb *LedgerCreateBulk) OnConflict(opts ...sql.ConflictOption) *LedgerUpsertBulk {
	lcb.conflict = opts
	return &LedgerUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ledger.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcb *LedgerCreateBulk) OnConflictColumns(columns ...string) *LedgerUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LedgerUpsertBulk{
		create: lcb,
	}
}

// LedgerUpsertBulk is the builder for "upsert"-ing
// a bulk of Ledger nodes.
type LedgerUpsertBulk struct {
	create *LedgerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Ledger.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LedgerUpsertBulk) UpdateNewValues() *LedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(ledger.FieldCreatedAt)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(ledger.FieldNamespace)
			}
			if _, exists := b.mutation.Subject(); exists {
				s.SetIgnore(ledger.FieldSubject)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ledger.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LedgerUpsertBulk) Ignore() *LedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LedgerUpsertBulk) DoNothing() *LedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LedgerCreateBulk.OnConflict
// documentation for more info.
func (u *LedgerUpsertBulk) Update(set func(*LedgerUpsert)) *LedgerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LedgerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LedgerUpsertBulk) SetUpdatedAt(v time.Time) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LedgerUpsertBulk) UpdateUpdatedAt() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetHighwatermark sets the "highwatermark" field.
func (u *LedgerUpsertBulk) SetHighwatermark(v time.Time) *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.SetHighwatermark(v)
	})
}

// UpdateHighwatermark sets the "highwatermark" field to the value that was provided on create.
func (u *LedgerUpsertBulk) UpdateHighwatermark() *LedgerUpsertBulk {
	return u.Update(func(s *LedgerUpsert) {
		s.UpdateHighwatermark()
	})
}

// Exec executes the query.
func (u *LedgerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the LedgerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for LedgerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LedgerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
