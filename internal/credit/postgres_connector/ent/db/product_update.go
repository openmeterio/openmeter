// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/internal/credit/postgres_connector/ent/db/creditentry"
	"github.com/openmeterio/openmeter/internal/credit/postgres_connector/ent/db/predicate"
	"github.com/openmeterio/openmeter/internal/credit/postgres_connector/ent/db/product"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetMeterGroupByFilters sets the "meter_group_by_filters" field.
func (pu *ProductUpdate) SetMeterGroupByFilters(m map[string]string) *ProductUpdate {
	pu.mutation.SetMeterGroupByFilters(m)
	return pu
}

// ClearMeterGroupByFilters clears the value of the "meter_group_by_filters" field.
func (pu *ProductUpdate) ClearMeterGroupByFilters() *ProductUpdate {
	pu.mutation.ClearMeterGroupByFilters()
	return pu
}

// SetArchived sets the "archived" field.
func (pu *ProductUpdate) SetArchived(b bool) *ProductUpdate {
	pu.mutation.SetArchived(b)
	return pu
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableArchived(b *bool) *ProductUpdate {
	if b != nil {
		pu.SetArchived(*b)
	}
	return pu
}

// AddCreditGrantIDs adds the "credit_grants" edge to the CreditEntry entity by IDs.
func (pu *ProductUpdate) AddCreditGrantIDs(ids ...string) *ProductUpdate {
	pu.mutation.AddCreditGrantIDs(ids...)
	return pu
}

// AddCreditGrants adds the "credit_grants" edges to the CreditEntry entity.
func (pu *ProductUpdate) AddCreditGrants(c ...*CreditEntry) *ProductUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCreditGrantIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearCreditGrants clears all "credit_grants" edges to the CreditEntry entity.
func (pu *ProductUpdate) ClearCreditGrants() *ProductUpdate {
	pu.mutation.ClearCreditGrants()
	return pu
}

// RemoveCreditGrantIDs removes the "credit_grants" edge to CreditEntry entities by IDs.
func (pu *ProductUpdate) RemoveCreditGrantIDs(ids ...string) *ProductUpdate {
	pu.mutation.RemoveCreditGrantIDs(ids...)
	return pu
}

// RemoveCreditGrants removes "credit_grants" edges to CreditEntry entities.
func (pu *ProductUpdate) RemoveCreditGrants(c ...*CreditEntry) *ProductUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCreditGrantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Product.name": %w`, err)}
		}
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.MeterGroupByFilters(); ok {
		_spec.SetField(product.FieldMeterGroupByFilters, field.TypeJSON, value)
	}
	if pu.mutation.MeterGroupByFiltersCleared() {
		_spec.ClearField(product.FieldMeterGroupByFilters, field.TypeJSON)
	}
	if value, ok := pu.mutation.Archived(); ok {
		_spec.SetField(product.FieldArchived, field.TypeBool, value)
	}
	if pu.mutation.CreditGrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CreditGrantsTable,
			Columns: []string{product.CreditGrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creditentry.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCreditGrantsIDs(); len(nodes) > 0 && !pu.mutation.CreditGrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CreditGrantsTable,
			Columns: []string{product.CreditGrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creditentry.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CreditGrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CreditGrantsTable,
			Columns: []string{product.CreditGrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creditentry.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetMeterGroupByFilters sets the "meter_group_by_filters" field.
func (puo *ProductUpdateOne) SetMeterGroupByFilters(m map[string]string) *ProductUpdateOne {
	puo.mutation.SetMeterGroupByFilters(m)
	return puo
}

// ClearMeterGroupByFilters clears the value of the "meter_group_by_filters" field.
func (puo *ProductUpdateOne) ClearMeterGroupByFilters() *ProductUpdateOne {
	puo.mutation.ClearMeterGroupByFilters()
	return puo
}

// SetArchived sets the "archived" field.
func (puo *ProductUpdateOne) SetArchived(b bool) *ProductUpdateOne {
	puo.mutation.SetArchived(b)
	return puo
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableArchived(b *bool) *ProductUpdateOne {
	if b != nil {
		puo.SetArchived(*b)
	}
	return puo
}

// AddCreditGrantIDs adds the "credit_grants" edge to the CreditEntry entity by IDs.
func (puo *ProductUpdateOne) AddCreditGrantIDs(ids ...string) *ProductUpdateOne {
	puo.mutation.AddCreditGrantIDs(ids...)
	return puo
}

// AddCreditGrants adds the "credit_grants" edges to the CreditEntry entity.
func (puo *ProductUpdateOne) AddCreditGrants(c ...*CreditEntry) *ProductUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCreditGrantIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearCreditGrants clears all "credit_grants" edges to the CreditEntry entity.
func (puo *ProductUpdateOne) ClearCreditGrants() *ProductUpdateOne {
	puo.mutation.ClearCreditGrants()
	return puo
}

// RemoveCreditGrantIDs removes the "credit_grants" edge to CreditEntry entities by IDs.
func (puo *ProductUpdateOne) RemoveCreditGrantIDs(ids ...string) *ProductUpdateOne {
	puo.mutation.RemoveCreditGrantIDs(ids...)
	return puo
}

// RemoveCreditGrants removes "credit_grants" edges to CreditEntry entities.
func (puo *ProductUpdateOne) RemoveCreditGrants(c ...*CreditEntry) *ProductUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCreditGrantIDs(ids...)
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Product.name": %w`, err)}
		}
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.MeterGroupByFilters(); ok {
		_spec.SetField(product.FieldMeterGroupByFilters, field.TypeJSON, value)
	}
	if puo.mutation.MeterGroupByFiltersCleared() {
		_spec.ClearField(product.FieldMeterGroupByFilters, field.TypeJSON)
	}
	if value, ok := puo.mutation.Archived(); ok {
		_spec.SetField(product.FieldArchived, field.TypeBool, value)
	}
	if puo.mutation.CreditGrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CreditGrantsTable,
			Columns: []string{product.CreditGrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creditentry.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCreditGrantsIDs(); len(nodes) > 0 && !puo.mutation.CreditGrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CreditGrantsTable,
			Columns: []string{product.CreditGrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creditentry.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CreditGrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CreditGrantsTable,
			Columns: []string{product.CreditGrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(creditentry.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
