// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/internal/credit/postgres_connector/ent/db/ledger"
	"github.com/openmeterio/openmeter/internal/credit/postgres_connector/ent/db/predicate"
)

// LedgerUpdate is the builder for updating Ledger entities.
type LedgerUpdate struct {
	config
	hooks    []Hook
	mutation *LedgerMutation
}

// Where appends a list predicates to the LedgerUpdate builder.
func (lu *LedgerUpdate) Where(ps ...predicate.Ledger) *LedgerUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LedgerUpdate) SetUpdatedAt(t time.Time) *LedgerUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// SetHighwatermark sets the "highwatermark" field.
func (lu *LedgerUpdate) SetHighwatermark(t time.Time) *LedgerUpdate {
	lu.mutation.SetHighwatermark(t)
	return lu
}

// SetNillableHighwatermark sets the "highwatermark" field if the given value is not nil.
func (lu *LedgerUpdate) SetNillableHighwatermark(t *time.Time) *LedgerUpdate {
	if t != nil {
		lu.SetHighwatermark(*t)
	}
	return lu
}

// Mutation returns the LedgerMutation object of the builder.
func (lu *LedgerUpdate) Mutation() *LedgerMutation {
	return lu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LedgerUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LedgerUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LedgerUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LedgerUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LedgerUpdate) defaults() {
	if _, ok := lu.mutation.UpdatedAt(); !ok {
		v := ledger.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
}

func (lu *LedgerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ledger.Table, ledger.Columns, sqlgraph.NewFieldSpec(ledger.FieldID, field.TypeInt))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(ledger.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.Highwatermark(); ok {
		_spec.SetField(ledger.FieldHighwatermark, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ledger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LedgerUpdateOne is the builder for updating a single Ledger entity.
type LedgerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LedgerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LedgerUpdateOne) SetUpdatedAt(t time.Time) *LedgerUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// SetHighwatermark sets the "highwatermark" field.
func (luo *LedgerUpdateOne) SetHighwatermark(t time.Time) *LedgerUpdateOne {
	luo.mutation.SetHighwatermark(t)
	return luo
}

// SetNillableHighwatermark sets the "highwatermark" field if the given value is not nil.
func (luo *LedgerUpdateOne) SetNillableHighwatermark(t *time.Time) *LedgerUpdateOne {
	if t != nil {
		luo.SetHighwatermark(*t)
	}
	return luo
}

// Mutation returns the LedgerMutation object of the builder.
func (luo *LedgerUpdateOne) Mutation() *LedgerMutation {
	return luo.mutation
}

// Where appends a list predicates to the LedgerUpdate builder.
func (luo *LedgerUpdateOne) Where(ps ...predicate.Ledger) *LedgerUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LedgerUpdateOne) Select(field string, fields ...string) *LedgerUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Ledger entity.
func (luo *LedgerUpdateOne) Save(ctx context.Context) (*Ledger, error) {
	luo.defaults()
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LedgerUpdateOne) SaveX(ctx context.Context) *Ledger {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LedgerUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LedgerUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LedgerUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdatedAt(); !ok {
		v := ledger.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
}

func (luo *LedgerUpdateOne) sqlSave(ctx context.Context) (_node *Ledger, err error) {
	_spec := sqlgraph.NewUpdateSpec(ledger.Table, ledger.Columns, sqlgraph.NewFieldSpec(ledger.FieldID, field.TypeInt))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Ledger.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ledger.FieldID)
		for _, f := range fields {
			if !ledger.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != ledger.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(ledger.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.Highwatermark(); ok {
		_spec.SetField(ledger.FieldHighwatermark, field.TypeTime, value)
	}
	_node = &Ledger{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ledger.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
