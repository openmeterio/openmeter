// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// Defines values for EntitlementBooleanType.
const (
	EntitlementBooleanTypeBoolean EntitlementBooleanType = "boolean"
)

// Defines values for EntitlementBooleanCreateInputsType.
const (
	EntitlementBooleanCreateInputsTypeBoolean EntitlementBooleanCreateInputsType = "boolean"
)

// Defines values for EntitlementMeteredType.
const (
	EntitlementMeteredTypeMetered EntitlementMeteredType = "metered"
)

// Defines values for EntitlementMeteredCreateInputsType.
const (
	EntitlementMeteredCreateInputsTypeMetered EntitlementMeteredCreateInputsType = "metered"
)

// Defines values for EntitlementStaticType.
const (
	EntitlementStaticTypeStatic EntitlementStaticType = "static"
)

// Defines values for EntitlementStaticCreateInputsType.
const (
	EntitlementStaticCreateInputsTypeStatic EntitlementStaticCreateInputsType = "static"
)

// Defines values for ExpirationPeriodDuration.
const (
	ExpirationPeriodDurationDAY   ExpirationPeriodDuration = "DAY"
	ExpirationPeriodDurationHOUR  ExpirationPeriodDuration = "HOUR"
	ExpirationPeriodDurationMONTH ExpirationPeriodDuration = "MONTH"
	ExpirationPeriodDurationWEEK  ExpirationPeriodDuration = "WEEK"
	ExpirationPeriodDurationYEAR  ExpirationPeriodDuration = "YEAR"
)

// Defines values for RecurringPeriodEnum.
const (
	RecurringPeriodEnumDAY   RecurringPeriodEnum = "DAY"
	RecurringPeriodEnumMONTH RecurringPeriodEnum = "MONTH"
	RecurringPeriodEnumWEEK  RecurringPeriodEnum = "WEEK"
	RecurringPeriodEnumYEAR  RecurringPeriodEnum = "YEAR"
)

// Defines values for ListEntitlementsParamsOrderBy.
const (
	ListEntitlementsParamsOrderByCreatedAt ListEntitlementsParamsOrderBy = "createdAt"
	ListEntitlementsParamsOrderByUpdatedAt ListEntitlementsParamsOrderBy = "updatedAt"
)

// Defines values for ListFeaturesParamsOrderBy.
const (
	ListFeaturesParamsOrderByCreatedAt ListFeaturesParamsOrderBy = "createdAt"
	ListFeaturesParamsOrderById        ListFeaturesParamsOrderBy = "id"
	ListFeaturesParamsOrderByUpdatedAt ListFeaturesParamsOrderBy = "updatedAt"
)

// Defines values for ListGrantsParamsOrderBy.
const (
	ListGrantsParamsOrderByCreatedAt ListGrantsParamsOrderBy = "createdAt"
	ListGrantsParamsOrderById        ListGrantsParamsOrderBy = "id"
	ListGrantsParamsOrderByUpdatedAt ListGrantsParamsOrderBy = "updatedAt"
)

// Defines values for ListEntitlementGrantsParamsOrderBy.
const (
	ListEntitlementGrantsParamsOrderByCreatedAt ListEntitlementGrantsParamsOrderBy = "createdAt"
	ListEntitlementGrantsParamsOrderById        ListEntitlementGrantsParamsOrderBy = "id"
	ListEntitlementGrantsParamsOrderByUpdatedAt ListEntitlementGrantsParamsOrderBy = "updatedAt"
)

// Defines values for GetEntitlementHistoryParamsWindowSize.
const (
	DAY    GetEntitlementHistoryParamsWindowSize = "DAY"
	HOUR   GetEntitlementHistoryParamsWindowSize = "HOUR"
	MINUTE GetEntitlementHistoryParamsWindowSize = "MINUTE"
)

// BalanceHistoryWindow A window of balance history.
type BalanceHistoryWindow struct {
	// BalanceAtStart The entitlement balance at the start of the period.
	BalanceAtStart *float64 `json:"balanceAtStart,omitempty"`

	// Period A time period
	Period *Period `json:"period,omitempty"`

	// Usage The total usage of the feature in the period.
	Usage *float64 `json:"usage,omitempty"`
}

// ConflictProblem Conflict
type ConflictProblem struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail     string `json:"detail"`
	Extensions *struct {
		// ConflictingEntityId The id of the conflicting entity.
		ConflictingEntityId string `json:"conflictingEntityId"`
	} `json:"extensions,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code generated by the origin server for this occurrence of the problem.
	Status int32 `json:"status"`

	// Title A a short, human-readable summary of the problem type.
	Title string `json:"title"`

	// Type Type contains a URI that identifies the problem type.
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Entitlement defines model for Entitlement.
type Entitlement struct {
	union json.RawMessage
}

// EntitlementBoolean defines model for EntitlementBoolean.
type EntitlementBoolean struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CurrentUsagePeriod A time period
	CurrentUsagePeriod *Period `json:"currentUsagePeriod,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string                 `json:"subjectKey"`
	Type       EntitlementBooleanType `json:"type"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementBooleanType defines model for EntitlementBoolean.Type.
type EntitlementBooleanType string

// EntitlementBooleanCreateInputs defines model for EntitlementBooleanCreateInputs.
type EntitlementBooleanCreateInputs struct {
	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string                 `json:"metadata,omitempty"`
	Type     EntitlementBooleanCreateInputsType `json:"type"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriodCreateInput `json:"usagePeriod,omitempty"`
}

// EntitlementBooleanCreateInputsType defines model for EntitlementBooleanCreateInputs.Type.
type EntitlementBooleanCreateInputsType string

// EntitlementCreateInputs defines model for EntitlementCreateInputs.
type EntitlementCreateInputs struct {
	union json.RawMessage
}

// EntitlementCreateSharedFields defines model for EntitlementCreateSharedFields.
type EntitlementCreateSharedFields struct {
	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriodCreateInput `json:"usagePeriod,omitempty"`
}

// EntitlementGrant defines model for EntitlementGrant.
type EntitlementGrant struct {
	// Amount The amount to grant. Should be a positive number.
	Amount float64 `json:"amount"`

	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// EffectiveAt The effective time. Provided value will be ceiled to metering windowSize (minute).
	EffectiveAt time.Time `json:"effectiveAt"`

	// EntitlementId The unique entitlement ULID that the grant is associated with.
	EntitlementId *string          `json:"entitlementId,omitempty"`
	Expiration    ExpirationPeriod `json:"expiration"`

	// ExpiresAt The expiration date of the grant.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// MaxRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	//
	// Balance after the reset is calculated as:
	// Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MaxRolloverAmount *float64           `json:"maxRolloverAmount,omitempty"`
	Metadata          *map[string]string `json:"metadata,omitempty"`

	// MinRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	//
	// Balance after the reset is calculated as:
	// Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MinRolloverAmount *float64 `json:"minRolloverAmount,omitempty"`

	// NextRecurrence The next time the grant will recurr.
	NextRecurrence *time.Time `json:"nextRecurrence,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *int `json:"priority,omitempty"`

	// Recurrence Recurring period of an entitlement.
	Recurrence *RecurringPeriod `json:"recurrence,omitempty"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// VoidedAt The date and time the grant was voided (cannot be used after that).
	VoidedAt *time.Time `json:"voidedAt,omitempty"`
}

// EntitlementGrantCreateInput Grants are used to increase balance of specific subjects.
type EntitlementGrantCreateInput struct {
	// Amount The amount to grant. Should be a positive number.
	Amount float64 `json:"amount"`

	// EffectiveAt The effective time. Provided value will be ceiled to metering windowSize (minute).
	EffectiveAt time.Time        `json:"effectiveAt"`
	Expiration  ExpirationPeriod `json:"expiration"`

	// MaxRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	//
	// Balance after the reset is calculated as:
	// Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MaxRolloverAmount *float64           `json:"maxRolloverAmount,omitempty"`
	Metadata          *map[string]string `json:"metadata,omitempty"`

	// MinRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	//
	// Balance after the reset is calculated as:
	// Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MinRolloverAmount *float64 `json:"minRolloverAmount,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *int `json:"priority,omitempty"`

	// Recurrence Recurring period of an entitlement.
	Recurrence *RecurringPeriodCreateInput `json:"recurrence,omitempty"`
}

// EntitlementMetered defines model for EntitlementMetered.
type EntitlementMetered struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CurrentUsagePeriod A time period
	CurrentUsagePeriod Period `json:"currentUsagePeriod"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// IsSoftLimit If softLimit=true the subject can use the feature even if the entitlement is exhausted.
	IsSoftLimit *bool `json:"isSoftLimit,omitempty"`

	// IsUnlimited If unlimited=true the subject can use the feature an unlimited amount.
	IsUnlimited *bool `json:"isUnlimited,omitempty"`

	// IssueAfterReset You can issue usage automatically after reset. This usage is not rolled over.
	IssueAfterReset *float64 `json:"issueAfterReset,omitempty"`

	// LastReset The last time the meter was reset.
	LastReset time.Time `json:"lastReset"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string                 `json:"subjectKey"`
	Type       EntitlementMeteredType `json:"type"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod RecurringPeriod `json:"usagePeriod"`
}

// EntitlementMeteredType defines model for EntitlementMetered.Type.
type EntitlementMeteredType string

// EntitlementMeteredCalculatedFields Calculated fields for a metered entitlement.
type EntitlementMeteredCalculatedFields struct {
	// CurrentUsagePeriod A time period
	CurrentUsagePeriod Period `json:"currentUsagePeriod"`

	// LastReset The last time the meter was reset.
	LastReset time.Time `json:"lastReset"`
}

// EntitlementMeteredCreateInputs defines model for EntitlementMeteredCreateInputs.
type EntitlementMeteredCreateInputs struct {
	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// IsSoftLimit If softLimit=true the subject can use the feature even if the entitlement is exhausted.
	IsSoftLimit *bool `json:"isSoftLimit,omitempty"`

	// IsUnlimited If unlimited=true the subject can use the feature an unlimited amount.
	IsUnlimited *bool `json:"isUnlimited,omitempty"`

	// IssueAfterReset You can issue usage automatically after reset. This usage is not rolled over.
	IssueAfterReset *float64 `json:"issueAfterReset,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string                 `json:"metadata,omitempty"`
	Type     EntitlementMeteredCreateInputsType `json:"type"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod RecurringPeriodCreateInput `json:"usagePeriod"`
}

// EntitlementMeteredCreateInputsType defines model for EntitlementMeteredCreateInputs.Type.
type EntitlementMeteredCreateInputsType string

// EntitlementSharedFields defines model for EntitlementSharedFields.
type EntitlementSharedFields struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CurrentUsagePeriod A time period
	CurrentUsagePeriod *Period `json:"currentUsagePeriod,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string `json:"subjectKey"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementStatic defines model for EntitlementStatic.
type EntitlementStatic struct {
	// Config The JSON parsable config of the entitlement.
	Config string `json:"config"`

	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CurrentUsagePeriod A time period
	CurrentUsagePeriod *Period `json:"currentUsagePeriod,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string                `json:"subjectKey"`
	Type       EntitlementStaticType `json:"type"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementStaticType defines model for EntitlementStatic.Type.
type EntitlementStaticType string

// EntitlementStaticCreateInputs defines model for EntitlementStaticCreateInputs.
type EntitlementStaticCreateInputs struct {
	// Config The JSON parsable config of the entitlement.
	Config string `json:"config"`

	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string                `json:"metadata,omitempty"`
	Type     EntitlementStaticCreateInputsType `json:"type"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriodCreateInput `json:"usagePeriod,omitempty"`
}

// EntitlementStaticCreateInputsType defines model for EntitlementStaticCreateInputs.Type.
type EntitlementStaticCreateInputsType string

// EntitlementValue defines model for EntitlementValue.
type EntitlementValue struct {
	// Balance The balance of a metered entitlement.
	Balance *float64 `json:"balance,omitempty"`

	// Config The JSON parseable configuration value of a static entitlement.
	Config *string `json:"config,omitempty"`

	// HasAccess Whether the subject has access to the feature.
	HasAccess *bool `json:"hasAccess,omitempty"`

	// Overage The overage of a metered entitlement.
	Overage *float64 `json:"overage,omitempty"`

	// Usage Total usage of the feature in the period. Includes overages.
	Usage *float64 `json:"usage,omitempty"`
}

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// ExpirationPeriod Expiration period of a grant.
type ExpirationPeriod struct {
	// Count The expiration period count like 12 months.
	Count int `json:"count"`

	// Duration The expiration period duration like month.
	Duration ExpirationPeriodDuration `json:"duration"`
}

// ExpirationPeriodDuration The expiration period duration like month.
type ExpirationPeriodDuration string

// Feature defines model for Feature.
type Feature struct {
	// ArchivedAt If the feature is archived, it will not be used for grants or usage.
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`

	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Key The unique key of the feature to reference it from your application.
	Key string `json:"key"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// MeterGroupByFilters Optional meter group by filters. Useful if the meter scope is broader than what feature tracks.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug The meter that the feature is associated with and decreases grants by usage.
	// If present, the usage of the feature can be metered.
	MeterSlug *string `json:"meterSlug,omitempty"`

	// Name The name of the feature.
	Name string `json:"name"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// FeatureCreateInputs A feature is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type FeatureCreateInputs struct {
	// Key The unique key of the feature to reference it from your application.
	Key string `json:"key"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// MeterGroupByFilters Optional meter group by filters. Useful if the meter scope is broader than what feature tracks.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug The meter that the feature is associated with and decreases grants by usage.
	// If present, the usage of the feature can be metered.
	MeterSlug *string `json:"meterSlug,omitempty"`

	// Name The name of the feature.
	Name string `json:"name"`
}

// GrantBurnDownHistorySegment A segment of the grant burn down history.
//
// A given segment represents the usage of a grant in a specific period.
type GrantBurnDownHistorySegment struct {
	// BalanceAtEnd The entitlement balance at the end of the period.
	BalanceAtEnd *float64 `json:"balanceAtEnd,omitempty"`

	// BalanceAtStart The entitlement balance at the start of the period.
	BalanceAtStart *float64 `json:"balanceAtStart,omitempty"`

	// GrantBalancesAtEnd The balance breakdown of each active grant at the start of the period: GrantID: Balance
	GrantBalancesAtEnd *map[string]float64 `json:"grantBalancesAtEnd,omitempty"`

	// GrantBalancesAtStart The balance breakdown of each active grant at the start of the period: GrantID: Balance
	GrantBalancesAtStart *map[string]float64 `json:"grantBalancesAtStart,omitempty"`

	// GrantUsages Which grants were actually burnt down in the period and by what amount.
	GrantUsages *[]GrantUsageRecord `json:"grantUsages,omitempty"`

	// Overage Overuse that wasn't covered by grants.
	Overage *float64 `json:"overage,omitempty"`

	// Period A time period
	Period *Period `json:"period,omitempty"`

	// Usage The usage of the grant in the period.
	Usage *float64 `json:"usage,omitempty"`
}

// GrantUsageRecord defines model for GrantUsageRecord.
type GrantUsageRecord struct {
	// GrantId The id of the grant.
	GrantId *string `json:"grantId,omitempty"`

	// Usage The usage of the grant.
	Usage *float64 `json:"usage,omitempty"`
}

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// Period A time period
type Period struct {
	// From Period start time where the amount was applied. If applicable.
	From time.Time `json:"from"`

	// To Period end time where the amount was applied. If applicable.
	To time.Time `json:"to"`
}

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// RecurringPeriod Recurring period of an entitlement.
type RecurringPeriod struct {
	// Anchor An arbitrary anchor to base the recurring period on.
	Anchor time.Time `json:"anchor"`

	// Interval List of pre-defined periods that can be used for recurring & scheduling.
	//
	// DAY:      Every day
	// WEEK:     Every week
	// MONTH:    Every month
	// YEAR:     Every year
	Interval RecurringPeriodEnum `json:"interval"`
}

// RecurringPeriodCreateInput Recurring period of an entitlement.
type RecurringPeriodCreateInput struct {
	// Anchor An arbitrary anchor to base the recurring period on.
	// If not provided then defaults to now truncated to the hour.
	Anchor *time.Time `json:"anchor,omitempty"`

	// Interval List of pre-defined periods that can be used for recurring & scheduling.
	//
	// DAY:      Every day
	// WEEK:     Every week
	// MONTH:    Every month
	// YEAR:     Every year
	Interval RecurringPeriodEnum `json:"interval"`
}

// RecurringPeriodEnum List of pre-defined periods that can be used for recurring & scheduling.
//
// DAY:      Every day
// WEEK:     Every week
// MONTH:    Every month
// YEAR:     Every year
type RecurringPeriodEnum string

// SharedMetaFields Metadata fields for a resource.
// These fields are automatically populated by the system for the entities we manage.
type SharedMetaFields struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// WindowedBalanceHistory The windowed balance history.
type WindowedBalanceHistory struct {
	// BurndownHistory The grant burn down history in the period.
	BurndownHistory *[]GrantBurnDownHistorySegment `json:"burndownHistory,omitempty"`

	// WindowedHistory The windowed balance history.
	// Only returns rows for windows where there was usage.
	WindowedHistory *[]BalanceHistoryWindow `json:"windowedHistory,omitempty"`
}

// EntitlementId defines model for entitlementId.
type EntitlementId = string

// EntitlementIdOrFeatureKey defines model for entitlementIdOrFeatureKey.
type EntitlementIdOrFeatureKey = string

// FeatureId defines model for featureId.
type FeatureId = string

// GrantId defines model for grantId.
type GrantId = string

// IncludeDeleted defines model for includeDeleted.
type IncludeDeleted = bool

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// QueryFilterGroupBy Simple filter for group bys with exact match.
//
// Usage: `?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4`
type QueryFilterGroupBy map[string]string

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryLimit defines model for queryLimit.
type QueryLimit = int

// QueryOffset defines model for queryOffset.
type QueryOffset = int

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// ConflictProblemResponse Conflict
type ConflictProblemResponse = ConflictProblem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// ListEntitlementsParams defines parameters for ListEntitlements.
type ListEntitlementsParams struct {
	// Limit Number of entries to return
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of entries to skip
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Order by field
	OrderBy *ListEntitlementsParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListEntitlementsParamsOrderBy defines parameters for ListEntitlements.
type ListEntitlementsParamsOrderBy string

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// ListFeaturesParams defines parameters for ListFeatures.
type ListFeaturesParams struct {
	// Limit Number of entries to return
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of entries to skip
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Order by field
	OrderBy *ListFeaturesParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// IncludeArchived Include archived features.
	IncludeArchived *bool `form:"includeArchived,omitempty" json:"includeArchived,omitempty"`
}

// ListFeaturesParamsOrderBy defines parameters for ListFeatures.
type ListFeaturesParamsOrderBy string

// ListGrantsParams defines parameters for ListGrants.
type ListGrantsParams struct {
	// Limit Number of entries to return
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of entries to skip
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Order by field
	OrderBy *ListGrantsParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// IncludeDeleted Include deleted entries.
	IncludeDeleted *IncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`
}

// ListGrantsParamsOrderBy defines parameters for ListGrants.
type ListGrantsParamsOrderBy string

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: ?subject=customer-1&subject=customer-2
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// ListSubjectEntitlementsParams defines parameters for ListSubjectEntitlements.
type ListSubjectEntitlementsParams struct {
	// IncludeDeleted Include deleted entries.
	IncludeDeleted *IncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`
}

// GetEntitlementValueParams defines parameters for GetEntitlementValue.
type GetEntitlementValueParams struct {
	// Time Point of time to check value: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListEntitlementGrantsParams defines parameters for ListEntitlementGrants.
type ListEntitlementGrantsParams struct {
	// IncludeDeleted Include deleted entries.
	IncludeDeleted *IncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// OrderBy Order by field
	OrderBy *ListEntitlementGrantsParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListEntitlementGrantsParamsOrderBy defines parameters for ListEntitlementGrants.
type ListEntitlementGrantsParamsOrderBy string

// GetEntitlementHistoryParams defines parameters for GetEntitlementHistory.
type GetEntitlementHistoryParams struct {
	// From Start of time range to query entitlement: date-time in RFC 3339 format. Defaults to
	// the last reset.
	// Gets truncated to the granularity of the underlying meter.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End of time range to query entitlement: date-time in RFC 3339 format. Defaults to now.
	// If not now then gets truncated to the granularity of the underlying meter.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize Size of the time window to group the history by. Cannot be shorter than meter granularity.
	WindowSize GetEntitlementHistoryParamsWindowSize `form:"windowSize" json:"windowSize"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
}

// GetEntitlementHistoryParamsWindowSize defines parameters for GetEntitlementHistory.
type GetEntitlementHistoryParamsWindowSize string

// ResetEntitlementUsageJSONBody defines parameters for ResetEntitlementUsage.
type ResetEntitlementUsageJSONBody struct {
	// EffectiveAt The time at which the reset takes effect, defaults to now.
	// The reset cannot be in the future.
	// The provided value is truncated to the granularity of the underlying meter.
	EffectiveAt *time.Time `json:"effectiveAt,omitempty"`

	// RetainAnchor Should the reset retain the usage period anchor.
	// If true, the usage period anchor is retained.
	// If false, the usage period anchor is reset to the effectiveAt time.
	RetainAnchor *bool `json:"retainAnchor,omitempty"`
}

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = FeatureCreateInputs

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// CreateEntitlementJSONRequestBody defines body for CreateEntitlement for application/json ContentType.
type CreateEntitlementJSONRequestBody = EntitlementCreateInputs

// CreateGrantJSONRequestBody defines body for CreateGrant for application/json ContentType.
type CreateGrantJSONRequestBody = EntitlementGrantCreateInput

// ResetEntitlementUsageJSONRequestBody defines body for ResetEntitlementUsage for application/json ContentType.
type ResetEntitlementUsageJSONRequestBody ResetEntitlementUsageJSONBody

// Getter for additional properties for ConflictProblem. Returns the specified
// element and whether it was found
func (a ConflictProblem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConflictProblem
func (a *ConflictProblem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConflictProblem to handle AdditionalProperties
func (a *ConflictProblem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["extensions"]; found {
		err = json.Unmarshal(raw, &a.Extensions)
		if err != nil {
			return fmt.Errorf("error reading 'extensions': %w", err)
		}
		delete(object, "extensions")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConflictProblem to handle AdditionalProperties
func (a ConflictProblem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["detail"], err = json.Marshal(a.Detail)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'detail': %w", err)
	}

	if a.Extensions != nil {
		object["extensions"], err = json.Marshal(a.Extensions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extensions': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	object["title"], err = json.Marshal(a.Title)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'title': %w", err)
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsEntitlementMetered returns the union data inside the Entitlement as a EntitlementMetered
func (t Entitlement) AsEntitlementMetered() (EntitlementMetered, error) {
	var body EntitlementMetered
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementMetered overwrites any union data inside the Entitlement as the provided EntitlementMetered
func (t *Entitlement) FromEntitlementMetered(v EntitlementMetered) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementMetered performs a merge with any union data inside the Entitlement, using the provided EntitlementMetered
func (t *Entitlement) MergeEntitlementMetered(v EntitlementMetered) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementStatic returns the union data inside the Entitlement as a EntitlementStatic
func (t Entitlement) AsEntitlementStatic() (EntitlementStatic, error) {
	var body EntitlementStatic
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementStatic overwrites any union data inside the Entitlement as the provided EntitlementStatic
func (t *Entitlement) FromEntitlementStatic(v EntitlementStatic) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementStatic performs a merge with any union data inside the Entitlement, using the provided EntitlementStatic
func (t *Entitlement) MergeEntitlementStatic(v EntitlementStatic) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementBoolean returns the union data inside the Entitlement as a EntitlementBoolean
func (t Entitlement) AsEntitlementBoolean() (EntitlementBoolean, error) {
	var body EntitlementBoolean
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementBoolean overwrites any union data inside the Entitlement as the provided EntitlementBoolean
func (t *Entitlement) FromEntitlementBoolean(v EntitlementBoolean) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementBoolean performs a merge with any union data inside the Entitlement, using the provided EntitlementBoolean
func (t *Entitlement) MergeEntitlementBoolean(v EntitlementBoolean) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Entitlement) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Entitlement) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "boolean":
		return t.AsEntitlementBoolean()
	case "metered":
		return t.AsEntitlementMetered()
	case "static":
		return t.AsEntitlementStatic()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Entitlement) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Entitlement) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEntitlementMeteredCreateInputs returns the union data inside the EntitlementCreateInputs as a EntitlementMeteredCreateInputs
func (t EntitlementCreateInputs) AsEntitlementMeteredCreateInputs() (EntitlementMeteredCreateInputs, error) {
	var body EntitlementMeteredCreateInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementMeteredCreateInputs overwrites any union data inside the EntitlementCreateInputs as the provided EntitlementMeteredCreateInputs
func (t *EntitlementCreateInputs) FromEntitlementMeteredCreateInputs(v EntitlementMeteredCreateInputs) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementMeteredCreateInputs performs a merge with any union data inside the EntitlementCreateInputs, using the provided EntitlementMeteredCreateInputs
func (t *EntitlementCreateInputs) MergeEntitlementMeteredCreateInputs(v EntitlementMeteredCreateInputs) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementStaticCreateInputs returns the union data inside the EntitlementCreateInputs as a EntitlementStaticCreateInputs
func (t EntitlementCreateInputs) AsEntitlementStaticCreateInputs() (EntitlementStaticCreateInputs, error) {
	var body EntitlementStaticCreateInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementStaticCreateInputs overwrites any union data inside the EntitlementCreateInputs as the provided EntitlementStaticCreateInputs
func (t *EntitlementCreateInputs) FromEntitlementStaticCreateInputs(v EntitlementStaticCreateInputs) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementStaticCreateInputs performs a merge with any union data inside the EntitlementCreateInputs, using the provided EntitlementStaticCreateInputs
func (t *EntitlementCreateInputs) MergeEntitlementStaticCreateInputs(v EntitlementStaticCreateInputs) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementBooleanCreateInputs returns the union data inside the EntitlementCreateInputs as a EntitlementBooleanCreateInputs
func (t EntitlementCreateInputs) AsEntitlementBooleanCreateInputs() (EntitlementBooleanCreateInputs, error) {
	var body EntitlementBooleanCreateInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementBooleanCreateInputs overwrites any union data inside the EntitlementCreateInputs as the provided EntitlementBooleanCreateInputs
func (t *EntitlementCreateInputs) FromEntitlementBooleanCreateInputs(v EntitlementBooleanCreateInputs) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementBooleanCreateInputs performs a merge with any union data inside the EntitlementCreateInputs, using the provided EntitlementBooleanCreateInputs
func (t *EntitlementCreateInputs) MergeEntitlementBooleanCreateInputs(v EntitlementBooleanCreateInputs) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EntitlementCreateInputs) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t EntitlementCreateInputs) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "boolean":
		return t.AsEntitlementBooleanCreateInputs()
	case "metered":
		return t.AsEntitlementMeteredCreateInputs()
	case "static":
		return t.AsEntitlementStaticCreateInputs()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t EntitlementCreateInputs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EntitlementCreateInputs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List entitlements
	// (GET /api/v1/entitlements)
	ListEntitlements(w http.ResponseWriter, r *http.Request, params ListEntitlementsParams)
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request, params ListFeaturesParams)
	// Create feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Delete feature
	// (DELETE /api/v1/features/{featureId})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId)
	// Get feature
	// (GET /api/v1/features/{featureId})
	GetFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId)
	// List grants
	// (GET /api/v1/grants)
	ListGrants(w http.ResponseWriter, r *http.Request, params ListGrantsParams)
	// Delete a grant
	// (DELETE /api/v1/grants/{grantId})
	VoidGrant(w http.ResponseWriter, r *http.Request, grantId GrantId)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// List entitlements
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements)
	ListSubjectEntitlements(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, params ListSubjectEntitlementsParams)
	// Create entitlement
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements)
	CreateEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// Get the balance of a specific entitlement.
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/value)
	GetEntitlementValue(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementIdOrFeatureKey EntitlementIdOrFeatureKey, params GetEntitlementValueParams)
	// Delete entitlement
	// (DELETE /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
	DeleteEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId)
	// Get entitlement
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
	GetEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId)
	// List grants for an entitlement
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants)
	ListEntitlementGrants(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params ListEntitlementGrantsParams)
	// Create grant
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants)
	CreateGrant(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId)
	// Get the balance history of a specific entitlement.
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history)
	GetEntitlementHistory(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params GetEntitlementHistoryParams)
	// Reset entitlement
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset)
	ResetEntitlementUsage(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List entitlements
// (GET /api/v1/entitlements)
func (_ Unimplemented) ListEntitlements(w http.ResponseWriter, r *http.Request, params ListEntitlementsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request, params ListFeaturesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete feature
// (DELETE /api/v1/features/{featureId})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureId})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List grants
// (GET /api/v1/grants)
func (_ Unimplemented) ListGrants(w http.ResponseWriter, r *http.Request, params ListGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a grant
// (DELETE /api/v1/grants/{grantId})
func (_ Unimplemented) VoidGrant(w http.ResponseWriter, r *http.Request, grantId GrantId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List entitlements
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements)
func (_ Unimplemented) ListSubjectEntitlements(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, params ListSubjectEntitlementsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create entitlement
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements)
func (_ Unimplemented) CreateEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the balance of a specific entitlement.
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/value)
func (_ Unimplemented) GetEntitlementValue(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementIdOrFeatureKey EntitlementIdOrFeatureKey, params GetEntitlementValueParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete entitlement
// (DELETE /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
func (_ Unimplemented) DeleteEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get entitlement
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
func (_ Unimplemented) GetEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List grants for an entitlement
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants)
func (_ Unimplemented) ListEntitlementGrants(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params ListEntitlementGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create grant
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants)
func (_ Unimplemented) CreateGrant(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the balance history of a specific entitlement.
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history)
func (_ Unimplemented) GetEntitlementHistory(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params GetEntitlementHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset entitlement
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset)
func (_ Unimplemented) ResetEntitlementUsage(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEntitlements operation middleware
func (siw *ServerInterfaceWrapper) ListEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEntitlementsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEntitlements(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFeaturesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "includeArchived" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeArchived", r.URL.Query(), &params.IncludeArchived)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeArchived", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId FeatureId

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId FeatureId

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGrants operation middleware
func (siw *ServerInterfaceWrapper) ListGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGrantsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "grantId" -------------
	var grantId GrantId

	err = runtime.BindStyledParameterWithOptions("simple", "grantId", chi.URLParam(r, "grantId"), &grantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "grantId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidGrant(w, r, grantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjectEntitlements operation middleware
func (siw *ServerInterfaceWrapper) ListSubjectEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSubjectEntitlementsParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjectEntitlements(w, r, subjectIdOrKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEntitlement operation middleware
func (siw *ServerInterfaceWrapper) CreateEntitlement(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEntitlement(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEntitlementValue operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlementValue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementIdOrFeatureKey" -------------
	var entitlementIdOrFeatureKey EntitlementIdOrFeatureKey

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementIdOrFeatureKey", chi.URLParam(r, "entitlementIdOrFeatureKey"), &entitlementIdOrFeatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementIdOrFeatureKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntitlementValueParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlementValue(w, r, subjectIdOrKey, entitlementIdOrFeatureKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteEntitlement operation middleware
func (siw *ServerInterfaceWrapper) DeleteEntitlement(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEntitlement(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEntitlement operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlement(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlement(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEntitlementGrants operation middleware
func (siw *ServerInterfaceWrapper) ListEntitlementGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEntitlementGrantsParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEntitlementGrants(w, r, subjectIdOrKey, entitlementId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGrant(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEntitlementHistory operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlementHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntitlementHistoryParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Required query parameter "windowSize" -------------

	if paramValue := r.URL.Query().Get("windowSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "windowSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlementHistory(w, r, subjectIdOrKey, entitlementId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetEntitlementUsage operation middleware
func (siw *ServerInterfaceWrapper) ResetEntitlementUsage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetEntitlementUsage(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/entitlements", wrapper.ListEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureId}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureId}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/grants", wrapper.ListGrants)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/grants/{grantId}", wrapper.VoidGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements", wrapper.ListSubjectEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements", wrapper.CreateEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/value", wrapper.GetEntitlementValue)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}", wrapper.DeleteEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}", wrapper.GetEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants", wrapper.ListEntitlementGrants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants", wrapper.CreateGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history", wrapper.GetEntitlementHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset", wrapper.ResetEntitlementUsage)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
