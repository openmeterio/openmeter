// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/openmeterio/openmeter/pkg/credit"
	"github.com/openmeterio/openmeter/pkg/models"
	"github.com/openmeterio/openmeter/pkg/product"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// CreditBalance Credit balance of a subject.
type CreditBalance = credit.Balance

// CreditExpirationPeriod Expiration period of a credit grant.
type CreditExpirationPeriod = credit.ExpirationPeriod

// CreditGrant Grants are used to increase balance of specific subjects.
type CreditGrant = credit.Grant

// CreditGrantBalance defines model for CreditGrantBalance.
type CreditGrantBalance = credit.Grant

// CreditGrantRollover Grant rollover configuration.
type CreditGrantRollover = credit.GrantRollover

// CreditGrantRolloverType The rollover type to use:
// - `REMAINING_AMOUNT` - Rollover remaining amount.
// - `ORIGINAL_AMOUNT` - Rollover re-applies the full grant amount.
type CreditGrantRolloverType = credit.GrantRolloverType

// CreditGrantType The grant type:
// - `USAGE` - Increase balance by the amount in the unit of the associated meter.
type CreditGrantType = credit.GrantType

// CreditLedgerEntry Credit ledger entry.
type CreditLedgerEntry = credit.LedgerEntry

// CreditLedgerEntryType defines model for CreditLedgerEntryType.
type CreditLedgerEntryType = credit.LedgerEntryType

// CreditReset Credit reset configuration.
type CreditReset = credit.Reset

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// Product A product is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type Product = product.Product

// ProductBalance defines model for ProductBalance.
type ProductBalance = product.Product

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// CreditGrantId defines model for creditGrantId.
type CreditGrantId = string

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// ProductId defines model for productId.
type ProductId = string

// QueryFilterGroupBy Simple filter for group bys with exact match.
// Usage: ?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4
type QueryFilterGroupBy map[string]string

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// GetCreditBalanceParams defines parameters for GetCreditBalance.
type GetCreditBalanceParams struct {
	// Time Point of time to query balances: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListCreditGrantsParams defines parameters for ListCreditGrants.
type ListCreditGrantsParams struct {
	// Subject Filtering and group by multiple subjects.
	// Usage: ?subject=customer-1&subject=customer-2
	Subject *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
}

// GetCreditLedgerParams defines parameters for GetCreditLedger.
type GetCreditLedgerParams struct {
	// From Start of time range to query ledger: date-time in RFC 3339 format.
	From time.Time `form:"from" json:"from"`

	// To End of time range to query ledger: date-time in RFC 3339 format. Defaults to now.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering and group by multiple subjects.
	// Usage: ?subject=customer-1&subject=customer-2
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// CreateCreditGrantJSONRequestBody defines body for CreateCreditGrant for application/json ContentType.
type CreateCreditGrantJSONRequestBody = CreditGrant

// ResetCreditJSONRequestBody defines body for ResetCredit for application/json ContentType.
type ResetCreditJSONRequestBody = CreditReset

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody = Product

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get credit balance
	// (GET /api/v1/credit-balance/{subject})
	GetCreditBalance(w http.ResponseWriter, r *http.Request, subject string, params GetCreditBalanceParams)
	// List credit grants
	// (GET /api/v1/credit-grants)
	ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams)
	// Create credit grant
	// (POST /api/v1/credit-grants)
	CreateCreditGrant(w http.ResponseWriter, r *http.Request)
	// Void credit grant
	// (DELETE /api/v1/credit-grants/{creditGrantId})
	VoidCreditGrant(w http.ResponseWriter, r *http.Request, creditGrantId CreditGrantId)
	// Get credit
	// (GET /api/v1/credit-grants/{creditGrantId})
	GetCreditGrant(w http.ResponseWriter, r *http.Request, creditGrantId CreditGrantId)
	// Get credit ledger
	// (GET /api/v1/credit-ledger/{subject})
	GetCreditLedger(w http.ResponseWriter, r *http.Request, subject string, params GetCreditLedgerParams)
	// Resets the credit balances to zero for a specific subject and re-apply active grants with rollover configuration.
	// (POST /api/v1/credit-resets)
	ResetCredit(w http.ResponseWriter, r *http.Request)
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// List products
	// (GET /api/v1/products)
	ListProducts(w http.ResponseWriter, r *http.Request)
	// Create product
	// (POST /api/v1/products)
	CreateProduct(w http.ResponseWriter, r *http.Request)
	// Delete product
	// (DELETE /api/v1/products/{productId})
	DeleteProduct(w http.ResponseWriter, r *http.Request, productId ProductId)
	// Get product
	// (GET /api/v1/products/{productId})
	GetProduct(w http.ResponseWriter, r *http.Request, productId ProductId)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get credit balance
// (GET /api/v1/credit-balance/{subject})
func (_ Unimplemented) GetCreditBalance(w http.ResponseWriter, r *http.Request, subject string, params GetCreditBalanceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List credit grants
// (GET /api/v1/credit-grants)
func (_ Unimplemented) ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create credit grant
// (POST /api/v1/credit-grants)
func (_ Unimplemented) CreateCreditGrant(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void credit grant
// (DELETE /api/v1/credit-grants/{creditGrantId})
func (_ Unimplemented) VoidCreditGrant(w http.ResponseWriter, r *http.Request, creditGrantId CreditGrantId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit
// (GET /api/v1/credit-grants/{creditGrantId})
func (_ Unimplemented) GetCreditGrant(w http.ResponseWriter, r *http.Request, creditGrantId CreditGrantId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit ledger
// (GET /api/v1/credit-ledger/{subject})
func (_ Unimplemented) GetCreditLedger(w http.ResponseWriter, r *http.Request, subject string, params GetCreditLedgerParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Resets the credit balances to zero for a specific subject and re-apply active grants with rollover configuration.
// (POST /api/v1/credit-resets)
func (_ Unimplemented) ResetCredit(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List products
// (GET /api/v1/products)
func (_ Unimplemented) ListProducts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create product
// (POST /api/v1/products)
func (_ Unimplemented) CreateProduct(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete product
// (DELETE /api/v1/products/{productId})
func (_ Unimplemented) DeleteProduct(w http.ResponseWriter, r *http.Request, productId ProductId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get product
// (GET /api/v1/products/{productId})
func (_ Unimplemented) GetProduct(w http.ResponseWriter, r *http.Request, productId ProductId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCreditBalance operation middleware
func (siw *ServerInterfaceWrapper) GetCreditBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subject" -------------
	var subject string

	err = runtime.BindStyledParameterWithOptions("simple", "subject", chi.URLParam(r, "subject"), &subject, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditBalanceParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditBalance(w, r, subject, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCreditGrants operation middleware
func (siw *ServerInterfaceWrapper) ListCreditGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCreditGrantsParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCreditGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCreditGrant(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditGrantId" -------------
	var creditGrantId CreditGrantId

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantId", chi.URLParam(r, "creditGrantId"), &creditGrantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidCreditGrant(w, r, creditGrantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) GetCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditGrantId" -------------
	var creditGrantId CreditGrantId

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantId", chi.URLParam(r, "creditGrantId"), &creditGrantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditGrant(w, r, creditGrantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditLedger operation middleware
func (siw *ServerInterfaceWrapper) GetCreditLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subject" -------------
	var subject string

	err = runtime.BindStyledParameterWithOptions("simple", "subject", chi.URLParam(r, "subject"), &subject, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditLedgerParams

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditLedger(w, r, subject, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetCredit operation middleware
func (siw *ServerInterfaceWrapper) ResetCredit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetCredit(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListProducts operation middleware
func (siw *ServerInterfaceWrapper) ListProducts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProducts(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateProduct operation middleware
func (siw *ServerInterfaceWrapper) CreateProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProduct(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteProduct operation middleware
func (siw *ServerInterfaceWrapper) DeleteProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "productId" -------------
	var productId ProductId

	err = runtime.BindStyledParameterWithOptions("simple", "productId", chi.URLParam(r, "productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "productId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProduct(w, r, productId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProduct operation middleware
func (siw *ServerInterfaceWrapper) GetProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "productId" -------------
	var productId ProductId

	err = runtime.BindStyledParameterWithOptions("simple", "productId", chi.URLParam(r, "productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "productId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProduct(w, r, productId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/credit-balance/{subject}", wrapper.GetCreditBalance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/credit-grants", wrapper.ListCreditGrants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/credit-grants", wrapper.CreateCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/credit-grants/{creditGrantId}", wrapper.VoidCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/credit-grants/{creditGrantId}", wrapper.GetCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/credit-ledger/{subject}", wrapper.GetCreditLedger)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/credit-resets", wrapper.ResetCredit)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/products", wrapper.ListProducts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/products", wrapper.CreateProduct)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/products/{productId}", wrapper.DeleteProduct)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/products/{productId}", wrapper.GetProduct)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
