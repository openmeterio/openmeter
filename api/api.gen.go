// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/openmeterio/openmeter/internal/credit"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// CreditBalance Credit balance of a subject.
type CreditBalance = credit.Balance

// CreditExpirationPeriod Expiration period of a credit grant.
type CreditExpirationPeriod = credit.ExpirationPeriod

// CreditGrant Grants are used to increase balance of specific subjects.
type CreditGrant = credit.Grant

// CreditGrantBalance defines model for CreditGrantBalance.
type CreditGrantBalance = credit.Grant

// CreditGrantRollover Grant rollover configuration.
type CreditGrantRollover = credit.GrantRollover

// CreditGrantRolloverType The rollover type to use:
// - `REMAINING_AMOUNT` - Rollover remaining amount.
// - `ORIGINAL_AMOUNT` - Rollover re-applies the full grant amount.
type CreditGrantRolloverType = credit.GrantRolloverType

// CreditGrantType The grant type:
// - `USAGE` - Increase balance by the amount in the unit of the associated meter.
type CreditGrantType = credit.GrantType

// CreditLedgerEntry Credit ledger entry.
type CreditLedgerEntry = credit.LedgerEntry

// CreditLedgerEntryType defines model for CreditLedgerEntryType.
type CreditLedgerEntryType = credit.LedgerEntryType

// CreditReset Credit reset configuration.
type CreditReset = credit.Reset

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// Feature A feature is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type Feature = credit.Feature

// FeatureBalance defines model for FeatureBalance.
type FeatureBalance = credit.Feature

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// CreditGrantId defines model for creditGrantId.
type CreditGrantId = string

// FeatureId defines model for featureId.
type FeatureId = string

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// QueryFilterGroupBy Simple filter for group bys with exact match.
//
// Usage: `?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4`
type QueryFilterGroupBy map[string]string

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// GetCreditBalanceParams defines parameters for GetCreditBalance.
type GetCreditBalanceParams struct {
	// Time Point of time to query balances: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListCreditGrantsParams defines parameters for ListCreditGrants.
type ListCreditGrantsParams struct {
	// Subject Filtering and group by multiple subjects.
	//
	// Usage: `?subject=customer-1&subject=customer-2`
	Subject *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
}

// GetCreditLedgerParams defines parameters for GetCreditLedger.
type GetCreditLedgerParams struct {
	// From Start of time range to query ledger: date-time in RFC 3339 format.
	From time.Time `form:"from" json:"from"`

	// To End of time range to query ledger: date-time in RFC 3339 format. Defaults to now.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering and group by multiple subjects.
	//
	// Usage: `?subject=customer-1&subject=customer-2`
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// CreateCreditGrantJSONRequestBody defines body for CreateCreditGrant for application/json ContentType.
type CreateCreditGrantJSONRequestBody = CreditGrant

// ResetCreditJSONRequestBody defines body for ResetCredit for application/json ContentType.
type ResetCreditJSONRequestBody = CreditReset

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = Feature

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get credit balance
	// (GET /api/v1/credit-balance/{subject})
	GetCreditBalance(w http.ResponseWriter, r *http.Request, subject string, params GetCreditBalanceParams)
	// List credit grants
	// (GET /api/v1/credit-grants)
	ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams)
	// Create credit grant
	// (POST /api/v1/credit-grants)
	CreateCreditGrant(w http.ResponseWriter, r *http.Request)
	// Void credit grant
	// (DELETE /api/v1/credit-grants/{creditGrantId})
	VoidCreditGrant(w http.ResponseWriter, r *http.Request, creditGrantId CreditGrantId)
	// Get credit
	// (GET /api/v1/credit-grants/{creditGrantId})
	GetCreditGrant(w http.ResponseWriter, r *http.Request, creditGrantId CreditGrantId)
	// Get credit ledger
	// (GET /api/v1/credit-ledger/{subject})
	GetCreditLedger(w http.ResponseWriter, r *http.Request, subject string, params GetCreditLedgerParams)
	// Reset credit balance
	// (POST /api/v1/credit-resets)
	ResetCredit(w http.ResponseWriter, r *http.Request)
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request)
	// Create feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Delete feature
	// (DELETE /api/v1/features/{featureId})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId)
	// Get feature
	// (GET /api/v1/features/{featureId})
	GetFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get credit balance
// (GET /api/v1/credit-balance/{subject})
func (_ Unimplemented) GetCreditBalance(w http.ResponseWriter, r *http.Request, subject string, params GetCreditBalanceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List credit grants
// (GET /api/v1/credit-grants)
func (_ Unimplemented) ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create credit grant
// (POST /api/v1/credit-grants)
func (_ Unimplemented) CreateCreditGrant(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void credit grant
// (DELETE /api/v1/credit-grants/{creditGrantId})
func (_ Unimplemented) VoidCreditGrant(w http.ResponseWriter, r *http.Request, creditGrantId CreditGrantId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit
// (GET /api/v1/credit-grants/{creditGrantId})
func (_ Unimplemented) GetCreditGrant(w http.ResponseWriter, r *http.Request, creditGrantId CreditGrantId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit ledger
// (GET /api/v1/credit-ledger/{subject})
func (_ Unimplemented) GetCreditLedger(w http.ResponseWriter, r *http.Request, subject string, params GetCreditLedgerParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset credit balance
// (POST /api/v1/credit-resets)
func (_ Unimplemented) ResetCredit(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete feature
// (DELETE /api/v1/features/{featureId})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureId})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCreditBalance operation middleware
func (siw *ServerInterfaceWrapper) GetCreditBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subject" -------------
	var subject string

	err = runtime.BindStyledParameterWithOptions("simple", "subject", chi.URLParam(r, "subject"), &subject, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditBalanceParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditBalance(w, r, subject, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCreditGrants operation middleware
func (siw *ServerInterfaceWrapper) ListCreditGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCreditGrantsParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCreditGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCreditGrant(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditGrantId" -------------
	var creditGrantId CreditGrantId

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantId", chi.URLParam(r, "creditGrantId"), &creditGrantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidCreditGrant(w, r, creditGrantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) GetCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditGrantId" -------------
	var creditGrantId CreditGrantId

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantId", chi.URLParam(r, "creditGrantId"), &creditGrantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditGrant(w, r, creditGrantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditLedger operation middleware
func (siw *ServerInterfaceWrapper) GetCreditLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subject" -------------
	var subject string

	err = runtime.BindStyledParameterWithOptions("simple", "subject", chi.URLParam(r, "subject"), &subject, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditLedgerParams

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditLedger(w, r, subject, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetCredit operation middleware
func (siw *ServerInterfaceWrapper) ResetCredit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetCredit(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId FeatureId

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId FeatureId

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/credit-balance/{subject}", wrapper.GetCreditBalance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/credit-grants", wrapper.ListCreditGrants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/credit-grants", wrapper.CreateCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/credit-grants/{creditGrantId}", wrapper.VoidCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/credit-grants/{creditGrantId}", wrapper.GetCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/credit-ledger/{subject}", wrapper.GetCreditLedger)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/credit-resets", wrapper.ResetCredit)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureId}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureId}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PbttLwX8HwPTNNWupqOxfPnHlGdWxHTWynviRtY78pREISGgpgANC24vGH51+c",
	"33d+yTu4kARJUKJsOcmb9pnOc2IRBBa7i71hd3njBXQWU4KI4N72jRdDBmdIIKb+ChgKsdhnkIhhKH8I",
	"EQ8YjgWmxNv2BiAh+FOCAA4REXiMEQNjygAE+kUwkW+2Pd/DcngMxdTzPQJnyNsuze17DH1KMEOhty1Y",
	"gnyPB1M0g3JRdA1ncSTf6fYGx39sHL7YfXV68nbz+Hhv79cnz/e39gZvPd8T81iO4YJhMvFub31vjKBI",
	"GFoI+tnr4Ysq/ObNGtDzeR8EbIX/YXjETqJk0hzrYoqAerUG6uK0iyD/F0Njb9v7P52cNzr6Ke9kE0hI",
	"PyWIzfdwJBDbZzSJf57L19Xa6pGFssIgezEYhljuDEZvGI0RExgp3ivhxS9h4QRL5AI9r9r/RE4ORnMO",
	"rrCYAnQNAwFmUATT9jk5J2ccTtA2+PN/CqC8l8tc/BuTOBHnSbfbf1J8PKMhii7+PYlFa/PPc+L5OVlv",
	"PPXQ2/bU05yUajIJsfmbjv5CgfqBi7liiBCh+Cj71cLiSaJ/rRBdP8ZkAiAJs62CWRIJLPHA9Yu8uFXz",
	"67+DhAs6Q6zV03us/N4v7e29l7/i+fkffe/Cd9LXzFigLBZo5ial+QEyBucWIzE6q+78REAmQAgFagk8",
	"QwATcLy3AzY2Np5Lss+gaJ+TIQmihONL1Fb7cHKgnN19Pvvd/kar22t1e6fd7rb67w/P9/Tsklzp4s7j",
	"qtax2L8I/nAMCBWAxyiQRzUEEHBMJhECcDJhaAIFAlc4isAIAYZEwggKFTsjGExTsiqiq91fYRLSq/Y5",
	"+dM8+hNgDiBgiCN2iSzWuIRRsgAdE8dRtMivWdtsV9J8RVqe0ioqdkm4BjoKuoyK/TtT8Z3C7gn+jJYT",
	"0s8pmcjztoyeUjxLec2QmAM6Vn/nXBEjhmkN4RWp6hFylQPdVIhb+yzt/RTP0B+UOPZ/OkWapyTDSeDl",
	"8ulGFEU/U4IA5CBEYyx3jYl6NhwcDoCcF8iJwQso4AhyBB5NhYi3O52rq6s2hgS2KZt05EQtORF/LNmh",
	"gnM54dnpjlpQrZfiOuEoXIajbHM2nkI0hkkkGeTsdMeWgd5ghhgOYOcQXX34nbKPTr4xhJJq8RWar2Ij",
	"mTdrtHVp3maGRiancegA9lZOwmNKuNawP8PwGH1KEBdvGB1FaHZsnirTjxKBiNJEMI4jHEC5oU6sR/70",
	"F5e7u7G1YYgExFIdThEMEQM7eobW6TxGYAo5SAi6jlEgUGgY6bww9fUsOvckaQQUCfe2N7td3xNYqJ39",
	"DENggM13ljCybQBqyZ+2RzBsMTPqtulhMJvXCCoSz1711vcOqdijCQnXiy5llyk+H8vJCxjYzDFwSAXY",
	"MwPq9k+oaOlJ1rH7fEW996EEfYaIQGvGgLGnFQ5wvoiFia1ur4iJYWHYInzYE64LK8PinGcEJmJKGf68",
	"bszMMJc6BlAGMLmEEQ6BoB8RKTCJhRobkgV4Sexh60DKWWnCs+yorxcflghBjFFWYJGujYds3K4ZV4+L",
	"dOiaMFGC8DabVQndHeX2/gwjSAKHltWPwUg/l+o1VxRKu8UFJ8mcHO5wGMwT7QyZ+bjRkKkxt2iPZoIU",
	"0oql53vKu+duS0E/A4q+SDKttnfsnTSCYiePEiyAhNe5Taf5ohKGCRIKjhS9Y8raRcdniQq11fB7y+mB",
	"M5oQ+Q+Dk4uy8+d7160JbZkfdeyjne7IeijFFWVCh2LEVBrqWEyTUTugsw6NEVHaAtP83x1MBGIERh09",
	"q4JSo233OsZMHa43yrx0mOTZiNQCVRxXCN842C5Qu3ViG1VmVINBhD8i0OuDGSViyktY7/Ut51mgCWLK",
	"4U/0RE0XSsfrtdRCZh2SzCS9Xh6dHXu+92Lwu+d773Z3X3m+d3B0ePrS873fdwfHFtkMxZ1kK6P1RQrn",
	"uulYYrcwX0cToBmXVbjgodhNndIqsfaNKGDaSJfnEJOAIekDWHLOGPmBHcqoMJ45Z06G0M/UMVd8C3Yg",
	"kZ5BTDkW+BJJJUqkgyb/TZLZCJUPf0+pEI08PUCyIRqPUSBfGtSxfDpAebdlgXKP4IKcJqWd2n0UHY29",
	"7fdNRGaF6rcXvnfFsEBHJJprJyJdAPHB8tMs4UzdPUswrGmjC0K1Eg7jQ6WGograiikUOTQqDMI5DTCU",
	"uldqPR/gMYBkXgZ0lXCs72EHSMcIhpRE87og8iI0LVydIRjm9HFAM0MChlCsFjm1LCn5Y4zewLm0XiW2",
	"vRh/2Dxig4/T15dzPMX0ebzVmz7HeI/87IxhxgxThsW84Dv3fAfR0pFFdAAjD5RdMsWTKWL5SCkkUpth",
	"jBmX2HuTPlSBruw0hyjAMxiZk8zb4J2cMKJX0pnSvwFMQmVdkkm6kpZ3Uua0z8keZcDgxpdTW/D25Goz",
	"KmUWmyApVqaQlMb02+fk3RSpKIeEmyHA0SViMMrMn0uIIziKUBYB4nCWWSQ6msHnXKAZ4CiSQs9iaIUg",
	"+acCnYtsbRUnAwHk0rpTS9v6mgM+laBkq2UgR+gSRb61QhBRLieWEllw+7DbUZWMEEMdz5ELK5JeUbMw",
	"B1N4mUY4AhilS2LEVQCrJEV4YeNqqYQjCy51sq8gl9Or05xCUBDWvjeD13gmVXt/a8v3Zpjov3ouY4LR",
	"KKKXiK1gcB6nr6xiYZoNWOpoJQsz/aExkKdyeNlSUDPn1qma0jJS7fsrW7sV9E0z40Lr/Ae1KCxfaRUF",
	"qCG79W9KJsSozvU6nRbskToB7jISqnLyoh5bD231F3nXbY6B9DiAgJIxnhjL0mVyzeD1oMbqOtDnz7K8",
	"0mn1RBVTakXeTjfh5PH0ZqIpk2YY+SJ4PzU7rbJYhnkJgMRZwtH2OWmBP493DwbDw+Hh/ofBwdHZ4emf",
	"oAXS+QBDM4iJugBU2G6rV46Oh/vDw8Fr9xstrUq1UhknkdFL+QyWb1Re3PO90uQS2bkUKz9s5DlVUfSg",
	"xKgnghHT89ig/uxksL8rsTcseyajuS3NzZVGQrBIZYRldOrb9wJa1cRFzOmfmuPrQfH0GoUTxHaJYPPa",
	"YFSkxgAkB93dKZO8OG/klIHhGJjA4ChCjXy0sfPqWHs+gKsbZH19qswli6DSyjAG5+J17+fe3MOJqGJ/",
	"Xb6EAtZJNYWr8uK2RbZW5AhaSzqU3Xt/JcI111jWSaq3yYwlplZrprvsA/oFhEAqMlP5tX88UML97dHw",
	"hed7x7snu/JP9fMHh3BLxzcQbuVVH2p3x4gjUSvcmHy63ApaGgTSR4aa+ZSfpLcJhgIEkBAqpNwzCmSc",
	"qPSyb0TEKJjXK1ua+ktldN03JF/yfGyyNTtvmlvWz4u7l+mVlzNqM4YRR+Ugyk5Ek1C9yMGJCY9qN/qX",
	"k6NDcKLvqgrxnTQ2VEhNa4mEjajEHf2ICPe2vV5/w5WwJnnI2wp63TEMUasXPEetzfBJ0HrWf7rVCrb6",
	"wcaTpxu9cCOQSKYJCxQlELvEAWqpxAXf4zEKLhHjegu9dtciSIWWSgMV+L63rf5rd7u9P3IIY0ZnsQk/",
	"2cdycShM86YjqilRCmI4jygM2wty+moQ5wqLSUjMxaZwmp0mHUKb/ebgyZdMohY4SLgAMNR6jqrcqH53",
	"80maG2XZlPalqbosLUjgylMVGXmNyEQyb8/3SBKpmFTt2ZVQ2fkxhSyoVHhop0IP0wEbtRm9AQ4EbduS",
	"K2F4dThcEq20vqJkgYJN2bcIS1V+Ge5esr6i+LXyC66mOJgCSAx3TWEcI4KK7FU+KzZ+WgyNEUM6MrAM",
	"OvuMORO19MOUz2xBwguCREOdoVI6o7wIsj7BywCqE/cv1F+jlF2M4Ddg6SWNSkxRWXgWMxomAWLgUaa1",
	"QumSafI8bi/QE0sgrjF+8QxxAWexBOPKxHYBDYKEKdLkZHWd142NjeftWo1ekmxOrb7iCXFLmiLOU3mj",
	"EcpQpFxVcyFPGZ5goiPk+S6LezCyt5nm1cemyKGZ2ZtyyRJNrA+1VphNFXEgOVy9yDs8/Nia0M5lv6N+",
	"UJCabIYVFfAgu3FSdw/pH5QBc5ABHctDq/AJQcqAxauFbbDz5qz1kiaM++BUKRIfDN4MwQ6MIu4DJAKn",
	"V82CKb5EoTMTVdmQFmhmrA+w0AF1Y27q+L1KjldXA5TpZNWSiWU2X2PVjSiNECT3NDLTkop1X4dlufo6",
	"RZ7fo6bgKNYv6UBOnkqtSwJ4G5xxNE4igMd5sQXgAY0VEUaMqrxHdVN0JTViSiHBYPCxnPNQLh9wGRVq",
	"BXcVyGkGQHYPajNE8SZU3cKESIe2eMoMo7mTGYyx80FQASOXp6EzVF0A2SnBNfQeDM0ZWCpQjI7McdDM",
	"gE9P+vpN+FJGVOP7iBSi+91FuPF5n9uI0n7Wj7CVapjai3iQEmQQXcq2k7Lm0RnBUtfAKJqDMz3va3SN",
	"AzphMJ7iQD04oUyoq9jMhGOPS5Jo/8nWH0+3tgZ77wavXu72+oe/d3d+fb73UspmKOT+vG3v/77vtp4P",
	"ft55sbu3//KXVweHb349Pjl9++633/+4uOk/uf2X48jc1O9sBq9Tjf9ko2wA2KvC1udu6/nFT4/+Z/tD",
	"9sfjHx3LXTjO7JBMEBcovIsbOiAAm9eNFaFkCk2lpcpL1eakSnkseVQoXXIV33QFZzT8es5ovnOdZVpJ",
	"5tYFHdoKqYSUUrwskh276buVpWyeSnODkbGZlujNkqDVb1049M+B3I3r9OptKqOoEDoznqAqAOFgSq+k",
	"YaRq8JQKyktktKlW4pT0sSn8OjvwKqw41PnPWnHJt+U8pwW6+Fltk8Vr/2oXKprkD+of0ndREqp8LpVX",
	"bo7GXI9P1ZZVcLPtHQwPz053q9Qt7GUxjRWWB9b4smFSxb/1d6ofstLPqq4FZwZbSx0KC503tYGT9OIy",
	"o2Yzf6FAlzoLLZ+mQrE6q+0QzlCoImJvoKr7jBni8sRzCSS6ltZXmihm18ZxMGZ0ZjmbUj61wSs052Am",
	"nbtRlncmeTeghGMugDJ1YRRPIUlUgZB6mpAQMR5QhkAwhXJFaTC67b0FvFg5gTi8YwFwQ722PJC7UH/7",
	"YJrMIGnJaZRyrQVJ+8v3ReIX0J6Vo1/eu4PTyoymy5sy9ipqzx+4DpUZeTFvn5NTe5B5mTJwcnbgg8Hb",
	"fR8cDA99haKDwW/AEi1cy2Bt+QFdVqb2oQVxYC5bIeOpj5olvkoP9exw+OvZ7oedo7PDU3tavwi2hig9",
	"E+kSbSCnqLybIyBFoYQRTwhl1XtDS6pWyHBVKMZcoZyxkKKva91taWxLucIqS/wLdWh5W+vE+xnL8cdJ",
	"R0+nAK4oAPdVuo3jPHfEcfRNnFgr0B2TnmHT2vO9wdt9z5faS/7/wW/FGLJ+c9Edno2MQQG568bLrwli",
	"82PEVZ6pM6FGPdOFC9ouUcWfbdfFyPsbl3FQMkTLVl6dwaiYXBcvaC7aJWF9HbJhNAElStxXfdJy15kM",
	"dVeBgi5dYLFZktrgean3N4+RRnVCFqvQK1eJUJohstachbUUn69J0inK1hrxGWocqpzRqzQI3+wsfcsM",
	"U2b4Bjbnonz5hvurMaytzh9N7sNtS95cCy644FhqzBvk3jjrrPLcKQvx6+ZoTan1tdqw+V3vrriUvZkV",
	"tHl2ONaqvd5QJmCkHDDXqZOmsLR9gSpIiLRfW3aIo4heofAgDYFylfhqm8AXvmdSsgaiHr26yifM4jtW",
	"1U8dnVX0ZaHrUBtH0Tv26OyD3tqH4YC82HgTv3vXH/TfsWez53+NP6OX0f5vz65nO79d7bfnW582T1qD",
	"d5/2kief/hrDvc/dz79+2tz93H92zMn87dUv4/FvW5+uDy6pw9OuIummJrCvKoLS9hTKByl24dCdr7Lq",
	"BzNzsTFOGf31nVFmmAz1w15JH/medp/MY1OLZRHyrkdmqTuXccJNg9ueQnHY3STDUoBwWO6VdS9vNRez",
	"zQsu3CdUJXWp6Anmmleydi7Ss5K0wrR4YB+K5VcN6NXes0qpZErXV0qaGQDzGnihKvE50BOCR8d7O+Dp",
	"s+7Tx+1zMsjmA/kJzes6zZWzKb7XLswMzpWDyhAvJ3JYVf8jGs4t91MlP2VCfX3tQkqWslm9KrlLIQ90",
	"HUeQaL+suFnJOHnqgNHuBoIi4yzcYfXMEC7c90YDcHY8BFkmiY4C4FLOTgpjQ9gk2gyWtiMawKjzy8FR",
	"FAj+6u2zVlf+X6+a6lM9mYZMrmP28vT0DdADQEBDBCaIIKZuL036vc5TULfuWWSpMXYVZ2TwYSI2+p5V",
	"PLb1/LlVPLZpXahZ5WOGsar4hoBPKROVQBhPZjPI5iW4FNcX0etk1WUpHqqnTkCJgJhwABXVXbSuX3bh",
	"YVhGTlcpToqjjNR+eoSaWWIn6q1UPK3VErO66q2U/JHa5SrGVtfGKeE68iZ/FmVPSbOn0Nnstm/TL6vz",
	"wsiFLo7vhZjHEZwf6k5RO0a9gUN957XccvuI5tV0KauweJqMeEx1eXCvv7G59USfYIZjlK6mHgYJ/5AL",
	"g6oMrW6/akf0Gxk2S50dF/7uakUtz5C0CWCvUqZFwxzHdZk/H3UHssamz/Jqcr2QxdFu3lju/1aYpwSm",
	"zUdL8VaSP3LbLltnUTs/K2hpmioCjj8jO35qYmi+3TekECbNBjSIlL6zu/StTbZJzKIgYVjMVTa4PnYq",
	"3XOH0o8YDRI5640rsVzloF2hEYBxDAI1Om1Fl/1lmtF9+MD1RUe+VxjjV0hF1tRklrObLjlCkCG2lx4w",
	"GsNPymF3geJ0htM2fcpAUpPly0+FiLPF77ysxEDjpZZv8a8rUV3ItTOACZAUbem8BZBnSi6B4lZ5ZTrT",
	"5gUNHPbUCxokM0REGo5PWGTe5tudnI3amHZCOYEyJ8fU5TMjcmBd8yuEEV2opxteat4kkzQZ0lxk5S9K",
	"9CofmoM5TXTjlwniwtz++zq4aOJdak59yTWDRM7PkEYPb5+TVqt1Tn48ihEz915Zd4T//ud/wSMF3WNA",
	"qN636sWg7xizDgyYWJAp8rd/VLdREQ6Q6Uxm2H0Qw2CKQF+li+QINL0qoXqqulWaV3nn9XBn9/Bkt9Vv",
	"d9tTMYssk9Er4MPzvUI+Srsrh0qywBh7295Gu9ve0PlGU0XdDoxx57Jn0qpaJimsc2Nsk1sV43TVN+0j",
	"kdbUWO2upL1aarSj7+Roilol2feRKDYq8wudwSt5WCd5RY+madpwTNXzLOxwuZbWln6lfpBiogOqpi6r",
	"CNb24ka04IVubKIyCIjqt1vXjVZbDOvuKnxRatXZ73YXdM5LO+Y1a15XJKyjhV2xBx3XmUxtyaeb3V7d",
	"7Bm4nUXdENUcm8vnqOu0qWA1PWeWw1HXg1D3bVX+mfOgSIJAHWzdMQ1OHu1ex4hhJVmjx96FnKJ0NPN2",
	"eM7z+BpzUWzU4jp4cpRVwc6rB8+16XxIx9FM/N7ctGqnPkdb6AqTKXTQcQkjmkG6y4lb37t2TWy6djar",
	"0r8Jm/leTLm7ehUKxJ29+oocpUfa1NECF3HxMw3naxYrhv5Vep9Oi22KpGTVAe92RQPcVvi196XAtB5n",
	"te7fMVNq5igQ5j7Cr3NT+KrHrebbCAmHA/aW4rDEvmA0B8MXbfAGMoFV0jZlqm/JXBeypN2m8nLqS4pD",
	"lVX0Vv0jG3FFyQ86lupsQPoDz2wiSOYzmqbVF0+OnLN4blYTxcUvnDik8GZtVbpGh9ndd6t5FQusynv+",
	"cnN3Dj6i+UKz9oEI2v2yYurvY5ndTSjp7iWr+Uqm48kdXCXdz2JlTylf8Gv4SfrrKqmfxCCZoDJo28s+",
	"2rH4gytNgL5XVojrMyP32dAKzh/9Bl2/FYx1u7dMA5P97+sXRunRvoMQUh1O9LfVnJa8ajjC7RYoGYIF",
	"BZ8RozXCSIXKTJO3OYC6A/HEaq66qMdfUYYpGHZSSftw3oFurlLjHVS6wthd2r+Cj1ALbPEcfEPuwTd3",
	"hI51c6X7BFd0qHhxVKVYX6G5HxMALR1QF2vRTTHuGGWRCk7qnyaDT6lXVVWHpm5jnEKueF8krE7jRHiG",
	"hfvzRaoSuFgXnKU46L8W9Me9t9ax88nvVPD5/2EzIlXXu+Je+xubW/lMNBH2Zp/3+mEvfPa01X0Ow9bm",
	"KAhacOtp2NoabWxt9Tefb6Cw/9Cb7ddttmkmfrHSeIVIoDkCUtmFaJRMJphMvvuAYEl0WcLRSKb6EKBG",
	"NM9bDlEGRqrU1kZmFNErXQ+2oA2QSzrq6TP52MwosNqw/LSazt3NWrXUzNdSe/tpsej53tufff9ypqmY",
	"aSxe8rplx/nIrqTN3bXhclDKx7QPjpWbqQouCVBLy0lrhnEzed0ss2InqfJJre38p0/tMrPYEWQ8SYIA",
	"ca4jq6kE+p5F7dBOO3DJWMvgtD+pVW9ypqPq7Mr081vel/Dm8wYzjZVtBv+3rR7HORrXcFVWaKHjuiXL",
	"ewc9hA+ckcktpLJuUV/nYmwBdObRN3ghttVkjsWfrnzAa7Vxxk6reLwpz3dusu90LLxIe6F+t9rT1d9/",
	"6KE5l6/m9OafDWl2l5WyjQb8O44UGgqsQO4Fl1jLqbiPxIOQsPslZcnfIHh8t+OfEnOR9aHHtJ2Wx4F+",
	"f43xnK/TlqlBAepaGjet1GFgFRMrJdI3bWDNUm5JWdSwT7059eNgSUrtj+Y7YY4EZz+tsIW5NWH1/7X6",
	"iI1xhORk58ToUmh/XcVlu6V9WR7CcjO0d9ttpgvnuq22r94X7UsdQP++RNj5xyxtduL/+5//BeY4zcxp",
	"qRz7iibq3Kj/TXt5LjRFl8qGc5JZq/rYqIwv1VA5Sib1Jmt6uFezdgqANzRaNcBFk/V+tsU3zAyGGLXM",
	"sMBMdZDPZag+EOG6/wjQNQpQzfO2Rf4NWtN3l1j6ArbWov7VKkIaZw3SK8yshq2Fnf2Hu15uMtTuIbXS",
	"K6d4hv6gpPlrpTKEld4yTd0bv5WNv7ew+Nt2iltBithN+VS/cXQtOgG/rHEizYof1Jf4fPMHIqGffglZ",
	"4deX+PQVrs6Ja1t+6cee+jFF9Yeeb5HHV7d6fq9fmapXnEqjpr98qn63MlXfNdVGcap+YSp9E+dvOhL/",
	"KmJZde3VXWm/47sZS/zeTbobHloSMklHmWS6rFlmTQDlJJ30q5gurjhMSaTk/LW4CVXTaEWKnzWx2gNG",
	"KzJQl7CLLrgucs1d7IFSbXobnE4xB4iEsaoxxRzEySjCQTQH6DqmXLk/gmbv8RpbQteT11gUd+j47Egd",
	"z7+d0SwPe/GXP/5uhssXNkH+Ub//qN8vpn5N0xAlayqNLd5fSJZ39/V4fyHZu6y+TXOLshbXbzvFcpqp",
	"VCOEG0SSdEGtq71GbVaGtRu+TObmubmFqfMU3axQRKqA/lZ79ZTd/paVsSv/+IIJu43uPOwWpivYEkVa",
	"/BOWbRCJU6gr4M11jBanuOiPsbibyrpuTGzqrnpvsmqTWrdn3NjpLDCi+xqm0F9npduY9SnnJWDu/G0K",
	"ykttnBrrg475khHUtwt3vIE8J8NsGl6jIqzQdX1tZz5NSXPc6bAodsunBDCKXFnd9vOyKM2beqvvq+Vj",
	"1W4Wz1Y8IbrU3ppwabi6umJtU/NFm0ir2QzWbQhqhMRtQUwUOww6vxG8fNPNP2C72laqfepKTemqQmE4",
	"BoQCHFqsKA2KrCm1r9Y1C6adqfNjErbvlgP8prCRwnz/6Ovl+tpii6Va2xJ2S2NVTe3eLFxTY+la8auH",
	"NxPzCP9dw03foCbLrDJHuCnD7j3SZM7JWcwRE9ySICDNVaYMJLFWX7l6Mt/9TYVESBEnPwiArjEX+Zd/",
	"R3mebuUVNZQXxsZZrxW9YJh31osZvVRdVcYYRaGT1fQWTgodCu6SfLNuNivVEycKzPXbgusGO20OoeH9",
	"RxY3O6WaCUHeJ8NxTB0yOOsLMgyP2Cs0X1tmS8p4mYW5MBs7PzyrXTQUgW+Y3ZIyWDG/5XuoXf/2s2wW",
	"8qd/Z3NgH4nGHLePxMOx2/rc6Exi1kvI7zx9XLKNRdgamVYK5GZBW3co124IbaK46nMKruCn+s5Duflt",
	"r/+03W13273tZ8+ePXO0M1DVugt6Duvn6vvUejeO1j3qUo0DhiJljGQFmphMzFfsTWm4aUJsPiR8Tt6/",
	"RpARMKMMXTyq7XfcmSAh52qpuxAUdtQsHXqJ2CVGV4/VoTGRW1Md6OwwVAVTfxGGTHQLYxUEllCaLPA7",
	"w2eOnxNAc+vZEECTZF24y2wM1owSJPBn1Akhn44oZKEJ3LRCdIkiKWZakwSHqACgcYEaAmj5NHdEVjpD",
	"AYjsxDQnZIjvA4WZoABETeXH7cXt/wsAAP//pJVsv4K1AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
