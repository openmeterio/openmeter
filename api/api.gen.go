// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	PortalTokenAuthScopes = "PortalTokenAuth.Scopes"
)

// Defines values for AppCapabilityType.
const (
	AppCapabilityTypeCalculateTax     AppCapabilityType = "calculateTax"
	AppCapabilityTypeCollectPayments  AppCapabilityType = "collectPayments"
	AppCapabilityTypeInvoiceCustomers AppCapabilityType = "invoiceCustomers"
	AppCapabilityTypeReportEvents     AppCapabilityType = "reportEvents"
	AppCapabilityTypeReportUsage      AppCapabilityType = "reportUsage"
)

// Defines values for AppStatus.
const (
	AppStatusReady        AppStatus = "ready"
	AppStatusUnauthorized AppStatus = "unauthorized"
)

// Defines values for AppType.
const (
	AppTypeSandbox AppType = "sandbox"
	AppTypeStripe  AppType = "stripe"
)

// Defines values for BillingCustomerOverrideOrderBy.
const (
	BillingCustomerOverrideOrderById BillingCustomerOverrideOrderBy = "id"
)

// Defines values for BillingDocumentRefType.
const (
	BillingDocumentRefTypeCreditNodeOriginalInvoice BillingDocumentRefType = "credit_node_original_invoice"
)

// Defines values for BillingFlatFeeLineType.
const (
	BillingFlatFeeLineTypeFlatFee BillingFlatFeeLineType = "flat_fee"
)

// Defines values for BillingFlatFeeLineCreateItemType.
const (
	BillingFlatFeeLineCreateItemTypeFlatFee BillingFlatFeeLineCreateItemType = "flat_fee"
)

// Defines values for BillingFlatFeeLineCreateOrUpdateType.
const (
	BillingFlatFeeLineCreateOrUpdateTypeFlatFee BillingFlatFeeLineCreateOrUpdateType = "flat_fee"
)

// Defines values for BillingInvoiceAction.
const (
	BillingInvoiceActionAdvance BillingInvoiceAction = "advance"
	BillingInvoiceActionApprove BillingInvoiceAction = "approve"
	BillingInvoiceActionDelete  BillingInvoiceAction = "delete"
	BillingInvoiceActionRetry   BillingInvoiceAction = "retry"
	BillingInvoiceActionVoid    BillingInvoiceAction = "void"
)

// Defines values for BillingInvoiceExpand.
const (
	BillingInvoiceExpandAll          BillingInvoiceExpand = "*"
	BillingInvoiceExpandLines        BillingInvoiceExpand = "lines"
	BillingInvoiceExpandPreceding    BillingInvoiceExpand = "preceding"
	BillingInvoiceExpandWorkflow     BillingInvoiceExpand = "workflow"
	BillingInvoiceExpandWorkflowApps BillingInvoiceExpand = "workflow.apps"
)

// Defines values for BillingInvoiceExtendedStatus.
const (
	BillingInvoiceExtendedStatusDraft                     BillingInvoiceExtendedStatus = "draft"
	BillingInvoiceExtendedStatusDraftCreated              BillingInvoiceExtendedStatus = "draft_created"
	BillingInvoiceExtendedStatusDraftInvalid              BillingInvoiceExtendedStatus = "draft_invalid"
	BillingInvoiceExtendedStatusDraftManualApprovalNeeded BillingInvoiceExtendedStatus = "draft_manual_approval_needed"
	BillingInvoiceExtendedStatusDraftReadyToIssue         BillingInvoiceExtendedStatus = "draft_ready_to_issue"
	BillingInvoiceExtendedStatusDraftSyncFailed           BillingInvoiceExtendedStatus = "draft_sync_failed"
	BillingInvoiceExtendedStatusDraftSyncing              BillingInvoiceExtendedStatus = "draft_syncing"
	BillingInvoiceExtendedStatusDraftValidating           BillingInvoiceExtendedStatus = "draft_validating"
	BillingInvoiceExtendedStatusDraftWaitingAutoApproval  BillingInvoiceExtendedStatus = "draft_waiting_auto_approval"
	BillingInvoiceExtendedStatusGathering                 BillingInvoiceExtendedStatus = "gathering"
	BillingInvoiceExtendedStatusIssued                    BillingInvoiceExtendedStatus = "issued"
	BillingInvoiceExtendedStatusIssuing                   BillingInvoiceExtendedStatus = "issuing"
	BillingInvoiceExtendedStatusIssuingSyncFailed         BillingInvoiceExtendedStatus = "issuing_sync_failed"
	BillingInvoiceExtendedStatusIssuingSyncing            BillingInvoiceExtendedStatus = "issuing_syncing"
)

// Defines values for BillingInvoiceOrderBy.
const (
	BillingInvoiceOrderByCreatedAt    BillingInvoiceOrderBy = "createdAt"
	BillingInvoiceOrderByCustomerName BillingInvoiceOrderBy = "customer.name"
	BillingInvoiceOrderByIssuedAt     BillingInvoiceOrderBy = "issuedAt"
	BillingInvoiceOrderByStatus       BillingInvoiceOrderBy = "status"
	BillingInvoiceOrderByUpdatedAt    BillingInvoiceOrderBy = "updatedAt"
)

// Defines values for BillingInvoiceStatus.
const (
	BillingInvoiceStatusDraft     BillingInvoiceStatus = "draft"
	BillingInvoiceStatusGathering BillingInvoiceStatus = "gathering"
	BillingInvoiceStatusIssued    BillingInvoiceStatus = "issued"
	BillingInvoiceStatusIssuing   BillingInvoiceStatus = "issuing"
)

// Defines values for BillingInvoiceType.
const (
	BillingInvoiceTypeCreditNote BillingInvoiceType = "credit_note"
	BillingInvoiceTypeStandard   BillingInvoiceType = "standard"
)

// Defines values for BillingLineStatus.
const (
	BillingLineStatusDeleted BillingLineStatus = "deleted"
	BillingLineStatusSplit   BillingLineStatus = "split"
	BillingLineStatusValid   BillingLineStatus = "valid"
)

// Defines values for BillingPaymentTermDueDateType.
const (
	BillingPaymentTermDueDateTypeDueDate BillingPaymentTermDueDateType = "due_date"
)

// Defines values for BillingPaymentTermInstantType.
const (
	BillingPaymentTermInstantTypeInstant BillingPaymentTermInstantType = "instant"
)

// Defines values for BillingProfileExpand.
const (
	BillingProfileExpandAll  BillingProfileExpand = "*"
	BillingProfileExpandApps BillingProfileExpand = "apps"
)

// Defines values for BillingProfileOrderBy.
const (
	BillingProfileOrderByCreatedAt BillingProfileOrderBy = "createdAt"
	BillingProfileOrderByDefault   BillingProfileOrderBy = "default"
	BillingProfileOrderByName      BillingProfileOrderBy = "name"
	BillingProfileOrderByUpdatedAt BillingProfileOrderBy = "updatedAt"
)

// Defines values for BillingTaxBehavior.
const (
	BillingTaxBehaviorExclusive BillingTaxBehavior = "exclusive"
	BillingTaxBehaviorInclusive BillingTaxBehavior = "inclusive"
)

// Defines values for BillingUsageBasedLineType.
const (
	BillingUsageBasedLineTypeUsageBased BillingUsageBasedLineType = "usage_based"
)

// Defines values for BillingUsageBasedLineCreateItemType.
const (
	BillingUsageBasedLineCreateItemTypeUsageBased BillingUsageBasedLineCreateItemType = "usage_based"
)

// Defines values for BillingUsageBasedLineCreateOrUpdateType.
const (
	BillingUsageBasedLineCreateOrUpdateTypeUsageBased BillingUsageBasedLineCreateOrUpdateType = "usage_based"
)

// Defines values for BillingValidationIssueSeverity.
const (
	BillingValidationIssueSeverityCritical BillingValidationIssueSeverity = "critical"
	BillingValidationIssueSeverityWarning  BillingValidationIssueSeverity = "warning"
)

// Defines values for BillingVoidInvoiceLineAction.
const (
	BillingVoidInvoiceLineActionDiscard          BillingVoidInvoiceLineAction = "discard"
	BillingVoidInvoiceLineActionPending          BillingVoidInvoiceLineAction = "pending"
	BillingVoidInvoiceLineActionPendingNextCycle BillingVoidInvoiceLineAction = "pending_next_cycle"
)

// Defines values for BillingWorkflowCollectionAlignment.
const (
	BillingWorkflowCollectionAlignmentSubscription BillingWorkflowCollectionAlignment = "subscription"
)

// Defines values for BillingWorkflowCollectionMethod.
const (
	BillingWorkflowCollectionMethodChargeAutomatically BillingWorkflowCollectionMethod = "charge_automatically"
	BillingWorkflowCollectionMethodSendInvoice         BillingWorkflowCollectionMethod = "send_invoice"
)

// Defines values for CheckoutSessionUIMode.
const (
	CheckoutSessionUIModeEmbedded CheckoutSessionUIMode = "embedded"
	CheckoutSessionUIModeHosted   CheckoutSessionUIMode = "hosted"
)

// Defines values for CustomerOrderBy.
const (
	CustomerOrderByCreatedAt CustomerOrderBy = "createdAt"
	CustomerOrderById        CustomerOrderBy = "id"
	CustomerOrderByName      CustomerOrderBy = "name"
)

// Defines values for DiscountPercentageType.
const (
	DiscountPercentageTypePercentage DiscountPercentageType = "percentage"
)

// Defines values for EntitlementBooleanCreateInputsType.
const (
	EntitlementBooleanCreateInputsTypeBoolean EntitlementBooleanCreateInputsType = "boolean"
)

// Defines values for EntitlementMeteredType.
const (
	EntitlementMeteredTypeMetered EntitlementMeteredType = "metered"
)

// Defines values for EntitlementMeteredCreateInputsType.
const (
	EntitlementMeteredCreateInputsTypeMetered EntitlementMeteredCreateInputsType = "metered"
)

// Defines values for EntitlementOrderBy.
const (
	EntitlementOrderByCreatedAt EntitlementOrderBy = "createdAt"
	EntitlementOrderByUpdatedAt EntitlementOrderBy = "updatedAt"
)

// Defines values for EntitlementStaticType.
const (
	EntitlementStaticTypeStatic EntitlementStaticType = "static"
)

// Defines values for EntitlementStaticCreateInputsType.
const (
	EntitlementStaticCreateInputsTypeStatic EntitlementStaticCreateInputsType = "static"
)

// Defines values for ExpirationDuration.
const (
	ExpirationDurationDAY   ExpirationDuration = "DAY"
	ExpirationDurationHOUR  ExpirationDuration = "HOUR"
	ExpirationDurationMONTH ExpirationDuration = "MONTH"
	ExpirationDurationWEEK  ExpirationDuration = "WEEK"
	ExpirationDurationYEAR  ExpirationDuration = "YEAR"
)

// Defines values for FeatureOrderBy.
const (
	FeatureOrderByCreatedAt FeatureOrderBy = "createdAt"
	FeatureOrderById        FeatureOrderBy = "id"
	FeatureOrderByUpdatedAt FeatureOrderBy = "updatedAt"
)

// Defines values for FlatPriceType.
const (
	FlatPriceTypeFlat FlatPriceType = "flat"
)

// Defines values for FlatPriceWithPaymentTermType.
const (
	FlatPriceWithPaymentTermTypeFlat FlatPriceWithPaymentTermType = "flat"
)

// Defines values for GrantOrderBy.
const (
	GrantOrderByCreatedAt GrantOrderBy = "createdAt"
	GrantOrderById        GrantOrderBy = "id"
	GrantOrderByUpdatedAt GrantOrderBy = "updatedAt"
)

// Defines values for MeasureUsageFromPreset.
const (
	MeasureUsageFromPresetCurrentPeriodStart MeasureUsageFromPreset = "CURRENT_PERIOD_START"
	MeasureUsageFromPresetNow                MeasureUsageFromPreset = "NOW"
)

// Defines values for NotificationChannelOrderBy.
const (
	NotificationChannelOrderByCreatedAt NotificationChannelOrderBy = "createdAt"
	NotificationChannelOrderById        NotificationChannelOrderBy = "id"
	NotificationChannelOrderByType      NotificationChannelOrderBy = "type"
	NotificationChannelOrderByUpdatedAt NotificationChannelOrderBy = "updatedAt"
)

// Defines values for NotificationChannelType.
const (
	NotificationChannelTypeWebhook NotificationChannelType = "WEBHOOK"
)

// Defines values for NotificationChannelWebhookType.
const (
	NotificationChannelWebhookTypeWEBHOOK NotificationChannelWebhookType = "WEBHOOK"
)

// Defines values for NotificationChannelWebhookCreateRequestType.
const (
	NotificationChannelWebhookCreateRequestTypeWEBHOOK NotificationChannelWebhookCreateRequestType = "WEBHOOK"
)

// Defines values for NotificationEventBalanceThresholdPayloadType.
const (
	NotificationEventBalanceThresholdPayloadTypeEntitlementsBalanceThreshold NotificationEventBalanceThresholdPayloadType = "entitlements.balance.threshold"
)

// Defines values for NotificationEventDeliveryStatusState.
const (
	NotificationEventDeliveryStatusStateFailed  NotificationEventDeliveryStatusState = "FAILED"
	NotificationEventDeliveryStatusStatePending NotificationEventDeliveryStatusState = "PENDING"
	NotificationEventDeliveryStatusStateSending NotificationEventDeliveryStatusState = "SENDING"
	NotificationEventDeliveryStatusStateSuccess NotificationEventDeliveryStatusState = "SUCCESS"
)

// Defines values for NotificationEventOrderBy.
const (
	NotificationEventOrderByCreatedAt NotificationEventOrderBy = "createdAt"
	NotificationEventOrderById        NotificationEventOrderBy = "id"
)

// Defines values for NotificationEventType.
const (
	NotificationEventTypeEntitlementsBalanceThreshold NotificationEventType = "entitlements.balance.threshold"
)

// Defines values for NotificationRuleBalanceThresholdType.
const (
	NotificationRuleBalanceThresholdTypeEntitlementsBalanceThreshold NotificationRuleBalanceThresholdType = "entitlements.balance.threshold"
)

// Defines values for NotificationRuleBalanceThresholdCreateRequestType.
const (
	NotificationRuleBalanceThresholdCreateRequestTypeEntitlementsBalanceThreshold NotificationRuleBalanceThresholdCreateRequestType = "entitlements.balance.threshold"
)

// Defines values for NotificationRuleBalanceThresholdValueType.
const (
	NotificationRuleBalanceThresholdValueTypeNumber  NotificationRuleBalanceThresholdValueType = "NUMBER"
	NotificationRuleBalanceThresholdValueTypePercent NotificationRuleBalanceThresholdValueType = "PERCENT"
)

// Defines values for NotificationRuleOrderBy.
const (
	NotificationRuleOrderByCreatedAt NotificationRuleOrderBy = "createdAt"
	NotificationRuleOrderById        NotificationRuleOrderBy = "id"
	NotificationRuleOrderByType      NotificationRuleOrderBy = "type"
	NotificationRuleOrderByUpdatedAt NotificationRuleOrderBy = "updatedAt"
)

// Defines values for OAuth2AuthorizationCodeGrantErrorType.
const (
	OAuth2AuthorizationCodeGrantErrorTypeAccessDenied            OAuth2AuthorizationCodeGrantErrorType = "access_denied"
	OAuth2AuthorizationCodeGrantErrorTypeInvalidRequest          OAuth2AuthorizationCodeGrantErrorType = "invalid_request"
	OAuth2AuthorizationCodeGrantErrorTypeInvalidScope            OAuth2AuthorizationCodeGrantErrorType = "invalid_scope"
	OAuth2AuthorizationCodeGrantErrorTypeServerError             OAuth2AuthorizationCodeGrantErrorType = "server_error"
	OAuth2AuthorizationCodeGrantErrorTypeTemporarilyUnavailable  OAuth2AuthorizationCodeGrantErrorType = "temporarily_unavailable"
	OAuth2AuthorizationCodeGrantErrorTypeUnauthorizedClient      OAuth2AuthorizationCodeGrantErrorType = "unauthorized_client"
	OAuth2AuthorizationCodeGrantErrorTypeUnsupportedResponseType OAuth2AuthorizationCodeGrantErrorType = "unsupported_response_type"
)

// Defines values for PhasesOrderBy.
const (
	PhasesOrderByKey        PhasesOrderBy = "key"
	PhasesOrderByStartAfter PhasesOrderBy = "start_after"
)

// Defines values for PlanOrderBy.
const (
	PlanOrderByCreateAt  PlanOrderBy = "create_at"
	PlanOrderById        PlanOrderBy = "id"
	PlanOrderByKey       PlanOrderBy = "key"
	PlanOrderByUpdatedAt PlanOrderBy = "updated_at"
	PlanOrderByVersion   PlanOrderBy = "version"
)

// Defines values for PlanStatus.
const (
	PlanStatusActive    PlanStatus = "active"
	PlanStatusArchived  PlanStatus = "archived"
	PlanStatusDraft     PlanStatus = "draft"
	PlanStatusScheduled PlanStatus = "scheduled"
)

// Defines values for PricePaymentTerm.
const (
	PricePaymentTermInAdvance PricePaymentTerm = "in_advance"
	PricePaymentTermInArrears PricePaymentTerm = "in_arrears"
)

// Defines values for RateCardBooleanEntitlementType.
const (
	RateCardBooleanEntitlementTypeBoolean RateCardBooleanEntitlementType = "boolean"
)

// Defines values for RateCardFlatFeeType.
const (
	RateCardFlatFeeTypeFlatFee RateCardFlatFeeType = "flat_fee"
)

// Defines values for RateCardFlatFeeUpdateItemType.
const (
	RateCardFlatFeeUpdateItemTypeFlatFee RateCardFlatFeeUpdateItemType = "flat_fee"
)

// Defines values for RateCardMeteredEntitlementType.
const (
	RateCardMeteredEntitlementTypeMetered RateCardMeteredEntitlementType = "metered"
)

// Defines values for RateCardStaticEntitlementType.
const (
	RateCardStaticEntitlementTypeStatic RateCardStaticEntitlementType = "static"
)

// Defines values for RateCardUsageBasedType.
const (
	RateCardUsageBasedTypeUsageBased RateCardUsageBasedType = "usage_based"
)

// Defines values for RateCardUsageBasedUpdateItemType.
const (
	RateCardUsageBasedUpdateItemTypeUsageBased RateCardUsageBasedUpdateItemType = "usage_based"
)

// Defines values for RecurringPeriodInterval.
const (
	RecurringPeriodIntervalDAY   RecurringPeriodInterval = "DAY"
	RecurringPeriodIntervalMONTH RecurringPeriodInterval = "MONTH"
	RecurringPeriodIntervalWEEK  RecurringPeriodInterval = "WEEK"
	RecurringPeriodIntervalYEAR  RecurringPeriodInterval = "YEAR"
)

// Defines values for RemovePhaseShifting.
const (
	RemovePhaseShiftingNext RemovePhaseShifting = "Next"
	RemovePhaseShiftingPrev RemovePhaseShifting = "Prev"
)

// Defines values for SandboxAppType.
const (
	SandboxAppTypeSandbox SandboxAppType = "sandbox"
)

// Defines values for SortOrder.
const (
	SortOrderASC  SortOrder = "ASC"
	SortOrderDESC SortOrder = "DESC"
)

// Defines values for StripeAppType.
const (
	StripeAppTypeStripe StripeAppType = "stripe"
)

// Defines values for StripeCheckoutSessionMode.
const (
	StripeCheckoutSessionModeSetup StripeCheckoutSessionMode = "setup"
)

// Defines values for StripePaymentIntentStatus.
const (
	StripePaymentIntentStatusCanceled              StripePaymentIntentStatus = "canceled"
	StripePaymentIntentStatusProcessing            StripePaymentIntentStatus = "processing"
	StripePaymentIntentStatusRequiresAction        StripePaymentIntentStatus = "requires_action"
	StripePaymentIntentStatusRequiresConfirmation  StripePaymentIntentStatus = "requires_confirmation"
	StripePaymentIntentStatusRequiresPaymentMethod StripePaymentIntentStatus = "requires_payment_method"
	StripePaymentIntentStatusSucceeded             StripePaymentIntentStatus = "succeeded"
)

// Defines values for SubscriptionEditAddOp.
const (
	SubscriptionEditAddOpAdd SubscriptionEditAddOp = "add"
)

// Defines values for SubscriptionEditAddItemOp.
const (
	SubscriptionEditAddItemOpAdd SubscriptionEditAddItemOp = "add"
)

// Defines values for SubscriptionEditAddUpdateItemOp.
const (
	SubscriptionEditAddUpdateItemOpAdd SubscriptionEditAddUpdateItemOp = "add"
)

// Defines values for SubscriptionEditExtendOp.
const (
	SubscriptionEditExtendOpExtend SubscriptionEditExtendOp = "extend"
)

// Defines values for SubscriptionEditRemoveItemOp.
const (
	SubscriptionEditRemoveItemOpRemove SubscriptionEditRemoveItemOp = "remove"
)

// Defines values for SubscriptionEditRemoveUpdateItemOp.
const (
	SubscriptionEditRemoveUpdateItemOpRemove SubscriptionEditRemoveUpdateItemOp = "remove"
)

// Defines values for SubscriptionEditRemoveWithValueOp.
const (
	SubscriptionEditRemoveWithValueOpRemove SubscriptionEditRemoveWithValueOp = "remove"
)

// Defines values for SvixOperationalWebhookRequestType.
const (
	SvixOperationalWebhookRequestTypeEndpointCreated         SvixOperationalWebhookRequestType = "endpoint.created"
	SvixOperationalWebhookRequestTypeEndpointDeleted         SvixOperationalWebhookRequestType = "endpoint.deleted"
	SvixOperationalWebhookRequestTypeEndpointDisabled        SvixOperationalWebhookRequestType = "endpoint.disabled"
	SvixOperationalWebhookRequestTypeEndpointUpdated         SvixOperationalWebhookRequestType = "endpoint.updated"
	SvixOperationalWebhookRequestTypeMessageAttemptExhausted SvixOperationalWebhookRequestType = "message.attempt.exhausted"
	SvixOperationalWebhookRequestTypeMessageAttemptFailing   SvixOperationalWebhookRequestType = "message.attempt.failing"
	SvixOperationalWebhookRequestTypeMessageAttemptRecovered SvixOperationalWebhookRequestType = "message.attempt.recovered"
)

// Defines values for TieredPriceMode.
const (
	TieredPriceModeGraduated TieredPriceMode = "graduated"
	TieredPriceModeVolume    TieredPriceMode = "volume"
)

// Defines values for TieredPriceWithCommitmentsType.
const (
	TieredPriceWithCommitmentsTypeTiered TieredPriceWithCommitmentsType = "tiered"
)

// Defines values for UnitPriceType.
const (
	UnitPriceTypeUnit UnitPriceType = "unit"
)

// Defines values for UnitPriceWithCommitmentsType.
const (
	UnitPriceWithCommitmentsTypeUnit UnitPriceWithCommitmentsType = "unit"
)

// Defines values for GetSubscriptionParamsExpand.
const (
	GetSubscriptionParamsExpandFalse GetSubscriptionParamsExpand = false
	GetSubscriptionParamsExpandTrue  GetSubscriptionParamsExpand = true
)

// Address Address
type Address struct {
	City *string `json:"city,omitempty"`

	// Country [ISO 3166-1](https://www.iso.org/iso-3166-country-codes.html) alpha-2 country code.
	// Custom two-letter country codes are also supported for convenience.
	Country     *CountryCode `json:"country,omitempty"`
	Line1       *string      `json:"line1,omitempty"`
	Line2       *string      `json:"line2,omitempty"`
	PhoneNumber *string      `json:"phoneNumber,omitempty"`
	PostalCode  *string      `json:"postalCode,omitempty"`
	State       *string      `json:"state,omitempty"`
}

// Annotations Set of key-value pairs managed by the system. Cannot be modified by user.
type Annotations map[string]interface{}

// App App.
// One of: stripe
type App struct {
	union json.RawMessage
}

// AppBase Abstract base model for installed apps.
//
// Represent an app installed to the organization.
// This is an actual instance, with its own configuration and credentials.
type AppBase struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Listing The marketplace listing that this installed app is based on.
	Listing MarketplaceListing `json:"listing"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Status Status of the app connection.
	Status AppStatus `json:"status"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// AppCapability App capability.
//
// Capabilities only exist in config so they don't extend the Resource model.
type AppCapability struct {
	// Description The capability description.
	Description string `json:"description"`

	// Key Key
	Key string `json:"key"`

	// Name The capability name.
	Name string `json:"name"`

	// Type The capability type.
	Type AppCapabilityType `json:"type"`
}

// AppCapabilityType App capability type.
type AppCapabilityType string

// AppList A page of results.
type AppList struct {
	// Items The items in the page.
	Items []App `json:"items"`

	// Page The page number.
	Page int `json:"page"`

	// PageSize The number of items in the page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// AppReference App reference
//
// Can be used as a short reference to an app if the full app object is not needed.
type AppReference struct {
	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id string `json:"id"`
}

// AppStatus App installed status.
type AppStatus string

// AppType Type of the app.
type AppType string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = UnexpectedProblemResponse

// BalanceHistoryWindow The balance history window.
type BalanceHistoryWindow struct {
	// BalanceAtStart The entitlement balance at the start of the period.
	BalanceAtStart float64 `json:"balanceAtStart"`

	// Period A period with a start and end time.
	Period Period `json:"period"`

	// Usage The total usage of the feature in the period.
	Usage float64 `json:"usage"`
}

// BillingCreateLineResult Response for creating a pending charge
type BillingCreateLineResult struct {
	Lines []BillingInvoiceLine `json:"lines"`
}

// BillingCreateLinesRequest CreateLinesRequest is the request for creating manual line items.
type BillingCreateLinesRequest struct {
	Lines []BillingInvoiceLineCreateItem `json:"lines"`
}

// BillingCreditNoteOriginalInvoiceRef Omitted fields:
// period: Tax period in which the referred document had an effect required by some tax regimes and formats.
// stamps: Seals of approval from other organisations that may need to be listed.
// ext: 	Extensions for additional codes that may be required.
type BillingCreditNoteOriginalInvoiceRef = BillingGenericDocumentRef

// BillingCustomerOverride Customer specific workflow overrides.
type BillingCustomerOverride struct {
	// BillingProfile The billing profile this override is associated with.
	//
	// If not provided, the default billing profile is chosen if available.
	BillingProfile *string `json:"billingProfile,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// Workflow Customer specific workflow overrides.
	Workflow BillingCustomerWorkflowOverride `json:"workflow"`
}

// BillingCustomerOverrideOrderBy Order by options for customers.
type BillingCustomerOverrideOrderBy string

// BillingCustomerWorkflowOverride Customer specific workflow overrides.
type BillingCustomerWorkflowOverride struct {
	Collection *BillingWorkflowCollectionSettings `json:"collection,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for the resource.
	Id        string                            `json:"id"`
	Invoicing *BillingWorkflowInvoicingSettings `json:"invoicing,omitempty"`

	// InvoicingApp App.
	// One of: stripe
	InvoicingApp App                             `json:"invoicingApp"`
	Payment      *BillingWorkflowPaymentSettings `json:"payment,omitempty"`

	// PaymentApp App.
	// One of: stripe
	PaymentApp App `json:"paymentApp"`

	// TaxApp App.
	// One of: stripe
	TaxApp App `json:"taxApp"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// BillingCustomerWorkflowOverrideCreate Customer specific workflow overrides.
type BillingCustomerWorkflowOverrideCreate struct {
	Collection *BillingWorkflowCollectionSettings `json:"collection,omitempty"`
	Invoicing  *BillingWorkflowInvoicingSettings  `json:"invoicing,omitempty"`
	Payment    *BillingWorkflowPaymentSettings    `json:"payment,omitempty"`
}

// BillingDocumentRef CreditNoteOriginalInvoiceRef is used to reference the original invoice that a credit note is based on.
type BillingDocumentRef = BillingCreditNoteOriginalInvoiceRef

// BillingDocumentRefType DocumentRefType defines the type of document that is being referenced.
type BillingDocumentRefType string

// BillingDueDate DueDate contains an amount that should be paid by the given date.
type BillingDueDate struct {
	Amount   Numeric       `json:"amount"`
	Currency *CurrencyCode `json:"currency,omitempty"`

	// DueAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	DueAt   time.Time   `json:"dueAt"`
	Notes   *string     `json:"notes,omitempty"`
	Percent *Percentage `json:"percent,omitempty"`
}

// BillingFlatFeeLine BillingFlatFeeLine represents a line item that is sold to the customer as a manually added fee.
type BillingFlatFeeLine struct {
	Amount  Numeric              `json:"amount"`
	Charges *[]BillingLineCharge `json:"charges,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time    `json:"createdAt"`
	Currency  CurrencyCode `json:"currency"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string                `json:"description,omitempty"`
	Discounts   *[]BillingLineDiscount `json:"discounts,omitempty"`

	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id      string                   `json:"id"`
	Invoice *BillingInvoiceReference `json:"invoice,omitempty"`

	// InvoiceAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	InvoiceAt time.Time `json:"invoiceAt"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name        string            `json:"name"`
	PaymentTerm *PricePaymentTerm `json:"paymentTerm,omitempty"`
	Period      BillingPeriod     `json:"period"`
	Quantity    Numeric           `json:"quantity"`

	// Status Line status specifies the status of the line.
	Status    BillingLineStatus      `json:"status"`
	TaxConfig *TaxConfig             `json:"taxConfig"`
	Taxes     *[]BillingTaxItem      `json:"taxes,omitempty"`
	Total     Numeric                `json:"total"`
	Type      BillingFlatFeeLineType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// BillingFlatFeeLineType defines model for BillingFlatFeeLine.Type.
type BillingFlatFeeLineType string

// BillingFlatFeeLineCreateItem BillingFlatFeeLine represents a line item that is sold to the customer as a manually added fee.
type BillingFlatFeeLineCreateItem struct {
	Amount   Numeric              `json:"amount"`
	Charges  *[]BillingLineCharge `json:"charges,omitempty"`
	Currency CurrencyCode         `json:"currency"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string                  `json:"description,omitempty"`
	Discounts   *[]BillingLineDiscount   `json:"discounts,omitempty"`
	Invoice     *BillingInvoiceReference `json:"invoice,omitempty"`

	// InvoiceAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	InvoiceAt time.Time `json:"invoiceAt"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name        string                           `json:"name"`
	PaymentTerm *PricePaymentTerm                `json:"paymentTerm,omitempty"`
	Period      BillingPeriod                    `json:"period"`
	Quantity    Numeric                          `json:"quantity"`
	TaxConfig   *TaxConfig                       `json:"taxConfig"`
	Type        BillingFlatFeeLineCreateItemType `json:"type"`
}

// BillingFlatFeeLineCreateItemType defines model for BillingFlatFeeLineCreateItem.Type.
type BillingFlatFeeLineCreateItemType string

// BillingFlatFeeLineCreateOrUpdate BillingFlatFeeLine represents a line item that is sold to the customer as a manually added fee.
type BillingFlatFeeLineCreateOrUpdate struct {
	Amount   Numeric              `json:"amount"`
	Charges  *[]BillingLineCharge `json:"charges,omitempty"`
	Currency CurrencyCode         `json:"currency"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string                `json:"description,omitempty"`
	Discounts   *[]BillingLineDiscount `json:"discounts,omitempty"`

	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id      string                   `json:"id"`
	Invoice *BillingInvoiceReference `json:"invoice,omitempty"`

	// InvoiceAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	InvoiceAt time.Time `json:"invoiceAt"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name        string                               `json:"name"`
	PaymentTerm *PricePaymentTerm                    `json:"paymentTerm,omitempty"`
	Period      BillingPeriod                        `json:"period"`
	Quantity    Numeric                              `json:"quantity"`
	TaxConfig   *TaxConfig                           `json:"taxConfig"`
	Type        BillingFlatFeeLineCreateOrUpdateType `json:"type"`
}

// BillingFlatFeeLineCreateOrUpdateType defines model for BillingFlatFeeLineCreateOrUpdate.Type.
type BillingFlatFeeLineCreateOrUpdateType string

// BillingGenericDocumentRef Omitted fields:
// period: Tax period in which the referred document had an effect required by some tax regimes and formats.
// stamps: Seals of approval from other organisations that may need to be listed.
// ext: 	Extensions for additional codes that may be required.
type BillingGenericDocumentRef struct {
	Description *string                `json:"description,omitempty"`
	Reason      *string                `json:"reason,omitempty"`
	Type        BillingDocumentRefType `json:"type"`
}

// BillingInvoice Invoice represents an invoice in the system.
type BillingInvoice struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time    `json:"createdAt"`
	Currency  CurrencyCode `json:"currency"`
	Customer  BillingParty `json:"customer"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string                   `json:"description,omitempty"`
	Discounts   *[]BillingInvoiceDiscount `json:"discounts,omitempty"`

	// DraftUntil The time until the invoice is in draft status.
	//
	// On draft invoice creation it is calculated from the workflow settings.
	//
	// If manual approval is required, the draftUntil time is set.
	DraftUntil *time.Time `json:"draftUntil,omitempty"`

	// DueAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	DueAt *time.Time `json:"dueAt,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// IssuedAt The time the invoice was issued.
	//
	// Depending on the status of the invoice this can mean multiple things:
	// - draft, gathering: The time the invoice will be issued based on the workflow settings.
	// - issued: The time the invoice was issued.
	IssuedAt *time.Time            `json:"issuedAt,omitempty"`
	Lines    *[]BillingInvoiceLine `json:"lines,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Number Number specifies the human readable key used to reference this Invoice.
	//
	// The number only gets populated after the invoice had been issued.
	//
	// Please note that the number is (depending on the upstream settings) either unique for the
	// whole organization or unique for the customer, or in multi (stripe) account setups unique for the
	// account.
	Number        *BillingInvoiceNumber       `json:"number,omitempty"`
	Payment       *BillingInvoicePayment      `json:"payment,omitempty"`
	Period        *BillingPeriod              `json:"period,omitempty"`
	Preceding     *[]BillingDocumentRef       `json:"preceding,omitempty"`
	Status        BillingInvoiceStatus        `json:"status"`
	StatusDetails BillingInvoiceStatusDetails `json:"statusDetails"`
	Supplier      BillingParty                `json:"supplier"`
	Totals        BillingInvoiceTotals        `json:"totals"`

	// Type InvoiceType represents the type of invoice.
	//
	// The type of invoice determines the purpose of the invoice and how it should be handled.
	Type BillingInvoiceType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	//
	// For updates the updatedAt field is used to detect conflicts.
	UpdatedAt        time.Time                 `json:"updatedAt"`
	ValidationIssues *[]BillingValidationIssue `json:"validationIssues,omitempty"`

	// VoidedAt The time the invoice was voided.
	//
	// If the invoice was voided, this field will be set to the time the invoice was voided.
	VoidedAt *time.Time `json:"voidedAt,omitempty"`

	// Workflow The workflow associated with the invoice.
	//
	// It is always a snapshot of the workflow settings at the time of invoice creation. The
	// field is optional as it should be explicitly requested with expand options.
	Workflow *BillingInvoiceWorkflowSettings `json:"workflow,omitempty"`
}

// BillingInvoiceAction BillingInvoiceAction represents the actions that can be performed on an invoice.
type BillingInvoiceAction string

// BillingInvoiceCreateInput BillingInvoiceCreateInput is the input for creating an invoice.
//
// Invoice creation is always based on already pending line items created by the billingCreateLineByCustomer
// operation. Empty invoices are not allowed.
type BillingInvoiceCreateInput struct {
	// AsOf The time as of which the invoice is created.
	//
	// If not provided, the current time is used.
	AsOf *time.Time `json:"AsOf,omitempty"`

	// IncludePendingLines The pending line items to include in the invoice, if not provided:
	// - all line items that have invoice_at < asOf will be included
	// - all usage based line items will be included up to asOf, new usage-based line items will be staged for the rest
	// of the billing cycle
	IncludePendingLines *[]string `json:"IncludePendingLines,omitempty"`
}

// BillingInvoiceDiscount Discount represents an allowance applied to the complete document independent from the individual lines.
type BillingInvoiceDiscount struct {
	Amount  Numeric     `json:"amount"`
	Base    *Numeric    `json:"base,omitempty"`
	Percent *Percentage `json:"percent,omitempty"`
	Reason  *string     `json:"reason,omitempty"`
}

// BillingInvoiceExpand InvoiceExpand specifies the parts of the invoice to expand in the list output.
type BillingInvoiceExpand string

// BillingInvoiceExtendedStatus InvoiceExtendedStatus describes the extended status of an invoice.
//
// This is used to provide more detailed information about the status of the invoice. Useful for
// troubelshooting invoice workflow issues.
type BillingInvoiceExtendedStatus string

// BillingInvoiceLine BillingInvoiceLine represents a line item that is sold to the customer based on a specific (unit) price.
type BillingInvoiceLine struct {
	union json.RawMessage
}

// BillingInvoiceLineCreateItem BillingInvoiceLine represents a line item that is sold to the customer based on a specific (unit) price.
type BillingInvoiceLineCreateItem struct {
	union json.RawMessage
}

// BillingInvoiceLineCreateOrUpdate BillingInvoiceLine represents a line item that is sold to the customer based on a specific (unit) price.
type BillingInvoiceLineCreateOrUpdate struct {
	union json.RawMessage
}

// BillingInvoiceNumber InvoiceNumber is a unique identifier for the invoice, generated by the
// invoicing app.
//
// The uniqueness depends on a lot of factors:
// - app setting (unique per app or unique per customer)
// - multiple app scenarios (multiple apps generating invoices with the same prefix)
type BillingInvoiceNumber = string

// BillingInvoiceOrderBy InvoiceOrderBy specifies the ordering options for invoice listing.
type BillingInvoiceOrderBy string

// BillingInvoicePayment Payment contains details as to how the invoice should be paid.
type BillingInvoicePayment struct {
	// Terms PaymentTerms defines the terms for payment.
	Terms *BillingPaymentTerms `json:"terms,omitempty"`
}

// BillingInvoiceReference Reference to an invoice.
type BillingInvoiceReference struct {
	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id     string                `json:"id"`
	Number *BillingInvoiceNumber `json:"number,omitempty"`
}

// BillingInvoiceStatus InvoiceStatus describes the status of an invoice.
type BillingInvoiceStatus string

// BillingInvoiceStatusDetails InvoiceStatusDetails represents the details of the invoice status.
//
// API users are encouraged to rely on the immutable/failed/avaliableActions fields to determine
// the next steps of the invoice instead of the extendedStatus field.
type BillingInvoiceStatusDetails struct {
	AvailableActions []BillingInvoiceAction       `json:"availableActions"`
	ExtendedStatus   BillingInvoiceExtendedStatus `json:"extendedStatus"`
	Failed           bool                         `json:"failed"`
	Immutable        bool                         `json:"immutable"`
}

// BillingInvoiceTotals Totals contains the summaries of all calculations for the invoice.
type BillingInvoiceTotals struct {
	Advance      *Numeric `json:"advance,omitempty"`
	Charge       *Numeric `json:"charge,omitempty"`
	Discount     *Numeric `json:"discount,omitempty"`
	Due          *Numeric `json:"due,omitempty"`
	Payable      Numeric  `json:"payable"`
	Rounding     *Numeric `json:"rounding,omitempty"`
	Sum          Numeric  `json:"sum"`
	Tax          *Numeric `json:"tax,omitempty"`
	TaxIncluded  *Numeric `json:"taxIncluded,omitempty"`
	Total        Numeric  `json:"total"`
	TotalWithTax Numeric  `json:"totalWithTax"`
}

// BillingInvoiceType InvoiceType represents the type of invoice.
//
// The type of invoice determines the purpose of the invoice and how it should be handled.
type BillingInvoiceType string

// BillingInvoiceWorkflowSettings InvoiceWorkflowSettings represents the workflow settings used by the invoice.
//
// This is a clone of the billing profile's workflow settings at the time of invoice creation
// with customer overrides considered.
type BillingInvoiceWorkflowSettings struct {
	Apps *BillingProfileAppsOrReference `json:"apps,omitempty"`

	// SourceBillingProfileID sourceBillingProfileID is the billing profile on which the workflow was based on.
	//
	// The profile is snapshotted on invoice creation, after which it can be altered independently
	// of the profile itself.
	SourceBillingProfileID string                  `json:"sourceBillingProfileID"`
	Timezone               string                  `json:"timezone"`
	Workflow               BillingWorkflowSettings `json:"workflow"`
}

// BillingLineCharge LineCharge represents an amount added to the line, and will be applied before taxes.
type BillingLineCharge struct {
	// Amount Fixed discount amount to apply (calculated if percent present).
	Amount Numeric `json:"amount"`
	Code   *string `json:"code,omitempty"`

	// Percent Percentage if fixed amount not applied
	Percent *Percentage `json:"percent,omitempty"`
	Reason  *string     `json:"reason,omitempty"`
}

// BillingLineDiscount LineDiscount represents an amount deducted from the line, and will be applied before taxes.
type BillingLineDiscount struct {
	// Amount Fixed discount amount to apply (calculated if percent present).
	Amount Numeric `json:"amount"`
	Code   *string `json:"code,omitempty"`

	// Percent Percentage if fixed amount not applied
	Percent *Percentage `json:"percent,omitempty"`
	Reason  *string     `json:"reason,omitempty"`
}

// BillingLineStatus Line status specifies the status of the line.
type BillingLineStatus string

// BillingParty Party represents a person or business entity.
type BillingParty struct {
	Addresses *[]Address `json:"addresses,omitempty"`

	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id    *string             `json:"id,omitempty"`
	Name  *string             `json:"name,omitempty"`
	TaxId *BillingTaxIdentity `json:"taxId,omitempty"`
}

// BillingPartyCreate Party represents a person or business entity.
type BillingPartyCreate struct {
	Addresses *[]Address          `json:"addresses,omitempty"`
	Name      *string             `json:"name,omitempty"`
	TaxId     *BillingTaxIdentity `json:"taxId,omitempty"`
}

// BillingPaymentTermDueDate PaymentTermDueDate defines the terms for payment on a specific date.
type BillingPaymentTermDueDate struct {
	Detail *string                       `json:"detail,omitempty"`
	DueAt  []BillingDueDate              `json:"dueAt"`
	Notes  *string                       `json:"notes,omitempty"`
	Type   BillingPaymentTermDueDateType `json:"type"`
}

// BillingPaymentTermDueDateType defines model for BillingPaymentTermDueDate.Type.
type BillingPaymentTermDueDateType string

// BillingPaymentTermInstant PaymentTermInstant defines the terms for payment on receipt of invoice.
type BillingPaymentTermInstant struct {
	Detail *string                       `json:"detail,omitempty"`
	Notes  *string                       `json:"notes,omitempty"`
	Type   BillingPaymentTermInstantType `json:"type"`
}

// BillingPaymentTermInstantType defines model for BillingPaymentTermInstant.Type.
type BillingPaymentTermInstantType string

// BillingPaymentTerms PaymentTerms defines the terms for payment.
type BillingPaymentTerms struct {
	union json.RawMessage
}

// BillingPeriod Period represents a time range.
//
// Billing always treats periods as start being inclusive and end being exclusive.
type BillingPeriod struct {
	// End [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	End time.Time `json:"end"`

	// Start [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	Start time.Time `json:"start"`
}

// BillingProfile Profile represents a billing profile
type BillingProfile struct {
	Apps BillingProfileAppsOrReference `json:"apps"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`
	Default   bool      `json:"default"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name     string       `json:"name"`
	Supplier BillingParty `json:"supplier"`

	// UpdatedAt When the resource was last updated.
	//
	// For updates this field must be set to the last update time to detect conflicts.
	UpdatedAt time.Time       `json:"updatedAt"`
	Workflow  BillingWorkflow `json:"workflow"`
}

// BillingProfileAppReferences ProfileAppsReference represents the references (id, type) to the apps used by a billing profile
type BillingProfileAppReferences struct {
	Invoicing AppReference `json:"invoicing"`
	Payment   AppReference `json:"payment"`
	Tax       AppReference `json:"tax"`
}

// BillingProfileApps ProfileApps represents the applications used by a billing profile
type BillingProfileApps struct {
	// Invoicing App.
	// One of: stripe
	Invoicing App `json:"invoicing"`

	// Payment App.
	// One of: stripe
	Payment App `json:"payment"`

	// Tax App.
	// One of: stripe
	Tax App `json:"tax"`
}

// BillingProfileAppsOrReference ProfileAppsOrReference represents the union of ProfileApps and ProfileAppReferences
// for a billing profile.
type BillingProfileAppsOrReference struct {
	union json.RawMessage
}

// BillingProfileCreateAppsInput ProfileCreateAppsInput represents the input for creating a billing profile's apps
type BillingProfileCreateAppsInput struct {
	Invoicing BillingWorkflowAppIdOrType `json:"invoicing"`
	Payment   BillingWorkflowAppIdOrType `json:"payment"`
	Tax       BillingWorkflowAppIdOrType `json:"tax"`
}

// BillingProfileCreateInput ProfileCreateInput represents the input for creating a billing profile
type BillingProfileCreateInput struct {
	// Apps ProfileCreateAppsInput represents the input for creating a billing profile's apps
	Apps    BillingProfileCreateAppsInput `json:"apps"`
	Default bool                          `json:"default"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name     string             `json:"name"`
	Supplier BillingPartyCreate `json:"supplier"`
	Workflow BillingWorkflow    `json:"workflow"`
}

// BillingProfileCreateOrUpdate Profile represents a billing profile
type BillingProfileCreateOrUpdate struct {
	Default bool `json:"default"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name     string       `json:"name"`
	Supplier BillingParty `json:"supplier"`

	// UpdatedAt When the resource was last updated.
	//
	// For updates this field must be set to the last update time to detect conflicts.
	UpdatedAt time.Time       `json:"updatedAt"`
	Workflow  BillingWorkflow `json:"workflow"`
}

// BillingProfileExpand ProfileExpand details what profile fields to expand
type BillingProfileExpand string

// BillingProfileOrderBy ProfileOrderBy specifies the ordering options for profiles
type BillingProfileOrderBy string

// BillingTaxBehavior TaxBehavior details how the tax item is applied to the base amount.
//
// Inclusive means the tax is included in the base amount.
// Exclusive means the tax is added to the base amount.
type BillingTaxBehavior string

// BillingTaxIdentificationCode defines model for BillingTaxIdentificationCode.
type BillingTaxIdentificationCode = string

// BillingTaxIdentity Identity stores the details required to identify an entity for tax purposes in a specific country.
type BillingTaxIdentity struct {
	Code *BillingTaxIdentificationCode `json:"code,omitempty"`
}

// BillingTaxItem TaxConfig stores the configuration for a tax line relative to an invoice line.
type BillingTaxItem struct {
	Behavior  *BillingTaxBehavior `json:"behavior,omitempty"`
	Config    *TaxConfig          `json:"config,omitempty"`
	Percent   *Percentage         `json:"percent,omitempty"`
	Surcharge *Numeric            `json:"surcharge,omitempty"`
}

// BillingUsageBasedLine UsageBasedLine represents a line item that is sold to the customer based on usage.
type BillingUsageBasedLine struct {
	Charges *[]BillingLineCharge `json:"charges,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time    `json:"createdAt"`
	Currency  CurrencyCode `json:"currency"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string                `json:"description,omitempty"`
	Discounts   *[]BillingLineDiscount `json:"discounts,omitempty"`

	// FeatureKey A key is a unique string that is used to identify a resource.
	FeatureKey string `json:"featureKey"`

	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id      string                   `json:"id"`
	Invoice *BillingInvoiceReference `json:"invoice,omitempty"`

	// InvoiceAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	InvoiceAt time.Time `json:"invoiceAt"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name   string        `json:"name"`
	Period BillingPeriod `json:"period"`

	// Price The price of the usage based rate card.
	Price    RateCardUsageBasedPrice `json:"price"`
	Quantity *Numeric                `json:"quantity,omitempty"`

	// Status Line status specifies the status of the line.
	Status    BillingLineStatus         `json:"status"`
	TaxConfig *TaxConfig                `json:"taxConfig"`
	Taxes     *[]BillingTaxItem         `json:"taxes,omitempty"`
	Total     Numeric                   `json:"total"`
	Type      BillingUsageBasedLineType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// BillingUsageBasedLineType defines model for BillingUsageBasedLine.Type.
type BillingUsageBasedLineType string

// BillingUsageBasedLineCreateItem UsageBasedLine represents a line item that is sold to the customer based on usage.
type BillingUsageBasedLineCreateItem struct {
	Charges  *[]BillingLineCharge `json:"charges,omitempty"`
	Currency CurrencyCode         `json:"currency"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string                `json:"description,omitempty"`
	Discounts   *[]BillingLineDiscount `json:"discounts,omitempty"`

	// FeatureKey A key is a unique string that is used to identify a resource.
	FeatureKey string                   `json:"featureKey"`
	Invoice    *BillingInvoiceReference `json:"invoice,omitempty"`

	// InvoiceAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	InvoiceAt time.Time `json:"invoiceAt"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name   string        `json:"name"`
	Period BillingPeriod `json:"period"`

	// Price The price of the usage based rate card.
	Price     RateCardUsageBasedPrice             `json:"price"`
	TaxConfig *TaxConfig                          `json:"taxConfig"`
	Type      BillingUsageBasedLineCreateItemType `json:"type"`
}

// BillingUsageBasedLineCreateItemType defines model for BillingUsageBasedLineCreateItem.Type.
type BillingUsageBasedLineCreateItemType string

// BillingUsageBasedLineCreateOrUpdate UsageBasedLine represents a line item that is sold to the customer based on usage.
type BillingUsageBasedLineCreateOrUpdate struct {
	Charges  *[]BillingLineCharge `json:"charges,omitempty"`
	Currency CurrencyCode         `json:"currency"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string                `json:"description,omitempty"`
	Discounts   *[]BillingLineDiscount `json:"discounts,omitempty"`

	// FeatureKey A key is a unique string that is used to identify a resource.
	FeatureKey string `json:"featureKey"`

	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id      string                   `json:"id"`
	Invoice *BillingInvoiceReference `json:"invoice,omitempty"`

	// InvoiceAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	InvoiceAt time.Time `json:"invoiceAt"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name   string        `json:"name"`
	Period BillingPeriod `json:"period"`

	// Price The price of the usage based rate card.
	Price     RateCardUsageBasedPrice                 `json:"price"`
	TaxConfig *TaxConfig                              `json:"taxConfig"`
	Type      BillingUsageBasedLineCreateOrUpdateType `json:"type"`
}

// BillingUsageBasedLineCreateOrUpdateType defines model for BillingUsageBasedLineCreateOrUpdate.Type.
type BillingUsageBasedLineCreateOrUpdateType string

// BillingValidationIssue ValidationIssue captures any validation issues related to the invoice.
//
// Issues with severity "critical" will prevent the invoice from being issued.
type BillingValidationIssue struct {
	Code      *string                        `json:"code,omitempty"`
	Component string                         `json:"component"`
	Field     *string                        `json:"field,omitempty"`
	Message   string                         `json:"message"`
	Metadata  *Metadata                      `json:"metadata,omitempty"`
	Severity  BillingValidationIssueSeverity `json:"severity"`
}

// BillingValidationIssueSeverity ValidationIssueSeverity describes the severity of a validation issue.
//
// Issues with severity "critical" will prevent the invoice from being issued.
type BillingValidationIssueSeverity string

// BillingVoidInvoiceAction InvoiceVoidAction describes how to handle the voided line items.
type BillingVoidInvoiceAction struct {
	Action     BillingVoidInvoiceLineAction `json:"action"`
	Percentage Percentage                   `json:"percentage"`
}

// BillingVoidInvoiceInput Request to void an invoice
type BillingVoidInvoiceInput struct {
	// Action The action to take on the voided line items.
	Action BillingVoidInvoiceAction `json:"action"`

	// Overrides Per line item overrides for the action.
	//
	// If not specified, the `action` will be applied to all line items.
	Overrides *[]BillingVoidInvoiceLineOverride `json:"overrides"`

	// Reason The reason for voiding the invoice.
	Reason string `json:"reason"`
}

// BillingVoidInvoiceLineAction VoidInvoiceLineAction describes how to handle the voidied line item in the invoice.
type BillingVoidInvoiceLineAction string

// BillingVoidInvoiceLineOverride VoidInvoiceLineOverride describes how to handle a specific line item in the invoice when voiding.
type BillingVoidInvoiceLineOverride struct {
	Action BillingVoidInvoiceAction `json:"action"`

	// LineId ULID (Universally Unique Lexicographically Sortable Identifier).
	LineId string `json:"lineId"`
}

// BillingWorkflow Workflow represents a billing workflow
type BillingWorkflow struct {
	Collection *BillingWorkflowCollectionSettings `json:"collection,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for the resource.
	Id        string                            `json:"id"`
	Invoicing *BillingWorkflowInvoicingSettings `json:"invoicing,omitempty"`
	Payment   *BillingWorkflowPaymentSettings   `json:"payment,omitempty"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// BillingWorkflowAppIdOrType AppIdOrType can be used to reference an app during creation only.
//
// This can be either an AppType or the ULID of an app.
type BillingWorkflowAppIdOrType = string

// BillingWorkflowCollectionAlignment CollectionAlignment specifies when the pending line items should be collected into
// an invoice.
type BillingWorkflowCollectionAlignment string

// BillingWorkflowCollectionMethod CollectionMethod specifies how the invoice should be collected (automatic vs manual)
type BillingWorkflowCollectionMethod string

// BillingWorkflowCollectionSettings Workflow collection specifies how to collect the pending line items for an invoice
type BillingWorkflowCollectionSettings struct {
	// Alignment When to collect the pending line items into an invoice.
	Alignment *BillingWorkflowCollectionAlignment `json:"alignment,omitempty"`

	// Interval The interval for collecting the pending line items into an invoice.
	Interval *string `json:"interval,omitempty"`
}

// BillingWorkflowInvoicingSettings WorkflowInvoice represents the invoice settings for a billing workflow
type BillingWorkflowInvoicingSettings struct {
	// AutoAdvance Whether to automatically issue the invoice after the draftPeriod has passed.
	AutoAdvance *bool `json:"autoAdvance,omitempty"`

	// DraftPeriod The period for the invoice to be kept in draft status for manual reviews.
	DraftPeriod *string `json:"draftPeriod,omitempty"`

	// DueAfter The period after which the invoice is due.
	DueAfter *string `json:"dueAfter,omitempty"`
}

// BillingWorkflowPaymentSettings WorkflowPaymentSettings represents the payment settings for a billing workflow
type BillingWorkflowPaymentSettings struct {
	CollectionMethod *BillingWorkflowCollectionMethod `json:"collectionMethod,omitempty"`
}

// BillingWorkflowSettings WorkflowSettings represents the settings for a billing workflow.
type BillingWorkflowSettings struct {
	Collection *BillingWorkflowCollectionSettings `json:"collection,omitempty"`
	Invoicing  *BillingWorkflowInvoicingSettings  `json:"invoicing,omitempty"`
	Payment    *BillingWorkflowPaymentSettings    `json:"payment,omitempty"`
}

// CheckoutSessionCustomTextAfterSubmitParams Stripe CheckoutSession.custom_text
type CheckoutSessionCustomTextAfterSubmitParams struct {
	AfterSubmit *struct {
		Message *string `json:"message,omitempty"`
	} `json:"afterSubmit,omitempty"`
	ShippingAddress *struct {
		Message *string `json:"message,omitempty"`
	} `json:"shippingAddress,omitempty"`
	Submit *struct {
		Message *string `json:"message,omitempty"`
	} `json:"submit,omitempty"`
	TermsOfServiceAcceptance *struct {
		Message *string `json:"message,omitempty"`
	} `json:"termsOfServiceAcceptance,omitempty"`
}

// CheckoutSessionUIMode Stripe CheckoutSession.ui_mode
type CheckoutSessionUIMode string

// ClientAppStartResponse Response from the client app (OpenMeter backend) to start the OAuth2 flow.
type ClientAppStartResponse struct {
	// Url The URL to start the OAuth2 authorization code grant flow.
	Url string `json:"url"`
}

// ConflictProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type ConflictProblemResponse = UnexpectedProblemResponse

// CountryCode [ISO 3166-1](https://www.iso.org/iso-3166-country-codes.html) alpha-2 country code.
// Custom two-letter country codes are also supported for convenience.
type CountryCode = string

// CreateStripeCheckoutSessionRequest Create Stripe checkout session request.
type CreateStripeCheckoutSessionRequest struct {
	// AppId If not provided, the default Stripe app is used if any.
	AppId *string `json:"appId,omitempty"`

	// Customer Provide a customer ID to use an existing OpenMeter customer.
	// or provide a customer object to create a new customer.
	Customer CreateStripeCheckoutSessionRequest_Customer `json:"customer"`

	// Options Options passed to Stripe when creating the checkout session.
	Options CreateStripeCheckoutSessionRequestOptions `json:"options"`

	// StripeCustomerId Stripe customer ID.
	// If not provided OpenMeter creates a new Stripe customer or
	// uses the OpenMeter customer's default Stripe customer ID.
	StripeCustomerId *string `json:"stripeCustomerId,omitempty"`
}

// CreateStripeCheckoutSessionRequest_Customer Provide a customer ID to use an existing OpenMeter customer.
// or provide a customer object to create a new customer.
type CreateStripeCheckoutSessionRequest_Customer struct {
	union json.RawMessage
}

// CreateStripeCheckoutSessionRequestOptions Create Stripe checkout session options
type CreateStripeCheckoutSessionRequestOptions struct {
	CancelURL         *string `json:"cancelURL,omitempty"`
	ClientReferenceID *string `json:"clientReferenceID,omitempty"`

	// Currency Three-letter [ISO4217](https://www.iso.org/iso-4217-currency-codes.html) currency code.
	// Custom three-letter currency codes are also supported for convenience.
	Currency *CurrencyCode `json:"currency,omitempty"`

	// CustomText Stripe CheckoutSession.custom_text
	CustomText         *CheckoutSessionCustomTextAfterSubmitParams `json:"customText,omitempty"`
	Metadata           *map[string]string                          `json:"metadata,omitempty"`
	PaymentMethodTypes *[]string                                   `json:"paymentMethodTypes,omitempty"`
	ReturnURL          *string                                     `json:"returnURL,omitempty"`
	SuccessURL         *string                                     `json:"successURL,omitempty"`

	// UiMode Stripe CheckoutSession.ui_mode
	UiMode *CheckoutSessionUIMode `json:"uiMode,omitempty"`
}

// CreateStripeCheckoutSessionResult Create Stripe Checkout Session response.
type CreateStripeCheckoutSessionResult struct {
	// CancelURL Cancel URL.
	CancelURL *string `json:"cancelURL,omitempty"`

	// CustomerId The OpenMeter customer ID.
	CustomerId string `json:"customerId"`

	// Mode Mode
	// Always `setup` for now.
	Mode StripeCheckoutSessionMode `json:"mode"`

	// ReturnURL Return URL.
	ReturnURL *string `json:"returnURL,omitempty"`

	// SessionId The checkout session ID.
	SessionId string `json:"sessionId"`

	// SetupIntentId The checkout session setup intent ID.
	SetupIntentId string `json:"setupIntentId"`

	// StripeCustomerId The Stripe customer ID.
	StripeCustomerId string `json:"stripeCustomerId"`

	// SuccessURL Success URL.
	SuccessURL *string `json:"successURL,omitempty"`

	// Url URL to show the checkout session.
	Url string `json:"url"`
}

// CreateSubscriptionRequestBody Create subscription request body.
type CreateSubscriptionRequestBody struct {
	// ActiveFrom [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	ActiveFrom time.Time `json:"activeFrom"`

	// Currency Three-letter [ISO4217](https://www.iso.org/iso-4217-currency-codes.html) currency code.
	// Custom three-letter currency codes are also supported for convenience.
	Currency CurrencyCode `json:"currency"`

	// CustomerId ULID (Universally Unique Lexicographically Sortable Identifier).
	CustomerId string `json:"customerId"`

	// Customizations Batch processing commands for customizing the susbcription.
	// The key format is `/phases/{phaseKey}/items/{itemKey}`.
	//
	// Add operations insert a new member based on the creation input without altering the existing members.
	//
	// Remove operations remove the member from the document.
	Customizations []CreateSubscriptionRequestBody_Customizations_Item `json:"customizations"`
	Plan           struct {
		// Key A key is a unique string that is used to identify a resource.
		Key     string `json:"key"`
		Version int    `json:"version"`
	} `json:"plan"`
}

// CreateSubscriptionRequestBody_Customizations_Item defines model for CreateSubscriptionRequestBody.customizations.Item.
type CreateSubscriptionRequestBody_Customizations_Item struct {
	union json.RawMessage
}

// CurrencyCode Three-letter [ISO4217](https://www.iso.org/iso-4217-currency-codes.html) currency code.
// Custom three-letter currency codes are also supported for convenience.
type CurrencyCode = string

// Customer A customer object.
type Customer struct {
	// BillingAddress The billing address of the customer.
	// Used for tax and invoicing.
	BillingAddress *Address `json:"billingAddress,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Currency Currency of the customer.
	// Used for billing, tax and invoicing.
	Currency *CurrencyCode `json:"currency,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// External External mappings for the customer.
	External *CustomerExternalMapping `json:"external,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// PrimaryEmail The primary email address of the customer.
	PrimaryEmail *string `json:"primaryEmail,omitempty"`

	// Timezone Timezone of the customer.
	Timezone *string `json:"timezone,omitempty"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// UsageAttribution Mapping to attribute metered usage to the customer
	UsageAttribution CustomerUsageAttribution `json:"usageAttribution"`
}

// CustomerExternalMapping External mappings for the customer.
type CustomerExternalMapping struct {
	// StripeCustomerId The Stripe customer ID.
	// Mapping to a Stripe Customer object.
	// Required to use Stripe as an invocing provider.
	StripeCustomerId *string `json:"stripeCustomerId,omitempty"`
}

// CustomerId Create Stripe checkout session customer ID.
type CustomerId struct {
	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id string `json:"id"`
}

// CustomerList A page of results.
type CustomerList struct {
	// Items The items in the page.
	Items []Customer `json:"items"`

	// Page The page number.
	Page int `json:"page"`

	// PageSize The number of items in the page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// CustomerOrderBy Order by options for customers.
type CustomerOrderBy string

// CustomerOverridePaginatedResponse Paginated response
type CustomerOverridePaginatedResponse struct {
	// Items The items in the current page.
	Items []BillingCustomerOverride `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// CustomerUsageAttribution Mapping to attribute metered usage to the customer.
// One customer can have multiple subjects,
// but one subject can only belong to one customer.
type CustomerUsageAttribution struct {
	// SubjectKeys The subjects that are attributed to the customer.
	SubjectKeys []string `json:"subjectKeys"`
}

// Discount Percentage discount.
type Discount = DiscountPercentage

// DiscountPercentage Percentage discount.
type DiscountPercentage struct {
	// Percentage The percentage of the discount.
	Percentage float32 `json:"percentage"`

	// RateCards The rate cards that the discount applies to.
	// When not specified, the discount applies to all rate cards.
	RateCards *[]string `json:"rateCards,omitempty"`

	// Type The type of the discount.
	Type DiscountPercentageType `json:"type"`
}

// DiscountPercentageType The type of the discount.
type DiscountPercentageType string

// DiscountPercentageUpdateItem Percentage discount.
type DiscountPercentageUpdateItem struct {
	// Percentage The percentage of the discount.
	Percentage float32 `json:"percentage"`

	// RateCards The rate cards that the discount applies to.
	// When not specified, the discount applies to all rate cards.
	RateCards *[]string `json:"rateCards,omitempty"`
}

// DiscountUpdateItem Percentage discount.
type DiscountUpdateItem = DiscountPercentageUpdateItem

// Entitlement Entitlement templates are used to define the entitlements of a plan.
// Features are omitted from the entitlement template, as they are defined in the rate card.
type Entitlement struct {
	union json.RawMessage
}

// EntitlementBaseTemplate Shared fields of the entitlement templates.
type EntitlementBaseTemplate struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// CurrentUsagePeriod The current usage period.
	CurrentUsagePeriod *Period `json:"currentUsagePeriod,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// FeatureKey The feature the subject is entitled to use.
	FeatureKey string `json:"featureKey"`

	// Id Readonly unique ULID identifier.
	Id string `json:"id"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata `json:"metadata,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string `json:"subjectKey"`

	// Type The type of the entitlement.
	Type EntitlementType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// UsagePeriod The defined usage period of the entitlement
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementBoolean Shared fields of the entitlement templates.
type EntitlementBoolean = EntitlementBaseTemplate

// EntitlementBooleanCreateInputs Create inputs for boolean entitlement
type EntitlementBooleanCreateInputs struct {
	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId *string `json:"featureId,omitempty"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata                          `json:"metadata,omitempty"`
	Type     EntitlementBooleanCreateInputsType `json:"type"`

	// UsagePeriod The usage period associated with the entitlement.
	UsagePeriod *RecurringPeriodCreateInput `json:"usagePeriod,omitempty"`
}

// EntitlementBooleanCreateInputsType defines model for EntitlementBooleanCreateInputs.Type.
type EntitlementBooleanCreateInputsType string

// EntitlementCreateInputs Create inputs for entitlement
type EntitlementCreateInputs struct {
	union json.RawMessage
}

// EntitlementGrant The grant.
type EntitlementGrant struct {
	// Amount The amount to grant. Should be a positive number.
	Amount float64 `json:"amount"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// EffectiveAt Effective date for grants and anchor for recurring grants. Provided value will be ceiled to metering windowSize (minute).
	EffectiveAt time.Time `json:"effectiveAt"`

	// EntitlementId The unique entitlement ULID that the grant is associated with.
	EntitlementId string `json:"entitlementId"`

	// Expiration The grant expiration definition
	Expiration ExpirationPeriod `json:"expiration"`

	// ExpiresAt The time the grant expires.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id Readonly unique ULID identifier.
	Id string `json:"id"`

	// MaxRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	// Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MaxRolloverAmount *float64 `json:"maxRolloverAmount,omitempty"`

	// Metadata The grant metadata.
	Metadata *Metadata `json:"metadata,omitempty"`

	// MinRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	// Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MinRolloverAmount *float64 `json:"minRolloverAmount,omitempty"`

	// NextRecurrence The next time the grant will recurr.
	NextRecurrence *time.Time `json:"nextRecurrence,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *uint8 `json:"priority,omitempty"`

	// Recurrence The recurrence period of the grant.
	Recurrence *RecurringPeriod `json:"recurrence,omitempty"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// VoidedAt The time the grant was voided.
	VoidedAt *time.Time `json:"voidedAt,omitempty"`
}

// EntitlementGrantCreateInput The grant creation input.
type EntitlementGrantCreateInput struct {
	// Amount The amount to grant. Should be a positive number.
	Amount float64 `json:"amount"`

	// EffectiveAt Effective date for grants and anchor for recurring grants. Provided value will be ceiled to metering windowSize (minute).
	EffectiveAt time.Time `json:"effectiveAt"`

	// Expiration The grant expiration definition
	Expiration ExpirationPeriod `json:"expiration"`

	// MaxRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	// Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MaxRolloverAmount *float64 `json:"maxRolloverAmount,omitempty"`

	// Metadata The grant metadata.
	Metadata *Metadata `json:"metadata,omitempty"`

	// MinRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	// Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MinRolloverAmount *float64 `json:"minRolloverAmount,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *uint8 `json:"priority,omitempty"`

	// Recurrence The subject of the grant.
	Recurrence *RecurringPeriodCreateInput `json:"recurrence,omitempty"`
}

// EntitlementMetered Metered entitlements are useful for many different use cases, from setting up usage based access to implementing complex credit systems.
// Access is determined based on feature usage using a balance calculation (the "usage allowance" provided by the issued grants is "burnt down" by the usage).
type EntitlementMetered struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// CurrentUsagePeriod The current usage period.
	CurrentUsagePeriod Period `json:"currentUsagePeriod"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// FeatureKey The feature the subject is entitled to use.
	FeatureKey string `json:"featureKey"`

	// Id Readonly unique ULID identifier.
	Id string `json:"id"`

	// IsSoftLimit If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.
	IsSoftLimit *bool `json:"isSoftLimit,omitempty"`

	// IsUnlimited Deprecated, ignored by the backend. Please use isSoftLimit instead; this field will be removed in the future.
	// Deprecated:
	IsUnlimited *bool `json:"isUnlimited,omitempty"`

	// IssueAfterReset You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance.
	// If an amount is specified here, a grant will be created alongside the entitlement with the specified amount.
	// That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.
	// Manually creating such a grant would mean having the "amount", "minRolloverAmount", and "maxRolloverAmount" fields all be the same.
	IssueAfterReset *float64 `json:"issueAfterReset,omitempty"`

	// IssueAfterResetPriority Defines the grant priority for the default grant.
	IssueAfterResetPriority *uint8 `json:"issueAfterResetPriority,omitempty"`

	// LastReset The time the last reset happened.
	LastReset time.Time `json:"lastReset"`

	// MeasureUsageFrom The time from which usage is measured. If not specified on creation, defaults to entitlement creation time.
	MeasureUsageFrom time.Time `json:"measureUsageFrom"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata `json:"metadata,omitempty"`

	// PreserveOverageAtReset If true, the overage is preserved at reset. If false, the usage is reset to 0.
	PreserveOverageAtReset *bool `json:"preserveOverageAtReset,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string                 `json:"subjectKey"`
	Type       EntitlementMeteredType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// UsagePeriod THe usage period of the entitlement.
	UsagePeriod RecurringPeriod `json:"usagePeriod"`
}

// EntitlementMeteredType defines model for EntitlementMetered.Type.
type EntitlementMeteredType string

// EntitlementMeteredCreateInputs Create inpurs for metered entitlement
type EntitlementMeteredCreateInputs struct {
	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId *string `json:"featureId,omitempty"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey *string `json:"featureKey,omitempty"`

	// IsSoftLimit If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.
	IsSoftLimit *bool `json:"isSoftLimit,omitempty"`

	// IsUnlimited Deprecated, ignored by the backend. Please use isSoftLimit instead; this field will be removed in the future.
	// Deprecated:
	IsUnlimited *bool `json:"isUnlimited,omitempty"`

	// IssueAfterReset You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance.
	// If an amount is specified here, a grant will be created alongside the entitlement with the specified amount.
	// That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.
	// Manually creating such a grant would mean having the "amount", "minRolloverAmount", and "maxRolloverAmount" fields all be the same.
	IssueAfterReset *float64 `json:"issueAfterReset,omitempty"`

	// IssueAfterResetPriority Defines the grant priority for the default grant.
	IssueAfterResetPriority *uint8 `json:"issueAfterResetPriority,omitempty"`

	// MeasureUsageFrom Defines the time from which usage is measured. If not specified on creation, defaults to entitlement creation time.
	MeasureUsageFrom *MeasureUsageFrom `json:"measureUsageFrom,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata `json:"metadata,omitempty"`

	// PreserveOverageAtReset If true, the overage is preserved at reset. If false, the usage is reset to 0.
	PreserveOverageAtReset *bool                              `json:"preserveOverageAtReset,omitempty"`
	Type                   EntitlementMeteredCreateInputsType `json:"type"`

	// UsagePeriod The usage period associated with the entitlement.
	UsagePeriod RecurringPeriodCreateInput `json:"usagePeriod"`
}

// EntitlementMeteredCreateInputsType defines model for EntitlementMeteredCreateInputs.Type.
type EntitlementMeteredCreateInputsType string

// EntitlementOrderBy Order by options for entitlements.
type EntitlementOrderBy string

// EntitlementPaginatedResponse Paginated response
type EntitlementPaginatedResponse struct {
	// Items The items in the current page.
	Items []Entitlement `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// EntitlementStatic A static entitlement.
type EntitlementStatic struct {
	// Config The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object.
	Config json.RawMessage `json:"config"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// CurrentUsagePeriod The current usage period.
	CurrentUsagePeriod *Period `json:"currentUsagePeriod,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// FeatureKey The feature the subject is entitled to use.
	FeatureKey string `json:"featureKey"`

	// Id Readonly unique ULID identifier.
	Id string `json:"id"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata `json:"metadata,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string                `json:"subjectKey"`
	Type       EntitlementStaticType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// UsagePeriod The defined usage period of the entitlement
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementStaticType defines model for EntitlementStatic.Type.
type EntitlementStaticType string

// EntitlementStaticCreateInputs Create inputs for static entitlement
type EntitlementStaticCreateInputs struct {
	// Config The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object.
	Config json.RawMessage `json:"config"`

	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId *string `json:"featureId,omitempty"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata                         `json:"metadata,omitempty"`
	Type     EntitlementStaticCreateInputsType `json:"type"`

	// UsagePeriod The usage period associated with the entitlement.
	UsagePeriod *RecurringPeriodCreateInput `json:"usagePeriod,omitempty"`
}

// EntitlementStaticCreateInputsType defines model for EntitlementStaticCreateInputs.Type.
type EntitlementStaticCreateInputsType string

// EntitlementType Type of the entitlement.
type EntitlementType = string

// EntitlementValue Entitlements are the core of OpenMeter access management. They define access to features for subjects. Entitlements can be metered, boolean, or static.
type EntitlementValue struct {
	// Balance Only available for metered entitlements. Metered entitlements are built around a balance calculation where feature usage is deducted from the issued grants. Balance represents the remaining balance of the entitlement, it's value never turns negative.
	Balance *float64 `json:"balance,omitempty"`

	// Config Only available for static entitlements. The JSON parsable config of the entitlement.
	Config *string `json:"config,omitempty"`

	// HasAccess Whether the subject has access to the feature. Shared accross all entitlement types.
	HasAccess bool `json:"hasAccess"`

	// Overage Only available for metered entitlements. Overage represents the usage that wasn't covered by grants, e.g. if the subject had a total feature usage of 100 in the period but they were only granted 80, there would be 20 overage.
	Overage *float64 `json:"overage,omitempty"`

	// Usage Only available for metered entitlements. Returns the total feature usage in the current period.
	Usage *float64 `json:"usage,omitempty"`
}

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// ExpirationDuration The expiration duration enum
type ExpirationDuration string

// ExpirationPeriod The grant expiration definition
type ExpirationPeriod struct {
	// Count The number of time units in the expiration period.
	Count int `json:"count"`

	// Duration The unit of time for the expiration period.
	Duration ExpirationDuration `json:"duration"`
}

// Feature Represents a feature that can be enabled or disabled for a plan.
// Used both for product catalog and entitlements.
type Feature struct {
	// ArchivedAt Timestamp of when the resource was archived.
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id Readonly unique ULID identifier.
	Id string `json:"id"`

	// Key A key is a unique string that is used to identify a resource.
	Key      string    `json:"key"`
	Metadata *Metadata `json:"metadata,omitempty"`

	// MeterGroupByFilters Optional meter group by filters.
	// Useful if the meter scope is broader than what feature tracks.
	// Example scenario would be a meter tracking all token use with groupBy fields for the model,
	// then the feature could filter for model=gpt-4.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug A key is a unique string that is used to identify a resource.
	MeterSlug *string `json:"meterSlug,omitempty"`
	Name      string  `json:"name"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// FeatureCreateInputs Represents a feature that can be enabled or disabled for a plan.
// Used both for product catalog and entitlements.
type FeatureCreateInputs struct {
	// Key A key is a unique string that is used to identify a resource.
	Key      string    `json:"key"`
	Metadata *Metadata `json:"metadata,omitempty"`

	// MeterGroupByFilters Optional meter group by filters.
	// Useful if the meter scope is broader than what feature tracks.
	// Example scenario would be a meter tracking all token use with groupBy fields for the model,
	// then the feature could filter for model=gpt-4.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug A key is a unique string that is used to identify a resource.
	MeterSlug *string `json:"meterSlug,omitempty"`
	Name      string  `json:"name"`
}

// FeatureMeta Limited representation of a feature resource which includes only its unique identifiers (id, key).
type FeatureMeta struct {
	// Id Unique identifier of a feature.
	Id string `json:"id"`

	// Key The key is an immutable unique identifier of the feature used throughout the API,
	// for example when interacting with a subject's entitlements.
	Key string `json:"key"`
}

// FeatureOrderBy Order by options for features.
type FeatureOrderBy string

// FeaturePaginatedResponse Paginated response
type FeaturePaginatedResponse struct {
	// Items The items in the current page.
	Items []Feature `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// FlatPrice Flat price.
type FlatPrice struct {
	// Amount The amount of the flat price.
	Amount Numeric       `json:"amount"`
	Type   FlatPriceType `json:"type"`
}

// FlatPriceType defines model for FlatPrice.Type.
type FlatPriceType string

// FlatPriceWithPaymentTerm Flat price with payment term.
type FlatPriceWithPaymentTerm struct {
	// Amount The amount of the flat price.
	Amount Numeric `json:"amount"`

	// PaymentTerm The payment term of the flat price.
	// Defaults to in advance.
	PaymentTerm *PricePaymentTerm            `json:"paymentTerm,omitempty"`
	Type        FlatPriceWithPaymentTermType `json:"type"`
}

// FlatPriceWithPaymentTermType defines model for FlatPriceWithPaymentTerm.Type.
type FlatPriceWithPaymentTermType string

// ForbiddenProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type ForbiddenProblemResponse = UnexpectedProblemResponse

// GrantBurnDownHistorySegment A segment of the grant burn down history.
//
// A given segment represents the usage of a grant between events that changed either the grant burn down priority order or the usag period.
type GrantBurnDownHistorySegment struct {
	// BalanceAtEnd The entitlement balance at the end of the period.
	BalanceAtEnd float64 `json:"balanceAtEnd"`

	// BalanceAtStart entitlement balance at the start of the period.
	BalanceAtStart float64 `json:"balanceAtStart"`

	// GrantBalancesAtEnd The balance breakdown of each active grant at the end of the period: GrantID: Balance
	GrantBalancesAtEnd map[string]float64 `json:"grantBalancesAtEnd"`

	// GrantBalancesAtStart The balance breakdown of each active grant at the start of the period: GrantID: Balance
	GrantBalancesAtStart map[string]float64 `json:"grantBalancesAtStart"`

	// GrantUsages Which grants were actually burnt down in the period and by what amount.
	GrantUsages []GrantUsageRecord `json:"grantUsages"`

	// Overage Overuse that wasn't covered by grants.
	Overage float64 `json:"overage"`

	// Period The period of the segment.
	Period Period `json:"period"`

	// Usage The total usage of the grant in the period.
	Usage float64 `json:"usage"`
}

// GrantOrderBy Order by options for grants.
type GrantOrderBy string

// GrantPaginatedResponse Paginated response
type GrantPaginatedResponse struct {
	// Items The items in the current page.
	Items []EntitlementGrant `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// GrantUsageRecord Usage Record
type GrantUsageRecord struct {
	// GrantId The id of the grant
	GrantId string `json:"grantId"`

	// Usage The usage in the period
	Usage float64 `json:"usage"`
}

// IngestEventsBody The body of the events request.
// Either a single event or a batch of events.
type IngestEventsBody struct {
	union json.RawMessage
}

// IngestEventsBody1 defines model for .
type IngestEventsBody1 = []Event

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event Event `json:"event"`

	// IngestedAt The date and time the event was ingested.
	IngestedAt time.Time `json:"ingestedAt"`

	// StoredAt The date and time the event was stored.
	StoredAt time.Time `json:"storedAt"`

	// ValidationError The validation error if the event failed validation.
	ValidationError *string `json:"validationError,omitempty"`
}

// InternalServerErrorProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type InternalServerErrorProblemResponse = UnexpectedProblemResponse

// InvoicePaginatedResponse Paginated response
type InvoicePaginatedResponse struct {
	// Items The items in the current page.
	Items []BillingInvoice `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// ListEntitlementsResult List entitlements result
type ListEntitlementsResult struct {
	union json.RawMessage
}

// ListEntitlementsResult0 defines model for .
type ListEntitlementsResult0 = []Entitlement

// ListFeaturesResult List features result
type ListFeaturesResult struct {
	union json.RawMessage
}

// ListFeaturesResult0 defines model for .
type ListFeaturesResult0 = []Feature

// MarketplaceListing A marketplace listing.
// Represent an available app in the app marketplace that can be installed to the organization.
//
// Marketplace apps only exist in config so they don't extend the Resource model.
type MarketplaceListing struct {
	// Capabilities The app's capabilities.
	Capabilities []AppCapability `json:"capabilities"`

	// Description The app's description.
	Description string `json:"description"`

	// IconUrl The app's icon URL.
	IconUrl string `json:"iconUrl"`

	// Name The app's name.
	Name string `json:"name"`

	// Type The app's type
	Type AppType `json:"type"`
}

// MarketplaceListingList A page of results.
type MarketplaceListingList struct {
	// Items The items in the page.
	Items []MarketplaceListing `json:"items"`

	// Page The page number.
	Page int `json:"page"`

	// PageSize The number of items in the page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// MeasureUsageFrom Measure usage from
type MeasureUsageFrom struct {
	union json.RawMessage
}

// MeasureUsageFromPreset Start of measurement options
type MeasureUsageFromPreset string

// MeasureUsageFromTime [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
type MeasureUsageFromTime = time.Time

// Metadata Set of key-value pairs.
// Metadata can be used to store additional information about a resource.
type Metadata = map[string]string

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`

	// From [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	From *time.Time `json:"from,omitempty"`

	// To [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	To *time.Time `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = UnexpectedProblemResponse

// NotificationChannel Notification channel with webhook type.
type NotificationChannel = NotificationChannelWebhook

// NotificationChannelCreateRequest Request with input parameters for creating new notification channel with webhook type.
type NotificationChannelCreateRequest = NotificationChannelWebhookCreateRequest

// NotificationChannelMeta Metadata only fields of a notification channel.
type NotificationChannelMeta struct {
	// Id Identifies the notification channel.
	Id string `json:"id"`

	// Type Notification channel type.
	Type NotificationChannelType `json:"type"`
}

// NotificationChannelOrderBy Order by options for notification channels.
type NotificationChannelOrderBy string

// NotificationChannelPaginatedResponse Paginated response
type NotificationChannelPaginatedResponse struct {
	// Items The items in the current page.
	Items []NotificationChannel `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// NotificationChannelType Type of the notification channel.
type NotificationChannelType string

// NotificationChannelWebhook Notification channel with webhook type.
type NotificationChannelWebhook struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// CustomHeaders Custom HTTP headers sent as part of the webhook request.
	CustomHeaders *map[string]string `json:"customHeaders,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Disabled Whether the channel is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Id Identifies the notification channel.
	Id string `json:"id"`

	// Name User friendly name of the channel.
	Name string `json:"name"`

	// SigningSecret Signing secret used for webhook request validation on the receiving end.
	//
	// Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24
	SigningSecret *string `json:"signingSecret,omitempty"`

	// Type Notification channel type.
	Type NotificationChannelWebhookType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// Url Webhook URL where the notification is sent.
	Url string `json:"url"`
}

// NotificationChannelWebhookType Notification channel type.
type NotificationChannelWebhookType string

// NotificationChannelWebhookCreateRequest Request with input parameters for creating new notification channel with webhook type.
type NotificationChannelWebhookCreateRequest struct {
	// CustomHeaders Custom HTTP headers sent as part of the webhook request.
	CustomHeaders *map[string]string `json:"customHeaders,omitempty"`

	// Disabled Whether the channel is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Name User friendly name of the channel.
	Name string `json:"name"`

	// SigningSecret Signing secret used for webhook request validation on the receiving end.
	//
	// Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24
	SigningSecret *string `json:"signingSecret,omitempty"`

	// Type Notification channel type.
	Type NotificationChannelWebhookCreateRequestType `json:"type"`

	// Url Webhook URL where the notification is sent.
	Url string `json:"url"`
}

// NotificationChannelWebhookCreateRequestType Notification channel type.
type NotificationChannelWebhookCreateRequestType string

// NotificationEvent Type of the notification event.
type NotificationEvent struct {
	// Annotations Set of key-value pairs managed by the system. Cannot be modified by user.
	Annotations *Annotations `json:"annotations,omitempty"`

	// CreatedAt Timestamp when the notification event was created in RFC 3339 format.
	CreatedAt time.Time `json:"createdAt"`

	// DeliveryStatus The delivery status of the notification event.
	DeliveryStatus []NotificationEventDeliveryStatus `json:"deliveryStatus"`

	// Id A unique identifier of the notification event.
	Id      string                   `json:"id"`
	Payload NotificationEventPayload `json:"payload"`
	Rule    NotificationRule         `json:"rule"`

	// Type Type of the notification event.
	Type NotificationEventType `json:"type"`
}

// NotificationEventBalanceThresholdPayload Payload for notification event with `entitlements.balance.threshold` type.
type NotificationEventBalanceThresholdPayload struct {
	// Data The data of the payload.
	Data NotificationEventBalanceThresholdPayloadData `json:"data"`

	// Id A unique identifier for the notification event the payload belongs to.
	Id string `json:"id"`

	// Timestamp Timestamp when the notification event was created in RFC 3339 format.
	Timestamp time.Time `json:"timestamp"`

	// Type Type of the notification event.
	Type NotificationEventBalanceThresholdPayloadType `json:"type"`
}

// NotificationEventBalanceThresholdPayloadType Type of the notification event.
type NotificationEventBalanceThresholdPayloadType string

// NotificationEventBalanceThresholdPayloadData Data of the payload for notification event with `entitlements.balance.threshold` type.
type NotificationEventBalanceThresholdPayloadData struct {
	Entitlement EntitlementMetered                    `json:"entitlement"`
	Feature     Feature                               `json:"feature"`
	Subject     Subject                               `json:"subject"`
	Threshold   NotificationRuleBalanceThresholdValue `json:"threshold"`
	Value       EntitlementValue                      `json:"value"`
}

// NotificationEventDeliveryStatus The delivery status of the notification event.
type NotificationEventDeliveryStatus struct {
	// Channel Notification channel the delivery sattus associated with.
	Channel NotificationChannelMeta `json:"channel"`

	// Reason The reason of the last deliverry state update.
	Reason string `json:"reason"`

	// State Delivery state of the notification event to the channel.
	State NotificationEventDeliveryStatusState `json:"state"`

	// UpdatedAt Timestamp of when the status was last updated in RFC 3339 format.
	UpdatedAt time.Time `json:"updatedAt"`
}

// NotificationEventDeliveryStatusState The delivery state of the notification event to the channel.
type NotificationEventDeliveryStatusState string

// NotificationEventOrderBy Order by options for notification channels.
type NotificationEventOrderBy string

// NotificationEventPaginatedResponse Paginated response
type NotificationEventPaginatedResponse struct {
	// Items The items in the current page.
	Items []NotificationEvent `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// NotificationEventPayload Payload for notification event with `entitlements.balance.threshold` type.
type NotificationEventPayload = NotificationEventBalanceThresholdPayload

// NotificationEventType Type of the notification event.
type NotificationEventType string

// NotificationRule Notification rule with entitlements.balance.threshold type.
type NotificationRule = NotificationRuleBalanceThreshold

// NotificationRuleBalanceThreshold Notification rule with entitlements.balance.threshold type.
type NotificationRuleBalanceThreshold struct {
	// Channels List of notification channels the rule applies to.
	Channels []NotificationChannelMeta `json:"channels"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Disabled Whether the rule is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Features Optional field containing list of features the rule applies to.
	Features *[]FeatureMeta `json:"features,omitempty"`

	// Id Identifies the notification rule.
	Id string `json:"id"`

	// Name The user friendly name of the notification rule.
	Name string `json:"name"`

	// Thresholds List of thresholds the rule suppose to be triggered.
	Thresholds []NotificationRuleBalanceThresholdValue `json:"thresholds"`

	// Type Notification rule type.
	Type NotificationRuleBalanceThresholdType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// NotificationRuleBalanceThresholdType Notification rule type.
type NotificationRuleBalanceThresholdType string

// NotificationRuleBalanceThresholdCreateRequest Request with input parameters for creating new notification rule with entitlements.balance.threashold type.
type NotificationRuleBalanceThresholdCreateRequest struct {
	// Channels List of notification channels the rule is applied to.
	Channels []string `json:"channels"`

	// Disabled Whether the rule is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Features Optional field for defining the scope of notification by feature. It may contain features by id or key.
	Features *[]string `json:"features,omitempty"`

	// Name The user friendly name of the notification rule.
	Name string `json:"name"`

	// Thresholds List of thresholds the rule suppose to be triggered.
	Thresholds []NotificationRuleBalanceThresholdValue `json:"thresholds"`

	// Type Notification rule type.
	Type NotificationRuleBalanceThresholdCreateRequestType `json:"type"`
}

// NotificationRuleBalanceThresholdCreateRequestType Notification rule type.
type NotificationRuleBalanceThresholdCreateRequestType string

// NotificationRuleBalanceThresholdValue Threshold value with multiple supported types.
type NotificationRuleBalanceThresholdValue struct {
	// Type Type of the threshold.
	Type NotificationRuleBalanceThresholdValueType `json:"type"`

	// Value Value of the threshold.
	Value float64 `json:"value"`
}

// NotificationRuleBalanceThresholdValueType Type of the rule in the balance threshold specification.
type NotificationRuleBalanceThresholdValueType string

// NotificationRuleCreateRequest Request with input parameters for creating new notification rule with entitlements.balance.threashold type.
type NotificationRuleCreateRequest = NotificationRuleBalanceThresholdCreateRequest

// NotificationRuleOrderBy Order by options for notification channels.
type NotificationRuleOrderBy string

// NotificationRulePaginatedResponse Paginated response
type NotificationRulePaginatedResponse struct {
	// Items The items in the current page.
	Items []NotificationRule `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// Numeric Numeric represents an arbitrary precision number.
type Numeric = string

// OAuth2AuthorizationCodeGrantErrorType OAuth2 authorization code grant error types.
type OAuth2AuthorizationCodeGrantErrorType string

// Percentage Numeric representation of a percentage
type Percentage = string

// Period A period with a start and end time.
type Period struct {
	// From Period start time.
	From time.Time `json:"from"`

	// To Period end time.
	To time.Time `json:"to"`
}

// PhasesOrderBy Order by options for plan phases.
type PhasesOrderBy string

// Plan Plans provide a template for subscriptions.
type Plan struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Currency The currency code of the plan.
	Currency CurrencyCode `json:"currency"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EffectiveFrom The date and time when the plan becomes effective. When not specified, the plan is a draft.
	EffectiveFrom *time.Time `json:"effectiveFrom,omitempty"`

	// EffectiveTo The date and time when the plan is no longer effective. When not specified, the plan is effective indefinitely.
	EffectiveTo *time.Time `json:"effectiveTo,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Key A semi-unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Phases The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
	// A phase switch occurs only at the end of a billing period, ensuring that a single subscription invoice will not include charges from different phase prices.
	Phases []PlanPhase `json:"phases"`

	// Status The status of the plan.
	// Computed based on the effective start and end dates:
	// - draft = no effectiveFrom
	// - active = effectiveFrom <= now < effectiveTo
	// - archived / inactive = effectiveTo <= now
	// - scheduled = now < effectiveFrom < effectiveTo
	Status PlanStatus `json:"status"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// Version Version of the plan. Incremented when the plan is updated.
	Version int `json:"version"`
}

// PlanCreate Resource create operation model.
type PlanCreate struct {
	// Currency The currency code of the plan.
	Currency CurrencyCode `json:"currency"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Key A semi-unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Phases The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
	// A phase switch occurs only at the end of a billing period, ensuring that a single subscription invoice will not include charges from different phase prices.
	Phases []PlanPhase `json:"phases"`
}

// PlanOrderBy Order by options for plans.
type PlanOrderBy string

// PlanPaginatedResponse Paginated response
type PlanPaginatedResponse struct {
	// Items The items in the current page.
	Items []Plan `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// PlanPhase The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
type PlanPhase struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Discounts The discounts on the plan.
	Discounts *[]Discount `json:"discounts,omitempty"`

	// Key Unique key among the plan phases. Used to reference the phase in the subscription & plan.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// RateCards The rate cards of the plan.
	RateCards []RateCard `json:"rateCards"`

	// StartAfter The time after which the plan starts compared to subscription start
	StartAfter *string `json:"startAfter"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// PlanPhaseCreate Resource create operation model.
type PlanPhaseCreate struct {
	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Discounts The discounts on the plan.
	Discounts *[]Discount `json:"discounts,omitempty"`

	// Key Unique key among the plan phases. Used to reference the phase in the subscription & plan.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// RateCards The rate cards of the plan.
	RateCards []RateCard `json:"rateCards"`

	// StartAfter The time after which the plan starts compared to subscription start
	StartAfter *string `json:"startAfter"`
}

// PlanPhasePaginatedResponse Paginated response
type PlanPhasePaginatedResponse struct {
	// Items The items in the current page.
	Items []PlanPhase `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// PlanPhaseUpdate Resource create or update operation model.
type PlanPhaseUpdate struct {
	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Discounts The discounts on the plan.
	Discounts *[]Discount `json:"discounts,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name *string `json:"name,omitempty"`

	// RateCards The rate cards of the plan.
	RateCards *[]RateCard `json:"rateCards,omitempty"`

	// StartAfter The time after which the plan starts compared to subscription start
	StartAfter *string `json:"startAfter"`
}

// PlanReference References an exact plan.
type PlanReference struct {
	// Key The plan key.
	Key string `json:"key"`

	// Version The plan version.
	Version int `json:"version"`
}

// PlanStatus The status of a plan.
type PlanStatus string

// PlanUpdate Resource create or update operation model.
type PlanUpdate struct {
	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name *string `json:"name,omitempty"`

	// Phases The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
	// A phase switch occurs only at the end of a billing period, ensuring that a single subscription invoice will not include charges from different phase prices.
	Phases *[]PlanPhase `json:"phases,omitempty"`
}

// PortalToken A consumer portal token.
//
// Validator doesn't obey required for readOnly properties
// See: https://github.com/stoplightio/spectral/issues/1274
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed.
	AllowedMeterSlugs *[]string `json:"allowedMeterSlugs,omitempty"`

	// CreatedAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Expired   *bool      `json:"expired,omitempty"`

	// ExpiresAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id      *string `json:"id,omitempty"`
	Subject string  `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// PricePaymentTerm The payment term of a flat price.
// One of: in_advance or in_arrears.
type PricePaymentTerm string

// PriceTier A price tier.
// At least one price component is required in each tier.
type PriceTier struct {
	// FlatPrice The flat price component of the tier.
	FlatPrice *FlatPrice `json:"flatPrice"`

	// UnitPrice The unit price component of the tier.
	UnitPrice *UnitPrice `json:"unitPrice"`

	// UpToAmount Up to and including to this quantity will be contained in the tier.
	// If null, the tier is open-ended.
	UpToAmount *float64 `json:"upToAmount"`
}

// ProfilePaginatedResponse Paginated response
type ProfilePaginatedResponse struct {
	// Items The items in the current page.
	Items []BillingProfile `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// RateCard A rate card defines the pricing and entitlement of a feature or service.
type RateCard struct {
	union json.RawMessage
}

// RateCardBooleanEntitlement Entitlement template of a boolean entitlement.
type RateCardBooleanEntitlement struct {
	// Metadata Additional metadata for the feature.
	Metadata *Metadata                      `json:"metadata,omitempty"`
	Type     RateCardBooleanEntitlementType `json:"type"`
}

// RateCardBooleanEntitlementType defines model for RateCardBooleanEntitlement.Type.
type RateCardBooleanEntitlementType string

// RateCardEntitlement Entitlement templates are used to define the entitlements of a plan.
// Features are omitted from the entitlement template, as they are defined in the rate card.
type RateCardEntitlement struct {
	union json.RawMessage
}

// RateCardFlatFee A flat fee rate card defines a one-time purchase or a recurring fee.
type RateCardFlatFee struct {
	// BillingCadence The billing cadence of the rate card.
	// When null it means it is a one time fee.
	BillingCadence *string `json:"billingCadence"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EntitlementTemplate Entitlement templates are used to define the entitlements of a plan.
	// Features are omitted from the entitlement template, as they are defined in the rate card.
	EntitlementTemplate *RateCardEntitlement `json:"entitlementTemplate,omitempty"`

	// FeatureKey The feature the customer is entitled to use.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Key A semi-unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Price The price of the rate card.
	// When null, the feature or service is free.
	Price *FlatPriceWithPaymentTerm `json:"price"`

	// TaxConfig The tax config of the rate card.
	// When undefined, the tax config of the feature or the default tax config of the plan is used.
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`

	// Type The type of the RateCard.
	Type RateCardFlatFeeType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// RateCardFlatFeeType The type of the RateCard.
type RateCardFlatFeeType string

// RateCardFlatFeeUpdateItem A flat fee rate card defines a one-time purchase or a recurring fee.
type RateCardFlatFeeUpdateItem struct {
	// BillingCadence The billing cadence of the rate card.
	// When null it means it is a one time fee.
	BillingCadence *string `json:"billingCadence"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EntitlementTemplate Entitlement templates are used to define the entitlements of a plan.
	// Features are omitted from the entitlement template, as they are defined in the rate card.
	EntitlementTemplate *RateCardEntitlement `json:"entitlementTemplate,omitempty"`

	// FeatureKey The feature the customer is entitled to use.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Price The price of the rate card.
	// When null, the feature or service is free.
	Price *FlatPriceWithPaymentTerm `json:"price"`

	// TaxConfig The tax config of the rate card.
	// When undefined, the tax config of the feature or the default tax config of the plan is used.
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`

	// Type The type of the RateCard.
	Type RateCardFlatFeeUpdateItemType `json:"type"`
}

// RateCardFlatFeeUpdateItemType The type of the RateCard.
type RateCardFlatFeeUpdateItemType string

// RateCardMeteredEntitlement The entitlement template with a metered entitlement.
type RateCardMeteredEntitlement struct {
	// IsSoftLimit If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.
	IsSoftLimit *bool `json:"isSoftLimit,omitempty"`

	// IssueAfterReset You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance.
	// If an amount is specified here, a grant will be created alongside the entitlement with the specified amount.
	// That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.
	// Manually creating such a grant would mean having the "amount", "minRolloverAmount", and "maxRolloverAmount" fields all be the same.
	IssueAfterReset *float64 `json:"issueAfterReset,omitempty"`

	// IssueAfterResetPriority Defines the grant priority for the default grant.
	IssueAfterResetPriority *uint8 `json:"issueAfterResetPriority,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata `json:"metadata,omitempty"`

	// PreserveOverageAtReset If true, the overage is preserved at reset. If false, the usage is reset to 0.
	PreserveOverageAtReset *bool                          `json:"preserveOverageAtReset,omitempty"`
	Type                   RateCardMeteredEntitlementType `json:"type"`

	// UsagePeriod The interval of the metered entitlement.
	// Defaults to the billing cadence of the rate card.
	UsagePeriod *string `json:"usagePeriod,omitempty"`
}

// RateCardMeteredEntitlementType defines model for RateCardMeteredEntitlement.Type.
type RateCardMeteredEntitlementType string

// RateCardStaticEntitlement Entitlement template of a static entitlement.
type RateCardStaticEntitlement struct {
	// Config The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object.
	Config json.RawMessage `json:"config"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata                     `json:"metadata,omitempty"`
	Type     RateCardStaticEntitlementType `json:"type"`
}

// RateCardStaticEntitlementType defines model for RateCardStaticEntitlement.Type.
type RateCardStaticEntitlementType string

// RateCardUpdateItem A rate card defines the pricing and entitlement of a feature or service.
type RateCardUpdateItem struct {
	union json.RawMessage
}

// RateCardUsageBased A usage-based rate card defines a price based on usage.
type RateCardUsageBased struct {
	// BillingCadence The billing cadence of the rate card.
	BillingCadence string `json:"billingCadence"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EntitlementTemplate Entitlement templates are used to define the entitlements of a plan.
	// Features are omitted from the entitlement template, as they are defined in the rate card.
	EntitlementTemplate *RateCardEntitlement `json:"entitlementTemplate,omitempty"`

	// FeatureKey The feature the customer is entitled to use.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Key A semi-unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name  string                   `json:"name"`
	Price *RateCardUsageBasedPrice `json:"price"`

	// TaxConfig The tax config of the rate card.
	// When undefined, the tax config of the feature or the default tax config of the plan is used.
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`

	// Type The type of the RateCard.
	Type RateCardUsageBasedType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// RateCardUsageBasedType The type of the RateCard.
type RateCardUsageBasedType string

// RateCardUsageBasedPrice The price of the usage based rate card.
type RateCardUsageBasedPrice struct {
	union json.RawMessage
}

// RateCardUsageBasedUpdateItem A usage-based rate card defines a price based on usage.
type RateCardUsageBasedUpdateItem struct {
	// BillingCadence The billing cadence of the rate card.
	BillingCadence string `json:"billingCadence"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EntitlementTemplate Entitlement templates are used to define the entitlements of a plan.
	// Features are omitted from the entitlement template, as they are defined in the rate card.
	EntitlementTemplate *RateCardEntitlement `json:"entitlementTemplate,omitempty"`

	// FeatureKey The feature the customer is entitled to use.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name  string                   `json:"name"`
	Price *RateCardUsageBasedPrice `json:"price"`

	// TaxConfig The tax config of the rate card.
	// When undefined, the tax config of the feature or the default tax config of the plan is used.
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`

	// Type The type of the RateCard.
	Type RateCardUsageBasedUpdateItemType `json:"type"`
}

// RateCardUsageBasedUpdateItemType The type of the RateCard.
type RateCardUsageBasedUpdateItemType string

// RecurringPeriod Recurring period with an interval and an anchor.
type RecurringPeriod struct {
	// Anchor A date-time anchor to base the recurring period on.
	Anchor time.Time `json:"anchor"`

	// Interval The unit of time for the interval.
	Interval RecurringPeriodInterval `json:"interval"`
}

// RecurringPeriodCreateInput Recurring period with an interval and an anchor.
type RecurringPeriodCreateInput struct {
	// Anchor A date-time anchor to base the recurring period on.
	Anchor *time.Time `json:"anchor,omitempty"`

	// Interval The unit of time for the interval.
	Interval RecurringPeriodInterval `json:"interval"`
}

// RecurringPeriodInterval The unit of time for the interval.
// One of: `day`, `week`, `month`, or `year`.
type RecurringPeriodInterval string

// RemovePhaseShifting The direction of the phase shift when a phase is removed.
type RemovePhaseShifting string

// ResetEntitlementUsageInput Reset parameters
type ResetEntitlementUsageInput struct {
	// EffectiveAt The time at which the reset takes effect, defaults to now. The reset cannot be in the future. The provided value is truncated to the minute due to how historical meter data is stored.
	EffectiveAt *time.Time `json:"effectiveAt,omitempty"`

	// PreserveOverage Determines whether the overage is preserved or forgiven, overriding the entitlement's default behavior.
	// - If true, the overage is preserved.
	// - If false, the overage is forgiven.
	PreserveOverage *bool `json:"preserveOverage,omitempty"`

	// RetainAnchor Determines whether the usage period anchor is retained or reset to the effectiveAt time.
	// - If true, the usage period anchor is retained.
	// - If false, the usage period anchor is reset to the effectiveAt time.
	RetainAnchor *bool `json:"retainAnchor,omitempty"`
}

// SandboxApp Sandbox app can be used for testing OpenMeter features.
//
// The app is not creating anything in external systems, thus it is safe to use for
// verifying OpenMeter features.
type SandboxApp struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Listing The marketplace listing that this installed app is based on.
	Listing MarketplaceListing `json:"listing"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Status Status of the app connection.
	Status AppStatus `json:"status"`

	// Type The app's type is Sandbox.
	Type SandboxAppType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// SandboxAppType The app's type is Sandbox.
type SandboxAppType string

// ServiceUnavailableProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type ServiceUnavailableProblemResponse = UnexpectedProblemResponse

// SortOrder The order direction.
type SortOrder string

// StripeApp A installed Stripe app object.
type StripeApp struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Listing The marketplace listing that this installed app is based on.
	Listing MarketplaceListing `json:"listing"`

	// Livemode Livemode, true if the app is in production mode.
	Livemode bool `json:"livemode"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Status Status of the app connection.
	Status AppStatus `json:"status"`

	// StripeAccountId The Stripe account ID.
	StripeAccountId string `json:"stripeAccountId"`

	// Type The app's type is Stripe.
	Type StripeAppType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// StripeAppType The app's type is Stripe.
type StripeAppType string

// StripeCheckoutSessionMode Stripe CheckoutSession.mode
type StripeCheckoutSessionMode string

// StripePaymentIntentStatus Stripe payment intent status.
type StripePaymentIntentStatus string

// StripeSetupIntent Stripe setup intent.
type StripeSetupIntent struct {
	// Customer The setup intent customer.
	Customer string `json:"customer"`

	// Id The setup intent id.
	Id string `json:"id"`

	// Metadata The setup intent metadata.
	Metadata map[string]string `json:"metadata"`

	// PaymentMethod The setup intent payment method.
	PaymentMethod *string `json:"payment_method,omitempty"`

	// PaymentMethodTypes The setup intent payment method types.
	PaymentMethodTypes *[]string `json:"payment_method_types,omitempty"`

	// Status The setup intent status.
	Status StripePaymentIntentStatus `json:"status"`
}

// StripeTaxConfig The tax config for Stripe.
type StripeTaxConfig struct {
	// Code Product tax code.
	//
	// See: https://docs.stripe.com/tax/tax-codes
	Code string `json:"code"`
}

// StripeWebhookEvent Stripe webhook event.
type StripeWebhookEvent struct {
	// Created The event created timestamp.
	Created int32 `json:"created"`

	// Data The event data.
	Data struct {
		// Object Stripe setup intent.
		Object StripeSetupIntent `json:"object"`
	} `json:"data"`

	// Id The event ID.
	Id string `json:"id"`

	// Livemode Live mode.
	Livemode bool `json:"livemode"`

	// Type The event type.
	Type string `json:"type"`
}

// StripeWebhookResponse Stripe webhook response.
type StripeWebhookResponse struct {
	// AppId ULID (Universally Unique Lexicographically Sortable Identifier).
	AppId string `json:"appId"`

	// CustomerId ULID (Universally Unique Lexicographically Sortable Identifier).
	CustomerId *string `json:"customerId,omitempty"`

	// NamespaceId ULID (Universally Unique Lexicographically Sortable Identifier).
	NamespaceId string `json:"namespaceId"`
}

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	// CurrentPeriodEnd [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	CurrentPeriodEnd *time.Time `json:"currentPeriodEnd,omitempty"`

	// CurrentPeriodStart [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	CurrentPeriodStart *time.Time `json:"currentPeriodStart,omitempty"`

	// DisplayName A human-readable display name for the subject.
	DisplayName *string `json:"displayName"`

	// Id A unique identifier for the subject.
	Id string `json:"id"`

	// Key A unique, human-readable identifier for the subject.
	Key              string                  `json:"key"`
	Metadata         *map[string]interface{} `json:"metadata"`
	StripeCustomerId *string                 `json:"stripeCustomerId"`
}

// Subscription Subscription is an exact subscription instance.
type Subscription struct {
	// ActiveTo If the subscription is canceled or otherwise have to end activeTo denotes the end date.
	ActiveTo *time.Time `json:"activeTo,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Currency The currency code of the subscription.
	// Will be revised once we add multi currency support.
	Currency CurrencyCode `json:"currency"`

	// CustomerId The customer ID of the subscription.
	CustomerId string `json:"customerId"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Plan The base plan of the subscription.
	Plan PlanReference `json:"plan"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// SubscriptionEditAdd Subscription item add operation.
type SubscriptionEditAdd struct {
	Op   SubscriptionEditAddOp `json:"op"`
	Path string                `json:"path"`

	// Value Subscription phase create input.
	Value SubscriptionPhaseCreate `json:"value"`
}

// SubscriptionEditAddOp defines model for SubscriptionEditAdd.Op.
type SubscriptionEditAddOp string

// SubscriptionEditAddItem Subscription item add operation.
type SubscriptionEditAddItem struct {
	Op   SubscriptionEditAddItemOp `json:"op"`
	Path string                    `json:"path"`

	// Value A rate card defines the pricing and entitlement of a feature or service.
	Value RateCard `json:"value"`
}

// SubscriptionEditAddItemOp defines model for SubscriptionEditAddItem.Op.
type SubscriptionEditAddItemOp string

// SubscriptionEditAddUpdateItem Subscription item add operation.
type SubscriptionEditAddUpdateItem struct {
	Op   SubscriptionEditAddUpdateItemOp `json:"op"`
	Path string                          `json:"path"`

	// Value A rate card defines the pricing and entitlement of a feature or service.
	Value RateCardUpdateItem `json:"value"`
}

// SubscriptionEditAddUpdateItemOp defines model for SubscriptionEditAddUpdateItem.Op.
type SubscriptionEditAddUpdateItemOp string

// SubscriptionEditExtend Subscription phase extend operation.
type SubscriptionEditExtend struct {
	Op    SubscriptionEditExtendOp `json:"op"`
	Path  string                   `json:"path"`
	Value struct {
		ExtendBy string `json:"extendBy"`
	} `json:"value"`
}

// SubscriptionEditExtendOp defines model for SubscriptionEditExtend.Op.
type SubscriptionEditExtendOp string

// SubscriptionEditRemoveItem Subscription phase remove operation.
type SubscriptionEditRemoveItem struct {
	Op   SubscriptionEditRemoveItemOp `json:"op"`
	Path string                       `json:"path"`
}

// SubscriptionEditRemoveItemOp defines model for SubscriptionEditRemoveItem.Op.
type SubscriptionEditRemoveItemOp string

// SubscriptionEditRemoveUpdateItem Subscription phase remove operation.
type SubscriptionEditRemoveUpdateItem struct {
	Op   SubscriptionEditRemoveUpdateItemOp `json:"op"`
	Path string                             `json:"path"`
}

// SubscriptionEditRemoveUpdateItemOp defines model for SubscriptionEditRemoveUpdateItem.Op.
type SubscriptionEditRemoveUpdateItemOp string

// SubscriptionEditRemoveWithValue Subscription item remove operation with a value.
type SubscriptionEditRemoveWithValue struct {
	Op    SubscriptionEditRemoveWithValueOp `json:"op"`
	Path  string                            `json:"path"`
	Value struct {
		// Shift The direction of the phase shift when a phase is removed.
		Shift RemovePhaseShifting `json:"shift"`
	} `json:"value"`
}

// SubscriptionEditRemoveWithValueOp defines model for SubscriptionEditRemoveWithValue.Op.
type SubscriptionEditRemoveWithValueOp string

// SubscriptionExpanded Expanded subscription
type SubscriptionExpanded struct {
	// ActiveTo If the subscription is canceled or otherwise have to end activeTo denotes the end date.
	ActiveTo *time.Time `json:"activeTo,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// Currency The currency code of the subscription.
	// Will be revised once we add multi currency support.
	Currency CurrencyCode `json:"currency"`

	// CustomerId The customer ID of the subscription.
	CustomerId string `json:"customerId"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id string `json:"id"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name   string                      `json:"name"`
	Phases []SubscriptionPhaseExpanded `json:"phases"`

	// Plan The base plan of the subscription.
	Plan PlanReference `json:"plan"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// SubscriptionItem The actual contents of the Subscription, what the user gets, what they pay, etc...
type SubscriptionItem struct {
	// BillingCandence The billing cadence of the rate card.
	// When null, the rate card is a one-time purchase.
	BillingCandence *string `json:"billingCandence"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Included Describes what access is gained via the SubscriptionItem
	Included *struct {
		// Entitlement Entitlement templates are used to define the entitlements of a plan.
		// Features are omitted from the entitlement template, as they are defined in the rate card.
		Entitlement *Entitlement `json:"entitlement,omitempty"`

		// Feature The feature the customer is entitled to use.
		Feature Feature `json:"feature"`
	} `json:"included,omitempty"`

	// Key The identifier of the RateCard.
	// SubscriptionItem/RateCard can be identified, it has a reference:
	//
	// 1. If a Feature is associated with the SubscriptionItem, it is identified by the Feature
	// 1.1 It can be an ID reference, for an exact version of the Feature (Features can change across versions)
	// 1.2 It can be a Key reference, which always refers to the latest (active or inactive) version of a Feature
	//
	// 2. If a Feature is not associated with the SubscriptionItem, it is referenced by the Price
	//
	// We say “referenced by the Price” regardless of how a price itself is referenced, it colloquially makes sense to say “paying the same price for the same thing”. In practice this should be derived from what's printed on the invoice line-item.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Price The price of the rate card.
	// When null, the feature or service is free.
	Price SubscriptionItem_Price `json:"price"`

	// TaxConfig The tax config of the Subscription Item.
	// When undefined, the tax config of the feature or the default tax config of the plan is used.
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// SubscriptionItemPrice0 Flat price with payment term.
type SubscriptionItemPrice0 = FlatPriceWithPaymentTerm

// SubscriptionItemPrice1 Unit price with spend commitments.
type SubscriptionItemPrice1 = UnitPriceWithCommitments

// SubscriptionItemPrice2 Tiered price with spend commitments.
type SubscriptionItemPrice2 = TieredPriceWithCommitments

// SubscriptionItemPrice3 Flat price with payment term.
type SubscriptionItemPrice3 = FlatPriceWithPaymentTerm

// SubscriptionItem_Price The price of the rate card.
// When null, the feature or service is free.
type SubscriptionItem_Price struct {
	union json.RawMessage
}

// SubscriptionPhaseCreate Subscription phase create input.
type SubscriptionPhaseCreate struct {
	// Discounts The discounts on the plan.
	Discounts *[]DiscountUpdateItem `json:"discounts,omitempty"`

	// Duration The intended duration of the new phase.
	Duration string `json:"duration"`

	// StartAfter Interval after the subscription starts to transition to the phase.
	// When null, the phase starts immediately after the subscription starts.
	StartAfter *string `json:"startAfter"`
}

// SubscriptionPhaseExpanded Expanded subscription phase
type SubscriptionPhaseExpanded struct {
	// ActiveFrom The time from which the phase is active.
	ActiveFrom time.Time `json:"activeFrom"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt time.Time `json:"createdAt"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Discounts The discounts on the plan.
	Discounts *[]Discount `json:"discounts,omitempty"`

	// Duration The intended duration of the new phase.
	Duration string             `json:"duration"`
	Items    []SubscriptionItem `json:"items"`

	// Key A locally unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// SvixOperationalWebhookRequest Operational webhook reqeuest sent by Svix.
type SvixOperationalWebhookRequest struct {
	// Data The payload of the Svix operational webhook request.
	Data map[string]string `json:"data"`

	// Type The type of the Svix operational webhook request.
	Type SvixOperationalWebhookRequestType `json:"type"`
}

// SvixOperationalWebhookRequestType The type of the Svix operational webhook request.
type SvixOperationalWebhookRequestType string

// TaxConfig Set of provider specific tax configs.
type TaxConfig struct {
	// Stripe Stripe tax config.
	Stripe *StripeTaxConfig `json:"stripe,omitempty"`
}

// TieredPriceMode The mode of the tiered price.
type TieredPriceMode string

// TieredPriceWithCommitments Tiered price with spend commitments.
type TieredPriceWithCommitments struct {
	// MaximumAmount The customer is limited to spend at most the amount.
	MaximumAmount *Numeric `json:"maximumAmount,omitempty"`

	// MinimumAmount The customer is committed to spend at least the amount.
	MinimumAmount *Numeric `json:"minimumAmount,omitempty"`

	// Mode Defines if the tiering mode is volume-based or graduated:
	// - In `volume`-based tiering, the maximum quantity within a period determines the per unit price.
	// - In `graduated` tiering, pricing can change as the quantity grows.
	Mode TieredPriceMode `json:"mode"`

	// Tiers The tiers of the tiered price.
	// At least one price component is required in each tier.
	Tiers []PriceTier                    `json:"tiers"`
	Type  TieredPriceWithCommitmentsType `json:"type"`
}

// TieredPriceWithCommitmentsType defines model for TieredPriceWithCommitments.Type.
type TieredPriceWithCommitmentsType string

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = UnexpectedProblemResponse

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = models.StatusProblem

// UnitPrice Unit price.
type UnitPrice struct {
	// Amount The amount of the unit price.
	Amount Numeric       `json:"amount"`
	Type   UnitPriceType `json:"type"`
}

// UnitPriceType defines model for UnitPrice.Type.
type UnitPriceType string

// UnitPriceWithCommitments Unit price with spend commitments.
type UnitPriceWithCommitments struct {
	// Amount The amount of the unit price.
	Amount Numeric `json:"amount"`

	// MaximumAmount The customer is limited to spend at most the amount.
	MaximumAmount *Numeric `json:"maximumAmount,omitempty"`

	// MinimumAmount The customer is committed to spend at least the amount.
	MinimumAmount *Numeric                     `json:"minimumAmount,omitempty"`
	Type          UnitPriceWithCommitmentsType `json:"type"`
}

// UnitPriceWithCommitmentsType defines model for UnitPriceWithCommitments.Type.
type UnitPriceWithCommitmentsType string

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// WindowedBalanceHistory The windowed balance history.
type WindowedBalanceHistory struct {
	// BurndownHistory Grant burndown history.
	BurndownHistory []GrantBurnDownHistorySegment `json:"burndownHistory"`

	// WindowedHistory The windowed balance history.
	// - It only returns rows for windows where there was usage.
	// - The windows are inclusive at their start and exclusive at their end.
	// - The last window may be smaller than the window size and is inclusive at both ends.
	WindowedHistory []BalanceHistoryWindow `json:"windowedHistory"`
}

// BillingInvoiceListParamsExpand defines model for BillingInvoiceListParams.expand.
type BillingInvoiceListParamsExpand = []BillingInvoiceExpand

// BillingInvoiceListParamsExtendedStatuses defines model for BillingInvoiceListParams.extendedStatuses.
type BillingInvoiceListParamsExtendedStatuses = []BillingInvoiceExtendedStatus

// BillingInvoiceListParamsIssuedAfter defines model for BillingInvoiceListParams.issuedAfter.
type BillingInvoiceListParamsIssuedAfter = time.Time

// BillingInvoiceListParamsIssuedBefore defines model for BillingInvoiceListParams.issuedBefore.
type BillingInvoiceListParamsIssuedBefore = time.Time

// BillingInvoiceListParamsStatuses defines model for BillingInvoiceListParams.statuses.
type BillingInvoiceListParamsStatuses = []BillingInvoiceStatus

// CustomerOrderByOrderingOrder The order direction.
type CustomerOrderByOrderingOrder = SortOrder

// CustomerOrderByOrderingOrderBy Order by options for customers.
type CustomerOrderByOrderingOrderBy = CustomerOrderBy

// CustomerOverrideOrderByOrderingOrder The order direction.
type CustomerOverrideOrderByOrderingOrder = SortOrder

// CustomerOverrideOrderByOrderingOrderBy Order by options for customers.
type CustomerOverrideOrderByOrderingOrderBy = BillingCustomerOverrideOrderBy

// EntitlementOrderByOrderingOrder The order direction.
type EntitlementOrderByOrderingOrder = SortOrder

// EntitlementOrderByOrderingOrderBy Order by options for entitlements.
type EntitlementOrderByOrderingOrderBy = EntitlementOrderBy

// FeatureOrderByOrderingOrder The order direction.
type FeatureOrderByOrderingOrder = SortOrder

// FeatureOrderByOrderingOrderBy Order by options for features.
type FeatureOrderByOrderingOrderBy = FeatureOrderBy

// GrantOrderByOrderingOrder The order direction.
type GrantOrderByOrderingOrder = SortOrder

// GrantOrderByOrderingOrderBy Order by options for grants.
type GrantOrderByOrderingOrderBy = GrantOrderBy

// InvoiceOrderByOrderingOrder The order direction.
type InvoiceOrderByOrderingOrder = SortOrder

// InvoiceOrderByOrderingOrderBy InvoiceOrderBy specifies the ordering options for invoice listing.
type InvoiceOrderByOrderingOrderBy = BillingInvoiceOrderBy

// LimitOffsetLimit defines model for LimitOffset.limit.
type LimitOffsetLimit = int

// LimitOffsetOffset defines model for LimitOffset.offset.
type LimitOffsetOffset = int

// MarketplaceApiKeyInstallRequestType Type of the app.
type MarketplaceApiKeyInstallRequestType = AppType

// MarketplaceOAuth2InstallAuthorizeRequestType Type of the app.
type MarketplaceOAuth2InstallAuthorizeRequestType = AppType

// MeterQueryFilterGroupBy defines model for MeterQuery.filterGroupBy.
type MeterQueryFilterGroupBy map[string]string

// MeterQueryFrom defines model for MeterQuery.from.
type MeterQueryFrom = time.Time

// MeterQueryGroupBy defines model for MeterQuery.groupBy.
type MeterQueryGroupBy = []string

// MeterQuerySubject defines model for MeterQuery.subject.
type MeterQuerySubject = []string

// MeterQueryTo defines model for MeterQuery.to.
type MeterQueryTo = time.Time

// MeterQueryWindowSize Aggregation window size.
type MeterQueryWindowSize = WindowSize

// MeterQueryWindowTimeZone defines model for MeterQuery.windowTimeZone.
type MeterQueryWindowTimeZone = string

// NotificationChannelOrderByOrderingOrder The order direction.
type NotificationChannelOrderByOrderingOrder = SortOrder

// NotificationChannelOrderByOrderingOrderBy Order by options for notification channels.
type NotificationChannelOrderByOrderingOrderBy = NotificationChannelOrderBy

// NotificationEventOrderByOrderingOrder The order direction.
type NotificationEventOrderByOrderingOrder = SortOrder

// NotificationEventOrderByOrderingOrderBy Order by options for notification channels.
type NotificationEventOrderByOrderingOrderBy = NotificationEventOrderBy

// NotificationRuleOrderByOrderingOrder The order direction.
type NotificationRuleOrderByOrderingOrder = SortOrder

// NotificationRuleOrderByOrderingOrderBy Order by options for notification channels.
type NotificationRuleOrderByOrderingOrderBy = NotificationRuleOrderBy

// OAuth2AuthorizationCodeGrantErrorParamsError OAuth2 authorization code grant error types.
type OAuth2AuthorizationCodeGrantErrorParamsError = OAuth2AuthorizationCodeGrantErrorType

// OAuth2AuthorizationCodeGrantErrorParamsErrorDescription defines model for OAuth2AuthorizationCodeGrantErrorParams.error_description.
type OAuth2AuthorizationCodeGrantErrorParamsErrorDescription = string

// OAuth2AuthorizationCodeGrantErrorParamsErrorUri defines model for OAuth2AuthorizationCodeGrantErrorParams.error_uri.
type OAuth2AuthorizationCodeGrantErrorParamsErrorUri = string

// OAuth2AuthorizationCodeGrantSuccessParamsCode defines model for OAuth2AuthorizationCodeGrantSuccessParams.code.
type OAuth2AuthorizationCodeGrantSuccessParamsCode = string

// OAuth2AuthorizationCodeGrantSuccessParamsState defines model for OAuth2AuthorizationCodeGrantSuccessParams.state.
type OAuth2AuthorizationCodeGrantSuccessParamsState = string

// PaginatedQueryPage defines model for PaginatedQuery.page.
type PaginatedQueryPage = int

// PaginatedQueryPageSize defines model for PaginatedQuery.pageSize.
type PaginatedQueryPageSize = int

// PaginationPage defines model for Pagination.page.
type PaginationPage = int

// PaginationPageSize defines model for Pagination.pageSize.
type PaginationPageSize = int

// PhasesOrderByOrderingOrder The order direction.
type PhasesOrderByOrderingOrder = SortOrder

// PhasesOrderByOrderingOrderBy Order by options for plan phases.
type PhasesOrderByOrderingOrderBy = PhasesOrderBy

// PlanOrderByOrderingOrder The order direction.
type PlanOrderByOrderingOrder = SortOrder

// PlanOrderByOrderingOrderBy Order by options for plans.
type PlanOrderByOrderingOrderBy = PlanOrderBy

// ProfileOrderByOrderingOrder The order direction.
type ProfileOrderByOrderingOrder = SortOrder

// ProfileOrderByOrderingOrderBy ProfileOrderBy specifies the ordering options for profiles
type ProfileOrderByOrderingOrderBy = BillingProfileOrderBy

// QueryCustomerListIncludeDeleted defines model for queryCustomerList.includeDeleted.
type QueryCustomerListIncludeDeleted = bool

// QueryCustomerListName defines model for queryCustomerList.name.
type QueryCustomerListName = string

// QueryCustomerListPrimaryEmail defines model for queryCustomerList.primaryEmail.
type QueryCustomerListPrimaryEmail = string

// QueryCustomerListSubject defines model for queryCustomerList.subject.
type QueryCustomerListSubject = string

// ListAppsParams defines parameters for ListApps.
type ListAppsParams struct {
	// Page The page number.
	Page *PaginatedQueryPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The number of items in the page.
	PageSize *PaginatedQueryPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// BillingListCustomerOverridesParams defines parameters for BillingListCustomerOverrides.
type BillingListCustomerOverridesParams struct {
	BillingProfile *[]string `form:"billingProfile,omitempty" json:"billingProfile,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *CustomerOverrideOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *CustomerOverrideOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// BillingListInvoicesParams defines parameters for BillingListInvoices.
type BillingListInvoicesParams struct {
	Customers        *[]string                                 `form:"customers,omitempty" json:"customers,omitempty"`
	Statuses         *BillingInvoiceListParamsStatuses         `form:"statuses,omitempty" json:"statuses,omitempty"`
	ExtendedStatuses *BillingInvoiceListParamsExtendedStatuses `form:"extendedStatuses,omitempty" json:"extendedStatuses,omitempty"`
	IssuedAfter      *BillingInvoiceListParamsIssuedAfter      `form:"issuedAfter,omitempty" json:"issuedAfter,omitempty"`
	IssuedBefore     *BillingInvoiceListParamsIssuedBefore     `form:"issuedBefore,omitempty" json:"issuedBefore,omitempty"`
	Expand           *BillingInvoiceListParamsExpand           `form:"expand,omitempty" json:"expand,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *InvoiceOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *InvoiceOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// BillingListInvoicesByCustomerParams defines parameters for BillingListInvoicesByCustomer.
type BillingListInvoicesByCustomerParams struct {
	Statuses         *BillingInvoiceListParamsStatuses         `form:"statuses,omitempty" json:"statuses,omitempty"`
	ExtendedStatuses *BillingInvoiceListParamsExtendedStatuses `form:"extendedStatuses,omitempty" json:"extendedStatuses,omitempty"`
	IssuedAfter      *BillingInvoiceListParamsIssuedAfter      `form:"issuedAfter,omitempty" json:"issuedAfter,omitempty"`
	IssuedBefore     *BillingInvoiceListParamsIssuedBefore     `form:"issuedBefore,omitempty" json:"issuedBefore,omitempty"`
	Expand           *BillingInvoiceListParamsExpand           `form:"expand,omitempty" json:"expand,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *InvoiceOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *InvoiceOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// BillingGetInvoiceByCustomerInvoiceIdParams defines parameters for BillingGetInvoiceByCustomerInvoiceId.
type BillingGetInvoiceByCustomerInvoiceIdParams struct {
	Expand []BillingInvoiceExpand `form:"expand" json:"expand"`
}

// BillingListProfilesParams defines parameters for BillingListProfiles.
type BillingListProfilesParams struct {
	IncludeArchived *bool                   `form:"includeArchived,omitempty" json:"includeArchived,omitempty"`
	Expand          *[]BillingProfileExpand `form:"expand,omitempty" json:"expand,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *ProfileOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *ProfileOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// BillingGetProfileParams defines parameters for BillingGetProfile.
type BillingGetProfileParams struct {
	Expand *[]BillingProfileExpand `form:"expand,omitempty" json:"expand,omitempty"`
}

// ListCustomersParams defines parameters for ListCustomers.
type ListCustomersParams struct {
	// Order The order direction.
	Order *CustomerOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *CustomerOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// IncludeDeleted Include deleted customers.
	IncludeDeleted *QueryCustomerListIncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// Name Filter customers by name.
	// Case-insensitive partial match.
	Name *QueryCustomerListName `form:"name,omitempty" json:"name,omitempty"`

	// PrimaryEmail Filter customers by primary email.
	// Case-insensitive partial match.
	PrimaryEmail *QueryCustomerListPrimaryEmail `form:"primaryEmail,omitempty" json:"primaryEmail,omitempty"`

	// Subject Filter customers by usage attribution subject.
	// Case-insensitive partial match.
	Subject *QueryCustomerListSubject `form:"subject,omitempty" json:"subject,omitempty"`

	// Page The page number.
	Page *PaginatedQueryPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The number of items in the page.
	PageSize *PaginatedQueryPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// ListEntitlementsParams defines parameters for ListEntitlements.
type ListEntitlementsParams struct {
	// Feature Filtering by multiple features.
	//
	// Usage: `?feature=feature-1&feature=feature-2`
	Feature *[]string `form:"feature,omitempty" json:"feature,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: `?subject=customer-1&subject=customer-2`
	Subject *[]string `form:"subject,omitempty" json:"subject,omitempty"`

	// EntitlementType Filtering by multiple entitlement types.
	//
	// Usage: `?entitlementType=metered&entitlementType=boolean`
	EntitlementType *[]EntitlementType `form:"entitlementType,omitempty" json:"entitlementType,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *EntitlementOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *EntitlementOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// IngestedAtFrom Start date-time in RFC 3339 format.
	//
	// Inclusive.
	IngestedAtFrom *time.Time `form:"ingestedAtFrom,omitempty" json:"ingestedAtFrom,omitempty"`

	// IngestedAtTo End date-time in RFC 3339 format.
	//
	// Inclusive.
	IngestedAtTo *time.Time `form:"ingestedAtTo,omitempty" json:"ingestedAtTo,omitempty"`

	// HasError If not provided lists all events.
	//
	// If provided with true, only list events with processing error.
	//
	// If provided with false, only list events without processing error.
	HasError *bool `form:"hasError,omitempty" json:"hasError,omitempty"`

	// Id The event ID.
	//
	// Accepts partial ID.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Subject The event subject.
	//
	// Accepts partial subject.
	Subject *string `form:"subject,omitempty" json:"subject,omitempty"`

	// From Start date-time in RFC 3339 format.
	//
	// Inclusive.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	//
	// Inclusive.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// ListFeaturesParams defines parameters for ListFeatures.
type ListFeaturesParams struct {
	// MeterSlug Filter by meterSlug
	MeterSlug *[]string `form:"meterSlug,omitempty" json:"meterSlug,omitempty"`

	// IncludeArchived Filter by meterGroupByFilters
	IncludeArchived *bool `form:"includeArchived,omitempty" json:"includeArchived,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *FeatureOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *FeatureOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListGrantsParams defines parameters for ListGrants.
type ListGrantsParams struct {
	// Feature Filtering by multiple features.
	//
	// Usage: `?feature=feature-1&feature=feature-2`
	Feature *[]string `form:"feature,omitempty" json:"feature,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: `?subject=customer-1&subject=customer-2`
	Subject *[]string `form:"subject,omitempty" json:"subject,omitempty"`

	// IncludeDeleted Include deleted
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *GrantOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *GrantOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListMarketplaceListingsParams defines parameters for ListMarketplaceListings.
type ListMarketplaceListingsParams struct {
	// Page The page number.
	Page *PaginatedQueryPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The number of items in the page.
	PageSize *PaginatedQueryPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// MarketplaceAppAPIKeyInstallJSONBody defines parameters for MarketplaceAppAPIKeyInstall.
type MarketplaceAppAPIKeyInstallJSONBody struct {
	// ApiKey The API key for the provider.
	// For example, the Stripe API key.
	ApiKey string `json:"apiKey"`

	// Name Name of the application to install.
	//
	// If not set defaults to the marketplace item's description.
	Name *string `json:"name,omitempty"`
}

// MarketplaceOAuth2InstallAuthorizeParams defines parameters for MarketplaceOAuth2InstallAuthorize.
type MarketplaceOAuth2InstallAuthorizeParams struct {
	// State Required if the "state" parameter was present in the client authorization request.
	// The exact value received from the client:
	//
	// Unique, randomly generated, opaque, and non-guessable string that is sent
	// when starting an authentication request and validated when processing the response.
	State *OAuth2AuthorizationCodeGrantSuccessParamsState `form:"state,omitempty" json:"state,omitempty"`

	// Code Authorization code which the client will later exchange for an access token.
	// Required with the success response.
	Code *OAuth2AuthorizationCodeGrantSuccessParamsCode `form:"code,omitempty" json:"code,omitempty"`

	// Error Error code.
	// Required with the error response.
	Error *OAuth2AuthorizationCodeGrantErrorParamsError `form:"error,omitempty" json:"error,omitempty"`

	// ErrorDescription Optional human-readable text providing additional information,
	// used to assist the client developer in understanding the error that occurred.
	ErrorDescription *OAuth2AuthorizationCodeGrantErrorParamsErrorDescription `form:"error_description,omitempty" json:"error_description,omitempty"`

	// ErrorUri Optional uri identifying a human-readable web page with
	// information about the error, used to provide the client
	// developer with additional information about the error
	ErrorUri *OAuth2AuthorizationCodeGrantErrorParamsErrorUri `form:"error_uri,omitempty" json:"error_uri,omitempty"`
}

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	//
	// Inclusive.
	From *MeterQueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	//
	// Inclusive.
	To *MeterQueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *MeterQueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *MeterQueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering by multiple subjects.
	Subject *MeterQuerySubject `form:"subject,omitempty" json:"subject,omitempty"`

	// FilterGroupBy Simple filter for group bys with exact match.
	FilterGroupBy *MeterQueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *MeterQueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListNotificationChannelsParams defines parameters for ListNotificationChannels.
type ListNotificationChannelsParams struct {
	// IncludeDeleted Include deleted notification channels in response.
	//
	// Usage: `?includeDeleted=true`
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// IncludeDisabled Include disabled notification channels in response.
	//
	// Usage: `?includeDisabled=false`
	IncludeDisabled *bool `form:"includeDisabled,omitempty" json:"includeDisabled,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *NotificationChannelOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *NotificationChannelOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListNotificationEventsParams defines parameters for ListNotificationEvents.
type ListNotificationEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// Feature Filtering by multiple feature ids or keys.
	//
	// Usage: `?feature=feature-1&feature=feature-2`
	Feature *[]string `form:"feature,omitempty" json:"feature,omitempty"`

	// Subject Filtering by multiple subject ids or keys.
	//
	// Usage: `?subject=subject-1&subject=subject-2`
	Subject *[]string `form:"subject,omitempty" json:"subject,omitempty"`

	// Rule Filtering by multiple rule ids.
	//
	// Usage: `?rule=01J8J2XYZ2N5WBYK09EDZFBSZM&rule=01J8J4R4VZH180KRKQ63NB2VA5`
	Rule *[]string `form:"rule,omitempty" json:"rule,omitempty"`

	// Channel Filtering by multiple channel ids.
	//
	// Usage: `?channel=01J8J4RXH778XB056JS088PCYT&channel=01J8J4S1R1G9EVN62RG23A9M6J`
	Channel *[]string `form:"channel,omitempty" json:"channel,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *NotificationEventOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *NotificationEventOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListNotificationRulesParams defines parameters for ListNotificationRules.
type ListNotificationRulesParams struct {
	// IncludeDeleted Include deleted notification rules in response.
	//
	// Usage: `?includeDeleted=true`
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// IncludeDisabled Include disabled notification rules in response.
	//
	// Usage: `?includeDisabled=false`
	IncludeDisabled *bool `form:"includeDisabled,omitempty" json:"includeDisabled,omitempty"`

	// Feature Filtering by multiple feature ids/keys.
	//
	// Usage: `?feature=feature-1&feature=feature-2`
	Feature *[]string `form:"feature,omitempty" json:"feature,omitempty"`

	// Channel Filtering by multiple notifiaction channel ids.
	//
	// Usage: `?channel=01ARZ3NDEKTSV4RRFFQ69G5FAV&channel=01J8J2Y5X4NNGQS32CF81W95E3`
	Channel *[]string `form:"channel,omitempty" json:"channel,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *NotificationRuleOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *NotificationRuleOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListPlansParams defines parameters for ListPlans.
type ListPlansParams struct {
	// IncludeDeleted Include deleted plans in response.
	//
	// Usage: `?includeDeleted=true`
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// Id Filter by plan.id attribute
	Id *[]string `form:"id,omitempty" json:"id,omitempty"`

	// Key Filter by plan.key attribute
	Key *[]string `form:"key,omitempty" json:"key,omitempty"`

	// KeyVersion Filter by plan.key and plan.version attributes
	KeyVersion *map[string][]int `json:"keyVersion,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *PlanOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *PlanOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// GetPlanParams defines parameters for GetPlan.
type GetPlanParams struct {
	// IncludeLatest Include latest version of the Plan instead of the version in active state.
	//
	// Usage: `?includeLatest=true`
	IncludeLatest *bool `form:"includeLatest,omitempty" json:"includeLatest,omitempty"`
}

// ListPlanPhasesParams defines parameters for ListPlanPhases.
type ListPlanPhasesParams struct {
	// Key Filter by phase.key attribute
	Key *[]string `form:"key,omitempty" json:"key,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *PhasesOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *PhasesOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	//
	// Inclusive.
	From *MeterQueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	//
	// Inclusive.
	To *MeterQueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *MeterQueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *MeterQueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// FilterGroupBy Simple filter for group bys with exact match.
	FilterGroupBy *MeterQueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *MeterQueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListSubjectEntitlementsParams defines parameters for ListSubjectEntitlements.
type ListSubjectEntitlementsParams struct {
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`
}

// ListEntitlementGrantsParams defines parameters for ListEntitlementGrants.
type ListEntitlementGrantsParams struct {
	IncludeDeleted *bool         `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`
	OrderBy        *GrantOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// GetEntitlementValueParams defines parameters for GetEntitlementValue.
type GetEntitlementValueParams struct {
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// GetEntitlementHistoryParams defines parameters for GetEntitlementHistory.
type GetEntitlementHistoryParams struct {
	// From Start of time range to query entitlement: date-time in RFC 3339 format. Defaults to the last reset. Gets truncated to the granularity of the underlying meter.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End of time range to query entitlement: date-time in RFC 3339 format. Defaults to now.
	// If not now then gets truncated to the granularity of the underlying meter.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize Windowsize
	WindowSize WindowSize `form:"windowSize" json:"windowSize"`

	// WindowTimeZone The timezone used when calculating the windows.
	WindowTimeZone *string `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
}

// GetSubscriptionParams defines parameters for GetSubscription.
type GetSubscriptionParams struct {
	Expand *GetSubscriptionParamsExpand `form:"expand,omitempty" json:"expand,omitempty"`

	// At The time at which the subscription should be queried. If not provided the current time is used.
	At *time.Time `form:"at,omitempty" json:"at,omitempty"`
}

// GetSubscriptionParamsExpand defines parameters for GetSubscription.
type GetSubscriptionParamsExpand bool

// EditSubscriptionJSONBody defines parameters for EditSubscription.
type EditSubscriptionJSONBody = []EditSubscriptionJSONBody_Item

// EditSubscriptionJSONBody_Item defines parameters for EditSubscription.
type EditSubscriptionJSONBody_Item struct {
	union json.RawMessage
}

// CancelSubscriptionJSONBody defines parameters for CancelSubscription.
type CancelSubscriptionJSONBody struct {
	// EffectiveDate If not provided the subscription is canceled immediately.
	EffectiveDate *time.Time `json:"effectiveDate,omitempty"`
}

// MigrateSubscriptionJSONBody defines parameters for MigrateSubscription.
type MigrateSubscriptionJSONBody struct {
	TargetVersion int `json:"targetVersion"`
}

// AppStripeWebhookJSONRequestBody defines body for AppStripeWebhook for application/json ContentType.
type AppStripeWebhookJSONRequestBody = StripeWebhookEvent

// BillingUpsertCustomerOverrideJSONRequestBody defines body for BillingUpsertCustomerOverride for application/json ContentType.
type BillingUpsertCustomerOverrideJSONRequestBody = BillingCustomerWorkflowOverrideCreate

// BillingCreateInvoiceJSONRequestBody defines body for BillingCreateInvoice for application/json ContentType.
type BillingCreateInvoiceJSONRequestBody = BillingInvoiceCreateInput

// BillingUpdateInvoiceLineJSONRequestBody defines body for BillingUpdateInvoiceLine for application/json ContentType.
type BillingUpdateInvoiceLineJSONRequestBody = BillingInvoiceLineCreateOrUpdate

// BillingVoidInvoiceJSONRequestBody defines body for BillingVoidInvoice for application/json ContentType.
type BillingVoidInvoiceJSONRequestBody = BillingVoidInvoiceInput

// BillingCreateLineByCustomerJSONRequestBody defines body for BillingCreateLineByCustomer for application/json ContentType.
type BillingCreateLineByCustomerJSONRequestBody = BillingCreateLinesRequest

// BillingCreateProfileJSONRequestBody defines body for BillingCreateProfile for application/json ContentType.
type BillingCreateProfileJSONRequestBody = BillingProfileCreateInput

// BillingUpdateProfileJSONRequestBody defines body for BillingUpdateProfile for application/json ContentType.
type BillingUpdateProfileJSONRequestBody = BillingProfileCreateOrUpdate

// CreateCustomerJSONRequestBody defines body for CreateCustomer for application/json ContentType.
type CreateCustomerJSONRequestBody = Customer

// UpdateCustomerJSONRequestBody defines body for UpdateCustomer for application/json ContentType.
type UpdateCustomerJSONRequestBody = Customer

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// IngestEventsJSONRequestBody defines body for IngestEvents for application/json ContentType.
type IngestEventsJSONRequestBody = IngestEventsBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = FeatureCreateInputs

// CreateStripeCheckoutSessionJSONRequestBody defines body for CreateStripeCheckoutSession for application/json ContentType.
type CreateStripeCheckoutSessionJSONRequestBody = CreateStripeCheckoutSessionRequest

// MarketplaceAppAPIKeyInstallJSONRequestBody defines body for MarketplaceAppAPIKeyInstall for application/json ContentType.
type MarketplaceAppAPIKeyInstallJSONRequestBody MarketplaceAppAPIKeyInstallJSONBody

// CreateNotificationChannelJSONRequestBody defines body for CreateNotificationChannel for application/json ContentType.
type CreateNotificationChannelJSONRequestBody = NotificationChannelCreateRequest

// UpdateNotificationChannelJSONRequestBody defines body for UpdateNotificationChannel for application/json ContentType.
type UpdateNotificationChannelJSONRequestBody = NotificationChannelCreateRequest

// CreateNotificationRuleJSONRequestBody defines body for CreateNotificationRule for application/json ContentType.
type CreateNotificationRuleJSONRequestBody = NotificationRuleCreateRequest

// UpdateNotificationRuleJSONRequestBody defines body for UpdateNotificationRule for application/json ContentType.
type UpdateNotificationRuleJSONRequestBody = NotificationRuleCreateRequest

// ReceiveSvixOperationalEventJSONRequestBody defines body for ReceiveSvixOperationalEvent for application/json ContentType.
type ReceiveSvixOperationalEventJSONRequestBody = SvixOperationalWebhookRequest

// CreatePlanJSONRequestBody defines body for CreatePlan for application/json ContentType.
type CreatePlanJSONRequestBody = PlanCreate

// UpdatePlanJSONRequestBody defines body for UpdatePlan for application/json ContentType.
type UpdatePlanJSONRequestBody = PlanUpdate

// CreatePlanPhaseJSONRequestBody defines body for CreatePlanPhase for application/json ContentType.
type CreatePlanPhaseJSONRequestBody = PlanPhaseCreate

// UpdatePlanPhaseJSONRequestBody defines body for UpdatePlanPhase for application/json ContentType.
type UpdatePlanPhaseJSONRequestBody = PlanPhaseUpdate

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// CreateEntitlementJSONRequestBody defines body for CreateEntitlement for application/json ContentType.
type CreateEntitlementJSONRequestBody = EntitlementCreateInputs

// CreateGrantJSONRequestBody defines body for CreateGrant for application/json ContentType.
type CreateGrantJSONRequestBody = EntitlementGrantCreateInput

// OverrideEntitlementJSONRequestBody defines body for OverrideEntitlement for application/json ContentType.
type OverrideEntitlementJSONRequestBody = EntitlementCreateInputs

// ResetEntitlementUsageJSONRequestBody defines body for ResetEntitlementUsage for application/json ContentType.
type ResetEntitlementUsageJSONRequestBody = ResetEntitlementUsageInput

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = CreateSubscriptionRequestBody

// EditSubscriptionJSONRequestBody defines body for EditSubscription for application/json ContentType.
type EditSubscriptionJSONRequestBody = EditSubscriptionJSONBody

// CancelSubscriptionJSONRequestBody defines body for CancelSubscription for application/json ContentType.
type CancelSubscriptionJSONRequestBody CancelSubscriptionJSONBody

// MigrateSubscriptionJSONRequestBody defines body for MigrateSubscription for application/json ContentType.
type MigrateSubscriptionJSONRequestBody MigrateSubscriptionJSONBody

// AsStripeApp returns the union data inside the App as a StripeApp
func (t App) AsStripeApp() (StripeApp, error) {
	var body StripeApp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStripeApp overwrites any union data inside the App as the provided StripeApp
func (t *App) FromStripeApp(v StripeApp) error {
	v.Type = "stripe"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStripeApp performs a merge with any union data inside the App, using the provided StripeApp
func (t *App) MergeStripeApp(v StripeApp) error {
	v.Type = "stripe"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSandboxApp returns the union data inside the App as a SandboxApp
func (t App) AsSandboxApp() (SandboxApp, error) {
	var body SandboxApp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSandboxApp overwrites any union data inside the App as the provided SandboxApp
func (t *App) FromSandboxApp(v SandboxApp) error {
	v.Type = "sandbox"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSandboxApp performs a merge with any union data inside the App, using the provided SandboxApp
func (t *App) MergeSandboxApp(v SandboxApp) error {
	v.Type = "sandbox"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t App) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t App) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "sandbox":
		return t.AsSandboxApp()
	case "stripe":
		return t.AsStripeApp()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t App) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *App) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBillingUsageBasedLine returns the union data inside the BillingInvoiceLine as a BillingUsageBasedLine
func (t BillingInvoiceLine) AsBillingUsageBasedLine() (BillingUsageBasedLine, error) {
	var body BillingUsageBasedLine
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingUsageBasedLine overwrites any union data inside the BillingInvoiceLine as the provided BillingUsageBasedLine
func (t *BillingInvoiceLine) FromBillingUsageBasedLine(v BillingUsageBasedLine) error {
	v.Type = "usage_based"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingUsageBasedLine performs a merge with any union data inside the BillingInvoiceLine, using the provided BillingUsageBasedLine
func (t *BillingInvoiceLine) MergeBillingUsageBasedLine(v BillingUsageBasedLine) error {
	v.Type = "usage_based"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingFlatFeeLine returns the union data inside the BillingInvoiceLine as a BillingFlatFeeLine
func (t BillingInvoiceLine) AsBillingFlatFeeLine() (BillingFlatFeeLine, error) {
	var body BillingFlatFeeLine
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingFlatFeeLine overwrites any union data inside the BillingInvoiceLine as the provided BillingFlatFeeLine
func (t *BillingInvoiceLine) FromBillingFlatFeeLine(v BillingFlatFeeLine) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingFlatFeeLine performs a merge with any union data inside the BillingInvoiceLine, using the provided BillingFlatFeeLine
func (t *BillingInvoiceLine) MergeBillingFlatFeeLine(v BillingFlatFeeLine) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BillingInvoiceLine) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t BillingInvoiceLine) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "flat_fee":
		return t.AsBillingFlatFeeLine()
	case "usage_based":
		return t.AsBillingUsageBasedLine()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t BillingInvoiceLine) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BillingInvoiceLine) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBillingUsageBasedLineCreateItem returns the union data inside the BillingInvoiceLineCreateItem as a BillingUsageBasedLineCreateItem
func (t BillingInvoiceLineCreateItem) AsBillingUsageBasedLineCreateItem() (BillingUsageBasedLineCreateItem, error) {
	var body BillingUsageBasedLineCreateItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingUsageBasedLineCreateItem overwrites any union data inside the BillingInvoiceLineCreateItem as the provided BillingUsageBasedLineCreateItem
func (t *BillingInvoiceLineCreateItem) FromBillingUsageBasedLineCreateItem(v BillingUsageBasedLineCreateItem) error {
	v.Type = "usage_based"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingUsageBasedLineCreateItem performs a merge with any union data inside the BillingInvoiceLineCreateItem, using the provided BillingUsageBasedLineCreateItem
func (t *BillingInvoiceLineCreateItem) MergeBillingUsageBasedLineCreateItem(v BillingUsageBasedLineCreateItem) error {
	v.Type = "usage_based"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingFlatFeeLineCreateItem returns the union data inside the BillingInvoiceLineCreateItem as a BillingFlatFeeLineCreateItem
func (t BillingInvoiceLineCreateItem) AsBillingFlatFeeLineCreateItem() (BillingFlatFeeLineCreateItem, error) {
	var body BillingFlatFeeLineCreateItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingFlatFeeLineCreateItem overwrites any union data inside the BillingInvoiceLineCreateItem as the provided BillingFlatFeeLineCreateItem
func (t *BillingInvoiceLineCreateItem) FromBillingFlatFeeLineCreateItem(v BillingFlatFeeLineCreateItem) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingFlatFeeLineCreateItem performs a merge with any union data inside the BillingInvoiceLineCreateItem, using the provided BillingFlatFeeLineCreateItem
func (t *BillingInvoiceLineCreateItem) MergeBillingFlatFeeLineCreateItem(v BillingFlatFeeLineCreateItem) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BillingInvoiceLineCreateItem) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t BillingInvoiceLineCreateItem) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "flat_fee":
		return t.AsBillingFlatFeeLineCreateItem()
	case "usage_based":
		return t.AsBillingUsageBasedLineCreateItem()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t BillingInvoiceLineCreateItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BillingInvoiceLineCreateItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBillingUsageBasedLineCreateOrUpdate returns the union data inside the BillingInvoiceLineCreateOrUpdate as a BillingUsageBasedLineCreateOrUpdate
func (t BillingInvoiceLineCreateOrUpdate) AsBillingUsageBasedLineCreateOrUpdate() (BillingUsageBasedLineCreateOrUpdate, error) {
	var body BillingUsageBasedLineCreateOrUpdate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingUsageBasedLineCreateOrUpdate overwrites any union data inside the BillingInvoiceLineCreateOrUpdate as the provided BillingUsageBasedLineCreateOrUpdate
func (t *BillingInvoiceLineCreateOrUpdate) FromBillingUsageBasedLineCreateOrUpdate(v BillingUsageBasedLineCreateOrUpdate) error {
	v.Type = "usage_based"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingUsageBasedLineCreateOrUpdate performs a merge with any union data inside the BillingInvoiceLineCreateOrUpdate, using the provided BillingUsageBasedLineCreateOrUpdate
func (t *BillingInvoiceLineCreateOrUpdate) MergeBillingUsageBasedLineCreateOrUpdate(v BillingUsageBasedLineCreateOrUpdate) error {
	v.Type = "usage_based"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingFlatFeeLineCreateOrUpdate returns the union data inside the BillingInvoiceLineCreateOrUpdate as a BillingFlatFeeLineCreateOrUpdate
func (t BillingInvoiceLineCreateOrUpdate) AsBillingFlatFeeLineCreateOrUpdate() (BillingFlatFeeLineCreateOrUpdate, error) {
	var body BillingFlatFeeLineCreateOrUpdate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingFlatFeeLineCreateOrUpdate overwrites any union data inside the BillingInvoiceLineCreateOrUpdate as the provided BillingFlatFeeLineCreateOrUpdate
func (t *BillingInvoiceLineCreateOrUpdate) FromBillingFlatFeeLineCreateOrUpdate(v BillingFlatFeeLineCreateOrUpdate) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingFlatFeeLineCreateOrUpdate performs a merge with any union data inside the BillingInvoiceLineCreateOrUpdate, using the provided BillingFlatFeeLineCreateOrUpdate
func (t *BillingInvoiceLineCreateOrUpdate) MergeBillingFlatFeeLineCreateOrUpdate(v BillingFlatFeeLineCreateOrUpdate) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BillingInvoiceLineCreateOrUpdate) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t BillingInvoiceLineCreateOrUpdate) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "flat_fee":
		return t.AsBillingFlatFeeLineCreateOrUpdate()
	case "usage_based":
		return t.AsBillingUsageBasedLineCreateOrUpdate()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t BillingInvoiceLineCreateOrUpdate) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BillingInvoiceLineCreateOrUpdate) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBillingPaymentTermInstant returns the union data inside the BillingPaymentTerms as a BillingPaymentTermInstant
func (t BillingPaymentTerms) AsBillingPaymentTermInstant() (BillingPaymentTermInstant, error) {
	var body BillingPaymentTermInstant
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingPaymentTermInstant overwrites any union data inside the BillingPaymentTerms as the provided BillingPaymentTermInstant
func (t *BillingPaymentTerms) FromBillingPaymentTermInstant(v BillingPaymentTermInstant) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingPaymentTermInstant performs a merge with any union data inside the BillingPaymentTerms, using the provided BillingPaymentTermInstant
func (t *BillingPaymentTerms) MergeBillingPaymentTermInstant(v BillingPaymentTermInstant) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingPaymentTermDueDate returns the union data inside the BillingPaymentTerms as a BillingPaymentTermDueDate
func (t BillingPaymentTerms) AsBillingPaymentTermDueDate() (BillingPaymentTermDueDate, error) {
	var body BillingPaymentTermDueDate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingPaymentTermDueDate overwrites any union data inside the BillingPaymentTerms as the provided BillingPaymentTermDueDate
func (t *BillingPaymentTerms) FromBillingPaymentTermDueDate(v BillingPaymentTermDueDate) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingPaymentTermDueDate performs a merge with any union data inside the BillingPaymentTerms, using the provided BillingPaymentTermDueDate
func (t *BillingPaymentTerms) MergeBillingPaymentTermDueDate(v BillingPaymentTermDueDate) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BillingPaymentTerms) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BillingPaymentTerms) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBillingProfileApps returns the union data inside the BillingProfileAppsOrReference as a BillingProfileApps
func (t BillingProfileAppsOrReference) AsBillingProfileApps() (BillingProfileApps, error) {
	var body BillingProfileApps
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingProfileApps overwrites any union data inside the BillingProfileAppsOrReference as the provided BillingProfileApps
func (t *BillingProfileAppsOrReference) FromBillingProfileApps(v BillingProfileApps) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingProfileApps performs a merge with any union data inside the BillingProfileAppsOrReference, using the provided BillingProfileApps
func (t *BillingProfileAppsOrReference) MergeBillingProfileApps(v BillingProfileApps) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingProfileAppReferences returns the union data inside the BillingProfileAppsOrReference as a BillingProfileAppReferences
func (t BillingProfileAppsOrReference) AsBillingProfileAppReferences() (BillingProfileAppReferences, error) {
	var body BillingProfileAppReferences
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingProfileAppReferences overwrites any union data inside the BillingProfileAppsOrReference as the provided BillingProfileAppReferences
func (t *BillingProfileAppsOrReference) FromBillingProfileAppReferences(v BillingProfileAppReferences) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingProfileAppReferences performs a merge with any union data inside the BillingProfileAppsOrReference, using the provided BillingProfileAppReferences
func (t *BillingProfileAppsOrReference) MergeBillingProfileAppReferences(v BillingProfileAppReferences) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BillingProfileAppsOrReference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BillingProfileAppsOrReference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCustomerId returns the union data inside the CreateStripeCheckoutSessionRequest_Customer as a CustomerId
func (t CreateStripeCheckoutSessionRequest_Customer) AsCustomerId() (CustomerId, error) {
	var body CustomerId
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerId overwrites any union data inside the CreateStripeCheckoutSessionRequest_Customer as the provided CustomerId
func (t *CreateStripeCheckoutSessionRequest_Customer) FromCustomerId(v CustomerId) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerId performs a merge with any union data inside the CreateStripeCheckoutSessionRequest_Customer, using the provided CustomerId
func (t *CreateStripeCheckoutSessionRequest_Customer) MergeCustomerId(v CustomerId) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomer returns the union data inside the CreateStripeCheckoutSessionRequest_Customer as a Customer
func (t CreateStripeCheckoutSessionRequest_Customer) AsCustomer() (Customer, error) {
	var body Customer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomer overwrites any union data inside the CreateStripeCheckoutSessionRequest_Customer as the provided Customer
func (t *CreateStripeCheckoutSessionRequest_Customer) FromCustomer(v Customer) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomer performs a merge with any union data inside the CreateStripeCheckoutSessionRequest_Customer, using the provided Customer
func (t *CreateStripeCheckoutSessionRequest_Customer) MergeCustomer(v Customer) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateStripeCheckoutSessionRequest_Customer) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateStripeCheckoutSessionRequest_Customer) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSubscriptionEditAddItem returns the union data inside the CreateSubscriptionRequestBody_Customizations_Item as a SubscriptionEditAddItem
func (t CreateSubscriptionRequestBody_Customizations_Item) AsSubscriptionEditAddItem() (SubscriptionEditAddItem, error) {
	var body SubscriptionEditAddItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSubscriptionEditAddItem overwrites any union data inside the CreateSubscriptionRequestBody_Customizations_Item as the provided SubscriptionEditAddItem
func (t *CreateSubscriptionRequestBody_Customizations_Item) FromSubscriptionEditAddItem(v SubscriptionEditAddItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSubscriptionEditAddItem performs a merge with any union data inside the CreateSubscriptionRequestBody_Customizations_Item, using the provided SubscriptionEditAddItem
func (t *CreateSubscriptionRequestBody_Customizations_Item) MergeSubscriptionEditAddItem(v SubscriptionEditAddItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSubscriptionEditRemoveItem returns the union data inside the CreateSubscriptionRequestBody_Customizations_Item as a SubscriptionEditRemoveItem
func (t CreateSubscriptionRequestBody_Customizations_Item) AsSubscriptionEditRemoveItem() (SubscriptionEditRemoveItem, error) {
	var body SubscriptionEditRemoveItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSubscriptionEditRemoveItem overwrites any union data inside the CreateSubscriptionRequestBody_Customizations_Item as the provided SubscriptionEditRemoveItem
func (t *CreateSubscriptionRequestBody_Customizations_Item) FromSubscriptionEditRemoveItem(v SubscriptionEditRemoveItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSubscriptionEditRemoveItem performs a merge with any union data inside the CreateSubscriptionRequestBody_Customizations_Item, using the provided SubscriptionEditRemoveItem
func (t *CreateSubscriptionRequestBody_Customizations_Item) MergeSubscriptionEditRemoveItem(v SubscriptionEditRemoveItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateSubscriptionRequestBody_Customizations_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateSubscriptionRequestBody_Customizations_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEntitlementMetered returns the union data inside the Entitlement as a EntitlementMetered
func (t Entitlement) AsEntitlementMetered() (EntitlementMetered, error) {
	var body EntitlementMetered
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementMetered overwrites any union data inside the Entitlement as the provided EntitlementMetered
func (t *Entitlement) FromEntitlementMetered(v EntitlementMetered) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementMetered performs a merge with any union data inside the Entitlement, using the provided EntitlementMetered
func (t *Entitlement) MergeEntitlementMetered(v EntitlementMetered) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementStatic returns the union data inside the Entitlement as a EntitlementStatic
func (t Entitlement) AsEntitlementStatic() (EntitlementStatic, error) {
	var body EntitlementStatic
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementStatic overwrites any union data inside the Entitlement as the provided EntitlementStatic
func (t *Entitlement) FromEntitlementStatic(v EntitlementStatic) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementStatic performs a merge with any union data inside the Entitlement, using the provided EntitlementStatic
func (t *Entitlement) MergeEntitlementStatic(v EntitlementStatic) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementBoolean returns the union data inside the Entitlement as a EntitlementBoolean
func (t Entitlement) AsEntitlementBoolean() (EntitlementBoolean, error) {
	var body EntitlementBoolean
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementBoolean overwrites any union data inside the Entitlement as the provided EntitlementBoolean
func (t *Entitlement) FromEntitlementBoolean(v EntitlementBoolean) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementBoolean performs a merge with any union data inside the Entitlement, using the provided EntitlementBoolean
func (t *Entitlement) MergeEntitlementBoolean(v EntitlementBoolean) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Entitlement) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Entitlement) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "boolean":
		return t.AsEntitlementBoolean()
	case "metered":
		return t.AsEntitlementMetered()
	case "static":
		return t.AsEntitlementStatic()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Entitlement) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Entitlement) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEntitlementMeteredCreateInputs returns the union data inside the EntitlementCreateInputs as a EntitlementMeteredCreateInputs
func (t EntitlementCreateInputs) AsEntitlementMeteredCreateInputs() (EntitlementMeteredCreateInputs, error) {
	var body EntitlementMeteredCreateInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementMeteredCreateInputs overwrites any union data inside the EntitlementCreateInputs as the provided EntitlementMeteredCreateInputs
func (t *EntitlementCreateInputs) FromEntitlementMeteredCreateInputs(v EntitlementMeteredCreateInputs) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementMeteredCreateInputs performs a merge with any union data inside the EntitlementCreateInputs, using the provided EntitlementMeteredCreateInputs
func (t *EntitlementCreateInputs) MergeEntitlementMeteredCreateInputs(v EntitlementMeteredCreateInputs) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementStaticCreateInputs returns the union data inside the EntitlementCreateInputs as a EntitlementStaticCreateInputs
func (t EntitlementCreateInputs) AsEntitlementStaticCreateInputs() (EntitlementStaticCreateInputs, error) {
	var body EntitlementStaticCreateInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementStaticCreateInputs overwrites any union data inside the EntitlementCreateInputs as the provided EntitlementStaticCreateInputs
func (t *EntitlementCreateInputs) FromEntitlementStaticCreateInputs(v EntitlementStaticCreateInputs) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementStaticCreateInputs performs a merge with any union data inside the EntitlementCreateInputs, using the provided EntitlementStaticCreateInputs
func (t *EntitlementCreateInputs) MergeEntitlementStaticCreateInputs(v EntitlementStaticCreateInputs) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementBooleanCreateInputs returns the union data inside the EntitlementCreateInputs as a EntitlementBooleanCreateInputs
func (t EntitlementCreateInputs) AsEntitlementBooleanCreateInputs() (EntitlementBooleanCreateInputs, error) {
	var body EntitlementBooleanCreateInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementBooleanCreateInputs overwrites any union data inside the EntitlementCreateInputs as the provided EntitlementBooleanCreateInputs
func (t *EntitlementCreateInputs) FromEntitlementBooleanCreateInputs(v EntitlementBooleanCreateInputs) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementBooleanCreateInputs performs a merge with any union data inside the EntitlementCreateInputs, using the provided EntitlementBooleanCreateInputs
func (t *EntitlementCreateInputs) MergeEntitlementBooleanCreateInputs(v EntitlementBooleanCreateInputs) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EntitlementCreateInputs) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t EntitlementCreateInputs) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "boolean":
		return t.AsEntitlementBooleanCreateInputs()
	case "metered":
		return t.AsEntitlementMeteredCreateInputs()
	case "static":
		return t.AsEntitlementStaticCreateInputs()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t EntitlementCreateInputs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EntitlementCreateInputs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEvent returns the union data inside the IngestEventsBody as a Event
func (t IngestEventsBody) AsEvent() (Event, error) {
	var body Event
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEvent overwrites any union data inside the IngestEventsBody as the provided Event
func (t *IngestEventsBody) FromEvent(v Event) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEvent performs a merge with any union data inside the IngestEventsBody, using the provided Event
func (t *IngestEventsBody) MergeEvent(v Event) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIngestEventsBody1 returns the union data inside the IngestEventsBody as a IngestEventsBody1
func (t IngestEventsBody) AsIngestEventsBody1() (IngestEventsBody1, error) {
	var body IngestEventsBody1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIngestEventsBody1 overwrites any union data inside the IngestEventsBody as the provided IngestEventsBody1
func (t *IngestEventsBody) FromIngestEventsBody1(v IngestEventsBody1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIngestEventsBody1 performs a merge with any union data inside the IngestEventsBody, using the provided IngestEventsBody1
func (t *IngestEventsBody) MergeIngestEventsBody1(v IngestEventsBody1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IngestEventsBody) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IngestEventsBody) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsListEntitlementsResult0 returns the union data inside the ListEntitlementsResult as a ListEntitlementsResult0
func (t ListEntitlementsResult) AsListEntitlementsResult0() (ListEntitlementsResult0, error) {
	var body ListEntitlementsResult0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromListEntitlementsResult0 overwrites any union data inside the ListEntitlementsResult as the provided ListEntitlementsResult0
func (t *ListEntitlementsResult) FromListEntitlementsResult0(v ListEntitlementsResult0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeListEntitlementsResult0 performs a merge with any union data inside the ListEntitlementsResult, using the provided ListEntitlementsResult0
func (t *ListEntitlementsResult) MergeListEntitlementsResult0(v ListEntitlementsResult0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementPaginatedResponse returns the union data inside the ListEntitlementsResult as a EntitlementPaginatedResponse
func (t ListEntitlementsResult) AsEntitlementPaginatedResponse() (EntitlementPaginatedResponse, error) {
	var body EntitlementPaginatedResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementPaginatedResponse overwrites any union data inside the ListEntitlementsResult as the provided EntitlementPaginatedResponse
func (t *ListEntitlementsResult) FromEntitlementPaginatedResponse(v EntitlementPaginatedResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementPaginatedResponse performs a merge with any union data inside the ListEntitlementsResult, using the provided EntitlementPaginatedResponse
func (t *ListEntitlementsResult) MergeEntitlementPaginatedResponse(v EntitlementPaginatedResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ListEntitlementsResult) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListEntitlementsResult) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsListFeaturesResult0 returns the union data inside the ListFeaturesResult as a ListFeaturesResult0
func (t ListFeaturesResult) AsListFeaturesResult0() (ListFeaturesResult0, error) {
	var body ListFeaturesResult0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromListFeaturesResult0 overwrites any union data inside the ListFeaturesResult as the provided ListFeaturesResult0
func (t *ListFeaturesResult) FromListFeaturesResult0(v ListFeaturesResult0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeListFeaturesResult0 performs a merge with any union data inside the ListFeaturesResult, using the provided ListFeaturesResult0
func (t *ListFeaturesResult) MergeListFeaturesResult0(v ListFeaturesResult0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFeaturePaginatedResponse returns the union data inside the ListFeaturesResult as a FeaturePaginatedResponse
func (t ListFeaturesResult) AsFeaturePaginatedResponse() (FeaturePaginatedResponse, error) {
	var body FeaturePaginatedResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFeaturePaginatedResponse overwrites any union data inside the ListFeaturesResult as the provided FeaturePaginatedResponse
func (t *ListFeaturesResult) FromFeaturePaginatedResponse(v FeaturePaginatedResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFeaturePaginatedResponse performs a merge with any union data inside the ListFeaturesResult, using the provided FeaturePaginatedResponse
func (t *ListFeaturesResult) MergeFeaturePaginatedResponse(v FeaturePaginatedResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ListFeaturesResult) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListFeaturesResult) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMeasureUsageFromPreset returns the union data inside the MeasureUsageFrom as a MeasureUsageFromPreset
func (t MeasureUsageFrom) AsMeasureUsageFromPreset() (MeasureUsageFromPreset, error) {
	var body MeasureUsageFromPreset
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMeasureUsageFromPreset overwrites any union data inside the MeasureUsageFrom as the provided MeasureUsageFromPreset
func (t *MeasureUsageFrom) FromMeasureUsageFromPreset(v MeasureUsageFromPreset) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMeasureUsageFromPreset performs a merge with any union data inside the MeasureUsageFrom, using the provided MeasureUsageFromPreset
func (t *MeasureUsageFrom) MergeMeasureUsageFromPreset(v MeasureUsageFromPreset) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMeasureUsageFromTime returns the union data inside the MeasureUsageFrom as a MeasureUsageFromTime
func (t MeasureUsageFrom) AsMeasureUsageFromTime() (MeasureUsageFromTime, error) {
	var body MeasureUsageFromTime
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMeasureUsageFromTime overwrites any union data inside the MeasureUsageFrom as the provided MeasureUsageFromTime
func (t *MeasureUsageFrom) FromMeasureUsageFromTime(v MeasureUsageFromTime) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMeasureUsageFromTime performs a merge with any union data inside the MeasureUsageFrom, using the provided MeasureUsageFromTime
func (t *MeasureUsageFrom) MergeMeasureUsageFromTime(v MeasureUsageFromTime) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MeasureUsageFrom) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MeasureUsageFrom) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRateCardFlatFee returns the union data inside the RateCard as a RateCardFlatFee
func (t RateCard) AsRateCardFlatFee() (RateCardFlatFee, error) {
	var body RateCardFlatFee
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardFlatFee overwrites any union data inside the RateCard as the provided RateCardFlatFee
func (t *RateCard) FromRateCardFlatFee(v RateCardFlatFee) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardFlatFee performs a merge with any union data inside the RateCard, using the provided RateCardFlatFee
func (t *RateCard) MergeRateCardFlatFee(v RateCardFlatFee) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRateCardUsageBased returns the union data inside the RateCard as a RateCardUsageBased
func (t RateCard) AsRateCardUsageBased() (RateCardUsageBased, error) {
	var body RateCardUsageBased
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardUsageBased overwrites any union data inside the RateCard as the provided RateCardUsageBased
func (t *RateCard) FromRateCardUsageBased(v RateCardUsageBased) error {
	v.Type = "usage_based"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardUsageBased performs a merge with any union data inside the RateCard, using the provided RateCardUsageBased
func (t *RateCard) MergeRateCardUsageBased(v RateCardUsageBased) error {
	v.Type = "usage_based"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RateCard) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RateCard) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "flat_fee":
		return t.AsRateCardFlatFee()
	case "usage_based":
		return t.AsRateCardUsageBased()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RateCard) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RateCard) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRateCardMeteredEntitlement returns the union data inside the RateCardEntitlement as a RateCardMeteredEntitlement
func (t RateCardEntitlement) AsRateCardMeteredEntitlement() (RateCardMeteredEntitlement, error) {
	var body RateCardMeteredEntitlement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardMeteredEntitlement overwrites any union data inside the RateCardEntitlement as the provided RateCardMeteredEntitlement
func (t *RateCardEntitlement) FromRateCardMeteredEntitlement(v RateCardMeteredEntitlement) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardMeteredEntitlement performs a merge with any union data inside the RateCardEntitlement, using the provided RateCardMeteredEntitlement
func (t *RateCardEntitlement) MergeRateCardMeteredEntitlement(v RateCardMeteredEntitlement) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRateCardStaticEntitlement returns the union data inside the RateCardEntitlement as a RateCardStaticEntitlement
func (t RateCardEntitlement) AsRateCardStaticEntitlement() (RateCardStaticEntitlement, error) {
	var body RateCardStaticEntitlement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardStaticEntitlement overwrites any union data inside the RateCardEntitlement as the provided RateCardStaticEntitlement
func (t *RateCardEntitlement) FromRateCardStaticEntitlement(v RateCardStaticEntitlement) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardStaticEntitlement performs a merge with any union data inside the RateCardEntitlement, using the provided RateCardStaticEntitlement
func (t *RateCardEntitlement) MergeRateCardStaticEntitlement(v RateCardStaticEntitlement) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRateCardBooleanEntitlement returns the union data inside the RateCardEntitlement as a RateCardBooleanEntitlement
func (t RateCardEntitlement) AsRateCardBooleanEntitlement() (RateCardBooleanEntitlement, error) {
	var body RateCardBooleanEntitlement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardBooleanEntitlement overwrites any union data inside the RateCardEntitlement as the provided RateCardBooleanEntitlement
func (t *RateCardEntitlement) FromRateCardBooleanEntitlement(v RateCardBooleanEntitlement) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardBooleanEntitlement performs a merge with any union data inside the RateCardEntitlement, using the provided RateCardBooleanEntitlement
func (t *RateCardEntitlement) MergeRateCardBooleanEntitlement(v RateCardBooleanEntitlement) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RateCardEntitlement) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RateCardEntitlement) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "boolean":
		return t.AsRateCardBooleanEntitlement()
	case "metered":
		return t.AsRateCardMeteredEntitlement()
	case "static":
		return t.AsRateCardStaticEntitlement()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RateCardEntitlement) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RateCardEntitlement) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRateCardFlatFeeUpdateItem returns the union data inside the RateCardUpdateItem as a RateCardFlatFeeUpdateItem
func (t RateCardUpdateItem) AsRateCardFlatFeeUpdateItem() (RateCardFlatFeeUpdateItem, error) {
	var body RateCardFlatFeeUpdateItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardFlatFeeUpdateItem overwrites any union data inside the RateCardUpdateItem as the provided RateCardFlatFeeUpdateItem
func (t *RateCardUpdateItem) FromRateCardFlatFeeUpdateItem(v RateCardFlatFeeUpdateItem) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardFlatFeeUpdateItem performs a merge with any union data inside the RateCardUpdateItem, using the provided RateCardFlatFeeUpdateItem
func (t *RateCardUpdateItem) MergeRateCardFlatFeeUpdateItem(v RateCardFlatFeeUpdateItem) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRateCardUsageBasedUpdateItem returns the union data inside the RateCardUpdateItem as a RateCardUsageBasedUpdateItem
func (t RateCardUpdateItem) AsRateCardUsageBasedUpdateItem() (RateCardUsageBasedUpdateItem, error) {
	var body RateCardUsageBasedUpdateItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardUsageBasedUpdateItem overwrites any union data inside the RateCardUpdateItem as the provided RateCardUsageBasedUpdateItem
func (t *RateCardUpdateItem) FromRateCardUsageBasedUpdateItem(v RateCardUsageBasedUpdateItem) error {
	v.Type = "usage_based"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardUsageBasedUpdateItem performs a merge with any union data inside the RateCardUpdateItem, using the provided RateCardUsageBasedUpdateItem
func (t *RateCardUpdateItem) MergeRateCardUsageBasedUpdateItem(v RateCardUsageBasedUpdateItem) error {
	v.Type = "usage_based"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RateCardUpdateItem) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RateCardUpdateItem) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "flat_fee":
		return t.AsRateCardFlatFeeUpdateItem()
	case "usage_based":
		return t.AsRateCardUsageBasedUpdateItem()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RateCardUpdateItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RateCardUpdateItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFlatPriceWithPaymentTerm returns the union data inside the RateCardUsageBasedPrice as a FlatPriceWithPaymentTerm
func (t RateCardUsageBasedPrice) AsFlatPriceWithPaymentTerm() (FlatPriceWithPaymentTerm, error) {
	var body FlatPriceWithPaymentTerm
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFlatPriceWithPaymentTerm overwrites any union data inside the RateCardUsageBasedPrice as the provided FlatPriceWithPaymentTerm
func (t *RateCardUsageBasedPrice) FromFlatPriceWithPaymentTerm(v FlatPriceWithPaymentTerm) error {
	v.Type = "flat"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFlatPriceWithPaymentTerm performs a merge with any union data inside the RateCardUsageBasedPrice, using the provided FlatPriceWithPaymentTerm
func (t *RateCardUsageBasedPrice) MergeFlatPriceWithPaymentTerm(v FlatPriceWithPaymentTerm) error {
	v.Type = "flat"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnitPriceWithCommitments returns the union data inside the RateCardUsageBasedPrice as a UnitPriceWithCommitments
func (t RateCardUsageBasedPrice) AsUnitPriceWithCommitments() (UnitPriceWithCommitments, error) {
	var body UnitPriceWithCommitments
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnitPriceWithCommitments overwrites any union data inside the RateCardUsageBasedPrice as the provided UnitPriceWithCommitments
func (t *RateCardUsageBasedPrice) FromUnitPriceWithCommitments(v UnitPriceWithCommitments) error {
	v.Type = "unit"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnitPriceWithCommitments performs a merge with any union data inside the RateCardUsageBasedPrice, using the provided UnitPriceWithCommitments
func (t *RateCardUsageBasedPrice) MergeUnitPriceWithCommitments(v UnitPriceWithCommitments) error {
	v.Type = "unit"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTieredPriceWithCommitments returns the union data inside the RateCardUsageBasedPrice as a TieredPriceWithCommitments
func (t RateCardUsageBasedPrice) AsTieredPriceWithCommitments() (TieredPriceWithCommitments, error) {
	var body TieredPriceWithCommitments
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTieredPriceWithCommitments overwrites any union data inside the RateCardUsageBasedPrice as the provided TieredPriceWithCommitments
func (t *RateCardUsageBasedPrice) FromTieredPriceWithCommitments(v TieredPriceWithCommitments) error {
	v.Type = "tiered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTieredPriceWithCommitments performs a merge with any union data inside the RateCardUsageBasedPrice, using the provided TieredPriceWithCommitments
func (t *RateCardUsageBasedPrice) MergeTieredPriceWithCommitments(v TieredPriceWithCommitments) error {
	v.Type = "tiered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RateCardUsageBasedPrice) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RateCardUsageBasedPrice) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "flat":
		return t.AsFlatPriceWithPaymentTerm()
	case "tiered":
		return t.AsTieredPriceWithCommitments()
	case "unit":
		return t.AsUnitPriceWithCommitments()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RateCardUsageBasedPrice) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RateCardUsageBasedPrice) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSubscriptionItemPrice0 returns the union data inside the SubscriptionItem_Price as a SubscriptionItemPrice0
func (t SubscriptionItem_Price) AsSubscriptionItemPrice0() (SubscriptionItemPrice0, error) {
	var body SubscriptionItemPrice0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSubscriptionItemPrice0 overwrites any union data inside the SubscriptionItem_Price as the provided SubscriptionItemPrice0
func (t *SubscriptionItem_Price) FromSubscriptionItemPrice0(v SubscriptionItemPrice0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSubscriptionItemPrice0 performs a merge with any union data inside the SubscriptionItem_Price, using the provided SubscriptionItemPrice0
func (t *SubscriptionItem_Price) MergeSubscriptionItemPrice0(v SubscriptionItemPrice0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSubscriptionItemPrice1 returns the union data inside the SubscriptionItem_Price as a SubscriptionItemPrice1
func (t SubscriptionItem_Price) AsSubscriptionItemPrice1() (SubscriptionItemPrice1, error) {
	var body SubscriptionItemPrice1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSubscriptionItemPrice1 overwrites any union data inside the SubscriptionItem_Price as the provided SubscriptionItemPrice1
func (t *SubscriptionItem_Price) FromSubscriptionItemPrice1(v SubscriptionItemPrice1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSubscriptionItemPrice1 performs a merge with any union data inside the SubscriptionItem_Price, using the provided SubscriptionItemPrice1
func (t *SubscriptionItem_Price) MergeSubscriptionItemPrice1(v SubscriptionItemPrice1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSubscriptionItemPrice2 returns the union data inside the SubscriptionItem_Price as a SubscriptionItemPrice2
func (t SubscriptionItem_Price) AsSubscriptionItemPrice2() (SubscriptionItemPrice2, error) {
	var body SubscriptionItemPrice2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSubscriptionItemPrice2 overwrites any union data inside the SubscriptionItem_Price as the provided SubscriptionItemPrice2
func (t *SubscriptionItem_Price) FromSubscriptionItemPrice2(v SubscriptionItemPrice2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSubscriptionItemPrice2 performs a merge with any union data inside the SubscriptionItem_Price, using the provided SubscriptionItemPrice2
func (t *SubscriptionItem_Price) MergeSubscriptionItemPrice2(v SubscriptionItemPrice2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSubscriptionItemPrice3 returns the union data inside the SubscriptionItem_Price as a SubscriptionItemPrice3
func (t SubscriptionItem_Price) AsSubscriptionItemPrice3() (SubscriptionItemPrice3, error) {
	var body SubscriptionItemPrice3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSubscriptionItemPrice3 overwrites any union data inside the SubscriptionItem_Price as the provided SubscriptionItemPrice3
func (t *SubscriptionItem_Price) FromSubscriptionItemPrice3(v SubscriptionItemPrice3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSubscriptionItemPrice3 performs a merge with any union data inside the SubscriptionItem_Price, using the provided SubscriptionItemPrice3
func (t *SubscriptionItem_Price) MergeSubscriptionItemPrice3(v SubscriptionItemPrice3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SubscriptionItem_Price) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SubscriptionItem_Price) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List apps
	// (GET /api/v1/apps)
	ListApps(w http.ResponseWriter, r *http.Request, params ListAppsParams)
	// Uninstall app
	// (DELETE /api/v1/apps/{id})
	UninstallApp(w http.ResponseWriter, r *http.Request, id string)
	// Get app
	// (GET /api/v1/apps/{id})
	GetApp(w http.ResponseWriter, r *http.Request, id string)
	// Stripe webhook
	// (POST /api/v1/apps/{id}/stripe/webhook)
	AppStripeWebhook(w http.ResponseWriter, r *http.Request, id string)
	// List customer overrides
	// (GET /api/v1/billing/customer)
	BillingListCustomerOverrides(w http.ResponseWriter, r *http.Request, params BillingListCustomerOverridesParams)
	// Delete a customer override
	// (DELETE /api/v1/billing/customer/{customerId})
	BillingDeleteCustomerOverride(w http.ResponseWriter, r *http.Request, customerId string)
	// Get a customer override
	// (GET /api/v1/billing/customer/{customerId})
	BillingGetCustomerOverrideById(w http.ResponseWriter, r *http.Request, customerId string)
	// Create/update a customer override
	// (POST /api/v1/billing/customer/{customerId})
	BillingUpsertCustomerOverride(w http.ResponseWriter, r *http.Request, customerId string)
	// List invoices
	// (GET /api/v1/billing/invoices)
	BillingListInvoices(w http.ResponseWriter, r *http.Request, params BillingListInvoicesParams)
	// List invoices
	// (GET /api/v1/billing/invoices/{customerId})
	BillingListInvoicesByCustomer(w http.ResponseWriter, r *http.Request, customerId string, params BillingListInvoicesByCustomerParams)
	// Create an invoice
	// (POST /api/v1/billing/invoices/{customerId})
	BillingCreateInvoice(w http.ResponseWriter, r *http.Request, customerId string)
	// Delete an invoice
	// (DELETE /api/v1/billing/invoices/{customerId}/invoices/{invoiceId})
	BillingDeleteInvoiceByCustomerInvoiceId(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string)
	// Get an invoice
	// (GET /api/v1/billing/invoices/{customerId}/invoices/{invoiceId})
	BillingGetInvoiceByCustomerInvoiceId(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string, params BillingGetInvoiceByCustomerInvoiceIdParams)
	// Advance the invoice's state to the next status
	// (POST /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/advance)
	BillingInvoiceAdvance(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string)
	// Send the invoice to the customer
	// (POST /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/approve)
	BillingApproveInvoice(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string)
	// Delete an invoice line
	// (DELETE /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/lines/{lineId})
	BillingDeleteInvoiceLine(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string, lineId string)
	// Update an invoice line
	// (PUT /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/lines/{lineId})
	BillingUpdateInvoiceLine(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string, lineId string)
	// Retry advancing the invoice after a failed attempt.
	// (POST /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/retry)
	BillingInvoiceRetry(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string)
	// Recalculate an invoice's tax amounts
	// (POST /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/tax/recalculate)
	BillingRecalculateInvoiceTax(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string)
	// Void an invoice
	// (POST /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/void)
	BillingVoidInvoice(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string)
	// Create line items
	// (POST /api/v1/billing/invoices/{customerId}/lines)
	BillingCreateLineByCustomer(w http.ResponseWriter, r *http.Request, customerId string)
	// List billing profiles
	// (GET /api/v1/billing/profile)
	BillingListProfiles(w http.ResponseWriter, r *http.Request, params BillingListProfilesParams)
	// Create a new billing profile
	// (POST /api/v1/billing/profile)
	BillingCreateProfile(w http.ResponseWriter, r *http.Request)
	// Archive a billing profile
	// (DELETE /api/v1/billing/profile/{id})
	BillingArchiveProfile(w http.ResponseWriter, r *http.Request, id string)
	// Get a billing profile by ID
	// (GET /api/v1/billing/profile/{id})
	BillingGetProfile(w http.ResponseWriter, r *http.Request, id string, params BillingGetProfileParams)
	// Update a billing profile
	// (PUT /api/v1/billing/profile/{id})
	BillingUpdateProfile(w http.ResponseWriter, r *http.Request, id string)
	// List customers
	// (GET /api/v1/customers)
	ListCustomers(w http.ResponseWriter, r *http.Request, params ListCustomersParams)
	// Create customer
	// (POST /api/v1/customers)
	CreateCustomer(w http.ResponseWriter, r *http.Request)
	// Delete customer
	// (DELETE /api/v1/customers/{id})
	DeleteCustomer(w http.ResponseWriter, r *http.Request, id string)
	// Get customer
	// (GET /api/v1/customers/{id})
	GetCustomer(w http.ResponseWriter, r *http.Request, id string)
	// Update customer
	// (PUT /api/v1/customers/{id})
	UpdateCustomer(w http.ResponseWriter, r *http.Request, id string)
	// Get event metrics
	// (GET /api/v1/debug/metrics)
	GetDebugMetrics(w http.ResponseWriter, r *http.Request)
	// List all entitlements
	// (GET /api/v1/entitlements)
	ListEntitlements(w http.ResponseWriter, r *http.Request, params ListEntitlementsParams)
	// Get entitlement by id
	// (GET /api/v1/entitlements/{entitlementId})
	GetEntitlementById(w http.ResponseWriter, r *http.Request, entitlementId string)
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request, params ListFeaturesParams)
	// Create feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Delete feature
	// (DELETE /api/v1/features/{featureId})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureId string)
	// Get feature
	// (GET /api/v1/features/{featureId})
	GetFeature(w http.ResponseWriter, r *http.Request, featureId string)
	// List grants
	// (GET /api/v1/grants)
	ListGrants(w http.ResponseWriter, r *http.Request, params ListGrantsParams)
	// Void grant
	// (DELETE /api/v1/grants/{grantId})
	VoidGrant(w http.ResponseWriter, r *http.Request, grantId string)
	// Create checkout session
	// (POST /api/v1/integration/stripe/checkout/sessions)
	CreateStripeCheckoutSession(w http.ResponseWriter, r *http.Request)
	// List available apps
	// (GET /api/v1/marketplace/listings)
	ListMarketplaceListings(w http.ResponseWriter, r *http.Request, params ListMarketplaceListingsParams)
	// Get app details by type
	// (GET /api/v1/marketplace/listings/{type})
	GetMarketplaceListing(w http.ResponseWriter, r *http.Request, pType AppType)
	// Install app via API key
	// (POST /api/v1/marketplace/listings/{type}/install/apikey)
	MarketplaceAppAPIKeyInstall(w http.ResponseWriter, r *http.Request, pType MarketplaceApiKeyInstallRequestType)
	// Get OAuth2 install URL
	// (GET /api/v1/marketplace/listings/{type}/install/oauth2)
	MarketplaceOAuth2InstallGetURL(w http.ResponseWriter, r *http.Request, pType AppType)
	// Install app via OAuth2
	// (GET /api/v1/marketplace/listings/{type}/install/oauth2/authorize)
	MarketplaceOAuth2InstallAuthorize(w http.ResponseWriter, r *http.Request, pType MarketplaceOAuth2InstallAuthorizeRequestType, params MarketplaceOAuth2InstallAuthorizeParams)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug string)
	// Query meter Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug string, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug string)
	// List notification channels
	// (GET /api/v1/notification/channels)
	ListNotificationChannels(w http.ResponseWriter, r *http.Request, params ListNotificationChannelsParams)
	// Create a notification channel
	// (POST /api/v1/notification/channels)
	CreateNotificationChannel(w http.ResponseWriter, r *http.Request)
	// Delete a notification channel
	// (DELETE /api/v1/notification/channels/{channelId})
	DeleteNotificationChannel(w http.ResponseWriter, r *http.Request, channelId string)
	// Get notification channel
	// (GET /api/v1/notification/channels/{channelId})
	GetNotificationChannel(w http.ResponseWriter, r *http.Request, channelId string)
	// Update a notification channel
	// (PUT /api/v1/notification/channels/{channelId})
	UpdateNotificationChannel(w http.ResponseWriter, r *http.Request, channelId string)
	// List notification events
	// (GET /api/v1/notification/events)
	ListNotificationEvents(w http.ResponseWriter, r *http.Request, params ListNotificationEventsParams)
	// Get notification event
	// (GET /api/v1/notification/events/{eventId})
	GetNotificationEvent(w http.ResponseWriter, r *http.Request, eventId string)
	// List notification rules
	// (GET /api/v1/notification/rules)
	ListNotificationRules(w http.ResponseWriter, r *http.Request, params ListNotificationRulesParams)
	// Create a notification rule
	// (POST /api/v1/notification/rules)
	CreateNotificationRule(w http.ResponseWriter, r *http.Request)
	// Delete a notification rule
	// (DELETE /api/v1/notification/rules/{ruleId})
	DeleteNotificationRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Get notification rule
	// (GET /api/v1/notification/rules/{ruleId})
	GetNotificationRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Update a notification rule
	// (PUT /api/v1/notification/rules/{ruleId})
	UpdateNotificationRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Test notification rule
	// (POST /api/v1/notification/rules/{ruleId}/test)
	TestNotificationRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Receive Svix operational events
	// (POST /api/v1/notification/webhook/svix)
	ReceiveSvixOperationalEvent(w http.ResponseWriter, r *http.Request)
	// List plans
	// (GET /api/v1/plans)
	ListPlans(w http.ResponseWriter, r *http.Request, params ListPlansParams)
	// Create a plan
	// (POST /api/v1/plans)
	CreatePlan(w http.ResponseWriter, r *http.Request)
	// New draft plan
	// (POST /api/v1/plans/{planIdOrKey}/next)
	NextPlan(w http.ResponseWriter, r *http.Request, planIdOrKey string)
	// Delete plan
	// (DELETE /api/v1/plans/{planId})
	DeletePlan(w http.ResponseWriter, r *http.Request, planId string)
	// Get plan
	// (GET /api/v1/plans/{planId})
	GetPlan(w http.ResponseWriter, r *http.Request, planId string, params GetPlanParams)
	// Update a plan
	// (PUT /api/v1/plans/{planId})
	UpdatePlan(w http.ResponseWriter, r *http.Request, planId string)
	// Archive plan version
	// (POST /api/v1/plans/{planId}/archive)
	ArchivePlan(w http.ResponseWriter, r *http.Request, planId string)
	// List phases in plan
	// (GET /api/v1/plans/{planId}/phases)
	ListPlanPhases(w http.ResponseWriter, r *http.Request, planId string, params ListPlanPhasesParams)
	// Create new phase in plan
	// (POST /api/v1/plans/{planId}/phases)
	CreatePlanPhase(w http.ResponseWriter, r *http.Request, planId string)
	// Delete phase for plan
	// (DELETE /api/v1/plans/{planId}/phases/{planPhaseKey})
	DeletePlanPhase(w http.ResponseWriter, r *http.Request, planId string, planPhaseKey string)
	// Get phase for plan
	// (GET /api/v1/plans/{planId}/phases/{planPhaseKey})
	GetPlanPhase(w http.ResponseWriter, r *http.Request, planId string, planPhaseKey string)
	// Update phase in plan
	// (PUT /api/v1/plans/{planId}/phases/{planPhaseKey})
	UpdatePlanPhase(w http.ResponseWriter, r *http.Request, planId string, planPhaseKey string)
	// Publish plan
	// (POST /api/v1/plans/{planId}/publish)
	PublishPlan(w http.ResponseWriter, r *http.Request, planId string)
	// Query meter Query meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// List consumer portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create consumer portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// List entitlements
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements)
	ListSubjectEntitlements(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, params ListSubjectEntitlementsParams)
	// Create an entitlement
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements)
	CreateEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey string)
	// List entitlement grants
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants)
	ListEntitlementGrants(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementIdOrFeatureKey string, params ListEntitlementGrantsParams)
	// Create grant
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants)
	CreateGrant(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementIdOrFeatureKey string)
	// Override entitlement
	// (PUT /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/override)
	OverrideEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementIdOrFeatureKey string)
	// Get entitlement value
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/value)
	GetEntitlementValue(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementIdOrFeatureKey string, params GetEntitlementValueParams)
	// Delete entitlement
	// (DELETE /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
	DeleteEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementId string)
	// Get entitlement
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
	GetEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementId string)
	// Get entitlement history
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history)
	GetEntitlementHistory(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementId string, params GetEntitlementHistoryParams)
	// Reset entitlement
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset)
	ResetEntitlementUsage(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementId string)
	// Create subscription
	// (POST /api/v1/subscriptions)
	CreateSubscription(w http.ResponseWriter, r *http.Request)
	// Get subscription Get subscription
	// (GET /api/v1/subscriptions/{subscriptionId})
	GetSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string, params GetSubscriptionParams)
	// Edit subscription
	// (PATCH /api/v1/subscriptions/{subscriptionId})
	EditSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string)
	// Cancel subscription
	// (POST /api/v1/subscriptions/{subscriptionId}/cancel)
	CancelSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string)
	// Migrate subscription
	// (POST /api/v1/subscriptions/{subscriptionId}/migrate)
	MigrateSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string)
	// Unschedule cancelation
	// (POST /api/v1/subscriptions/{subscriptionId}/unschedule-cancelation)
	UnscheduleCancelation(w http.ResponseWriter, r *http.Request, subscriptionId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List apps
// (GET /api/v1/apps)
func (_ Unimplemented) ListApps(w http.ResponseWriter, r *http.Request, params ListAppsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Uninstall app
// (DELETE /api/v1/apps/{id})
func (_ Unimplemented) UninstallApp(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get app
// (GET /api/v1/apps/{id})
func (_ Unimplemented) GetApp(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Stripe webhook
// (POST /api/v1/apps/{id}/stripe/webhook)
func (_ Unimplemented) AppStripeWebhook(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List customer overrides
// (GET /api/v1/billing/customer)
func (_ Unimplemented) BillingListCustomerOverrides(w http.ResponseWriter, r *http.Request, params BillingListCustomerOverridesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a customer override
// (DELETE /api/v1/billing/customer/{customerId})
func (_ Unimplemented) BillingDeleteCustomerOverride(w http.ResponseWriter, r *http.Request, customerId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a customer override
// (GET /api/v1/billing/customer/{customerId})
func (_ Unimplemented) BillingGetCustomerOverrideById(w http.ResponseWriter, r *http.Request, customerId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create/update a customer override
// (POST /api/v1/billing/customer/{customerId})
func (_ Unimplemented) BillingUpsertCustomerOverride(w http.ResponseWriter, r *http.Request, customerId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List invoices
// (GET /api/v1/billing/invoices)
func (_ Unimplemented) BillingListInvoices(w http.ResponseWriter, r *http.Request, params BillingListInvoicesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List invoices
// (GET /api/v1/billing/invoices/{customerId})
func (_ Unimplemented) BillingListInvoicesByCustomer(w http.ResponseWriter, r *http.Request, customerId string, params BillingListInvoicesByCustomerParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create an invoice
// (POST /api/v1/billing/invoices/{customerId})
func (_ Unimplemented) BillingCreateInvoice(w http.ResponseWriter, r *http.Request, customerId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an invoice
// (DELETE /api/v1/billing/invoices/{customerId}/invoices/{invoiceId})
func (_ Unimplemented) BillingDeleteInvoiceByCustomerInvoiceId(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get an invoice
// (GET /api/v1/billing/invoices/{customerId}/invoices/{invoiceId})
func (_ Unimplemented) BillingGetInvoiceByCustomerInvoiceId(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string, params BillingGetInvoiceByCustomerInvoiceIdParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Advance the invoice's state to the next status
// (POST /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/advance)
func (_ Unimplemented) BillingInvoiceAdvance(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send the invoice to the customer
// (POST /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/approve)
func (_ Unimplemented) BillingApproveInvoice(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an invoice line
// (DELETE /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/lines/{lineId})
func (_ Unimplemented) BillingDeleteInvoiceLine(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string, lineId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an invoice line
// (PUT /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/lines/{lineId})
func (_ Unimplemented) BillingUpdateInvoiceLine(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string, lineId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retry advancing the invoice after a failed attempt.
// (POST /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/retry)
func (_ Unimplemented) BillingInvoiceRetry(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Recalculate an invoice's tax amounts
// (POST /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/tax/recalculate)
func (_ Unimplemented) BillingRecalculateInvoiceTax(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void an invoice
// (POST /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/void)
func (_ Unimplemented) BillingVoidInvoice(w http.ResponseWriter, r *http.Request, customerId string, invoiceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create line items
// (POST /api/v1/billing/invoices/{customerId}/lines)
func (_ Unimplemented) BillingCreateLineByCustomer(w http.ResponseWriter, r *http.Request, customerId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List billing profiles
// (GET /api/v1/billing/profile)
func (_ Unimplemented) BillingListProfiles(w http.ResponseWriter, r *http.Request, params BillingListProfilesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new billing profile
// (POST /api/v1/billing/profile)
func (_ Unimplemented) BillingCreateProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Archive a billing profile
// (DELETE /api/v1/billing/profile/{id})
func (_ Unimplemented) BillingArchiveProfile(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a billing profile by ID
// (GET /api/v1/billing/profile/{id})
func (_ Unimplemented) BillingGetProfile(w http.ResponseWriter, r *http.Request, id string, params BillingGetProfileParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a billing profile
// (PUT /api/v1/billing/profile/{id})
func (_ Unimplemented) BillingUpdateProfile(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List customers
// (GET /api/v1/customers)
func (_ Unimplemented) ListCustomers(w http.ResponseWriter, r *http.Request, params ListCustomersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create customer
// (POST /api/v1/customers)
func (_ Unimplemented) CreateCustomer(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete customer
// (DELETE /api/v1/customers/{id})
func (_ Unimplemented) DeleteCustomer(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get customer
// (GET /api/v1/customers/{id})
func (_ Unimplemented) GetCustomer(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update customer
// (PUT /api/v1/customers/{id})
func (_ Unimplemented) UpdateCustomer(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get event metrics
// (GET /api/v1/debug/metrics)
func (_ Unimplemented) GetDebugMetrics(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all entitlements
// (GET /api/v1/entitlements)
func (_ Unimplemented) ListEntitlements(w http.ResponseWriter, r *http.Request, params ListEntitlementsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get entitlement by id
// (GET /api/v1/entitlements/{entitlementId})
func (_ Unimplemented) GetEntitlementById(w http.ResponseWriter, r *http.Request, entitlementId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request, params ListFeaturesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete feature
// (DELETE /api/v1/features/{featureId})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureId})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List grants
// (GET /api/v1/grants)
func (_ Unimplemented) ListGrants(w http.ResponseWriter, r *http.Request, params ListGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void grant
// (DELETE /api/v1/grants/{grantId})
func (_ Unimplemented) VoidGrant(w http.ResponseWriter, r *http.Request, grantId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create checkout session
// (POST /api/v1/integration/stripe/checkout/sessions)
func (_ Unimplemented) CreateStripeCheckoutSession(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List available apps
// (GET /api/v1/marketplace/listings)
func (_ Unimplemented) ListMarketplaceListings(w http.ResponseWriter, r *http.Request, params ListMarketplaceListingsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get app details by type
// (GET /api/v1/marketplace/listings/{type})
func (_ Unimplemented) GetMarketplaceListing(w http.ResponseWriter, r *http.Request, pType AppType) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Install app via API key
// (POST /api/v1/marketplace/listings/{type}/install/apikey)
func (_ Unimplemented) MarketplaceAppAPIKeyInstall(w http.ResponseWriter, r *http.Request, pType MarketplaceApiKeyInstallRequestType) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get OAuth2 install URL
// (GET /api/v1/marketplace/listings/{type}/install/oauth2)
func (_ Unimplemented) MarketplaceOAuth2InstallGetURL(w http.ResponseWriter, r *http.Request, pType AppType) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Install app via OAuth2
// (GET /api/v1/marketplace/listings/{type}/install/oauth2/authorize)
func (_ Unimplemented) MarketplaceOAuth2InstallAuthorize(w http.ResponseWriter, r *http.Request, pType MarketplaceOAuth2InstallAuthorizeRequestType, params MarketplaceOAuth2InstallAuthorizeParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug string, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List notification channels
// (GET /api/v1/notification/channels)
func (_ Unimplemented) ListNotificationChannels(w http.ResponseWriter, r *http.Request, params ListNotificationChannelsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a notification channel
// (POST /api/v1/notification/channels)
func (_ Unimplemented) CreateNotificationChannel(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a notification channel
// (DELETE /api/v1/notification/channels/{channelId})
func (_ Unimplemented) DeleteNotificationChannel(w http.ResponseWriter, r *http.Request, channelId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get notification channel
// (GET /api/v1/notification/channels/{channelId})
func (_ Unimplemented) GetNotificationChannel(w http.ResponseWriter, r *http.Request, channelId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a notification channel
// (PUT /api/v1/notification/channels/{channelId})
func (_ Unimplemented) UpdateNotificationChannel(w http.ResponseWriter, r *http.Request, channelId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List notification events
// (GET /api/v1/notification/events)
func (_ Unimplemented) ListNotificationEvents(w http.ResponseWriter, r *http.Request, params ListNotificationEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get notification event
// (GET /api/v1/notification/events/{eventId})
func (_ Unimplemented) GetNotificationEvent(w http.ResponseWriter, r *http.Request, eventId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List notification rules
// (GET /api/v1/notification/rules)
func (_ Unimplemented) ListNotificationRules(w http.ResponseWriter, r *http.Request, params ListNotificationRulesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a notification rule
// (POST /api/v1/notification/rules)
func (_ Unimplemented) CreateNotificationRule(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a notification rule
// (DELETE /api/v1/notification/rules/{ruleId})
func (_ Unimplemented) DeleteNotificationRule(w http.ResponseWriter, r *http.Request, ruleId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get notification rule
// (GET /api/v1/notification/rules/{ruleId})
func (_ Unimplemented) GetNotificationRule(w http.ResponseWriter, r *http.Request, ruleId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a notification rule
// (PUT /api/v1/notification/rules/{ruleId})
func (_ Unimplemented) UpdateNotificationRule(w http.ResponseWriter, r *http.Request, ruleId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Test notification rule
// (POST /api/v1/notification/rules/{ruleId}/test)
func (_ Unimplemented) TestNotificationRule(w http.ResponseWriter, r *http.Request, ruleId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Receive Svix operational events
// (POST /api/v1/notification/webhook/svix)
func (_ Unimplemented) ReceiveSvixOperationalEvent(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List plans
// (GET /api/v1/plans)
func (_ Unimplemented) ListPlans(w http.ResponseWriter, r *http.Request, params ListPlansParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a plan
// (POST /api/v1/plans)
func (_ Unimplemented) CreatePlan(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// New draft plan
// (POST /api/v1/plans/{planIdOrKey}/next)
func (_ Unimplemented) NextPlan(w http.ResponseWriter, r *http.Request, planIdOrKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete plan
// (DELETE /api/v1/plans/{planId})
func (_ Unimplemented) DeletePlan(w http.ResponseWriter, r *http.Request, planId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get plan
// (GET /api/v1/plans/{planId})
func (_ Unimplemented) GetPlan(w http.ResponseWriter, r *http.Request, planId string, params GetPlanParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a plan
// (PUT /api/v1/plans/{planId})
func (_ Unimplemented) UpdatePlan(w http.ResponseWriter, r *http.Request, planId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Archive plan version
// (POST /api/v1/plans/{planId}/archive)
func (_ Unimplemented) ArchivePlan(w http.ResponseWriter, r *http.Request, planId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List phases in plan
// (GET /api/v1/plans/{planId}/phases)
func (_ Unimplemented) ListPlanPhases(w http.ResponseWriter, r *http.Request, planId string, params ListPlanPhasesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create new phase in plan
// (POST /api/v1/plans/{planId}/phases)
func (_ Unimplemented) CreatePlanPhase(w http.ResponseWriter, r *http.Request, planId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete phase for plan
// (DELETE /api/v1/plans/{planId}/phases/{planPhaseKey})
func (_ Unimplemented) DeletePlanPhase(w http.ResponseWriter, r *http.Request, planId string, planPhaseKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get phase for plan
// (GET /api/v1/plans/{planId}/phases/{planPhaseKey})
func (_ Unimplemented) GetPlanPhase(w http.ResponseWriter, r *http.Request, planId string, planPhaseKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update phase in plan
// (PUT /api/v1/plans/{planId}/phases/{planPhaseKey})
func (_ Unimplemented) UpdatePlanPhase(w http.ResponseWriter, r *http.Request, planId string, planPhaseKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Publish plan
// (POST /api/v1/plans/{planId}/publish)
func (_ Unimplemented) PublishPlan(w http.ResponseWriter, r *http.Request, planId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter Query meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List consumer portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create consumer portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List entitlements
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements)
func (_ Unimplemented) ListSubjectEntitlements(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, params ListSubjectEntitlementsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create an entitlement
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements)
func (_ Unimplemented) CreateEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List entitlement grants
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants)
func (_ Unimplemented) ListEntitlementGrants(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementIdOrFeatureKey string, params ListEntitlementGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create grant
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants)
func (_ Unimplemented) CreateGrant(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementIdOrFeatureKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Override entitlement
// (PUT /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/override)
func (_ Unimplemented) OverrideEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementIdOrFeatureKey string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get entitlement value
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/value)
func (_ Unimplemented) GetEntitlementValue(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementIdOrFeatureKey string, params GetEntitlementValueParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete entitlement
// (DELETE /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
func (_ Unimplemented) DeleteEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get entitlement
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
func (_ Unimplemented) GetEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get entitlement history
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history)
func (_ Unimplemented) GetEntitlementHistory(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementId string, params GetEntitlementHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset entitlement
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset)
func (_ Unimplemented) ResetEntitlementUsage(w http.ResponseWriter, r *http.Request, subjectIdOrKey string, entitlementId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create subscription
// (POST /api/v1/subscriptions)
func (_ Unimplemented) CreateSubscription(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get subscription Get subscription
// (GET /api/v1/subscriptions/{subscriptionId})
func (_ Unimplemented) GetSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string, params GetSubscriptionParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Edit subscription
// (PATCH /api/v1/subscriptions/{subscriptionId})
func (_ Unimplemented) EditSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Cancel subscription
// (POST /api/v1/subscriptions/{subscriptionId}/cancel)
func (_ Unimplemented) CancelSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Migrate subscription
// (POST /api/v1/subscriptions/{subscriptionId}/migrate)
func (_ Unimplemented) MigrateSubscription(w http.ResponseWriter, r *http.Request, subscriptionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unschedule cancelation
// (POST /api/v1/subscriptions/{subscriptionId}/unschedule-cancelation)
func (_ Unimplemented) UnscheduleCancelation(w http.ResponseWriter, r *http.Request, subscriptionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListApps operation middleware
func (siw *ServerInterfaceWrapper) ListApps(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAppsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListApps(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UninstallApp operation middleware
func (siw *ServerInterfaceWrapper) UninstallApp(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UninstallApp(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApp operation middleware
func (siw *ServerInterfaceWrapper) GetApp(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApp(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AppStripeWebhook operation middleware
func (siw *ServerInterfaceWrapper) AppStripeWebhook(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppStripeWebhook(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingListCustomerOverrides operation middleware
func (siw *ServerInterfaceWrapper) BillingListCustomerOverrides(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BillingListCustomerOverridesParams

	// ------------- Optional query parameter "billingProfile" -------------

	err = runtime.BindQueryParameter("form", false, false, "billingProfile", r.URL.Query(), &params.BillingProfile)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "billingProfile", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", false, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingListCustomerOverrides(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingDeleteCustomerOverride operation middleware
func (siw *ServerInterfaceWrapper) BillingDeleteCustomerOverride(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingDeleteCustomerOverride(w, r, customerId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingGetCustomerOverrideById operation middleware
func (siw *ServerInterfaceWrapper) BillingGetCustomerOverrideById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingGetCustomerOverrideById(w, r, customerId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingUpsertCustomerOverride operation middleware
func (siw *ServerInterfaceWrapper) BillingUpsertCustomerOverride(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingUpsertCustomerOverride(w, r, customerId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingListInvoices operation middleware
func (siw *ServerInterfaceWrapper) BillingListInvoices(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BillingListInvoicesParams

	// ------------- Optional query parameter "customers" -------------

	err = runtime.BindQueryParameter("form", false, false, "customers", r.URL.Query(), &params.Customers)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customers", Err: err})
		return
	}

	// ------------- Optional query parameter "statuses" -------------

	err = runtime.BindQueryParameter("form", false, false, "statuses", r.URL.Query(), &params.Statuses)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statuses", Err: err})
		return
	}

	// ------------- Optional query parameter "extendedStatuses" -------------

	err = runtime.BindQueryParameter("form", false, false, "extendedStatuses", r.URL.Query(), &params.ExtendedStatuses)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "extendedStatuses", Err: err})
		return
	}

	// ------------- Optional query parameter "issuedAfter" -------------

	err = runtime.BindQueryParameter("form", false, false, "issuedAfter", r.URL.Query(), &params.IssuedAfter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "issuedAfter", Err: err})
		return
	}

	// ------------- Optional query parameter "issuedBefore" -------------

	err = runtime.BindQueryParameter("form", false, false, "issuedBefore", r.URL.Query(), &params.IssuedBefore)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "issuedBefore", Err: err})
		return
	}

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", false, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingListInvoices(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingListInvoicesByCustomer operation middleware
func (siw *ServerInterfaceWrapper) BillingListInvoicesByCustomer(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params BillingListInvoicesByCustomerParams

	// ------------- Optional query parameter "statuses" -------------

	err = runtime.BindQueryParameter("form", false, false, "statuses", r.URL.Query(), &params.Statuses)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statuses", Err: err})
		return
	}

	// ------------- Optional query parameter "extendedStatuses" -------------

	err = runtime.BindQueryParameter("form", false, false, "extendedStatuses", r.URL.Query(), &params.ExtendedStatuses)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "extendedStatuses", Err: err})
		return
	}

	// ------------- Optional query parameter "issuedAfter" -------------

	err = runtime.BindQueryParameter("form", false, false, "issuedAfter", r.URL.Query(), &params.IssuedAfter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "issuedAfter", Err: err})
		return
	}

	// ------------- Optional query parameter "issuedBefore" -------------

	err = runtime.BindQueryParameter("form", false, false, "issuedBefore", r.URL.Query(), &params.IssuedBefore)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "issuedBefore", Err: err})
		return
	}

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", false, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingListInvoicesByCustomer(w, r, customerId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingCreateInvoice operation middleware
func (siw *ServerInterfaceWrapper) BillingCreateInvoice(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingCreateInvoice(w, r, customerId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingDeleteInvoiceByCustomerInvoiceId operation middleware
func (siw *ServerInterfaceWrapper) BillingDeleteInvoiceByCustomerInvoiceId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingDeleteInvoiceByCustomerInvoiceId(w, r, customerId, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingGetInvoiceByCustomerInvoiceId operation middleware
func (siw *ServerInterfaceWrapper) BillingGetInvoiceByCustomerInvoiceId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params BillingGetInvoiceByCustomerInvoiceIdParams

	// ------------- Required query parameter "expand" -------------

	if paramValue := r.URL.Query().Get("expand"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "expand"})
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingGetInvoiceByCustomerInvoiceId(w, r, customerId, invoiceId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingInvoiceAdvance operation middleware
func (siw *ServerInterfaceWrapper) BillingInvoiceAdvance(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingInvoiceAdvance(w, r, customerId, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingApproveInvoice operation middleware
func (siw *ServerInterfaceWrapper) BillingApproveInvoice(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingApproveInvoice(w, r, customerId, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingDeleteInvoiceLine operation middleware
func (siw *ServerInterfaceWrapper) BillingDeleteInvoiceLine(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	// ------------- Path parameter "lineId" -------------
	var lineId string

	err = runtime.BindStyledParameterWithOptions("simple", "lineId", chi.URLParam(r, "lineId"), &lineId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lineId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingDeleteInvoiceLine(w, r, customerId, invoiceId, lineId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingUpdateInvoiceLine operation middleware
func (siw *ServerInterfaceWrapper) BillingUpdateInvoiceLine(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	// ------------- Path parameter "lineId" -------------
	var lineId string

	err = runtime.BindStyledParameterWithOptions("simple", "lineId", chi.URLParam(r, "lineId"), &lineId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lineId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingUpdateInvoiceLine(w, r, customerId, invoiceId, lineId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingInvoiceRetry operation middleware
func (siw *ServerInterfaceWrapper) BillingInvoiceRetry(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingInvoiceRetry(w, r, customerId, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingRecalculateInvoiceTax operation middleware
func (siw *ServerInterfaceWrapper) BillingRecalculateInvoiceTax(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingRecalculateInvoiceTax(w, r, customerId, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingVoidInvoice operation middleware
func (siw *ServerInterfaceWrapper) BillingVoidInvoice(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", chi.URLParam(r, "invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoiceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingVoidInvoice(w, r, customerId, invoiceId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingCreateLineByCustomer operation middleware
func (siw *ServerInterfaceWrapper) BillingCreateLineByCustomer(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", chi.URLParam(r, "customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingCreateLineByCustomer(w, r, customerId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingListProfiles operation middleware
func (siw *ServerInterfaceWrapper) BillingListProfiles(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BillingListProfilesParams

	// ------------- Optional query parameter "includeArchived" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeArchived", r.URL.Query(), &params.IncludeArchived)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeArchived", Err: err})
		return
	}

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", false, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingListProfiles(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingCreateProfile operation middleware
func (siw *ServerInterfaceWrapper) BillingCreateProfile(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingCreateProfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingArchiveProfile operation middleware
func (siw *ServerInterfaceWrapper) BillingArchiveProfile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingArchiveProfile(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingGetProfile operation middleware
func (siw *ServerInterfaceWrapper) BillingGetProfile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params BillingGetProfileParams

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingGetProfile(w, r, id, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// BillingUpdateProfile operation middleware
func (siw *ServerInterfaceWrapper) BillingUpdateProfile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BillingUpdateProfile(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListCustomers operation middleware
func (siw *ServerInterfaceWrapper) ListCustomers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCustomersParams

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", false, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "primaryEmail" -------------

	err = runtime.BindQueryParameter("form", false, false, "primaryEmail", r.URL.Query(), &params.PrimaryEmail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "primaryEmail", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", false, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCustomers(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateCustomer operation middleware
func (siw *ServerInterfaceWrapper) CreateCustomer(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCustomer(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteCustomer operation middleware
func (siw *ServerInterfaceWrapper) DeleteCustomer(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCustomer(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCustomer operation middleware
func (siw *ServerInterfaceWrapper) GetCustomer(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCustomer(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateCustomer operation middleware
func (siw *ServerInterfaceWrapper) UpdateCustomer(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCustomer(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDebugMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetDebugMetrics(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDebugMetrics(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListEntitlements operation middleware
func (siw *ServerInterfaceWrapper) ListEntitlements(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEntitlementsParams

	// ------------- Optional query parameter "feature" -------------

	err = runtime.BindQueryParameter("form", true, false, "feature", r.URL.Query(), &params.Feature)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "feature", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "entitlementType" -------------

	err = runtime.BindQueryParameter("form", true, false, "entitlementType", r.URL.Query(), &params.EntitlementType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementType", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", false, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEntitlements(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEntitlementById operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlementById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlementById(w, r, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "ingestedAtFrom" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingestedAtFrom", r.URL.Query(), &params.IngestedAtFrom)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ingestedAtFrom", Err: err})
		return
	}

	// ------------- Optional query parameter "ingestedAtTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "ingestedAtTo", r.URL.Query(), &params.IngestedAtTo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ingestedAtTo", Err: err})
		return
	}

	// ------------- Optional query parameter "hasError" -------------

	err = runtime.BindQueryParameter("form", true, false, "hasError", r.URL.Query(), &params.HasError)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hasError", Err: err})
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFeaturesParams

	// ------------- Optional query parameter "meterSlug" -------------

	err = runtime.BindQueryParameter("form", true, false, "meterSlug", r.URL.Query(), &params.MeterSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	// ------------- Optional query parameter "includeArchived" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeArchived", r.URL.Query(), &params.IncludeArchived)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeArchived", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", false, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId string

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId string

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListGrants operation middleware
func (siw *ServerInterfaceWrapper) ListGrants(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGrantsParams

	// ------------- Optional query parameter "feature" -------------

	err = runtime.BindQueryParameter("form", true, false, "feature", r.URL.Query(), &params.Feature)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "feature", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", false, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// VoidGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidGrant(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "grantId" -------------
	var grantId string

	err = runtime.BindStyledParameterWithOptions("simple", "grantId", chi.URLParam(r, "grantId"), &grantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "grantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidGrant(w, r, grantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateStripeCheckoutSession operation middleware
func (siw *ServerInterfaceWrapper) CreateStripeCheckoutSession(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateStripeCheckoutSession(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListMarketplaceListings operation middleware
func (siw *ServerInterfaceWrapper) ListMarketplaceListings(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMarketplaceListingsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMarketplaceListings(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMarketplaceListing operation middleware
func (siw *ServerInterfaceWrapper) GetMarketplaceListing(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType AppType

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMarketplaceListing(w, r, pType)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// MarketplaceAppAPIKeyInstall operation middleware
func (siw *ServerInterfaceWrapper) MarketplaceAppAPIKeyInstall(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType MarketplaceApiKeyInstallRequestType

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarketplaceAppAPIKeyInstall(w, r, pType)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// MarketplaceOAuth2InstallGetURL operation middleware
func (siw *ServerInterfaceWrapper) MarketplaceOAuth2InstallGetURL(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType AppType

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarketplaceOAuth2InstallGetURL(w, r, pType)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// MarketplaceOAuth2InstallAuthorize operation middleware
func (siw *ServerInterfaceWrapper) MarketplaceOAuth2InstallAuthorize(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType MarketplaceOAuth2InstallAuthorizeRequestType

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params MarketplaceOAuth2InstallAuthorizeParams

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", false, false, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", false, false, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Optional query parameter "error" -------------

	err = runtime.BindQueryParameter("form", false, false, "error", r.URL.Query(), &params.Error)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "error", Err: err})
		return
	}

	// ------------- Optional query parameter "error_description" -------------

	err = runtime.BindQueryParameter("form", false, false, "error_description", r.URL.Query(), &params.ErrorDescription)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "error_description", Err: err})
		return
	}

	// ------------- Optional query parameter "error_uri" -------------

	err = runtime.BindQueryParameter("form", false, false, "error_uri", r.URL.Query(), &params.ErrorUri)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "error_uri", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarketplaceOAuth2InstallAuthorize(w, r, pType, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListNotificationChannels operation middleware
func (siw *ServerInterfaceWrapper) ListNotificationChannels(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNotificationChannelsParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDisabled" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDisabled", r.URL.Query(), &params.IncludeDisabled)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDisabled", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNotificationChannels(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateNotificationChannel operation middleware
func (siw *ServerInterfaceWrapper) CreateNotificationChannel(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNotificationChannel(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteNotificationChannel operation middleware
func (siw *ServerInterfaceWrapper) DeleteNotificationChannel(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "channelId" -------------
	var channelId string

	err = runtime.BindStyledParameterWithOptions("simple", "channelId", chi.URLParam(r, "channelId"), &channelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channelId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNotificationChannel(w, r, channelId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNotificationChannel operation middleware
func (siw *ServerInterfaceWrapper) GetNotificationChannel(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "channelId" -------------
	var channelId string

	err = runtime.BindStyledParameterWithOptions("simple", "channelId", chi.URLParam(r, "channelId"), &channelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channelId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotificationChannel(w, r, channelId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateNotificationChannel operation middleware
func (siw *ServerInterfaceWrapper) UpdateNotificationChannel(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "channelId" -------------
	var channelId string

	err = runtime.BindStyledParameterWithOptions("simple", "channelId", chi.URLParam(r, "channelId"), &channelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channelId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNotificationChannel(w, r, channelId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListNotificationEvents operation middleware
func (siw *ServerInterfaceWrapper) ListNotificationEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNotificationEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "feature" -------------

	err = runtime.BindQueryParameter("form", true, false, "feature", r.URL.Query(), &params.Feature)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "feature", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "rule" -------------

	err = runtime.BindQueryParameter("form", true, false, "rule", r.URL.Query(), &params.Rule)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rule", Err: err})
		return
	}

	// ------------- Optional query parameter "channel" -------------

	err = runtime.BindQueryParameter("form", true, false, "channel", r.URL.Query(), &params.Channel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channel", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNotificationEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNotificationEvent operation middleware
func (siw *ServerInterfaceWrapper) GetNotificationEvent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId string

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", chi.URLParam(r, "eventId"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotificationEvent(w, r, eventId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListNotificationRules operation middleware
func (siw *ServerInterfaceWrapper) ListNotificationRules(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNotificationRulesParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDisabled" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDisabled", r.URL.Query(), &params.IncludeDisabled)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDisabled", Err: err})
		return
	}

	// ------------- Optional query parameter "feature" -------------

	err = runtime.BindQueryParameter("form", true, false, "feature", r.URL.Query(), &params.Feature)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "feature", Err: err})
		return
	}

	// ------------- Optional query parameter "channel" -------------

	err = runtime.BindQueryParameter("form", true, false, "channel", r.URL.Query(), &params.Channel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channel", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNotificationRules(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateNotificationRule operation middleware
func (siw *ServerInterfaceWrapper) CreateNotificationRule(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNotificationRule(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteNotificationRule operation middleware
func (siw *ServerInterfaceWrapper) DeleteNotificationRule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", chi.URLParam(r, "ruleId"), &ruleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNotificationRule(w, r, ruleId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNotificationRule operation middleware
func (siw *ServerInterfaceWrapper) GetNotificationRule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", chi.URLParam(r, "ruleId"), &ruleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotificationRule(w, r, ruleId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateNotificationRule operation middleware
func (siw *ServerInterfaceWrapper) UpdateNotificationRule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", chi.URLParam(r, "ruleId"), &ruleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNotificationRule(w, r, ruleId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// TestNotificationRule operation middleware
func (siw *ServerInterfaceWrapper) TestNotificationRule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", chi.URLParam(r, "ruleId"), &ruleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestNotificationRule(w, r, ruleId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ReceiveSvixOperationalEvent operation middleware
func (siw *ServerInterfaceWrapper) ReceiveSvixOperationalEvent(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReceiveSvixOperationalEvent(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListPlans operation middleware
func (siw *ServerInterfaceWrapper) ListPlans(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlansParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "key" -------------

	err = runtime.BindQueryParameter("form", true, false, "key", r.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	// ------------- Optional query parameter "keyVersion" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "keyVersion", r.URL.Query(), &params.KeyVersion)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyVersion", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPlans(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePlan operation middleware
func (siw *ServerInterfaceWrapper) CreatePlan(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePlan(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// NextPlan operation middleware
func (siw *ServerInterfaceWrapper) NextPlan(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planIdOrKey" -------------
	var planIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "planIdOrKey", chi.URLParam(r, "planIdOrKey"), &planIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planIdOrKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.NextPlan(w, r, planIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePlan operation middleware
func (siw *ServerInterfaceWrapper) DeletePlan(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePlan(w, r, planId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPlan operation middleware
func (siw *ServerInterfaceWrapper) GetPlan(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlanParams

	// ------------- Optional query parameter "includeLatest" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeLatest", r.URL.Query(), &params.IncludeLatest)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeLatest", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlan(w, r, planId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePlan operation middleware
func (siw *ServerInterfaceWrapper) UpdatePlan(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePlan(w, r, planId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ArchivePlan operation middleware
func (siw *ServerInterfaceWrapper) ArchivePlan(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ArchivePlan(w, r, planId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListPlanPhases operation middleware
func (siw *ServerInterfaceWrapper) ListPlanPhases(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlanPhasesParams

	// ------------- Optional query parameter "key" -------------

	err = runtime.BindQueryParameter("form", true, false, "key", r.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPlanPhases(w, r, planId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePlanPhase operation middleware
func (siw *ServerInterfaceWrapper) CreatePlanPhase(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePlanPhase(w, r, planId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePlanPhase operation middleware
func (siw *ServerInterfaceWrapper) DeletePlanPhase(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	// ------------- Path parameter "planPhaseKey" -------------
	var planPhaseKey string

	err = runtime.BindStyledParameterWithOptions("simple", "planPhaseKey", chi.URLParam(r, "planPhaseKey"), &planPhaseKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planPhaseKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePlanPhase(w, r, planId, planPhaseKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPlanPhase operation middleware
func (siw *ServerInterfaceWrapper) GetPlanPhase(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	// ------------- Path parameter "planPhaseKey" -------------
	var planPhaseKey string

	err = runtime.BindStyledParameterWithOptions("simple", "planPhaseKey", chi.URLParam(r, "planPhaseKey"), &planPhaseKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planPhaseKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlanPhase(w, r, planId, planPhaseKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePlanPhase operation middleware
func (siw *ServerInterfaceWrapper) UpdatePlanPhase(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	// ------------- Path parameter "planPhaseKey" -------------
	var planPhaseKey string

	err = runtime.BindStyledParameterWithOptions("simple", "planPhaseKey", chi.URLParam(r, "planPhaseKey"), &planPhaseKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planPhaseKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePlanPhase(w, r, planId, planPhaseKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PublishPlan operation middleware
func (siw *ServerInterfaceWrapper) PublishPlan(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameterWithOptions("simple", "planId", chi.URLParam(r, "planId"), &planId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PublishPlan(w, r, planId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSubjectEntitlements operation middleware
func (siw *ServerInterfaceWrapper) ListSubjectEntitlements(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSubjectEntitlementsParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjectEntitlements(w, r, subjectIdOrKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateEntitlement operation middleware
func (siw *ServerInterfaceWrapper) CreateEntitlement(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEntitlement(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListEntitlementGrants operation middleware
func (siw *ServerInterfaceWrapper) ListEntitlementGrants(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementIdOrFeatureKey" -------------
	var entitlementIdOrFeatureKey string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementIdOrFeatureKey", chi.URLParam(r, "entitlementIdOrFeatureKey"), &entitlementIdOrFeatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementIdOrFeatureKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEntitlementGrantsParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", false, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEntitlementGrants(w, r, subjectIdOrKey, entitlementIdOrFeatureKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateGrant(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementIdOrFeatureKey" -------------
	var entitlementIdOrFeatureKey string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementIdOrFeatureKey", chi.URLParam(r, "entitlementIdOrFeatureKey"), &entitlementIdOrFeatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementIdOrFeatureKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGrant(w, r, subjectIdOrKey, entitlementIdOrFeatureKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// OverrideEntitlement operation middleware
func (siw *ServerInterfaceWrapper) OverrideEntitlement(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementIdOrFeatureKey" -------------
	var entitlementIdOrFeatureKey string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementIdOrFeatureKey", chi.URLParam(r, "entitlementIdOrFeatureKey"), &entitlementIdOrFeatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementIdOrFeatureKey", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OverrideEntitlement(w, r, subjectIdOrKey, entitlementIdOrFeatureKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEntitlementValue operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlementValue(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementIdOrFeatureKey" -------------
	var entitlementIdOrFeatureKey string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementIdOrFeatureKey", chi.URLParam(r, "entitlementIdOrFeatureKey"), &entitlementIdOrFeatureKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementIdOrFeatureKey", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntitlementValueParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlementValue(w, r, subjectIdOrKey, entitlementIdOrFeatureKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteEntitlement operation middleware
func (siw *ServerInterfaceWrapper) DeleteEntitlement(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEntitlement(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEntitlement operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlement(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlement(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEntitlementHistory operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlementHistory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntitlementHistoryParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Required query parameter "windowSize" -------------

	if paramValue := r.URL.Query().Get("windowSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "windowSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlementHistory(w, r, subjectIdOrKey, entitlementId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ResetEntitlementUsage operation middleware
func (siw *ServerInterfaceWrapper) ResetEntitlementUsage(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey string

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId string

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetEntitlementUsage(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateSubscription(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSubscription(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscription operation middleware
func (siw *ServerInterfaceWrapper) GetSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionParams

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "expand", r.URL.Query(), &params.Expand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expand", Err: err})
		return
	}

	// ------------- Optional query parameter "at" -------------

	err = runtime.BindQueryParameter("form", false, false, "at", r.URL.Query(), &params.At)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "at", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscription(w, r, subscriptionId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// EditSubscription operation middleware
func (siw *ServerInterfaceWrapper) EditSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EditSubscription(w, r, subscriptionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CancelSubscription operation middleware
func (siw *ServerInterfaceWrapper) CancelSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelSubscription(w, r, subscriptionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// MigrateSubscription operation middleware
func (siw *ServerInterfaceWrapper) MigrateSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MigrateSubscription(w, r, subscriptionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UnscheduleCancelation operation middleware
func (siw *ServerInterfaceWrapper) UnscheduleCancelation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", chi.URLParam(r, "subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnscheduleCancelation(w, r, subscriptionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/apps", wrapper.ListApps)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/apps/{id}", wrapper.UninstallApp)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/apps/{id}", wrapper.GetApp)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/apps/{id}/stripe/webhook", wrapper.AppStripeWebhook)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/billing/customer", wrapper.BillingListCustomerOverrides)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/billing/customer/{customerId}", wrapper.BillingDeleteCustomerOverride)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/billing/customer/{customerId}", wrapper.BillingGetCustomerOverrideById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/customer/{customerId}", wrapper.BillingUpsertCustomerOverride)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/billing/invoices", wrapper.BillingListInvoices)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/billing/invoices/{customerId}", wrapper.BillingListInvoicesByCustomer)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/invoices/{customerId}", wrapper.BillingCreateInvoice)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/billing/invoices/{customerId}/invoices/{invoiceId}", wrapper.BillingDeleteInvoiceByCustomerInvoiceId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/billing/invoices/{customerId}/invoices/{invoiceId}", wrapper.BillingGetInvoiceByCustomerInvoiceId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/advance", wrapper.BillingInvoiceAdvance)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/approve", wrapper.BillingApproveInvoice)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/lines/{lineId}", wrapper.BillingDeleteInvoiceLine)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/lines/{lineId}", wrapper.BillingUpdateInvoiceLine)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/retry", wrapper.BillingInvoiceRetry)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/tax/recalculate", wrapper.BillingRecalculateInvoiceTax)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/void", wrapper.BillingVoidInvoice)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/invoices/{customerId}/lines", wrapper.BillingCreateLineByCustomer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/billing/profile", wrapper.BillingListProfiles)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/billing/profile", wrapper.BillingCreateProfile)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/billing/profile/{id}", wrapper.BillingArchiveProfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/billing/profile/{id}", wrapper.BillingGetProfile)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/billing/profile/{id}", wrapper.BillingUpdateProfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/customers", wrapper.ListCustomers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/customers", wrapper.CreateCustomer)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/customers/{id}", wrapper.DeleteCustomer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/customers/{id}", wrapper.GetCustomer)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/customers/{id}", wrapper.UpdateCustomer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/debug/metrics", wrapper.GetDebugMetrics)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/entitlements", wrapper.ListEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/entitlements/{entitlementId}", wrapper.GetEntitlementById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureId}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureId}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/grants", wrapper.ListGrants)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/grants/{grantId}", wrapper.VoidGrant)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/integration/stripe/checkout/sessions", wrapper.CreateStripeCheckoutSession)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/marketplace/listings", wrapper.ListMarketplaceListings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/marketplace/listings/{type}", wrapper.GetMarketplaceListing)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/marketplace/listings/{type}/install/apikey", wrapper.MarketplaceAppAPIKeyInstall)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/marketplace/listings/{type}/install/oauth2", wrapper.MarketplaceOAuth2InstallGetURL)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/marketplace/listings/{type}/install/oauth2/authorize", wrapper.MarketplaceOAuth2InstallAuthorize)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/channels", wrapper.ListNotificationChannels)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/notification/channels", wrapper.CreateNotificationChannel)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/notification/channels/{channelId}", wrapper.DeleteNotificationChannel)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/channels/{channelId}", wrapper.GetNotificationChannel)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/notification/channels/{channelId}", wrapper.UpdateNotificationChannel)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/events", wrapper.ListNotificationEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/events/{eventId}", wrapper.GetNotificationEvent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/rules", wrapper.ListNotificationRules)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/notification/rules", wrapper.CreateNotificationRule)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/notification/rules/{ruleId}", wrapper.DeleteNotificationRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/notification/rules/{ruleId}", wrapper.GetNotificationRule)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/notification/rules/{ruleId}", wrapper.UpdateNotificationRule)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/notification/rules/{ruleId}/test", wrapper.TestNotificationRule)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/notification/webhook/svix", wrapper.ReceiveSvixOperationalEvent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/plans", wrapper.ListPlans)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/plans", wrapper.CreatePlan)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/plans/{planIdOrKey}/next", wrapper.NextPlan)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/plans/{planId}", wrapper.DeletePlan)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/plans/{planId}", wrapper.GetPlan)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/plans/{planId}", wrapper.UpdatePlan)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/plans/{planId}/archive", wrapper.ArchivePlan)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/plans/{planId}/phases", wrapper.ListPlanPhases)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/plans/{planId}/phases", wrapper.CreatePlanPhase)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/plans/{planId}/phases/{planPhaseKey}", wrapper.DeletePlanPhase)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/plans/{planId}/phases/{planPhaseKey}", wrapper.GetPlanPhase)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/plans/{planId}/phases/{planPhaseKey}", wrapper.UpdatePlanPhase)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/plans/{planId}/publish", wrapper.PublishPlan)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements", wrapper.ListSubjectEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements", wrapper.CreateEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants", wrapper.ListEntitlementGrants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants", wrapper.CreateGrant)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/override", wrapper.OverrideEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/value", wrapper.GetEntitlementValue)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}", wrapper.DeleteEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}", wrapper.GetEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history", wrapper.GetEntitlementHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset", wrapper.ResetEntitlementUsage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subscriptions", wrapper.CreateSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}", wrapper.GetSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}", wrapper.EditSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}/cancel", wrapper.CancelSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}/migrate", wrapper.MigrateSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subscriptions/{subscriptionId}/unschedule-cancelation", wrapper.UnscheduleCancelation)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
