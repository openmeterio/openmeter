// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/openmeterio/openmeter/pkg/models"
)

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// Meter defines model for Meter.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterValue defines model for MeterValue.
type MeterValue = models.MeterValue

// Problem A Problem Details object (RFC 7807)
type Problem = models.Problem

// WindowSize defines model for WindowSize.
type WindowSize = models.WindowSize

// MeterSlug defines model for meterSlug.
type MeterSlug = string

// GetMeterValuesParams defines parameters for GetMeterValues.
type GetMeterValuesParams struct {
	Subject *string `form:"subject,omitempty" json:"subject,omitempty"`

	// From Start date-time in RFC 3339 format.
	// Must be aligned with the window size.
	// Inclusive.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Must be aligned with the window size.
	// Inclusive.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *WindowSize `form:"window_size,omitempty" json:"window_size,omitempty"`
}

// IngestEventsJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsJSONRequestBody = Event

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1betav1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1betav1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)

	// (POST /api/v1betav1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/v1betav1/meters/{meterSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterSlug MeterSlug)

	// (GET /api/v1betav1/meters/{meterSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterSlug MeterSlug)

	// (GET /api/v1betav1/meters/{meterSlug}/values)
	GetMeterValues(w http.ResponseWriter, r *http.Request, meterSlug MeterSlug, params GetMeterValuesParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug MeterSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterSlug"), &meterSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterSlug)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug MeterSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterSlug"), &meterSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterSlug)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeterValues operation middleware
func (siw *ServerInterfaceWrapper) GetMeterValues(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug MeterSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterSlug"), &meterSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeterValuesParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "window_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "window_size", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "window_size", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeterValues(w, r, meterSlug, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1betav1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1betav1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1betav1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1betav1/meters/{meterSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1betav1/meters/{meterSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1betav1/meters/{meterSlug}/values", wrapper.GetMeterValues)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
