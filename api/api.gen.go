// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/openmeterio/openmeter/internal/credit"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// Defines values for LedgerEntryType.
const (
	GRANT      LedgerEntryType = "GRANT"
	GRANTUSAGE LedgerEntryType = "GRANT_USAGE"
	RESET      LedgerEntryType = "RESET"
	VOID       LedgerEntryType = "VOID"
)

// Defines values for LedgerGrantExpirationPeriodDuration.
const (
	DAY   LedgerGrantExpirationPeriodDuration = "DAY"
	HOUR  LedgerGrantExpirationPeriodDuration = "HOUR"
	MONTH LedgerGrantExpirationPeriodDuration = "MONTH"
	WEEK  LedgerGrantExpirationPeriodDuration = "WEEK"
	YEAR  LedgerGrantExpirationPeriodDuration = "YEAR"
)

// Defines values for LedgerGrantType.
const (
	LedgerGrantTypeUsage LedgerGrantType = "USAGE"
)

// Defines values for ListFeaturesParamsOrderBy.
const (
	ListFeaturesParamsOrderByCreatedAt ListFeaturesParamsOrderBy = "createdAt"
	ListFeaturesParamsOrderById        ListFeaturesParamsOrderBy = "id"
	ListFeaturesParamsOrderByUpdatedAt ListFeaturesParamsOrderBy = "updatedAt"
)

// Defines values for ListLedgersParamsOrderBy.
const (
	ListLedgersParamsOrderByCreatedAt ListLedgersParamsOrderBy = "createdAt"
	ListLedgersParamsOrderById        ListLedgersParamsOrderBy = "id"
	ListLedgersParamsOrderBySubject   ListLedgersParamsOrderBy = "subject"
)

// CreateFeatureRequest A feature is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type CreateFeatureRequest struct {
	// Archived If the feature is archived, it will not be used for grants or usage.
	Archived *bool `json:"archived,omitempty"`

	// MeterGroupByFilters Optional meter group by filters. Useful if the meter scope is broader than what feature tracks.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug The meter that the feature is associated with and decreases grants by usage.
	MeterSlug string `json:"meterSlug"`

	// Name The name of the feature.
	Name string `json:"name"`
}

// CreateLedger A ledger represented in open meter. A ledger must be assigned to a single
// subject.
type CreateLedger = credit.Ledger

// CreateLedgerGrantRequest Grants are used to increase balance of specific subjects.
type CreateLedgerGrantRequest struct {
	// Amount The amount to grant. Can be positive or negative number.
	Amount float32 `json:"amount"`

	// CreatedAt The time the grant was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// EffectiveAt The effective date.
	EffectiveAt time.Time                    `json:"effectiveAt"`
	Expiration  *LedgerGrantExpirationPeriod `json:"expiration,omitempty"`

	// FeatureID The unique feature ULID that the grant is associated with, if any.
	FeatureID string             `json:"featureID"`
	Metadata  *map[string]string `json:"metadata,omitempty"`

	// ParentId The parent grant ULID that the grant is associated with, if any.
	ParentId *string `json:"parentId,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *int `json:"priority,omitempty"`

	// Rollover Grant rollover configuration.
	Rollover *LedgerGrantRollover `json:"rollover,omitempty"`

	// Type The grant type:
	// - `USAGE` - Increase balance by the amount in the unit of the associated meter.
	Type LedgerGrantType `json:"type"`

	// UpdatedAt The time the grant was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// Feature defines model for Feature.
type Feature struct {
	// Archived If the feature is archived, it will not be used for grants or usage.
	Archived *bool `json:"archived,omitempty"`

	// CreatedAt The time the feature was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id Readonly unique ULID identifier of the feature.
	Id *string `json:"id,omitempty"`

	// MeterGroupByFilters Optional meter group by filters. Useful if the meter scope is broader than what feature tracks.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug The meter that the feature is associated with and decreases grants by usage.
	MeterSlug string `json:"meterSlug"`

	// Name The name of the feature.
	Name string `json:"name"`

	// UpdatedAt The time the feature was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// FeatureBalance defines model for FeatureBalance.
type FeatureBalance struct {
	// Archived If the feature is archived, it will not be used for grants or usage.
	Archived *bool `json:"archived,omitempty"`

	// Balance The balance of the feature.
	Balance float32 `json:"balance"`

	// CreatedAt The time the feature was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id Readonly unique ULID identifier of the feature.
	Id *string `json:"id,omitempty"`

	// MeterGroupByFilters Optional meter group by filters. Useful if the meter scope is broader than what feature tracks.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug The meter that the feature is associated with and decreases grants by usage.
	MeterSlug string `json:"meterSlug"`

	// Name The name of the feature.
	Name string `json:"name"`

	// UpdatedAt The time the feature was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Usage The usage of the feature.
	Usage float32 `json:"usage"`
}

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Ledger defines model for Ledger.
type Ledger = credit.Ledger

// LedgerAlreadyExistsProblem Ledger Exists
type LedgerAlreadyExistsProblem = credit.LedgerAlreadyExistsProblemResponse

// LedgerBalance Balance of a subject.
type LedgerBalance struct {
	// FeatureBalances Features with balances.
	FeatureBalances []FeatureBalance `json:"featureBalances"`

	// GrantBalances The grants applied to the subject.
	GrantBalances []LedgerGrantBalance `json:"grantBalances"`

	// LastReset The last reset of the ledger.
	LastReset *time.Time         `json:"lastReset,omitempty"`
	Metadata  *map[string]string `json:"metadata,omitempty"`

	// Subject The subject of the ledger.
	Subject string `json:"subject"`
}

// LedgerEntry A ledger entry.
type LedgerEntry struct {
	// Amount The amount to apply. Can be positive or negative number. If applicable.
	Amount float32 `json:"amount"`

	// FeatureID The unique feature ULID that the entry is associated with, if any.
	FeatureID string `json:"featureID"`

	// Id Readonly unique ULID identifier of the ledger entry.
	Id *string `json:"id,omitempty"`

	// Period A time period
	Period *Period `json:"period,omitempty"`

	// Time The time the ledger entry was created.
	Time time.Time       `json:"time"`
	Type LedgerEntryType `json:"type"`
}

// LedgerEntryType defines model for LedgerEntryType.
type LedgerEntryType string

// LedgerGrantBalance defines model for LedgerGrantBalance.
type LedgerGrantBalance struct {
	// Amount The amount to grant. Can be positive or negative number.
	Amount float32 `json:"amount"`

	// Balance The balance of the grant.
	Balance float32 `json:"balance"`

	// CreatedAt The time the grant was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// EffectiveAt The effective date.
	EffectiveAt time.Time                    `json:"effectiveAt"`
	Expiration  *LedgerGrantExpirationPeriod `json:"expiration,omitempty"`

	// ExpiresAt The expiration date of the grant.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// FeatureID The unique feature ULID that the grant is associated with, if any.
	FeatureID string `json:"featureID"`

	// Id Readonly unique ULID identifier of the grant.
	Id       *string            `json:"id,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`

	// ParentId The parent grant ULID that the grant is associated with, if any.
	ParentId *string `json:"parentId,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *int `json:"priority,omitempty"`

	// Rollover Grant rollover configuration.
	Rollover *LedgerGrantRollover `json:"rollover,omitempty"`

	// Type The grant type:
	// - `USAGE` - Increase balance by the amount in the unit of the associated meter.
	Type LedgerGrantType `json:"type"`

	// UpdatedAt The time the grant was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Void If the grant is voided, it will not be applied to the subject's balance anymore.
	Void *bool `json:"void,omitempty"`
}

// LedgerGrantExpirationPeriod Expiration period of a ledger grant.
type LedgerGrantExpirationPeriod struct {
	// Count The expiration period count like 12 months.
	Count int `json:"count"`

	// Duration The expiration period duration like month.
	Duration LedgerGrantExpirationPeriodDuration `json:"duration"`
}

// LedgerGrantExpirationPeriodDuration The expiration period duration like month.
type LedgerGrantExpirationPeriodDuration string

// LedgerGrantResponse defines model for LedgerGrantResponse.
type LedgerGrantResponse struct {
	// Amount The amount to grant. Can be positive or negative number.
	Amount float32 `json:"amount"`

	// CreatedAt The time the grant was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// EffectiveAt The effective date.
	EffectiveAt time.Time                    `json:"effectiveAt"`
	Expiration  *LedgerGrantExpirationPeriod `json:"expiration,omitempty"`

	// ExpiresAt The expiration date of the grant.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// FeatureID The unique feature ULID that the grant is associated with, if any.
	FeatureID string `json:"featureID"`

	// Id Readonly unique ULID identifier of the grant.
	Id       *string            `json:"id,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`

	// ParentId The parent grant ULID that the grant is associated with, if any.
	ParentId *string `json:"parentId,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *int `json:"priority,omitempty"`

	// Rollover Grant rollover configuration.
	Rollover *LedgerGrantRollover `json:"rollover,omitempty"`

	// Type The grant type:
	// - `USAGE` - Increase balance by the amount in the unit of the associated meter.
	Type LedgerGrantType `json:"type"`

	// UpdatedAt The time the grant was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Void If the grant is voided, it will not be applied to the subject's balance anymore.
	Void *bool `json:"void,omitempty"`
}

// LedgerGrantRollover Grant rollover configuration.
type LedgerGrantRollover = credit.GrantRollover

// LedgerGrantRolloverType The rollover type to use:
// - `REMAINING_AMOUNT` - Rollover remaining amount.
// - `ORIGINAL_AMOUNT` - Rollover re-applies the full grant amount.
type LedgerGrantRolloverType = credit.GrantRolloverType

// LedgerGrantType The grant type:
// - `USAGE` - Increase balance by the amount in the unit of the associated meter.
type LedgerGrantType string

// LedgerReset Ledger reset configuration.
type LedgerReset = credit.Reset

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// Period A time period
type Period struct {
	// From Period start time where the amount was applied. If applicable.
	From time.Time `json:"from"`

	// To Period end time where the amount was applied. If applicable.
	To time.Time `json:"to"`
}

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// FeatureID defines model for featureID.
type FeatureID = credit.FeatureID

// LedgerGrantID defines model for ledgerGrantID.
type LedgerGrantID = credit.GrantID

// LedgerID defines model for ledgerID.
type LedgerID = credit.LedgerID

// LedgerIncludeVoids defines model for ledgerIncludeVoids.
type LedgerIncludeVoids = bool

// LedgerQueryLimit defines model for ledgerQueryLimit.
type LedgerQueryLimit = int

// LedgerQueryOffset defines model for ledgerQueryOffset.
type LedgerQueryOffset = int

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// QueryFilterGroupBy Simple filter for group bys with exact match.
//
// Usage: `?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4`
type QueryFilterGroupBy map[string]string

// QueryFilterLedgerID defines model for queryFilterLedgerID.
type QueryFilterLedgerID = credit.LedgerID

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// LedgerAlreadyExistsProblemResponse Ledger Exists
type LedgerAlreadyExistsProblemResponse = LedgerAlreadyExistsProblem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// ListFeaturesParams defines parameters for ListFeatures.
type ListFeaturesParams struct {
	// Limit Number of entries to return
	Limit *LedgerQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of entries to skip
	Offset *LedgerQueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Order by field
	OrderBy *ListFeaturesParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// IncludeArchived Include archived features.
	IncludeArchived *bool `form:"includeArchived,omitempty" json:"includeArchived,omitempty"`
}

// ListFeaturesParamsOrderBy defines parameters for ListFeatures.
type ListFeaturesParamsOrderBy string

// ListLedgersParams defines parameters for ListLedgers.
type ListLedgersParams struct {
	// Subject Query ledgers specific to subjects.
	Subject *[]string `form:"subject,omitempty" json:"subject,omitempty"`

	// SubjectSimilarTo Query ledgers with subjects that are similar to the provided text.
	SubjectSimilarTo *string `form:"subjectSimilarTo,omitempty" json:"subjectSimilarTo,omitempty"`

	// Limit Number of entries to return
	Limit *LedgerQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of entries to skip
	Offset *LedgerQueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Order by field
	OrderBy *ListLedgersParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListLedgersParamsOrderBy defines parameters for ListLedgers.
type ListLedgersParamsOrderBy string

// ListLedgerGrantsParams defines parameters for ListLedgerGrants.
type ListLedgerGrantsParams struct {
	// LedgerID Filtering and group by multiple subjects.
	//
	// Usage: `?ledgerID=01HX6VK5C498B3ABY9PR1069PP`
	LedgerID *QueryFilterLedgerID `form:"ledgerID,omitempty" json:"ledgerID,omitempty"`

	// Limit Number of entries to return
	Limit *LedgerQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// IncludeVoids Include void entries in the response.
	IncludeVoids *LedgerIncludeVoids `form:"includeVoids,omitempty" json:"includeVoids,omitempty"`
}

// GetLedgerBalanceParams defines parameters for GetLedgerBalance.
type GetLedgerBalanceParams struct {
	// Time Point of time to query balances: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListLedgerGrantsByLedgerParams defines parameters for ListLedgerGrantsByLedger.
type ListLedgerGrantsByLedgerParams struct {
	// Limit Number of entries to return
	Limit *LedgerQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// IncludeVoids Include void entries in the response.
	IncludeVoids *LedgerIncludeVoids `form:"includeVoids,omitempty" json:"includeVoids,omitempty"`
}

// GetLedgerHistoryParams defines parameters for GetLedgerHistory.
type GetLedgerHistoryParams struct {
	// Limit Number of entries to return
	Limit *LedgerQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of entries to skip
	Offset *LedgerQueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// From Start of time range to query ledger: date-time in RFC 3339 format.
	From time.Time `form:"from" json:"from"`

	// To End of time range to query ledger: date-time in RFC 3339 format. Defaults to now.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: ?subject=customer-1&subject=customer-2
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = CreateFeatureRequest

// CreateLedgerJSONRequestBody defines body for CreateLedger for application/json ContentType.
type CreateLedgerJSONRequestBody = CreateLedger

// CreateLedgerGrantJSONRequestBody defines body for CreateLedgerGrant for application/json ContentType.
type CreateLedgerGrantJSONRequestBody = CreateLedgerGrantRequest

// ResetLedgerJSONRequestBody defines body for ResetLedger for application/json ContentType.
type ResetLedgerJSONRequestBody = LedgerReset

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request, params ListFeaturesParams)
	// Create feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Delete feature
	// (DELETE /api/v1/features/{featureID})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID)
	// Get feature
	// (GET /api/v1/features/{featureID})
	GetFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID)
	// List the already defined ledgers.
	// (GET /api/v1/ledgers)
	ListLedgers(w http.ResponseWriter, r *http.Request, params ListLedgersParams)
	// Creates the specified ledger
	// (POST /api/v1/ledgers)
	CreateLedger(w http.ResponseWriter, r *http.Request)
	// List grants for multiple ledgers.
	// (GET /api/v1/ledgers/grants)
	ListLedgerGrants(w http.ResponseWriter, r *http.Request, params ListLedgerGrantsParams)
	// Get the balance of a specific subject.
	// (GET /api/v1/ledgers/{ledgerID}/balance)
	GetLedgerBalance(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetLedgerBalanceParams)
	// List ledger grants
	// (GET /api/v1/ledgers/{ledgerID}/grants)
	ListLedgerGrantsByLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params ListLedgerGrantsByLedgerParams)
	// Create a grant on a specific ledger.
	// (POST /api/v1/ledgers/{ledgerID}/grants)
	CreateLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID)
	// Void ledger grant
	// (DELETE /api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID})
	VoidLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, ledgerGrantID LedgerGrantID)
	// Get a single grant.
	// (GET /api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID})
	GetLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, ledgerGrantID LedgerGrantID)
	// Get the history of a ledger
	// (GET /api/v1/ledgers/{ledgerID}/history)
	GetLedgerHistory(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetLedgerHistoryParams)
	// Reset the ledger's balance
	// (POST /api/v1/ledgers/{ledgerID}/reset)
	ResetLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request, params ListFeaturesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete feature
// (DELETE /api/v1/features/{featureID})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureID})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List the already defined ledgers.
// (GET /api/v1/ledgers)
func (_ Unimplemented) ListLedgers(w http.ResponseWriter, r *http.Request, params ListLedgersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates the specified ledger
// (POST /api/v1/ledgers)
func (_ Unimplemented) CreateLedger(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List grants for multiple ledgers.
// (GET /api/v1/ledgers/grants)
func (_ Unimplemented) ListLedgerGrants(w http.ResponseWriter, r *http.Request, params ListLedgerGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the balance of a specific subject.
// (GET /api/v1/ledgers/{ledgerID}/balance)
func (_ Unimplemented) GetLedgerBalance(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetLedgerBalanceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List ledger grants
// (GET /api/v1/ledgers/{ledgerID}/grants)
func (_ Unimplemented) ListLedgerGrantsByLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params ListLedgerGrantsByLedgerParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a grant on a specific ledger.
// (POST /api/v1/ledgers/{ledgerID}/grants)
func (_ Unimplemented) CreateLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void ledger grant
// (DELETE /api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID})
func (_ Unimplemented) VoidLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, ledgerGrantID LedgerGrantID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a single grant.
// (GET /api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID})
func (_ Unimplemented) GetLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, ledgerGrantID LedgerGrantID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the history of a ledger
// (GET /api/v1/ledgers/{ledgerID}/history)
func (_ Unimplemented) GetLedgerHistory(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetLedgerHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset the ledger's balance
// (POST /api/v1/ledgers/{ledgerID}/reset)
func (_ Unimplemented) ResetLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFeaturesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "includeArchived" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeArchived", r.URL.Query(), &params.IncludeArchived)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeArchived", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureID" -------------
	var featureID FeatureID

	err = runtime.BindStyledParameterWithOptions("simple", "featureID", chi.URLParam(r, "featureID"), &featureID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureID" -------------
	var featureID FeatureID

	err = runtime.BindStyledParameterWithOptions("simple", "featureID", chi.URLParam(r, "featureID"), &featureID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLedgers operation middleware
func (siw *ServerInterfaceWrapper) ListLedgers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLedgersParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "subjectSimilarTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "subjectSimilarTo", r.URL.Query(), &params.SubjectSimilarTo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectSimilarTo", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLedgers(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateLedger operation middleware
func (siw *ServerInterfaceWrapper) CreateLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLedger(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLedgerGrants operation middleware
func (siw *ServerInterfaceWrapper) ListLedgerGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLedgerGrantsParams

	// ------------- Optional query parameter "ledgerID" -------------

	err = runtime.BindQueryParameter("form", true, false, "ledgerID", r.URL.Query(), &params.LedgerID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "includeVoids" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeVoids", r.URL.Query(), &params.IncludeVoids)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeVoids", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLedgerGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLedgerBalance operation middleware
func (siw *ServerInterfaceWrapper) GetLedgerBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerBalanceParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLedgerBalance(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLedgerGrantsByLedger operation middleware
func (siw *ServerInterfaceWrapper) ListLedgerGrantsByLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLedgerGrantsByLedgerParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "includeVoids" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeVoids", r.URL.Query(), &params.IncludeVoids)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeVoids", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLedgerGrantsByLedger(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateLedgerGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateLedgerGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLedgerGrant(w, r, ledgerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidLedgerGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidLedgerGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Path parameter "ledgerGrantID" -------------
	var ledgerGrantID LedgerGrantID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerGrantID", chi.URLParam(r, "ledgerGrantID"), &ledgerGrantID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerGrantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidLedgerGrant(w, r, ledgerID, ledgerGrantID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLedgerGrant operation middleware
func (siw *ServerInterfaceWrapper) GetLedgerGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Path parameter "ledgerGrantID" -------------
	var ledgerGrantID LedgerGrantID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerGrantID", chi.URLParam(r, "ledgerGrantID"), &ledgerGrantID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerGrantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLedgerGrant(w, r, ledgerID, ledgerGrantID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLedgerHistory operation middleware
func (siw *ServerInterfaceWrapper) GetLedgerHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerHistoryParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLedgerHistory(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetLedger operation middleware
func (siw *ServerInterfaceWrapper) ResetLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetLedger(w, r, ledgerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureID}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureID}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers", wrapper.ListLedgers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers", wrapper.CreateLedger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/grants", wrapper.ListLedgerGrants)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/balance", wrapper.GetLedgerBalance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants", wrapper.ListLedgerGrantsByLedger)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants", wrapper.CreateLedgerGrant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID}", wrapper.VoidLedgerGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID}", wrapper.GetLedgerGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/history", wrapper.GetLedgerHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{ledgerID}/reset", wrapper.ResetLedger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//1WLHSka1wAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
