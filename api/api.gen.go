// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/openmeterio/openmeter/pkg/models"
)

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// Meter defines model for Meter.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterGroupByList Array of properties to extract from the event to group by.
type MeterGroupByList = []string

// MeterGroupByMap Map of labels and JSONPath expressions to extract from the event to group by.
type MeterGroupByMap map[string]string

// MeterValue defines model for MeterValue.
type MeterValue = models.MeterValue

// Problem A Problem Details object (RFC 7807)
type Problem = models.Problem

// WindowSize defines model for WindowSize.
type WindowSize = models.WindowSize

// MeterSlug defines model for meterSlug.
type MeterSlug = string

// GetMeterValuesParams defines parameters for GetMeterValues.
type GetMeterValuesParams struct {
	Subject *string `form:"subject,omitempty" json:"subject,omitempty"`

	// From Start date-time in RFC 3339 format.
	// Must be aligned with the window size.
	// Inclusive.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Must be aligned with the window size.
	// Inclusive.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *WindowSize `form:"window_size,omitempty" json:"window_size,omitempty"`
}

// IngestEventsJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsJSONRequestBody = Event

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1betav1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1betav1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)

	// (POST /api/v1betav1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/v1betav1/meters/{meterSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterSlug MeterSlug)

	// (GET /api/v1betav1/meters/{meterSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterSlug MeterSlug)

	// (GET /api/v1betav1/meters/{meterSlug}/values)
	GetMeterValues(w http.ResponseWriter, r *http.Request, meterSlug MeterSlug, params GetMeterValuesParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug MeterSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterSlug"), &meterSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterSlug)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug MeterSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterSlug"), &meterSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterSlug)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeterValues operation middleware
func (siw *ServerInterfaceWrapper) GetMeterValues(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug MeterSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterSlug"), &meterSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeterValuesParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "window_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "window_size", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "window_size", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeterValues(w, r, meterSlug, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1betav1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1betav1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1betav1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1betav1/meters/{meterSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1betav1/meters/{meterSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1betav1/meters/{meterSlug}/values", wrapper.GetMeterValues)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"6/8EAAD//+rsTe8FJwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
