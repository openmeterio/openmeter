// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/openmeterio/openmeter/pkg/models"
)

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// IdOrSlug defines model for IdOrSlug.
type IdOrSlug = string

// Meter defines model for Meter.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterValue defines model for MeterValue.
type MeterValue = models.MeterValue

// Namespace defines model for Namespace.
type Namespace = models.Namespace

// Problem A Problem Details object (RFC 7807)
type Problem = models.Problem

// WindowSize defines model for WindowSize.
type WindowSize = models.WindowSize

// MeterIdOrSlug defines model for meterIdOrSlug.
type MeterIdOrSlug = IdOrSlug

// NamespaceInput defines model for namespaceParam.
type NamespaceInput = string

// IngestEventsParams defines parameters for IngestEvents.
type IngestEventsParams struct {
	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// ListMetersParams defines parameters for ListMeters.
type ListMetersParams struct {
	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// CreateMeterParams defines parameters for CreateMeter.
type CreateMeterParams struct {
	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// DeleteMeterParams defines parameters for DeleteMeter.
type DeleteMeterParams struct {
	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// GetMeterParams defines parameters for GetMeter.
type GetMeterParams struct {
	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// GetMeterValuesParams defines parameters for GetMeterValues.
type GetMeterValuesParams struct {
	Subject *string `form:"subject,omitempty" json:"subject,omitempty"`

	// From Start date-time in RFC 3339 format.
	// Must be aligned with the window size.
	// Inclusive.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Must be aligned with the window size.
	// Inclusive.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *WindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// Aggregation If not specified, OpenMeter will use the default aggregation type.
	// As OpenMeter stores aggregates defined by meter config, passing a different aggregate can lead to inaccurate results.
	// For example getting the MIN of SUMs.
	Aggregation *MeterAggregation `form:"aggregation,omitempty" json:"aggregation,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	GroupBy *string `form:"groupBy,omitempty" json:"groupBy,omitempty"`

	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// IngestEventsJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsJSONRequestBody = Event

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreateNamespaceJSONRequestBody defines body for CreateNamespace for application/json ContentType.
type CreateNamespaceJSONRequestBody = Namespace

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request, params IngestEventsParams)

	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request, params ListMetersParams)

	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request, params CreateMeterParams)

	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params DeleteMeterParams)

	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params GetMeterParams)

	// (GET /api/v1/meters/{meterIdOrSlug}/values)
	GetMeterValues(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params GetMeterValuesParams)

	// (POST /api/v1/namespaces)
	CreateNamespace(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params IngestEventsParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMetersParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateMeterParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterIdOrSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteMeterParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterIdOrSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeterParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeterValues operation middleware
func (siw *ServerInterfaceWrapper) GetMeterValues(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterIdOrSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeterValuesParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "aggregation" -------------

	err = runtime.BindQueryParameter("form", true, false, "aggregation", r.URL.Query(), &params.Aggregation)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "aggregation", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeterValues(w, r, meterIdOrSlug, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateNamespace operation middleware
func (siw *ServerInterfaceWrapper) CreateNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNamespace(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/values", wrapper.GetMeterValues)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/namespaces", wrapper.CreateNamespace)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
