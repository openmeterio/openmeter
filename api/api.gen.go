// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// Defines values for EntitlementBooleanType.
const (
	EntitlementBooleanTypeBoolean EntitlementBooleanType = "boolean"
)

// Defines values for EntitlementBooleanCreateInputsType.
const (
	EntitlementBooleanCreateInputsTypeBoolean EntitlementBooleanCreateInputsType = "boolean"
)

// Defines values for EntitlementMeteredType.
const (
	EntitlementMeteredTypeMetered EntitlementMeteredType = "metered"
)

// Defines values for EntitlementMeteredCreateInputsType.
const (
	EntitlementMeteredCreateInputsTypeMetered EntitlementMeteredCreateInputsType = "metered"
)

// Defines values for EntitlementStaticType.
const (
	EntitlementStaticTypeStatic EntitlementStaticType = "static"
)

// Defines values for EntitlementStaticCreateInputsType.
const (
	EntitlementStaticCreateInputsTypeStatic EntitlementStaticCreateInputsType = "static"
)

// Defines values for ExpirationPeriodDuration.
const (
	ExpirationPeriodDurationDAY   ExpirationPeriodDuration = "DAY"
	ExpirationPeriodDurationHOUR  ExpirationPeriodDuration = "HOUR"
	ExpirationPeriodDurationMONTH ExpirationPeriodDuration = "MONTH"
	ExpirationPeriodDurationWEEK  ExpirationPeriodDuration = "WEEK"
	ExpirationPeriodDurationYEAR  ExpirationPeriodDuration = "YEAR"
)

// Defines values for FeatureType.
const (
	Boolean FeatureType = "boolean"
	Metered FeatureType = "metered"
	Static  FeatureType = "static"
)

// Defines values for GrantBurnDownHistorySegmentPeriodTerminationReason.
const (
	ENDOFQUERYING           GrantBurnDownHistorySegmentPeriodTerminationReason = "END_OF_QUERYING"
	GRANTBURNTDOWN          GrantBurnDownHistorySegmentPeriodTerminationReason = "GRANT_BURNT_DOWN"
	GRANTEXPIRED            GrantBurnDownHistorySegmentPeriodTerminationReason = "GRANT_EXPIRED"
	GRANTWITHHIGHERPRIORITY GrantBurnDownHistorySegmentPeriodTerminationReason = "GRANT_WITH_HIGHER_PRIORITY"
	USAGERESET              GrantBurnDownHistorySegmentPeriodTerminationReason = "USAGE_RESET"
)

// Defines values for RecurringPeriodEnum.
const (
	BILLING RecurringPeriodEnum = "BILLING"
	DAILY   RecurringPeriodEnum = "DAILY"
	MONTHLY RecurringPeriodEnum = "MONTHLY"
	WEEKLY  RecurringPeriodEnum = "WEEKLY"
	YEARLY  RecurringPeriodEnum = "YEARLY"
)

// Defines values for ListEntitlementsParamsOrderBy.
const (
	ListEntitlementsParamsOrderByCreatedAt ListEntitlementsParamsOrderBy = "createdAt"
	ListEntitlementsParamsOrderByUpdatedAt ListEntitlementsParamsOrderBy = "updatedAt"
)

// Defines values for ListFeaturesParamsOrderBy.
const (
	ListFeaturesParamsOrderByCreatedAt ListFeaturesParamsOrderBy = "createdAt"
	ListFeaturesParamsOrderById        ListFeaturesParamsOrderBy = "id"
	ListFeaturesParamsOrderByUpdatedAt ListFeaturesParamsOrderBy = "updatedAt"
)

// Defines values for ListGrantsParamsOrderBy.
const (
	ListGrantsParamsOrderByCreatedAt ListGrantsParamsOrderBy = "createdAt"
	ListGrantsParamsOrderById        ListGrantsParamsOrderBy = "id"
	ListGrantsParamsOrderByUpdatedAt ListGrantsParamsOrderBy = "updatedAt"
)

// Defines values for ListEntitlementGrantsParamsOrderBy.
const (
	ListEntitlementGrantsParamsOrderByCreatedAt ListEntitlementGrantsParamsOrderBy = "createdAt"
	ListEntitlementGrantsParamsOrderById        ListEntitlementGrantsParamsOrderBy = "id"
	ListEntitlementGrantsParamsOrderByUpdatedAt ListEntitlementGrantsParamsOrderBy = "updatedAt"
)

// Defines values for GetEntitlementHistoryParamsWindowSize.
const (
	GetEntitlementHistoryParamsWindowSizeDAY    GetEntitlementHistoryParamsWindowSize = "DAY"
	GetEntitlementHistoryParamsWindowSizeHOUR   GetEntitlementHistoryParamsWindowSize = "HOUR"
	GetEntitlementHistoryParamsWindowSizeMINUTE GetEntitlementHistoryParamsWindowSize = "MINUTE"
)

// BalanceHistoryWindow A window of balance history.
type BalanceHistoryWindow struct {
	// BalanceAtEnd The entitlement balance at the end of the period.
	BalanceAtEnd *float64 `json:"balanceAtEnd,omitempty"`

	// BalanceAtStart The entitlement balance at the start of the period.
	BalanceAtStart *float64 `json:"balanceAtStart,omitempty"`

	// GrantBurnDownHistory The grant burn down history in the period.
	//
	// GrantBurnDownHistory ends if balance reaches 0.
	GrantBurnDownHistory *GrantBurnDownHistory `json:"grantBurnDownHistory,omitempty"`

	// Period A time period
	Period *Period `json:"period,omitempty"`

	// Usage The total usage of the feature in the period.
	Usage *float64 `json:"usage,omitempty"`
}

// Entitlement defines model for Entitlement.
type Entitlement struct {
	union json.RawMessage
}

// EntitlementBoolean defines model for EntitlementBoolean.
type EntitlementBoolean struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt"`

	// FearureId The feature the subject is entitled to use
	FearureId *string `json:"fearureId,omitempty"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// Subjectkey The identifier key unique to the subject
	Subjectkey *string                `json:"subjectkey,omitempty"`
	Type       EntitlementBooleanType `json:"type"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementBooleanType defines model for EntitlementBoolean.Type.
type EntitlementBooleanType string

// EntitlementBooleanCreateInputs defines model for EntitlementBooleanCreateInputs.
type EntitlementBooleanCreateInputs struct {
	// FearureId The feature the subject is entitled to use
	FearureId *string `json:"fearureId,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string                 `json:"metadata,omitempty"`
	Type     EntitlementBooleanCreateInputsType `json:"type"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementBooleanCreateInputsType defines model for EntitlementBooleanCreateInputs.Type.
type EntitlementBooleanCreateInputsType string

// EntitlementCreateSharedFields defines model for EntitlementCreateSharedFields.
type EntitlementCreateSharedFields struct {
	// FearureId The feature the subject is entitled to use
	FearureId *string `json:"fearureId,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementGrant defines model for EntitlementGrant.
type EntitlementGrant struct {
	// Amount The amount to grant. Should be a positive number.
	Amount float64 `json:"amount"`

	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt"`

	// EffectiveAt The effective time. Provided value will be ceiled to metering windowSize (minute).
	EffectiveAt time.Time `json:"effectiveAt"`

	// EntitlementId The unique entitlement ULID that the grant is associated with.
	EntitlementId *string          `json:"entitlementId,omitempty"`
	Expiration    ExpirationPeriod `json:"expiration"`

	// ExpiresAt The expiration date of the grant.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// MaxRolloverAmount The maximum amount of the grant that can be rolled over. Defaults to 0.
	//
	// - maxAmount = {original_amount} -> rollover original amount
	// - maxAmount = 0 -> no rollover
	// - maxAmount = 90 -> rollover 90 max
	//
	// If it's larger than 0 then the grant's balance will be the MAX(maxRollover, balance) + amount.
	MaxRolloverAmount *float64           `json:"maxRolloverAmount,omitempty"`
	Metadata          *map[string]string `json:"metadata,omitempty"`

	// NextRecurrence The next time the grant will recurr.
	NextRecurrence *time.Time `json:"nextRecurrence,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *int `json:"priority,omitempty"`

	// Recurrence Recurrence of the grant.
	Recurrence *struct {
		// MaxRolloverAmount The maximum amount of the grant that can be rolled over.
		//
		// If it's 0 then at the next iteration the gran's balance will be the original amount.
		// If it's larger than 0 then the grant's balance will be the MAX(maxRollover, balance) + amount.
		MaxRolloverAmount *float64 `json:"maxRolloverAmount,omitempty"`

		// Period Recurring period of an entitlement.
		Period RecurringPeriod `json:"period"`
	} `json:"recurrence,omitempty"`

	// SubjectKey The subject that is granted the entitlement.
	SubjectKey *string `json:"subjectKey,omitempty"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// EntitlementGrantCreateInput Grants are used to increase balance of specific subjects.
type EntitlementGrantCreateInput struct {
	// Amount The amount to grant. Should be a positive number.
	Amount float64 `json:"amount"`

	// EffectiveAt The effective time. Provided value will be ceiled to metering windowSize (minute).
	EffectiveAt time.Time        `json:"effectiveAt"`
	Expiration  ExpirationPeriod `json:"expiration"`

	// MaxRolloverAmount The maximum amount of the grant that can be rolled over. Defaults to 0.
	//
	// - maxAmount = {original_amount} -> rollover original amount
	// - maxAmount = 0 -> no rollover
	// - maxAmount = 90 -> rollover 90 max
	//
	// If it's larger than 0 then the grant's balance will be the MAX(maxRollover, balance) + amount.
	MaxRolloverAmount *float64           `json:"maxRolloverAmount,omitempty"`
	Metadata          *map[string]string `json:"metadata,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *int `json:"priority,omitempty"`

	// Recurrence Recurrence of the grant.
	Recurrence *struct {
		// MaxRolloverAmount The maximum amount of the grant that can be rolled over.
		//
		// If it's 0 then at the next iteration the gran's balance will be the original amount.
		// If it's larger than 0 then the grant's balance will be the MAX(maxRollover, balance) + amount.
		MaxRolloverAmount *float64 `json:"maxRolloverAmount,omitempty"`

		// Period Recurring period of an entitlement.
		Period RecurringPeriod `json:"period"`
	} `json:"recurrence,omitempty"`
}

// EntitlementMetered defines model for EntitlementMetered.
type EntitlementMetered struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt"`

	// FearureId The feature the subject is entitled to use
	FearureId *string `json:"fearureId,omitempty"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// Subjectkey The identifier key unique to the subject
	Subjectkey *string                `json:"subjectkey,omitempty"`
	Type       EntitlementMeteredType `json:"type"`

	// Unlimited If unlimited=true the subject can use the feature an unlimited amount.
	Unlimited *bool `json:"unlimited,omitempty"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementMeteredType defines model for EntitlementMetered.Type.
type EntitlementMeteredType string

// EntitlementMeteredCreateInputs defines model for EntitlementMeteredCreateInputs.
type EntitlementMeteredCreateInputs struct {
	// FearureId The feature the subject is entitled to use
	FearureId *string `json:"fearureId,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string                 `json:"metadata,omitempty"`
	Type     EntitlementMeteredCreateInputsType `json:"type"`

	// Unlimited If unlimited=true the subject can use the feature an unlimited amount.
	Unlimited *bool `json:"unlimited,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
	union       json.RawMessage
}

// EntitlementMeteredCreateInputsType defines model for EntitlementMeteredCreateInputs.Type.
type EntitlementMeteredCreateInputsType string

// EntitlementMeteredCreateInputs0 defines model for .
type EntitlementMeteredCreateInputs0 = map[string]interface{}

// EntitlementMeteredCreateInputs1 defines model for .
type EntitlementMeteredCreateInputs1 struct {
	// ResetUsageByUsagePeriod Automatically reset usage in the access calculation based on usage period.
	ResetUsageByUsagePeriod  *bool                          `json:"resetUsageByUsagePeriod,omitempty"`
	UsageGrantsByUsagePeriod *[]EntitlementGrantCreateInput `json:"usageGrantsByUsagePeriod,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod RecurringPeriod `json:"usagePeriod"`
}

// EntitlementSharedFields defines model for EntitlementSharedFields.
type EntitlementSharedFields struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt"`

	// FearureId The feature the subject is entitled to use
	FearureId *string `json:"fearureId,omitempty"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// Subjectkey The identifier key unique to the subject
	Subjectkey *string `json:"subjectkey,omitempty"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementStatic defines model for EntitlementStatic.
type EntitlementStatic struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt"`

	// FearureId The feature the subject is entitled to use
	FearureId *string `json:"fearureId,omitempty"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// Subjectkey The identifier key unique to the subject
	Subjectkey *string               `json:"subjectkey,omitempty"`
	Type       EntitlementStaticType `json:"type"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`

	// Value The JSON parsable value of the entitlement.
	Value string `json:"value"`
}

// EntitlementStaticType defines model for EntitlementStatic.Type.
type EntitlementStaticType string

// EntitlementStaticCreateInputs defines model for EntitlementStaticCreateInputs.
type EntitlementStaticCreateInputs struct {
	// FearureId The feature the subject is entitled to use
	FearureId *string `json:"fearureId,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string                `json:"metadata,omitempty"`
	Type     EntitlementStaticCreateInputsType `json:"type"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`

	// Value The JSON parsable value of the entitlement.
	Value string `json:"value"`
}

// EntitlementStaticCreateInputsType defines model for EntitlementStaticCreateInputs.Type.
type EntitlementStaticCreateInputsType string

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// ExpirationPeriod Expiration period of a grant.
type ExpirationPeriod struct {
	// Count The expiration period count like 12 months.
	Count int `json:"count"`

	// Duration The expiration period duration like month.
	Duration ExpirationPeriodDuration `json:"duration"`
}

// ExpirationPeriodDuration The expiration period duration like month.
type ExpirationPeriodDuration string

// Feature defines model for Feature.
type Feature struct {
	// Archived If the feature is archived, it will not be used for grants or usage.
	Archived *bool `json:"archived,omitempty"`

	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Key The unique key of the feature to reference it from your application.
	Key string `json:"key"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// MeterGroupByFilters Optional meter group by filters. Useful if the meter scope is broader than what feature tracks.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug The meter that the feature is associated with and decreases grants by usage.
	MeterSlug *string `json:"meterSlug,omitempty"`

	// Name The name of the feature.
	Name string `json:"name"`

	// Type The type of the feature.
	Type *FeatureType `json:"type,omitempty"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// FeatureCreateInputs A feature is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type FeatureCreateInputs struct {
	// Archived If the feature is archived, it will not be used for grants or usage.
	Archived *bool `json:"archived,omitempty"`

	// Key The unique key of the feature to reference it from your application.
	Key string `json:"key"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// MeterGroupByFilters Optional meter group by filters. Useful if the meter scope is broader than what feature tracks.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug The meter that the feature is associated with and decreases grants by usage.
	MeterSlug *string `json:"meterSlug,omitempty"`

	// Name The name of the feature.
	Name string `json:"name"`

	// Type The type of the feature.
	Type *FeatureType `json:"type,omitempty"`
}

// FeatureType The type of the feature.
type FeatureType string

// GrantBurnDownHistory The grant burn down history in the period.
//
// GrantBurnDownHistory ends if balance reaches 0.
type GrantBurnDownHistory = []GrantBurnDownHistorySegment

// GrantBurnDownHistorySegment A segment of the grant burn down history.
//
// A given segment represents the usage of a grant in a specific period.
type GrantBurnDownHistorySegment struct {
	// BalanceAtEnd The entitlement balance at the end of the period.
	BalanceAtEnd *float64 `json:"balanceAtEnd,omitempty"`

	// BalanceAtStart The entitlement balance at the start of the period.
	BalanceAtStart *float64 `json:"balanceAtStart,omitempty"`

	// GrantId The id of the grant that was burnt down.
	GrantId *string `json:"grantId,omitempty"`

	// Period A time period
	Period *Period `json:"period,omitempty"`

	// PeriodTerminationReason The reason why a new period was started.
	PeriodTerminationReason *GrantBurnDownHistorySegmentPeriodTerminationReason `json:"periodTerminationReason,omitempty"`

	// Usage The usage of the grant in the period.
	Usage *float64 `json:"usage,omitempty"`
}

// GrantBurnDownHistorySegmentPeriodTerminationReason The reason why a new period was started.
type GrantBurnDownHistorySegmentPeriodTerminationReason string

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// Period A time period
type Period struct {
	// From Period start time where the amount was applied. If applicable.
	From time.Time `json:"from"`

	// To Period end time where the amount was applied. If applicable.
	To time.Time `json:"to"`
}

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// RecurringPeriod Recurring period of an entitlement.
type RecurringPeriod struct {
	// Anchor An arbitrary anchor to base the recurring period on.
	Anchor time.Time `json:"anchor"`

	// Interval List of pre-defined periods that can be used for recurring & scheduling.
	//
	// DAILY:      Every day
	// # MONDAY:     Every Monday
	// # TUESDAY:    Every Tuesday
	// # WEDNESDAY:  Every Wednesday
	// # THURSDAY:   Every Thursday
	// # FRIDAY:     Every Friday
	// # SATURDAY:   Every Saturday
	// # SUNDAY:     Every Sunday
	// WEEKLY:     Every week
	// MONTHLY:    Every month
	// YEARLY:     Every year
	// BILLING:    Every billing cycle
	Interval RecurringPeriodEnum `json:"interval"`
}

// RecurringPeriodEnum List of pre-defined periods that can be used for recurring & scheduling.
//
// DAILY:      Every day
// # MONDAY:     Every Monday
// # TUESDAY:    Every Tuesday
// # WEDNESDAY:  Every Wednesday
// # THURSDAY:   Every Thursday
// # FRIDAY:     Every Friday
// # SATURDAY:   Every Saturday
// # SUNDAY:     Every Sunday
// WEEKLY:     Every week
// MONTHLY:    Every month
// YEARLY:     Every year
// BILLING:    Every billing cycle
type RecurringPeriodEnum string

// SharedMetaFields Metadata fields for a resource.
// These fields are automatically populated by the system for the entities we manage.
type SharedMetaFields struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// WindowedBalanceHistory The windowed balance history.
type WindowedBalanceHistory = []BalanceHistoryWindow

// EntitlementId defines model for entitlementId.
type EntitlementId = string

// FeatureId defines model for featureId.
type FeatureId = string

// GrantId defines model for grantId.
type GrantId = string

// IncludeDeleted defines model for includeDeleted.
type IncludeDeleted = bool

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// QueryFilterGroupBy Simple filter for group bys with exact match.
//
// Usage: `?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4`
type QueryFilterGroupBy map[string]string

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryLimit defines model for queryLimit.
type QueryLimit = int

// QueryOffset defines model for queryOffset.
type QueryOffset = int

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// ListEntitlementsParams defines parameters for ListEntitlements.
type ListEntitlementsParams struct {
	// Limit Number of entries to return
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of entries to skip
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Order by field
	OrderBy *ListEntitlementsParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListEntitlementsParamsOrderBy defines parameters for ListEntitlements.
type ListEntitlementsParamsOrderBy string

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// ListFeaturesParams defines parameters for ListFeatures.
type ListFeaturesParams struct {
	// Limit Number of entries to return
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of entries to skip
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Order by field
	OrderBy *ListFeaturesParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// IncludeArchived Include archived features.
	IncludeArchived *bool `form:"includeArchived,omitempty" json:"includeArchived,omitempty"`
}

// ListFeaturesParamsOrderBy defines parameters for ListFeatures.
type ListFeaturesParamsOrderBy string

// ListGrantsParams defines parameters for ListGrants.
type ListGrantsParams struct {
	// Limit Number of entries to return
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of entries to skip
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Order by field
	OrderBy *ListGrantsParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// IncludeDeleted Include deleted entries.
	IncludeDeleted *IncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: ?subject=customer-1&subject=customer-2
	Subject *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
}

// ListGrantsParamsOrderBy defines parameters for ListGrants.
type ListGrantsParamsOrderBy string

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: ?subject=customer-1&subject=customer-2
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// ListSubjectEntitlementsParams defines parameters for ListSubjectEntitlements.
type ListSubjectEntitlementsParams struct {
	// IncludeDeleted Include deleted entries.
	IncludeDeleted *IncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`
}

// CreateEntitlementJSONBody defines parameters for CreateEntitlement.
type CreateEntitlementJSONBody struct {
	union json.RawMessage
}

// GetEntitlementBalanceParams defines parameters for GetEntitlementBalance.
type GetEntitlementBalanceParams struct {
	// Time Point of time to query balances: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListEntitlementGrantsParams defines parameters for ListEntitlementGrants.
type ListEntitlementGrantsParams struct {
	// IncludeDeleted Include deleted entries.
	IncludeDeleted *IncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// OrderBy Order by field
	OrderBy *ListEntitlementGrantsParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListEntitlementGrantsParamsOrderBy defines parameters for ListEntitlementGrants.
type ListEntitlementGrantsParamsOrderBy string

// GetEntitlementHistoryParams defines parameters for GetEntitlementHistory.
type GetEntitlementHistoryParams struct {
	// From Start of time range to query entitlement: date-time in RFC 3339 format.
	// Gets truncated to the granularity of the underlying meter.
	From time.Time `form:"from" json:"from"`

	// To End of time range to query entitlement: date-time in RFC 3339 format. Defaults to now.
	// If not now then gets truncated to the granularity of the underlying meter.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize Size of the time window to group the history by. Cannot be shorter than meter granularity.
	WindowSize *GetEntitlementHistoryParamsWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`
}

// GetEntitlementHistoryParamsWindowSize defines parameters for GetEntitlementHistory.
type GetEntitlementHistoryParamsWindowSize string

// ResetEntitlementUsageJSONBody defines parameters for ResetEntitlementUsage.
type ResetEntitlementUsageJSONBody struct {
	// EffectiveAt The time at which the reset takes effect, defaults to now.
	// The reset cannot be in the future.
	// The provided value is truncated to the granularity of the underlying meter.
	EffectiveAt *time.Time `json:"effectiveAt,omitempty"`
}

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = FeatureCreateInputs

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// CreateEntitlementJSONRequestBody defines body for CreateEntitlement for application/json ContentType.
type CreateEntitlementJSONRequestBody CreateEntitlementJSONBody

// CreateGrantJSONRequestBody defines body for CreateGrant for application/json ContentType.
type CreateGrantJSONRequestBody = EntitlementGrantCreateInput

// ResetEntitlementUsageJSONRequestBody defines body for ResetEntitlementUsage for application/json ContentType.
type ResetEntitlementUsageJSONRequestBody ResetEntitlementUsageJSONBody

// AsEntitlementMetered returns the union data inside the Entitlement as a EntitlementMetered
func (t Entitlement) AsEntitlementMetered() (EntitlementMetered, error) {
	var body EntitlementMetered
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementMetered overwrites any union data inside the Entitlement as the provided EntitlementMetered
func (t *Entitlement) FromEntitlementMetered(v EntitlementMetered) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementMetered performs a merge with any union data inside the Entitlement, using the provided EntitlementMetered
func (t *Entitlement) MergeEntitlementMetered(v EntitlementMetered) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementStatic returns the union data inside the Entitlement as a EntitlementStatic
func (t Entitlement) AsEntitlementStatic() (EntitlementStatic, error) {
	var body EntitlementStatic
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementStatic overwrites any union data inside the Entitlement as the provided EntitlementStatic
func (t *Entitlement) FromEntitlementStatic(v EntitlementStatic) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementStatic performs a merge with any union data inside the Entitlement, using the provided EntitlementStatic
func (t *Entitlement) MergeEntitlementStatic(v EntitlementStatic) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementBoolean returns the union data inside the Entitlement as a EntitlementBoolean
func (t Entitlement) AsEntitlementBoolean() (EntitlementBoolean, error) {
	var body EntitlementBoolean
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementBoolean overwrites any union data inside the Entitlement as the provided EntitlementBoolean
func (t *Entitlement) FromEntitlementBoolean(v EntitlementBoolean) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementBoolean performs a merge with any union data inside the Entitlement, using the provided EntitlementBoolean
func (t *Entitlement) MergeEntitlementBoolean(v EntitlementBoolean) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Entitlement) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Entitlement) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "boolean":
		return t.AsEntitlementBoolean()
	case "metered":
		return t.AsEntitlementMetered()
	case "static":
		return t.AsEntitlementStatic()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Entitlement) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Entitlement) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEntitlementMeteredCreateInputs0 returns the union data inside the EntitlementMeteredCreateInputs as a EntitlementMeteredCreateInputs0
func (t EntitlementMeteredCreateInputs) AsEntitlementMeteredCreateInputs0() (EntitlementMeteredCreateInputs0, error) {
	var body EntitlementMeteredCreateInputs0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementMeteredCreateInputs0 overwrites any union data inside the EntitlementMeteredCreateInputs as the provided EntitlementMeteredCreateInputs0
func (t *EntitlementMeteredCreateInputs) FromEntitlementMeteredCreateInputs0(v EntitlementMeteredCreateInputs0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementMeteredCreateInputs0 performs a merge with any union data inside the EntitlementMeteredCreateInputs, using the provided EntitlementMeteredCreateInputs0
func (t *EntitlementMeteredCreateInputs) MergeEntitlementMeteredCreateInputs0(v EntitlementMeteredCreateInputs0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementMeteredCreateInputs1 returns the union data inside the EntitlementMeteredCreateInputs as a EntitlementMeteredCreateInputs1
func (t EntitlementMeteredCreateInputs) AsEntitlementMeteredCreateInputs1() (EntitlementMeteredCreateInputs1, error) {
	var body EntitlementMeteredCreateInputs1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementMeteredCreateInputs1 overwrites any union data inside the EntitlementMeteredCreateInputs as the provided EntitlementMeteredCreateInputs1
func (t *EntitlementMeteredCreateInputs) FromEntitlementMeteredCreateInputs1(v EntitlementMeteredCreateInputs1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementMeteredCreateInputs1 performs a merge with any union data inside the EntitlementMeteredCreateInputs, using the provided EntitlementMeteredCreateInputs1
func (t *EntitlementMeteredCreateInputs) MergeEntitlementMeteredCreateInputs1(v EntitlementMeteredCreateInputs1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EntitlementMeteredCreateInputs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.FearureId != nil {
		object["fearureId"], err = json.Marshal(t.FearureId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fearureId': %w", err)
		}
	}

	if t.Metadata != nil {
		object["metadata"], err = json.Marshal(t.Metadata)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'metadata': %w", err)
		}
	}

	object["type"], err = json.Marshal(t.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if t.Unlimited != nil {
		object["unlimited"], err = json.Marshal(t.Unlimited)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unlimited': %w", err)
		}
	}

	if t.UsagePeriod != nil {
		object["usagePeriod"], err = json.Marshal(t.UsagePeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'usagePeriod': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *EntitlementMeteredCreateInputs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["fearureId"]; found {
		err = json.Unmarshal(raw, &t.FearureId)
		if err != nil {
			return fmt.Errorf("error reading 'fearureId': %w", err)
		}
	}

	if raw, found := object["metadata"]; found {
		err = json.Unmarshal(raw, &t.Metadata)
		if err != nil {
			return fmt.Errorf("error reading 'metadata': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	if raw, found := object["unlimited"]; found {
		err = json.Unmarshal(raw, &t.Unlimited)
		if err != nil {
			return fmt.Errorf("error reading 'unlimited': %w", err)
		}
	}

	if raw, found := object["usagePeriod"]; found {
		err = json.Unmarshal(raw, &t.UsagePeriod)
		if err != nil {
			return fmt.Errorf("error reading 'usagePeriod': %w", err)
		}
	}

	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List entitlements
	// (GET /api/v1/entitlements)
	ListEntitlements(w http.ResponseWriter, r *http.Request, params ListEntitlementsParams)
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request, params ListFeaturesParams)
	// Create feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Delete feature
	// (DELETE /api/v1/features/{featureId})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId)
	// Get feature
	// (GET /api/v1/features/{featureId})
	GetFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId)
	// List grants
	// (GET /api/v1/grants)
	ListGrants(w http.ResponseWriter, r *http.Request, params ListGrantsParams)
	// Delete a grant
	// (DELETE /api/v1/grants/{grantId})
	VoidGrant(w http.ResponseWriter, r *http.Request, grantId GrantId)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// List entitlements
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements)
	ListSubjectEntitlements(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, params ListSubjectEntitlementsParams)
	// Create entitlement
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements)
	CreateEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// Delete entitlement
	// (DELETE /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
	DeleteEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId)
	// Get entitlement
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
	GetEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId)
	// Get the balance of a specific entitlement.
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/balance)
	GetEntitlementBalance(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params GetEntitlementBalanceParams)
	// List grants for an entitlement
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants)
	ListEntitlementGrants(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params ListEntitlementGrantsParams)
	// Create grant
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants)
	CreateGrant(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId)
	// Get the balance history of a specific entitlement.
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history)
	GetEntitlementHistory(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params GetEntitlementHistoryParams)
	// Reset entitlement
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset)
	ResetEntitlementUsage(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List entitlements
// (GET /api/v1/entitlements)
func (_ Unimplemented) ListEntitlements(w http.ResponseWriter, r *http.Request, params ListEntitlementsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request, params ListFeaturesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete feature
// (DELETE /api/v1/features/{featureId})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureId})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List grants
// (GET /api/v1/grants)
func (_ Unimplemented) ListGrants(w http.ResponseWriter, r *http.Request, params ListGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a grant
// (DELETE /api/v1/grants/{grantId})
func (_ Unimplemented) VoidGrant(w http.ResponseWriter, r *http.Request, grantId GrantId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List entitlements
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements)
func (_ Unimplemented) ListSubjectEntitlements(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, params ListSubjectEntitlementsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create entitlement
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements)
func (_ Unimplemented) CreateEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete entitlement
// (DELETE /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
func (_ Unimplemented) DeleteEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get entitlement
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
func (_ Unimplemented) GetEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the balance of a specific entitlement.
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/balance)
func (_ Unimplemented) GetEntitlementBalance(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params GetEntitlementBalanceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List grants for an entitlement
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants)
func (_ Unimplemented) ListEntitlementGrants(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params ListEntitlementGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create grant
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants)
func (_ Unimplemented) CreateGrant(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the balance history of a specific entitlement.
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history)
func (_ Unimplemented) GetEntitlementHistory(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params GetEntitlementHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset entitlement
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset)
func (_ Unimplemented) ResetEntitlementUsage(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEntitlements operation middleware
func (siw *ServerInterfaceWrapper) ListEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEntitlementsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEntitlements(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFeaturesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "includeArchived" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeArchived", r.URL.Query(), &params.IncludeArchived)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeArchived", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId FeatureId

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId FeatureId

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGrants operation middleware
func (siw *ServerInterfaceWrapper) ListGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGrantsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "grantId" -------------
	var grantId GrantId

	err = runtime.BindStyledParameterWithOptions("simple", "grantId", chi.URLParam(r, "grantId"), &grantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "grantId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidGrant(w, r, grantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjectEntitlements operation middleware
func (siw *ServerInterfaceWrapper) ListSubjectEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSubjectEntitlementsParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjectEntitlements(w, r, subjectIdOrKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEntitlement operation middleware
func (siw *ServerInterfaceWrapper) CreateEntitlement(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEntitlement(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteEntitlement operation middleware
func (siw *ServerInterfaceWrapper) DeleteEntitlement(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEntitlement(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEntitlement operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlement(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlement(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEntitlementBalance operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlementBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntitlementBalanceParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlementBalance(w, r, subjectIdOrKey, entitlementId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEntitlementGrants operation middleware
func (siw *ServerInterfaceWrapper) ListEntitlementGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEntitlementGrantsParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEntitlementGrants(w, r, subjectIdOrKey, entitlementId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGrant(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEntitlementHistory operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlementHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntitlementHistoryParams

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlementHistory(w, r, subjectIdOrKey, entitlementId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetEntitlementUsage operation middleware
func (siw *ServerInterfaceWrapper) ResetEntitlementUsage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetEntitlementUsage(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/entitlements", wrapper.ListEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureId}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureId}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/grants", wrapper.ListGrants)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/grants/{grantId}", wrapper.VoidGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements", wrapper.ListSubjectEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements", wrapper.CreateEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}", wrapper.DeleteEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}", wrapper.GetEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/balance", wrapper.GetEntitlementBalance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants", wrapper.ListEntitlementGrants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants", wrapper.CreateGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history", wrapper.GetEntitlementHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset", wrapper.ResetEntitlementUsage)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8JwRsecAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
