// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/openmeterio/openmeter/pkg/models"
)

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// IdOrSlug defines model for IdOrSlug.
type IdOrSlug = string

// Meter defines model for Meter.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterValue defines model for MeterValue.
type MeterValue = models.MeterValue

// Namespace defines model for Namespace.
type Namespace = models.Namespace

// Problem A Problem Details object (RFC 7807)
type Problem = models.Problem

// WindowSize defines model for WindowSize.
type WindowSize = models.WindowSize

// MeterIdOrSlug defines model for meterIdOrSlug.
type MeterIdOrSlug = IdOrSlug

// NamespaceInput defines model for namespaceParam.
type NamespaceInput = string

// IngestEventsParams defines parameters for IngestEvents.
type IngestEventsParams struct {
	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// ListMetersParams defines parameters for ListMeters.
type ListMetersParams struct {
	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// CreateMeterParams defines parameters for CreateMeter.
type CreateMeterParams struct {
	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// DeleteMeterParams defines parameters for DeleteMeter.
type DeleteMeterParams struct {
	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// GetMeterParams defines parameters for GetMeter.
type GetMeterParams struct {
	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// GetMeterValuesParams defines parameters for GetMeterValues.
type GetMeterValuesParams struct {
	Subject *string `form:"subject,omitempty" json:"subject,omitempty"`

	// From Start date-time in RFC 3339 format.
	// Must be aligned with the window size.
	// Inclusive.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Must be aligned with the window size.
	// Inclusive.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *WindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// Aggregation If not specified, OpenMeter will use the default aggregation type.
	// As OpenMeter stores aggregates defined by meter config, passing a different aggregate can lead to inaccurate results.
	// For example getting the MIN of SUMs.
	Aggregation *MeterAggregation `form:"aggregation,omitempty" json:"aggregation,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	GroupBy *string `form:"groupBy,omitempty" json:"groupBy,omitempty"`

	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// IngestEventsJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsJSONRequestBody = Event

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreateNamespaceJSONRequestBody defines body for CreateNamespace for application/json ContentType.
type CreateNamespaceJSONRequestBody = Namespace

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request, params IngestEventsParams)

	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request, params ListMetersParams)

	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request, params CreateMeterParams)

	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params DeleteMeterParams)

	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params GetMeterParams)

	// (GET /api/v1/meters/{meterIdOrSlug}/values)
	GetMeterValues(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params GetMeterValuesParams)

	// (POST /api/v1/namespaces)
	CreateNamespace(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params IngestEventsParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMetersParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateMeterParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterIdOrSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteMeterParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterIdOrSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeterParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeterValues operation middleware
func (siw *ServerInterfaceWrapper) GetMeterValues(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterIdOrSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeterValuesParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "aggregation" -------------

	err = runtime.BindQueryParameter("form", true, false, "aggregation", r.URL.Query(), &params.Aggregation)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "aggregation", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeterValues(w, r, meterIdOrSlug, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateNamespace operation middleware
func (siw *ServerInterfaceWrapper) CreateNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNamespace(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/values", wrapper.GetMeterValues)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/namespaces", wrapper.CreateNamespace)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
