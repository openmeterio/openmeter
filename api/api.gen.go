// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/openmeterio/openmeter/pkg/models"
)

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// IdOrSlug defines model for IdOrSlug.
type IdOrSlug = string

// Meter defines model for Meter.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterValue defines model for MeterValue.
type MeterValue = models.MeterValue

// NS defines model for Namespace.
type NS = models.Namespace

// Problem A Problem Details object (RFC 7807)
type Problem = models.Problem

// WindowSize defines model for WindowSize.
type WindowSize = models.WindowSize

// MeterIdOrSlug defines model for meterIdOrSlug.
type MeterIdOrSlug = IdOrSlug

// Namespace defines model for namespace.
type Namespace = string

// IngestEventsParams defines parameters for IngestEvents.
type IngestEventsParams struct {
	// OMNamespace Optional namespace
	Namespace *Namespace `json:"OM-Namespace,omitempty"`
}

// ListMetersParams defines parameters for ListMeters.
type ListMetersParams struct {
	// OMNamespace Optional namespace
	Namespace *Namespace `json:"OM-Namespace,omitempty"`
}

// CreateMeterParams defines parameters for CreateMeter.
type CreateMeterParams struct {
	// OMNamespace Optional namespace
	Namespace *Namespace `json:"OM-Namespace,omitempty"`
}

// DeleteMeterParams defines parameters for DeleteMeter.
type DeleteMeterParams struct {
	// OMNamespace Optional namespace
	Namespace *Namespace `json:"OM-Namespace,omitempty"`
}

// GetMeterParams defines parameters for GetMeter.
type GetMeterParams struct {
	// OMNamespace Optional namespace
	Namespace *Namespace `json:"OM-Namespace,omitempty"`
}

// GetMeterValuesParams defines parameters for GetMeterValues.
type GetMeterValuesParams struct {
	Subject *string `form:"subject,omitempty" json:"subject,omitempty"`

	// From Start date-time in RFC 3339 format.
	// Must be aligned with the window size.
	// Inclusive.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Must be aligned with the window size.
	// Inclusive.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *WindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// OMNamespace Optional namespace
	Namespace *Namespace `json:"OM-Namespace,omitempty"`
}

// IngestEventsJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsJSONRequestBody = Event

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreateNamespaceJSONRequestBody defines body for CreateNamespace for application/json ContentType.
type CreateNamespaceJSONRequestBody = NS

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1alpha2/events)
	IngestEvents(w http.ResponseWriter, r *http.Request, params IngestEventsParams)

	// (GET /api/v1alpha2/meters)
	ListMeters(w http.ResponseWriter, r *http.Request, params ListMetersParams)

	// (POST /api/v1alpha2/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request, params CreateMeterParams)

	// (DELETE /api/v1alpha2/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params DeleteMeterParams)

	// (GET /api/v1alpha2/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params GetMeterParams)

	// (GET /api/v1alpha2/meters/{meterIdOrSlug}/values)
	GetMeterValues(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params GetMeterValuesParams)

	// (POST /api/v1alpha2/namespaces)
	CreateNamespace(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params IngestEventsParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var Namespace Namespace
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &Namespace)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.Namespace = &Namespace

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMetersParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var Namespace Namespace
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &Namespace)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.Namespace = &Namespace

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateMeterParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var Namespace Namespace
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &Namespace)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.Namespace = &Namespace

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterIdOrSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteMeterParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var Namespace Namespace
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &Namespace)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.Namespace = &Namespace

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterIdOrSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeterParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var Namespace Namespace
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &Namespace)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.Namespace = &Namespace

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeterValues operation middleware
func (siw *ServerInterfaceWrapper) GetMeterValues(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterIdOrSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeterValuesParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var Namespace Namespace
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &Namespace)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.Namespace = &Namespace

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeterValues(w, r, meterIdOrSlug, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateNamespace operation middleware
func (siw *ServerInterfaceWrapper) CreateNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNamespace(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1alpha2/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1alpha2/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1alpha2/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1alpha2/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1alpha2/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1alpha2/meters/{meterIdOrSlug}/values", wrapper.GetMeterValues)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1alpha2/namespaces", wrapper.CreateNamespace)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
