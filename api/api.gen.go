// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/openmeterio/openmeter/internal/credit"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// Defines values for ExpirationPeriodDuration.
const (
	ExpirationPeriodDurationDAY   ExpirationPeriodDuration = "DAY"
	ExpirationPeriodDurationHOUR  ExpirationPeriodDuration = "HOUR"
	ExpirationPeriodDurationMONTH ExpirationPeriodDuration = "MONTH"
	ExpirationPeriodDurationWEEK  ExpirationPeriodDuration = "WEEK"
	ExpirationPeriodDurationYEAR  ExpirationPeriodDuration = "YEAR"
)

// Defines values for FeatureType.
const (
	Boolean FeatureType = "boolean"
	Metered FeatureType = "metered"
	Static  FeatureType = "static"
)

// Defines values for GrantBurnDownHistorySegmentPeriodTerminationReason.
const (
	ENDOFQUERYING           GrantBurnDownHistorySegmentPeriodTerminationReason = "END_OF_QUERYING"
	GRANTBURNTDOWN          GrantBurnDownHistorySegmentPeriodTerminationReason = "GRANT_BURNT_DOWN"
	GRANTEXPIRED            GrantBurnDownHistorySegmentPeriodTerminationReason = "GRANT_EXPIRED"
	GRANTWITHHIGHERPRIORITY GrantBurnDownHistorySegmentPeriodTerminationReason = "GRANT_WITH_HIGHER_PRIORITY"
	USAGERESET              GrantBurnDownHistorySegmentPeriodTerminationReason = "USAGE_RESET"
)

// Defines values for RecurringPeriodEnum.
const (
	BILLING RecurringPeriodEnum = "BILLING"
	DAILY   RecurringPeriodEnum = "DAILY"
	MONTHLY RecurringPeriodEnum = "MONTHLY"
	WEEKLY  RecurringPeriodEnum = "WEEKLY"
	YEARLY  RecurringPeriodEnum = "YEARLY"
)

// Defines values for ListEntitlementsParamsOrderBy.
const (
	ListEntitlementsParamsOrderByCreatedAt ListEntitlementsParamsOrderBy = "createdAt"
	ListEntitlementsParamsOrderByUpdatedAt ListEntitlementsParamsOrderBy = "updatedAt"
)

// Defines values for ListFeaturesParamsOrderBy.
const (
	ListFeaturesParamsOrderByCreatedAt ListFeaturesParamsOrderBy = "createdAt"
	ListFeaturesParamsOrderById        ListFeaturesParamsOrderBy = "id"
	ListFeaturesParamsOrderByUpdatedAt ListFeaturesParamsOrderBy = "updatedAt"
)

// Defines values for ListGrantsParamsOrderBy.
const (
	ListGrantsParamsOrderByCreatedAt ListGrantsParamsOrderBy = "createdAt"
	ListGrantsParamsOrderById        ListGrantsParamsOrderBy = "id"
	ListGrantsParamsOrderByUpdatedAt ListGrantsParamsOrderBy = "updatedAt"
)

// Defines values for ListEntitlementGrantsParamsOrderBy.
const (
	ListEntitlementGrantsParamsOrderByCreatedAt ListEntitlementGrantsParamsOrderBy = "createdAt"
	ListEntitlementGrantsParamsOrderById        ListEntitlementGrantsParamsOrderBy = "id"
	ListEntitlementGrantsParamsOrderByUpdatedAt ListEntitlementGrantsParamsOrderBy = "updatedAt"
)

// Defines values for GetEntitlementHistoryParamsWindowSize.
const (
	GetEntitlementHistoryParamsWindowSizeDAY    GetEntitlementHistoryParamsWindowSize = "DAY"
	GetEntitlementHistoryParamsWindowSizeHOUR   GetEntitlementHistoryParamsWindowSize = "HOUR"
	GetEntitlementHistoryParamsWindowSizeMINUTE GetEntitlementHistoryParamsWindowSize = "MINUTE"
)

// BalanceHistoryWindow A window of balance history.
type BalanceHistoryWindow struct {
	// BalanceAtEnd The entitlement balance at the end of the period.
	BalanceAtEnd *float64 `json:"balanceAtEnd,omitempty"`

	// BalanceAtStart The entitlement balance at the start of the period.
	BalanceAtStart *float64 `json:"balanceAtStart,omitempty"`

	// GrantBurnDownHistory The grant burn down history in the period.
	//
	// GrantBurnDownHistory ends if balance reaches 0.
	GrantBurnDownHistory *GrantBurnDownHistory `json:"grantBurnDownHistory,omitempty"`

	// Period A time period
	Period *Period `json:"period,omitempty"`

	// Usage The total usage of the feature in the period.
	Usage *float64 `json:"usage,omitempty"`
}

// BooleanEntitlement defines model for BooleanEntitlement.
type BooleanEntitlement struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt"`

	// FeatureId The feature to grant.
	FeatureId string `json:"featureId"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// BooleanEntitlementCreateInputs Entitles a subject to use a feature.
type BooleanEntitlementCreateInputs struct {
	// FeatureId The feature to grant.
	FeatureId string `json:"featureId"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`
}

// Entitlement defines model for Entitlement.
type Entitlement struct {
	union json.RawMessage
}

// EntitlementGrant defines model for EntitlementGrant.
type EntitlementGrant struct {
	// Amount The amount to grant. Should be a positive number.
	Amount float64 `json:"amount"`

	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt"`

	// EffectiveAt The effective time. Provided value will be ceiled to metering windowSize (minute).
	EffectiveAt time.Time `json:"effectiveAt"`

	// EntitlementId The unique entitlement ULID that the grant is associated with.
	EntitlementId *string          `json:"entitlementId,omitempty"`
	Expiration    ExpirationPeriod `json:"expiration"`

	// ExpiresAt The expiration date of the grant.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// MaxRolloverAmount The maximum amount of the grant that can be rolled over.
	//
	// If it's larger than 0 then the grant's balance will be the MAX(maxRollover, balance) + amount.
	MaxRolloverAmount *float64           `json:"maxRolloverAmount,omitempty"`
	Metadata          *map[string]string `json:"metadata,omitempty"`

	// NextRecurrence The next time the grant will recurr.
	NextRecurrence *time.Time `json:"nextRecurrence,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *int `json:"priority,omitempty"`

	// Recurrence Recurrence of the grant.
	Recurrence *struct {
		// MaxRolloverAmount The maximum amount of the grant that can be rolled over.
		//
		// If it's 0 then at the next iteration the gran's balance will be the original amount.
		// If it's larger than 0 then the grant's balance will be the MAX(maxRollover, balance) + amount.
		MaxRolloverAmount *float64 `json:"maxRolloverAmount,omitempty"`

		// Period Recurring period of an entitlement.
		Period RecurringPeriod `json:"period"`
	} `json:"recurrence,omitempty"`

	// SubjectKey The subject that is granted the entitlement.
	SubjectKey *string `json:"subjectKey,omitempty"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// EntitlementGrantCreateInput Grants are used to increase balance of specific subjects.
type EntitlementGrantCreateInput struct {
	// Amount The amount to grant. Should be a positive number.
	Amount float64 `json:"amount"`

	// EffectiveAt The effective time. Provided value will be ceiled to metering windowSize (minute).
	EffectiveAt time.Time        `json:"effectiveAt"`
	Expiration  ExpirationPeriod `json:"expiration"`

	// MaxRolloverAmount The maximum amount of the grant that can be rolled over.
	//
	// If it's larger than 0 then the grant's balance will be the MAX(maxRollover, balance) + amount.
	MaxRolloverAmount *float64           `json:"maxRolloverAmount,omitempty"`
	Metadata          *map[string]string `json:"metadata,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *int `json:"priority,omitempty"`

	// Recurrence Recurrence of the grant.
	Recurrence *struct {
		// MaxRolloverAmount The maximum amount of the grant that can be rolled over.
		//
		// If it's 0 then at the next iteration the gran's balance will be the original amount.
		// If it's larger than 0 then the grant's balance will be the MAX(maxRollover, balance) + amount.
		MaxRolloverAmount *float64 `json:"maxRolloverAmount,omitempty"`

		// Period Recurring period of an entitlement.
		Period RecurringPeriod `json:"period"`
	} `json:"recurrence,omitempty"`
}

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// ExpirationPeriod Expiration period of a ledger grant.
type ExpirationPeriod struct {
	// Count The expiration period count like 12 months.
	Count int `json:"count"`

	// Duration The expiration period duration like month.
	Duration ExpirationPeriodDuration `json:"duration"`
}

// ExpirationPeriodDuration The expiration period duration like month.
type ExpirationPeriodDuration string

// Feature defines model for Feature.
type Feature struct {
	// Archived If the feature is archived, it will not be used for grants or usage.
	Archived *bool `json:"archived,omitempty"`

	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Key The unique key of the feature to reference it from your application.
	Key string `json:"key"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// MeterGroupByFilters Optional meter group by filters. Useful if the meter scope is broader than what feature tracks.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug The meter that the feature is associated with and decreases grants by usage.
	MeterSlug *string `json:"meterSlug,omitempty"`

	// Name The name of the feature.
	Name string `json:"name"`

	// Type The type of the feature.
	Type *FeatureType `json:"type,omitempty"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// FeatureCreateInputs A feature is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type FeatureCreateInputs struct {
	// Archived If the feature is archived, it will not be used for grants or usage.
	Archived *bool `json:"archived,omitempty"`

	// Key The unique key of the feature to reference it from your application.
	Key string `json:"key"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// MeterGroupByFilters Optional meter group by filters. Useful if the meter scope is broader than what feature tracks.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug The meter that the feature is associated with and decreases grants by usage.
	MeterSlug *string `json:"meterSlug,omitempty"`

	// Name The name of the feature.
	Name string `json:"name"`

	// Type The type of the feature.
	Type *FeatureType `json:"type,omitempty"`
}

// FeatureType The type of the feature.
type FeatureType string

// GrantBurnDownHistory The grant burn down history in the period.
//
// GrantBurnDownHistory ends if balance reaches 0.
type GrantBurnDownHistory = []GrantBurnDownHistorySegment

// GrantBurnDownHistorySegment A segment of the grant burn down history.
//
// A given segment represents the usage of a grant in a specific period.
type GrantBurnDownHistorySegment struct {
	// BalanceAtEnd The entitlement balance at the end of the period.
	BalanceAtEnd *float64 `json:"balanceAtEnd,omitempty"`

	// BalanceAtStart The entitlement balance at the start of the period.
	BalanceAtStart *float64 `json:"balanceAtStart,omitempty"`

	// GrantId The id of the grant that was burnt down.
	GrantId *string `json:"grantId,omitempty"`

	// Period A time period
	Period *Period `json:"period,omitempty"`

	// PeriodTerminationReason The reason why a new period was started.
	PeriodTerminationReason *GrantBurnDownHistorySegmentPeriodTerminationReason `json:"periodTerminationReason,omitempty"`

	// Usage The usage of the grant in the period.
	Usage *float64 `json:"usage,omitempty"`
}

// GrantBurnDownHistorySegmentPeriodTerminationReason The reason why a new period was started.
type GrantBurnDownHistorySegmentPeriodTerminationReason string

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// MeteredEntitlement defines model for MeteredEntitlement.
type MeteredEntitlement struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt"`

	// FeatureId The feature to grant.
	FeatureId string `json:"featureId"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// SubjectKey The subject that is entitled to use the feature.
	SubjectKey *string `json:"subjectKey,omitempty"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// MeteredEntitlementCreateInputs Entitles a subject to use a feature.
type MeteredEntitlementCreateInputs struct {
	// FeatureId The feature to grant.
	FeatureId string `json:"featureId"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// UsagePeriod Recurring period of an entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// Period A time period
type Period struct {
	// From Period start time where the amount was applied. If applicable.
	From time.Time `json:"from"`

	// To Period end time where the amount was applied. If applicable.
	To time.Time `json:"to"`
}

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// RecurringPeriod Recurring period of an entitlement.
type RecurringPeriod struct {
	// Anchor An arbitrary anchor to base the recurring period on.
	Anchor *time.Time `json:"anchor,omitempty"`

	// Interval List of pre-defined periods that can be used for recurring & scheduling.
	//
	// DAILY:      Every day
	// # MONDAY:     Every Monday
	// # TUESDAY:    Every Tuesday
	// # WEDNESDAY:  Every Wednesday
	// # THURSDAY:   Every Thursday
	// # FRIDAY:     Every Friday
	// # SATURDAY:   Every Saturday
	// # SUNDAY:     Every Sunday
	// WEEKLY:     Every week
	// MONTHLY:    Every month
	// YEARLY:     Every year
	// BILLING:    Every billing cycle
	Interval *RecurringPeriodEnum `json:"interval,omitempty"`
}

// RecurringPeriodEnum List of pre-defined periods that can be used for recurring & scheduling.
//
// DAILY:      Every day
// # MONDAY:     Every Monday
// # TUESDAY:    Every Tuesday
// # WEDNESDAY:  Every Wednesday
// # THURSDAY:   Every Thursday
// # FRIDAY:     Every Friday
// # SATURDAY:   Every Saturday
// # SUNDAY:     Every Sunday
// WEEKLY:     Every week
// MONTHLY:    Every month
// YEARLY:     Every year
// BILLING:    Every billing cycle
type RecurringPeriodEnum string

// SharedMetaFields Metadata fields for a resource.
// These fields are automatically populated by the system for the entities we manage.
type SharedMetaFields struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// StaticEntitlement defines model for StaticEntitlement.
type StaticEntitlement struct {
	// CreatedAt The date and time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt The date and time the resource was deleted.
	DeletedAt *time.Time `json:"deletedAt"`

	// FeatureId The feature to grant.
	FeatureId string `json:"featureId"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// UpdatedAt The date and time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Value The value of the entitlement.
	Value *string `json:"value,omitempty"`
}

// StaticEntitlementCreateInputs Entitles a subject to use a feature.
type StaticEntitlementCreateInputs struct {
	// FeatureId The feature to grant.
	FeatureId string `json:"featureId"`

	// Metadata Additional metadata for the feature.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// Value The value of the entitlement.
	Value *string `json:"value,omitempty"`
}

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// WindowedBalanceHistory The windowed balance history.
type WindowedBalanceHistory = []BalanceHistoryWindow

// EntitlementId defines model for entitlementId.
type EntitlementId = string

// FeatureId defines model for featureId.
type FeatureId = credit.FeatureID

// GrantId defines model for grantId.
type GrantId = credit.GrantID

// IncludeDeleted defines model for includeDeleted.
type IncludeDeleted = bool

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// QueryFilterGroupBy Simple filter for group bys with exact match.
//
// Usage: `?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4`
type QueryFilterGroupBy map[string]string

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryLimit defines model for queryLimit.
type QueryLimit = int

// QueryOffset defines model for queryOffset.
type QueryOffset = int

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// ListEntitlementsParams defines parameters for ListEntitlements.
type ListEntitlementsParams struct {
	// Limit Number of entries to return
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of entries to skip
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Order by field
	OrderBy *ListEntitlementsParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListEntitlementsParamsOrderBy defines parameters for ListEntitlements.
type ListEntitlementsParamsOrderBy string

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// ListFeaturesParams defines parameters for ListFeatures.
type ListFeaturesParams struct {
	// Limit Number of entries to return
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of entries to skip
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Order by field
	OrderBy *ListFeaturesParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// IncludeArchived Include archived features.
	IncludeArchived *bool `form:"includeArchived,omitempty" json:"includeArchived,omitempty"`
}

// ListFeaturesParamsOrderBy defines parameters for ListFeatures.
type ListFeaturesParamsOrderBy string

// ListGrantsParams defines parameters for ListGrants.
type ListGrantsParams struct {
	// Limit Number of entries to return
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of entries to skip
	Offset *QueryOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Order by field
	OrderBy *ListGrantsParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// IncludeDeleted Include deleted entries.
	IncludeDeleted *IncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: ?subject=customer-1&subject=customer-2
	Subject *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
}

// ListGrantsParamsOrderBy defines parameters for ListGrants.
type ListGrantsParamsOrderBy string

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: ?subject=customer-1&subject=customer-2
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// ListSubjectEntitlementsParams defines parameters for ListSubjectEntitlements.
type ListSubjectEntitlementsParams struct {
	// IncludeDeleted Include deleted entries.
	IncludeDeleted *IncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`
}

// CreateEntitlementJSONBody defines parameters for CreateEntitlement.
type CreateEntitlementJSONBody struct {
	union json.RawMessage
}

// GetEntitlementBalanceParams defines parameters for GetEntitlementBalance.
type GetEntitlementBalanceParams struct {
	// Time Point of time to query balances: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListEntitlementGrantsParams defines parameters for ListEntitlementGrants.
type ListEntitlementGrantsParams struct {
	// IncludeDeleted Include deleted entries.
	IncludeDeleted *IncludeDeleted `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// OrderBy Order by field
	OrderBy *ListEntitlementGrantsParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListEntitlementGrantsParamsOrderBy defines parameters for ListEntitlementGrants.
type ListEntitlementGrantsParamsOrderBy string

// GetEntitlementHistoryParams defines parameters for GetEntitlementHistory.
type GetEntitlementHistoryParams struct {
	// From Start of time range to query entitlement: date-time in RFC 3339 format.
	// Gets truncated to the granularity of the underlying meter.
	From time.Time `form:"from" json:"from"`

	// To End of time range to query entitlement: date-time in RFC 3339 format. Defaults to now.
	// If not now then gets truncated to the granularity of the underlying meter.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize Size of the time window to group the history by. Cannot be shorter than meter granularity.
	WindowSize *GetEntitlementHistoryParamsWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`
}

// GetEntitlementHistoryParamsWindowSize defines parameters for GetEntitlementHistory.
type GetEntitlementHistoryParamsWindowSize string

// ResetEntitlementUsageJSONBody defines parameters for ResetEntitlementUsage.
type ResetEntitlementUsageJSONBody struct {
	// EffectiveAt The time at which the reset takes effect, defaults to now.
	// The reset cannot be in the future.
	// The provided value is truncated to the granularity of the underlying meter.
	EffectiveAt *time.Time `json:"effectiveAt,omitempty"`
}

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = FeatureCreateInputs

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// CreateEntitlementJSONRequestBody defines body for CreateEntitlement for application/json ContentType.
type CreateEntitlementJSONRequestBody CreateEntitlementJSONBody

// CreateGrantJSONRequestBody defines body for CreateGrant for application/json ContentType.
type CreateGrantJSONRequestBody = EntitlementGrantCreateInput

// ResetEntitlementUsageJSONRequestBody defines body for ResetEntitlementUsage for application/json ContentType.
type ResetEntitlementUsageJSONRequestBody ResetEntitlementUsageJSONBody

// AsMeteredEntitlement returns the union data inside the Entitlement as a MeteredEntitlement
func (t Entitlement) AsMeteredEntitlement() (MeteredEntitlement, error) {
	var body MeteredEntitlement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMeteredEntitlement overwrites any union data inside the Entitlement as the provided MeteredEntitlement
func (t *Entitlement) FromMeteredEntitlement(v MeteredEntitlement) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMeteredEntitlement performs a merge with any union data inside the Entitlement, using the provided MeteredEntitlement
func (t *Entitlement) MergeMeteredEntitlement(v MeteredEntitlement) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStaticEntitlement returns the union data inside the Entitlement as a StaticEntitlement
func (t Entitlement) AsStaticEntitlement() (StaticEntitlement, error) {
	var body StaticEntitlement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStaticEntitlement overwrites any union data inside the Entitlement as the provided StaticEntitlement
func (t *Entitlement) FromStaticEntitlement(v StaticEntitlement) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStaticEntitlement performs a merge with any union data inside the Entitlement, using the provided StaticEntitlement
func (t *Entitlement) MergeStaticEntitlement(v StaticEntitlement) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBooleanEntitlement returns the union data inside the Entitlement as a BooleanEntitlement
func (t Entitlement) AsBooleanEntitlement() (BooleanEntitlement, error) {
	var body BooleanEntitlement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBooleanEntitlement overwrites any union data inside the Entitlement as the provided BooleanEntitlement
func (t *Entitlement) FromBooleanEntitlement(v BooleanEntitlement) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBooleanEntitlement performs a merge with any union data inside the Entitlement, using the provided BooleanEntitlement
func (t *Entitlement) MergeBooleanEntitlement(v BooleanEntitlement) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Entitlement) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Entitlement) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "boolean":
		return t.AsBooleanEntitlement()
	case "metered":
		return t.AsMeteredEntitlement()
	case "static":
		return t.AsStaticEntitlement()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Entitlement) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Entitlement) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List entitlements
	// (GET /api/v1/entitlements)
	ListEntitlements(w http.ResponseWriter, r *http.Request, params ListEntitlementsParams)
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request, params ListFeaturesParams)
	// Create feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Delete feature
	// (DELETE /api/v1/features/{featureId})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId)
	// Get feature
	// (GET /api/v1/features/{featureId})
	GetFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId)
	// List grants
	// (GET /api/v1/grants)
	ListGrants(w http.ResponseWriter, r *http.Request, params ListGrantsParams)
	// Delete a grant
	// (DELETE /api/v1/grants/{grantId})
	VoidGrant(w http.ResponseWriter, r *http.Request, grantId GrantId)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// List entitlements
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements)
	ListSubjectEntitlements(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, params ListSubjectEntitlementsParams)
	// Create entitlement
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements)
	CreateEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// Delete entitlement
	// (DELETE /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
	DeleteEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId)
	// Get entitlement
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
	GetEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId)
	// Get the balance of a specific entitlement.
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/balance)
	GetEntitlementBalance(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params GetEntitlementBalanceParams)
	// List grants for an entitlement
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants)
	ListEntitlementGrants(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params ListEntitlementGrantsParams)
	// Create grant
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants)
	CreateGrant(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId)
	// Get the balance history of a specific entitlement.
	// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history)
	GetEntitlementHistory(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params GetEntitlementHistoryParams)
	// Reset entitlement
	// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset)
	ResetEntitlementUsage(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List entitlements
// (GET /api/v1/entitlements)
func (_ Unimplemented) ListEntitlements(w http.ResponseWriter, r *http.Request, params ListEntitlementsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request, params ListFeaturesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete feature
// (DELETE /api/v1/features/{featureId})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureId})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List grants
// (GET /api/v1/grants)
func (_ Unimplemented) ListGrants(w http.ResponseWriter, r *http.Request, params ListGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a grant
// (DELETE /api/v1/grants/{grantId})
func (_ Unimplemented) VoidGrant(w http.ResponseWriter, r *http.Request, grantId GrantId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List entitlements
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements)
func (_ Unimplemented) ListSubjectEntitlements(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, params ListSubjectEntitlementsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create entitlement
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements)
func (_ Unimplemented) CreateEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete entitlement
// (DELETE /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
func (_ Unimplemented) DeleteEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get entitlement
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId})
func (_ Unimplemented) GetEntitlement(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the balance of a specific entitlement.
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/balance)
func (_ Unimplemented) GetEntitlementBalance(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params GetEntitlementBalanceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List grants for an entitlement
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants)
func (_ Unimplemented) ListEntitlementGrants(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params ListEntitlementGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create grant
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants)
func (_ Unimplemented) CreateGrant(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the balance history of a specific entitlement.
// (GET /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history)
func (_ Unimplemented) GetEntitlementHistory(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId, params GetEntitlementHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset entitlement
// (POST /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset)
func (_ Unimplemented) ResetEntitlementUsage(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey, entitlementId EntitlementId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEntitlements operation middleware
func (siw *ServerInterfaceWrapper) ListEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEntitlementsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEntitlements(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFeaturesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "includeArchived" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeArchived", r.URL.Query(), &params.IncludeArchived)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeArchived", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId FeatureId

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId FeatureId

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGrants operation middleware
func (siw *ServerInterfaceWrapper) ListGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGrantsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "grantId" -------------
	var grantId GrantId

	err = runtime.BindStyledParameterWithOptions("simple", "grantId", chi.URLParam(r, "grantId"), &grantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "grantId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidGrant(w, r, grantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjectEntitlements operation middleware
func (siw *ServerInterfaceWrapper) ListSubjectEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSubjectEntitlementsParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjectEntitlements(w, r, subjectIdOrKey, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEntitlement operation middleware
func (siw *ServerInterfaceWrapper) CreateEntitlement(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEntitlement(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteEntitlement operation middleware
func (siw *ServerInterfaceWrapper) DeleteEntitlement(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEntitlement(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEntitlement operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlement(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlement(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEntitlementBalance operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlementBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntitlementBalanceParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlementBalance(w, r, subjectIdOrKey, entitlementId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEntitlementGrants operation middleware
func (siw *ServerInterfaceWrapper) ListEntitlementGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEntitlementGrantsParams

	// ------------- Optional query parameter "includeDeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeDeleted", r.URL.Query(), &params.IncludeDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeDeleted", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEntitlementGrants(w, r, subjectIdOrKey, entitlementId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGrant(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEntitlementHistory operation middleware
func (siw *ServerInterfaceWrapper) GetEntitlementHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntitlementHistoryParams

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntitlementHistory(w, r, subjectIdOrKey, entitlementId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetEntitlementUsage operation middleware
func (siw *ServerInterfaceWrapper) ResetEntitlementUsage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	// ------------- Path parameter "entitlementId" -------------
	var entitlementId EntitlementId

	err = runtime.BindStyledParameterWithOptions("simple", "entitlementId", chi.URLParam(r, "entitlementId"), &entitlementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entitlementId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetEntitlementUsage(w, r, subjectIdOrKey, entitlementId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/entitlements", wrapper.ListEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureId}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureId}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/grants", wrapper.ListGrants)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/grants/{grantId}", wrapper.VoidGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements", wrapper.ListSubjectEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements", wrapper.CreateEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}", wrapper.DeleteEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}", wrapper.GetEntitlement)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/balance", wrapper.GetEntitlementBalance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants", wrapper.ListEntitlementGrants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/grants", wrapper.CreateGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history", wrapper.GetEntitlementHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset", wrapper.ResetEntitlementUsage)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9e3PbOJL4V0HxrmqTXUqW7TiTuGprS/Er2iROxo/JzMT+eSESkjChAAUALSsu/3Hf",
	"4j7ffZJf4UWCJChRspx4Z7M1dReLeDQajX6hu3EbRHQ8oQQRwYPd22ACGRwjgZj6CxGBRYLGiIheLH+I",
	"EY8YnghMSbAbdEFK8JcUgfO3vX0woAxAApw+7SAMsGw4gWIUhAGBYxTslkYNA4a+pJihONgVLEVhwKMR",
	"GkM1/w0cTxLZp7PZPfl9+3j/4M3Z6S/PTk4OD39+/vJo57D7SxAGYjaRbbhgmAyDu7swGCAoUoYWA41j",
	"Cc0AI6bhB6ZnDej5uGsHOwxuWkPaMj9GDMVYtA/NfPvu5xYeTygTervEKNgNhliM0n47ouMNOkFEbSCm",
	"+b83MBGIEZhs6HGDO4mkIYML9rWCnQTFQ8SA6lmDIjvqt0HQkZrtQdCDSZSkMdpHCRLIg6We/g5i3UAS",
	"PsOIZ2j5kiI2y/FSGs5FR4wGME1EsDuACUdhjh6NN7PiPqUJgkTRtwK7F79np0k6bL6BYoSA6lqzd8Vh",
	"5+3gfzM0CHaD/9rI2ceG/so3sgEkpAoLhzgRiB0xmk5ezWR3H4IGhUbuZDCOsVwZTD4wOkFMYKTYU+nc",
	"hyUsnGKJRaDHVesfysFBf8bBFIsRQDcwEmAMRTRqX5ALcs7hEO2Cf/2jAMonOc3l3zGZpOIi7XS2nhc/",
	"j2mMksu/Dyei9exfFyRw9u82UB8lCcqvOUmrwSTE5m/a/wNF6gcuZupgxAhN3me/Olg8TfWvlU3XnzEZ",
	"gv4MjNNEYLl6rptzd4H/MD/+PUq5oGPEWpt6YZXft9R6fLtlmhb2CQs09m+M+QEyBmcOWTA6rq7jVEAm",
	"QAwFagk8RgATcHK4B7a3t1/KTRxD0b4g6vBxfI3atRAO5Oh+rrPV2dpudTZbnc2zTmdX/fd7EAZ6dIl8",
	"O7lXuKh5HGIusYUBIFQAPkGRPHgxgIBjMkwQgMMhQ0MoEJjiJAF9BBgSKSMoVsSJYDSy2wUgiYFa/RST",
	"mE7bF+Rf5tO/AOYAAoY4YtcozmgaXMMknYOOoedgZRj5ZAjVLPcyXHov3+Ix9hDlcTruIwbowLJHIKhZ",
	"dg2ciRrIyx43O52Oc7o25V9jeIPH6dh+HGNi/nTOmkBDxHJQ3w8GHDWFlX/GkxpIqR7HC2oVTgtYpx6w",
	"M1oF6oDEazgLgi46CVsrn4SPikJP8Ve0+DCE+WlIJS9adCakwJISjCExkxsj/85P1kSK8ZrDo8i9HiHT",
	"HOimYs1ZZ2ntZ3iMfqfEs/6zEdLnUh5aCbyc3i5E7ehXShCAHMRogOWqMVHfet3jLpDjAjkw2IcC9iFH",
	"4MlIiMnuxsZ0Om1jSGCbsuGGHKglB+JPJTlUcC4HPD/bUxOq+SyuU47iRTjKFuel8+D8bM+VeEF3jBiO",
	"4MYxml79RtlnL92YjZKKwhs0W0YBNT1r9JfSuM1U0EzY4dgD7J0chE8o4VrneAXjE/QlRVx8YLSfoPGJ",
	"+So/RpQIRBRrgZNJgiMoF7Qx0S3/9geXq7t19YMYCYilgjBCMEYM7OkRWmezCQIjyEFK0M0ERVLB1IR0",
	"URj6ZpxcBHJrBBQpD3afSV6jzKtgV8IKDLD5ylJGdg1ASl3e7cO4xUyru6aHwSxeI6i4ee6sd2FwTMUh",
	"TUm8XnQpTVXR+UAOXsDAsxwDx1SAQ9Ogbv2EipYeZB2rz2fUa+9J0KWpi9aMAWOKKhzgfBIHEzudzSIm",
	"eoVm8/DhDrgurPSKY54TmIoRZfjrujEzxlzKGEAZwOQaJjgGgn5GpEAkDmpcSObgJXWbrQMp56UBz7Oj",
	"vl58OCwEMUZZgUQ6Lh6ydgemXT0ubNM1YaIE4V02qmG6CSQReo25oFbo+qSGllhSvvZ1DzDSXbSQmxSs",
	"R9OkKw5I7JfcjqMqGxAKo5TEVoxrLaRdtPyUzpdrUTTtJ0jJIxi/J8msZNoTpXlKVGZAKStoabC4sp0e",
	"AjDl1nmVMrJPp8RsxKIdP/L1uQsDDdhCetGt7sJAqYp+XAgqYGJ0SbNsyxiNJrVGLPjs9VfaK3OQ74k6",
	"oknyfhDsfpq/wmrfPYagQD0ySQUP7sL53U9HkKH4HRLwEKMk5sHdZVixHtTQPNecpE2TcuR4OhVmGqyr",
	"AFutV8a4sFYEo3hC53hxz5yNFtQ4JIt7vJTPWLnUYAzFfRxO3awbsKNlVsw8bN+5iuonZ9mXno0pUVqM",
	"JQRjTKCgTHmc4GQioZMczngMG5NfYDyLEg5/n3f6c7GPlCY4qiVT9dXtcZdt9OzY2KdylXdhQAlqcG48",
	"QCw8Kx4glj2cwd1lEf+KvzU/7uWezoFa4ayHt6XTsuCyRp4YY1W5AkTdgoiRkR/qHCkHE+c0wlBK5CkW",
	"o6WOVg0XzU8Nuplghni3Tr7Jz0q9UZ4Py9e9Z3wZT95CuAi6EScoShlDJKoROLKNttxzfClzmqmO94Gv",
	"Ao/hlV4TWcKS8VK5fZhraFCceU3sNVwJpqLBuwArJd7kgBSWKK7KrHzHxSX6yqJUCw4g064JydkxiRiC",
	"HGWaDh1Y10bkOrcrwgOOaUpqKEx/ywUHOB3RNIlBXwqkCeVY4GsEtNhvpjlU9CU0GKBIDlNL5baBoqY2",
	"+MDoNY4zM9+6aCKEE40JfW1FhiD3XYEnY0xSgZ6ulezy87cEb8v6WLVNbv4Y3pzQJKHXiHWd7ch9pFW0",
	"GH+u3SL37Gs6jyBRbkKaSLzIodXVRm8AsPgLBwlkQyRFLiSgI/uSfIC/8IyKLHrlt3fdX584kIa20VPw",
	"NwPGijSwkkrhWHDyxwn6AGeWpwcTfPXsPet+Hr29nuERpi8nO5ujlxgfklfe26QJw5RhMSu60X14ty2L",
	"3BaYE6muy0Z4OEIsbymPqbJFUQwGmHGJpg/2o7qkyI5SjCI8hok5UrwNPsoBEzpFzP4GMImVVUuGdiZ9",
	"kSu3on1BDikDBjehHNqBd1PONqaSa7Ah0oRCSm222hfko6EGCTdDgKNrxGCil8oBvIY4gf0EZTobh+OM",
	"yWovKp9xgcaAo0SynYIIECP1pwKdi2xu5Z8HEeSIg6ma2kzHpUTPp8lgTdA1SkJn6CihXI4omaHgrnR0",
	"3bjZDvQ0wcsZ1V5OqZ1xBK+tRzWCiZ0RS7WcxGWpywsLVjNJfb10GKeQg0hx9ByAwklxLmi2dnbm389I",
	"SVMvfHPB7FEIiqy/hu2sm9UY9mJUJ6UYYIEMDu1QNTyHMjzE0lDIGMxjZGDNDHW9M5gMLesv6QxmlMtF",
	"do+R2EXZWRBHXnvo2trcze3RvYSmserIwalRJvS2/fP0/TE41f6sAi+2fLxwod8SKetTiTn6GREe7Aab",
	"W9u+a34smfdOtNkZwBi1NqOXqPUsfh61Xmz9tNOKdrai7ec/bW/G25G0pmjKIiUTELvGEWqpy40wkFrP",
	"NWJcL2Gz3QkyDbF6i4HHZTVgc1f91+50Nn/PIZwwOp64Fpk5QvPFltYUPTqNRCmYwFlCYdyeEwlRgzif",
	"CJOQGOen/lY+yubKBMiv9hAr01tfiIN3KRcAxor3CqruT7c6z57b+1Olx0qO9KngWFUO1UtXp6p8Vdzs",
	"LSJDMVL8jKSJkh+19oWEyr1DK9yU2psuLVV0M82G1GL0AjgQtO0qcinDy8OB44Xzq50s7GBT8i3CUrVp",
	"DHUvmF/tuGSoBExHOBqpyEJFXSM4mSCCiuRVPisufloMDZAWKouhc8+Y9zJXf7R05jISXmAkGuoMlVJ4",
	"8iLI+gQvAqgu2mdf/dW35GIsQQOWntI4QC0qC98mjMZphBh4kl2xxqA/A3p7nrbnGIwLINasp4I7PEZc",
	"wPFEgjG1Qo1GmUzPttV3Xre3t1+2aw2cEmfzGjlLnhA/pyni3PIbjVCGEqUFCerKd6XN5qssrsHw3kUm",
	"t0K6OTZFCjU9cyqpyMdizKQ+1FpgNg2YjCSFq458g8efW0O6cb21oX5QkFYMv2oES65YmoANOiiHknqU",
	"uKhecUOVEVVjkODPCGxugTElYsTLOs+WT+OM09zSbTKRba/nUhOZeYwMef3+/CQIg/3ub0EYfDw4eBOE",
	"wbv3x2evgzD47aB74uxRzX5nIIUGBz6txwQGNzfQTYd1XzB08+sWnjvzAWXAcGRAB5L7qoMBgeUkRXtu",
	"F+x9OG+9pinjIThTGkEIuh96YA8mCQ8BElHNLYVvVcupgt92ASUXFYtG+NobW1y6yuLAtg0BNg5HQkVu",
	"/FFmrTzK9HVYifzN4mu8fVlscRh8rvM2GufxZzQr37SpkD4jYyV4A0bHYEZTBhydqeyiGk7Esyuj/j2u",
	"6xhzCWIiPHVYLb8HHO8nORQoD0I2gcm8Dc45GqQJwIM8QBvwiE7UxvcZVZFByiCcSn0wQzuD0ecymyuH",
	"HN/VLc8fOX6WAZDdCbhEWLwVUH6DGGkHLbcE2J95CdCo+lfqxta34zqGy+tzd4LmChvnhJ31zLkL5kjz",
	"BvzxTF1ElTjyZ5RFxc3hxWdeneHM0RRc+B2RYa/csou0MDuPl57VHNXcxFfn1a6MfsoIiOmU2GCIys34",
	"BfGNCRCJuSRK63JgCEYjxEHHhAzaCOFlQwBO0dBeAxZjif1rs8098R5cfyq6birrVSvsgiG+RiTrwtCE",
	"Ia4Ud9k1iyCA9g6MAJhfNLhBBD+iSO4ZRVJ3O4ljjw9uCrnaUaG2dL33kMvGoej2Z4ip63ZMyQmCvE53",
	"ZOobmI5mAAKCplaDlAtSCLaht5YNHJ10j8+uXp2fHJ9d7b//eByE5qeDXz/0Tg72s78/9s5eX73uHb0+",
	"OLn6cNJ7f9I7k8rm+Wn36ODq5OD04CwIg4Pj/av3h1c/nx+c/NY7PpKcZCE+5sTZFCJsshPyDeJrlkpy",
	"as8TOHlsQSn47G1vHzw5J1iaVTBJZuBcj/sW3eCIDhmcjHCkPpxSJtQNQeatYE9L9Hj0fOf3n3Z2uocf",
	"u29eH2xuHf/W2fv55aFU/ydQCMTklP/vU6f1svtqb//g8Oj1P9+8O/7w88np2S8ff/3t98vbred3/+2R",
	"Yrf1KxvDG2vcPt8u27rurLD1tdN6efm3J//Yvcr+ePpXz3Q+wdMjQ8QFilfxuHYJwKa7MZiVAkGtaqTC",
	"NLVlpSIAS85DZKdcxg27hN81/n5+13zlOuiyEtus8xuui4EzNubD4mXu3aztW5nKpSkbKouMe2C5uADd",
	"y6cdqWAd3+nVy1RWV0TJAA/T7OoECpMPwcGITtXlNxSR1jfzjBHtlShRiv1scsnO3wUVUuzpcGDN02Rv",
	"Oc5ZYV/CLF3KobX/bheSpOQPNm6JKw5VPpfKAW2Oxky3tzqqk3+yG7zrHZ+fHVR3t7CWBiFRXad92Qqp",
	"4t/52zL2LDe0qliDc4Othb4zB523tXcESiWWFrXdzWauscK+1Jlj+TCVHasz0Y7hGMXq8ucDVImhUjmU",
	"J17lgKEbaWrZCCk33Y5rWzf3q0r+1AZv0IyDccq1ga6liaTdiBKOuQCUJDMAk8kIklTly6ivKYkR4xFl",
	"CEQjKGeU1qHfuJtDi5UTiOMVM4QbyrWFegWfK79DMErHkLTkMEq41oKkXcP3ReI3kJ6Vo19eu4fSyoSm",
	"w4Ay8ipKz79wfStkwyjbF+TMbWQ6UwZOz9+FoPvLUQje9Y5DhaJ33V+Bw1q45sHEZD+qLCu1jsIl+AQy",
	"bp1gWWDUIWXg/Lj38/nB1d778+Mzd9iwCLaGyJ4JO0UbyCEqfXMEWBRKGPGQUIbKqqbLVSvbMC3kJi6R",
	"3VeIedPJ8C43drlcYZYFHnh1aHlby8T71SyYfB5u6OEUwBUB4A98c3FsWHDKkefoG6NEC1C1QdLEcPY6",
	"CIPuL0dBKKWX/L/dX4vXpbrnvBIOLjK6BeSuGy8/p4jNThBX4U9+Y01+0/a/1ktULmTbFwPw6danHJQU",
	"0bKWV6cwKiLXlxOaipQboS4t1xCaNur9QX5Sc1eZ77VBgIIunGC+WmJ18Dx7/NFjpJGvyiEVOvV5pwam",
	"XsGa4iwFXVsu9po4ndrZWiU+Q41HlDM6tQ6BZmfpMRNMmeAb6Jzzwjgbrq9GsXZKg9TFApxVIwA04nUE",
	"zJy7/IXKvEHurfceNffrOYhfN0VbD+a6qne49K5XV5zKXcwS0jw7HOuXXsVMl8Y3vtW+97z8rWScLJuf",
	"YFzOsdU65tznLJujUM48WF8i3AI0/kiEW+vNq/LJfFhL2On8NLq6aJWuTu7RXm3fVnhrFunRzMWJrtuj",
	"45fyZJMp5DZavg16A3s13k/QWpM3BK2FDmU1hb4LbOXt0eWZBPVvD2UCJsrz5NujiBIujX6gEgQS7dAr",
	"ewKThE4VB9OX3VzOWrD9L8PABK93Rf3adLZa7FRny7LX6gSccjvP9ZnUOpD1igM6vtJLu+p1yf72h8nH",
	"j1vdrY/sxfjlH4Ov6HVy9OuLm/Her9Oj9mzny7PTVvfjl8P0+Zc/BvDwa+frz1+eHXzdenHCyeyX6T8H",
	"g193vty8u6YeF2MVSbc14QshwIOsTI1yvhSr8eiykVlguhnZ3ZMq+uurTI0x6emPmyVFPAy038h8lhLh",
	"rrCRtw+VH5hRwm2DOJpCkuNqKtFCgHBcrqZ4Lzddrl82rI6T0as/Nf8zIlLsK1rJyjpBoTNGMC0e2Ici",
	"+RUzHP1cyZSwWCowvgtMN7CvKnJwoAcET04O98BPLzo/PW1fEEdk5ic0D0AwYaWmCIf23YzhTHnmdBxD",
	"2Vdhq3/0aTxz/G4qwSHTZtdXNqjkIjCzVzl3ydeLbiYJ1JfppcVKwonKKT8GgiLhzF1h9cwQrlLKfMCd",
	"n/ScSDattpbi8i2MDWGTaDNY2k1oBJONf757n0SCv/nlRasj/7dZDeevnkyzTb5j9vrs7APQDUBEYwSG",
	"iCCmYrT6MycWWcUzZi71xth9VrjJx0RsbwVOUtfOy5dOUpcmo0qQrSGsKr4h4CPKROUGgKfjMWSzElyK",
	"6ovo9ZLqojBuVVsrokRATKQmLnfdt9f10849DIu2s8RvTAi3xlG21aE9Qs1M0FPVy7KntZqgZTW7JjEP",
	"k6Eb3k2qCeglxYNEI+q7FyYAsj4WTO6/biT5gSp+p71L5dlMUFAz9VhV+r2GyZLGxQFJx3V5bfPCtH3D",
	"VJb8Vt1mDSQjb1n9So/NC1cwWaRvjgNdtlVlC8VpgslQxbrtd3tvf9sF6n8H14jNQAxnF+S/wLv3x/td",
	"80V/eEeJ+XZ2fnBqP+pvZyni5uPHg/1j+1l//Ihikn0+e31+YjubvqOU2a+HJ73SrIcMm2+n3bPzk0LP",
	"U2m12a/nZXhPUw3vx4ODN28LX6YIfb4gKtT+rbsKFaN/QX476J4UO8wQZBfkVe/t297xkdOhjxOJSRDN",
	"ogQVIrQUXk1Yv/qHmc2E9qt/mPG8kZsVl0qFFN5l1rJqYIoeMqRjU/QtH0f2q0rATgUdQ2EClCZ0kiYu",
	"7zf5u24tTaVYTKX6QLIo3VLqhatLVyWOKsqRFag1Ll8FoJsP3H64Oh2m4vaK8Jneq8NXdpo2VNPLXBPG",
	"SjH2V6Nfb6BjOonvsaEJ5AKYIR5sV31JTzkduktw99/Hc6ulfhq7TCtdH089rvmg/fBCrtULmd161FXz",
	"tbmU9UV2BkodJNHsKoY4mS12h831VjpF35fKbbLbqyI86mrqplzHfajVlO/ptI0grP6S36xtlU99oeXc",
	"C7YwiDGfJNBW/9ozPgZwrCMuF7vPVJJSOS/VoZhR2ucTqmumbG5tP9t5rs0ohifIzqY+Rim/yi2yqiFb",
	"XX7VmbO1ktSoEK8Pf7drElHVk+JugDtLeS8aJpOvywdlss8a+58Wswk9kUPRftpYfPtaIZ4SmC4dLcSb",
	"J8PId+7n1VZ3QmZs4VOOvxYyi0wER+hmpRaCdLIGDeJ0Prol09doYOpxUVws8urnvlPT1l/ftVGUh7eW",
	"rO9ZAy6tLCxmqhqI5gYq3X+P0s8YdVO52FtfYRGV+TlFfQAnExCp1rZcefaXKVh+dcV19F++BXCC3yAV",
	"bqIGcy5C7JR9BBlih/bc0wn8om6xfaB4L0psKXflPFOD5dOPhJhkk688rcRA46kWL/GPqahO5FsZwARI",
	"QmsZ9TXPlF8AxZ3y2OtXgPZp5DHN9mmUSkFvY9RSlpjefHcjp+42phuxHEA5GwbUd5+CyDsn9l0hjEBV",
	"J0un2WSV3kwmgonuzDtK9Kr7FQ5mNNVl8oaICxMSH+qIGxMEosbUkZ/a5Mu0e96+IK1W64L89f3E1C3i",
	"eSWr//vf/wFPFHRPAaF63crk1IG3WbUsTBzI1Pa3/6qOY4IjZKpXG3LvTmA0QmBL5VDkCDTvGUD1Vb1o",
	"YLryjbe9vYPj04PWVrvTHolx4rgTgwI+gjAoJGm0O6qe6AQROMHBbrDd7rS3dRLOSO3uBpzgjevNDUeH",
	"08E+vqdBlIvGbSm5LLVIU6JENjlwxwoLj6nVWB55kw3nGZU6S6Pc2rxkIpuXaIzFiOkcY5TEde+XyEal",
	"F2Hyhx1c48vKE79B5qlocFl6NWGr05lTxNwWL/e8JNSwnqqHgVfMAetmK27jXRg862zWTZUtYmNeuXo1",
	"lcHb4nHqirzrhzGU49tHcZJjQX2J7ZIZeHJwM0EMK9aUPA0u5TAZbV8vpupiYLk+/yr5VTkDGCTWR+Qh",
	"9+vVCV29/dSUzs+oh8ad53o05Pd7WWjew0IL3hW6L7W7gbQrZbr9GxYcUwmNS65VKuuOuZ4Kd7EvN7fi",
	"zfjFT63OSxi3nvWjqAV3fopbO/3tnZ2tZy+3Ubz10Ivdqlts0xDkYorlMkxNHwFp0Meonw6HmAwNc+ss",
	"Zkr1j9o8avZYYl0uh9Q/XEp7nnLhe7xRduV5WTHKQF/lGLrIlCqWToSZU+rLxx318Bl/NFeDr2g8m8MY",
	"nFJLf6syiQYZnndh3Xgttba/zWc9f/YSh39+PtOUzTRmL3nCpud8ZGaHsU8MlYNSPIZ7cJzYDKCfC1ZT",
	"y0FrmnEzeN0o42K1uPJJra3uqU9t8X2wu4ocf+Z5njKNIsT5IE2SWcaB/systuealj4e6yicxou9QOW0",
	"rer0ykM7yr+5CaUOsbWd5txo+UrC1b02bOuA5Uic/95w19YYm/fgcOWF4W9iv9kadkuoOfmiH7ViMsgJ",
	"uJnNVqem6Es+Xr6XKx4Z3chis6m2sZyG4S0f6JcXzj2gJvd2A0a7uW5IfdCZT3mEwqNh2jtNxpj/muBD",
	"ELPebrujq3gg7EnYuM0uOO80mSdIeEusyt+dQoz9GfiMZj6y101zsl9OVOT3rR5m5xH7lnay6JE17fwz",
	"PdnCnfe+ofkQe252YNk9D/3y/ggJdytx7NvJIyQeZBs735KpqFo9f16ycDZyFT6ga0POVwthYt/iqFMM",
	"9Wsk/+5qoRvKtLJ2uGARRvvThzluvGxd7NRGm3xzN75+UG0JfdCQy+PWBoeWalc8NRu3pmziXMn5C8Ux",
	"eKK/PrVlLNuga1+RgURf3PUzGQbwAGABRpCTv0hbXZXEQl4OLQfXm7Ps2bMVH5tJWTWHevdagXNNcfyo",
	"9LT7suVnnZcNDpAvjUfvIkwYgvFM7VMhfedlfi26R8kgwdG83J3INlnH472lPVNR6qrYFSSmRLWzjQ+l",
	"rhh6X+WQWVqeJ5p0G/+l7zvdf413QN+nhl2DpNW1VLlbqhzLMsLAbtKjFgZjSy2WTg351PsA/tpdEGrx",
	"V/PklyfwJbRZuTA3e513QZyiiwOcIDnYBTFGnyneUu9wsEWsHsLdYPbe72Aw9cnX7V747kUkv9UBDO+7",
	"CXs//CfNTvz//e//AHOcxua0VI59RRJt3Kr/bwsfz1X6FvKGC5IJSH1s+jPQ21fPWyTpsN6tYg/3cspe",
	"AfCGKp8GuOhWuZ+S9YiJwWxGLTHM8aJ4ts/nSHmgjev8YKBrZKCa5l2P0SP09qzOsbQvoVaj/tkJTh1k",
	"z9VUiFk1Wws5hw8XktakqVtwb6kuZ3iMfqcEreq+WaqXee6mca+s/b2ZxX9sWc0luIhbwVTVO0M3YiPi",
	"1zVGpJnxShWkCs0fiMShfc1Y4TeU+AwVri6Ib1lh6cdN9aNF9dVm6GxPqCKBws2tylCbxaE0arYWD7XV",
	"qQy15RtquzjUVmEoHb0TPvMk4FXYsipxrkt4/4njORz2uxp3t6/uz3eZ2FYmyTCrLFzjQDm1g34X1cXn",
	"hymxlJy+5heuauqtsPhZE6k9oLciA3UBuehEnCLVrKIPlHKW2uBspIpHxhOKicplnaT9BEfJDKCbCeXK",
	"/BE068drdAmdZ1SjUaxQHl/d/Kikt+ziJ39ZreyTCL1sev6baP9piss3VkF+iN8f4vebiV+TTKp4TSXh",
	"8dOlJHl/vuenS0neZfFtkh7LUlz39rJlG91cw4QbeJKURPAmlNZe2Dur4Yt4bp7PUxg6T+tpg329GVIE",
	"bO20l0/z2dpxsnzkH98wyafRnYdb9nQJXaK4Fz/csg08cQp1Bbz5jtH8uEz9cpW/EK3vxsTd3WXvTZYt",
	"bOu3jJvf97qE6L+GKeRdL3Ubsz7hvADMx3dR8VAhmqX0/sbyYMM8+wb17cKKN5AXpJcNw2tEhOO61qTp",
	"z5uyw5Qkx0qHRZFbPiSASeLLBHO/l1lpXgvoTr2AmLVVq5k/WvGEqA7ugAvd1dUZa1+AmLcIY4BbrLsQ",
	"1DCJuwKbKBbE8dUya7DoecWG77OUhS8BVJlCbwAIVY/NMrc+UlbIOlTzmgltNev8mMTt1fKGPhQWUhjv",
	"h7xeLK8dslgotR1mt9BX1VTvzdw1NZqu4796eDUx9/Cv6m56hJIs08o87qYMu/cIk7kg5xOOmHDK3rWB",
	"TbChzFQ45I546ukqb5ZJxBSpSEl0g7kIARYZd7AJJZUuqikvtJ1AJrAq1mlCfPOKKxNGr3GMYlPf00dq",
	"egl2/1cPvlk3mRWee6EgVWCuXxdcN9imqYH3By9udko1EWbaiPeYenjwxq35Vy9+z96g2doiWyzhZRrm",
	"3Iyh/PAsd9FQBL5hdIslsGJ8y58hlPnxR9nMpc9wZXXgCInGFHeExMOR2/rM6Ixj1nPIP3l6kyQbZ2NX",
	"52lL1BOTZobbumTdzFc071VqrExby+cT/Sjw9f0KfC1yShbeXlhMVLqbi+u1sKrV9FJK0Dd42vBeZb5f",
	"6SoJtd0v6+qoOJvynXLjCweqCqXz+RHmyK+eO2Wzptz3J/Nc1vUmUTUrNJ+lU1Xe1FQWIyZDZy/qCq7j",
	"OKtDbjoVCpI3f8B/fm1iP0TVasWXc7QHuwMjyH38ya3I/vjLIaACq1w636yZ6rBxi1x8NyqaUERsbbq9",
	"br5Ohr9YfygspqHt5LKj/5SyC6vQ1pykgUb0cITEIyOG5XTJZiy3qEyW2W4CuThBHNW8kKKeQFEFUXWF",
	"5inkgMnmD/keSgP+elBgpH/6AhTfhfNumFrztcachExKMFuTXr18nz0UWHkjZN7hM8Xpv/0ZDKvXVZjo",
	"1+TVm0DUlBQ3a+S7IKNlgAk4OdwD29vbL4Em9SxSR0XvEDo19fk90TrmNPiC6O7z1vB9eUqROzgUUOUN",
	"zraX3oQJ7cttROVCXRdfEdwsvKwY07SfzOEL+Vv7uijEOUc1amFSqI2hHjpkuJ8q/dBUSDQgt903E5bm",
	"orZYRxlZOqHLC5p5bro/A9MRjkb6HUpd2UByVFU6wGQnSzLB2UN4BcTtrII3Hz+t7WRcDGHtWqiAiREF",
	"ZtttkSM/+MCU7+OAXiMGh7ps37pXtNjuzDb+T+OGfhA504ybf0MRtFz5JO3zIYtET+nFghWLK61D9Cxf",
	"zOgRFmX6USxpfcWSPBS8NveoETjNzojutFrpo/UYRusvrlGmIcd9WSdDNMq+v9fS0HxdEaIfhT2X82St",
	"XDNpRTE2yt/2amRJmfZzLSoVc6NTbKSG60byybEIUFnF+kVvO555HNd5NQ2oVB05wIDRMbgIBL0I2iB/",
	"c0yX0FGSiONrBKCCFDPdURW8QjeVj4jEehDlQIhGKflsn+3nY5gkiAExgqQCjRwO8+J0fSpGckDuXTSh",
	"orxw/ZCrSJl65VweRUxoyotvps2zRu1TbN/fGlW52Zk1qh6lyW1Sp/MCs1Rd3nMgWEoiFXpl7CF5DtIE",
	"MiyyN+dTEiOWzCR2nTpIPr1CpYU3S/e7j0UbVt2j8f0x4jHUVXyskH+Y87N+lAkafAMEncqTZGBT6zcn",
	"TD1QS9NJiSW0wV5WsY6PKBP2cOrMVGfB9Qubum8kOguc/x7jujXJZpeoSmS+ShnZp1Nij/qiy8+axxoX",
	"OifL7zWCjH8pflfl2u7eKCcBTSf5s+bue5cX5Ic129iaXSxRv6E6wKzD3a+wK3982admvC5SQBrJCwia",
	"Zn4WbcTKcyus803KbUaTBMXK+eITe2omZ7XnpibRv4++X7pEHgxQJPA1qnvxXbFDKDI3HNK3GUDAz4gD",
	"3T0EcUU2nGUt8+qexuM1SM37BGduJLN+LhvfR4CsSTr4nGUrpHG4TM3cAP3gPnXcR5/glW5tSjnTWX60",
	"P2vafZPXJEwjdu3PM05opIotFN4f3dz6qd1pd9qbuy9evHjh0UDVY1pznn3V3+XMZoEedU3Vr+CAocQe",
	"BP1+kCR4ydCyl9sMk9NP7rQvyKe3CDICxpShyye1T85uDJGQY7UUY0TxhhplQzK9a4ymT9VpMoqKebzH",
	"q1VWwVR2NSZD/Yqs0nmyQ3oP+AwX9AJoCow0BNDUMy2UDWkM1pgSJPBXtBFDPupTyGKTI9mK0TVKJGNt",
	"DVMcowKAJtuoIYBO+tCKyLIjFIDIglMbglEIjVweQQVp7qerOaf67vLu/wcAAP//Plg3GW/kAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
