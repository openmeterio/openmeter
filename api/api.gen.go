// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/openmeterio/openmeter/pkg/credit"
	"github.com/openmeterio/openmeter/pkg/models"
	"github.com/openmeterio/openmeter/pkg/product"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// CreditBalance Credit balance of a subject.
type CreditBalance = credit.Balance

// CreditExpirationPeriod Expiration period of a credit grant.
type CreditExpirationPeriod = credit.ExpirationPeriod

// CreditGrant Grants are used to increase balance of specific subjects.
type CreditGrant = credit.Grant

// CreditGrantBalance defines model for CreditGrantBalance.
type CreditGrantBalance = credit.Grant

// CreditGrantRollover Grant rollover configuration.
type CreditGrantRollover = credit.GrantRollover

// CreditGrantRolloverType The rollover type to use:
// - `REMAINING_AMOUNT` - Rollover remaining amount.
// - `ORIGINAL_AMOUNT` - Rollover re-applies the full grant amount.
type CreditGrantRolloverType = credit.GrantRolloverType

// CreditGrantType The grant type:
// - `USAGE` - Increase balance by the amount in the unit of the associated meter.
type CreditGrantType = credit.GrantType

// CreditLedgerEntry Credit ledger entry.
type CreditLedgerEntry = credit.LedgerEntry

// CreditLedgerEntryType defines model for CreditLedgerEntryType.
type CreditLedgerEntryType = credit.LedgerEntryType

// CreditReset Credit reset configuration.
type CreditReset = credit.Reset

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// Product A product is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type Product = product.Product

// ProductBalance defines model for ProductBalance.
type ProductBalance = product.Product

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// CreditGrantId defines model for creditGrantId.
type CreditGrantId = string

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// ProductId defines model for productId.
type ProductId = string

// QueryFilterGroupBy Simple filter for group bys with exact match.
// Usage: ?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4
type QueryFilterGroupBy map[string]string

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// GetCreditBalanceParams defines parameters for GetCreditBalance.
type GetCreditBalanceParams struct {
	// Time Point of time to query balances: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListCreditGrantsParams defines parameters for ListCreditGrants.
type ListCreditGrantsParams struct {
	// Subject Filtering and group by multiple subjects.
	// Usage: ?subject=customer-1&subject=customer-2
	Subject *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
}

// GetCreditLedgerParams defines parameters for GetCreditLedger.
type GetCreditLedgerParams struct {
	// From Start of time range to query ledger: date-time in RFC 3339 format.
	From time.Time `form:"from" json:"from"`

	// To End of time range to query ledger: date-time in RFC 3339 format. Defaults to now.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering and group by multiple subjects.
	// Usage: ?subject=customer-1&subject=customer-2
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// CreateCreditGrantJSONRequestBody defines body for CreateCreditGrant for application/json ContentType.
type CreateCreditGrantJSONRequestBody = CreditGrant

// ResetCreditJSONRequestBody defines body for ResetCredit for application/json ContentType.
type ResetCreditJSONRequestBody = CreditReset

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody = Product

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get credit balance
	// (GET /api/v1/credit-balance/{subject})
	GetCreditBalance(w http.ResponseWriter, r *http.Request, subject string, params GetCreditBalanceParams)
	// List credit grants
	// (GET /api/v1/credit-grants)
	ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams)
	// Create credit grant
	// (POST /api/v1/credit-grants)
	CreateCreditGrant(w http.ResponseWriter, r *http.Request)
	// Void credit grant
	// (DELETE /api/v1/credit-grants/{creditGrantId})
	VoidCreditGrant(w http.ResponseWriter, r *http.Request, creditGrantId CreditGrantId)
	// Get credit
	// (GET /api/v1/credit-grants/{creditGrantId})
	GetCreditGrant(w http.ResponseWriter, r *http.Request, creditGrantId CreditGrantId)
	// Get credit ledger
	// (GET /api/v1/credit-ledger/{subject})
	GetCreditLedger(w http.ResponseWriter, r *http.Request, subject string, params GetCreditLedgerParams)
	// Resets the credit balances to zero for a specific subject and re-apply active grants with rollover configuration.
	// (POST /api/v1/credit-resets)
	ResetCredit(w http.ResponseWriter, r *http.Request)
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// List products
	// (GET /api/v1/products)
	ListProducts(w http.ResponseWriter, r *http.Request)
	// Create product
	// (POST /api/v1/products)
	CreateProduct(w http.ResponseWriter, r *http.Request)
	// Delete product
	// (DELETE /api/v1/products/{productId})
	DeleteProduct(w http.ResponseWriter, r *http.Request, productId ProductId)
	// Get product
	// (GET /api/v1/products/{productId})
	GetProduct(w http.ResponseWriter, r *http.Request, productId ProductId)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get credit balance
// (GET /api/v1/credit-balance/{subject})
func (_ Unimplemented) GetCreditBalance(w http.ResponseWriter, r *http.Request, subject string, params GetCreditBalanceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List credit grants
// (GET /api/v1/credit-grants)
func (_ Unimplemented) ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create credit grant
// (POST /api/v1/credit-grants)
func (_ Unimplemented) CreateCreditGrant(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void credit grant
// (DELETE /api/v1/credit-grants/{creditGrantId})
func (_ Unimplemented) VoidCreditGrant(w http.ResponseWriter, r *http.Request, creditGrantId CreditGrantId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit
// (GET /api/v1/credit-grants/{creditGrantId})
func (_ Unimplemented) GetCreditGrant(w http.ResponseWriter, r *http.Request, creditGrantId CreditGrantId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit ledger
// (GET /api/v1/credit-ledger/{subject})
func (_ Unimplemented) GetCreditLedger(w http.ResponseWriter, r *http.Request, subject string, params GetCreditLedgerParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Resets the credit balances to zero for a specific subject and re-apply active grants with rollover configuration.
// (POST /api/v1/credit-resets)
func (_ Unimplemented) ResetCredit(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List products
// (GET /api/v1/products)
func (_ Unimplemented) ListProducts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create product
// (POST /api/v1/products)
func (_ Unimplemented) CreateProduct(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete product
// (DELETE /api/v1/products/{productId})
func (_ Unimplemented) DeleteProduct(w http.ResponseWriter, r *http.Request, productId ProductId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get product
// (GET /api/v1/products/{productId})
func (_ Unimplemented) GetProduct(w http.ResponseWriter, r *http.Request, productId ProductId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCreditBalance operation middleware
func (siw *ServerInterfaceWrapper) GetCreditBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subject" -------------
	var subject string

	err = runtime.BindStyledParameterWithOptions("simple", "subject", chi.URLParam(r, "subject"), &subject, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditBalanceParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditBalance(w, r, subject, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCreditGrants operation middleware
func (siw *ServerInterfaceWrapper) ListCreditGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCreditGrantsParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCreditGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCreditGrant(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditGrantId" -------------
	var creditGrantId CreditGrantId

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantId", chi.URLParam(r, "creditGrantId"), &creditGrantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidCreditGrant(w, r, creditGrantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) GetCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditGrantId" -------------
	var creditGrantId CreditGrantId

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantId", chi.URLParam(r, "creditGrantId"), &creditGrantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditGrant(w, r, creditGrantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditLedger operation middleware
func (siw *ServerInterfaceWrapper) GetCreditLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subject" -------------
	var subject string

	err = runtime.BindStyledParameterWithOptions("simple", "subject", chi.URLParam(r, "subject"), &subject, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditLedgerParams

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditLedger(w, r, subject, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetCredit operation middleware
func (siw *ServerInterfaceWrapper) ResetCredit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetCredit(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListProducts operation middleware
func (siw *ServerInterfaceWrapper) ListProducts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProducts(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateProduct operation middleware
func (siw *ServerInterfaceWrapper) CreateProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProduct(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteProduct operation middleware
func (siw *ServerInterfaceWrapper) DeleteProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "productId" -------------
	var productId ProductId

	err = runtime.BindStyledParameterWithOptions("simple", "productId", chi.URLParam(r, "productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "productId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProduct(w, r, productId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProduct operation middleware
func (siw *ServerInterfaceWrapper) GetProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "productId" -------------
	var productId ProductId

	err = runtime.BindStyledParameterWithOptions("simple", "productId", chi.URLParam(r, "productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "productId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProduct(w, r, productId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/credit-balance/{subject}", wrapper.GetCreditBalance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/credit-grants", wrapper.ListCreditGrants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/credit-grants", wrapper.CreateCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/credit-grants/{creditGrantId}", wrapper.VoidCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/credit-grants/{creditGrantId}", wrapper.GetCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/credit-ledger/{subject}", wrapper.GetCreditLedger)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/credit-resets", wrapper.ResetCredit)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/products", wrapper.ListProducts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/products", wrapper.CreateProduct)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/products/{productId}", wrapper.DeleteProduct)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/products/{productId}", wrapper.GetProduct)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"j5Lbi9v/FwAA//+VMou/fLQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
