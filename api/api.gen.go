// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/openmeterio/openmeter/internal/credit"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// CreditBalance Credit balance of a subject.
type CreditBalance = credit.Balance

// CreditExpirationPeriod Expiration period of a credit grant.
type CreditExpirationPeriod = credit.ExpirationPeriod

// CreditGrant Grants are used to increase balance of specific subjects.
type CreditGrant = credit.Grant

// CreditGrantBalance defines model for CreditGrantBalance.
type CreditGrantBalance = credit.Grant

// CreditGrantRollover Grant rollover configuration.
type CreditGrantRollover = credit.GrantRollover

// CreditGrantRolloverType The rollover type to use:
// - `REMAINING_AMOUNT` - Rollover remaining amount.
// - `ORIGINAL_AMOUNT` - Rollover re-applies the full grant amount.
type CreditGrantRolloverType = credit.GrantRolloverType

// CreditGrantType The grant type:
// - `USAGE` - Increase balance by the amount in the unit of the associated meter.
type CreditGrantType = credit.GrantType

// CreditLedgerEntry Credit ledger entry.
type CreditLedgerEntry = credit.LedgerEntry

// CreditLedgerEntryType defines model for CreditLedgerEntryType.
type CreditLedgerEntryType = credit.LedgerEntryType

// CreditReset Credit reset configuration.
type CreditReset = credit.Reset

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// Feature A feature is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type Feature = credit.Feature

// FeatureBalance defines model for FeatureBalance.
type FeatureBalance = credit.Feature

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// CreditGrantId defines model for creditGrantId.
type CreditGrantId = string

// FeatureId defines model for featureId.
type FeatureId = string

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// QueryFilterGroupBy Simple filter for group bys with exact match.
// Usage: ?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4
type QueryFilterGroupBy map[string]string

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// GetCreditBalanceParams defines parameters for GetCreditBalance.
type GetCreditBalanceParams struct {
	// Time Point of time to query balances: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListCreditGrantsParams defines parameters for ListCreditGrants.
type ListCreditGrantsParams struct {
	// Subject Filtering and group by multiple subjects.
	// Usage: ?subject=customer-1&subject=customer-2
	Subject *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
}

// GetCreditLedgerParams defines parameters for GetCreditLedger.
type GetCreditLedgerParams struct {
	// From Start of time range to query ledger: date-time in RFC 3339 format.
	From time.Time `form:"from" json:"from"`

	// To End of time range to query ledger: date-time in RFC 3339 format. Defaults to now.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering and group by multiple subjects.
	// Usage: ?subject=customer-1&subject=customer-2
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// CreateCreditGrantJSONRequestBody defines body for CreateCreditGrant for application/json ContentType.
type CreateCreditGrantJSONRequestBody = CreditGrant

// ResetCreditJSONRequestBody defines body for ResetCredit for application/json ContentType.
type ResetCreditJSONRequestBody = CreditReset

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = Feature

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get credit balance
	// (GET /api/v1/credit-balance/{subject})
	GetCreditBalance(w http.ResponseWriter, r *http.Request, subject string, params GetCreditBalanceParams)
	// List credit grants
	// (GET /api/v1/credit-grants)
	ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams)
	// Create credit grant
	// (POST /api/v1/credit-grants)
	CreateCreditGrant(w http.ResponseWriter, r *http.Request)
	// Void credit grant
	// (DELETE /api/v1/credit-grants/{creditGrantId})
	VoidCreditGrant(w http.ResponseWriter, r *http.Request, creditGrantId CreditGrantId)
	// Get credit
	// (GET /api/v1/credit-grants/{creditGrantId})
	GetCreditGrant(w http.ResponseWriter, r *http.Request, creditGrantId CreditGrantId)
	// Get credit ledger
	// (GET /api/v1/credit-ledger/{subject})
	GetCreditLedger(w http.ResponseWriter, r *http.Request, subject string, params GetCreditLedgerParams)
	// Resets the credit balances to zero for a specific subject and re-apply active grants with rollover configuration.
	// (POST /api/v1/credit-resets)
	ResetCredit(w http.ResponseWriter, r *http.Request)
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request)
	// Create feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Delete feature
	// (DELETE /api/v1/features/{featureId})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId)
	// Get feature
	// (GET /api/v1/features/{featureId})
	GetFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get credit balance
// (GET /api/v1/credit-balance/{subject})
func (_ Unimplemented) GetCreditBalance(w http.ResponseWriter, r *http.Request, subject string, params GetCreditBalanceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List credit grants
// (GET /api/v1/credit-grants)
func (_ Unimplemented) ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create credit grant
// (POST /api/v1/credit-grants)
func (_ Unimplemented) CreateCreditGrant(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void credit grant
// (DELETE /api/v1/credit-grants/{creditGrantId})
func (_ Unimplemented) VoidCreditGrant(w http.ResponseWriter, r *http.Request, creditGrantId CreditGrantId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit
// (GET /api/v1/credit-grants/{creditGrantId})
func (_ Unimplemented) GetCreditGrant(w http.ResponseWriter, r *http.Request, creditGrantId CreditGrantId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit ledger
// (GET /api/v1/credit-ledger/{subject})
func (_ Unimplemented) GetCreditLedger(w http.ResponseWriter, r *http.Request, subject string, params GetCreditLedgerParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Resets the credit balances to zero for a specific subject and re-apply active grants with rollover configuration.
// (POST /api/v1/credit-resets)
func (_ Unimplemented) ResetCredit(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete feature
// (DELETE /api/v1/features/{featureId})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureId})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCreditBalance operation middleware
func (siw *ServerInterfaceWrapper) GetCreditBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subject" -------------
	var subject string

	err = runtime.BindStyledParameterWithOptions("simple", "subject", chi.URLParam(r, "subject"), &subject, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditBalanceParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditBalance(w, r, subject, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCreditGrants operation middleware
func (siw *ServerInterfaceWrapper) ListCreditGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCreditGrantsParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCreditGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCreditGrant(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditGrantId" -------------
	var creditGrantId CreditGrantId

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantId", chi.URLParam(r, "creditGrantId"), &creditGrantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidCreditGrant(w, r, creditGrantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) GetCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditGrantId" -------------
	var creditGrantId CreditGrantId

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantId", chi.URLParam(r, "creditGrantId"), &creditGrantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditGrant(w, r, creditGrantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditLedger operation middleware
func (siw *ServerInterfaceWrapper) GetCreditLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subject" -------------
	var subject string

	err = runtime.BindStyledParameterWithOptions("simple", "subject", chi.URLParam(r, "subject"), &subject, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditLedgerParams

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditLedger(w, r, subject, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetCredit operation middleware
func (siw *ServerInterfaceWrapper) ResetCredit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetCredit(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId FeatureId

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId FeatureId

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/credit-balance/{subject}", wrapper.GetCreditBalance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/credit-grants", wrapper.ListCreditGrants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/credit-grants", wrapper.CreateCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/credit-grants/{creditGrantId}", wrapper.VoidCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/credit-grants/{creditGrantId}", wrapper.GetCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/credit-ledger/{subject}", wrapper.GetCreditLedger)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/credit-resets", wrapper.ResetCredit)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureId}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureId}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JigAUXPz4/bi9v8FAAD//3bcftZrtQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
