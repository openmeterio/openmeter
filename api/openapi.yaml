openapi: "3.0.3"
info:
  title: OpenMeter API
  version: "1.0.0-beta.1"
  description: ""
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: Events
    description: Endpoints related to ingesting events
  - name: Meters
    description: Endpoints related to meters
paths:
  /api/v1betav1/events:
    post:
      description: Ingest events
      operationId: ingestEvents
      requestBody:
        required: true
        content:
          application/cloudevents+json:
            schema:
              $ref: "#/components/schemas/Event"
      tags:
        - Events
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1betav1/meters:
    get:
      description: List meters
      operationId: listMeters
      tags:
        - Meters
      responses:
        "200":
          description: Meters response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Meter"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    post:
      description: Create meter
      operationId: createMeter
      tags:
        - Meters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Meter"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meter"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1betav1/meters/{meterSlug}:
    get:
      description: Get meter by slug
      operationId: getMeter
      tags:
        - Meters
      parameters:
        - $ref: "#/components/parameters/meterSlug"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meter"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    delete:
      description: Delete meter by slug
      operationId: deleteMeter
      tags:
        - Meters
      parameters:
        - $ref: "#/components/parameters/meterSlug"
      responses:
        "204":
          description: No Content
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1betav1/meters/{meterSlug}/values:
    get:
      description: Get meter values
      operationId: getMeterValues
      tags:
        - Meters
      parameters:
        - $ref: "#/components/parameters/meterSlug"
        - name: subject
          in: query
          required: false
          schema:
            type: string
        - name: from
          in: query
          required: false
          description: |
            Start date-time in RFC 3339 format.
            Must be aligned with the window size.
            Inclusive.
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          required: false
          description: |
            End date-time in RFC 3339 format.
            Must be aligned with the window size.
            Inclusive.
          schema:
            type: string
            format: date-time
        - name: window_size
          in: query
          required: false
          description: |
            If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
          schema:
            $ref: "#/components/schemas/WindowSize"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  windowSize:
                    $ref: "#/components/schemas/WindowSize"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MeterValue"
                required:
                  - data
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"

components:
  schemas:
    Problem:
      type: object
      description: A Problem Details object (RFC 7807)
      x-go-type: models.Problem
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      additionalProperties: true
      properties:
        type:
          type: string
          format: uri
          description: Type contains a URI that identifies the problem type.
          example: urn:problem-type:belgif:payloadTooLarge
        title:
          type: string
          description: A a short, human-readable summary of the problem type.
          example: Payload Too Large
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          minimum: 400
          maximum: 600
          exclusiveMaximum: true
          example: 413
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: Request message must not be larger than 10 MB
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence of the problem.
          example: urn:uuid:123e4567-e89b-12d3-a456-426614174000
      required:
        - type
        - title
        - status
        - detail
      example: |
        {
          "type": "urn:problem-type:belgif:payloadTooLarge",
          "title": "Payload Too Large",
          "status": 413,
          "detail": "Request message must not be larger than 10 MB",
          "instance": "urn:uuid:123e4567-e89b-12d3-a456-426614174000",
          "limit": 10485760
        }
    Event:
      description: CloudEvents Specification JSON Schema
      x-go-type: event.Event
      x-go-type-import:
        path: github.com/cloudevents/sdk-go/v2/event
      type: object
      additionalProperties: false
      properties:
        id:
          description: Identifies the event.
          type: string
          minLength: 1
          example: 5c10fade-1c9e-4d6c-8275-c52c36731d3c
        source:
          description: Identifies the context in which an event happened.
          type: string
          format: uri-reference
          minLength: 1
          example: services/service-0
        specversion:
          description: The version of the CloudEvents specification which the event uses.
          type: string
          minLength: 1
          example: "1.0"
        type:
          description: Describes the type of event related to the originating occurrence.
          type: string
          minLength: 1
          example: api_request
        datacontenttype:
          description: Content type of the data value. Must adhere to RFC 2046 format.
          type: string
          enum:
            - application/json
          nullable: true
          minLength: 1
          example: application/json
        dataschema:
          description: Identifies the schema that data adheres to.
          type: string
          nullable: true
          format: uri
          minLength: 1
        subject:
          description: Describes the subject of the event in the context of the event producer (identified by source).
          type: string
          nullable: false
          minLength: 1
          example: customer_id
        time:
          description: Timestamp of when the occurrence happened. Must adhere to RFC 3339.
          type: string
          nullable: true
          format: date-time
          minLength: 1
          example: "2023-01-01T01:01:01.001Z"
        data:
          description: The event payload.
          type: object
          additionalProperties: true
          example: |
            {
              "duration_ms": "12",
              "path": "/hello"
            }
      required:
        - id
        - source
        - specversion
        - type
        - subject
    Meter:
      type: object
      x-go-type: models.Meter
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      properties:
        slug:
          type: string
          description: A unique identifier for the meter.
          pattern: "^[a-z0-9]+(?:_[a-z0-9]+)*$"
          example: my-meter
        description:
          type: string
          description: A description of the meter.
          nullable: true
          example: My Meter Description
        aggregation:
          $ref: "#/components/schemas/MeterAggregation"
        eventType:
          type: string
          description: The event type to aggregate.
          example: api_request
        valueProperty:
          type: string
          description: JSONPath expression to extract the value from the event data.
          example: $.duration_ms
        groupBy:
          type: array
          items:
            type: string
          description: JSONPath expressions to extract the group by values from the event data.
          example: |
            [
              "$.my_label"
            ]
        windowSize:
          $ref: "#/components/schemas/WindowSize"
      required:
        - slug
        - name
        - aggregation
        - eventType
        - valueProperty
        - windowSize
    MeterAggregation:
      type: string
      x-go-type: models.MeterAggregation
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      enum:
        - SUM
        - COUNT
        - MIN
        - MAX
        - COUNT_DISTINCT
        - LATEST_BY_OFFSET
      description: The aggregation type to use for the meter.
    WindowSize:
      type: string
      x-go-type: models.WindowSize
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      enum:
        - MINUTE
        - HOUR
        - DAY
    MeterValue:
      type: object
      x-go-type: models.MeterValue
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      properties:
        subject:
          type: string
          description: The subject of the meter value.
        windowStart:
          type: string
          format: date-time
        windowEnd:
          type: string
          format: date-time
        value:
          type: number
        groupBy:
          type: object
          additionalProperties:
            type: string

  parameters:
    meterSlug:
      name: meterSlug
      description: A unique identifier for the meter.
      in: path
      required: true
      schema:
        type: string
        pattern: "^[a-z0-9]+(?:_[a-z0-9]+)*$"

  responses:
    BadRequestProblemResponse:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
    MethodNotAllowedProblemResponse:
      description: Method not allowed, feature not supported
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
    NotFoundProblemResponse:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
    UnexpectedProblemResponse:
      description: Unexpected error
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
