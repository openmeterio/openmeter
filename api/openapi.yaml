openapi: "3.0.3"
info:
  title: OpenMeter API
  version: "1.0.0"
  description: |
    OpenMeter is a cloud native usage metering service.
    The OpenMeter API allows you to ingest events, query meter usage, and manage resources.
    ---
    *Operations with the ☁ (cloud) notation are only available in OpenMeter Cloud.*
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
externalDocs:
  description: Documentation
  url: https://openmeter.io/docs
servers:
  - url: http://127.0.0.1:8888
    description: local
  - url: https://openmeter.cloud
    description: cloud
tags:
  - name: Events
    description: |
      Endpoints related to ingesting and debugging usage events.
      [Learn more](https://openmeter.io/docs/getting-started/usage/overview)
  - name: Meters
    description: |
      Endpoints related to creating, and querying meters.
      [Learn more](https://openmeter.io/docs/getting-started/meters/overview)
  - name: Portal
    description: |
      Endpoints related to the consumer portal.
      [Learn more](https://openmeter.io/docs/monetize/dashboard/portal-developer-guide)
  - name: Subjects
    description: |
      Endpoints related to subjects.
      [Learn more](https://openmeter.io/docs/getting-started/subjects)
  - name: Credits (Experimental)
    description: |
      Endpoints related to credits.
      [Learn more](https://openmeter.io/docs/getting-started/credits)
paths:
  /api/v1/events:
    get:
      summary: List ingested events
      description: |
        List ingested events within a time range.
      operationId: listEvents
      parameters:
        - $ref: "#/components/parameters/queryFrom"
        - $ref: "#/components/parameters/queryTo"
        - name: limit
          in: query
          required: false
          description: Number of events to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
            example: 100
      tags:
        - Events
      responses:
        "200":
          description: List of events for debugging.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IngestedEvent"
                example:
                  - event:
                      id: 5c10fade-1c9e-4d6c-8275-c52c36731d3c
                      source: service-name
                      specversion: "1.0"
                      type: prompt
                      subject: customer-id
                      time: "2023-01-01T01:01:01.001Z"
                      data:
                        tokens: "1234"
                        model: "gpt-4-turbo"
                        type: "input"
                  - event:
                      id: 912d1d87-09ad-4bcc-a57d-5b3552493ed2
                      source: service-name
                      specversion: "1.0"
                      type: prompt
                      subject: customer-id
                      time: "2023-01-01T01:01:02.001Z"
                      data:
                        tokens: "2345"
                        model: "gpt-4-turbo"
                        type: "output"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    post:
      operationId: ingestEvents
      summary: Ingest events
      description: |
        Ingests an event or batch of events following the CloudEvents specification.
      requestBody:
        description: |
          The event or batch of events to ingest.
          The request body must be a CloudEvents JSON object or an array of CloudEvents JSON objects.
          The CloudEvents JSON object must adhere to the CloudEvents Specification JSON Schema.
        required: true
        content:
          application/cloudevents+json:
            schema:
              $ref: "#/components/schemas/Event"
          application/cloudevents-batch+json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Event"
              example:
                - id: 5c10fade-1c9e-4d6c-8275-c52c36731d3c
                  source: service-name
                  specversion: "1.0"
                  type: prompt
                  subject: customer-id
                  time: "2023-01-01T01:01:01.001Z"
                  data:
                    tokens: "1234"
                    model: "gpt-4-turbo"
                    type: "input"
                - id: 912d1d87-09ad-4bcc-a57d-5b3552493ed2
                  source: service-name
                  specversion: "1.0"
                  type: prompt
                  subject: customer-id
                  time: "2023-01-01T01:01:02.001Z"
                  data:
                    tokens: "2345"
                    model: "gpt-4-turbo"
                    type: "output"

      tags:
        - Events
      responses:
        "204":
          description: Successfully ingested.
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"

  /api/v1/meters:
    get:
      operationId: listMeters
      summary: List meters
      description: List meters.
      tags:
        - Meters
      responses:
        "200":
          description: List of meters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Meter"
                example:
                  - id: 01G65Z755AFWAKHE12NY0CQ9FH
                    slug: tokens_total
                    description: AI token usage
                    aggregation: SUM
                    windowSize: MINUTE
                    eventType: prompt
                    valueProperty: $.tokens
                    groupBy:
                      model: $.model
                      type: $.type
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    post:
      operationId: createMeter
      summary: ☁ Create meter
      description: |
        *Available in OpenMeter Cloud.*
        *In the open-source version, meters are created in the configuration file.*

        Create a meter.
      tags:
        - Meters
      requestBody:
        description: The meter to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Meter"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meter"
              example:
                id: 01G65Z755AFWAKHE12NY0CQ9FH
                slug: tokens_total
                description: AI token usage
                aggregation: SUM
                windowSize: MINUTE
                eventType: prompt
                valueProperty: $.tokens
                groupBy:
                  model: $.model
                  type: $.type
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/meters/{meterIdOrSlug}:
    get:
      operationId: getMeter
      summary: Get meter
      description: Get meter by ID or slug
      parameters:
        - $ref: "#/components/parameters/meterIdOrSlug"
      tags:
        - Meters
      responses:
        "200":
          description: Meter found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meter"
              example:
                id: 01G65Z755AFWAKHE12NY0CQ9FH
                slug: tokens_total
                description: AI token usage
                aggregation: SUM
                windowSize: MINUTE
                eventType: prompt
                valueProperty: $.tokens
                groupBy:
                  model: $.model
                  type: $.type
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    delete:
      operationId: deleteMeter
      summary: ☁ Delete meter
      description: |
        *Available in OpenMeter Cloud.*

        Delete a meter by ID or slug.
      parameters:
        - $ref: "#/components/parameters/meterIdOrSlug"
      tags:
        - Meters
      responses:
        "204":
          description: Meter deleted.
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/meters/{meterIdOrSlug}/query:
    get:
      operationId: queryMeter
      summary: Query meter
      description: Query meter for usage.
      tags:
        - Meters
      parameters:
        - $ref: "#/components/parameters/meterIdOrSlug"
        - $ref: "#/components/parameters/queryFrom"
        - $ref: "#/components/parameters/queryTo"
        - $ref: "#/components/parameters/queryWindowSize"
        - $ref: "#/components/parameters/queryWindowTimeZone"
        - $ref: "#/components/parameters/queryFilterSubject"
        - $ref: "#/components/parameters/queryFilterGroupBy"
        - $ref: "#/components/parameters/queryGroupBy"
      responses:
        "200":
          description: Usage data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeterQueryResult"
              example:
                from: "2023-01-01T00:00:00Z"
                to: "2023-01-02T00:00:00Z"
                windowSize: MINUTE
                data:
                  - value: 12
                    windowStart: "2023-01-01T00:00:00Z"
                    windowEnd: "2023-01-02T00:00:00Z"
                    subject: customer-id
                    groupBy:
                      model: gpt-4-turbo
                      type: prompt
            text/csv:
              schema:
                type: string
                example: |-
                  window_start,window_end,subject,model,type,value
                  2023-01-01T00:00:00Z,2023-01-01T00:01:00Z,customer_1,gpt-4-turbo,input,12
                  2023-01-01T00:01:00Z,2023-01-02T00:02:00Z,customer_1,gpt-4-turbo,input,20
                  2023-01-01T00:02:00Z,2023-01-02T00:03:00Z,customer_2,gpt-4-turbo,output,4

        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/meters/{meterIdOrSlug}/subjects:
    get:
      operationId: listMeterSubjects
      summary: List meter subjects
      description: List subjects for a meter.
      tags:
        - Meters
      parameters:
        - $ref: "#/components/parameters/meterIdOrSlug"
      responses:
        "200":
          description: List of subjects.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - customer-id
                  - customer_2
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Portal
  /api/v1/portal/tokens:
    post:
      operationId: createPortalToken
      summary: Create portal token
      description: Create a consumer portal token.
      tags:
        - Portal
      requestBody:
        description: The portal token to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PortalToken"
            example:
              subject: customer-id
              allowedMeterSlugs:
                - tokens_total
      responses:
        "200":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortalToken"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    get:
      operationId: listPortalTokens
      summary: ☁ List portal tokens
      description: |
        *Available in OpenMeter Cloud.*

        List consumer portal tokens.
      tags:
        - Portal
      parameters:
        - name: limit
          in: query
          required: false
          description: Number of portal tokens to return. Default is 25.
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
            example: 25
      responses:
        "200":
          description: List of portal tokens.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PortalToken"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/portal/tokens/invalidate:
    post:
      operationId: invalidatePortalTokens
      summary: ☁ Invalidate portal tokens
      description: |
        *Available in OpenMeter Cloud.*

        Invalidates consumer portal tokens by ID or subject.
      tags:
        - Portal
      requestBody:
        description: If no id or subject is specified, all tokens will be invalidated.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Invalidate a portal token by ID.
                subject:
                  type: string
                  description: Invalidate all portal tokens for a subject.
            examples:
              "Invalidate by ID":
                description: Invalidate a portal token by ID.
                value:
                  id: "01G65Z755AFWAKHE12NY0CQ9FH"
              "Invalidate by subject":
                description: Invalidate all portal tokens for a subject.
                value:
                  subject: "customer-id"
              "Invalidate all":
                description: Invalidate all portal tokens.
                value: {}
      responses:
        "204":
          description: Portal tokens invalidated.
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Subject
  /api/v1/subjects:
    get:
      operationId: listSubjects
      summary: ☁ List subjects
      description: |
        *Available in OpenMeter Cloud.*

        List subjects.
      tags:
        - Subjects
      responses:
        "200":
          description: List of subjects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Subject"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    post:
      operationId: upsertSubject
      summary: ☁ Upsert subject
      description: |
        *Available in OpenMeter Cloud.*

        Upserts a subject. Creates or updates subject.
        If the subject doesn't exist, it will be created.
        If the subject exists, it will be partially updated with the provided fields.
      tags:
        - Subjects
      requestBody:
        description: The subject to upsert.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Subject"
      responses:
        "200":
          description: Subject upserted.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Subject"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/subjects/{subjectIdOrKey}:
    get:
      operationId: getSubject
      summary: ☁ Get subject
      description: |
        *Available in OpenMeter Cloud.*

        Get subject by ID or key.
      tags:
        - Subjects
      parameters:
        - $ref: "#/components/parameters/subjectIdOrKey"
      responses:
        "200":
          description: Subject found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subject"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    delete:
      operationId: deleteSubject
      summary: ☁ Delete subject
      description: |
        *Available in OpenMeter Cloud.*

        Delete a subject by ID or key.
      tags:
        - Subjects
      parameters:
        - $ref: "#/components/parameters/subjectIdOrKey"
      responses:
        "204":
          description: Subject deleted.
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Portal
  /api/v1/portal/meters/{meterSlug}/query:
    get:
      operationId: queryPortalMeter
      summary: Query portal meter
      description: Query meter for consumer portal. This endpoint is publicly exposable to consumers.
      tags:
        - Portal
      security:
        - PortalTokenAuth: []
        - CloudPortalTokenAuth: []
      parameters:
        - name: meterSlug
          description: A unique identifier for the meter.
          in: path
          required: true
          schema:
            type: string
            example: "tokens_total"
        - $ref: "#/components/parameters/queryFrom"
        - $ref: "#/components/parameters/queryTo"
        - $ref: "#/components/parameters/queryWindowSize"
        - $ref: "#/components/parameters/queryWindowTimeZone"
        - $ref: "#/components/parameters/queryFilterGroupBy"
        - $ref: "#/components/parameters/queryGroupBy"
      responses:
        "200":
          description: Usage data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeterQueryResult"
            text/csv:
              schema:
                type: string
                example: |-
                  window_start,window_end,subject,model,type,value
                  2023-01-01T00:00:00Z,2023-01-01T00:01:00Z,customer_1,gpt-4-turbo,input,12
                  2023-01-01T00:01:00Z,2023-01-02T00:02:00Z,customer_1,gpt-4-turbo,input,20
                  2023-01-01T00:02:00Z,2023-01-02T00:03:00Z,customer_2,gpt-4-turbo,output,4
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Feature
  /api/v1/features:
    get:
      operationId: listFeatures
      summary: List features
      description: |
        List features.
      tags:
        - Credits (Experimental)
      responses:
        "200":
          description: List of features.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Feature"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    post:
      operationId: createFeature
      summary: Create feature
      description: |
        Creates a feature.
      tags:
        - Credits (Experimental)
      requestBody:
        description: The feature to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Feature"
      responses:
        "201":
          description: Feature created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/features/{featureId}:
    get:
      operationId: getFeature
      summary: Get feature
      description: |
        Get feature by key.
      tags:
        - Credits (Experimental)
      parameters:
        - $ref: "#/components/parameters/featureId"
      responses:
        "200":
          description: Feature found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    delete:
      operationId: deleteFeature
      summary: Delete feature
      description: |
        Delete a feature by key.
      tags:
        - Credits (Experimental)
      parameters:
        - $ref: "#/components/parameters/featureId"
      responses:
        "204":
          description: Feature deleted.
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Credit Balances
  /api/v1/credit-balance/{subject}:
    get:
      operationId: getCreditBalance
      summary: Get credit balance
      description: |
        Get credit balance for a specific subject.
      tags:
        - Credits (Experimental)
      parameters:
        - name: subject
          in: path
          required: true
          description: Subject to query balances for.
          schema:
            type: string
            example: "customer-id"
        - name: time
          in: query
          required: false
          description: |
            Point of time to query balances: date-time in RFC 3339 format. Defaults to now.
          schema:
            type: string
            format: date-time
            example: "2023-01-01T00:00:00Z"
      responses:
        "200":
          description: Credit balances found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditBalance"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Credit Ledger
  /api/v1/credit-ledger/{subject}:
    get:
      operationId: getCreditLedger
      summary: Get credit ledger
      description: |
        Get credit ledger for a specific subject.
      tags:
        - Credits (Experimental)
      parameters:
        - name: subject
          in: path
          required: true
          description: Subject to query ledger for.
          schema:
            type: string
            example: "customer-id"
        - name: from
          in: query
          required: true
          description: |
            Start of time range to query ledger: date-time in RFC 3339 format.
          schema:
            type: string
            format: date-time
            example: "2023-01-01T00:00:00Z"
        - name: to
          in: query
          required: false
          description: |
            End of time range to query ledger: date-time in RFC 3339 format. Defaults to now.
          schema:
            type: string
            format: date-time
            example: "2023-01-01T00:00:00Z"
      responses:
        "200":
          description: Credit balances found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CreditLedgerEntry"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Credit Reset
  /api/v1/credit-resets:
    post:
      operationId: resetCredit
      summary: Resets the credit balances to zero for a specific subject and re-apply active grants with rollover configuration.
      description: |
        Reset credit balance for the given subject.
      tags:
        - Credits (Experimental)
      requestBody:
        description: The subject to reset balance for.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreditReset"
      responses:
        "201":
          description: Credit balance.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditReset"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Credit Grants
  /api/v1/credit-grants:
    get:
      operationId: listCreditGrants
      summary: List credit grants
      description: |
        List credit grants.
      tags:
        - Credits (Experimental)
      parameters:
        - $ref: "#/components/parameters/queryFilterSubject"
      responses:
        "200":
          description: List of credit grants.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CreditGrant"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    post:
      operationId: createCreditGrant
      summary: Create credit grant
      description: |
        Creates a credit grant.
      tags:
        - Credits (Experimental)
      requestBody:
        description: The credit grant to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreditGrant"
      responses:
        "201":
          description: CreditGrant created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditGrant"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Credit Grants
  /api/v1/credit-grants/{creditGrantId}:
    get:
      operationId: getCreditGrant
      summary: Get credit
      description: |
        Get credit by key.
      tags:
        - Credits (Experimental)
      parameters:
        - $ref: "#/components/parameters/creditGrantId"
      responses:
        "200":
          description: Credit found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditGrant"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    delete:
      operationId: voidCreditGrant
      summary: Void credit grant
      description: |
        Void a credit grant by ID. Partially or fully used credits cannot be voided.
        Voided credits won't be applied to the subject's balance anymore.
      tags:
        - Credits (Experimental)
      parameters:
        - $ref: "#/components/parameters/creditGrantId"
      responses:
        "204":
          description: Credit grant voided.
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"

components:
  schemas:
    Problem:
      type: object
      description: |-
        A Problem Details object (RFC 7807).
        Additional properties specific to the problem type may be present.
      x-go-type: models.StatusProblem
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      properties:
        type:
          type: string
          format: uri
          description: Type contains a URI that identifies the problem type.
          example: "urn:problem-type:bad-request"
        title:
          type: string
          description: A a short, human-readable summary of the problem type.
          example: Bad Request
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          minimum: 400
          maximum: 599
          example: 400
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: "body must be a JSON object"
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence of the problem.
          example: "urn:request:local/JMOlctsKV8-000001"
      additionalProperties: true
      required:
        - type
        - title
        - status
        - detail
      example:
        type: "urn:problem-type:bad-request"
        title: "Bad Request"
        status: 400
        detail: "body must be a JSON object"
    Event:
      description: CloudEvents Specification JSON Schema
      x-go-type: event.Event
      x-go-type-import:
        path: github.com/cloudevents/sdk-go/v2/event
      type: object
      additionalProperties: false
      properties:
        id:
          description: Identifies the event.
          type: string
          minLength: 1
          example: 5c10fade-1c9e-4d6c-8275-c52c36731d3c
        source:
          description: Identifies the context in which an event happened.
          type: string
          format: uri-reference
          minLength: 1
          example: service-name
        specversion:
          description: The version of the CloudEvents specification which the event uses.
          type: string
          minLength: 1
          example: "1.0"
        type:
          description: Describes the type of event related to the originating occurrence.
          type: string
          example: prompt
        datacontenttype:
          description: Content type of the data value. Must adhere to RFC 2046 format.
          type: string
          enum:
            - application/json
          nullable: true
          minLength: 1
          example: application/json
        dataschema:
          description: Identifies the schema that data adheres to.
          type: string
          nullable: true
          format: uri
          minLength: 1
        subject:
          description: Describes the subject of the event in the context of the event producer (identified by source).
          type: string
          nullable: false
          minLength: 1
          example: "customer-id"
        time:
          description: Timestamp of when the occurrence happened. Must adhere to RFC 3339.
          type: string
          nullable: true
          format: date-time
          minLength: 1
          example: "2023-01-01T01:01:01.001Z"
        data:
          description: The event payload.
          type: object
          additionalProperties: true
          example:
            tokens: "1234"
            model: "gpt-4-turbo"
      required:
        - id
        - source
        - specversion
        - type
        - subject
      example:
        id: 5c10fade-1c9e-4d6c-8275-c52c36731d3c
        source: service-name
        specversion: "1.0"
        type: prompt
        subject: customer-id
        time: "2023-01-01T01:01:01.001Z"
        data:
          tokens: "1234"
          model: "gpt-4-turbo"
          type: "input"
    IngestedEvent:
      description: An ingested event with optional validation error.
      type: object
      additionalProperties: false
      required:
        - event
      properties:
        event:
          $ref: "#/components/schemas/Event"
        validationError:
          type: string
          readOnly: true
          example: "invalid event"
      example:
        event:
          id: 5c10fade-1c9e-4d6c-8275-c52c36731d3d
          source: service-name
          specversion: "1.0"
          type: prompt
          subject: customer-id
          time: "2023-01-01T01:01:01.001Z"
          data:
            tokens: "1234"
            model: "gpt-4-turbo"
        validationError: "meter not found for event"
    Feature:
      x-go-type-import:
        path: github.com/openmeterio/openmeter/internal/credit
      x-go-type: credit.Feature
      type: object
      description: |
        A feature is a feature or service offered to a customer.
        For example: CPU-Hours, Tokens, API Calls, etc.
      required:
        - name
        - meterSlug
      additionalProperties: false
      properties:
        id:
          readOnly: true
          description: |
            Readonly unique ULID identifier of the feature.
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        name:
          description: |
            The name of the feature.
          type: string
          example: AI Tokens
        meterSlug:
          description: |
              The meter that the feature is associated with and decreases grants by usage.
          type: string
          example: tokens_total
        meterGroupByFilters:
          description: |
            Optional meter group by filters. Useful if the meter scope is broader than what feature tracks.
          type: object
          additionalProperties:
            type: string
          example:
            model: gpt-4
        archived:
          readOnly: true
          description: |
            If the feature is archived, it will not be used for grants or usage.
          type: boolean
          example: false
    CreditLedgerEntry:
      x-go-type-import:
        path: github.com/openmeterio/openmeter/internal/credit
      x-go-type: credit.LedgerEntry
      type: object
      description: |
        Credit ledger entry.
      required:
        - id
        - type
        - time
      properties:
        id:
          description: |
            Readonly unique ULID identifier of the ledger entry.
          readOnly: true
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        type:
          $ref: "#/components/schemas/CreditLedgerEntryType"
        time:
          description: |
            The time the ledger entry was created.
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        amount:
          description: |
            The amount to apply. Can be positive or negative number. If applicable.
          type: number
          example: 100
        from:
          description: |
            Period start time where the amount was applied. If applicable.
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        to:
          description: |
            Period end time where the amount was applied. If applicable.
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
    CreditLedgerEntryType:
      x-go-type-import:
        path: github.com/openmeterio/openmeter/internal/credit
      x-go-type: credit.LedgerEntryType
      type: string
      enum:
        - GRANT
        - VOID
        - RESET
        - GRANT_USAGE
      example: GRANT
    CreditBalance:
      x-go-type-import:
        path: github.com/openmeterio/openmeter/internal/credit
      x-go-type: credit.Balance
      type: object
      description: |
        Credit balance of a subject.
      required:
        - subject
        - amount
        - grants
      properties:
        subject:
          description: |
            The subject to get the balance for.
          type: string
          example: customer-id
        features:
          description: |
            Features with balances.
          type: array
          items:
            $ref: "#/components/schemas/FeatureBalance"
        grants:
          description: |
            The grants applied to the subject.
          type: array
          items:
            $ref: "#/components/schemas/CreditGrantBalance"
    CreditReset:
      x-go-type-import:
        path: github.com/openmeterio/openmeter/internal/credit
      x-go-type: credit.Reset
      type: object
      description: |
        Credit reset configuration.
      required:
        - id
        - subject
        - effectiveAt
      properties:
        id:
          description: |
            Readonly unique ULID identifier of the reset.
          readOnly: true
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        subject:
          description: |
            The subject to reset the credit for.
          type: string
          example: customer-id
        effectiveAt:
          description: |
            The time to reset the credit. It cannot be in the future.
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
    CreditGrantBalance:
      x-go-type-import:
        path: github.com/openmeterio/openmeter/internal/credit
      x-go-type: credit.GrantBalance
      allOf:
        - $ref: "#/components/schemas/CreditGrant"
        - type: object
          properties:
            balance:
              description: |
                The balance of the grant.
              type: number
              example: 100
    FeatureBalance:
      x-go-type-import:
        path: github.com/openmeterio/openmeter/internal/credit
      x-go-type: credit.FeatureBalance
      allOf:
        - $ref: "#/components/schemas/Feature"
        - type: object
          properties:
            balance:
              description: |
                The balance of the feature.
              type: number
              example: 100
    CreditGrant:
      x-go-type-import:
        path: github.com/openmeterio/openmeter/internal/credit
      x-go-type: credit.Grant
      type: object
      description: |
        Grants are used to increase balance of specific subjects.
      required:
        - id
        - subject
        - type
        - amount
        - featureId
        - effectiveAt
        - expiration
      properties:
        id:
          description: |
            Readonly unique ULID identifier of the grant.
          readOnly: true
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        subject:
          description: |
            The subject to grant the amount to.
          type: string
          example: customer-id
        type:
          $ref: "#/components/schemas/CreditGrantType"
        amount:
          description: |
            The amount to grant. Can be positive or negative number.
          type: number
          example: 100
        featureId:
          description: |
            The unique feature ULID that the grant is associated with, if any.
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        priority:
          description: |
            The priority of the grant. Grants with higher priority are applied first.
            Priority is a positive decimal numbers. With lower numbers indicating higher importance.
            For example, a priority of 1 is more urgent than a priority of 2.
            When there are several grants available for the same subject, the system selects the grant with the highest priority.
            In cases where credit grants share the same priority level, the grant closest to its expiration will be used first.
            In the case of two credits have identical priorities and expiration dates, the system will use the grant that was created first.
          type: integer
          minimum: 1
          maximum: 255
          default: 1
          example: 1
        effectiveAt:
          description: |
            The effective date.
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        expiresAt:
          readOnly: false
          description: |
            The expiration date of the grant.
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        expiration:
          writeOnly: true
          allOf:
            - $ref: "#/components/schemas/CreditExpirationPeriod"
        rollover:
          $ref: "#/components/schemas/CreditGrantRollover"
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            stripePaymentId: "pi_4OrAkhLvyihio9p51h9iiFnB"
    CreditGrantType:
      x-go-type-import:
        path: github.com/openmeterio/openmeter/internal/credit
      x-go-type: credit.GrantType
      description: |
        The grant type:
        - `USAGE` - Increase balance by the amount in the unit of the associated meter.
      type: string
      enum:
        - USAGE
      example: USAGE
    CreditGrantRollover:
      x-go-type-import:
        path: github.com/openmeterio/openmeter/internal/credit
      x-go-type: credit.GrantRollover
      type: object
      description: |
        Grant rollover configuration.
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/CreditGrantRolloverType"
        maxAmount:
          description: |
            Maximum amount to rollover.
          type: number
    CreditGrantRolloverType:
      x-go-type-import:
        path: github.com/openmeterio/openmeter/internal/credit
      x-go-type: credit.GrantRolloverType
      description: |
        The rollover type to use:
        - `REMAINING_AMOUNT` - Rollover remaining amount.
        - `ORIGINAL_AMOUNT` - Rollover re-applies the full grant amount.
      type: string
      enum:
        - REMAINING_AMOUNT
        - ORIGINAL_AMOUNT
      example: ORIGINAL_AMOUNT
    CreditExpirationPeriod:
      x-go-type-import:
        path: github.com/openmeterio/openmeter/internal/credit
      x-go-type: credit.ExpirationPeriod
      type: object
      description: |
        Expiration period of a credit grant.
      required:
        - duration
        - count
      properties:
        duration:
          x-go-type-import:
            path: github.com/openmeterio/openmeter/internal/credit
          x-go-type: credit.ExpirationPeriodDuration
          description: |
            The expiration period duration like month.
          type: string
          enum:
            - HOUR
            - DAY
            - WEEK
            - MONTH
            - YEAR
        count:
          description: |
            The expiration period count like 12 months.
          type: integer
          example: 12
    Meter:
      type: object
      description: A meter is a configuration that defines how to match and aggregate events.
      x-go-type: models.Meter
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      properties:
        id:
          type: string
          description: A unique identifier for the meter.
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          readOnly: true
        slug:
          type: string
          description: A unique, human-readable identifier for the meter. Must consist only alphanumeric and underscore characters.
          pattern: "^[a-z0-9]+(?:_[a-z0-9]+)*$"
          minLength: 1
          maxLength: 63
          example: tokens_total
        description:
          type: string
          description: A description of the meter.
          nullable: true
          example: AI Token Usage
        aggregation:
          $ref: "#/components/schemas/MeterAggregation"
        windowSize:
          $ref: "#/components/schemas/WindowSize"
        eventType:
          type: string
          description: The event type to aggregate.
          example: prompt
        valueProperty:
          type: string
          description: |
            JSONPath expression to extract the value from the ingested event's data property.
            The ingested value for SUM, AVG, MIN, and MAX aggregations is a number or a string that can be parsed to a number.
            For UNIQUE_COUNT aggregation, the ingested value must be a string. For COUNT aggregation the valueProperty is ignored.
          example: $.tokens
        groupBy:
          type: object
          description: Named JSONPath expressions to extract the group by values from the event data. Keys must be unique and consist only alphanumeric and underscore characters.
          # Only works with OpenAPI 3.1.0
          # propertyNames:
          #   pattern: "^[a-z0-9]+(?:_[a-z0-9]+)*$"
          additionalProperties:
            type: string
            example: $.model
          example:
            model: $.model
            type: $.type
      required:
        - slug
        - aggregation
        - eventType
        - windowSize
      example:
        slug: tokens_total
        description: AI token usage
        aggregation: SUM
        windowSize: MINUTE
        eventType: prompt
        valueProperty: $.tokens
        groupBy:
          model: $.model
          type: $.type
    MeterAggregation:
      type: string
      description: The aggregation type to use for the meter.
      x-go-type: models.MeterAggregation
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      enum:
        - SUM
        - COUNT
        - UNIQUE_COUNT
        - AVG
        - MIN
        - MAX
      example: SUM
    WindowSize:
      type: string
      description: Aggregation window size.
      x-go-type: models.WindowSize
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      enum:
        - MINUTE
        - HOUR
        - DAY
      example: MINUTE
    MeterQueryResult:
      type: object
      description: The result of a meter query.
      required:
        - data
      properties:
        from:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        to:
          type: string
          format: date-time
          example: "2023-01-02T00:00:00Z"
        windowSize:
          $ref: "#/components/schemas/WindowSize"
        data:
          type: array
          items:
            $ref: "#/components/schemas/MeterQueryRow"
          example:
            - value: 12
              windowStart: "2023-01-01T00:00:00Z"
              windowEnd: "2023-01-02T00:00:00Z"
              subject: customer-id
              groupBy:
                model: gpt-4-turbo
                type: prompt
      example:
        from: "2023-01-01T00:00:00Z"
        to: "2023-01-02T00:00:00Z"
        windowSize: MINUTE
        data:
          - value: 12
            windowStart: "2023-01-01T00:00:00Z"
            windowEnd: "2023-01-02T00:00:00Z"
            subject: customer-id
            groupBy:
              model: gpt-4-turbo
              type: prompt
    MeterQueryRow:
      type: object
      description: A row in the result of a meter query.
      x-go-type: models.MeterQueryRow
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      required:
        - value
        - windowStart
        - windowEnd
      properties:
        value:
          type: number
          example: 12
        windowStart:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        windowEnd:
          type: string
          format: date-time
          example: "2023-01-02T00:00:00Z"
        subject:
          type: string
          nullable: true
          description: The subject of the meter value.
          example: customer-id
        groupBy:
          type: object
          nullable: true
          additionalProperties:
            type: string
          example:
            model: gpt-4-turbo
            type: prompt
      example:
        value: 12
        windowStart: "2023-01-01T00:00:00Z"
        windowEnd: "2023-01-02T00:00:00Z"
        subject: customer-id
        groupBy:
          model: gpt-4-turbo
          type: prompt
    PortalToken:
      type: object
      description: A consumer portal token.
      required:
        # Validator doesn't obey required for readOnly properties
        # See: https://github.com/stoplightio/spectral/issues/1274
        # - id
        - subject
        # - expiresAt
        # - expired
        # - createdAt
        # - token
      properties:
        id:
          type: string
          readOnly: true
          example: "01G65Z755AFWAKHE12NY0CQ9FH"
        subject:
          type: string
          example: customer-id
        expiresAt:
          type: string
          format: date-time
          readOnly: true
          example: "2023-01-02T00:00:00Z"
        expired:
          type: boolean
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
          example: "2023-01-01T00:00:00Z"
        token:
          description: The token is only returned at creation.
          type: string
          readOnly: true
          example: "om_portal_IAnD3PpWW2A2Wr8m9jfzeHlGX8xmCXwG.y5q4S-AWqFu6qjfaFz0zQq4Ez28RsnyVwJffX5qxMvo"
        allowedMeterSlugs:
          description: Optional, if defined only the specified meters will be allowed
          type: array
          minItems: 1
          uniqueItems: true
          items:
            type: string
          example:
            - tokens_total
      example:
        id: "01G65Z755AFWAKHE12NY0CQ9FH"
        subject: customer-id
        expiresAt: "2023-01-02T00:00:00Z"
        expired: false
        createdAt: "2023-01-01T00:00:00Z"
        token: "om_portal_IAnD3PpWW2A2Wr8m9jfzeHlGX8xmCXwG.y5q4S-AWqFu6qjfaFz0zQq4Ez28RsnyVwJffX5qxMvo"
        allowedMeterSlugs:
          - tokens_total
    Subject:
      type: object
      description: A subject is a unique identifier for a user or entity.
      required:
        # Validator doesn't obey required for readOnly properties
        # See: https://github.com/stoplightio/spectral/issues/1274
        # - id
        - key
      additionalProperties: false
      properties:
        id:
          type: string
          readOnly: true
          example: "01G65Z755AFWAKHE12NY0CQ9FH"
        key:
          type: string
          example: customer-id
        displayName:
          type: string
          nullable: true
          example: "Customer Name"
        metadata:
          type: object
          additionalProperties: true
          nullable: true
          example:
            hubspotId: "123456"
        currentPeriodStart:
          type: string
          format: date-time
          nullable: true
          example: "2023-01-01T00:00:00Z"
        currentPeriodEnd:
          type: string
          format: date-time
          nullable: true
          example: "2023-02-01T00:00:00Z"
        stripeCustomerId:
          type: string
          nullable: true
          example: "cus_JMOlctsKV8"
      example:
        id: "01G65Z755AFWAKHE12NY0CQ9FH"
        key: customer-id
        displayName: "Customer Name"
        metadata:
          hubspotId: "123456"
        currentPeriodStart: "2023-01-01T00:00:00Z"
        currentPeriodEnd: "2023-02-01T00:00:00Z"
        stripeCustomerId: "cus_JMOlctsKV8"
    IdOrSlug:
      type: string
      description: A unique identifier.
      oneOf:
        # id
        - type: string
          pattern: "^[0-9ABCDEFGHJKMNPQRSTVWXYZ]{26}$"
          description: "ULID (Universally Unique Lexicographically Sortable Identifier)"
          example: "01G65Z755AFWAKHE12NY0CQ9FH"
        # slug
        - type: string
          pattern: "^[a-z0-9]+(?:_[a-z0-9]+)*$"
          minLength: 1
          maxLength: 63
          example: "tokens_total"
      example: "tokens_total"

  parameters:
    meterIdOrSlug:
      name: meterIdOrSlug
      description: A unique identifier for the meter.
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/IdOrSlug"
    subjectIdOrKey:
      name: subjectIdOrKey
      description: A unique identifier for a subject.
      in: path
      required: true
      schema:
        type: string
        example: "customer-id"
    featureId:
      name: featureId
      description: A unique ULID identifier for a feature.
      in: path
      required: true
      schema:
        type: string
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
    creditGrantId:
      name: creditGrantId
      description: A unique identifier for a credit grant.
      in: path
      required: true
      schema:
        type: string
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
    queryFrom:
      name: from
      in: query
      required: false
      description: |
        Start date-time in RFC 3339 format.
        Inclusive.
      schema:
        type: string
        format: date-time
        example: "2023-01-01T00:00:00Z"
    queryTo:
      name: to
      in: query
      required: false
      description: |
        End date-time in RFC 3339 format.
        Inclusive.
      schema:
        type: string
        format: date-time
        example: "2023-01-02T00:00:00Z"
    queryWindowSize:
      name: windowSize
      in: query
      required: false
      description: |
        If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
      schema:
        $ref: "#/components/schemas/WindowSize"
    queryWindowTimeZone:
      name: windowTimeZone
      in: query
      required: false
      description: |
        The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
        If not specified, the UTC timezone will be used.
      schema:
        type: string
        default: UTC
        example: "America/New_York"
    queryFilterSubject:
      name: subject
      description: |
        Filtering and group by multiple subjects.
        Usage: ?subject=customer-1&subject=customer-2
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    queryFilterGroupBy:
      name: filterGroupBy
      in: query
      style: deepObject
      required: false
      schema:
        type: object
        description: |
          Simple filter for group bys with exact match.
          Usage: ?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4
        example:
          model: gpt-4
          type: input
        additionalProperties:
          type: string
    queryGroupBy:
      name: groupBy
      in: query
      required: false
      description: |
        If not specified a single aggregate will be returned for each subject and time window.
        `subject` is a reserved group by value.
      schema:
        type: array
        items:
          type: string
        example:
          - model
          - type

  responses:
    BadRequestProblemResponse:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "urn:problem-type:bad-request"
            title: "Bad Request"
            status: 400
            detail: 'header Content-Type has unexpected value "application/xml"'
    UnauthorizedProblemResponse:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "urn:problem-type:unauthorized"
            title: "Unauthorized"
            status: 401
            detail: "missing or invalid token"
    NotFoundProblemResponse:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "urn:problem-type:not-found"
            title: "Not Found"
            status: 404
            detail: "meter not found"
    NotImplementedProblemResponse:
      description: Not Implemented
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "urn:problem-type:not-implemented"
            title: "Not Implemented"
            status: 501
            detail: "feature not implemented"
    UnexpectedProblemResponse:
      description: Unexpected error
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "urn:problem-type:unexpected"
            title: "Unexpected Error"
            status: 500
            detail: "unexpected error"

  securitySchemes:
    PortalTokenAuth:
      description: Consumer portal token in open-source version
      type: http
      scheme: bearer
      bearerFormat: jwt
    CloudTokenAuth:
      description: Cloud API token
      type: http
      scheme: bearer
      bearerFormat: opaque
    CloudCookieAuth:
      description: Cloud API web app cookie
      type: apiKey
      in: cookie
      name: __session
    CloudPortalTokenAuth:
      description: Cloud consumer portal token
      type: http
      scheme: bearer
      bearerFormat: opaque

security:
  - {} # No authentication required in open-source version
  - CloudTokenAuth: []
  - CloudCookieAuth: []
