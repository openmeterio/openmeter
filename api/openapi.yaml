openapi: "3.0.3"
info:
  title: OpenMeter API
  version: "1.0.0"
  description: |
    OpenMeter is a cloud native usage metering service.
    The OpenMeter API allows you to ingest events, query meter usage, and manage resources.
    ---
    *Operations with the ☁ (cloud) notation are only available in OpenMeter Cloud.*
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
externalDocs:
  description: Documentation
  url: https://openmeter.io/docs
servers:
  - url: http://127.0.0.1:8888
    description: local
  - url: https://openmeter.cloud
    description: cloud
tags:
  - name: Events
    description: |
      Endpoints related to ingesting and debugging usage events.
      [Learn more](https://openmeter.io/docs/getting-started/usage/overview)
  - name: Meters
    description: |
      Endpoints related to creating, and querying meters.
      [Learn more](https://openmeter.io/docs/getting-started/meters/overview)
  - name: Portal
    description: |
      Endpoints related to the consumer portal.
      [Learn more](https://openmeter.io/docs/monetize/dashboard/portal-developer-guide)
  - name: Subjects
    description: |
      Endpoints related to subjects.
      [Learn more](https://openmeter.io/docs/getting-started/subjects)
paths:
  /api/v1/events:
    get:
      summary: List ingested events
      description: |
        List ingested events within a time range.
      operationId: listEvents
      parameters:
        - $ref: "#/components/parameters/queryFrom"
        - $ref: "#/components/parameters/queryTo"
        - name: limit
          in: query
          required: false
          description: Number of events to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
            example: 100
      tags:
        - Events
      responses:
        "200":
          description: List of events for debugging.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IngestedEvent"
                example:
                  - event:
                      id: 5c10fade-1c9e-4d6c-8275-c52c36731d3c
                      source: service-name
                      specversion: "1.0"
                      type: prompt
                      subject: customer-id
                      time: "2023-01-01T01:01:01.001Z"
                      data:
                        tokens: "1234"
                        model: "gpt-4-turbo"
                        type: "input"
                  - event:
                      id: 912d1d87-09ad-4bcc-a57d-5b3552493ed2
                      source: service-name
                      specversion: "1.0"
                      type: prompt
                      subject: customer-id
                      time: "2023-01-01T01:01:02.001Z"
                      data:
                        tokens: "2345"
                        model: "gpt-4-turbo"
                        type: "output"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    post:
      operationId: ingestEvents
      summary: Ingest events
      description: |
        Ingests an event or batch of events following the CloudEvents specification.
      requestBody:
        description: |
          The event or batch of events to ingest.
          The request body must be a CloudEvents JSON object or an array of CloudEvents JSON objects.
          The CloudEvents JSON object must adhere to the CloudEvents Specification JSON Schema.
        required: true
        content:
          application/cloudevents+json:
            schema:
              $ref: "#/components/schemas/Event"
          application/cloudevents-batch+json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Event"
              example:
                - id: 5c10fade-1c9e-4d6c-8275-c52c36731d3c
                  source: service-name
                  specversion: "1.0"
                  type: prompt
                  subject: customer-id
                  time: "2023-01-01T01:01:01.001Z"
                  data:
                    tokens: "1234"
                    model: "gpt-4-turbo"
                    type: "input"
                - id: 912d1d87-09ad-4bcc-a57d-5b3552493ed2
                  source: service-name
                  specversion: "1.0"
                  type: prompt
                  subject: customer-id
                  time: "2023-01-01T01:01:02.001Z"
                  data:
                    tokens: "2345"
                    model: "gpt-4-turbo"
                    type: "output"

      tags:
        - Events
      responses:
        "204":
          description: Successfully ingested.
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"

  /api/v1/meters:
    get:
      operationId: listMeters
      summary: List meters
      description: List meters.
      tags:
        - Meters
      responses:
        "200":
          description: List of meters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Meter"
                example:
                  - id: 01G65Z755AFWAKHE12NY0CQ9FH
                    slug: tokens_total
                    description: AI token usage
                    aggregation: SUM
                    windowSize: MINUTE
                    eventType: prompt
                    valueProperty: $.tokens
                    groupBy:
                      model: $.model
                      type: $.type
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    post:
      operationId: createMeter
      summary: ☁ Create meter
      description: |
        *Available in OpenMeter Cloud.*
        *In the open-source version, meters are created in the configuration file.*

        Create a meter.
      tags:
        - Meters
      requestBody:
        description: The meter to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Meter"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meter"
              example:
                id: 01G65Z755AFWAKHE12NY0CQ9FH
                slug: tokens_total
                description: AI token usage
                aggregation: SUM
                windowSize: MINUTE
                eventType: prompt
                valueProperty: $.tokens
                groupBy:
                  model: $.model
                  type: $.type
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/meters/{meterIdOrSlug}:
    get:
      operationId: getMeter
      summary: Get meter
      description: Get meter by ID or slug
      parameters:
        - $ref: "#/components/parameters/meterIdOrSlug"
      tags:
        - Meters
      responses:
        "200":
          description: Meter found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meter"
              example:
                id: 01G65Z755AFWAKHE12NY0CQ9FH
                slug: tokens_total
                description: AI token usage
                aggregation: SUM
                windowSize: MINUTE
                eventType: prompt
                valueProperty: $.tokens
                groupBy:
                  model: $.model
                  type: $.type
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    delete:
      operationId: deleteMeter
      summary: ☁ Delete meter
      description: |
        *Available in OpenMeter Cloud.*

        Delete a meter by ID or slug.
      parameters:
        - $ref: "#/components/parameters/meterIdOrSlug"
      tags:
        - Meters
      responses:
        "204":
          description: Meter deleted.
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/meters/{meterIdOrSlug}/query:
    get:
      operationId: queryMeter
      summary: Query meter
      description: Query meter for usage.
      tags:
        - Meters
      parameters:
        - $ref: "#/components/parameters/meterIdOrSlug"
        - $ref: "#/components/parameters/queryFrom"
        - $ref: "#/components/parameters/queryTo"
        - $ref: "#/components/parameters/queryWindowSize"
        - $ref: "#/components/parameters/queryWindowTimeZone"
        - $ref: "#/components/parameters/queryFilterSubject"
        - $ref: "#/components/parameters/queryFilterGroupBy"
        - $ref: "#/components/parameters/queryGroupBy"
      responses:
        "200":
          description: Usage data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeterQueryResult"
              example:
                from: "2023-01-01T00:00:00Z"
                to: "2023-01-02T00:00:00Z"
                windowSize: MINUTE
                data:
                  - value: 12
                    windowStart: "2023-01-01T00:00:00Z"
                    windowEnd: "2023-01-02T00:00:00Z"
                    subject: customer-id
                    groupBy:
                      model: gpt-4-turbo
                      type: prompt
            text/csv:
              schema:
                type: string
                example: |-
                  window_start,window_end,subject,model,type,value
                  2023-01-01T00:00:00Z,2023-01-01T00:01:00Z,customer_1,gpt-4-turbo,input,12
                  2023-01-01T00:01:00Z,2023-01-02T00:02:00Z,customer_1,gpt-4-turbo,input,20
                  2023-01-01T00:02:00Z,2023-01-02T00:03:00Z,customer_2,gpt-4-turbo,output,4

        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/meters/{meterIdOrSlug}/subjects:
    get:
      operationId: listMeterSubjects
      summary: List meter subjects
      description: List subjects for a meter.
      tags:
        - Meters
      parameters:
        - $ref: "#/components/parameters/meterIdOrSlug"
      responses:
        "200":
          description: List of subjects.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - customer-id
                  - customer_2
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Portal
  /api/v1/portal/tokens:
    post:
      operationId: createPortalToken
      summary: Create portal token
      description: Create a consumer portal token.
      tags:
        - Portal
      requestBody:
        description: The portal token to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PortalToken"
            example:
              subject: customer-id
              allowedMeterSlugs:
                - tokens_total
      responses:
        "200":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortalToken"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    get:
      operationId: listPortalTokens
      summary: ☁ List portal tokens
      description: |
        *Available in OpenMeter Cloud.*

        List consumer portal tokens.
      tags:
        - Portal
      parameters:
        - name: limit
          in: query
          required: false
          description: Number of portal tokens to return. Default is 25.
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
            example: 25
      responses:
        "200":
          description: List of portal tokens.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PortalToken"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/portal/tokens/invalidate:
    post:
      operationId: invalidatePortalTokens
      summary: ☁ Invalidate portal tokens
      description: |
        *Available in OpenMeter Cloud.*

        Invalidates consumer portal tokens by ID or subject.
      tags:
        - Portal
      requestBody:
        description: If no id or subject is specified, all tokens will be invalidated.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Invalidate a portal token by ID.
                subject:
                  type: string
                  description: Invalidate all portal tokens for a subject.
            examples:
              "Invalidate by ID":
                description: Invalidate a portal token by ID.
                value:
                  id: "01G65Z755AFWAKHE12NY0CQ9FH"
              "Invalidate by subject":
                description: Invalidate all portal tokens for a subject.
                value:
                  subject: "customer-id"
              "Invalidate all":
                description: Invalidate all portal tokens.
                value: {}
      responses:
        "204":
          description: Portal tokens invalidated.
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Subject
  /api/v1/subjects:
    get:
      operationId: listSubjects
      summary: ☁ List subjects
      description: |
        *Available in OpenMeter Cloud.*

        List subjects.
      tags:
        - Subjects
      responses:
        "200":
          description: List of subjects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Subject"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    post:
      operationId: upsertSubject
      summary: ☁ Upsert subject
      description: |
        *Available in OpenMeter Cloud.*

        Upserts a subject. Creates or updates subject.
        If the subject doesn't exist, it will be created.
        If the subject exists, it will be partially updated with the provided fields.
      tags:
        - Subjects
      requestBody:
        description: The subject to upsert.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Subject"
      responses:
        "200":
          description: Subject upserted.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Subject"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/subjects/{subjectIdOrKey}:
    get:
      operationId: getSubject
      summary: ☁ Get subject
      description: |
        *Available in OpenMeter Cloud.*

        Get subject by ID or key.
      tags:
        - Subjects
      parameters:
        - $ref: "#/components/parameters/subjectIdOrKey"
      responses:
        "200":
          description: Subject found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subject"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    delete:
      operationId: deleteSubject
      summary: ☁ Delete subject
      description: |
        *Available in OpenMeter Cloud.*

        Delete a subject by ID or key.
      tags:
        - Subjects
      parameters:
        - $ref: "#/components/parameters/subjectIdOrKey"
      responses:
        "204":
          description: Subject deleted.
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Portal
  /api/v1/portal/meters/{meterSlug}/query:
    get:
      operationId: queryPortalMeter
      summary: Query portal meter
      description: Query meter for consumer portal. This endpoint is publicly exposable to consumers.
      tags:
        - Portal
      security:
        - PortalTokenAuth: []
        - CloudPortalTokenAuth: []
      parameters:
        - name: meterSlug
          description: A unique identifier for the meter.
          in: path
          required: true
          schema:
            type: string
            example: "tokens_total"
        - $ref: "#/components/parameters/queryFrom"
        - $ref: "#/components/parameters/queryTo"
        - $ref: "#/components/parameters/queryWindowSize"
        - $ref: "#/components/parameters/queryWindowTimeZone"
        - $ref: "#/components/parameters/queryFilterGroupBy"
        - $ref: "#/components/parameters/queryGroupBy"
      responses:
        "200":
          description: Usage data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeterQueryResult"
            text/csv:
              schema:
                type: string
                example: |-
                  window_start,window_end,subject,model,type,value
                  2023-01-01T00:00:00Z,2023-01-01T00:01:00Z,customer_1,gpt-4-turbo,input,12
                  2023-01-01T00:01:00Z,2023-01-02T00:02:00Z,customer_1,gpt-4-turbo,input,20
                  2023-01-01T00:02:00Z,2023-01-02T00:03:00Z,customer_2,gpt-4-turbo,output,4
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"

components:
  schemas:
    Problem:
      type: object
      description: |-
        A Problem Details object (RFC 7807).
        Additional properties specific to the problem type may be present.
      x-go-type: models.StatusProblem
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      properties:
        type:
          type: string
          format: uri
          description: Type contains a URI that identifies the problem type.
          example: "urn:problem-type:bad-request"
        title:
          type: string
          description: A a short, human-readable summary of the problem type.
          example: Bad Request
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          minimum: 400
          maximum: 599
          example: 400
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: "body must be a JSON object"
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence of the problem.
          example: "urn:request:local/JMOlctsKV8-000001"
      additionalProperties: true
      required:
        - type
        - title
        - status
        - detail
      example:
        type: "urn:problem-type:bad-request"
        title: "Bad Request"
        status: 400
        detail: "body must be a JSON object"
    Event:
      description: CloudEvents Specification JSON Schema
      x-go-type: event.Event
      x-go-type-import:
        path: github.com/cloudevents/sdk-go/v2/event
      type: object
      additionalProperties: false
      properties:
        id:
          description: Identifies the event.
          type: string
          minLength: 1
          example: 5c10fade-1c9e-4d6c-8275-c52c36731d3c
        source:
          description: Identifies the context in which an event happened.
          type: string
          format: uri-reference
          minLength: 1
          example: service-name
        specversion:
          description: The version of the CloudEvents specification which the event uses.
          type: string
          minLength: 1
          example: "1.0"
        type:
          description: Describes the type of event related to the originating occurrence.
          type: string
          example: prompt
        datacontenttype:
          description: Content type of the data value. Must adhere to RFC 2046 format.
          type: string
          enum:
            - application/json
          nullable: true
          minLength: 1
          example: application/json
        dataschema:
          description: Identifies the schema that data adheres to.
          type: string
          nullable: true
          format: uri
          minLength: 1
        subject:
          description: Describes the subject of the event in the context of the event producer (identified by source).
          type: string
          nullable: false
          minLength: 1
          example: "customer-id"
        time:
          description: Timestamp of when the occurrence happened. Must adhere to RFC 3339.
          type: string
          nullable: true
          format: date-time
          minLength: 1
          example: "2023-01-01T01:01:01.001Z"
        data:
          description: The event payload.
          type: object
          additionalProperties: true
          example:
            tokens: "1234"
            model: "gpt-4-turbo"
      required:
        - id
        - source
        - specversion
        - type
        - subject
      example:
        id: 5c10fade-1c9e-4d6c-8275-c52c36731d3c
        source: service-name
        specversion: "1.0"
        type: prompt
        subject: customer-id
        time: "2023-01-01T01:01:01.001Z"
        data:
          tokens: "1234"
          model: "gpt-4-turbo"
          type: "input"
    IngestedEvent:
      description: An ingested event with optional validation error.
      type: object
      additionalProperties: false
      required:
        - event
      properties:
        event:
          $ref: "#/components/schemas/Event"
        validationError:
          type: string
          readOnly: true
          example: "invalid event"
      example:
        event:
          id: 5c10fade-1c9e-4d6c-8275-c52c36731d3d
          source: service-name
          specversion: "1.0"
          type: prompt
          subject: customer-id
          time: "2023-01-01T01:01:01.001Z"
          data:
            tokens: "1234"
            model: "gpt-4-turbo"
        validationError: "meter not found for event"
    Meter:
      type: object
      description: A meter is a configuration that defines how to match and aggregate events.
      x-go-type: models.Meter
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      properties:
        id:
          type: string
          description: A unique identifier for the meter.
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          readOnly: true
        slug:
          type: string
          description: A unique, human-readable identifier for the meter. Must consist only alphanumeric and underscore characters.
          pattern: "^[a-z0-9]+(?:_[a-z0-9]+)*$"
          minLength: 1
          maxLength: 63
          example: tokens_total
        description:
          type: string
          description: A description of the meter.
          nullable: true
          example: AI Token Usage
        aggregation:
          $ref: "#/components/schemas/MeterAggregation"
        windowSize:
          $ref: "#/components/schemas/WindowSize"
        eventType:
          type: string
          description: The event type to aggregate.
          example: prompt
        valueProperty:
          type: string
          description: |
            JSONPath expression to extract the value from the ingested event's data property.
            The ingested value for SUM, AVG, MIN, and MAX aggregations is a number or a string that can be parsed to a number.
            For UNIQUE_COUNT aggregation, the ingested value must be a string. For COUNT aggregation the valueProperty is ignored.
          example: $.tokens
        groupBy:
          type: object
          description: Named JSONPath expressions to extract the group by values from the event data. Keys must be unique and consist only alphanumeric and underscore characters.
          # Only works with OpenAPI 3.1.0
          # propertyNames:
          #   pattern: "^[a-z0-9]+(?:_[a-z0-9]+)*$"
          additionalProperties:
            type: string
            example: $.model
          example:
            model: $.model
            type: $.type
      required:
        - slug
        - aggregation
        - eventType
        - windowSize
      example:
        slug: tokens_total
        description: AI token usage
        aggregation: SUM
        windowSize: MINUTE
        eventType: prompt
        valueProperty: $.tokens
        groupBy:
          model: $.model
          type: $.type
    MeterAggregation:
      type: string
      description: The aggregation type to use for the meter.
      x-go-type: models.MeterAggregation
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      enum:
        - SUM
        - COUNT
        - UNIQUE_COUNT
        - AVG
        - MIN
        - MAX
      example: SUM
    WindowSize:
      type: string
      description: Aggregation window size.
      x-go-type: models.WindowSize
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      enum:
        - MINUTE
        - HOUR
        - DAY
      example: MINUTE
    MeterQueryResult:
      type: object
      description: The result of a meter query.
      required:
        - data
      properties:
        from:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        to:
          type: string
          format: date-time
          example: "2023-01-02T00:00:00Z"
        windowSize:
          $ref: "#/components/schemas/WindowSize"
        data:
          type: array
          items:
            $ref: "#/components/schemas/MeterQueryRow"
          example:
            - value: 12
              windowStart: "2023-01-01T00:00:00Z"
              windowEnd: "2023-01-02T00:00:00Z"
              subject: customer-id
              groupBy:
                model: gpt-4-turbo
                type: prompt
      example:
        from: "2023-01-01T00:00:00Z"
        to: "2023-01-02T00:00:00Z"
        windowSize: MINUTE
        data:
          - value: 12
            windowStart: "2023-01-01T00:00:00Z"
            windowEnd: "2023-01-02T00:00:00Z"
            subject: customer-id
            groupBy:
              model: gpt-4-turbo
              type: prompt
    MeterQueryRow:
      type: object
      description: A row in the result of a meter query.
      x-go-type: models.MeterQueryRow
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      required:
        - value
        - windowStart
        - windowEnd
      properties:
        value:
          type: number
          example: 12
        windowStart:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        windowEnd:
          type: string
          format: date-time
          example: "2023-01-02T00:00:00Z"
        subject:
          type: string
          nullable: true
          description: The subject of the meter value.
          example: customer-id
        groupBy:
          type: object
          nullable: true
          additionalProperties:
            type: string
          example:
            model: gpt-4-turbo
            type: prompt
      example:
        value: 12
        windowStart: "2023-01-01T00:00:00Z"
        windowEnd: "2023-01-02T00:00:00Z"
        subject: customer-id
        groupBy:
          model: gpt-4-turbo
          type: prompt
    PortalToken:
      type: object
      description: A consumer portal token.
      required:
        # Validator doesn't obey required for readOnly properties
        # See: https://github.com/stoplightio/spectral/issues/1274
        # - id
        - subject
        # - expiresAt
        # - expired
        # - createdAt
        # - token
      properties:
        id:
          type: string
          readOnly: true
          example: "01G65Z755AFWAKHE12NY0CQ9FH"
        subject:
          type: string
          example: customer-id
        expiresAt:
          type: string
          format: date-time
          readOnly: true
          example: "2023-01-02T00:00:00Z"
        expired:
          type: boolean
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
          example: "2023-01-01T00:00:00Z"
        token:
          description: The token is only returned at creation.
          type: string
          readOnly: true
          example: "om_portal_IAnD3PpWW2A2Wr8m9jfzeHlGX8xmCXwG.y5q4S-AWqFu6qjfaFz0zQq4Ez28RsnyVwJffX5qxMvo"
        allowedMeterSlugs:
          description: Optional, if defined only the specified meters will be allowed
          type: array
          minItems: 1
          uniqueItems: true
          items:
            type: string
          example:
            - tokens_total
      example:
        id: "01G65Z755AFWAKHE12NY0CQ9FH"
        subject: customer-id
        expiresAt: "2023-01-02T00:00:00Z"
        expired: false
        createdAt: "2023-01-01T00:00:00Z"
        token: "om_portal_IAnD3PpWW2A2Wr8m9jfzeHlGX8xmCXwG.y5q4S-AWqFu6qjfaFz0zQq4Ez28RsnyVwJffX5qxMvo"
        allowedMeterSlugs:
          - tokens_total
    Subject:
      type: object
      description: A subject is a unique identifier for a user or entity.
      required:
        # Validator doesn't obey required for readOnly properties
        # See: https://github.com/stoplightio/spectral/issues/1274
        # - id
        - key
      additionalProperties: false
      properties:
        id:
          type: string
          readOnly: true
          example: "01G65Z755AFWAKHE12NY0CQ9FH"
        key:
          type: string
          example: customer-id
        displayName:
          type: string
          nullable: true
          example: "Customer Name"
        metadata:
          type: object
          additionalProperties: true
          nullable: true
          example:
            hubspotId: "123456"
        currentPeriodStart:
          type: string
          format: date-time
          nullable: true
          example: "2023-01-01T00:00:00Z"
        currentPeriodEnd:
          type: string
          format: date-time
          nullable: true
          example: "2023-02-01T00:00:00Z"
        stripeCustomerId:
          type: string
          nullable: true
          example: "cus_JMOlctsKV8"
      example:
        id: "01G65Z755AFWAKHE12NY0CQ9FH"
        key: customer-id
        displayName: "Customer Name"
        metadata:
          hubspotId: "123456"
        currentPeriodStart: "2023-01-01T00:00:00Z"
        currentPeriodEnd: "2023-02-01T00:00:00Z"
        stripeCustomerId: "cus_JMOlctsKV8"
    IdOrSlug:
      type: string
      description: A unique identifier.
      oneOf:
        # id
        - type: string
          pattern: "^[0-9ABCDEFGHJKMNPQRSTVWXYZ]{26}$"
          description: "ULID (Universally Unique Lexicographically Sortable Identifier)"
          example: "01G65Z755AFWAKHE12NY0CQ9FH"
        # slug
        - type: string
          pattern: "^[a-z0-9]+(?:_[a-z0-9]+)*$"
          minLength: 1
          maxLength: 63
          example: "tokens_total"
      example: "tokens_total"

  parameters:
    meterIdOrSlug:
      name: meterIdOrSlug
      description: A unique identifier for the meter.
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/IdOrSlug"
    subjectIdOrKey:
      name: subjectIdOrKey
      description: A unique identifier for a subject.
      in: path
      required: true
      schema:
        type: string
        example: "customer-id"
    queryFrom:
      name: from
      in: query
      required: false
      description: |
        Start date-time in RFC 3339 format.
        Inclusive.
      schema:
        type: string
        format: date-time
        example: "2023-01-01T00:00:00Z"
    queryTo:
      name: to
      in: query
      required: false
      description: |
        End date-time in RFC 3339 format.
        Inclusive.
      schema:
        type: string
        format: date-time
        example: "2023-01-02T00:00:00Z"
    queryWindowSize:
      name: windowSize
      in: query
      required: false
      description: |
        If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
      schema:
        $ref: "#/components/schemas/WindowSize"
    queryWindowTimeZone:
      name: windowTimeZone
      in: query
      required: false
      description: |
        The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
        If not specified, the UTC timezone will be used.
      schema:
        type: string
        default: UTC
        example: "America/New_York"
    queryFilterSubject:
      name: subject
      description: |
        Filtering and group by multiple subjects.
        Usage: ?subject=customer-1&subject=customer-2
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    queryFilterGroupBy:
      name: filterGroupBy
      in: query
      style: deepObject
      required: false
      schema:
        type: object
        description: |
          Simple filter for group bys with exact match.
          Usage: ?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4
        example:
          model: gpt-4
          type: input
        additionalProperties:
          type: string
    queryGroupBy:
      name: groupBy
      in: query
      required: false
      description: |
        If not specified a single aggregate will be returned for each subject and time window.
        `subject` is a reserved group by value.
      schema:
        type: array
        items:
          type: string
        example:
          - model
          - type

  responses:
    BadRequestProblemResponse:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "urn:problem-type:bad-request"
            title: "Bad Request"
            status: 400
            detail: 'header Content-Type has unexpected value "application/xml"'
    UnauthorizedProblemResponse:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "urn:problem-type:unauthorized"
            title: "Unauthorized"
            status: 401
            detail: "missing or invalid token"
    NotFoundProblemResponse:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "urn:problem-type:not-found"
            title: "Not Found"
            status: 404
            detail: "meter not found"
    NotImplementedProblemResponse:
      description: Not Implemented
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "urn:problem-type:not-implemented"
            title: "Not Implemented"
            status: 501
            detail: "feature not implemented"
    UnexpectedProblemResponse:
      description: Unexpected error
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "urn:problem-type:unexpected"
            title: "Unexpected Error"
            status: 500
            detail: "unexpected error"

  securitySchemes:
    PortalTokenAuth:
      description: Consumer portal token in open-source version
      type: http
      scheme: bearer
      bearerFormat: jwt
    CloudTokenAuth:
      description: Cloud API token
      type: http
      scheme: bearer
      bearerFormat: opaque
    CloudCookieAuth:
      description: Cloud API web app cookie
      type: apiKey
      in: cookie
      name: __session
    CloudPortalTokenAuth:
      description: Cloud consumer portal token
      type: http
      scheme: bearer
      bearerFormat: opaque

security:
  - {} # No authentication required in open-source version
  - CloudTokenAuth: []
  - CloudCookieAuth: []
