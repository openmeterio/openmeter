openapi: 3.0.0
info:
  title: OpenMeter API
  version: 1.0.0
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  description: |-
    OpenMeter is a cloud native usage metering service.
    The OpenMeter API allows you to ingest events, query meter usage, and manage resources.
tags:
  - name: Apps
  - name: Portal
  - name: Notification (Beta)
  - name: Entitlements (Beta)
  - name: Billing (Experimental)
  - name: Plan (Experimental)
  - name: Subscriptions
  - name: Events
  - name: Meters
  - name: Debug
  - name: Customers
paths:
  /api/v1/apps:
    get:
      operationId: listApps
      description: List apps.
      parameters:
        - $ref: '#/components/parameters/PaginatedQuery.page'
        - $ref: '#/components/parameters/PaginatedQuery.pageSize'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppList'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Apps
  /api/v1/apps/{id}:
    get:
      operationId: getApp
      description: Get the app.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/App'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Apps
    delete:
      operationId: uninstallApp
      description: Uninstall an app.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Apps
  /api/v1/apps/{id}/stripe/webhook:
    post:
      operationId: appStripeWebhook
      description: Stripe webhook.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StripeWebhookResponse'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Apps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StripeWebhookEvent'
  /api/v1/billing/customer:
    get:
      operationId: billingListCustomerOverrides
      summary: List customer overrides
      description: List customer overrides
      parameters:
        - name: billingProfile
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              example: 01G65Z755AFWAKHE12NY0CQ9FH
              pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
              description: ULID (Universally Unique Lexicographically Sortable Identifier).
          explode: false
        - $ref: '#/components/parameters/Pagination.page'
        - $ref: '#/components/parameters/Pagination.pageSize'
        - $ref: '#/components/parameters/LimitOffset.offset'
        - $ref: '#/components/parameters/LimitOffset.limit'
        - $ref: '#/components/parameters/CustomerOverrideOrderByOrdering.order'
        - $ref: '#/components/parameters/CustomerOverrideOrderByOrdering.orderBy'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerOverridePaginatedResponse'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
  /api/v1/billing/customer/{customerId}:
    post:
      operationId: billingUpsertCustomerOverride
      summary: Create/update a customer override
      description: Create/update a new customer override.
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingCustomerOverride'
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingCustomerOverride'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingCustomerWorkflowOverrideCreate'
    get:
      operationId: billingGetCustomerOverrideById
      summary: Get a customer override
      description: Get a customer override by id.
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingCustomerOverride'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
    delete:
      operationId: billingDeleteCustomerOverride
      summary: Delete a customer override
      description: Delete a customer override by id.
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
  /api/v1/billing/invoices:
    get:
      operationId: billingListInvoices
      summary: List invoices
      description: List invoices
      parameters:
        - name: customers
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              example: 01G65Z755AFWAKHE12NY0CQ9FH
              pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
              description: ULID (Universally Unique Lexicographically Sortable Identifier).
            title: Filter by the customer ID or key
          explode: false
        - $ref: '#/components/parameters/BillingInvoiceListParams.statuses'
        - $ref: '#/components/parameters/BillingInvoiceListParams.extendedStatuses'
        - $ref: '#/components/parameters/BillingInvoiceListParams.issuedAfter'
        - $ref: '#/components/parameters/BillingInvoiceListParams.issuedBefore'
        - $ref: '#/components/parameters/BillingInvoiceListParams.expand'
        - $ref: '#/components/parameters/Pagination.page'
        - $ref: '#/components/parameters/Pagination.pageSize'
        - $ref: '#/components/parameters/LimitOffset.offset'
        - $ref: '#/components/parameters/LimitOffset.limit'
        - $ref: '#/components/parameters/InvoiceOrderByOrdering.order'
        - $ref: '#/components/parameters/InvoiceOrderByOrdering.orderBy'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicePaginatedResponse'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
  /api/v1/billing/invoices/{customerId}:
    post:
      operationId: billingCreateInvoice
      summary: Create an invoice
      description: |-
        Create a new invoice from the pending line items.

        This should be only called if for some reason we need to invoice a customer outside of the normal billing cycle.

        When creating an invoice, the pending line items will be marked as invoiced and the invoice will be created with the total amount of the pending items.

        New pending line items will be created for the period between now() and the next billing cycle's begining date for any metered item.

        The call can return multiple invoices if the pending line items are in different currencies.
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BillingInvoice'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingInvoiceCreateInput'
    get:
      operationId: billingListInvoicesByCustomer
      summary: List invoices
      description: List invoices for a specific customer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - $ref: '#/components/parameters/BillingInvoiceListParams.statuses'
        - $ref: '#/components/parameters/BillingInvoiceListParams.extendedStatuses'
        - $ref: '#/components/parameters/BillingInvoiceListParams.issuedAfter'
        - $ref: '#/components/parameters/BillingInvoiceListParams.issuedBefore'
        - $ref: '#/components/parameters/BillingInvoiceListParams.expand'
        - $ref: '#/components/parameters/Pagination.page'
        - $ref: '#/components/parameters/Pagination.pageSize'
        - $ref: '#/components/parameters/LimitOffset.offset'
        - $ref: '#/components/parameters/LimitOffset.limit'
        - $ref: '#/components/parameters/InvoiceOrderByOrdering.order'
        - $ref: '#/components/parameters/InvoiceOrderByOrdering.orderBy'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicePaginatedResponse'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
  /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}:
    get:
      operationId: billingGetInvoiceByCustomerInvoiceId
      summary: Get an invoice
      description: Get an invoice by ID.
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: invoiceId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: expand
          in: query
          required: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BillingInvoiceExpand'
            default:
              - lines
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingInvoice'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
    delete:
      operationId: billingDeleteInvoiceByCustomerInvoiceId
      summary: Delete an invoice
      description: |-
        Delete an invoice

        Only invoices that are in the draft (or earlier) status can be deleted.
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: invoiceId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
  /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/advance:
    post:
      operationId: billingInvoiceAdvance
      summary: Advance the invoice's state to the next status
      description: |-
        Advance the invoice's state to the next status.

        The call doesn't "approve the invoice", it only advances the invoice to the next status if the transition would be automatic.

        The action can be called when the invoice's statusDetails' actions field contain the "advance" action.
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: invoiceId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingInvoice'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
  /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/approve:
    post:
      operationId: billingApproveInvoice
      summary: Send the invoice to the customer
      description: |-
        Approve an invoice and start executing the payment workflow.

        This call instantly sends the invoice to the customer using the configured billing profile app.

        This call is valid in two invoice statuses:
        - `draft`: the invoice will be sent to the customer, the invluce state becomes issued
        - `manual_approval_needed`: the invoice will be sent to the customer, the invoice state becomes issued
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: invoiceId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingInvoice'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
  /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/lines/{lineId}:
    delete:
      operationId: billingDeleteInvoiceLine
      summary: Delete an invoice line
      description: Delete an invoice line
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: invoiceId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: lineId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
    put:
      operationId: billingUpdateInvoiceLine
      summary: Update an invoice line
      description: Update an invoice line
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: invoiceId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: lineId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingInvoiceLine'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingInvoiceLineCreateOrUpdate'
  /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/retry:
    post:
      operationId: billingInvoiceRetry
      summary: Retry advancing the invoice after a failed attempt.
      description: |-
        Retry advancing the invoice after a failed attempt.

        The action can be called when the invoice's statusDetails' actions field contain the "retry" action.
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: invoiceId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingInvoice'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
  /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/tax/recalculate:
    post:
      operationId: billingRecalculateInvoiceTax
      summary: Recalculate an invoice's tax amounts
      description: |-
        Recalculate an invoice's tax amounts (using the app set in the customer's billing profile)

        Note: charges might apply, depending on the tax provider.
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: invoiceId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingInvoice'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
  /api/v1/billing/invoices/{customerId}/invoices/{invoiceId}/void:
    post:
      operationId: billingVoidInvoice
      summary: Void an invoice
      description: |-
        Void an invoice

        Only invoices that have been alread issued can be voided.

        Voiding an invoice will mark it as voided, the user can specify how to handle the voided line items.
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: invoiceId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingInvoice'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingVoidInvoiceInput'
  /api/v1/billing/invoices/{customerId}/lines:
    post:
      operationId: billingCreateLineByCustomer
      summary: Create line items
      description: |-
        Create a new pending line item (charge).

        This call is used to create a new pending line item for the customer without explicitly
        assigning it to an invoice.

        The line item will be either allocated to an existing invoice in gathering state or a new invoice is
        created for the line item.

        A new invoice will be created if:
        - there is no invoice in gathering state
        - the currency of the line item doesn't match the currency of any invoices in gathering state
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingCreateLineResult'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingCreateLinesRequest'
  /api/v1/billing/profile:
    get:
      operationId: billingListProfiles
      description: List all billing profiles
      parameters:
        - name: includeArchived
          in: query
          required: false
          schema:
            type: boolean
            default: false
          explode: false
        - name: expand
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BillingProfileExpand'
          explode: false
        - $ref: '#/components/parameters/Pagination.page'
        - $ref: '#/components/parameters/Pagination.pageSize'
        - $ref: '#/components/parameters/LimitOffset.offset'
        - $ref: '#/components/parameters/LimitOffset.limit'
        - $ref: '#/components/parameters/ProfileOrderByOrdering.order'
        - $ref: '#/components/parameters/ProfileOrderByOrdering.orderBy'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfilePaginatedResponse'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
    post:
      operationId: billingCreateProfile
      summary: Create a new billing profile
      description: |-
        Create a new billing profile

        Billing profiles are representations of a customer's billing information. Customer overrides
        can be applied to a billing profile to customize the billing behavior for a specific customer.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingProfile'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingProfileCreateInput'
  /api/v1/billing/profile/{id}:
    delete:
      operationId: billingArchiveProfile
      summary: Archive a billing profile
      description: Archive a billing profile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
    get:
      operationId: billingGetProfile
      summary: Get a billing profile by ID
      description: Get a billing profile by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BillingProfileExpand'
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingProfile'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
    put:
      operationId: billingUpdateProfile
      summary: Update a billing profile
      description: Update a billing profile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingProfile'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Billing (Experimental)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingProfileCreateOrUpdate'
  /api/v1/customers:
    post:
      operationId: createCustomer
      description: Create a new customer.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
    get:
      operationId: listCustomers
      description: List customers.
      parameters:
        - $ref: '#/components/parameters/CustomerOrderByOrdering.order'
        - $ref: '#/components/parameters/CustomerOrderByOrdering.orderBy'
        - $ref: '#/components/parameters/queryCustomerList.includeDeleted'
        - $ref: '#/components/parameters/queryCustomerList.name'
        - $ref: '#/components/parameters/queryCustomerList.primaryEmail'
        - $ref: '#/components/parameters/queryCustomerList.subject'
        - $ref: '#/components/parameters/PaginatedQuery.page'
        - $ref: '#/components/parameters/PaginatedQuery.pageSize'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerList'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Customers
  /api/v1/customers/{id}:
    get:
      operationId: getCustomer
      description: Get a customer by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Customers
    put:
      operationId: updateCustomer
      description: Update a customer by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
    delete:
      operationId: deleteCustomer
      description: Delete a customer by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Customers
  /api/v1/debug/metrics:
    get:
      operationId: getDebugMetrics
      summary: Get event metrics
      description: |-
        Returns debug metrics (in OpenMetrics format) like the number of ingested events since mindnight UTC.

        The OpenMetrics Counter(s) reset every day at midnight UTC.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Debug
  /api/v1/entitlements:
    get:
      operationId: listEntitlements
      summary: List all entitlements
      description: |-
        List all entitlements for all the subjects and features. This endpoint is intended for administrative purposes only.
        To fetch the entitlements of a specific subject please use the /api/v1/subjects/{subjectKeyOrID}/entitlements endpoint.
        If page is provided that takes precedence and the paginated response is returned.
      parameters:
        - name: feature
          in: query
          required: false
          description: |-
            Filtering by multiple features.

            Usage: `?feature=feature-1&feature=feature-2`
          schema:
            type: array
            items:
              type: string
        - name: subject
          in: query
          required: false
          description: |-
            Filtering by multiple subjects.

            Usage: `?subject=customer-1&subject=customer-2`
          schema:
            type: array
            items:
              type: string
        - name: entitlementType
          in: query
          required: false
          description: |-
            Filtering by multiple entitlement types.

            Usage: `?entitlementType=metered&entitlementType=boolean`
          schema:
            type: array
            items:
              $ref: '#/components/schemas/EntitlementType'
        - $ref: '#/components/parameters/Pagination.page'
        - $ref: '#/components/parameters/Pagination.pageSize'
        - $ref: '#/components/parameters/LimitOffset.offset'
        - $ref: '#/components/parameters/LimitOffset.limit'
        - $ref: '#/components/parameters/EntitlementOrderByOrdering.order'
        - $ref: '#/components/parameters/EntitlementOrderByOrdering.orderBy'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEntitlementsResult'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
  /api/v1/entitlements/{entitlementId}:
    get:
      operationId: getEntitlementById
      description: Get entitlement by id.
      parameters:
        - name: entitlementId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entitlement'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
  /api/v1/events:
    get:
      operationId: listEvents
      summary: List ingested events
      description: |-
        List ingested events within a time range.

        If the from query param is not provided it defaults to last 72 hours.
      parameters:
        - name: ingestedAtFrom
          in: query
          required: false
          description: |-
            Start date-time in RFC 3339 format.

            Inclusive.
          schema:
            type: string
            format: date-time
        - name: ingestedAtTo
          in: query
          required: false
          description: |-
            End date-time in RFC 3339 format.

            Inclusive.
          schema:
            type: string
            format: date-time
        - name: hasError
          in: query
          required: false
          description: |-
            If not provided lists all events.

            If provided with true, only list events with processing error.

            If provided with false, only list events without processing error.
          schema:
            type: boolean
        - name: id
          in: query
          required: false
          description: |-
            The event ID.

            Accepts partial ID.
          schema:
            type: string
        - name: subject
          in: query
          required: false
          description: |-
            The event subject.

            Accepts partial subject.
          schema:
            type: string
        - name: from
          in: query
          required: false
          description: |-
            Start date-time in RFC 3339 format.

            Inclusive.
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          required: false
          description: |-
            End date-time in RFC 3339 format.

            Inclusive.
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          required: false
          description: Number of events to return.
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IngestedEvent'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Events
    post:
      operationId: ingestEvents
      parameters: []
      description: Ingests an event or batch of events following the CloudEvents specification.
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/cloudevents+json:
              schema:
                $ref: '#/components/schemas/Event'
            application/cloudevents-batch+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Events
      requestBody:
        required: true
        content:
          application/cloudevents+json:
            schema:
              $ref: '#/components/schemas/Event'
          application/cloudevents-batch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Event'
  /api/v1/features:
    get:
      operationId: listFeatures
      description: List features.
      parameters:
        - name: meterSlug
          in: query
          required: false
          description: Filter by meterSlug
          schema:
            type: array
            items:
              type: string
        - name: includeArchived
          in: query
          required: false
          description: Filter by meterGroupByFilters
          schema:
            type: boolean
            default: false
          explode: false
        - $ref: '#/components/parameters/Pagination.page'
        - $ref: '#/components/parameters/Pagination.pageSize'
        - $ref: '#/components/parameters/LimitOffset.offset'
        - $ref: '#/components/parameters/LimitOffset.limit'
        - $ref: '#/components/parameters/FeatureOrderByOrdering.order'
        - $ref: '#/components/parameters/FeatureOrderByOrdering.orderBy'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFeaturesResult'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
    post:
      operationId: createFeature
      description: |-
        Features are either metered or static. A feature is metered if meterSlug is provided at creation.
        For metered features you can pass additional filters that will be applied when calculating feature usage, based on the meter's groupBy fields.
        Only meters with SUM and COUNT aggregation are supported for features.
        Features cannot be updated later, only archived.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureCreateInputs'
  /api/v1/features/{featureId}:
    get:
      operationId: getFeature
      description: Get a feature by ID.
      parameters:
        - name: featureId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
    delete:
      operationId: deleteFeature
      description: |-
        Archive a feature by ID.

        Once a feature is archived it cannot be unarchived. If a feature is archived, new entitlements cannot be created for it, but archiving the feature does not affect existing entitlements.
        This means, if you want to create a new feature with the same key, and then create entitlements for it, the previous entitlements have to be deleted first on a per subject basis.
      parameters:
        - name: featureId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
  /api/v1/grants:
    get:
      operationId: listGrants
      description: |-
        List all grants for all the subjects and entitlements. This endpoint is intended for administrative purposes only.
        To fetch the grants of a specific entitlement please use the /api/v1/subjects/{subjectKeyOrID}/entitlements/{entitlementOrFeatureID}/grants endpoint.
        If page is provided that takes precedence and the paginated response is returned.
      parameters:
        - name: feature
          in: query
          required: false
          description: |-
            Filtering by multiple features.

            Usage: `?feature=feature-1&feature=feature-2`
          schema:
            type: array
            items:
              type: string
        - name: subject
          in: query
          required: false
          description: |-
            Filtering by multiple subjects.

            Usage: `?subject=customer-1&subject=customer-2`
          schema:
            type: array
            items:
              type: string
        - name: includeDeleted
          in: query
          required: false
          description: Include deleted
          schema:
            type: boolean
            default: false
          explode: false
        - $ref: '#/components/parameters/Pagination.page'
        - $ref: '#/components/parameters/Pagination.pageSize'
        - $ref: '#/components/parameters/LimitOffset.offset'
        - $ref: '#/components/parameters/LimitOffset.limit'
        - $ref: '#/components/parameters/GrantOrderByOrdering.order'
        - $ref: '#/components/parameters/GrantOrderByOrdering.orderBy'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/EntitlementGrant'
                  - $ref: '#/components/schemas/GrantPaginatedResponse'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
  /api/v1/grants/{grantId}:
    delete:
      operationId: voidGrant
      description: |-
        Voiding a grant means it is no longer valid, it doesn't take part in further balance calculations. Voiding a grant does not retroactively take effect, meaning any usage that has already been attributed to the grant will remain, but future usage cannot be burnt down from the grant.
        For example, if you have a single grant for your metered entitlement with an initial amount of 100, and so far 60 usage has been metered, the grant (and the entitlement itself) would have a balance of 40. If you then void that grant, balance becomes 0, but the 60 previous usage will not be affected.
      parameters:
        - name: grantId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '409':
          description: The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ConflictProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
  /api/v1/integration/stripe/checkout/sessions:
    post:
      operationId: createStripeCheckoutSession
      description: Create checkout session.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateStripeCheckoutSessionResult'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Apps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStripeCheckoutSessionRequest'
  /api/v1/marketplace/listings:
    get:
      operationId: listMarketplaceListings
      description: List available apps of the app marketplace.
      parameters:
        - $ref: '#/components/parameters/PaginatedQuery.page'
        - $ref: '#/components/parameters/PaginatedQuery.pageSize'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketplaceListingList'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Apps
  /api/v1/marketplace/listings/{type}:
    get:
      operationId: getMarketplaceListing
      description: Get a marketplace listing by type.
      parameters:
        - name: type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppType'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketplaceListing'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Apps
  /api/v1/marketplace/listings/{type}/install/apikey:
    post:
      operationId: marketplaceAppAPIKeyInstall
      description: Install an marketplace via API Key.
      parameters:
        - $ref: '#/components/parameters/MarketplaceApiKeyInstallRequest.type'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppBase'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Apps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                  description: |-
                    The API key for the provider.
                    For example, the Stripe API key.
                name:
                  type: string
                  description: |-
                    Name of the application to install.

                    If not set defaults to the marketplace item's description.
              required:
                - apiKey
  /api/v1/marketplace/listings/{type}/install/oauth2:
    get:
      operationId: marketplaceOAuth2InstallGetURL
      description: |-
        Install an app via OAuth.
        Returns a URL to start the OAuth 2.0 flow.
      parameters:
        - name: type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppType'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientAppStartResponse'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Apps
  /api/v1/marketplace/listings/{type}/install/oauth2/authorize:
    get:
      operationId: marketplaceOAuth2InstallAuthorize
      description: |-
        Authorize OAuth2 code.
        Verifies the OAuth code and exchanges it for a token and refresh token
      parameters:
        - $ref: '#/components/parameters/OAuth2AuthorizationCodeGrantSuccessParams.state'
        - $ref: '#/components/parameters/OAuth2AuthorizationCodeGrantSuccessParams.code'
        - $ref: '#/components/parameters/OAuth2AuthorizationCodeGrantErrorParams.error'
        - $ref: '#/components/parameters/OAuth2AuthorizationCodeGrantErrorParams.error_description'
        - $ref: '#/components/parameters/OAuth2AuthorizationCodeGrantErrorParams.error_uri'
        - $ref: '#/components/parameters/MarketplaceOAuth2InstallAuthorizeRequest.type'
      responses:
        '303':
          description: Redirection
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Apps
  /api/v1/meters:
    get:
      operationId: listMeters
      description: List meters.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meter'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Meters
  /api/v1/meters/{meterIdOrSlug}:
    get:
      operationId: getMeter
      description: Get a meter by ID or slug.
      parameters:
        - name: meterIdOrSlug
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$|^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meter'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Meters
  /api/v1/meters/{meterIdOrSlug}/query:
    get:
      operationId: queryMeter
      parameters:
        - name: meterIdOrSlug
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$|^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - $ref: '#/components/parameters/MeterQuery.from'
        - $ref: '#/components/parameters/MeterQuery.to'
        - $ref: '#/components/parameters/MeterQuery.windowSize'
        - $ref: '#/components/parameters/MeterQuery.windowTimeZone'
        - $ref: '#/components/parameters/MeterQuery.subject'
        - $ref: '#/components/parameters/MeterQuery.filterGroupBy'
        - $ref: '#/components/parameters/MeterQuery.groupBy'
      description: Query meter for usage. Query meter for usage.
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeterQueryResult'
            text/csv:
              schema:
                type: string
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Meters
  /api/v1/meters/{meterIdOrSlug}/subjects:
    get:
      operationId: listMeterSubjects
      description: List subjects for a meter.
      parameters:
        - name: meterIdOrSlug
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$|^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Meters
  /api/v1/notification/channels:
    get:
      operationId: listNotificationChannels
      summary: List notification channels
      description: List all notification channels.
      parameters:
        - name: includeDeleted
          in: query
          required: false
          description: |-
            Include deleted notification channels in response.

            Usage: `?includeDeleted=true`
          schema:
            type: boolean
            default: false
          explode: false
        - name: includeDisabled
          in: query
          required: false
          description: |-
            Include disabled notification channels in response.

            Usage: `?includeDisabled=false`
          schema:
            type: boolean
            default: false
          explode: false
        - $ref: '#/components/parameters/Pagination.page'
        - $ref: '#/components/parameters/Pagination.pageSize'
        - $ref: '#/components/parameters/NotificationChannelOrderByOrdering.order'
        - $ref: '#/components/parameters/NotificationChannelOrderByOrdering.orderBy'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelPaginatedResponse'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Notification (Beta)
    post:
      operationId: createNotificationChannel
      summary: Create a notification channel
      description: Create a new notification channel.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannel'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Notification (Beta)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationChannelCreateRequest'
  /api/v1/notification/channels/{channelId}:
    put:
      operationId: updateNotificationChannel
      summary: Update a notification channel
      description: Update notification channel.
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannel'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Notification (Beta)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationChannelCreateRequest'
    get:
      operationId: getNotificationChannel
      summary: Get notification channel
      description: Get a notification channel by id.
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannel'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Notification (Beta)
    delete:
      operationId: deleteNotificationChannel
      summary: Delete a notification channel
      description: |-
        Soft delete notification channel by id.

        Once a notification channel is deleted it cannot be undeleted.
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Notification (Beta)
  /api/v1/notification/events:
    get:
      operationId: listNotificationEvents
      summary: List notification events
      description: List all notification events.
      parameters:
        - name: from
          in: query
          required: false
          description: |-
            Start date-time in RFC 3339 format.
            Inclusive.
          schema:
            type: string
            format: date-time
            example: 2023-01-01T01:01:01.001Z
        - name: to
          in: query
          required: false
          description: |-
            End date-time in RFC 3339 format.
            Inclusive.
          schema:
            type: string
            format: date-time
            example: 2023-01-01T01:01:01.001Z
        - name: feature
          in: query
          required: false
          description: |-
            Filtering by multiple feature ids or keys.

            Usage: `?feature=feature-1&feature=feature-2`
          schema:
            type: array
            items:
              type: string
        - name: subject
          in: query
          required: false
          description: |-
            Filtering by multiple subject ids or keys.

            Usage: `?subject=subject-1&subject=subject-2`
          schema:
            type: array
            items:
              type: string
        - name: rule
          in: query
          required: false
          description: |-
            Filtering by multiple rule ids.

            Usage: `?rule=01J8J2XYZ2N5WBYK09EDZFBSZM&rule=01J8J4R4VZH180KRKQ63NB2VA5`
          schema:
            type: array
            items:
              type: string
              example: 01G65Z755AFWAKHE12NY0CQ9FH
              pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
              description: ULID (Universally Unique Lexicographically Sortable Identifier).
        - name: channel
          in: query
          required: false
          description: |-
            Filtering by multiple channel ids.

            Usage: `?channel=01J8J4RXH778XB056JS088PCYT&channel=01J8J4S1R1G9EVN62RG23A9M6J`
          schema:
            type: array
            items:
              type: string
              example: 01G65Z755AFWAKHE12NY0CQ9FH
              pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
              description: ULID (Universally Unique Lexicographically Sortable Identifier).
        - $ref: '#/components/parameters/Pagination.page'
        - $ref: '#/components/parameters/Pagination.pageSize'
        - $ref: '#/components/parameters/NotificationEventOrderByOrdering.order'
        - $ref: '#/components/parameters/NotificationEventOrderByOrdering.orderBy'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationEventPaginatedResponse'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Notification (Beta)
  /api/v1/notification/events/{eventId}:
    get:
      operationId: getNotificationEvent
      summary: Get notification event
      description: Get a notification event by id.
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationEvent'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Notification (Beta)
  /api/v1/notification/rules:
    get:
      operationId: listNotificationRules
      summary: List notification rules
      description: List all notification rules.
      parameters:
        - name: includeDeleted
          in: query
          required: false
          description: |-
            Include deleted notification rules in response.

            Usage: `?includeDeleted=true`
          schema:
            type: boolean
            default: false
          explode: false
        - name: includeDisabled
          in: query
          required: false
          description: |-
            Include disabled notification rules in response.

            Usage: `?includeDisabled=false`
          schema:
            type: boolean
            default: false
          explode: false
        - name: feature
          in: query
          required: false
          description: |-
            Filtering by multiple feature ids/keys.

            Usage: `?feature=feature-1&feature=feature-2`
          schema:
            type: array
            items:
              type: string
              minLength: 1
              maxLength: 64
              pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$|^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
              description: |-
                ULID (Universally Unique Lexicographically Sortable Identifier).
                A key is a unique string that is used to identify a resource.

                TODO: this is a temporary solution to support both ULID and Key in the same spec for codegen.
        - name: channel
          in: query
          required: false
          description: |-
            Filtering by multiple notifiaction channel ids.

            Usage: `?channel=01ARZ3NDEKTSV4RRFFQ69G5FAV&channel=01J8J2Y5X4NNGQS32CF81W95E3`
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/Pagination.page'
        - $ref: '#/components/parameters/Pagination.pageSize'
        - $ref: '#/components/parameters/NotificationRuleOrderByOrdering.order'
        - $ref: '#/components/parameters/NotificationRuleOrderByOrdering.orderBy'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRulePaginatedResponse'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Notification (Beta)
    post:
      operationId: createNotificationRule
      summary: Create a notification rule
      description: Create a new notification rule.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRule'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Notification (Beta)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRuleCreateRequest'
  /api/v1/notification/rules/{ruleId}:
    put:
      operationId: updateNotificationRule
      summary: Update a notification rule
      description: Update notification rule.
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRule'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Notification (Beta)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRuleCreateRequest'
    get:
      operationId: getNotificationRule
      summary: Get notification rule
      description: Get a notification rule by id.
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRule'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Notification (Beta)
    delete:
      operationId: deleteNotificationRule
      summary: Delete a notification rule
      description: |-
        Soft delete notification rule by id.

        Once a notification rule is deleted it cannot be undeleted.
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Notification (Beta)
  /api/v1/notification/rules/{ruleId}/test:
    post:
      operationId: testNotificationRule
      description: Test a notification rule by sending a test event with random data.
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationEvent'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Notification (Beta)
  /api/v1/notification/webhook/svix:
    post:
      operationId: receiveSvixOperationalEvent
      summary: Receive Svix operational events
      description: Callback endpoint used by Svix to notify about operational events.
      parameters: []
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Notification (Beta)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SvixOperationalWebhookRequest'
  /api/v1/plans:
    get:
      operationId: listPlans
      summary: List plans
      description: List all plans.
      parameters:
        - name: includeDeleted
          in: query
          required: false
          description: |-
            Include deleted plans in response.

            Usage: `?includeDeleted=true`
          schema:
            type: boolean
            default: false
          explode: false
        - name: id
          in: query
          required: false
          description: Filter by plan.id attribute
          schema:
            type: array
            items:
              type: string
              example: 01G65Z755AFWAKHE12NY0CQ9FH
              pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
              description: ULID (Universally Unique Lexicographically Sortable Identifier).
        - name: key
          in: query
          required: false
          description: Filter by plan.key attribute
          schema:
            type: array
            items:
              type: string
              minLength: 1
              maxLength: 64
              pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
              description: A key is a unique string that is used to identify a resource.
        - name: keyVersion
          in: query
          required: false
          description: Filter by plan.key and plan.version attributes
          schema:
            type: object
            additionalProperties:
              type: array
              items:
                type: integer
          style: deepObject
        - $ref: '#/components/parameters/Pagination.page'
        - $ref: '#/components/parameters/Pagination.pageSize'
        - $ref: '#/components/parameters/PlanOrderByOrdering.order'
        - $ref: '#/components/parameters/PlanOrderByOrdering.orderBy'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanPaginatedResponse'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Plan (Experimental)
    post:
      operationId: createPlan
      summary: Create a plan
      description: Create a new plan.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Plan (Experimental)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanCreate'
  /api/v1/plans/{planIdOrKey}/next:
    post:
      operationId: nextPlan
      summary: New draft plan
      description: |-
        Create a new draft version from plan.
        It returns error if there is already a plan in draft or planId does not reference the latest published version.
      parameters:
        - name: planIdOrKey
          in: path
          required: true
          schema:
            anyOf:
              - type: string
                example: 01G65Z755AFWAKHE12NY0CQ9FH
                pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
                description: ULID (Universally Unique Lexicographically Sortable Identifier).
              - type: string
                minLength: 1
                maxLength: 64
                pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
                description: A key is a unique string that is used to identify a resource.
            x-go-type: string
          x-go-type: string
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Plan (Experimental)
  /api/v1/plans/{planId}:
    put:
      operationId: updatePlan
      summary: Update a plan
      description: Update plan by id.
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Plan (Experimental)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanUpdate'
    get:
      operationId: getPlan
      summary: Get plan
      description: Get a plan by id or key. The latest published version is returned if latter is used.
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            anyOf:
              - type: string
                example: 01G65Z755AFWAKHE12NY0CQ9FH
                pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
                description: ULID (Universally Unique Lexicographically Sortable Identifier).
              - type: string
                minLength: 1
                maxLength: 64
                pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
                description: A key is a unique string that is used to identify a resource.
            x-go-type: string
          x-go-type: string
        - name: includeLatest
          in: query
          required: false
          description: |-
            Include latest version of the Plan instead of the version in active state.

            Usage: `?includeLatest=true`
          schema:
            type: boolean
            default: false
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Plan (Experimental)
    delete:
      operationId: deletePlan
      summary: Delete plan
      description: |-
        Soft delete plan by plan.id.

        Once a plan is deleted it cannot be undeleted.
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Plan (Experimental)
  /api/v1/plans/{planId}/archive:
    post:
      operationId: archivePlan
      summary: Archive plan version
      description: Archive a plan version.
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Plan (Experimental)
  /api/v1/plans/{planId}/phases:
    get:
      operationId: listPlanPhases
      summary: List phases in plan
      description: List all phases in plan.
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: key
          in: query
          required: false
          description: Filter by phase.key attribute
          schema:
            type: array
            items:
              type: string
              minLength: 1
              maxLength: 64
              pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
              description: A key is a unique string that is used to identify a resource.
        - $ref: '#/components/parameters/Pagination.page'
        - $ref: '#/components/parameters/Pagination.pageSize'
        - $ref: '#/components/parameters/PhasesOrderByOrdering.order'
        - $ref: '#/components/parameters/PhasesOrderByOrdering.orderBy'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanPhasePaginatedResponse'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Plan (Experimental)
    post:
      operationId: createPlanPhase
      summary: Create new phase in plan
      description: Create new phase in plan.
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanPhase'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Plan (Experimental)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanPhaseCreate'
  /api/v1/plans/{planId}/phases/{planPhaseKey}:
    put:
      operationId: updatePlanPhase
      summary: Update phase in plan
      description: Update phase in plan.
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: planPhaseKey
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanPhase'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Plan (Experimental)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanPhaseUpdate'
    get:
      operationId: getPlanPhase
      summary: Get phase for plan
      description: Get phase in plan.
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: planPhaseKey
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanPhase'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Plan (Experimental)
    delete:
      operationId: deletePlanPhase
      summary: Delete phase for plan
      description: |-
        Delete phase in plan.

        Once a phase is deleted it cannot be undeleted.
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: planPhaseKey
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Plan (Experimental)
  /api/v1/plans/{planId}/publish:
    post:
      operationId: publishPlan
      summary: Publish plan
      description: Publish a plan version.
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Plan (Experimental)
  /api/v1/portal/meters/{meterSlug}/query:
    get:
      operationId: queryPortalMeter
      parameters:
        - name: meterSlug
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
        - $ref: '#/components/parameters/MeterQuery.from'
        - $ref: '#/components/parameters/MeterQuery.to'
        - $ref: '#/components/parameters/MeterQuery.windowSize'
        - $ref: '#/components/parameters/MeterQuery.windowTimeZone'
        - $ref: '#/components/parameters/MeterQuery.filterGroupBy'
        - $ref: '#/components/parameters/MeterQuery.groupBy'
      description: Query meter for consumer portal. This endpoint is publicly exposable to consumers. Query meter for consumer portal. This endpoint is publicly exposable to consumers.
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeterQueryResult'
            text/csv:
              schema:
                type: string
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Portal
      security:
        - PortalTokenAuth: []
  /api/v1/portal/tokens:
    post:
      operationId: createPortalToken
      description: Create a consumer portal token.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalToken'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Portal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortalToken'
    get:
      operationId: listPortalTokens
      description: List tokens.
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PortalToken'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Portal
  /api/v1/subjects/{subjectIdOrKey}/entitlements:
    post:
      operationId: createEntitlement
      summary: Create an entitlement
      description: |-
        OpenMeter has three types of entitlements: metered, boolean, and static. The type property determines the type of entitlement. The underlying feature has to be compatible with the entitlement type specified in the request (e.g., a metered entitlement needs a feature associated with a meter).

        - Boolean entitlements define static feature access, e.g. "Can use SSO authentication".
        - Static entitlements let you pass along a configuration while granting access, e.g. "Using this feature with X Y settings" (passed in the config).
        - Metered entitlements have many use cases, from setting up usage-based access to implementing complex credit systems.  Example: The customer can use 10000 AI tokens during the usage period of the entitlement.

        A given subject can only have one active (non-deleted) entitlement per featureKey. If you try to create a new entitlement for a featureKey that already has an active entitlement, the request will fail with a 409 error.

        Once an entitlement is created you cannot modify it, only delete it.
      parameters:
        - name: subjectIdOrKey
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entitlement'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '409':
          description: The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ConflictProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntitlementCreateInputs'
    get:
      operationId: listSubjectEntitlements
      description: List all entitlements for a subject. For checking entitlement access, use the /value endpoint instead.
      parameters:
        - name: subjectIdOrKey
          in: path
          required: true
          schema:
            type: string
        - name: includeDeleted
          in: query
          required: false
          schema:
            type: boolean
            default: false
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entitlement'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
  /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants:
    get:
      operationId: listEntitlementGrants
      description: List all grants issued for an entitlement. The entitlement can be defined either by its id or featureKey.
      parameters:
        - name: subjectIdOrKey
          in: path
          required: true
          schema:
            type: string
        - name: entitlementIdOrFeatureKey
          in: path
          required: true
          schema:
            type: string
        - name: includeDeleted
          in: query
          required: false
          schema:
            type: boolean
            default: false
          explode: false
        - name: orderBy
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/GrantOrderBy'
            default: updatedAt
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntitlementGrant'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
    post:
      operationId: createGrant
      description: |-
        Grants define a behavior of granting usage for a metered entitlement. They can have complicated recurrence and rollover rules, thanks to which you can define a wide range of access patterns with a single grant, in most cases you don't have to periodically create new grants. You can only issue grants for active metered entitlements.

        A grant defines a given amount of usage that can be consumed for the entitlement. The grant is in effect between its effective date and its expiration date. Specifying both is mandatory for new grants.

        Grants have a priority setting that determines their order of use. Lower numbers have higher priority, with 0 being the highest priority.

        Grants can have a recurrence setting intended to automate the manual reissuing of grants. For example, a daily recurrence is equal to reissuing that same grant every day (ignoring rollover settings).

        Rollover settings define what happens to the remaining balance of a grant at a reset. Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))

        Grants cannot be changed once created, only deleted. This is to ensure that balance is deterministic regardless of when it is queried.
      parameters:
        - name: subjectIdOrKey
          in: path
          required: true
          schema:
            type: string
        - name: entitlementIdOrFeatureKey
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitlementGrant'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '409':
          description: The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ConflictProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntitlementGrantCreateInput'
  /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/override:
    put:
      operationId: overrideEntitlement
      description: |-
        Overriding an entitlement creates a new entitlement from the provided inputs and soft deletes the previous entitlement for the provided subject-feature pair. If the previous entitlement is already deleted or otherwise doesnt exist, the override will fail.

        This endpoint is useful for upgrades, downgrades, or other changes to entitlements that require a new entitlement to be created with zero downtime.
      parameters:
        - name: subjectIdOrKey
          in: path
          required: true
          schema:
            type: string
        - name: entitlementIdOrFeatureKey
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entitlement'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '409':
          description: The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ConflictProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntitlementCreateInputs'
  /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/value:
    get:
      operationId: getEntitlementValue
      description: |-
        This endpoint should be used for access checks and enforcement. All entitlement types share the hasAccess property in their value response, but multiple other properties are returned based on the entitlement type.

        For convenience reasons, /value works with both entitlementId and featureKey.
      parameters:
        - name: subjectIdOrKey
          in: path
          required: true
          schema:
            type: string
        - name: entitlementIdOrFeatureKey
          in: path
          required: true
          schema:
            type: string
        - name: time
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: 2023-01-01T01:01:01.001Z
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitlementValue'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
  /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}:
    get:
      operationId: getEntitlement
      description: Get entitlement by id. For checking entitlement access, use the /value endpoint instead.
      parameters:
        - name: subjectIdOrKey
          in: path
          required: true
          schema:
            type: string
        - name: entitlementId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entitlement'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
    delete:
      operationId: deleteEntitlement
      description: |-
        Deleting an entitlement revokes access to the associated feature. As a single subject can only have one entitlement per featureKey, when "migrating" features you have to delete the old entitlements as well.
        As access and status checks can be historical queries, deleting an entitlement populates the deletedAt timestamp. When queried for a time before that, the entitlement is still considered active, you cannot have retroactive changes to access, which is important for, among other things, auditing.
      parameters:
        - name: subjectIdOrKey
          in: path
          required: true
          schema:
            type: string
        - name: entitlementId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
  /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history:
    get:
      operationId: getEntitlementHistory
      description: |-
        Returns historical balance and usage data for the entitlement. The queried history can span accross multiple reset events.

        BurndownHistory returns a continous history of segments, where the segments are seperated by events that changed either the grant burndown priority or the usage period.

        WindowedHistory returns windowed usage data for the period enriched with balance information and the list of grants that were being burnt down in that window.
      parameters:
        - name: subjectIdOrKey
          in: path
          required: true
          schema:
            type: string
        - name: entitlementId
          in: path
          required: true
          schema:
            type: string
        - name: from
          in: query
          required: false
          description: 'Start of time range to query entitlement: date-time in RFC 3339 format. Defaults to the last reset. Gets truncated to the granularity of the underlying meter.'
          schema:
            type: string
            format: date-time
            example: 2023-01-01T01:01:01.001Z
        - name: to
          in: query
          required: false
          description: |-
            End of time range to query entitlement: date-time in RFC 3339 format. Defaults to now.
            If not now then gets truncated to the granularity of the underlying meter.
          schema:
            type: string
            format: date-time
            example: 2023-01-01T01:01:01.001Z
        - name: windowSize
          in: query
          required: true
          description: Windowsize
          schema:
            $ref: '#/components/schemas/WindowSize'
        - name: windowTimeZone
          in: query
          required: false
          description: The timezone used when calculating the windows.
          schema:
            type: string
            default: UTC
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WindowedBalanceHistory'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
  /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset:
    post:
      operationId: resetEntitlementUsage
      description: |-
        Reset marks the start of a new usage period for the entitlement and initiates grant rollover. At the start of a period usage is zerod out and grants are rolled over based on their rollover settings. It would typically be synced with the subjects billing period to enforce usage based on their subscription.

        Usage is automatically reset for metered entitlements based on their usage period, but this endpoint allows to manually reset it at any time. When doing so the period anchor of the entitlement can be changed if needed.
      parameters:
        - name: subjectIdOrKey
          in: path
          required: true
          schema:
            type: string
        - name: entitlementId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Entitlements (Beta)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetEntitlementUsageInput'
  /api/v1/subscriptions:
    post:
      operationId: Subscriptions_create
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '409':
          description: The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ConflictProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Subscriptions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscriptionRequestBody'
  /api/v1/subscriptions/{subscriptionId}:
    get:
      operationId: getSubscription
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
        - name: expand
          in: query
          required: false
          schema:
            type: boolean
            enum:
              - false
              - true
          explode: false
        - name: at
          in: query
          required: false
          description: The time at which the subscription should be queried. If not provided the current time is used.
          schema:
            type: string
            format: date-time
            example: 2023-01-01T01:01:01.001Z
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Subscription'
                  - $ref: '#/components/schemas/SubscriptionExpanded'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Subscriptions
    patch:
      operationId: editSubscription
      description: |-
        Batch processing commands for manipulating running subscriptions.
        The key format is `/phases/{phaseKey}` or `/phases/{phaseKey}/items/{itemKey}`.

        Add operations insert a new member based on the creation input without altering the existing members.

        Remove operations remove the member from the collection / document.

        The extend operation extends the specific phase if possible, while delaying all subsequent phases by the same amount.
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '409':
          description: The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ConflictProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Subscriptions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/SubscriptionEditAddUpdateItem'
                  - $ref: '#/components/schemas/SubscriptionEditRemoveUpdateItem'
                  - $ref: '#/components/schemas/SubscriptionEditAdd'
                  - $ref: '#/components/schemas/SubscriptionEditExtend'
                  - $ref: '#/components/schemas/SubscriptionEditRemoveWithValue'
  /api/v1/subscriptions/{subscriptionId}/cancel:
    post:
      operationId: cancelSubscription
      description: Cancels the subscription.
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '409':
          description: The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ConflictProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Subscriptions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                effectiveDate:
                  type: string
                  format: date-time
                  example: 2023-01-01T01:01:01.001Z
                  description: If not provided the subscription is canceled immediately.
  /api/v1/subscriptions/{subscriptionId}/migrate:
    post:
      operationId: migrateSubscription
      description: Migrates the subscripiton to the procided version of the plan.
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '409':
          description: The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ConflictProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Subscriptions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targetVersion:
                  type: integer
                  minimum: 1
              required:
                - targetVersion
  /api/v1/subscriptions/{subscriptionId}/unschedule-cancelation:
    post:
      operationId: unscheduleCancelation
      description: Cancels the scheduled cancelation.
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BadRequestProblemResponse'
        '401':
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedProblemResponse'
        '403':
          description: The server understood the request but refuses to authorize it.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ForbiddenProblemResponse'
        '404':
          description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NotFoundProblemResponse'
        '409':
          description: The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ConflictProblemResponse'
        '500':
          description: The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorProblemResponse'
        '503':
          description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableProblemResponse'
        default:
          description: An unexpected error response.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnexpectedProblemResponse'
      tags:
        - Subscriptions
components:
  parameters:
    BillingInvoiceListParams.expand:
      name: expand
      in: query
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/BillingInvoiceExpand'
        title: What parts of the list output to expand in listings
      explode: false
    BillingInvoiceListParams.extendedStatuses:
      name: extendedStatuses
      in: query
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/BillingInvoiceExtendedStatus'
        title: Filter by invoice extended statuses
      explode: false
    BillingInvoiceListParams.issuedAfter:
      name: issuedAfter
      in: query
      required: false
      schema:
        type: string
        format: date-time
        example: 2023-01-01T01:01:01.001Z
        title: Filter by invoice creation time
      explode: false
    BillingInvoiceListParams.issuedBefore:
      name: issuedBefore
      in: query
      required: false
      schema:
        type: string
        format: date-time
        example: 2023-01-01T01:01:01.001Z
        title: Filter by invoice creation time
      explode: false
    BillingInvoiceListParams.statuses:
      name: statuses
      in: query
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/BillingInvoiceStatus'
        title: Filter by the invoice status
      explode: false
    CustomerOrderByOrdering.order:
      name: order
      in: query
      required: false
      description: The order direction.
      schema:
        $ref: '#/components/schemas/SortOrder'
        default: ASC
      explode: false
    CustomerOrderByOrdering.orderBy:
      name: orderBy
      in: query
      required: false
      description: The order by field.
      schema:
        $ref: '#/components/schemas/CustomerOrderBy'
      explode: false
    CustomerOverrideOrderByOrdering.order:
      name: order
      in: query
      required: false
      description: The order direction.
      schema:
        $ref: '#/components/schemas/SortOrder'
        default: ASC
      explode: false
    CustomerOverrideOrderByOrdering.orderBy:
      name: orderBy
      in: query
      required: false
      description: The order by field.
      schema:
        $ref: '#/components/schemas/BillingCustomerOverrideOrderBy'
      explode: false
    EntitlementOrderByOrdering.order:
      name: order
      in: query
      required: false
      description: The order direction.
      schema:
        $ref: '#/components/schemas/SortOrder'
        default: ASC
      explode: false
    EntitlementOrderByOrdering.orderBy:
      name: orderBy
      in: query
      required: false
      description: The order by field.
      schema:
        $ref: '#/components/schemas/EntitlementOrderBy'
      explode: false
    FeatureOrderByOrdering.order:
      name: order
      in: query
      required: false
      description: The order direction.
      schema:
        $ref: '#/components/schemas/SortOrder'
        default: ASC
      explode: false
    FeatureOrderByOrdering.orderBy:
      name: orderBy
      in: query
      required: false
      description: The order by field.
      schema:
        $ref: '#/components/schemas/FeatureOrderBy'
      explode: false
    GrantOrderByOrdering.order:
      name: order
      in: query
      required: false
      description: The order direction.
      schema:
        $ref: '#/components/schemas/SortOrder'
        default: ASC
      explode: false
    GrantOrderByOrdering.orderBy:
      name: orderBy
      in: query
      required: false
      description: The order by field.
      schema:
        $ref: '#/components/schemas/GrantOrderBy'
      explode: false
    InvoiceOrderByOrdering.order:
      name: order
      in: query
      required: false
      description: The order direction.
      schema:
        $ref: '#/components/schemas/SortOrder'
        default: ASC
      explode: false
    InvoiceOrderByOrdering.orderBy:
      name: orderBy
      in: query
      required: false
      description: The order by field.
      schema:
        $ref: '#/components/schemas/BillingInvoiceOrderBy'
      explode: false
    LimitOffset.limit:
      name: limit
      in: query
      required: false
      description: |-
        Number of items to return.

        Default is 100.
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 100
      explode: false
    LimitOffset.offset:
      name: offset
      in: query
      required: false
      description: |-
        Number of items to skip.

        Default is 0.
      schema:
        type: integer
        minimum: 0
        default: 0
      explode: false
    MarketplaceApiKeyInstallRequest.type:
      name: type
      in: path
      required: true
      description: The type of the app to install.
      schema:
        $ref: '#/components/schemas/AppType'
    MarketplaceOAuth2InstallAuthorizeRequest.type:
      name: type
      in: path
      required: true
      description: The type of the app to install.
      schema:
        $ref: '#/components/schemas/AppType'
    MeterQuery.filterGroupBy:
      name: filterGroupBy
      in: query
      required: false
      description: Simple filter for group bys with exact match.
      schema:
        type: object
        additionalProperties:
          type: string
      style: deepObject
    MeterQuery.from:
      name: from
      in: query
      required: false
      description: |-
        Start date-time in RFC 3339 format.

        Inclusive.
      schema:
        type: string
        format: date-time
        example: 2023-01-01T01:01:01.001Z
    MeterQuery.groupBy:
      name: groupBy
      in: query
      required: false
      description: |-
        If not specified a single aggregate will be returned for each subject and time window.
        `subject` is a reserved group by value.
      schema:
        type: array
        items:
          type: string
    MeterQuery.subject:
      name: subject
      in: query
      required: false
      description: Filtering by multiple subjects.
      schema:
        type: array
        items:
          type: string
    MeterQuery.to:
      name: to
      in: query
      required: false
      description: |-
        End date-time in RFC 3339 format.

        Inclusive.
      schema:
        type: string
        format: date-time
        example: 2023-01-01T01:01:01.001Z
    MeterQuery.windowSize:
      name: windowSize
      in: query
      required: false
      description: If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
      schema:
        $ref: '#/components/schemas/WindowSize'
    MeterQuery.windowTimeZone:
      name: windowTimeZone
      in: query
      required: false
      description: |-
        The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
        If not specified, the UTC timezone will be used.
      schema:
        type: string
        default: UTC
    NotificationChannelOrderByOrdering.order:
      name: order
      in: query
      required: false
      description: The order direction.
      schema:
        $ref: '#/components/schemas/SortOrder'
        default: ASC
      explode: false
    NotificationChannelOrderByOrdering.orderBy:
      name: orderBy
      in: query
      required: false
      description: The order by field.
      schema:
        $ref: '#/components/schemas/NotificationChannelOrderBy'
      explode: false
    NotificationEventOrderByOrdering.order:
      name: order
      in: query
      required: false
      description: The order direction.
      schema:
        $ref: '#/components/schemas/SortOrder'
        default: ASC
      explode: false
    NotificationEventOrderByOrdering.orderBy:
      name: orderBy
      in: query
      required: false
      description: The order by field.
      schema:
        $ref: '#/components/schemas/NotificationEventOrderBy'
      explode: false
    NotificationRuleOrderByOrdering.order:
      name: order
      in: query
      required: false
      description: The order direction.
      schema:
        $ref: '#/components/schemas/SortOrder'
        default: ASC
      explode: false
    NotificationRuleOrderByOrdering.orderBy:
      name: orderBy
      in: query
      required: false
      description: The order by field.
      schema:
        $ref: '#/components/schemas/NotificationRuleOrderBy'
      explode: false
    OAuth2AuthorizationCodeGrantErrorParams.error:
      name: error
      in: query
      required: false
      description: |-
        Error code.
        Required with the error response.
      schema:
        $ref: '#/components/schemas/OAuth2AuthorizationCodeGrantErrorType'
      explode: false
    OAuth2AuthorizationCodeGrantErrorParams.error_description:
      name: error_description
      in: query
      required: false
      description: |-
        Optional human-readable text providing additional information,
        used to assist the client developer in understanding the error that occurred.
      schema:
        type: string
      explode: false
    OAuth2AuthorizationCodeGrantErrorParams.error_uri:
      name: error_uri
      in: query
      required: false
      description: |-
        Optional uri identifying a human-readable web page with
        information about the error, used to provide the client
        developer with additional information about the error
      schema:
        type: string
      explode: false
    OAuth2AuthorizationCodeGrantSuccessParams.code:
      name: code
      in: query
      required: false
      description: |-
        Authorization code which the client will later exchange for an access token.
        Required with the success response.
      schema:
        type: string
      explode: false
    OAuth2AuthorizationCodeGrantSuccessParams.state:
      name: state
      in: query
      required: false
      description: |-
        Required if the "state" parameter was present in the client authorization request.
        The exact value received from the client:

        Unique, randomly generated, opaque, and non-guessable string that is sent
        when starting an authentication request and validated when processing the response.
      schema:
        type: string
      explode: false
    PaginatedQuery.page:
      name: page
      in: query
      required: false
      description: The page number.
      schema:
        type: integer
        default: 1
      explode: false
    PaginatedQuery.pageSize:
      name: pageSize
      in: query
      required: false
      description: The number of items in the page.
      schema:
        type: integer
        default: 100
      explode: false
    Pagination.page:
      name: page
      in: query
      required: false
      description: |-
        Start date-time in RFC 3339 format.

        Inclusive.
      schema:
        type: integer
        minimum: 1
        default: 1
      explode: false
    Pagination.pageSize:
      name: pageSize
      in: query
      required: false
      description: |-
        Number of items per page.

        Default is 100.
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 100
      explode: false
    PhasesOrderByOrdering.order:
      name: order
      in: query
      required: false
      description: The order direction.
      schema:
        $ref: '#/components/schemas/SortOrder'
        default: ASC
      explode: false
    PhasesOrderByOrdering.orderBy:
      name: orderBy
      in: query
      required: false
      description: The order by field.
      schema:
        $ref: '#/components/schemas/PhasesOrderBy'
      explode: false
    PlanOrderByOrdering.order:
      name: order
      in: query
      required: false
      description: The order direction.
      schema:
        $ref: '#/components/schemas/SortOrder'
        default: ASC
      explode: false
    PlanOrderByOrdering.orderBy:
      name: orderBy
      in: query
      required: false
      description: The order by field.
      schema:
        $ref: '#/components/schemas/PlanOrderBy'
      explode: false
    ProfileOrderByOrdering.order:
      name: order
      in: query
      required: false
      description: The order direction.
      schema:
        $ref: '#/components/schemas/SortOrder'
        default: ASC
      explode: false
    ProfileOrderByOrdering.orderBy:
      name: orderBy
      in: query
      required: false
      description: The order by field.
      schema:
        $ref: '#/components/schemas/BillingProfileOrderBy'
      explode: false
    queryCustomerList.includeDeleted:
      name: includeDeleted
      in: query
      required: false
      description: Include deleted customers.
      schema:
        type: boolean
        default: false
      explode: false
    queryCustomerList.name:
      name: name
      in: query
      required: false
      description: |-
        Filter customers by name.
        Case-insensitive partial match.
      schema:
        type: string
      explode: false
    queryCustomerList.primaryEmail:
      name: primaryEmail
      in: query
      required: false
      description: |-
        Filter customers by primary email.
        Case-insensitive partial match.
      schema:
        type: string
      explode: false
    queryCustomerList.subject:
      name: subject
      in: query
      required: false
      description: |-
        Filter customers by usage attribution subject.
        Case-insensitive partial match.
      schema:
        type: string
      explode: false
  schemas:
    Address:
      type: object
      properties:
        country:
          $ref: '#/components/schemas/CountryCode'
        postalCode:
          type: string
        state:
          type: string
        city:
          type: string
        line1:
          type: string
        line2:
          type: string
        phoneNumber:
          type: string
      description: Address
    Annotations:
      type: object
      additionalProperties: {}
      example:
        externalId: 019142cc-a016-796a-8113-1a942fecd26d
      description: Set of key-value pairs managed by the system. Cannot be modified by user.
    App:
      anyOf:
        - $ref: '#/components/schemas/StripeApp'
        - $ref: '#/components/schemas/SandboxApp'
      discriminator:
        propertyName: type
        mapping:
          stripe: '#/components/schemas/StripeApp'
          sandbox: '#/components/schemas/SandboxApp'
      description: |-
        App.
        One of: stripe
    AppBase:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
        - listing
        - status
      properties:
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: A unique identifier for the resource.
          title: ID
          readOnly: true
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        listing:
          allOf:
            - $ref: '#/components/schemas/MarketplaceListing'
          description: The marketplace listing that this installed app is based on.
          readOnly: true
        status:
          allOf:
            - $ref: '#/components/schemas/AppStatus'
          description: Status of the app connection.
          readOnly: true
      description: |-
        Abstract base model for installed apps.

        Represent an app installed to the organization.
        This is an actual instance, with its own configuration and credentials.
    AppCapability:
      type: object
      required:
        - type
        - key
        - name
        - description
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/AppCapabilityType'
          description: The capability type.
        key:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: Key
        name:
          type: string
          description: The capability name.
        description:
          type: string
          description: The capability description.
      example:
        type: collectPayments
        key: stripe_collect_payment
        name: Collect Payments
        description: Stripe payments collects outstanding revenue with Stripe customer's default payment method.
      description: |-
        App capability.

        Capabilities only exist in config so they don't extend the Resource model.
    AppCapabilityType:
      type: string
      enum:
        - reportUsage
        - reportEvents
        - calculateTax
        - invoiceCustomers
        - collectPayments
      description: App capability type.
    AppList:
      type: object
      required:
        - page
        - pageSize
        - totalCount
        - items
      properties:
        page:
          type: integer
          description: The page number.
        pageSize:
          type: integer
          minimum: 1
          maximum: 1000
          description: The number of items in the page.
        totalCount:
          type: integer
          description: The total number of items.
        items:
          type: array
          items:
            $ref: '#/components/schemas/App'
          maxItems: 1000
          description: The items in the page.
      description: A page of results.
    AppReference:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: ULID (Universally Unique Lexicographically Sortable Identifier).
      description: |-
        App reference

        Can be used as a short reference to an app if the full app object is not needed.
    AppStatus:
      type: string
      enum:
        - ready
        - unauthorized
      description: App installed status.
    AppType:
      type: string
      enum:
        - stripe
        - sandbox
      description: Type of the app.
    BadRequestProblemResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/UnexpectedProblemResponse'
      description: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
    BalanceHistoryWindow:
      type: object
      required:
        - period
        - usage
        - balanceAtStart
      properties:
        period:
          $ref: '#/components/schemas/Period'
        usage:
          type: number
          format: double
          example: 100
          description: The total usage of the feature in the period.
          readOnly: true
        balanceAtStart:
          type: number
          format: double
          example: 100
          description: The entitlement balance at the start of the period.
          readOnly: true
      description: The balance history window.
    BillingCreateLineResult:
      type: object
      required:
        - lines
      properties:
        lines:
          type: array
          items:
            $ref: '#/components/schemas/BillingInvoiceLine'
          title: The created line items
      description: Response for creating a pending charge
    BillingCreateLinesRequest:
      type: object
      required:
        - lines
      properties:
        lines:
          type: array
          items:
            $ref: '#/components/schemas/BillingInvoiceLineCreateItem'
          title: The line to create
      description: CreateLinesRequest is the request for creating manual line items.
    BillingCreditNoteOriginalInvoiceRef:
      type: object
      required:
        - type
        - url
      properties:
        type:
          type: string
          enum:
            - credit_node_original_invoice
        issuedAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
          title: IssueAt reflects the time the document was issued.
        number:
          allOf:
            - $ref: '#/components/schemas/BillingInvoiceNumber'
          title: (Serial) Number of the referenced document.
        url:
          type: string
          format: uri
          title: Link to the source document.
      allOf:
        - $ref: '#/components/schemas/BillingGenericDocumentRef'
      description: CreditNoteOriginalInvoiceRef is used to reference the original invoice that a credit note is based on.
    BillingCustomerOverride:
      type: object
      required:
        - createdAt
        - updatedAt
        - workflow
      properties:
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        workflow:
          $ref: '#/components/schemas/BillingCustomerWorkflowOverride'
        billingProfile:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: |-
            The billing profile this override is associated with.

            If not provided, the default billing profile is chosen if available.
      description: Customer specific workflow overrides.
    BillingCustomerOverrideOrderBy:
      type: string
      enum:
        - id
      description: Order by options for customers.
    BillingCustomerWorkflowOverride:
      type: object
      required:
        - createdAt
        - updatedAt
        - id
        - taxApp
        - invoicingApp
        - paymentApp
      properties:
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        collection:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowCollectionSettings'
          title: The collection settings for this workflow
        invoicing:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowInvoicingSettings'
          title: The invoicing settings for this workflow
        payment:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowPaymentSettings'
          title: The payment settings for this workflow
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: A unique identifier for the resource.
          title: ID
          readOnly: true
        taxApp:
          $ref: '#/components/schemas/App'
        invoicingApp:
          $ref: '#/components/schemas/App'
        paymentApp:
          $ref: '#/components/schemas/App'
      description: Customer specific workflow overrides.
    BillingCustomerWorkflowOverrideCreate:
      type: object
      properties:
        collection:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowCollectionSettings'
          title: The collection settings for this workflow
        invoicing:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowInvoicingSettings'
          title: The invoicing settings for this workflow
        payment:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowPaymentSettings'
          title: The payment settings for this workflow
      description: Customer specific workflow overrides.
    BillingDocumentRef:
      type: object
      allOf:
        - $ref: '#/components/schemas/BillingCreditNoteOriginalInvoiceRef'
      description: DocumentRef is used to describe a reference to an existing document (invoice).
    BillingDocumentRefType:
      type: string
      enum:
        - credit_node_original_invoice
      description: DocumentRefType defines the type of document that is being referenced.
    BillingDueDate:
      type: object
      required:
        - dueAt
        - amount
      properties:
        dueAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
          title: When the payment is due.
        notes:
          type: string
          title: Other details to take into account for the due date.
        amount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: How much needs to be paid by the date.
        percent:
          allOf:
            - $ref: '#/components/schemas/Percentage'
          title: Percentage of the total that should be paid by the date.
        currency:
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
          title: If different from the parent document's base currency.
      description: DueDate contains an amount that should be paid by the given date.
    BillingFlatFeeLine:
      type: object
      required:
        - name
        - createdAt
        - updatedAt
        - id
        - status
        - currency
        - total
        - period
        - invoiceAt
        - type
        - amount
        - quantity
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: ULID (Universally Unique Lexicographically Sortable Identifier).
        status:
          $ref: '#/components/schemas/BillingLineStatus'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/BillingLineDiscount'
          title: Discounts applied to this line.
        charges:
          type: array
          items:
            $ref: '#/components/schemas/BillingLineCharge'
          title: Charges applied to this line.
        invoice:
          allOf:
            - $ref: '#/components/schemas/BillingInvoiceReference'
          title: The invoice this item belongs to.
        currency:
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
          title: The currency of this line
        taxes:
          type: array
          items:
            $ref: '#/components/schemas/BillingTaxItem'
          title: Map of taxes to be applied and used in the invoice totals.
        taxConfig:
          type: object
          allOf:
            - $ref: '#/components/schemas/TaxConfig'
          nullable: true
          title: Tax config specify the tax configuration for this line.
        total:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Total sum of the line, including discounts and charges.
          readOnly: true
        period:
          allOf:
            - $ref: '#/components/schemas/BillingPeriod'
          title: Period of the line item applies to for revenue recognition pruposes.
        invoiceAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
          title: The time this line item should be invoiced.
        type:
          type: string
          enum:
            - flat_fee
        amount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Price of the item being sold.
        paymentTerm:
          allOf:
            - $ref: '#/components/schemas/PricePaymentTerm'
          title: Payment term of the line.
          default: in_advance
        quantity:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Quantity of the item being sold.
      description: BillingFlatFeeLine represents a line item that is sold to the customer as a manually added fee.
    BillingFlatFeeLineCreateItem:
      type: object
      required:
        - name
        - currency
        - period
        - invoiceAt
        - type
        - amount
        - quantity
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/BillingLineDiscount'
          title: Discounts applied to this line.
        charges:
          type: array
          items:
            $ref: '#/components/schemas/BillingLineCharge'
          title: Charges applied to this line.
        invoice:
          allOf:
            - $ref: '#/components/schemas/BillingInvoiceReference'
          title: The invoice this item belongs to.
        currency:
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
          title: The currency of this line
        taxConfig:
          type: object
          allOf:
            - $ref: '#/components/schemas/TaxConfig'
          nullable: true
          title: Tax config specify the tax configuration for this line.
        period:
          allOf:
            - $ref: '#/components/schemas/BillingPeriod'
          title: Period of the line item applies to for revenue recognition pruposes.
        invoiceAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
          title: The time this line item should be invoiced.
        type:
          type: string
          enum:
            - flat_fee
        amount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Price of the item being sold.
        paymentTerm:
          allOf:
            - $ref: '#/components/schemas/PricePaymentTerm'
          title: Payment term of the line.
          default: in_advance
        quantity:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Quantity of the item being sold.
      description: BillingFlatFeeLine represents a line item that is sold to the customer as a manually added fee.
    BillingFlatFeeLineCreateOrUpdate:
      type: object
      required:
        - name
        - id
        - currency
        - period
        - invoiceAt
        - type
        - amount
        - quantity
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: ULID (Universally Unique Lexicographically Sortable Identifier).
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/BillingLineDiscount'
          title: Discounts applied to this line.
        charges:
          type: array
          items:
            $ref: '#/components/schemas/BillingLineCharge'
          title: Charges applied to this line.
        invoice:
          allOf:
            - $ref: '#/components/schemas/BillingInvoiceReference'
          title: The invoice this item belongs to.
        currency:
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
          title: The currency of this line
        taxConfig:
          type: object
          allOf:
            - $ref: '#/components/schemas/TaxConfig'
          nullable: true
          title: Tax config specify the tax configuration for this line.
        period:
          allOf:
            - $ref: '#/components/schemas/BillingPeriod'
          title: Period of the line item applies to for revenue recognition pruposes.
        invoiceAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
          title: The time this line item should be invoiced.
        type:
          type: string
          enum:
            - flat_fee
        amount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Price of the item being sold.
        paymentTerm:
          allOf:
            - $ref: '#/components/schemas/PricePaymentTerm'
          title: Payment term of the line.
          default: in_advance
        quantity:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Quantity of the item being sold.
      description: BillingFlatFeeLine represents a line item that is sold to the customer as a manually added fee.
    BillingGenericDocumentRef:
      type: object
      required:
        - type
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/BillingDocumentRefType'
          title: Type of the document referenced.
        reason:
          type: string
          title: Human readable description on why this reference is here or needs to be used.
        description:
          type: string
          title: Additional details about the document.
      description: |-
        Omitted fields:
        period: Tax period in which the referred document had an effect required by some tax regimes and formats.
        stamps: Seals of approval from other organisations that may need to be listed.
        ext: 	Extensions for additional codes that may be required.
      title: DocumentRef is used to describe an existing document or a specific part of it's contents.
    BillingInvoice:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - type
        - supplier
        - customer
        - currency
        - totals
        - status
        - statusDetails
      properties:
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: A unique identifier for the resource.
          title: ID
          readOnly: true
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: |-
            Timestamp of when the resource was last updated.

            For updates the updatedAt field is used to detect conflicts.
          title: Last Update Time
        type:
          $ref: '#/components/schemas/BillingInvoiceType'
        supplier:
          allOf:
            - $ref: '#/components/schemas/BillingParty'
          title: The taxable entity supplying the goods or services.
        customer:
          allOf:
            - $ref: '#/components/schemas/BillingParty'
          title: Legal entity receiving the goods or services.
        number:
          allOf:
            - $ref: '#/components/schemas/BillingInvoiceNumber'
          description: |-
            Number specifies the human readable key used to reference this Invoice.

            The number only gets populated after the invoice had been issued.

            Please note that the number is (depending on the upstream settings) either unique for the
            whole organization or unique for the customer, or in multi (stripe) account setups unique for the
            account.
          title: (Serial) Number of the invoice
        currency:
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
          title: Currency for all invoice totals.
        preceding:
          type: array
          items:
            $ref: '#/components/schemas/BillingDocumentRef'
          title: Key information regarding previous invoices and potentially details as to why they were corrected.
        totals:
          allOf:
            - $ref: '#/components/schemas/BillingInvoiceTotals'
          title: Summary of all the invoice totals, including taxes (calculated).
        status:
          allOf:
            - $ref: '#/components/schemas/BillingInvoiceStatus'
          title: The status of the invoice.
        statusDetails:
          allOf:
            - $ref: '#/components/schemas/BillingInvoiceStatusDetails'
          title: The details of the current invoice status
        issuedAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: |-
            The time the invoice was issued.

            Depending on the status of the invoice this can mean multiple things:
            - draft, gathering: The time the invoice will be issued based on the workflow settings.
            - issued: The time the invoice was issued.
          title: The time the invoice was issued.
        draftUntil:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: |-
            The time until the invoice is in draft status.

            On draft invoice creation it is calculated from the workflow settings.

            If manual approval is required, the draftUntil time is set.
          title: The time until the invoice is in draft status.
        dueAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
          title: Due time of the fulfillment of the invoice.
        period:
          allOf:
            - $ref: '#/components/schemas/BillingPeriod'
          title: The period the invoice covers. If the invoice has no line items, it's not set.
        voidedAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: |-
            The time the invoice was voided.

            If the invoice was voided, this field will be set to the time the invoice was voided.
          title: The time the invoice was voided.
        workflow:
          allOf:
            - $ref: '#/components/schemas/BillingInvoiceWorkflowSettings'
          description: |-
            The workflow associated with the invoice.

            It is always a snapshot of the workflow settings at the time of invoice creation. The
            field is optional as it should be explicitly requested with expand options.
          title: The workflow settings associated with this invoice
        lines:
          type: array
          items:
            $ref: '#/components/schemas/BillingInvoiceLine'
          title: List of invoice lines representing each of the items sold to the customer.
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/BillingInvoiceDiscount'
          title: Discounts or allowances applied to the complete invoice.
        payment:
          allOf:
            - $ref: '#/components/schemas/BillingInvoicePayment'
          title: Information on when, how, and to whom the invoice should be paid.
        validationIssues:
          type: array
          items:
            $ref: '#/components/schemas/BillingValidationIssue'
          title: Validation issues reported by the invoice workflow.
      description: Invoice represents an invoice in the system.
    BillingInvoiceAction:
      type: string
      enum:
        - advance
        - approve
        - delete
        - retry
        - void
      description: BillingInvoiceAction represents the actions that can be performed on an invoice.
    BillingInvoiceCreateInput:
      type: object
      properties:
        IncludePendingLines:
          type: array
          items:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
            description: ULID (Universally Unique Lexicographically Sortable Identifier).
          description: |-
            The pending line items to include in the invoice, if not provided:
            - all line items that have invoice_at < asOf will be included
            - all usage based line items will be included up to asOf, new usage-based line items will be staged for the rest
            of the billing cycle
        AsOf:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: |-
            The time as of which the invoice is created.

            If not provided, the current time is used.
      description: |-
        BillingInvoiceCreateInput is the input for creating an invoice.

        Invoice creation is always based on already pending line items created by the billingCreateLineByCustomer
        operation. Empty invoices are not allowed.
    BillingInvoiceDiscount:
      type: object
      required:
        - amount
      properties:
        base:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Base represents the value used as a base for percent calculations instead of the invoice's sum of lines.
        percent:
          allOf:
            - $ref: '#/components/schemas/Percentage'
          title: Percentage to apply to the base or invoice's sum.
        amount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Amount to apply (calculated if percent present).
        reason:
          type: string
          title: Text description as to why the discount was applied
      description: Discount represents an allowance applied to the complete document independent from the individual lines.
    BillingInvoiceExpand:
      type: string
      enum:
        - '*'
        - lines
        - preceding
        - workflow
        - workflow.apps
      description: InvoiceExpand specifies the parts of the invoice to expand in the list output.
      x-enum-varnames:
        - all
        - lines
        - preceding
        - workflow
        - workflowApps
    BillingInvoiceExtendedStatus:
      type: string
      enum:
        - gathering
        - draft
        - issuing
        - issued
        - draft_created
        - draft_manual_approval_needed
        - draft_validating
        - draft_invalid
        - draft_syncing
        - draft_sync_failed
        - draft_waiting_auto_approval
        - draft_ready_to_issue
        - issuing_syncing
        - issuing_sync_failed
      description: |-
        InvoiceExtendedStatus describes the extended status of an invoice.

        This is used to provide more detailed information about the status of the invoice. Useful for
        troubelshooting invoice workflow issues.
    BillingInvoiceLine:
      anyOf:
        - $ref: '#/components/schemas/BillingUsageBasedLine'
        - $ref: '#/components/schemas/BillingFlatFeeLine'
      discriminator:
        propertyName: type
        mapping:
          usage_based: '#/components/schemas/BillingUsageBasedLine'
          flat_fee: '#/components/schemas/BillingFlatFeeLine'
      description: BillingInvoiceLine represents a line item that is sold to the customer based on a specific (unit) price.
    BillingInvoiceLineCreateItem:
      anyOf:
        - $ref: '#/components/schemas/BillingUsageBasedLineCreateItem'
        - $ref: '#/components/schemas/BillingFlatFeeLineCreateItem'
      discriminator:
        propertyName: type
        mapping:
          usage_based: '#/components/schemas/BillingUsageBasedLineCreateItem'
          flat_fee: '#/components/schemas/BillingFlatFeeLineCreateItem'
      description: BillingInvoiceLine represents a line item that is sold to the customer based on a specific (unit) price.
    BillingInvoiceLineCreateOrUpdate:
      anyOf:
        - $ref: '#/components/schemas/BillingUsageBasedLineCreateOrUpdate'
        - $ref: '#/components/schemas/BillingFlatFeeLineCreateOrUpdate'
      discriminator:
        propertyName: type
        mapping:
          usage_based: '#/components/schemas/BillingUsageBasedLineCreateOrUpdate'
          flat_fee: '#/components/schemas/BillingFlatFeeLineCreateOrUpdate'
      description: BillingInvoiceLine represents a line item that is sold to the customer based on a specific (unit) price.
    BillingInvoiceNumber:
      type: string
      example: INV-2024-01-01-01
      minLength: 1
      maxLength: 256
      description: |-
        InvoiceNumber is a unique identifier for the invoice, generated by the
        invoicing app.

        The uniqueness depends on a lot of factors:
        - app setting (unique per app or unique per customer)
        - multiple app scenarios (multiple apps generating invoices with the same prefix)
    BillingInvoiceOrderBy:
      type: string
      enum:
        - customer.name
        - issuedAt
        - status
        - createdAt
        - updatedAt
      description: InvoiceOrderBy specifies the ordering options for invoice listing.
    BillingInvoicePayment:
      type: object
      properties:
        terms:
          $ref: '#/components/schemas/BillingPaymentTerms'
      description: Payment contains details as to how the invoice should be paid.
    BillingInvoiceReference:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: ULID (Universally Unique Lexicographically Sortable Identifier).
          title: The ID of the invoice.
        number:
          allOf:
            - $ref: '#/components/schemas/BillingInvoiceNumber'
          title: The number of the invoice.
      description: Reference to an invoice.
    BillingInvoiceStatus:
      type: string
      enum:
        - gathering
        - draft
        - issuing
        - issued
      description: InvoiceStatus describes the status of an invoice.
    BillingInvoiceStatusDetails:
      type: object
      required:
        - immutable
        - failed
        - extendedStatus
        - availableActions
      properties:
        immutable:
          type: boolean
          title: Is the invoice editable?
        failed:
          type: boolean
          title: Is the invoice in a failed state?
        extendedStatus:
          allOf:
            - $ref: '#/components/schemas/BillingInvoiceExtendedStatus'
          title: Extended status information for the invoice.
        availableActions:
          type: array
          items:
            $ref: '#/components/schemas/BillingInvoiceAction'
          title: The actions that can be performed on the invoice.
      description: |-
        InvoiceStatusDetails represents the details of the invoice status.

        API users are encouraged to rely on the immutable/failed/avaliableActions fields to determine
        the next steps of the invoice instead of the extendedStatus field.
    BillingInvoiceTotals:
      type: object
      required:
        - sum
        - total
        - totalWithTax
        - payable
      properties:
        sum:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Sum of all line item sums
        discount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Sum of all document level discounts
        charge:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Sum of all document level charges
        taxIncluded:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: If prices include tax, this is the total tax included in the price.
        total:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Sum of all line sums minus the discounts, plus the charges, without tax.
        tax:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Total amount of tax to apply to the invoice.
        totalWithTax:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Grand total after all taxes have been applied.
        rounding:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Rounding amount to apply to the invoice in case the total and payable amounts don't quite match.
        payable:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Total amount to be paid after applying taxes and outlays.
        advance:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Total amount already paid in advance.
        due:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: How much actually needs to be paid now.
      description: Totals contains the summaries of all calculations for the invoice.
    BillingInvoiceType:
      type: string
      enum:
        - standard
        - credit_note
      description: |-
        InvoiceType represents the type of invoice.

        The type of invoice determines the purpose of the invoice and how it should be handled.
    BillingInvoiceWorkflowSettings:
      type: object
      required:
        - sourceBillingProfileID
        - workflow
        - timezone
      properties:
        apps:
          allOf:
            - $ref: '#/components/schemas/BillingProfileAppsOrReference'
          title: The apps that will be used to orchestrate the invoice's workflow.
        sourceBillingProfileID:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: |-
            sourceBillingProfileID is the billing profile on which the workflow was based on.

            The profile is snapshotted on invoice creation, after which it can be altered independently
            of the profile itself.
          title: The billing profile on which the workflow was based on.
        workflow:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowSettings'
          title: The workflow details used by this invoice.
        timezone:
          type: string
          title: Timezone of the invoice's date fields.
      description: |-
        InvoiceWorkflowSettings represents the workflow settings used by the invoice.

        This is a clone of the billing profile's workflow settings at the time of invoice creation
        with customer overrides considered.
    BillingLineCharge:
      type: object
      required:
        - amount
      properties:
        percent:
          allOf:
            - $ref: '#/components/schemas/Percentage'
          description: Percentage if fixed amount not applied
          title: Percent
        amount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          description: Fixed discount amount to apply (calculated if percent present).
          title: Amount
        code:
          type: string
          title: Reason code.
        reason:
          type: string
          title: Text description as to why the discount was applied.
      description: LineCharge represents an amount added to the line, and will be applied before taxes.
    BillingLineDiscount:
      type: object
      required:
        - amount
      properties:
        percent:
          allOf:
            - $ref: '#/components/schemas/Percentage'
          description: Percentage if fixed amount not applied
          title: Percent
        amount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          description: Fixed discount amount to apply (calculated if percent present).
          title: Amount
        code:
          type: string
          title: Reason code.
        reason:
          type: string
          title: Text description as to why the discount was applied.
      description: LineDiscount represents an amount deducted from the line, and will be applied before taxes.
    BillingLineStatus:
      type: string
      enum:
        - valid
        - deleted
        - split
      description: Line status specifies the status of the line.
    BillingParty:
      type: object
      properties:
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: ULID (Universally Unique Lexicographically Sortable Identifier).
          title: ID of the party.
        name:
          type: string
          title: Legal name or representation of the organization.
        taxId:
          allOf:
            - $ref: '#/components/schemas/BillingTaxIdentity'
          title: The entity's legal ID code used for tax purposes. They may have other numbers, but we're only interested in those valid for tax purposes.
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          maxItems: 1
          title: Regular post addresses for where information should be sent if needed.
      description: Party represents a person or business entity.
    BillingPartyCreate:
      type: object
      properties:
        name:
          type: string
          title: Legal name or representation of the organization.
        taxId:
          allOf:
            - $ref: '#/components/schemas/BillingTaxIdentity'
          title: The entity's legal ID code used for tax purposes. They may have other numbers, but we're only interested in those valid for tax purposes.
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          maxItems: 1
          title: Regular post addresses for where information should be sent if needed.
      description: Party represents a person or business entity.
    BillingPaymentTermDueDate:
      type: object
      required:
        - type
        - dueAt
      properties:
        type:
          type: string
          enum:
            - due_date
          title: Type of terms to be applied.
        detail:
          type: string
          title: Text detail of the chosen payment terms.
        notes:
          type: string
          title: Description of the conditions for payment.
        dueAt:
          type: array
          items:
            $ref: '#/components/schemas/BillingDueDate'
          minItems: 1
          title: When the payment is due.
      description: PaymentTermDueDate defines the terms for payment on a specific date.
    BillingPaymentTermInstant:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - instant
          title: Type of terms to be applied.
        detail:
          type: string
          title: Text detail of the chosen payment terms.
        notes:
          type: string
          title: Description of the conditions for payment.
      description: PaymentTermInstant defines the terms for payment on receipt of invoice.
    BillingPaymentTerms:
      anyOf:
        - $ref: '#/components/schemas/BillingPaymentTermInstant'
        - $ref: '#/components/schemas/BillingPaymentTermDueDate'
      description: PaymentTerms defines the terms for payment.
    BillingPeriod:
      type: object
      required:
        - start
        - end
      properties:
        start:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
          title: Start of the period.
        end:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
          title: End of the period.
      description: |-
        Period represents a time range.

        Billing always treats periods as start being inclusive and end being exclusive.
    BillingProfile:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
        - supplier
        - workflow
        - apps
        - default
      properties:
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: A unique identifier for the resource.
          title: ID
          readOnly: true
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: |-
            When the resource was last updated.

            For updates this field must be set to the last update time to detect conflicts.
          title: Last update time of the resource
        supplier:
          allOf:
            - $ref: '#/components/schemas/BillingParty'
          title: The name and contact information for the supplier this billing profile represents
        workflow:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflow'
          title: The billing workflow settings for this profile
        apps:
          allOf:
            - $ref: '#/components/schemas/BillingProfileAppsOrReference'
          title: The applications used by this billing profile
        default:
          type: boolean
          title: Is this the default profile?
      description: Profile represents a billing profile
    BillingProfileAppReferences:
      type: object
      required:
        - tax
        - invoicing
        - payment
      properties:
        tax:
          allOf:
            - $ref: '#/components/schemas/AppReference'
          title: The tax app used for this workflow
        invoicing:
          allOf:
            - $ref: '#/components/schemas/AppReference'
          title: The invoicing app used for this workflow
        payment:
          allOf:
            - $ref: '#/components/schemas/AppReference'
          title: The payment app used for this workflow
      description: ProfileAppsReference represents the references (id, type) to the apps used by a billing profile
    BillingProfileApps:
      type: object
      required:
        - tax
        - invoicing
        - payment
      properties:
        tax:
          $ref: '#/components/schemas/App'
        invoicing:
          $ref: '#/components/schemas/App'
        payment:
          $ref: '#/components/schemas/App'
      description: ProfileApps represents the applications used by a billing profile
    BillingProfileAppsOrReference:
      anyOf:
        - $ref: '#/components/schemas/BillingProfileApps'
        - $ref: '#/components/schemas/BillingProfileAppReferences'
      description: |-
        ProfileAppsOrReference represents the union of ProfileApps and ProfileAppReferences
        for a billing profile.
    BillingProfileCreateAppsInput:
      type: object
      required:
        - tax
        - invoicing
        - payment
      properties:
        tax:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowAppIdOrType'
          title: The tax app used for this workflow
        invoicing:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowAppIdOrType'
          title: The invoicing app used for this workflow
        payment:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowAppIdOrType'
          title: The payment app used for this workflow
      description: ProfileCreateAppsInput represents the input for creating a billing profile's apps
    BillingProfileCreateInput:
      type: object
      required:
        - name
        - supplier
        - workflow
        - default
        - apps
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        supplier:
          allOf:
            - $ref: '#/components/schemas/BillingPartyCreate'
          title: The name and contact information for the supplier this billing profile represents
        workflow:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflow'
          title: The billing workflow settings for this profile
        default:
          type: boolean
          title: Is this the default profile?
        apps:
          $ref: '#/components/schemas/BillingProfileCreateAppsInput'
      description: ProfileCreateInput represents the input for creating a billing profile
    BillingProfileCreateOrUpdate:
      type: object
      required:
        - name
        - updatedAt
        - supplier
        - workflow
        - default
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        updatedAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: |-
            When the resource was last updated.

            For updates this field must be set to the last update time to detect conflicts.
          title: Last update time of the resource
        supplier:
          allOf:
            - $ref: '#/components/schemas/BillingParty'
          title: The name and contact information for the supplier this billing profile represents
        workflow:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflow'
          title: The billing workflow settings for this profile
        default:
          type: boolean
          title: Is this the default profile?
      description: Profile represents a billing profile
    BillingProfileExpand:
      type: string
      enum:
        - apps
        - '*'
      description: ProfileExpand details what profile fields to expand
      x-enum-varnames:
        - apps
        - all
    BillingProfileOrderBy:
      type: string
      enum:
        - createdAt
        - updatedAt
        - default
        - name
      description: ProfileOrderBy specifies the ordering options for profiles
    BillingTaxBehavior:
      type: string
      enum:
        - inclusive
        - exclusive
      description: |-
        TaxBehavior details how the tax item is applied to the base amount.

        Inclusive means the tax is included in the base amount.
        Exclusive means the tax is added to the base amount.
    BillingTaxIdentificationCode:
      type: string
      minLength: 1
      maxLength: 32
      pattern: ^[A-Za-z0-9]+([\.\-\/ _]?[A-Za-z0-9]+)*$
    BillingTaxIdentity:
      type: object
      properties:
        code:
          allOf:
            - $ref: '#/components/schemas/BillingTaxIdentificationCode'
          title: Normalized tax code shown on the original identity document.
      description: Identity stores the details required to identify an entity for tax purposes in a specific country.
    BillingTaxItem:
      type: object
      properties:
        config:
          allOf:
            - $ref: '#/components/schemas/TaxConfig'
          title: Tax provider configuration.
        percent:
          allOf:
            - $ref: '#/components/schemas/Percentage'
          title: |-
            Percent defines the percentage set manually or determined from the rate
            key (calculated if rate present). A nil percent implies that this tax combo
            is **exempt** from tax.
        surcharge:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Some countries require an additional surcharge (calculated if rate present).
        behavior:
          allOf:
            - $ref: '#/components/schemas/BillingTaxBehavior'
          title: Is the tax item inclusive or exclusive of the base amount.
      description: TaxConfig stores the configuration for a tax line relative to an invoice line.
    BillingUsageBasedLine:
      type: object
      required:
        - name
        - createdAt
        - updatedAt
        - id
        - status
        - currency
        - total
        - period
        - invoiceAt
        - type
        - price
        - featureKey
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: ULID (Universally Unique Lexicographically Sortable Identifier).
        status:
          $ref: '#/components/schemas/BillingLineStatus'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/BillingLineDiscount'
          title: Discounts applied to this line.
        charges:
          type: array
          items:
            $ref: '#/components/schemas/BillingLineCharge'
          title: Charges applied to this line.
        invoice:
          allOf:
            - $ref: '#/components/schemas/BillingInvoiceReference'
          title: The invoice this item belongs to.
        currency:
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
          title: The currency of this line
        taxes:
          type: array
          items:
            $ref: '#/components/schemas/BillingTaxItem'
          title: Map of taxes to be applied and used in the invoice totals.
        taxConfig:
          type: object
          allOf:
            - $ref: '#/components/schemas/TaxConfig'
          nullable: true
          title: Tax config specify the tax configuration for this line.
        total:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Total sum of the line, including discounts and charges.
          readOnly: true
        period:
          allOf:
            - $ref: '#/components/schemas/BillingPeriod'
          title: Period of the line item applies to for revenue recognition pruposes.
        invoiceAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
          title: The time this line item should be invoiced.
        type:
          type: string
          enum:
            - usage_based
        price:
          $ref: '#/components/schemas/RateCardUsageBasedPrice'
        featureKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: A key is a unique string that is used to identify a resource.
          title: The feature that the usage is based on.
        quantity:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          title: Quantity of the item being sold.
      description: UsageBasedLine represents a line item that is sold to the customer based on usage.
    BillingUsageBasedLineCreateItem:
      type: object
      required:
        - name
        - currency
        - period
        - invoiceAt
        - type
        - price
        - featureKey
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/BillingLineDiscount'
          title: Discounts applied to this line.
        charges:
          type: array
          items:
            $ref: '#/components/schemas/BillingLineCharge'
          title: Charges applied to this line.
        invoice:
          allOf:
            - $ref: '#/components/schemas/BillingInvoiceReference'
          title: The invoice this item belongs to.
        currency:
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
          title: The currency of this line
        taxConfig:
          type: object
          allOf:
            - $ref: '#/components/schemas/TaxConfig'
          nullable: true
          title: Tax config specify the tax configuration for this line.
        period:
          allOf:
            - $ref: '#/components/schemas/BillingPeriod'
          title: Period of the line item applies to for revenue recognition pruposes.
        invoiceAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
          title: The time this line item should be invoiced.
        type:
          type: string
          enum:
            - usage_based
        price:
          $ref: '#/components/schemas/RateCardUsageBasedPrice'
        featureKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: A key is a unique string that is used to identify a resource.
          title: The feature that the usage is based on.
      description: UsageBasedLine represents a line item that is sold to the customer based on usage.
    BillingUsageBasedLineCreateOrUpdate:
      type: object
      required:
        - name
        - id
        - currency
        - period
        - invoiceAt
        - type
        - price
        - featureKey
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: ULID (Universally Unique Lexicographically Sortable Identifier).
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/BillingLineDiscount'
          title: Discounts applied to this line.
        charges:
          type: array
          items:
            $ref: '#/components/schemas/BillingLineCharge'
          title: Charges applied to this line.
        invoice:
          allOf:
            - $ref: '#/components/schemas/BillingInvoiceReference'
          title: The invoice this item belongs to.
        currency:
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
          title: The currency of this line
        taxConfig:
          type: object
          allOf:
            - $ref: '#/components/schemas/TaxConfig'
          nullable: true
          title: Tax config specify the tax configuration for this line.
        period:
          allOf:
            - $ref: '#/components/schemas/BillingPeriod'
          title: Period of the line item applies to for revenue recognition pruposes.
        invoiceAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
          title: The time this line item should be invoiced.
        type:
          type: string
          enum:
            - usage_based
        price:
          $ref: '#/components/schemas/RateCardUsageBasedPrice'
        featureKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: A key is a unique string that is used to identify a resource.
          title: The feature that the usage is based on.
      description: UsageBasedLine represents a line item that is sold to the customer based on usage.
    BillingValidationIssue:
      type: object
      required:
        - severity
        - component
        - message
      properties:
        severity:
          allOf:
            - $ref: '#/components/schemas/BillingValidationIssueSeverity'
          title: The severity of the issue.
        field:
          type: string
          title: The field that the issue is related to, if available in JSON path format.
        code:
          type: string
          title: Machine indentifiable code for the issue, if available.
        component:
          type: string
          title: Component reporting the issue.
        message:
          type: string
          title: A human-readable description of the issue.
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          title: Metadata
      description: |-
        ValidationIssue captures any validation issues related to the invoice.

        Issues with severity "critical" will prevent the invoice from being issued.
    BillingValidationIssueSeverity:
      type: string
      enum:
        - critical
        - warning
      description: |-
        ValidationIssueSeverity describes the severity of a validation issue.

        Issues with severity "critical" will prevent the invoice from being issued.
    BillingVoidInvoiceAction:
      type: object
      required:
        - percentage
        - action
      properties:
        percentage:
          allOf:
            - $ref: '#/components/schemas/Percentage'
          title: How much of the total line items to be voided? (e.g. 100% means all charges are voided)
        action:
          allOf:
            - $ref: '#/components/schemas/BillingVoidInvoiceLineAction'
          title: 'How to handle the voided line items, default: pending'
      description: InvoiceVoidAction describes how to handle the voided line items.
    BillingVoidInvoiceInput:
      type: object
      required:
        - action
        - reason
        - overrides
      properties:
        action:
          allOf:
            - $ref: '#/components/schemas/BillingVoidInvoiceAction'
          description: The action to take on the voided line items.
          title: The action to take on the voided lines.
        reason:
          type: string
          description: The reason for voiding the invoice.
          title: The reason for voiding the invoice
        overrides:
          type: array
          items:
            $ref: '#/components/schemas/BillingVoidInvoiceLineOverride'
          nullable: true
          description: |-
            Per line item overrides for the action.

            If not specified, the `action` will be applied to all line items.
      description: Request to void an invoice
    BillingVoidInvoiceLineAction:
      type: string
      enum:
        - discard
        - pending
        - pending_next_cycle
      description: VoidInvoiceLineAction describes how to handle the voidied line item in the invoice.
    BillingVoidInvoiceLineOverride:
      type: object
      required:
        - lineId
        - action
      properties:
        lineId:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: ULID (Universally Unique Lexicographically Sortable Identifier).
          title: The line item ID to override
        action:
          allOf:
            - $ref: '#/components/schemas/BillingVoidInvoiceAction'
          title: The action to take on the line item
      description: VoidInvoiceLineOverride describes how to handle a specific line item in the invoice when voiding.
    BillingWorkflow:
      type: object
      required:
        - createdAt
        - updatedAt
        - id
      properties:
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        collection:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowCollectionSettings'
          title: The collection settings for this workflow
        invoicing:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowInvoicingSettings'
          title: The invoicing settings for this workflow
        payment:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowPaymentSettings'
          title: The payment settings for this workflow
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: A unique identifier for the resource.
          title: ID
          readOnly: true
      description: Workflow represents a billing workflow
    BillingWorkflowAppIdOrType:
      type: string
      description: |-
        AppIdOrType can be used to reference an app during creation only.

        This can be either an AppType or the ULID of an app.
    BillingWorkflowAppReferenceType:
      type: string
      enum:
        - app_id
        - app_type
      description: App reference type specifies the type of reference inside an app reference
    BillingWorkflowCollectionAlignment:
      type: string
      enum:
        - subscription
      description: |-
        CollectionAlignment specifies when the pending line items should be collected into
        an invoice.
      title: Collection alignment
    BillingWorkflowCollectionMethod:
      type: string
      enum:
        - charge_automatically
        - send_invoice
      description: CollectionMethod specifies how the invoice should be collected (automatic vs manual)
      title: Collection method
    BillingWorkflowCollectionSettings:
      type: object
      properties:
        alignment:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowCollectionAlignment'
          description: When to collect the pending line items into an invoice.
          default: subscription
        interval:
          type: string
          format: ISO8601
          example: P1D
          description: The interval for collecting the pending line items into an invoice.
          default: PT1H
      description: Workflow collection specifies how to collect the pending line items for an invoice
    BillingWorkflowInvoicingSettings:
      type: object
      properties:
        autoAdvance:
          type: boolean
          description: Whether to automatically issue the invoice after the draftPeriod has passed.
          default: true
        draftPeriod:
          type: string
          format: ISO8601
          example: P1D
          description: The period for the invoice to be kept in draft status for manual reviews.
          default: P1D
        dueAfter:
          type: string
          format: ISO8601
          example: P1D
          description: The period after which the invoice is due.
          default: P7D
      description: WorkflowInvoice represents the invoice settings for a billing workflow
      title: Workflow invoice settings
    BillingWorkflowLineResolution:
      type: string
      enum:
        - day
        - period
      description: LineResolution specifies how the line items should be resolved in the invoice
      title: Item resolution
    BillingWorkflowPaymentSettings:
      type: object
      properties:
        collectionMethod:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowCollectionMethod'
          default: charge_automatically
      description: WorkflowPaymentSettings represents the payment settings for a billing workflow
      title: Workflow payment settings
    BillingWorkflowSettings:
      type: object
      properties:
        collection:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowCollectionSettings'
          title: The collection settings for this workflow
        invoicing:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowInvoicingSettings'
          title: The invoicing settings for this workflow
        payment:
          allOf:
            - $ref: '#/components/schemas/BillingWorkflowPaymentSettings'
          title: The payment settings for this workflow
      description: WorkflowSettings represents the settings for a billing workflow.
    CheckoutSessionCustomTextAfterSubmitParams:
      type: object
      properties:
        afterSubmit:
          type: object
          properties:
            message:
              type: string
        shippingAddress:
          type: object
          properties:
            message:
              type: string
        submit:
          type: object
          properties:
            message:
              type: string
        termsOfServiceAcceptance:
          type: object
          properties:
            message:
              type: string
      description: Stripe CheckoutSession.custom_text
    CheckoutSessionUIMode:
      type: string
      enum:
        - embedded
        - hosted
      description: Stripe CheckoutSession.ui_mode
    ClientAppStartResponse:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          description: The URL to start the OAuth2 authorization code grant flow.
      description: Response from the client app (OpenMeter backend) to start the OAuth2 flow.
    ConflictProblemResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/UnexpectedProblemResponse'
      description: The request could not be completed due to a conflict with the current state of the target resource.
    CountryCode:
      type: string
      example: US
      minLength: 2
      maxLength: 2
      pattern: ^[A-Z]{2}$
      description: |-
        [ISO 3166-1](https://www.iso.org/iso-3166-country-codes.html) alpha-2 country code.
        Custom two-letter country codes are also supported for convenience.
    CreateStripeCheckoutSessionRequest:
      type: object
      required:
        - customer
        - options
      properties:
        appId:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: If not provided, the default Stripe app is used if any.
        customer:
          anyOf:
            - $ref: '#/components/schemas/CustomerId'
            - $ref: '#/components/schemas/Customer'
          description: |-
            Provide a customer ID to use an existing OpenMeter customer.
            or provide a customer object to create a new customer.
        stripeCustomerId:
          type: string
          description: |-
            Stripe customer ID.
            If not provided OpenMeter creates a new Stripe customer or
            uses the OpenMeter customer's default Stripe customer ID.
        options:
          allOf:
            - $ref: '#/components/schemas/CreateStripeCheckoutSessionRequestOptions'
          description: Options passed to Stripe when creating the checkout session.
      description: Create Stripe checkout session request.
    CreateStripeCheckoutSessionRequestOptions:
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        cancelURL:
          type: string
        clientReferenceID:
          type: string
        customText:
          $ref: '#/components/schemas/CheckoutSessionCustomTextAfterSubmitParams'
        metadata:
          type: object
          additionalProperties:
            type: string
        returnURL:
          type: string
        successURL:
          type: string
        uiMode:
          $ref: '#/components/schemas/CheckoutSessionUIMode'
        paymentMethodTypes:
          type: array
          items:
            type: string
      description: Create Stripe checkout session options
    CreateStripeCheckoutSessionResult:
      type: object
      required:
        - customerId
        - stripeCustomerId
        - sessionId
        - setupIntentId
        - url
        - mode
      properties:
        customerId:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: The OpenMeter customer ID.
        stripeCustomerId:
          type: string
          description: The Stripe customer ID.
        sessionId:
          type: string
          description: The checkout session ID.
        setupIntentId:
          type: string
          description: The checkout session setup intent ID.
        url:
          type: string
          description: URL to show the checkout session.
        mode:
          allOf:
            - $ref: '#/components/schemas/StripeCheckoutSessionMode'
          description: |-
            Mode
            Always `setup` for now.
        cancelURL:
          type: string
          description: Cancel URL.
        successURL:
          type: string
          description: Success URL.
        returnURL:
          type: string
          description: Return URL.
      description: Create Stripe Checkout Session response.
    CreateSubscriptionRequestBody:
      type: object
      required:
        - customerId
        - plan
        - currency
        - activeFrom
        - customizations
      properties:
        customerId:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: ULID (Universally Unique Lexicographically Sortable Identifier).
        plan:
          type: object
          properties:
            key:
              type: string
              minLength: 1
              maxLength: 64
              pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
              description: A key is a unique string that is used to identify a resource.
            version:
              type: integer
          required:
            - key
            - version
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        activeFrom:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
        customizations:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/SubscriptionEditAddItem'
              - $ref: '#/components/schemas/SubscriptionEditRemoveItem'
          maxItems: 100
          description: |-
            Batch processing commands for customizing the susbcription.
            The key format is `/phases/{phaseKey}/items/{itemKey}`.

            Add operations insert a new member based on the creation input without altering the existing members.

            Remove operations remove the member from the document.
      description: Create subscription request body.
    CurrencyCode:
      type: string
      example: USD
      minLength: 3
      maxLength: 3
      pattern: ^[A-Z]{3}$
      description: |-
        Three-letter [ISO4217](https://www.iso.org/iso-4217-currency-codes.html) currency code.
        Custom three-letter currency codes are also supported for convenience.
    Customer:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
        - usageAttribution
      properties:
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: A unique identifier for the resource.
          title: ID
          readOnly: true
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        timezone:
          type: string
          description: Timezone of the customer.
          title: Timezone
        usageAttribution:
          allOf:
            - $ref: '#/components/schemas/CustomerUsageAttribution'
          description: Mapping to attribute metered usage to the customer
          title: Usage Attribution
        primaryEmail:
          type: string
          description: The primary email address of the customer.
          title: Primary Email
        currency:
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
          description: |-
            Currency of the customer.
            Used for billing, tax and invoicing.
          title: Currency
        billingAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
          description: |-
            The billing address of the customer.
            Used for tax and invoicing.
          title: Billing Address
        external:
          allOf:
            - $ref: '#/components/schemas/CustomerExternalMapping'
          description: External mappings for the customer.
          title: External Mappings
      example:
        id: 01G65Z755AFWAKHE12NY0CQ9FH
        name: ACME Inc.
        usageAttribution:
          subjectKeys:
            - my_subject_key
        external:
          stripeCustomerId: cus_xxxxxxxxxxxxxx
        createdAt: 2024-01-01T01:01:01.001Z
        updatedAt: 2024-01-01T01:01:01.001Z
      description: A customer object.
    CustomerExternalMapping:
      type: object
      properties:
        stripeCustomerId:
          type: string
          description: |-
            The Stripe customer ID.
            Mapping to a Stripe Customer object.
            Required to use Stripe as an invocing provider.
          title: Stripe Customer
      description: External mappings for the customer.
    CustomerId:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: ULID (Universally Unique Lexicographically Sortable Identifier).
      description: Create Stripe checkout session customer ID.
    CustomerList:
      type: object
      required:
        - page
        - pageSize
        - totalCount
        - items
      properties:
        page:
          type: integer
          description: The page number.
        pageSize:
          type: integer
          minimum: 1
          maximum: 1000
          description: The number of items in the page.
        totalCount:
          type: integer
          description: The total number of items.
        items:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
          maxItems: 1000
          description: The items in the page.
      description: A page of results.
    CustomerOrderBy:
      type: string
      enum:
        - id
        - name
        - createdAt
      description: Order by options for customers.
    CustomerOverridePaginatedResponse:
      type: object
      required:
        - totalCount
        - page
        - pageSize
        - items
      properties:
        totalCount:
          type: integer
          example: 500
          description: The items in the current page.
        page:
          type: integer
          example: 1
          description: The items in the current page.
        pageSize:
          type: integer
          example: 100
          description: The items in the current page.
        items:
          type: array
          items:
            $ref: '#/components/schemas/BillingCustomerOverride'
          description: The items in the current page.
      description: Paginated response
    CustomerUsageAttribution:
      type: object
      required:
        - subjectKeys
      properties:
        subjectKeys:
          type: array
          items:
            type: string
          minItems: 1
          maxItems: 1
          description: The subjects that are attributed to the customer.
          title: SubjectKeys
      description: |-
        Mapping to attribute metered usage to the customer.
        One customer can have multiple subjects,
        but one subject can only belong to one customer.
    Discount:
      type: object
      allOf:
        - $ref: '#/components/schemas/DiscountPercentage'
      description: |-
        A discount on a price.
        One of: percentage, amount, or usage.
    DiscountPercentage:
      type: object
      required:
        - type
        - percentage
      properties:
        type:
          type: string
          enum:
            - percentage
          description: The type of the discount.
          title: Type
        percentage:
          type: number
          minimum: 0
          maximum: 100
          description: The percentage of the discount.
          title: Percentage
        rateCards:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 64
            pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
            description: A key is a unique string that is used to identify a resource.
          description: |-
            The rate cards that the discount applies to.
            When not specified, the discount applies to all rate cards.
          title: Discounted RateCards
      description: Percentage discount.
    DiscountPercentageUpdateItem:
      type: object
      required:
        - percentage
      properties:
        percentage:
          type: number
          minimum: 0
          maximum: 100
          description: The percentage of the discount.
          title: Percentage
        rateCards:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 64
            pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
            description: A key is a unique string that is used to identify a resource.
          description: |-
            The rate cards that the discount applies to.
            When not specified, the discount applies to all rate cards.
          title: Discounted RateCards
      description: Percentage discount.
    DiscountType:
      type: string
      enum:
        - percentage
      description: The type of the discount.
    DiscountUpdateItem:
      type: object
      allOf:
        - $ref: '#/components/schemas/DiscountPercentageUpdateItem'
      description: |-
        A discount on a price.
        One of: percentage, amount, or usage.
    Entitlement:
      anyOf:
        - $ref: '#/components/schemas/EntitlementMetered'
        - $ref: '#/components/schemas/EntitlementStatic'
        - $ref: '#/components/schemas/EntitlementBoolean'
      discriminator:
        propertyName: type
        mapping:
          metered: '#/components/schemas/EntitlementMetered'
          static: '#/components/schemas/EntitlementStatic'
          boolean: '#/components/schemas/EntitlementBoolean'
      description: |-
        Entitlement templates are used to define the entitlements of a plan.
        Features are omitted from the entitlement template, as they are defined in the rate card.
    EntitlementBaseTemplate:
      type: object
      required:
        - createdAt
        - updatedAt
        - id
        - type
        - subjectKey
        - featureKey
        - featureId
      properties:
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the feature.
        id:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: Readonly unique ULID identifier.
          readOnly: true
        type:
          allOf:
            - $ref: '#/components/schemas/EntitlementType'
          description: The type of the entitlement.
          title: Type
        subjectKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: The identifier key unique to the subject
          example: customer-1
        featureKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: The feature the subject is entitled to use.
          example: example-feature-key
        featureId:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: The feature the subject is entitled to use.
        currentUsagePeriod:
          allOf:
            - $ref: '#/components/schemas/Period'
          description: The current usage period.
        usagePeriod:
          allOf:
            - $ref: '#/components/schemas/RecurringPeriod'
          description: The defined usage period of the entitlement
      description: Shared fields of the entitlement templates.
    EntitlementBoolean:
      type: object
      required:
        - type
        - createdAt
        - updatedAt
        - id
        - subjectKey
        - featureKey
        - featureId
      properties:
        type:
          type: string
          enum:
            - boolean
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the feature.
        id:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: Readonly unique ULID identifier.
          readOnly: true
        subjectKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: The identifier key unique to the subject
          example: customer-1
        featureKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: The feature the subject is entitled to use.
          example: example-feature-key
        featureId:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: The feature the subject is entitled to use.
        currentUsagePeriod:
          allOf:
            - $ref: '#/components/schemas/Period'
          description: The current usage period.
        usagePeriod:
          allOf:
            - $ref: '#/components/schemas/RecurringPeriod'
          description: The defined usage period of the entitlement
      allOf:
        - $ref: '#/components/schemas/EntitlementBaseTemplate'
      description: Entitlement template of a boolean entitlement.
    EntitlementBooleanCreateInputs:
      type: object
      required:
        - type
      properties:
        featureKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: |-
            The feature the subject is entitled to use.
            Either featureKey or featureId is required.
          example: example-feature-key
        featureId:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: |-
            The feature the subject is entitled to use.
            Either featureKey or featureId is required.
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the feature.
        usagePeriod:
          allOf:
            - $ref: '#/components/schemas/RecurringPeriodCreateInput'
          description: The usage period associated with the entitlement.
        type:
          type: string
          enum:
            - boolean
      description: Create inputs for boolean entitlement
    EntitlementCreateInputs:
      anyOf:
        - $ref: '#/components/schemas/EntitlementMeteredCreateInputs'
        - $ref: '#/components/schemas/EntitlementStaticCreateInputs'
        - $ref: '#/components/schemas/EntitlementBooleanCreateInputs'
      discriminator:
        propertyName: type
        mapping:
          metered: '#/components/schemas/EntitlementMeteredCreateInputs'
          static: '#/components/schemas/EntitlementStaticCreateInputs'
          boolean: '#/components/schemas/EntitlementBooleanCreateInputs'
      description: Create inputs for entitlement
    EntitlementCreateSharedFields:
      type: object
      properties:
        featureKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: |-
            The feature the subject is entitled to use.
            Either featureKey or featureId is required.
          example: example-feature-key
        featureId:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: |-
            The feature the subject is entitled to use.
            Either featureKey or featureId is required.
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the feature.
        usagePeriod:
          allOf:
            - $ref: '#/components/schemas/RecurringPeriodCreateInput'
          description: The usage period associated with the entitlement.
      description: Shared fields for entitlement creation
    EntitlementGrant:
      type: object
      required:
        - createdAt
        - updatedAt
        - amount
        - effectiveAt
        - expiration
        - id
        - entitlementId
      properties:
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        amount:
          type: number
          format: double
          example: 100
          minimum: 0
          description: The amount to grant. Should be a positive number.
        priority:
          type: integer
          format: uint8
          example: 1
          minimum: 1
          maximum: 255
          description: |-
            The priority of the grant. Grants with higher priority are applied first.
            Priority is a positive decimal numbers. With lower numbers indicating higher importance.
            For example, a priority of 1 is more urgent than a priority of 2.
            When there are several grants available for the same subject, the system selects the grant with the highest priority.
            In cases where grants share the same priority level, the grant closest to its expiration will be used first.
            In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
        effectiveAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: Effective date for grants and anchor for recurring grants. Provided value will be ceiled to metering windowSize (minute).
        expiration:
          allOf:
            - $ref: '#/components/schemas/ExpirationPeriod'
          description: The grant expiration definition
        maxRolloverAmount:
          type: number
          format: double
          example: 100
          description: |-
            Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
            Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
          default: 0
        minRolloverAmount:
          type: number
          format: double
          example: 100
          description: |-
            Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
            Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
          default: 0
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          example:
            stripePaymentId: pi_4OrAkhLvyihio9p51h9iiFnB
          description: The grant metadata.
        id:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: Readonly unique ULID identifier.
          readOnly: true
        entitlementId:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          description: The unique entitlement ULID that the grant is associated with.
          readOnly: true
        nextRecurrence:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: The next time the grant will recurr.
        expiresAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: The time the grant expires.
          readOnly: true
        voidedAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: The time the grant was voided.
        recurrence:
          allOf:
            - $ref: '#/components/schemas/RecurringPeriod'
          description: The recurrence period of the grant.
      description: The grant.
    EntitlementGrantCreateInput:
      type: object
      required:
        - amount
        - effectiveAt
        - expiration
      properties:
        amount:
          type: number
          format: double
          example: 100
          minimum: 0
          description: The amount to grant. Should be a positive number.
        priority:
          type: integer
          format: uint8
          example: 1
          minimum: 1
          maximum: 255
          description: |-
            The priority of the grant. Grants with higher priority are applied first.
            Priority is a positive decimal numbers. With lower numbers indicating higher importance.
            For example, a priority of 1 is more urgent than a priority of 2.
            When there are several grants available for the same subject, the system selects the grant with the highest priority.
            In cases where grants share the same priority level, the grant closest to its expiration will be used first.
            In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
        effectiveAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: Effective date for grants and anchor for recurring grants. Provided value will be ceiled to metering windowSize (minute).
        expiration:
          allOf:
            - $ref: '#/components/schemas/ExpirationPeriod'
          description: The grant expiration definition
        maxRolloverAmount:
          type: number
          format: double
          example: 100
          description: |-
            Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
            Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
          default: 0
        minRolloverAmount:
          type: number
          format: double
          example: 100
          description: |-
            Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
            Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
          default: 0
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          example:
            stripePaymentId: pi_4OrAkhLvyihio9p51h9iiFnB
          description: The grant metadata.
        recurrence:
          allOf:
            - $ref: '#/components/schemas/RecurringPeriodCreateInput'
          description: The subject of the grant.
      description: The grant creation input.
    EntitlementMetered:
      type: object
      required:
        - type
        - createdAt
        - updatedAt
        - id
        - subjectKey
        - featureKey
        - featureId
        - lastReset
        - currentUsagePeriod
        - measureUsageFrom
        - usagePeriod
      properties:
        type:
          type: string
          enum:
            - metered
        isSoftLimit:
          type: boolean
          description: If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.
          title: Soft limit
          default: false
        isUnlimited:
          type: boolean
          description: Deprecated, ignored by the backend. Please use isSoftLimit instead; this field will be removed in the future.
          deprecated: true
          default: false
        issueAfterReset:
          type: number
          format: double
          minimum: 0
          description: |-
            You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance.
            If an amount is specified here, a grant will be created alongside the entitlement with the specified amount.
            That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.
            Manually creating such a grant would mean having the "amount", "minRolloverAmount", and "maxRolloverAmount" fields all be the same.
          title: Initial grant amount
        issueAfterResetPriority:
          type: integer
          format: uint8
          minimum: 1
          maximum: 255
          description: Defines the grant priority for the default grant.
          title: Issue grant after reset priority
          default: 1
        preserveOverageAtReset:
          type: boolean
          description: If true, the overage is preserved at reset. If false, the usage is reset to 0.
          title: Preserve overage at reset
          default: false
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the feature.
        id:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: Readonly unique ULID identifier.
          readOnly: true
        subjectKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: The identifier key unique to the subject
          example: customer-1
        featureKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: The feature the subject is entitled to use.
          example: example-feature-key
        featureId:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: The feature the subject is entitled to use.
        lastReset:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: The time the last reset happened.
          readOnly: true
        currentUsagePeriod:
          allOf:
            - $ref: '#/components/schemas/Period'
          description: The current usage period.
          readOnly: true
        measureUsageFrom:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: The time from which usage is measured. If not specified on creation, defaults to entitlement creation time.
          readOnly: true
        usagePeriod:
          allOf:
            - $ref: '#/components/schemas/RecurringPeriod'
          description: THe usage period of the entitlement.
          readOnly: true
      description: |-
        Metered entitlements are useful for many different use cases, from setting up usage based access to implementing complex credit systems.
        Access is determined based on feature usage using a balance calculation (the "usage allowance" provided by the issued grants is "burnt down" by the usage).
    EntitlementMeteredCalculatedFields:
      type: object
      required:
        - lastReset
        - currentUsagePeriod
        - measureUsageFrom
        - usagePeriod
      properties:
        lastReset:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: The time the last reset happened.
          readOnly: true
        currentUsagePeriod:
          allOf:
            - $ref: '#/components/schemas/Period'
          description: The current usage period.
          readOnly: true
        measureUsageFrom:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: The time from which usage is measured. If not specified on creation, defaults to entitlement creation time.
          readOnly: true
        usagePeriod:
          allOf:
            - $ref: '#/components/schemas/RecurringPeriod'
          description: THe usage period of the entitlement.
          readOnly: true
      description: Calculated fields for metered entitlements.
    EntitlementMeteredCreateInputs:
      type: object
      required:
        - type
        - usagePeriod
      properties:
        featureKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: |-
            The feature the subject is entitled to use.
            Either featureKey or featureId is required.
          example: example-feature-key
        featureId:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: |-
            The feature the subject is entitled to use.
            Either featureKey or featureId is required.
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the feature.
        type:
          type: string
          enum:
            - metered
        isSoftLimit:
          type: boolean
          description: If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.
          title: Soft limit
          default: false
        isUnlimited:
          type: boolean
          description: Deprecated, ignored by the backend. Please use isSoftLimit instead; this field will be removed in the future.
          deprecated: true
          default: false
        usagePeriod:
          allOf:
            - $ref: '#/components/schemas/RecurringPeriodCreateInput'
          description: The usage period associated with the entitlement.
        measureUsageFrom:
          allOf:
            - $ref: '#/components/schemas/MeasureUsageFrom'
          description: Defines the time from which usage is measured. If not specified on creation, defaults to entitlement creation time.
        issueAfterReset:
          type: number
          format: double
          minimum: 0
          description: |-
            You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance.
            If an amount is specified here, a grant will be created alongside the entitlement with the specified amount.
            That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.
            Manually creating such a grant would mean having the "amount", "minRolloverAmount", and "maxRolloverAmount" fields all be the same.
          title: Initial grant amount
        issueAfterResetPriority:
          type: integer
          format: uint8
          minimum: 1
          maximum: 255
          description: Defines the grant priority for the default grant.
          title: Issue grant after reset priority
          default: 1
        preserveOverageAtReset:
          type: boolean
          description: If true, the overage is preserved at reset. If false, the usage is reset to 0.
          title: Preserve overage at reset
          default: false
      description: Create inpurs for metered entitlement
    EntitlementOrderBy:
      type: string
      enum:
        - createdAt
        - updatedAt
      description: Order by options for entitlements.
    EntitlementPaginatedResponse:
      type: object
      required:
        - totalCount
        - page
        - pageSize
        - items
      properties:
        totalCount:
          type: integer
          example: 500
          description: The items in the current page.
        page:
          type: integer
          example: 1
          description: The items in the current page.
        pageSize:
          type: integer
          example: 100
          description: The items in the current page.
        items:
          type: array
          items:
            $ref: '#/components/schemas/Entitlement'
          description: The items in the current page.
      description: Paginated response
    EntitlementStatic:
      type: object
      required:
        - type
        - config
        - createdAt
        - updatedAt
        - id
        - subjectKey
        - featureKey
        - featureId
      properties:
        type:
          type: string
          enum:
            - static
        config:
          type: string
          format: json
          example: '{ "integrations": ["github"] }'
          description: The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object.
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the feature.
        id:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: Readonly unique ULID identifier.
          readOnly: true
        subjectKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: The identifier key unique to the subject
          example: customer-1
        featureKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: The feature the subject is entitled to use.
          example: example-feature-key
        featureId:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: The feature the subject is entitled to use.
        currentUsagePeriod:
          allOf:
            - $ref: '#/components/schemas/Period'
          description: The current usage period.
        usagePeriod:
          allOf:
            - $ref: '#/components/schemas/RecurringPeriod'
          description: The defined usage period of the entitlement
      description: A static entitlement.
    EntitlementStaticCreateInputs:
      type: object
      required:
        - type
        - config
      properties:
        featureKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: |-
            The feature the subject is entitled to use.
            Either featureKey or featureId is required.
          example: example-feature-key
        featureId:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: |-
            The feature the subject is entitled to use.
            Either featureKey or featureId is required.
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the feature.
        usagePeriod:
          allOf:
            - $ref: '#/components/schemas/RecurringPeriodCreateInput'
          description: The usage period associated with the entitlement.
        type:
          type: string
          enum:
            - static
        config:
          type: string
          format: json
          example: '{ "integrations": ["github"] }'
          description: The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object.
      description: Create inputs for static entitlement
    EntitlementType:
      type: string
      enum:
        - metered
        - boolean
        - static
      description: Type of the entitlement.
      x-go-type: string
    EntitlementValue:
      type: object
      required:
        - hasAccess
      properties:
        hasAccess:
          type: boolean
          example: true
          description: Whether the subject has access to the feature. Shared accross all entitlement types.
          readOnly: true
        balance:
          type: number
          format: double
          example: 100
          description: Only available for metered entitlements. Metered entitlements are built around a balance calculation where feature usage is deducted from the issued grants. Balance represents the remaining balance of the entitlement, it's value never turns negative.
          readOnly: true
        usage:
          type: number
          format: double
          example: 50
          description: Only available for metered entitlements. Returns the total feature usage in the current period.
          readOnly: true
        overage:
          type: number
          format: double
          example: 0
          description: Only available for metered entitlements. Overage represents the usage that wasn't covered by grants, e.g. if the subject had a total feature usage of 100 in the period but they were only granted 80, there would be 20 overage.
          readOnly: true
        config:
          type: string
          example: '{ key: "value" }'
          description: Only available for static entitlements. The JSON parsable config of the entitlement.
          readOnly: true
      description: Entitlements are the core of OpenMeter access management. They define access to features for subjects. Entitlements can be metered, boolean, or static.
    Event:
      type: object
      required:
        - id
        - source
        - specversion
        - type
        - subject
      properties:
        id:
          type: string
          example: 5c10fade-1c9e-4d6c-8275-c52c36731d3c
          minLength: 1
          description: Identifies the event.
        source:
          type: string
          example: service-name
          minLength: 1
          format: uri-reference
          description: Identifies the context in which an event happened.
        specversion:
          type: string
          example: '1.0'
          minLength: 1
          description: The version of the CloudEvents specification which the event uses.
          default: '1.0'
        type:
          type: string
          example: com.example.someevent
          minLength: 1
          description: Contains a value describing the type of event related to the originating occurrence.
        datacontenttype:
          type: string
          nullable: true
          example: application/json
          minLength: 1
          description: Content type of the data value. Must adhere to RFC 2046 format.
        dataschema:
          type: string
          format: uri
          nullable: true
          minLength: 1
          description: Identifies the schema that data adheres to.
        subject:
          type: string
          example: customer-id
          minLength: 1
          description: Describes the subject of the event in the context of the event producer (identified by source).
        time:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: Timestamp of when the occurrence happened. Must adhere to RFC 3339.
          nullable: true
        data:
          nullable: true
          oneOf:
            - type: object
            - type: string
          description: The event payload.
      example:
        id: 5c10fade-1c9e-4d6c-8275-c52c36731d3c
        source: service-name
        specversion: '1.0'
        type: prompt
        subject: customer-id
        time: 2023-01-01T01:01:01.001Z
      description: CloudEvents Specification JSON Schema
      x-go-type-import:
        path: github.com/cloudevents/sdk-go/v2/event
      x-go-type: event.Event
    ExpirationDuration:
      type: string
      enum:
        - HOUR
        - DAY
        - WEEK
        - MONTH
        - YEAR
      description: The expiration duration enum
    ExpirationPeriod:
      type: object
      required:
        - duration
        - count
      properties:
        duration:
          allOf:
            - $ref: '#/components/schemas/ExpirationDuration'
          description: The unit of time for the expiration period.
        count:
          type: integer
          example: 12
          description: The number of time units in the expiration period.
      description: The grant expiration definition
    Feature:
      type: object
      required:
        - createdAt
        - updatedAt
        - key
        - name
        - id
      properties:
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        archivedAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: Timestamp of when the resource was archived.
          title: Archival Time
          readOnly: true
        key:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: A key is a unique string that is used to identify a resource.
          title: The unique key of the feature
        name:
          type: string
          title: The human-readable name of the feature
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          example:
            key: value
          title: Optional metadata
        meterSlug:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: A key is a unique string that is used to identify a resource.
          example: tokens_total
          title: Meter slug
        meterGroupByFilters:
          type: object
          additionalProperties:
            type: string
          example:
            model: gpt-4
            type: input
          description: |-
            Optional meter group by filters.
            Useful if the meter scope is broader than what feature tracks.
            Example scenario would be a meter tracking all token use with groupBy fields for the model,
            then the feature could filter for model=gpt-4.
          title: Meter group by filters
        id:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: Readonly unique ULID identifier.
          readOnly: true
      description: |-
        Represents a feature that can be enabled or disabled for a plan.
        Used both for product catalog and entitlements.
    FeatureCreateInputs:
      type: object
      required:
        - key
        - name
      properties:
        key:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: A key is a unique string that is used to identify a resource.
          title: The unique key of the feature
        name:
          type: string
          title: The human-readable name of the feature
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          example:
            key: value
          title: Optional metadata
        meterSlug:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: A key is a unique string that is used to identify a resource.
          example: tokens_total
          title: Meter slug
        meterGroupByFilters:
          type: object
          additionalProperties:
            type: string
          example:
            model: gpt-4
            type: input
          description: |-
            Optional meter group by filters.
            Useful if the meter scope is broader than what feature tracks.
            Example scenario would be a meter tracking all token use with groupBy fields for the model,
            then the feature could filter for model=gpt-4.
          title: Meter group by filters
      description: |-
        Represents a feature that can be enabled or disabled for a plan.
        Used both for product catalog and entitlements.
    FeatureMeta:
      type: object
      required:
        - id
        - key
      properties:
        id:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: Unique identifier of a feature.
          title: Feature Unique Identifier
        key:
          type: string
          example: gpt4_tokens
          description: |-
            The key is an immutable unique identifier of the feature used throughout the API,
            for example when interacting with a subject's entitlements.
          title: Feature Key
      description: Limited representation of a feature resource which includes only its unique identifiers (id, key).
    FeatureOrderBy:
      type: string
      enum:
        - id
        - createdAt
        - updatedAt
      description: Order by options for features.
    FeaturePaginatedResponse:
      type: object
      required:
        - totalCount
        - page
        - pageSize
        - items
      properties:
        totalCount:
          type: integer
          example: 500
          description: The items in the current page.
        page:
          type: integer
          example: 1
          description: The items in the current page.
        pageSize:
          type: integer
          example: 100
          description: The items in the current page.
        items:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
          description: The items in the current page.
      description: Paginated response
    FlatPrice:
      type: object
      required:
        - type
        - amount
      properties:
        type:
          type: string
          enum:
            - flat
        amount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          description: The amount of the flat price.
      description: Flat price.
    FlatPriceWithPaymentTerm:
      type: object
      required:
        - type
        - amount
      properties:
        type:
          type: string
          enum:
            - flat
        amount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          description: The amount of the flat price.
        paymentTerm:
          allOf:
            - $ref: '#/components/schemas/PricePaymentTerm'
          description: |-
            The payment term of the flat price.
            Defaults to in advance.
          default: in_advance
      description: Flat price with payment term.
    ForbiddenProblemResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/UnexpectedProblemResponse'
      description: The server understood the request but refuses to authorize it.
    GatewayTimeoutProblemResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/UnexpectedProblemResponse'
      description: The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.
    GrantBurnDownHistorySegment:
      type: object
      required:
        - period
        - usage
        - overage
        - balanceAtStart
        - grantBalancesAtStart
        - balanceAtEnd
        - grantBalancesAtEnd
        - grantUsages
      properties:
        period:
          allOf:
            - $ref: '#/components/schemas/Period'
          description: The period of the segment.
        usage:
          type: number
          format: double
          example: 100
          description: The total usage of the grant in the period.
          readOnly: true
        overage:
          type: number
          format: double
          example: 100
          description: Overuse that wasn't covered by grants.
          readOnly: true
        balanceAtStart:
          type: number
          format: double
          example: 100
          description: entitlement balance at the start of the period.
          readOnly: true
        grantBalancesAtStart:
          type: object
          additionalProperties:
            type: number
            format: double
          example:
            01G65Z755AFWAKHE12NY0CQ9FH: 100
          description: 'The balance breakdown of each active grant at the start of the period: GrantID: Balance'
          readOnly: true
        balanceAtEnd:
          type: number
          format: double
          example: 100
          description: The entitlement balance at the end of the period.
          readOnly: true
        grantBalancesAtEnd:
          type: object
          additionalProperties:
            type: number
            format: double
          example:
            01G65Z755AFWAKHE12NY0CQ9FH: 100
          description: 'The balance breakdown of each active grant at the end of the period: GrantID: Balance'
          readOnly: true
        grantUsages:
          type: array
          items:
            $ref: '#/components/schemas/GrantUsageRecord'
          description: Which grants were actually burnt down in the period and by what amount.
          readOnly: true
      description: |-
        A segment of the grant burn down history.

        A given segment represents the usage of a grant between events that changed either the grant burn down priority order or the usag period.
    GrantOrderBy:
      type: string
      enum:
        - id
        - createdAt
        - updatedAt
      description: Order by options for grants.
    GrantPaginatedResponse:
      type: object
      required:
        - totalCount
        - page
        - pageSize
        - items
      properties:
        totalCount:
          type: integer
          example: 500
          description: The items in the current page.
        page:
          type: integer
          example: 1
          description: The items in the current page.
        pageSize:
          type: integer
          example: 100
          description: The items in the current page.
        items:
          type: array
          items:
            $ref: '#/components/schemas/EntitlementGrant'
          description: The items in the current page.
      description: Paginated response
    GrantUsageRecord:
      type: object
      required:
        - grantId
        - usage
      properties:
        grantId:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: The id of the grant
        usage:
          type: number
          format: double
          example: 100
          description: The usage in the period
      description: Usage Record
    IngestedEvent:
      type: object
      required:
        - event
        - ingestedAt
        - storedAt
      properties:
        event:
          $ref: '#/components/schemas/Event'
        validationError:
          type: string
          description: The validation error if the event failed validation.
        ingestedAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: The date and time the event was ingested.
        storedAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: The date and time the event was stored.
      example:
        event:
          id: 5c10fade-1c9e-4d6c-8275-c52c36731d3c
          source: service-name
          specversion: '1.0'
          type: prompt
          subject: customer-id
          time: 2023-01-01T01:01:01.001Z
        ingestedAt: 2023-01-01T01:01:01.001Z
        storedAt: 2023-01-01T01:01:02.001Z
      description: An ingested event with optional validation error.
    InternalServerErrorProblemResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/UnexpectedProblemResponse'
      description: The server encountered an unexpected condition that prevented it from fulfilling the request.
    InvoicePaginatedResponse:
      type: object
      required:
        - totalCount
        - page
        - pageSize
        - items
      properties:
        totalCount:
          type: integer
          example: 500
          description: The items in the current page.
        page:
          type: integer
          example: 1
          description: The items in the current page.
        pageSize:
          type: integer
          example: 100
          description: The items in the current page.
        items:
          type: array
          items:
            $ref: '#/components/schemas/BillingInvoice'
          description: The items in the current page.
      description: Paginated response
    ListAppsRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedQuery'
      description: Query params for listing installed apps
    ListEntitlementsResult:
      oneOf:
        - type: array
          items:
            $ref: '#/components/schemas/Entitlement'
        - $ref: '#/components/schemas/EntitlementPaginatedResponse'
    ListFeaturesResult:
      oneOf:
        - type: array
          items:
            $ref: '#/components/schemas/Feature'
        - $ref: '#/components/schemas/FeaturePaginatedResponse'
    MarketplaceListing:
      type: object
      required:
        - type
        - name
        - description
        - iconUrl
        - capabilities
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/AppType'
          description: The app's type
        name:
          type: string
          description: The app's name.
        description:
          type: string
          description: The app's description.
        iconUrl:
          type: string
          description: The app's icon URL.
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/AppCapability'
          description: The app's capabilities.
      example:
        type: stripe
        name: Stripe
        description: Stripe interation allows you to collect payments with Stripe.
        iconUrl: /images/stripe.png
        capabilities:
          - type: calculateTax
            key: stripe_calculate_tax
            name: Calculate Tax
            description: Stripe Tax calculates tax portion of the invoices.
          - type: invoiceCustomers
            key: stripe_invoice_customers
            name: Invoice Customers
            description: Stripe invoices customers with due amount.
          - type: collectPayments
            key: stripe_collect_payments
            name: Collect Payments
            description: Stripe payments collects outstanding revenue with Stripe customer's default payment method.
      description: |-
        A marketplace listing.
        Represent an available app in the app marketplace that can be installed to the organization.

        Marketplace apps only exist in config so they don't extend the Resource model.
    MarketplaceListingList:
      type: object
      required:
        - page
        - pageSize
        - totalCount
        - items
      properties:
        page:
          type: integer
          description: The page number.
        pageSize:
          type: integer
          minimum: 1
          maximum: 1000
          description: The number of items in the page.
        totalCount:
          type: integer
          description: The total number of items.
        items:
          type: array
          items:
            $ref: '#/components/schemas/MarketplaceListing'
          maxItems: 1000
          description: The items in the page.
      description: A page of results.
    MeasureUsageFrom:
      oneOf:
        - $ref: '#/components/schemas/MeasureUsageFromPreset'
        - $ref: '#/components/schemas/MeasureUsageFromTime'
      description: Measure usage from
    MeasureUsageFromPreset:
      type: string
      enum:
        - CURRENT_PERIOD_START
        - NOW
      description: Start of measurement options
      x-enum-varnames:
        - CurrentPeriodStart
        - Now
    MeasureUsageFromTime:
      type: string
      format: date-time
      example: 2023-01-01T01:01:01.001Z
      description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
    Metadata:
      type: object
      additionalProperties:
        type: string
      example:
        externalId: 019142cc-a016-796a-8113-1a942fecd26d
      description: |-
        Set of key-value pairs.
        Metadata can be used to store additional information about a resource.
      x-go-type: map[string]string
    Meter:
      type: object
      required:
        - id
        - slug
        - aggregation
        - windowSize
        - eventType
      properties:
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: A unique identifier for the meter.
          readOnly: true
        slug:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: |-
            A unique, human-readable identifier for the meter.
            Must consist only alphanumeric and underscore characters.
          example: tokens_total
        description:
          type: string
          example: AI Token Usage
          minLength: 1
          description: A description of the meter.
        aggregation:
          allOf:
            - $ref: '#/components/schemas/MeterAggregation'
          example: SUM
        windowSize:
          allOf:
            - $ref: '#/components/schemas/WindowSize'
          example: MINUTE
        eventType:
          type: string
          example: prompt
          minLength: 1
          description: The event type to aggregate.
        valueProperty:
          type: string
          example: $.tokens
          minLength: 1
          description: |-
            JSONPath expression to extract the value from the ingested event's data property.

            The ingested value for SUM, AVG, MIN, and MAX aggregations is a number or a string that can be parsed to a number.

            For UNIQUE_COUNT aggregation, the ingested value must be a string. For COUNT aggregation the valueProperty is ignored.
        groupBy:
          type: object
          additionalProperties:
            type: string
          example:
            type: $.type
          description: |-
            Named JSONPath expressions to extract the group by values from the event data.

            Keys must be unique and consist only alphanumeric and underscore characters.

            TODO: add key format enforcement
      example:
        id: 01G65Z755AFWAKHE12NY0CQ9FH
        slug: tokens_total
        description: AI Token Usage
        aggregation: SUM
        windowSize: MINUTE
        eventType: prompt
        valueProperty: $.tokens
        groupBy:
          model: $.model
          type: $.type
      description: A meter is a configuration that defines how to match and aggregate events.
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      x-go-type: models.Meter
    MeterAggregation:
      type: string
      enum:
        - SUM
        - COUNT
        - UNIQUE_COUNT
        - AVG
        - MIN
        - MAX
      description: The aggregation type to use for the meter.
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      x-go-type: models.MeterAggregation
    MeterQueryResult:
      type: object
      required:
        - data
      properties:
        from:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
        to:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
        windowSize:
          $ref: '#/components/schemas/WindowSize'
        data:
          type: array
          items:
            $ref: '#/components/schemas/MeterQueryRow'
      example:
        from: 2023-01-01T00:00:00Z
        to: 2023-01-02T00:00:00Z
        windowSize: DAY
        data:
          - value: 12
            windowStart: 2023-01-01T00:00:00Z
            windowEnd: 2023-01-02T00:00:00Z
            subject: customer-1
            groupBy:
              model: gpt-4-turbo
              type: prompt
      description: The result of a meter query.
    MeterQueryRow:
      type: object
      required:
        - value
        - windowStart
        - windowEnd
      properties:
        value:
          type: number
        windowStart:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
        windowEnd:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
        subject:
          type: string
        groupBy:
          type: object
          additionalProperties:
            type: string
      example:
        value: 12
        windowStart: 2023-01-01T00:00:00Z
        windowEnd: 2023-01-02T00:00:00Z
        subject: customer-1
        groupBy:
          model: gpt-4-turbo
          type: prompt
      description: A row in the result of a meter query.
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      x-go-type: models.MeterQueryRow
    NotFoundProblemResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/UnexpectedProblemResponse'
      description: The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
    NotImplementedProblemResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/UnexpectedProblemResponse'
      description: The server does not support the functionality required to fulfill the request.
    NotificationChannel:
      type: object
      allOf:
        - $ref: '#/components/schemas/NotificationChannelWebhook'
      description: Notification channel.
    NotificationChannelCreateRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/NotificationChannelWebhookCreateRequest'
      description: Union type for requests creating new notification channel with certain type.
    NotificationChannelMeta:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: Identifies the notification channel.
          title: Channel Unique Identifier
          readOnly: true
        type:
          allOf:
            - $ref: '#/components/schemas/NotificationChannelType'
          description: Notification channel type.
          title: Channel Type
          readOnly: true
      description: Metadata only fields of a notification channel.
    NotificationChannelOrderBy:
      type: string
      enum:
        - id
        - type
        - createdAt
        - updatedAt
      description: Order by options for notification channels.
    NotificationChannelPaginatedResponse:
      type: object
      required:
        - totalCount
        - page
        - pageSize
        - items
      properties:
        totalCount:
          type: integer
          example: 500
          description: The items in the current page.
        page:
          type: integer
          example: 1
          description: The items in the current page.
        pageSize:
          type: integer
          example: 100
          description: The items in the current page.
        items:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
          description: The items in the current page.
      description: Paginated response
    NotificationChannelType:
      type: string
      enum:
        - WEBHOOK
      description: Type of the notification channel.
      x-enum-varnames:
        - Webhook
    NotificationChannelWebhook:
      type: object
      required:
        - createdAt
        - updatedAt
        - id
        - type
        - name
        - url
      properties:
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        id:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: Identifies the notification channel.
          title: Channel Unique Identifier
          readOnly: true
        type:
          type: string
          enum:
            - WEBHOOK
          description: Notification channel type.
          title: Channel Type
        name:
          type: string
          example: customer-webhook
          description: User friendly name of the channel.
          title: Channel Name
        disabled:
          type: boolean
          example: true
          description: Whether the channel is disabled or not.
          title: Channel Disabled
          default: false
        url:
          type: string
          example: https://example.com/webhook
          description: Webhook URL where the notification is sent.
          title: Webhook URL
        customHeaders:
          type: object
          additionalProperties:
            type: string
          description: Custom HTTP headers sent as part of the webhook request.
          title: Custom HTTP Headers
        signingSecret:
          type: string
          example: whsec_S6g2HLnTwd9AhHwUIMFggVS9OfoPafN8
          pattern: ^(whsec_)?[a-zA-Z0-9+/=]{32,100}$
          description: |-
            Signing secret used for webhook request validation on the receiving end.

            Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24
          title: Signing Secret
      description: Notification channel with webhook type.
    NotificationChannelWebhookCreateRequest:
      type: object
      required:
        - type
        - name
        - url
      properties:
        type:
          type: string
          enum:
            - WEBHOOK
          description: Notification channel type.
          title: Channel Type
        name:
          type: string
          example: customer-webhook
          description: User friendly name of the channel.
          title: Channel Name
        disabled:
          type: boolean
          example: true
          description: Whether the channel is disabled or not.
          title: Channel Disabled
          default: false
        url:
          type: string
          example: https://example.com/webhook
          description: Webhook URL where the notification is sent.
          title: Webhook URL
        customHeaders:
          type: object
          additionalProperties:
            type: string
          description: Custom HTTP headers sent as part of the webhook request.
          title: Custom HTTP Headers
        signingSecret:
          type: string
          example: whsec_S6g2HLnTwd9AhHwUIMFggVS9OfoPafN8
          pattern: ^(whsec_)?[a-zA-Z0-9+/=]{32,100}$
          description: |-
            Signing secret used for webhook request validation on the receiving end.

            Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24
          title: Signing Secret
      description: Request with input parameters for creating new notification channel with webhook type.
    NotificationEvent:
      type: object
      required:
        - id
        - type
        - createdAt
        - rule
        - deliveryStatus
        - payload
      properties:
        id:
          type: string
          example: 01J2KNP1YTXQRXHTDJ4KPR7PZ0
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: A unique identifier of the notification event.
          title: Event Identifier
          readOnly: true
        type:
          allOf:
            - $ref: '#/components/schemas/NotificationEventType'
          description: Type of the notification event.
          title: Event Type
          readOnly: true
        createdAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: Timestamp when the notification event was created in RFC 3339 format.
          title: Creation Time
          readOnly: true
        rule:
          allOf:
            - $ref: '#/components/schemas/NotificationRule'
          readOnly: true
        deliveryStatus:
          type: array
          items:
            $ref: '#/components/schemas/NotificationEventDeliveryStatus'
          description: The delivery status of the notification event.
          title: Delivery Status
          readOnly: true
        payload:
          allOf:
            - $ref: '#/components/schemas/NotificationEventPayload'
          readOnly: true
        annotations:
          allOf:
            - $ref: '#/components/schemas/Annotations'
          description: Set of key-value pairs managed by the system. Cannot be modified by user.
          title: Annotations
          readOnly: true
      description: Type of the notification event.
    NotificationEventBalanceThresholdPayload:
      type: object
      required:
        - id
        - type
        - timestamp
        - data
      properties:
        id:
          type: string
          example: 01J2KNP1YTXQRXHTDJ4KPR7PZ0
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: A unique identifier for the notification event the payload belongs to.
          title: Notification Event Identifier
          readOnly: true
        type:
          type: string
          enum:
            - entitlements.balance.threshold
          description: Type of the notification event.
          title: Notification Event Type
          readOnly: true
        timestamp:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: Timestamp when the notification event was created in RFC 3339 format.
          title: Creation Time
          readOnly: true
        data:
          allOf:
            - $ref: '#/components/schemas/NotificationEventBalanceThresholdPayloadData'
          description: The data of the payload.
          title: Payload Data
          readOnly: true
      description: Payload for notification event with `entitlements.balance.threshold` type.
    NotificationEventBalanceThresholdPayloadData:
      type: object
      required:
        - entitlement
        - feature
        - subject
        - value
        - threshold
      properties:
        entitlement:
          allOf:
            - $ref: '#/components/schemas/EntitlementMetered'
          title: Entitlement
          readOnly: true
        feature:
          allOf:
            - $ref: '#/components/schemas/Feature'
          title: Feature
          readOnly: true
        subject:
          allOf:
            - $ref: '#/components/schemas/Subject'
          title: Subject
          readOnly: true
        value:
          allOf:
            - $ref: '#/components/schemas/EntitlementValue'
          title: Entitlement Value
          readOnly: true
        threshold:
          allOf:
            - $ref: '#/components/schemas/NotificationRuleBalanceThresholdValue'
          title: Threshold
          readOnly: true
      description: Data of the payload for notification event with `entitlements.balance.threshold` type.
    NotificationEventDeliveryStatus:
      type: object
      required:
        - state
        - reason
        - updatedAt
        - channel
      properties:
        state:
          allOf:
            - $ref: '#/components/schemas/NotificationEventDeliveryStatusState'
          example: SUCCESS
          description: Delivery state of the notification event to the channel.
          readOnly: true
        reason:
          type: string
          example: Failed to dispatch event due to provider error.
          description: The reason of the last deliverry state update.
          title: State Reason
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: Timestamp of when the status was last updated in RFC 3339 format.
          title: Last Update Time
          readOnly: true
        channel:
          allOf:
            - $ref: '#/components/schemas/NotificationChannelMeta'
          description: Notification channel the delivery sattus associated with.
          title: Notification Channel
          readOnly: true
      description: The delivery status of the notification event.
    NotificationEventDeliveryStatusState:
      type: string
      enum:
        - SUCCESS
        - FAILED
        - SENDING
        - PENDING
      description: The delivery state of the notification event to the channel.
      title: Delivery State
      x-enum-varnames:
        - Success
        - Failed
        - Sending
        - Pending
    NotificationEventOrderBy:
      type: string
      enum:
        - id
        - createdAt
      description: Order by options for notification channels.
    NotificationEventPaginatedResponse:
      type: object
      required:
        - totalCount
        - page
        - pageSize
        - items
      properties:
        totalCount:
          type: integer
          example: 500
          description: The items in the current page.
        page:
          type: integer
          example: 1
          description: The items in the current page.
        pageSize:
          type: integer
          example: 100
          description: The items in the current page.
        items:
          type: array
          items:
            $ref: '#/components/schemas/NotificationEvent'
          description: The items in the current page.
      description: Paginated response
    NotificationEventPayload:
      type: object
      allOf:
        - $ref: '#/components/schemas/NotificationEventBalanceThresholdPayload'
      description: The delivery status of the notification event.
    NotificationEventType:
      type: string
      enum:
        - entitlements.balance.threshold
      description: Type of the notification event.
    NotificationRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/NotificationRuleBalanceThreshold'
      description: Notification Rule.
    NotificationRuleBalanceThreshold:
      type: object
      required:
        - createdAt
        - updatedAt
        - id
        - type
        - name
        - channels
        - thresholds
      properties:
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        id:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: Identifies the notification rule.
          title: Rule Unique Identifier
          readOnly: true
        type:
          type: string
          enum:
            - entitlements.balance.threshold
          description: Notification rule type.
          title: Rule Type
        name:
          type: string
          example: Balance threshold reached
          description: The user friendly name of the notification rule.
          title: Rule Name
        disabled:
          type: boolean
          example: true
          description: Whether the rule is disabled or not.
          title: Rule Disabled
          default: false
        channels:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannelMeta'
          description: List of notification channels the rule applies to.
          title: Channels assigned to Rule
        thresholds:
          type: array
          items:
            $ref: '#/components/schemas/NotificationRuleBalanceThresholdValue'
          minItems: 1
          maxItems: 10
          description: List of thresholds the rule suppose to be triggered.
          title: Entitlement Balance Thresholds
        features:
          type: array
          items:
            $ref: '#/components/schemas/FeatureMeta'
          minItems: 1
          description: Optional field containing list of features the rule applies to.
          title: Features
      description: Notification rule with entitlements.balance.threshold type.
    NotificationRuleBalanceThresholdCreateRequest:
      type: object
      required:
        - type
        - name
        - thresholds
        - channels
      properties:
        type:
          type: string
          enum:
            - entitlements.balance.threshold
          description: Notification rule type.
          title: Rule Type
        name:
          type: string
          example: Balance threshold reached
          description: The user friendly name of the notification rule.
          title: Rule Name
        disabled:
          type: boolean
          example: true
          description: Whether the rule is disabled or not.
          title: Rule Disabled
          default: false
        thresholds:
          type: array
          items:
            $ref: '#/components/schemas/NotificationRuleBalanceThresholdValue'
          minItems: 1
          maxItems: 10
          description: List of thresholds the rule suppose to be triggered.
          title: Entitlement Balance Thresholds
        channels:
          type: array
          items:
            type: string
            example: 01G65Z755AFWAKHE12NY0CQ9FH
            pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
            description: ULID (Universally Unique Lexicographically Sortable Identifier).
          minItems: 1
          description: List of notification channels the rule is applied to.
          title: Channels
        features:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 64
            pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$|^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
            description: |-
              ULID (Universally Unique Lexicographically Sortable Identifier).
              A key is a unique string that is used to identify a resource.

              TODO: this is a temporary solution to support both ULID and Key in the same spec for codegen.
          minItems: 1
          description: Optional field for defining the scope of notification by feature. It may contain features by id or key.
          title: Features
      description: Request with input parameters for creating new notification rule with entitlements.balance.threashold type.
    NotificationRuleBalanceThresholdValue:
      type: object
      required:
        - value
        - type
      properties:
        value:
          type: number
          format: double
          example: 100
          description: Value of the threshold.
          title: Threshold Value
        type:
          allOf:
            - $ref: '#/components/schemas/NotificationRuleBalanceThresholdValueType'
          example: NUMBER
          description: Type of the threshold.
      description: Threshold value with multiple supported types.
    NotificationRuleBalanceThresholdValueType:
      type: string
      enum:
        - PERCENT
        - NUMBER
      description: Type of the rule in the balance threshold specification.
      title: Notification balance threshold type
      x-enum-varnames:
        - Percent
        - Number
    NotificationRuleCreateRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/NotificationRuleBalanceThresholdCreateRequest'
      description: Union type for requests creating new notification rule with certain type.
    NotificationRuleMeta:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: Identifies the notification rule.
          title: Rule Unique Identifier
          readOnly: true
        type:
          allOf:
            - $ref: '#/components/schemas/NotificationEventType'
          description: Notification rule type.
          title: Rule Type
          readOnly: true
      description: Metadata only fields of a notification channel.
    NotificationRuleOrderBy:
      type: string
      enum:
        - id
        - type
        - createdAt
        - updatedAt
      description: Order by options for notification channels.
    NotificationRulePaginatedResponse:
      type: object
      required:
        - totalCount
        - page
        - pageSize
        - items
      properties:
        totalCount:
          type: integer
          example: 500
          description: The items in the current page.
        page:
          type: integer
          example: 1
          description: The items in the current page.
        pageSize:
          type: integer
          example: 100
          description: The items in the current page.
        items:
          type: array
          items:
            $ref: '#/components/schemas/NotificationRule'
          description: The items in the current page.
      description: Paginated response
    Numeric:
      type: string
      pattern: ^\-?[0-9]+(\.[0-9]+)?$
      description: Numeric represents an arbitrary precision number.
    OAuth2AuthorizationCodeGrantErrorType:
      type: string
      enum:
        - invalid_request
        - unauthorized_client
        - access_denied
        - unsupported_response_type
        - invalid_scope
        - server_error
        - temporarily_unavailable
      description: OAuth2 authorization code grant error types.
    PaginatedQuery:
      type: object
      properties:
        page:
          type: integer
          description: The page number.
          default: 1
        pageSize:
          type: integer
          description: The number of items in the page.
          default: 100
      description: Paginated query parameters.
    Percentage:
      type: string
      pattern: ^\-?[0-9]+(\.[0-9]+)?%$
      description: Numeric representation of a percentage
    Period:
      type: object
      required:
        - from
        - to
      properties:
        from:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: Period start time.
        to:
          type: string
          format: date-time
          example: 2023-02-01T01:01:01.001Z
          description: Period end time.
      description: A period with a start and end time.
    PhasesOrderBy:
      type: string
      enum:
        - key
        - start_after
      description: Order by options for plan phases.
    Plan:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
        - key
        - version
        - currency
        - status
        - phases
      properties:
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: A unique identifier for the resource.
          title: ID
          readOnly: true
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        key:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: A semi-unique identifier for the resource.
          title: Key
        version:
          type: integer
          minimum: 1
          description: Version of the plan. Incremented when the plan is updated.
          title: Version
          default: 1
          readOnly: true
        currency:
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
          description: The currency code of the plan.
          title: Currency
          default: USD
        effectiveFrom:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: The date and time when the plan becomes effective. When not specified, the plan is a draft.
          title: Effective start date
          readOnly: true
        effectiveTo:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: The date and time when the plan is no longer effective. When not specified, the plan is effective indefinitely.
          title: Effective end date
          readOnly: true
        status:
          allOf:
            - $ref: '#/components/schemas/PlanStatus'
          description: |-
            The status of the plan.
            Computed based on the effective start and end dates:
            - draft = no effectiveFrom
            - active = effectiveFrom <= now < effectiveTo
            - archived / inactive = effectiveTo <= now
            - scheduled = now < effectiveFrom < effectiveTo
          title: Status
          readOnly: true
        phases:
          type: array
          items:
            $ref: '#/components/schemas/PlanPhase'
          minItems: 1
          description: |-
            The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
            A phase switch occurs only at the end of a billing period, ensuring that a single subscription invoice will not include charges from different phase prices.
          title: Plan phases
      description: Plans provide a template for subscriptions.
    PlanCreate:
      type: object
      required:
        - name
        - key
        - currency
        - phases
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        key:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: A semi-unique identifier for the resource.
          title: Key
        currency:
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
          description: The currency code of the plan.
          title: Currency
          default: USD
        phases:
          type: array
          items:
            $ref: '#/components/schemas/PlanPhase'
          minItems: 1
          description: |-
            The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
            A phase switch occurs only at the end of a billing period, ensuring that a single subscription invoice will not include charges from different phase prices.
          title: Plan phases
      description: Resource create operation model.
    PlanOrderBy:
      type: string
      enum:
        - id
        - key
        - version
        - create_at
        - updated_at
      description: Order by options for plans.
    PlanPaginatedResponse:
      type: object
      required:
        - totalCount
        - page
        - pageSize
        - items
      properties:
        totalCount:
          type: integer
          example: 500
          description: The items in the current page.
        page:
          type: integer
          example: 1
          description: The items in the current page.
        pageSize:
          type: integer
          example: 100
          description: The items in the current page.
        items:
          type: array
          items:
            $ref: '#/components/schemas/Plan'
          description: The items in the current page.
      description: Paginated response
    PlanPhase:
      type: object
      required:
        - name
        - createdAt
        - updatedAt
        - key
        - rateCards
        - startAfter
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        key:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: Unique key among the plan phases. Used to reference the phase in the subscription & plan.
        rateCards:
          type: array
          items:
            $ref: '#/components/schemas/RateCard'
          description: The rate cards of the plan.
          title: Rate cards
        startAfter:
          type: string
          format: duration
          nullable: true
          example: P1Y1D
          description: The time after which the plan starts compared to subscription start
          title: Start after
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
          description: The discounts on the plan.
          title: Discounts
      description: The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
    PlanPhaseCreate:
      type: object
      required:
        - name
        - key
        - rateCards
        - startAfter
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        key:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: Unique key among the plan phases. Used to reference the phase in the subscription & plan.
        rateCards:
          type: array
          items:
            $ref: '#/components/schemas/RateCard'
          description: The rate cards of the plan.
          title: Rate cards
        startAfter:
          type: string
          format: duration
          nullable: true
          example: P1Y1D
          description: The time after which the plan starts compared to subscription start
          title: Start after
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
          description: The discounts on the plan.
          title: Discounts
      description: Resource create operation model.
    PlanPhasePaginatedResponse:
      type: object
      required:
        - totalCount
        - page
        - pageSize
        - items
      properties:
        totalCount:
          type: integer
          example: 500
          description: The items in the current page.
        page:
          type: integer
          example: 1
          description: The items in the current page.
        pageSize:
          type: integer
          example: 100
          description: The items in the current page.
        items:
          type: array
          items:
            $ref: '#/components/schemas/PlanPhase'
          description: The items in the current page.
      description: Paginated response
    PlanPhaseUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        rateCards:
          type: array
          items:
            $ref: '#/components/schemas/RateCard'
          description: The rate cards of the plan.
          title: Rate cards
        startAfter:
          type: string
          format: duration
          nullable: true
          example: P1Y1D
          description: The time after which the plan starts compared to subscription start
          title: Start after
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
          description: The discounts on the plan.
          title: Discounts
      description: Resource create or update operation model.
    PlanReference:
      type: object
      required:
        - key
        - version
      properties:
        key:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: The plan key.
        version:
          type: integer
          description: The plan version.
      description: References an exact plan.
    PlanStatus:
      type: string
      enum:
        - draft
        - active
        - archived
        - scheduled
      description: The status of a plan.
    PlanUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        phases:
          type: array
          items:
            $ref: '#/components/schemas/PlanPhase'
          minItems: 1
          description: |-
            The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
            A phase switch occurs only at the end of a billing period, ensuring that a single subscription invoice will not include charges from different phase prices.
          title: Plan phases
      description: Resource create or update operation model.
    PlanVariant:
      type: object
      required:
        - currency
      properties:
        currency:
          $ref: '#/components/schemas/CurrencyCode'
      description: |-
        A plan variant.
        A set of properties that can be used to select a specific configuration of a plan.
    PlanVariantOverridePreset:
      type: object
      required:
        - variant
      properties:
        variant:
          allOf:
            - $ref: '#/components/schemas/PlanVariant'
          example:
            currency: USD
          description: The variant of the plan.
          title: Variant
        currency:
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
          description: The currency code.
          title: Currency
        rateCards:
          type: object
          properties:
            add:
              type: array
              items:
                $ref: '#/components/schemas/RateCard'
              description: Add rate cards to the plan.
              title: Add rate card
            remove:
              type: array
              items:
                type: string
                minLength: 1
                maxLength: 64
                pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
                description: A key is a unique string that is used to identify a resource.
              description: Remove rate cards from the plan.
              title: Remove rate card
          description: The rate card overrides.
          title: Rate card overrides
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
      description: Plan variant override preset.
    PortalToken:
      type: object
      required:
        - subject
      properties:
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: ULID (Universally Unique Lexicographically Sortable Identifier).
          readOnly: true
        subject:
          type: string
          example: customer-1
        expiresAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
          readOnly: true
        expired:
          type: boolean
          readOnly: true
        createdAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
          readOnly: true
        token:
          type: string
          example: om_portal_IAnD3PpWW2A2Wr8m9jfzeHlGX8xmCXwG.y5q4S-AWqFu6qjfaFz0zQq4Ez28RsnyVwJffX5qxMvo
          description: The token is only returned at creation.
          readOnly: true
        allowedMeterSlugs:
          type: array
          items:
            type: string
          example:
            - tokens_total
          description: Optional, if defined only the specified meters will be allowed.
      description: |-
        A consumer portal token.

        Validator doesn't obey required for readOnly properties
        See: https://github.com/stoplightio/spectral/issues/1274
    PreconditionFailedProblemResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/UnexpectedProblemResponse'
      description: One or more conditions given in the request header fields evaluated to false when tested on the server.
    Price:
      anyOf:
        - $ref: '#/components/schemas/FlatPrice'
        - $ref: '#/components/schemas/UnitPrice'
        - $ref: '#/components/schemas/TieredPrice'
      discriminator:
        propertyName: type
        mapping:
          flat: '#/components/schemas/FlatPrice'
          unit: '#/components/schemas/UnitPrice'
          tiered: '#/components/schemas/TieredPrice'
      description: |-
        Price.
        One of: flat, unit, or tiered.
    PricePaymentTerm:
      type: string
      enum:
        - in_advance
        - in_arrears
      description: |-
        The payment term of a flat price.
        One of: in_advance or in_arrears.
    PriceTier:
      type: object
      required:
        - upToAmount
        - flatPrice
        - unitPrice
      properties:
        upToAmount:
          type: number
          format: double
          nullable: true
          description: |-
            Up to and including to this quantity will be contained in the tier.
            If null, the tier is open-ended.
          title: Up to quantity
        flatPrice:
          type: object
          allOf:
            - $ref: '#/components/schemas/FlatPrice'
          nullable: true
          description: The flat price component of the tier.
          title: Flat price component
        unitPrice:
          type: object
          allOf:
            - $ref: '#/components/schemas/UnitPrice'
          nullable: true
          description: The unit price component of the tier.
          title: Unit price component
      description: |-
        A price tier.
        At least one price component is required in each tier.
    PriceType:
      type: string
      enum:
        - flat
        - unit
        - tiered
      description: The type of the price.
    ProfilePaginatedResponse:
      type: object
      required:
        - totalCount
        - page
        - pageSize
        - items
      properties:
        totalCount:
          type: integer
          example: 500
          description: The items in the current page.
        page:
          type: integer
          example: 1
          description: The items in the current page.
        pageSize:
          type: integer
          example: 100
          description: The items in the current page.
        items:
          type: array
          items:
            $ref: '#/components/schemas/BillingProfile'
          description: The items in the current page.
      description: Paginated response
    RateCard:
      oneOf:
        - $ref: '#/components/schemas/RateCardFlatFee'
        - $ref: '#/components/schemas/RateCardUsageBased'
      discriminator:
        propertyName: type
        mapping:
          flat_fee: '#/components/schemas/RateCardFlatFee'
          usage_based: '#/components/schemas/RateCardUsageBased'
      description: A rate card defines the pricing and entitlement of a feature or service.
    RateCardBooleanEntitlement:
      type: object
      required:
        - type
      properties:
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the feature.
        type:
          type: string
          enum:
            - boolean
      description: Entitlement template of a boolean entitlement.
    RateCardEntitlement:
      anyOf:
        - $ref: '#/components/schemas/RateCardMeteredEntitlement'
        - $ref: '#/components/schemas/RateCardStaticEntitlement'
        - $ref: '#/components/schemas/RateCardBooleanEntitlement'
      discriminator:
        propertyName: type
        mapping:
          metered: '#/components/schemas/RateCardMeteredEntitlement'
          static: '#/components/schemas/RateCardStaticEntitlement'
          boolean: '#/components/schemas/RateCardBooleanEntitlement'
      description: |-
        Entitlement templates are used to define the entitlements of a plan.
        Features are omitted from the entitlement template, as they are defined in the rate card.
    RateCardFlatFee:
      type: object
      required:
        - name
        - createdAt
        - updatedAt
        - key
        - type
        - billingCadence
        - price
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        key:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: A semi-unique identifier for the resource.
          title: Key
        type:
          type: string
          enum:
            - flat_fee
          description: The type of the RateCard.
          title: RateCard type
        featureKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: The feature the customer is entitled to use.
          title: Feature key
        entitlementTemplate:
          $ref: '#/components/schemas/RateCardEntitlement'
        taxConfig:
          allOf:
            - $ref: '#/components/schemas/TaxConfig'
          description: |-
            The tax config of the rate card.
            When undefined, the tax config of the feature or the default tax config of the plan is used.
          title: Tax config
        billingCadence:
          type: string
          format: duration
          nullable: true
          description: |-
            The billing cadence of the rate card.
            When null it means it is a one time fee.
          title: Billing cadence
        price:
          type: object
          allOf:
            - $ref: '#/components/schemas/FlatPriceWithPaymentTerm'
          nullable: true
          example: {}
          description: |-
            The price of the rate card.
            When null, the feature or service is free.
          title: Price
      description: A flat fee rate card defines a one-time purchase or a recurring fee.
    RateCardFlatFeeUpdateItem:
      type: object
      required:
        - name
        - type
        - billingCadence
        - price
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        type:
          type: string
          enum:
            - flat_fee
          description: The type of the RateCard.
          title: RateCard type
        featureKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: The feature the customer is entitled to use.
          title: Feature key
        entitlementTemplate:
          $ref: '#/components/schemas/RateCardEntitlement'
        taxConfig:
          allOf:
            - $ref: '#/components/schemas/TaxConfig'
          description: |-
            The tax config of the rate card.
            When undefined, the tax config of the feature or the default tax config of the plan is used.
          title: Tax config
        billingCadence:
          type: string
          format: duration
          nullable: true
          description: |-
            The billing cadence of the rate card.
            When null it means it is a one time fee.
          title: Billing cadence
        price:
          type: object
          allOf:
            - $ref: '#/components/schemas/FlatPriceWithPaymentTerm'
          nullable: true
          example: {}
          description: |-
            The price of the rate card.
            When null, the feature or service is free.
          title: Price
      description: A flat fee rate card defines a one-time purchase or a recurring fee.
    RateCardMeteredEntitlement:
      type: object
      required:
        - type
      properties:
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the feature.
        type:
          type: string
          enum:
            - metered
        isSoftLimit:
          type: boolean
          description: If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.
          title: Soft limit
          default: false
        issueAfterReset:
          type: number
          format: double
          minimum: 0
          description: |-
            You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance.
            If an amount is specified here, a grant will be created alongside the entitlement with the specified amount.
            That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.
            Manually creating such a grant would mean having the "amount", "minRolloverAmount", and "maxRolloverAmount" fields all be the same.
          title: Initial grant amount
        issueAfterResetPriority:
          type: integer
          format: uint8
          minimum: 1
          maximum: 255
          description: Defines the grant priority for the default grant.
          title: Issue grant after reset priority
          default: 1
        preserveOverageAtReset:
          type: boolean
          description: If true, the overage is preserved at reset. If false, the usage is reset to 0.
          title: Preserve overage at reset
          default: false
        usagePeriod:
          type: string
          format: duration
          description: |-
            The interval of the metered entitlement.
            Defaults to the billing cadence of the rate card.
          title: Usage Period
      description: The entitlement template with a metered entitlement.
    RateCardOverride:
      anyOf:
        - $ref: '#/components/schemas/RateCardOverrideFlatFee'
        - $ref: '#/components/schemas/RateCardOverrideUsageBased'
      discriminator:
        propertyName: type
        mapping:
          flat_fee: '#/components/schemas/RateCardOverrideFlatFee'
          usage_based: '#/components/schemas/RateCardOverrideUsageBased'
      description: Rate card override.
    RateCardOverrideFlatFee:
      type: object
      required:
        - type
        - price
      properties:
        type:
          type: string
          enum:
            - flat_fee
          description: The type of the RateCard.
          title: RateCard type
        price:
          type: object
          allOf:
            - $ref: '#/components/schemas/FlatPriceWithPaymentTerm'
          nullable: true
          example: {}
          description: |-
            The price of the rate card.
            When null, the feature or service is free.
          title: Price
      description: Flat fee rate card override.
    RateCardOverrideUsageBased:
      type: object
      required:
        - type
        - price
      properties:
        type:
          type: string
          enum:
            - usage_based
          description: The type of the RateCard.
          title: RateCard type
        price:
          allOf:
            - $ref: '#/components/schemas/RateCardUsageBasedPrice'
          nullable: true
      description: Usage-based rate card override.
    RateCardStaticEntitlement:
      type: object
      required:
        - type
        - config
      properties:
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the feature.
        type:
          type: string
          enum:
            - static
        config:
          type: string
          format: json
          example: '{ "integrations": ["github"] }'
          description: The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object.
      description: Entitlement template of a static entitlement.
    RateCardType:
      type: string
      enum:
        - flat_fee
        - usage_based
      description: The type of the rate card.
    RateCardUpdateItem:
      oneOf:
        - $ref: '#/components/schemas/RateCardFlatFeeUpdateItem'
        - $ref: '#/components/schemas/RateCardUsageBasedUpdateItem'
      discriminator:
        propertyName: type
        mapping:
          flat_fee: '#/components/schemas/RateCardFlatFeeUpdateItem'
          usage_based: '#/components/schemas/RateCardUsageBasedUpdateItem'
      description: A rate card defines the pricing and entitlement of a feature or service.
    RateCardUsageBased:
      type: object
      required:
        - name
        - createdAt
        - updatedAt
        - key
        - type
        - billingCadence
        - price
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        key:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: A semi-unique identifier for the resource.
          title: Key
        type:
          type: string
          enum:
            - usage_based
          description: The type of the RateCard.
          title: RateCard type
        featureKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: The feature the customer is entitled to use.
          title: Feature key
        entitlementTemplate:
          $ref: '#/components/schemas/RateCardEntitlement'
        taxConfig:
          allOf:
            - $ref: '#/components/schemas/TaxConfig'
          description: |-
            The tax config of the rate card.
            When undefined, the tax config of the feature or the default tax config of the plan is used.
          title: Tax config
        billingCadence:
          type: string
          format: duration
          description: The billing cadence of the rate card.
          title: Billing cadence
        price:
          allOf:
            - $ref: '#/components/schemas/RateCardUsageBasedPrice'
          nullable: true
      description: A usage-based rate card defines a price based on usage.
    RateCardUsageBasedPrice:
      oneOf:
        - $ref: '#/components/schemas/FlatPriceWithPaymentTerm'
        - $ref: '#/components/schemas/UnitPriceWithCommitments'
        - $ref: '#/components/schemas/TieredPriceWithCommitments'
      discriminator:
        propertyName: type
        mapping:
          flat: '#/components/schemas/FlatPriceWithPaymentTerm'
          unit: '#/components/schemas/UnitPriceWithCommitments'
          tiered: '#/components/schemas/TieredPriceWithCommitments'
      description: The price of the usage based rate card.
    RateCardUsageBasedUpdateItem:
      type: object
      required:
        - name
        - type
        - billingCadence
        - price
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        type:
          type: string
          enum:
            - usage_based
          description: The type of the RateCard.
          title: RateCard type
        featureKey:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: The feature the customer is entitled to use.
          title: Feature key
        entitlementTemplate:
          $ref: '#/components/schemas/RateCardEntitlement'
        taxConfig:
          allOf:
            - $ref: '#/components/schemas/TaxConfig'
          description: |-
            The tax config of the rate card.
            When undefined, the tax config of the feature or the default tax config of the plan is used.
          title: Tax config
        billingCadence:
          type: string
          format: duration
          description: The billing cadence of the rate card.
          title: Billing cadence
        price:
          allOf:
            - $ref: '#/components/schemas/RateCardUsageBasedPrice'
          nullable: true
      description: A usage-based rate card defines a price based on usage.
    RecurringPeriod:
      type: object
      required:
        - interval
        - anchor
      properties:
        interval:
          allOf:
            - $ref: '#/components/schemas/RecurringPeriodInterval'
          description: The unit of time for the interval.
          title: Interval
        anchor:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: A date-time anchor to base the recurring period on.
          title: Anchor time
      example:
        interval: DAY
        anchor: 2023-01-01T01:01:01.001Z
      description: Recurring period with an interval and an anchor.
    RecurringPeriodCreateInput:
      type: object
      required:
        - interval
      properties:
        interval:
          allOf:
            - $ref: '#/components/schemas/RecurringPeriodInterval'
          description: The unit of time for the interval.
          title: Interval
        anchor:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: A date-time anchor to base the recurring period on.
          title: Anchor time
      example:
        interval: DAY
        anchor: 2023-01-01T01:01:01.001Z
      description: Recurring period with an interval and an anchor.
    RecurringPeriodInterval:
      type: string
      enum:
        - DAY
        - WEEK
        - MONTH
        - YEAR
      description: |-
        The unit of time for the interval.
        One of: `day`, `week`, `month`, or `year`.
    RemovePhaseShifting:
      type: string
      enum:
        - Next
        - Prev
      description: The direction of the phase shift when a phase is removed.
    ResetEntitlementUsageInput:
      type: object
      properties:
        effectiveAt:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: The time at which the reset takes effect, defaults to now. The reset cannot be in the future. The provided value is truncated to the minute due to how historical meter data is stored.
        retainAnchor:
          type: boolean
          description: |-
            Determines whether the usage period anchor is retained or reset to the effectiveAt time.
            - If true, the usage period anchor is retained.
            - If false, the usage period anchor is reset to the effectiveAt time.
        preserveOverage:
          type: boolean
          description: |-
            Determines whether the overage is preserved or forgiven, overriding the entitlement's default behavior.
            - If true, the overage is preserved.
            - If false, the overage is forgiven.
      description: Reset parameters
    SandboxApp:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
        - listing
        - status
        - type
      properties:
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: A unique identifier for the resource.
          title: ID
          readOnly: true
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        listing:
          allOf:
            - $ref: '#/components/schemas/MarketplaceListing'
          description: The marketplace listing that this installed app is based on.
          readOnly: true
        status:
          allOf:
            - $ref: '#/components/schemas/AppStatus'
          description: Status of the app connection.
          readOnly: true
        type:
          type: string
          enum:
            - sandbox
          description: The app's type is Sandbox.
      description: |-
        Sandbox app can be used for testing OpenMeter features.

        The app is not creating anything in external systems, thus it is safe to use for
        verifying OpenMeter features.
    ServiceUnavailableProblemResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/UnexpectedProblemResponse'
      description: The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
    SortOrder:
      type: string
      enum:
        - ASC
        - DESC
      description: The order direction.
    SpendCommitments:
      type: object
      properties:
        minimumAmount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          description: The customer is committed to spend at least the amount.
          title: Minimum amount
        maximumAmount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          description: The customer is limited to spend at most the amount.
          title: Maximum amount
      description: |-
        Spending commitments.
        The customer is committed to spend at least the minimum amount and at most the maximum amount.
    StripeApp:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
        - listing
        - status
        - type
        - stripeAccountId
        - livemode
      properties:
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: A unique identifier for the resource.
          title: ID
          readOnly: true
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        listing:
          allOf:
            - $ref: '#/components/schemas/MarketplaceListing'
          description: The marketplace listing that this installed app is based on.
          readOnly: true
        status:
          allOf:
            - $ref: '#/components/schemas/AppStatus'
          description: Status of the app connection.
          readOnly: true
        type:
          type: string
          enum:
            - stripe
          description: The app's type is Stripe.
        stripeAccountId:
          type: string
          description: The Stripe account ID.
        livemode:
          type: boolean
          description: Livemode, true if the app is in production mode.
      example:
        id: 01G65Z755AFWAKHE12NY0CQ9FH
        type: stripe
        name: Stripe
        status: ready
        listing:
          type: stripe
          name: Stripe
          description: Stripe interation allows you to collect payments with Stripe.
          iconUrl: /images/stripe.png
          capabilities:
            - type: calculateTax
              key: stripe_calculate_tax
              name: Calculate Tax
              description: Stripe Tax calculates tax portion of the invoices.
            - type: invoiceCustomers
              key: stripe_invoice_customers
              name: Invoice Customers
              description: Stripe invoices customers with due amount.
            - type: collectPayments
              key: stripe_collect_payments
              name: Collect Payments
              description: Stripe payments collects outstanding revenue with Stripe customer's default payment method.
        createdAt: 2024-01-01T01:01:01.001Z
        updatedAt: 2024-01-01T01:01:01.001Z
        stripeAccountId: acct_123456789
        livemode: true
      description: A installed Stripe app object.
    StripeCheckoutSessionMode:
      type: string
      enum:
        - setup
      description: Stripe CheckoutSession.mode
    StripePaymentIntentStatus:
      type: string
      enum:
        - canceled
        - processing
        - requires_action
        - requires_confirmation
        - requires_payment_method
        - succeeded
      description: Stripe payment intent status.
    StripeSetupIntent:
      type: object
      required:
        - id
        - status
        - customer
        - metadata
      properties:
        id:
          type: string
          description: The setup intent id.
        status:
          allOf:
            - $ref: '#/components/schemas/StripePaymentIntentStatus'
          description: The setup intent status.
        payment_method:
          type: string
          description: The setup intent payment method.
        payment_method_types:
          type: array
          items:
            type: string
          description: The setup intent payment method types.
        customer:
          type: string
          description: The setup intent customer.
        metadata:
          type: object
          additionalProperties:
            type: string
          description: The setup intent metadata.
      description: Stripe setup intent.
    StripeTaxConfig:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          example: txcd_10000000
          pattern: ^txcd_\d{8}$
          description: |-
            Product tax code.

            See: https://docs.stripe.com/tax/tax-codes
          title: Tax code
      description: The tax config for Stripe.
    StripeWebhookEvent:
      type: object
      required:
        - id
        - type
        - livemode
        - created
        - data
      properties:
        id:
          type: string
          description: The event ID.
        type:
          type: string
          description: The event type.
        livemode:
          type: boolean
          description: Live mode.
        created:
          type: integer
          format: int32
          description: The event created timestamp.
        data:
          type: object
          properties:
            object:
              $ref: '#/components/schemas/StripeSetupIntent'
          required:
            - object
          description: The event data.
      description: Stripe webhook event.
    StripeWebhookResponse:
      type: object
      required:
        - namespaceId
        - appId
      properties:
        namespaceId:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: ULID (Universally Unique Lexicographically Sortable Identifier).
        appId:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: ULID (Universally Unique Lexicographically Sortable Identifier).
        customerId:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: ULID (Universally Unique Lexicographically Sortable Identifier).
      description: Stripe webhook response.
    Subject:
      type: object
      required:
        - id
        - key
      properties:
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: A unique identifier for the subject.
          readOnly: true
        key:
          type: string
          example: customer-id
          description: A unique, human-readable identifier for the subject.
        displayName:
          type: string
          nullable: true
          example: Customer Name
          description: A human-readable display name for the subject.
        metadata:
          type: object
          additionalProperties: {}
          nullable: true
          example: {}
        currentPeriodStart:
          type: string
          format: date-time
          example: 2023-01-01T00:00:00Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
        currentPeriodEnd:
          type: string
          format: date-time
          example: 2023-02-01T00:00:00Z
          description: '[RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.'
        stripeCustomerId:
          type: string
          nullable: true
          example: cus_JMOlctsKV8
      example:
        id: 01G65Z755AFWAKHE12NY0CQ9FH
        key: customer-id
        displayName: Customer Name
        metadata:
          hubspotId: '123456'
        currentPeriodStart: 2023-01-01T00:00:00Z
        currentPeriodEnd: 2023-02-01T00:00:00Z
        stripeCustomerId: cus_JMOlctsKV8
      description: A subject is a unique identifier for a user or entity.
    Subscription:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
        - customerId
        - plan
        - currency
      properties:
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: A unique identifier for the resource.
          title: ID
          readOnly: true
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        customerId:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: The customer ID of the subscription.
        plan:
          allOf:
            - $ref: '#/components/schemas/PlanReference'
          description: The base plan of the subscription.
        currency:
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
          description: |-
            The currency code of the subscription.
            Will be revised once we add multi currency support.
          title: Currency
          default: USD
        activeTo:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: If the subscription is canceled or otherwise have to end activeTo denotes the end date.
      description: Subscription is an exact subscription instance.
    SubscriptionEditAdd:
      type: object
      required:
        - op
        - path
        - value
      properties:
        op:
          type: string
          enum:
            - add
        path:
          type: string
          pattern: ^\/phases\/[a-zA-Z0-9\-]+$
        value:
          $ref: '#/components/schemas/SubscriptionPhaseCreate'
      description: Subscription item add operation.
    SubscriptionEditAddItem:
      type: object
      required:
        - op
        - path
        - value
      properties:
        op:
          type: string
          enum:
            - add
        path:
          type: string
          pattern: ^\/phases\/[a-zA-Z0-9\-]+\/items\/[a-zA-Z0-9\-]+$
        value:
          $ref: '#/components/schemas/RateCard'
      description: Subscription item add operation.
    SubscriptionEditAddUpdateItem:
      type: object
      required:
        - op
        - path
        - value
      properties:
        op:
          type: string
          enum:
            - add
        path:
          type: string
          pattern: ^\/phases\/[a-zA-Z0-9\-]+\/items\/[a-zA-Z0-9\-]+$
        value:
          $ref: '#/components/schemas/RateCardUpdateItem'
      description: Subscription item add operation.
    SubscriptionEditExtend:
      type: object
      required:
        - op
        - path
        - value
      properties:
        op:
          type: string
          enum:
            - extend
        path:
          type: string
          pattern: ^\/phases\/[a-zA-Z0-9\-]+$
        value:
          type: object
          properties:
            extendBy:
              type: string
              format: duration
          required:
            - extendBy
      description: Subscription phase extend operation.
    SubscriptionEditRemoveItem:
      type: object
      required:
        - op
        - path
      properties:
        op:
          type: string
          enum:
            - remove
        path:
          type: string
          pattern: ^\/phases\/[a-zA-Z0-9\-]+\/items\/[a-zA-Z0-9\-]+$
      description: Subscription phase remove operation.
    SubscriptionEditRemoveUpdateItem:
      type: object
      required:
        - op
        - path
      properties:
        op:
          type: string
          enum:
            - remove
        path:
          type: string
          pattern: ^\/phases\/[a-zA-Z0-9\-]+\/items\/[a-zA-Z0-9\-]+$
      description: Subscription phase remove operation.
    SubscriptionEditRemoveWithValue:
      type: object
      required:
        - op
        - path
        - value
      properties:
        op:
          type: string
          enum:
            - remove
        path:
          type: string
          pattern: ^\/phases\/[a-zA-Z0-9\-]+$
        value:
          type: object
          properties:
            shift:
              $ref: '#/components/schemas/RemovePhaseShifting'
          required:
            - shift
      description: Subscription item remove operation with a value.
    SubscriptionExpanded:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
        - customerId
        - plan
        - currency
        - phases
      properties:
        id:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: A unique identifier for the resource.
          title: ID
          readOnly: true
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        customerId:
          type: string
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          pattern: ^[0-7][0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{25}$
          description: The customer ID of the subscription.
        plan:
          allOf:
            - $ref: '#/components/schemas/PlanReference'
          description: The base plan of the subscription.
        currency:
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
          description: |-
            The currency code of the subscription.
            Will be revised once we add multi currency support.
          title: Currency
          default: USD
        activeTo:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: If the subscription is canceled or otherwise have to end activeTo denotes the end date.
        phases:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionPhaseExpanded'
      description: Expanded subscription
    SubscriptionItem:
      type: object
      required:
        - name
        - createdAt
        - updatedAt
        - key
        - billingCandence
        - price
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        key:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: |-
            The identifier of the RateCard.
            SubscriptionItem/RateCard can be identified, it has a reference:

            1. If a Feature is associated with the SubscriptionItem, it is identified by the Feature
            1.1 It can be an ID reference, for an exact version of the Feature (Features can change across versions)
            1.2 It can be a Key reference, which always refers to the latest (active or inactive) version of a Feature

            2. If a Feature is not associated with the SubscriptionItem, it is referenced by the Price

            We say “referenced by the Price” regardless of how a price itself is referenced, it colloquially makes sense to say “paying the same price for the same thing”. In practice this should be derived from what's printed on the invoice line-item.
        billingCandence:
          type: string
          format: duration
          nullable: true
          description: |-
            The billing cadence of the rate card.
            When null, the rate card is a one-time purchase.
          title: Billing cadence
        price:
          anyOf:
            - type: object
              allOf:
                - $ref: '#/components/schemas/FlatPriceWithPaymentTerm'
              nullable: true
            - type: object
              allOf:
                - $ref: '#/components/schemas/UnitPriceWithCommitments'
              nullable: true
            - type: object
              allOf:
                - $ref: '#/components/schemas/TieredPriceWithCommitments'
              nullable: true
            - type: object
              allOf:
                - $ref: '#/components/schemas/FlatPriceWithPaymentTerm'
              nullable: true
          example: {}
          description: |-
            The price of the rate card.
            When null, the feature or service is free.
          title: Price
        included:
          type: object
          properties:
            feature:
              allOf:
                - $ref: '#/components/schemas/Feature'
              description: The feature the customer is entitled to use.
            entitlement:
              $ref: '#/components/schemas/Entitlement'
          required:
            - feature
          description: Describes what access is gained via the SubscriptionItem
        taxConfig:
          allOf:
            - $ref: '#/components/schemas/TaxConfig'
          description: |-
            The tax config of the Subscription Item.
            When undefined, the tax config of the feature or the default tax config of the plan is used.
          title: Tax config
      description: The actual contents of the Subscription, what the user gets, what they pay, etc...
    SubscriptionPhase:
      type: object
      required:
        - name
        - createdAt
        - updatedAt
        - key
        - duration
        - activeFrom
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        key:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: A locally unique identifier for the resource.
        duration:
          type: string
          format: duration
          example: P1M
          description: The intended duration of the new phase.
          title: Duration
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
          description: The discounts on the plan.
          title: Discounts
        activeFrom:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: The time from which the phase is active.
      description: Subscription phase, analogous to plan phases.
    SubscriptionPhaseCreate:
      type: object
      required:
        - startAfter
        - duration
      properties:
        startAfter:
          type: string
          format: duration
          nullable: true
          example: P1Y1D
          description: |-
            Interval after the subscription starts to transition to the phase.
            When null, the phase starts immediately after the subscription starts.
          title: Start after
        duration:
          type: string
          format: duration
          example: P1M
          description: The intended duration of the new phase.
          title: Duration
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/DiscountUpdateItem'
          description: The discounts on the plan.
          title: Discounts
      description: Subscription phase create input.
    SubscriptionPhaseExpanded:
      type: object
      required:
        - name
        - createdAt
        - updatedAt
        - key
        - duration
        - activeFrom
        - items
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          description: Human-readable name for the resource. Between 1 and 256 characters.
          title: Display name
        description:
          type: string
          maxLength: 1024
          description: Optional description of the resource. Maximum 1024 characters.
          title: Description
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: Additional metadata for the resource.
          title: Metadata
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was created.
          title: Creation Time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was last updated.
          title: Last Update Time
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          example: 2024-01-01T01:01:01.001Z
          description: Timestamp of when the resource was permanently deleted.
          title: Deletion Time
          readOnly: true
        key:
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[a-z0-9]+(?:_[a-z0-9]+)*$
          description: A locally unique identifier for the resource.
        duration:
          type: string
          format: duration
          example: P1M
          description: The intended duration of the new phase.
          title: Duration
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
          description: The discounts on the plan.
          title: Discounts
        activeFrom:
          type: string
          format: date-time
          example: 2023-01-01T01:01:01.001Z
          description: The time from which the phase is active.
        items:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionItem'
      description: Expanded subscription phase
    SvixOperationalWebhookRequest:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
          enum:
            - endpoint.created
            - endpoint.deleted
            - endpoint.disabled
            - endpoint.updated
            - message.attempt.exhausted
            - message.attempt.failing
            - message.attempt.recovered
          description: The type of the Svix operational webhook request.
          title: Operational Webhook Type
        data:
          type: object
          additionalProperties:
            type: string
          description: The payload of the Svix operational webhook request.
          title: Operational Webhook Payload
      description: Operational webhook reqeuest sent by Svix.
    TaxConfig:
      type: object
      properties:
        stripe:
          allOf:
            - $ref: '#/components/schemas/StripeTaxConfig'
          description: Stripe tax config.
          title: Stripe tax config
      description: Set of provider specific tax configs.
    TieredPrice:
      type: object
      required:
        - type
        - mode
        - tiers
      properties:
        type:
          type: string
          enum:
            - tiered
        mode:
          allOf:
            - $ref: '#/components/schemas/TieredPriceMode'
          description: |-
            Defines if the tiering mode is volume-based or graduated:
            - In `volume`-based tiering, the maximum quantity within a period determines the per unit price.
            - In `graduated` tiering, pricing can change as the quantity grows.
          title: Mode
        tiers:
          type: array
          items:
            $ref: '#/components/schemas/PriceTier'
          minItems: 1
          description: |-
            The tiers of the tiered price.
            At least one price component is required in each tier.
          title: Tiers
      description: Tiered price.
    TieredPriceMode:
      type: string
      enum:
        - volume
        - graduated
      description: The mode of the tiered price.
    TieredPriceWithCommitments:
      type: object
      required:
        - type
        - mode
        - tiers
      properties:
        type:
          type: string
          enum:
            - tiered
        mode:
          allOf:
            - $ref: '#/components/schemas/TieredPriceMode'
          description: |-
            Defines if the tiering mode is volume-based or graduated:
            - In `volume`-based tiering, the maximum quantity within a period determines the per unit price.
            - In `graduated` tiering, pricing can change as the quantity grows.
          title: Mode
        tiers:
          type: array
          items:
            $ref: '#/components/schemas/PriceTier'
          minItems: 1
          description: |-
            The tiers of the tiered price.
            At least one price component is required in each tier.
          title: Tiers
        minimumAmount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          description: The customer is committed to spend at least the amount.
          title: Minimum amount
        maximumAmount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          description: The customer is limited to spend at most the amount.
          title: Maximum amount
      description: Tiered price with spend commitments.
    UnauthorizedProblemResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/UnexpectedProblemResponse'
      description: The request has not been applied because it lacks valid authentication credentials for the target resource.
    UnexpectedProblemResponse:
      type: object
      required:
        - type
        - title
        - detail
        - instance
      properties:
        type:
          type: string
          format: uri
          example: about:blank
          description: Type contains a URI that identifies the problem type.
          default: about:blank
        title:
          type: string
          example: Bad Request
          description: A a short, human-readable summary of the problem type.
        status:
          type: integer
          format: int16
          example: 400
          minimum: 400
          maximum: 599
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
        detail:
          type: string
          example: The request body must be a JSON object.
          description: A human-readable explanation specific to this occurrence of the problem.
        instance:
          type: string
          format: uri
          example: urn:request:local/JMOlctsKV8-000001
          description: A URI reference that identifies the specific occurrence of the problem.
      additionalProperties:
        anyOf:
          - type: string
          - type: integer
      description: |-
        A Problem Details object (RFC 7807).
        Additional properties specific to the problem type may be present.
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      x-go-type: models.StatusProblem
    UnitPrice:
      type: object
      required:
        - type
        - amount
      properties:
        type:
          type: string
          enum:
            - unit
        amount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          description: The amount of the unit price.
      description: Unit price.
    UnitPriceWithCommitments:
      type: object
      required:
        - type
        - amount
      properties:
        type:
          type: string
          enum:
            - unit
        amount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          description: The amount of the unit price.
        minimumAmount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          description: The customer is committed to spend at least the amount.
          title: Minimum amount
        maximumAmount:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          description: The customer is limited to spend at most the amount.
          title: Maximum amount
      description: Unit price with spend commitments.
    WindowSize:
      type: string
      enum:
        - MINUTE
        - HOUR
        - DAY
      description: Aggregation window size.
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      x-go-type: models.WindowSize
    WindowedBalanceHistory:
      type: object
      required:
        - windowedHistory
        - burndownHistory
      properties:
        windowedHistory:
          type: array
          items:
            $ref: '#/components/schemas/BalanceHistoryWindow'
          description: |-
            The windowed balance history.
            - It only returns rows for windows where there was usage.
            - The windows are inclusive at their start and exclusive at their end.
            - The last window may be smaller than the window size and is inclusive at both ends.
        burndownHistory:
          type: array
          items:
            $ref: '#/components/schemas/GrantBurnDownHistorySegment'
          description: Grant burndown history.
      description: The windowed balance history.
    queryCustomerList:
      type: object
      properties:
        order:
          allOf:
            - $ref: '#/components/schemas/SortOrder'
          example: ASC
          description: The order direction.
          default: ASC
        orderBy:
          allOf:
            - $ref: '#/components/schemas/CustomerOrderBy'
          description: The order by field.
        includeDeleted:
          type: boolean
          description: Include deleted customers.
          default: false
        name:
          type: string
          example: ACME
          description: |-
            Filter customers by name.
            Case-insensitive partial match.
        primaryEmail:
          type: string
          example: acme@test.com
          description: |-
            Filter customers by primary email.
            Case-insensitive partial match.
        subject:
          type: string
          example: my_subject_key
          description: |-
            Filter customers by usage attribution subject.
            Case-insensitive partial match.
      allOf:
        - $ref: '#/components/schemas/PaginatedQuery'
      description: Query params for listing customers.
  securitySchemes:
    PortalTokenAuth:
      type: http
      scheme: bearer
      description: Consumer portal token.
servers:
  - url: https://127.0.0.1
    description: Local
    variables: {}
