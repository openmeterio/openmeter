openapi: "3.0.3"
info:
  title: OpenMeter API
  version: "1.0.0"
  description: |
    OpenMeter is a cloud native usage metering service.
    The OpenMeter API allows you to ingest events, query meter usage, and manage resources.
    ---
    *Operations with the ☁ (cloud) notation are only available in OpenMeter Cloud.*
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
externalDocs:
  description: Documentation
  url: https://openmeter.io/docs
servers:
  - url: http://127.0.0.1:8888
    description: local
  - url: https://openmeter.cloud
    description: cloud
tags:
  - name: Events
    description: |
      Endpoints related to ingesting and debugging usage events.
      [Learn more](https://openmeter.io/docs/getting-started/usage/overview)
  - name: Meters
    description: |
      Endpoints related to creating, and querying meters.
      [Learn more](https://openmeter.io/docs/getting-started/meters/overview)
  - name: Portal
    description: |
      Endpoints related to the consumer portal.
      [Learn more](https://openmeter.io/docs/monetize/dashboard/portal-developer-guide)
  - name: Subjects
    description: |
      Endpoints related to subjects.
      [Learn more](https://openmeter.io/docs/getting-started/subjects)
  - name: Entitlements (Experimental)
    description: |
      Endpoints related to entitlements.
      [Learn more](https://openmeter.io/docs/monetize/entitlements/overview)
  - name: Debug
    description: |
      Debugging endpoints. Useful for debugging and testing.
paths:
  /api/v1/events:
    get:
      summary: List ingested events
      description: |
        List ingested events within a time range.
      operationId: listEvents
      parameters:
        - $ref: "#/components/parameters/queryFrom"
        - $ref: "#/components/parameters/queryTo"
        - name: limit
          in: query
          required: false
          description: Number of events to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
            example: 100
      tags:
        - Events
      responses:
        "200":
          description: List of events for debugging.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IngestedEvent"
                example:
                  - event:
                      id: 5c10fade-1c9e-4d6c-8275-c52c36731d3c
                      source: service-name
                      specversion: "1.0"
                      type: prompt
                      subject: customer-id
                      time: "2023-01-01T01:01:01.001Z"
                      data:
                        tokens: "1234"
                        model: "gpt-4-turbo"
                        type: "input"
                  - event:
                      id: 912d1d87-09ad-4bcc-a57d-5b3552493ed2
                      source: service-name
                      specversion: "1.0"
                      type: prompt
                      subject: customer-id
                      time: "2023-01-01T01:01:02.001Z"
                      data:
                        tokens: "2345"
                        model: "gpt-4-turbo"
                        type: "output"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    post:
      operationId: ingestEvents
      summary: Ingest events
      description: |
        Ingests an event or batch of events following the CloudEvents specification.
      requestBody:
        description: |
          The event or batch of events to ingest.
          The request body must be a CloudEvents JSON object or an array of CloudEvents JSON objects.
          The CloudEvents JSON object must adhere to the CloudEvents Specification JSON Schema.
        required: true
        content:
          application/cloudevents+json:
            schema:
              $ref: "#/components/schemas/Event"
          application/cloudevents-batch+json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Event"
              example:
                - id: 5c10fade-1c9e-4d6c-8275-c52c36731d3c
                  source: service-name
                  specversion: "1.0"
                  type: prompt
                  subject: customer-id
                  time: "2023-01-01T01:01:01.001Z"
                  data:
                    tokens: "1234"
                    model: "gpt-4-turbo"
                    type: "input"
                - id: 912d1d87-09ad-4bcc-a57d-5b3552493ed2
                  source: service-name
                  specversion: "1.0"
                  type: prompt
                  subject: customer-id
                  time: "2023-01-01T01:01:02.001Z"
                  data:
                    tokens: "2345"
                    model: "gpt-4-turbo"
                    type: "output"

      tags:
        - Events
      responses:
        "204":
          description: Successfully ingested.
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/meters:
    get:
      operationId: listMeters
      summary: List meters
      description: List meters.
      tags:
        - Meters
      responses:
        "200":
          description: List of meters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Meter"
                example:
                  - id: 01G65Z755AFWAKHE12NY0CQ9FH
                    slug: tokens_total
                    description: AI token usage
                    aggregation: SUM
                    windowSize: MINUTE
                    eventType: prompt
                    valueProperty: $.tokens
                    groupBy:
                      model: $.model
                      type: $.type
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    post:
      operationId: createMeter
      summary: ☁ Create meter
      description: |
        *Available in OpenMeter Cloud.*
        *In the open-source version, meters are created in the configuration file.*

        Create a meter.
      tags:
        - Meters
      requestBody:
        description: The meter to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Meter"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meter"
              example:
                id: 01G65Z755AFWAKHE12NY0CQ9FH
                slug: tokens_total
                description: AI token usage
                aggregation: SUM
                windowSize: MINUTE
                eventType: prompt
                valueProperty: $.tokens
                groupBy:
                  model: $.model
                  type: $.type
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/meters/{meterIdOrSlug}:
    get:
      operationId: getMeter
      summary: Get meter
      description: Get meter by ID or slug
      parameters:
        - $ref: "#/components/parameters/meterIdOrSlug"
      tags:
        - Meters
      responses:
        "200":
          description: Meter found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meter"
              example:
                id: 01G65Z755AFWAKHE12NY0CQ9FH
                slug: tokens_total
                description: AI token usage
                aggregation: SUM
                windowSize: MINUTE
                eventType: prompt
                valueProperty: $.tokens
                groupBy:
                  model: $.model
                  type: $.type
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    delete:
      operationId: deleteMeter
      summary: ☁ Delete meter
      description: |
        *Available in OpenMeter Cloud.*

        Delete a meter by ID or slug.
      parameters:
        - $ref: "#/components/parameters/meterIdOrSlug"
      tags:
        - Meters
      responses:
        "204":
          description: Meter deleted.
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/meters/{meterIdOrSlug}/query:
    get:
      operationId: queryMeter
      summary: Query meter
      description: Query meter for usage.
      tags:
        - Meters
      parameters:
        - $ref: "#/components/parameters/meterIdOrSlug"
        - $ref: "#/components/parameters/queryFrom"
        - $ref: "#/components/parameters/queryTo"
        - $ref: "#/components/parameters/queryWindowSize"
        - $ref: "#/components/parameters/queryWindowTimeZone"
        - $ref: "#/components/parameters/queryFilterSubject"
        - $ref: "#/components/parameters/queryFilterGroupBy"
        - $ref: "#/components/parameters/queryGroupBy"
      responses:
        "200":
          description: Usage data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeterQueryResult"
              example:
                from: "2023-01-01T00:00:00Z"
                to: "2023-01-02T00:00:00Z"
                windowSize: MINUTE
                data:
                  - value: 12
                    windowStart: "2023-01-01T00:00:00Z"
                    windowEnd: "2023-01-02T00:00:00Z"
                    subject: customer-id
                    groupBy:
                      model: gpt-4-turbo
                      type: prompt
            text/csv:
              schema:
                type: string
                example: |-
                  window_start,window_end,subject,model,type,value
                  2023-01-01T00:00:00Z,2023-01-01T00:01:00Z,customer_1,gpt-4-turbo,input,12
                  2023-01-01T00:01:00Z,2023-01-02T00:02:00Z,customer_1,gpt-4-turbo,input,20
                  2023-01-01T00:02:00Z,2023-01-02T00:03:00Z,customer_2,gpt-4-turbo,output,4

        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/meters/{meterIdOrSlug}/subjects:
    get:
      operationId: listMeterSubjects
      summary: List meter subjects
      description: List subjects for a meter.
      tags:
        - Meters
      parameters:
        - $ref: "#/components/parameters/meterIdOrSlug"
      responses:
        "200":
          description: List of subjects.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - customer-id
                  - customer_2
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Portal
  /api/v1/portal/tokens:
    post:
      operationId: createPortalToken
      summary: Create portal token
      description: Create a consumer portal token.
      tags:
        - Portal
      requestBody:
        description: The portal token to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PortalToken"
            example:
              subject: customer-id
              allowedMeterSlugs:
                - tokens_total
      responses:
        "200":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortalToken"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    get:
      operationId: listPortalTokens
      summary: ☁ List portal tokens
      description: |
        *Available in OpenMeter Cloud.*

        List consumer portal tokens.
      tags:
        - Portal
      parameters:
        - name: limit
          in: query
          required: false
          description: Number of portal tokens to return. Default is 25.
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
            example: 25
      responses:
        "200":
          description: List of portal tokens.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PortalToken"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/portal/tokens/invalidate:
    post:
      operationId: invalidatePortalTokens
      summary: ☁ Invalidate portal tokens
      description: |
        *Available in OpenMeter Cloud.*

        Invalidates consumer portal tokens by ID or subject.
      tags:
        - Portal
      requestBody:
        description: If no id or subject is specified, all tokens will be invalidated.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Invalidate a portal token by ID.
                subject:
                  type: string
                  description: Invalidate all portal tokens for a subject.
            examples:
              "Invalidate by ID":
                description: Invalidate a portal token by ID.
                value:
                  id: "01G65Z755AFWAKHE12NY0CQ9FH"
              "Invalidate by subject":
                description: Invalidate all portal tokens for a subject.
                value:
                  subject: "customer-id"
              "Invalidate all":
                description: Invalidate all portal tokens.
                value: {}
      responses:
        "204":
          description: Portal tokens invalidated.
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Subject
  /api/v1/subjects:
    get:
      operationId: listSubjects
      summary: ☁ List subjects
      description: |
        *Available in OpenMeter Cloud.*

        List subjects.
      tags:
        - Subjects
      responses:
        "200":
          description: List of subjects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Subject"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    post:
      operationId: upsertSubject
      summary: ☁ Upsert subject
      description: |
        *Available in OpenMeter Cloud.*

        Upserts a subject. Creates or updates subject.
        If the subject doesn't exist, it will be created.
        If the subject exists, it will be partially updated with the provided fields.
      tags:
        - Subjects
      requestBody:
        description: The subject to upsert.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Subject"
      responses:
        "200":
          description: Subject upserted.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Subject"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/subjects/{subjectIdOrKey}:
    get:
      operationId: getSubject
      summary: ☁ Get subject
      description: |
        *Available in OpenMeter Cloud.*

        Get subject by ID or key.
      tags:
        - Subjects
      parameters:
        - $ref: "#/components/parameters/subjectIdOrKey"
      responses:
        "200":
          description: Subject found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subject"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    delete:
      operationId: deleteSubject
      summary: ☁ Delete subject
      description: |
        *Available in OpenMeter Cloud.*

        Delete a subject by ID or key.
      tags:
        - Subjects
      parameters:
        - $ref: "#/components/parameters/subjectIdOrKey"
      responses:
        "204":
          description: Subject deleted.
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Portal
  /api/v1/portal/meters/{meterSlug}/query:
    get:
      operationId: queryPortalMeter
      summary: Query portal meter
      description: Query meter for consumer portal. This endpoint is publicly exposable to consumers.
      tags:
        - Portal
      security:
        - PortalTokenAuth: []
        - CloudPortalTokenAuth: []
      parameters:
        - name: meterSlug
          description: A unique identifier for the meter.
          in: path
          required: true
          schema:
            type: string
            example: "tokens_total"
        - $ref: "#/components/parameters/queryFrom"
        - $ref: "#/components/parameters/queryTo"
        - $ref: "#/components/parameters/queryWindowSize"
        - $ref: "#/components/parameters/queryWindowTimeZone"
        - $ref: "#/components/parameters/queryFilterGroupBy"
        - $ref: "#/components/parameters/queryGroupBy"
      responses:
        "200":
          description: Usage data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeterQueryResult"
            text/csv:
              schema:
                type: string
                example: |-
                  window_start,window_end,subject,model,type,value
                  2023-01-01T00:00:00Z,2023-01-01T00:01:00Z,customer_1,gpt-4-turbo,input,12
                  2023-01-01T00:01:00Z,2023-01-02T00:02:00Z,customer_1,gpt-4-turbo,input,20
                  2023-01-01T00:02:00Z,2023-01-02T00:03:00Z,customer_2,gpt-4-turbo,output,4
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Entitlement
  /api/v1/entitlements:
    get:
      operationId: listEntitlements
      summary: List entitlements
      description: |
        List all entitlements regardless of subject. This endpoint is intended for administrative purposes.
      tags:
        - Entitlements (Experimental)
      parameters:
        # TODO: add search capabilities
        - $ref: "#/components/parameters/queryLimit"
        - $ref: "#/components/parameters/queryOffset"
        - name: orderBy
          in: query
          required: false
          description: Order by field
          schema:
            type: string
            enum:
              - createdAt
              - updatedAt
            default: createdAt
      responses:
        "200":
          description: List of entitlements.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entitlement"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # Feature
  /api/v1/features:
    get:
      operationId: listFeatures
      summary: List features
      description: |
        List all features.
      tags:
        - Entitlements (Experimental)
      parameters:
        - $ref: "#/components/parameters/queryLimit"
        - $ref: "#/components/parameters/queryOffset"
        - name: orderBy
          in: query
          required: false
          description: Order by field
          schema:
            type: string
            enum:
              - id
              - createdAt
              - updatedAt
            default: updatedAt
        - name: includeArchived
          in: query
          required: false
          description: Include archived features.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: List of features.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Feature"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    post:
      operationId: createFeature
      summary: Create a feature
      description: |
        Features are either metered or static. A feature is metered if meterSlug is provided at creation.
        For metered features you can pass additional filters that will be applied when calculating feature usage, based on the meter's groupBy fields. Only meters with SUM and COUNT aggregation are supported for features.

        Features cannot be updated later, only archived.
      tags:
        - Entitlements (Experimental)
      requestBody:
        description: The feature to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeatureCreateInputs"
      responses:
        "201":
          description: Feature created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/features/{featureId}:
    get:
      operationId: getFeature
      summary: Get feature
      description: |
        Get a feature by id.
      tags:
        - Entitlements (Experimental)
      parameters:
        - $ref: "#/components/parameters/featureId"
      responses:
        "200":
          description: Feature found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    delete:
      operationId: deleteFeature
      summary: Archive a feature
      description: |
        Once a feature is archived it cannot be unarchived. If a feature is archived, new entitlements cannot be created for it, but archiving the feature does not affect existing entitlements. This means, if you want to create a new feature with the same key, and then create entitlements for it, the previous entitlements have to be deleted first on a per subject basis.
      tags:
        - Entitlements (Experimental)
      parameters:
        - $ref: "#/components/parameters/featureId"
      responses:
        "204":
          description: Feature deleted.
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/grants:
    get:
      operationId: listGrants
      summary: List grants
      description: |
        List all grants for all the subjects and entitlements. This endpoint is intended for administrative purposes only. To fetch the grants of a specific entitlement please use the /api/v1/subjects/{subjectKeyOrID}/entitlements/{entitlementOrFeatureID}/grants endpoint.
      tags:
        - Entitlements (Experimental)
      parameters:
        - $ref: "#/components/parameters/queryLimit"
        - $ref: "#/components/parameters/queryOffset"
        - name: orderBy
          in: query
          required: false
          description: Order by field
          schema:
            type: string
            enum:
              - id
              - createdAt
              - updatedAt
            default: updatedAt
        - $ref: "#/components/parameters/includeDeleted"
      responses:
        "200":
          description: List of grants.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EntitlementGrant"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/grants/{grantId}:
    delete:
      operationId: voidGrant
      summary: Void a grant
      description: |
        Voiding a grant means it is no longer valid, it doesn't take part in further balance calculations. Voiding a grant does not retroactively take effect, meaning any usage that has already been attributed to the grant will remain, but future usage cannot be burnt down from the grant.

        For example, if you have a single grant for your metered entitlement with an initial amount of 100, and so far 60 usage has been metered, the grant (and the entitlement itself) would have a balance of 40. If you then void that grant, balance becomes 0, but the 60 previous usage will not be affected.
      tags:
        - Entitlements (Experimental)
      parameters:
        - $ref: "#/components/parameters/grantId"
      responses:
        "204":
          description: Grant has been voided.
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "409":
          $ref: "#/components/responses/ConflictProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/subjects/{subjectIdOrKey}/entitlements:
    post:
      operationId: createEntitlement
      summary: Create an entitlement
      description: |
        OpenMeter has three types of entitlements: metered, boolean, and static. The type property determines the type of entitlement. The underlying feature has to be compatible with the entitlement type specified in the request (e.g., a metered entitlement needs a feature associated with a meter).

        - Boolean entitlements define static feature access, e.g. "Can use SSO authentication".
        - Static entitlements let you pass along a configuration while granting access, e.g. "Using this feature with X Y settings" (passed in the config).
        - Metered entitlements have many use cases, from setting up usage-based access to implementing complex credit systems.  Example: The customer can use 10000 AI tokens during the usage period of the entitlement.

        A given subject can only have one active (non-deleted) entitlement per featureKey. If you try to create a new entitlement for a featureKey that already has an active entitlement, the request will fail with a 409 error.

        Once an entitlement is created you cannot modify it, only delete it.
      tags:
        - Entitlements (Experimental)
      parameters:
        - $ref: "#/components/parameters/subjectIdOrKey"
      requestBody:
        description: The entitlement to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntitlementCreateInputs"
      responses:
        "201":
          description: Entitlement created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entitlement"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "409":
          $ref: "#/components/responses/ConflictProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    get:
      operationId: listSubjectEntitlements
      summary: List entitlements of a subject
      description: |
        List all entitlements for a subject. For checking entitlement access, use the /value endpoint instead.
      tags:
        - Entitlements (Experimental)
      parameters:
        - $ref: "#/components/parameters/subjectIdOrKey"
        - $ref: "#/components/parameters/includeDeleted"
      responses:
        "200":
          description: List of entitlements.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entitlement"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}:
    get:
      operationId: getEntitlement
      summary: Get an entitlement
      description: |
        Get entitlement by id. For checking entitlement access, use the /value endpoint instead.
      tags:
        - Entitlements (Experimental)
      parameters:
        - $ref: "#/components/parameters/subjectIdOrKey"
        - $ref: "#/components/parameters/entitlementId"
      responses:
        "200":
          description: Entitlement found.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Entitlement"
                  - type: object
                    properties:
                      lastReset:
                        description: The last time usage was reset.
                        readOnly: true
                        type: string
                        format: date-time
                        example: "2023-01-01T00:00:00Z"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    delete:
      operationId: deleteEntitlement
      summary: Delete an entitlement
      description: |
        Deleting an entitlement revokes access to the associated feature. As a single subject can only have one entitlement per featureKey, when "migrating" features you have to delete the old entitlements as well.
        As access and status checks can be historical queries, deleting an entitlement populates the deletedAt timestamp. When queried for a time before that, the entitlement is still considered active, you cannot have retroactive changes to access, which is important for, among other things, auditing.
      tags:
        - Entitlements (Experimental)
      parameters:
        - $ref: "#/components/parameters/subjectIdOrKey"
        - $ref: "#/components/parameters/entitlementId"
      responses:
        "204":
          description: Entitlement deleted.
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/grants:
    get:
      operationId: listEntitlementGrants
      summary: List grants for an entitlement
      description: |
        List all grants issued for an entitlement. The entitlement can be defined either by its id or featureKey.
      tags:
        - Entitlements (Experimental)
      parameters:
        - $ref: "#/components/parameters/subjectIdOrKey"
        - $ref: "#/components/parameters/entitlementIdOrFeatureKey"
        - $ref: "#/components/parameters/includeDeleted"
        - name: orderBy
          in: query
          required: false
          description: Order by field
          schema:
            type: string
            enum:
              - id
              - createdAt
              - updatedAt
            default: updatedAt
      responses:
        "200":
          description: List of grants.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EntitlementGrant"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
    post:
      operationId: createGrant
      summary: Create a grant
      description: |
        Grants define a behavior of granting usage for a metered entitlement. They can have complicated recurrence and rollover rules, thanks to which you can define a wide range of access patterns with a single grant, in most cases you don't have to periodically create new grants. You can only issue grants for active metered entitlements.

        A grant defines a given amount of usage that can be consumed for the entitlement. The grant is in effect between its effective date and its expiration date. Specifying both is mandatory for new grants.

        Grants have a priority setting that determines their order of use. Lower numbers have higher priority, with 0 being the highest priority.

        Grants can have a recurrence setting intended to automate the manual reissuing of grants. For example, a daily recurrence is equal to reissuing that same grant every day (ignoring rollover settings).

        Rollover settings define what happens to the remaining balance of a grant at a reset. Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))

        Grants cannot be changed once created, only deleted. This is to ensure that balance is deterministic regardless of when it is queried.
      tags:
        - Entitlements (Experimental)
      parameters:
        - $ref: "#/components/parameters/subjectIdOrKey"
        - $ref: "#/components/parameters/entitlementIdOrFeatureKey"
      requestBody:
        description: The grant to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntitlementGrantCreateInput"
      responses:
        "201":
          description: Grant created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntitlementGrant"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "501":
          $ref: "#/components/responses/NotImplementedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  # TODO: should this be /value to be compatible with all three entitlement types
  /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementIdOrFeatureKey}/value:
    get:
      operationId: getEntitlementValue
      summary: Get the current value and access of an entitlement
      description: |
        This endpoint should be used for access checks and enforcement. All entitlement types share the hasAccess property in their value response, but multiple other properties are returned based on the entitlement type.

        For convenience reasons, /value works with both entitlementId and featureKey.
      tags:
        - Entitlements (Experimental)
      parameters:
        - $ref: "#/components/parameters/subjectIdOrKey"
        - $ref: "#/components/parameters/entitlementIdOrFeatureKey"
        - name: time
          in: query
          required: false
          description: |
            Point of time to check value: date-time in RFC 3339 format. Defaults to now.
          schema:
            type: string
            format: date-time
            example: "2023-01-01T00:00:00Z"
      responses:
        "200":
          description: The entitlement value.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntitlementValue"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"

  /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/history:
    get:
      operationId: getEntitlementHistory
      summary: Get the balance history of a specific entitlement.
      description: |
        Returns historical balance and usage data for the entitlement. The queried history can span accross multiple reset events.

        BurndownHistory returns a continous history of segments, where the segments are seperated by events that changed either the grant burndown priority or the usage period.

        WindowedHistory returns windowed usage data for the period enriched with balance information and the list of grants that were being burnt down in that window.
      tags:
        - Entitlements (Experimental)
      parameters:
        - $ref: "#/components/parameters/subjectIdOrKey"
        - $ref: "#/components/parameters/entitlementId"
        - name: from
          in: query
          required: false
          description: |
            Start of time range to query entitlement: date-time in RFC 3339 format. Defaults to
            the last reset.
            Gets truncated to the granularity of the underlying meter.
          schema:
            type: string
            format: date-time
            example: "2023-01-01T00:00:00Z"
        - name: to
          in: query
          required: false
          description: |
            End of time range to query entitlement: date-time in RFC 3339 format. Defaults to now.
            If not now then gets truncated to the granularity of the underlying meter.
          schema:
            type: string
            format: date-time
            example: "2023-01-01T00:00:00Z"
        - name: windowSize
          in: query
          required: true
          description: |
            Size of the time window to group the history by. Cannot be shorter than meter granularity.
          schema:
            type: string
            enum:
              - MINUTE
              - HOUR
              - DAY
        - $ref: "#/components/parameters/queryWindowTimeZone"
      responses:
        "200":
          description: |
            The history response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WindowedBalanceHistory"
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"
  /api/v1/subjects/{subjectIdOrKey}/entitlements/{entitlementId}/reset:
    post:
      operationId: resetEntitlementUsage
      summary: Reset an entitlement
      description: |
        Reset marks the start of a new usage period for the entitlement and initiates grant rollover. At the start of a period usage is zerod out and grants are rolled over based on their rollover settings. It would typically be synced with the subjects billing period to enforce usage based on their subscription.

        Usage is automatically reset for metered entitlements based on their usage period, but this endpoint allows to manually reset it at any time. When doing so the period anchor of the entitlement can be changed if needed.
      tags:
        - Entitlements (Experimental)
      parameters:
        - $ref: "#/components/parameters/subjectIdOrKey"
        - $ref: "#/components/parameters/entitlementId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                effectiveAt:
                  type: string
                  format: date-time
                  description: |
                    The time at which the reset takes effect, defaults to now. The reset cannot be in the future. The provided value is truncated to the minute due to how historical meter data is stored.
                  example: "2023-01-01T00:00:00Z"
                retainAnchor:
                  type: boolean
                  description: |
                    Determines whether the usage period anchor is retained or reset to the effectiveAt time.
                    - If true, the usage period anchor is retained.
                    - If false, the usage period anchor is reset to the effectiveAt time.
      responses:
        "204":
          description: Entitlement reset.
        "400":
          $ref: "#/components/responses/BadRequestProblemResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        "404":
          $ref: "#/components/responses/NotFoundProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"

  /api/v1/debug/metrics:
    get:
      summary: Get event metrics
      description: |
        Returns debug metrics like the number of ingested events since mindnight UTC.
        The OpenMetrics Counter(s) reset every day at midnight UTC.
      operationId: getDebugMetrics
      tags:
        - Debug
      responses:
        "200":
          description: Dbeug metrics, like number of ingested events.
          content:
            text/plain:
              schema:
                type: string
                example: |-
                  # HELP openmeter_events Number of ingested events
                  # TYPE openmeter_events counter
                  openmeter_events_total{subject="customer-1"} 12345.0
                  openmeter_events_total{subject="customer-1",error="true"} 1.0
        "401":
          $ref: "#/components/responses/UnauthorizedProblemResponse"
        default:
          $ref: "#/components/responses/UnexpectedProblemResponse"

components:
  schemas:
    SharedMetaFields:
      type: object
      description: |
        Metadata fields for all resources.
        These fields are automatically populated by the system for managed entities. Their use and meaning is uniform across all resources.
      required:
        - id
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: |
            Readonly unique ULID identifier.
          readOnly: true
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        createdAt:
          type: string
          format: date-time
          description: The date and time the resource was created.
          readOnly: true
          example: "2023-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: The date and time the resource was last updated. The initial value is the same as createdAt.
          readOnly: true
          example: "2023-01-01T00:00:00Z"
        deletedAt:
          type: string
          format: date-time
          description: The date and time the resource was deleted.
          readOnly: true
          example: "2023-01-01T00:00:00Z"
    ConflictProblem:
      description: Conflict
      type: object
      properties:
        type:
          type: string
          format: uri
          description: Type contains a URI that identifies the problem type.
          example: "urn:problem-type:bad-request"
        title:
          type: string
          description: A a short, human-readable summary of the problem type.
          example: Bad Request
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          minimum: 400
          maximum: 599
          example: 400
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: "body must be a JSON object"
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence of the problem.
          example: "urn:request:local/JMOlctsKV8-000001"
        extensions:
          type: object
          required:
            - conflictingEntityId
          additionalProperties: false
          properties:
            conflictingEntityId:
              type: string
              description: The id of the conflicting entity.
              example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
      additionalProperties: true
      required:
        - type
        - title
        - status
        - detail
      example:
        type: "about:blank"
        title: "Conflict"
        status: 409
        detail: "ledger (default.01HXVNDJR532E8GTBVSC2XK5D4) already exitst for subject subject-1"
        instance: "urn:request:local/JMOlctsKV8-000001"
        conflictingEntityId: 01HXVNDJR532E8GTBVSC2XK5D4
    Problem:
      type: object
      description: |-
        A Problem Details object (RFC 7807).
        Additional properties specific to the problem type may be present.
      x-go-type: models.StatusProblem
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      properties:
        type:
          type: string
          format: uri
          description: Type contains a URI that identifies the problem type.
          example: "urn:problem-type:bad-request"
        title:
          type: string
          description: A a short, human-readable summary of the problem type.
          example: Bad Request
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          minimum: 400
          maximum: 599
          example: 400
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: "body must be a JSON object"
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence of the problem.
          example: "urn:request:local/JMOlctsKV8-000001"
      additionalProperties: true
      required:
        - type
        - title
        - status
        - detail
      example:
        type: "urn:problem-type:bad-request"
        title: "Bad Request"
        status: 400
        detail: "body must be a JSON object"
    Event:
      description: CloudEvents Specification JSON Schema
      x-go-type: event.Event
      x-go-type-import:
        path: github.com/cloudevents/sdk-go/v2/event
      type: object
      additionalProperties: false
      properties:
        id:
          description: Identifies the event.
          type: string
          minLength: 1
          example: 5c10fade-1c9e-4d6c-8275-c52c36731d3c
        source:
          description: Identifies the context in which an event happened.
          type: string
          format: uri-reference
          minLength: 1
          example: service-name
        specversion:
          description: The version of the CloudEvents specification which the event uses.
          type: string
          minLength: 1
          example: "1.0"
        type:
          description: Describes the type of event related to the originating occurrence.
          type: string
          example: prompt
        datacontenttype:
          description: Content type of the data value. Must adhere to RFC 2046 format.
          type: string
          enum:
            - application/json
          nullable: true
          minLength: 1
          example: application/json
        dataschema:
          description: Identifies the schema that data adheres to.
          type: string
          nullable: true
          format: uri
          minLength: 1
        subject:
          description: Describes the subject of the event in the context of the event producer (identified by source).
          type: string
          nullable: false
          minLength: 1
          example: "customer-id"
        time:
          description: Timestamp of when the occurrence happened. Must adhere to RFC 3339.
          type: string
          nullable: true
          format: date-time
          minLength: 1
          example: "2023-01-01T01:01:01.001Z"
        data:
          description: The event payload.
          type: object
          additionalProperties: true
          example:
            tokens: "1234"
            model: "gpt-4-turbo"
      required:
        - id
        - source
        - specversion
        - type
        - subject
      example:
        id: 5c10fade-1c9e-4d6c-8275-c52c36731d3c
        source: service-name
        specversion: "1.0"
        type: prompt
        subject: customer-id
        time: "2023-01-01T01:01:01.001Z"
        data:
          tokens: "1234"
          model: "gpt-4-turbo"
          type: "input"
    IngestedEvent:
      description: An ingested event with optional validation error.
      type: object
      additionalProperties: false
      required:
        - event
      properties:
        event:
          $ref: "#/components/schemas/Event"
        validationError:
          type: string
          readOnly: true
          example: "invalid event"
      example:
        event:
          id: 5c10fade-1c9e-4d6c-8275-c52c36731d3d
          source: service-name
          specversion: "1.0"
          type: prompt
          subject: customer-id
          time: "2023-01-01T01:01:01.001Z"
          data:
            tokens: "1234"
            model: "gpt-4-turbo"
        validationError: "meter not found for event"
    FeatureCreateInputs:
      type: object
      description: |
        A feature is a feature or service offered to a customer.
        For example: CPU-Hours, Tokens, API Calls, etc.
      required:
        - key
        - name
      properties:
        key:
          description: |
            The key is an immutable unique identifier of the feature used throughout the API, for example when interacting with a subject's entitlements. The key has to be unique across all active features, but archived features can share the same key. The key should consist of lowercase alphanumeric characters and dashes.
          type: string
          example: gpt4_tokens
        name:
          description: |
            The name of the feature.
          type: string
          example: AI Tokens
        metadata:
          description: |
            Additional metadata for the feature, useful for syncing with external systems and annotating custom fields.
          type: object
          additionalProperties:
            type: string
        meterSlug:
          description: |
            The meter that the feature is associated with and and based on which usage is calculated.
            The meter selected must have SUM or COUNT aggregation.
          type: string
          example: tokens_total
        meterGroupByFilters:
          description: |
            Optional meter group by filters. Useful if the meter scope is broader than what feature tracks. Example scenario would be a meter tracking all token use with groupBy fields for the model, then the feature could filter for model=gpt-4.
          type: object
          additionalProperties:
            type: string
          example:
            model: gpt-4
    Feature:
      type: object
      description: |
        A feature is a feature or service offered to a customer.
        For example: CPU-Hours, Tokens, API Calls, etc.
      allOf:
        - type: object
          properties:
            archivedAt:
              readOnly: true
              description: |
                If the feature is archived, no new entitlements can be created for it.
              type: string
              format: date-time
              example: "2023-01-01T00:00:00Z"
        - $ref: "#/components/schemas/FeatureCreateInputs"
        - $ref: "#/components/schemas/SharedMetaFields"
    # Entitlement has 3 subtypes
    EntitlementCreateSharedFields:
      type: object
      properties:
        featureKey:
          description: |
            The feature the subject is entitled to use.
            Either featureKey or featureId is required.
          type: string
          example: example-feature-key
        featureId:
          description: |
            The feature the subject is entitled to use.
            Either featureKey or featureId is required.
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        metadata:
          description: |
            Additional metadata for the feature.
          type: object
          additionalProperties:
            type: string
        usagePeriod:
          $ref: "#/components/schemas/RecurringPeriodCreateInput"
    EntitlementSharedFields:
      allOf:
        - $ref: "#/components/schemas/SharedMetaFields"
        - $ref: "#/components/schemas/EntitlementCreateSharedFields"
        - type: object
          required:
            - subjectKey
            - featureKey
            - featureId
          properties:
            featureKey:
              description: |
                The feature the subject is entitled to use.
                Either featureKey or featureId is required.
              type: string
              example: example-feature-key
            featureId:
              description: |
                The feature the subject is entitled to use.
                Either featureKey or featureId is required.
              type: string
              example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
            subjectKey:
              description: The identifier key unique to the subject
              type: string
              example: customer-1
            usagePeriod:
              $ref: "#/components/schemas/RecurringPeriod"
            currentUsagePeriod:
              $ref: "#/components/schemas/Period"
    EntitlementMeteredCreateInputs:
      allOf:
        - $ref: "#/components/schemas/EntitlementCreateSharedFields"
        - type: object
          description: |
            Metered entitlement where access is determined based on feature usage.
          required:
            - type
            - usagePeriod
          properties:
            type:
              type: string
              enum:
                - metered
              example: metered
            isSoftLimit:
              type: boolean
              default: false
              description: |
                If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.
            isUnlimited:
              type: boolean
              default: false
              description: |
                Deprecated, ignored by the backend. Please use isSoftLimit instead; this field will be removed in the future.
            usagePeriod:
              $ref: "#/components/schemas/RecurringPeriodCreateInput"
            issueAfterReset:
              type: number
              format: double
              description: |
                You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance. If an amount is specified here, a grant will be created alongside the entitlement with the specified amount.
                That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.

                Manually creating such a grant would mean having the "amount", "minRolloverAmount", and "maxRolloverAmount" fields all be the same.
            issueAfterResetPriority:
              type: integer
              minimum: 1
              maximum: 255
              default: 1
              example: 1
              description: |
                Defines the grant priority for the default grant. If provided, issueAfterReset must have a value.
    EntitlementCreateInputs:
      oneOf:
        - $ref: "#/components/schemas/EntitlementMeteredCreateInputs"
        - $ref: "#/components/schemas/EntitlementStaticCreateInputs"
        - $ref: "#/components/schemas/EntitlementBooleanCreateInputs"
      discriminator:
        propertyName: type
        mapping:
          metered: "#/components/schemas/EntitlementMeteredCreateInputs"
          static: "#/components/schemas/EntitlementStaticCreateInputs"
          boolean: "#/components/schemas/EntitlementBooleanCreateInputs"

    EntitlementMetered:
      type: object
      description: |
        Metered entitlements are useful for many different use cases, from setting up usage based access to implementing complex credit systems. Access is determined based on feature usage using a balance calculation (the "usage allowance" provided by the issued grants is "burnt down" by the usage).
      allOf:
        - $ref: "#/components/schemas/EntitlementMeteredCreateInputs"
        - $ref: "#/components/schemas/EntitlementMeteredCalculatedFields"
        - $ref: "#/components/schemas/EntitlementSharedFields"
    EntitlementMeteredCalculatedFields:
      type: object
      description: Calculated fields for a metered entitlement.
      required:
        - lastReset
        - currentUsagePeriod
      properties:
        lastReset:
          description: |
            The last time a reset happened.
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        currentUsagePeriod:
          $ref: "#/components/schemas/Period"
    EntitlementStaticCreateInputs:
      allOf:
        - $ref: "#/components/schemas/EntitlementCreateSharedFields"
        - type: object
          description: |
            Static entitlement good for representing feature configuration.
          required:
            - type
            - config
          properties:
            type:
              type: string
              enum:
                - static
              example: static
            config:
              description: |
                The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object.
              type: string
              example: '{"key1": "value1"}'
    EntitlementStatic:
      type: object
      description: |
        Entitles a subject to use a feature.
      allOf:
        - $ref: "#/components/schemas/EntitlementStaticCreateInputs"
        - $ref: "#/components/schemas/EntitlementSharedFields"
    EntitlementBooleanCreateInputs:
      allOf:
        - $ref: "#/components/schemas/EntitlementCreateSharedFields"
        - type: object
          description: |
            Entitles a subject to use a feature.
          required:
            - type
          properties:
            type:
              type: string
              enum:
                - boolean
              example: boolean
    EntitlementBoolean:
      type: object
      description: |
        Entitles a subject to use a feature.
      allOf:
        - $ref: "#/components/schemas/EntitlementBooleanCreateInputs"
        - $ref: "#/components/schemas/EntitlementSharedFields"
    Entitlement:
      oneOf:
        - $ref: "#/components/schemas/EntitlementMetered"
        - $ref: "#/components/schemas/EntitlementStatic"
        - $ref: "#/components/schemas/EntitlementBoolean"
      discriminator:
        propertyName: type
        mapping:
          metered: "#/components/schemas/EntitlementMetered"
          static: "#/components/schemas/EntitlementStatic"
          boolean: "#/components/schemas/EntitlementBoolean"
    # Might be changed later
    GrantBurnDownHistorySegment:
      type: object
      description: |
        A segment of the grant burn down history.

        A given segment represents the usage of a grant between events that changed either the grant burn down priority order or the usag period.
      properties:
        period:
          $ref: "#/components/schemas/Period"
        usage:
          description: |
            The usage of the grant in the period.
          type: number
          format: double
          readOnly: true
          example: 100
        overage:
          description: |
            Overuse that wasn't covered by grants.
          type: number
          format: double
          readOnly: true
          example: 25
        balanceAtStart:
          description: |
            The entitlement balance at the start of the period.
          type: number
          format: double
          readOnly: true
          example: 100
        grantBalancesAtStart:
          description: |
            The balance breakdown of each active grant at the start of the period: GrantID: Balance
          type: object
          additionalProperties:
            type: number
            format: double
          readOnly: true
          example:
            01ARZ3NDEKTSV4RRFFQ69G5FAV: 100
        balanceAtEnd:
          description: |
            The entitlement balance at the end of the period.
          type: number
          format: double
          readOnly: true
          example: 100
        grantBalancesAtEnd:
          description: |
            The balance breakdown of each active grant at the start of the period: GrantID: Balance
          type: object
          additionalProperties:
            type: number
            format: double
          readOnly: true
          example:
            01ARZ3NDEKTSV4RRFFQ69G5FAV: 100
        grantUsages:
          description: |
            Which grants were actually burnt down in the period and by what amount.
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/GrantUsageRecord"
    # Might be changed later
    GrantUsageRecord:
      type: object
      properties:
        grantId:
          description: |
            The id of the grant.
          type: string
          example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        usage:
          description: |
            The usage of the grant.
          type: number
          format: double
          example: 100

    BalanceHistoryWindow:
      type: object
      description: |
        Windowed usage and balance information.
      properties:
        period:
          $ref: "#/components/schemas/Period"
        usage:
          description: |
            The total usage of the feature in the period.
          type: number
          format: double
          readOnly: true
          example: 100
        balanceAtStart:
          description: |
            The entitlement balance at the start of the period.
          type: number
          format: double
          readOnly: true
          example: 100
    WindowedBalanceHistory:
      type: object
      description: |
        The windowed balance history.
      properties:
        windowedHistory:
          type: array
          description: |
            The windowed balance history.
            - It only returns rows for windows where there was usage.
            - The windows are inclusive at their start and exclusive at their end.
            - The last window may be smaller than the window size and is inclusive at both ends.
          items:
            $ref: "#/components/schemas/BalanceHistoryWindow"
        burndownHistory:
          type: array
          description: |
            Grant burndown history.
          items:
            $ref: "#/components/schemas/GrantBurnDownHistorySegment"
    Period:
      type: object
      description: |
        A time period
      required:
        - from
        - to
      properties:
        from:
          description: |
            Period start time where the amount was applied. If applicable.
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        to:
          description: |
            Period end time where the amount was applied. If applicable.
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
    RecurringPeriodEnum:
      type: string
      description: |
        List of pre-defined periods that can be used for recurring & scheduling.

        DAY:      Every day
        WEEK:     Every week
        MONTH:    Every month
        YEAR:     Every year
      enum:
        - DAY
        - WEEK
        - MONTH
        - YEAR

    RecurringPeriodCreateInput:
      type: object
      description: |
        Recurring period of an entitlement.
      required:
        - interval
      properties:
        interval:
          $ref: "#/components/schemas/RecurringPeriodEnum"
        anchor:
          description: |
            An arbitrary anchor to base the recurring period on.
            If not provided then defaults to now truncated to the hour.
          type: string
          format: date-time
    RecurringPeriod:
      type: object
      description: |
        Recurring period of an entitlement.
      required:
        - interval
        - anchor
      properties:
        interval:
          $ref: "#/components/schemas/RecurringPeriodEnum"
        anchor:
          description: |
            An arbitrary anchor to base the recurring period on.
          type: string
          format: date-time
    EntitlementGrantCreateInput:
      type: object
      description: |
        Grants are used to increase balance of specific subjects.
      required:
        - amount
        - effectiveAt
        - expiration # Does it have to expire?
      properties:
        amount:
          description: |
            The amount to grant. Should be a positive number.
          type: number
          format: double
          example: 100
        priority:
          description: |
            The priority of the grant. Grants with higher priority are applied first.
            Priority is a positive decimal numbers. With lower numbers indicating higher importance.
            For example, a priority of 1 is more urgent than a priority of 2.
            When there are several grants available for the same subject, the system selects the grant with the highest priority.
            In cases where grants share the same priority level, the grant closest to its expiration will be used first.
            In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
          type: integer
          minimum: 1
          maximum: 255
          default: 1
          example: 1
        effectiveAt:
          description: |
            Effective date for grants and anchor for recurring grants. Provided value will be ceiled to metering windowSize (minute).
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        expiration:
          allOf:
            - $ref: "#/components/schemas/ExpirationPeriod"
        maxRolloverAmount:
          description: |
            Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.

            Balance after the reset is calculated as:
            Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
          type: number
          format: double
          default: 0
          example: 100
        minRolloverAmount:
          description: |
            Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.

            Balance after the reset is calculated as:
            Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
          type: number
          format: double
          default: 0
          example: 100
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            stripePaymentId: "pi_4OrAkhLvyihio9p51h9iiFnB"
        recurrence:
          $ref: "#/components/schemas/RecurringPeriodCreateInput"

    EntitlementGrant:
      allOf:
        - $ref: "#/components/schemas/EntitlementGrantCreateInput"
        - $ref: "#/components/schemas/SharedMetaFields"
        - type: object
          required:
            - entitlementId
          properties:
            entitlementId:
              description: |
                The unique entitlement ULID that the grant is associated with.
              type: string
              readOnly: true
              example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
            nextRecurrence:
              description: |
                The next time the grant will recurr.
              type: string
              format: date-time
              example: "2023-01-01T00:00:00Z"
            expiresAt:
              readOnly: true
              description: |
                The expiration date of the grant.
              type: string
              format: date-time
              example: "2023-01-01T00:00:00Z"
            voidedAt:
              type: string
              format: date-time
              description: The date and time the grant was voided (cannot be used after that).
              readOnly: true
            recurrence:
              $ref: "#/components/schemas/RecurringPeriod"
    EntitlementValue:
      type: object
      required:
        - hasAccess
      properties:
        hasAccess:
          description: |
            Whether the subject has access to the feature. Shared accross all entitlement types.
          readOnly: true
          type: boolean
          example: true
        balance:
          description: |
            Only available for metered entitlements. Metered entitlements are built around a balance calculation where feature usage is deducted from the issued grants. Balance represents the remaining balance of the entitlement, it's value never turns negative.
          readOnly: true
          type: number
          format: double
          example: 100
        usage:
          description: |
            Only available for metered entitlements. Returns the total feature usage in the current period.
          readOnly: true
          type: number
          format: double
          example: 50
        overage:
          description: |
            Only available for metered entitlements. Overage represents the usage that wasn't covered by grants, e.g. if the subject had a total feature usage of 100 in the period but they were only granted 80, there would be 20 overage.
          readOnly: true
          type: number
          format: double
          example: 0
        config:
          description: |
            Only available for static entitlements. The JSON parsable config of the entitlement.
          readOnly: true
          type: string
          example: '{"key1": "value1"}'
    ExpirationPeriod:
      type: object
      description: |
        Expiration period of a grant.
      required:
        - duration
        - count
      properties:
        duration:
          description: |
            The expiration period duration like month.
          type: string
          enum:
            - HOUR
            - DAY
            - WEEK
            - MONTH
            - YEAR
        count:
          description: |
            The expiration period count like 12 months.
          type: integer
          example: 12
    Meter:
      type: object
      description: A meter is a configuration that defines how to match and aggregate events.
      x-go-type: models.Meter
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      properties:
        id:
          type: string
          description: A unique identifier for the meter.
          example: 01G65Z755AFWAKHE12NY0CQ9FH
          readOnly: true
        slug:
          type: string
          description: A unique, human-readable identifier for the meter. Must consist only alphanumeric and underscore characters.
          pattern: "^[a-z0-9]+(?:_[a-z0-9]+)*$"
          minLength: 1
          maxLength: 63
          example: tokens_total
        description:
          type: string
          description: A description of the meter.
          nullable: true
          example: AI Token Usage
        aggregation:
          $ref: "#/components/schemas/MeterAggregation"
        windowSize:
          $ref: "#/components/schemas/WindowSize"
        eventType:
          type: string
          description: The event type to aggregate.
          example: prompt
        valueProperty:
          type: string
          description: |
            JSONPath expression to extract the value from the ingested event's data property.
            The ingested value for SUM, AVG, MIN, and MAX aggregations is a number or a string that can be parsed to a number.
            For UNIQUE_COUNT aggregation, the ingested value must be a string. For COUNT aggregation the valueProperty is ignored.
          example: $.tokens
        groupBy:
          type: object
          description: Named JSONPath expressions to extract the group by values from the event data. Keys must be unique and consist only alphanumeric and underscore characters.
          # Only works with OpenAPI 3.1.0
          # propertyNames:
          #   pattern: "^[a-z0-9]+(?:_[a-z0-9]+)*$"
          additionalProperties:
            type: string
            example: $.model
          example:
            model: $.model
            type: $.type
      required:
        - slug
        - aggregation
        - eventType
        - windowSize
      example:
        slug: tokens_total
        description: AI token usage
        aggregation: SUM
        windowSize: MINUTE
        eventType: prompt
        valueProperty: $.tokens
        groupBy:
          model: $.model
          type: $.type
    MeterAggregation:
      type: string
      description: The aggregation type to use for the meter.
      x-go-type: models.MeterAggregation
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      enum:
        - SUM
        - COUNT
        - UNIQUE_COUNT
        - AVG
        - MIN
        - MAX
      example: SUM
    WindowSize:
      type: string
      description: Aggregation window size.
      x-go-type: models.WindowSize
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      enum:
        - MINUTE
        - HOUR
        - DAY
      example: MINUTE
    MeterQueryResult:
      type: object
      description: The result of a meter query.
      required:
        - data
      properties:
        from:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        to:
          type: string
          format: date-time
          example: "2023-01-02T00:00:00Z"
        windowSize:
          $ref: "#/components/schemas/WindowSize"
        data:
          type: array
          items:
            $ref: "#/components/schemas/MeterQueryRow"
          example:
            - value: 12
              windowStart: "2023-01-01T00:00:00Z"
              windowEnd: "2023-01-02T00:00:00Z"
              subject: customer-id
              groupBy:
                model: gpt-4-turbo
                type: prompt
      example:
        from: "2023-01-01T00:00:00Z"
        to: "2023-01-02T00:00:00Z"
        windowSize: MINUTE
        data:
          - value: 12
            windowStart: "2023-01-01T00:00:00Z"
            windowEnd: "2023-01-02T00:00:00Z"
            subject: customer-id
            groupBy:
              model: gpt-4-turbo
              type: prompt
    MeterQueryRow:
      type: object
      description: A row in the result of a meter query.
      x-go-type: models.MeterQueryRow
      x-go-type-import:
        path: github.com/openmeterio/openmeter/pkg/models
      required:
        - value
        - windowStart
        - windowEnd
      properties:
        value:
          type: number
          example: 12
        windowStart:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        windowEnd:
          type: string
          format: date-time
          example: "2023-01-02T00:00:00Z"
        subject:
          type: string
          nullable: true
          description: The subject of the meter value.
          example: customer-id
        groupBy:
          type: object
          nullable: true
          additionalProperties:
            type: string
          example:
            model: gpt-4-turbo
            type: prompt
      example:
        value: 12
        windowStart: "2023-01-01T00:00:00Z"
        windowEnd: "2023-01-02T00:00:00Z"
        subject: customer-id
        groupBy:
          model: gpt-4-turbo
          type: prompt
    PortalToken:
      type: object
      description: A consumer portal token.
      required:
        # Validator doesn't obey required for readOnly properties
        # See: https://github.com/stoplightio/spectral/issues/1274
        # - id
        - subject
        # - expiresAt
        # - expired
        # - createdAt
        # - token
      properties:
        id:
          type: string
          readOnly: true
          example: "01G65Z755AFWAKHE12NY0CQ9FH"
        subject:
          type: string
          example: customer-id
        expiresAt:
          type: string
          format: date-time
          readOnly: true
          example: "2023-01-02T00:00:00Z"
        expired:
          type: boolean
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
          example: "2023-01-01T00:00:00Z"
        token:
          description: The token is only returned at creation.
          type: string
          readOnly: true
          example: "om_portal_IAnD3PpWW2A2Wr8m9jfzeHlGX8xmCXwG.y5q4S-AWqFu6qjfaFz0zQq4Ez28RsnyVwJffX5qxMvo"
        allowedMeterSlugs:
          description: Optional, if defined only the specified meters will be allowed
          type: array
          minItems: 1
          uniqueItems: true
          items:
            type: string
          example:
            - tokens_total
      example:
        id: "01G65Z755AFWAKHE12NY0CQ9FH"
        subject: customer-id
        expiresAt: "2023-01-02T00:00:00Z"
        expired: false
        createdAt: "2023-01-01T00:00:00Z"
        token: "om_portal_IAnD3PpWW2A2Wr8m9jfzeHlGX8xmCXwG.y5q4S-AWqFu6qjfaFz0zQq4Ez28RsnyVwJffX5qxMvo"
        allowedMeterSlugs:
          - tokens_total
    Subject:
      type: object
      description: A subject is a unique identifier for a user or entity.
      required:
        # Validator doesn't obey required for readOnly properties
        # See: https://github.com/stoplightio/spectral/issues/1274
        # - id
        - key
      additionalProperties: false
      properties:
        id:
          type: string
          readOnly: true
          example: "01G65Z755AFWAKHE12NY0CQ9FH"
        key:
          type: string
          example: customer-id
        displayName:
          type: string
          nullable: true
          example: "Customer Name"
        metadata:
          type: object
          additionalProperties: true
          nullable: true
          example:
            hubspotId: "123456"
        currentPeriodStart:
          type: string
          format: date-time
          nullable: true
          example: "2023-01-01T00:00:00Z"
        currentPeriodEnd:
          type: string
          format: date-time
          nullable: true
          example: "2023-02-01T00:00:00Z"
        stripeCustomerId:
          type: string
          nullable: true
          example: "cus_JMOlctsKV8"
      example:
        id: "01G65Z755AFWAKHE12NY0CQ9FH"
        key: customer-id
        displayName: "Customer Name"
        metadata:
          hubspotId: "123456"
        currentPeriodStart: "2023-01-01T00:00:00Z"
        currentPeriodEnd: "2023-02-01T00:00:00Z"
        stripeCustomerId: "cus_JMOlctsKV8"
    IdOrSlug:
      type: string
      description: A unique identifier.
      oneOf:
        # id
        - type: string
          pattern: "^[0-9ABCDEFGHJKMNPQRSTVWXYZ]{26}$"
          description: "ULID (Universally Unique Lexicographically Sortable Identifier)"
          example: "01G65Z755AFWAKHE12NY0CQ9FH"
        # slug
        - type: string
          pattern: "^[a-z0-9]+(?:_[a-z0-9]+)*$"
          minLength: 1
          maxLength: 63
          example: "tokens_total"
      example: "tokens_total"

  parameters:
    meterIdOrSlug:
      name: meterIdOrSlug
      description: A unique identifier for the meter.
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/IdOrSlug"
    subjectIdOrKey:
      name: subjectIdOrKey
      description: A unique identifier for a subject.
      in: path
      required: true
      schema:
        type: string
        example: "customer-id"
    featureId:
      name: featureId
      description: A unique ULID identifier for a feature.
      in: path
      required: true
      schema:
        type: string
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
    grantId:
      name: grantId
      description: A unique identifier for a grant.
      in: path
      required: true
      schema:
        type: string
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
    entitlementId:
      name: entitlementId
      in: path
      required: true
      description: A unique ULID for an entitlement.
      schema:
        type: string
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
    entitlementIdOrFeatureKey:
      name: entitlementIdOrFeatureKey
      in: path
      required: true
      description: The id of the entitlement or the key of the feature.
      schema:
        type: string
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV or gpt4_tokens
    includeDeleted:
      name: includeDeleted
      in: query
      required: false
      description: Include deleted entries.
      schema:
        type: boolean
        default: false
        example: true
    queryLimit:
      name: limit
      in: query
      required: false
      description: Number of entries to return
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 1000
        example: 100
    queryOffset:
      name: offset
      in: query
      required: false
      description: Number of entries to skip
      schema:
        type: integer
        minimum: 0
        default: 0
        example: 0
    queryFrom:
      name: from
      in: query
      required: false
      description: |
        Start date-time in RFC 3339 format.
        Inclusive.
      schema:
        type: string
        format: date-time
        example: "2023-01-01T00:00:00Z"
    queryTo:
      name: to
      in: query
      required: false
      description: |
        End date-time in RFC 3339 format.
        Inclusive.
      schema:
        type: string
        format: date-time
        example: "2023-01-02T00:00:00Z"
    queryWindowSize:
      name: windowSize
      in: query
      required: false
      description: |
        If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
      schema:
        $ref: "#/components/schemas/WindowSize"
    queryWindowTimeZone:
      name: windowTimeZone
      in: query
      required: false
      description: |
        The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
        If not specified, the UTC timezone will be used.
      schema:
        type: string
        default: UTC
        example: "America/New_York"
    queryFilterSubject:
      name: subject
      description: |
        Filtering by multiple subjects.

        Usage: ?subject=customer-1&subject=customer-2
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    queryFilterGroupBy:
      name: filterGroupBy
      in: query
      style: deepObject
      required: false
      schema:
        type: object
        description: |
          Simple filter for group bys with exact match.

          Usage: `?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4`
        example:
          model: gpt-4
          type: input
        additionalProperties:
          type: string
    queryGroupBy:
      name: groupBy
      in: query
      required: false
      description: |
        If not specified a single aggregate will be returned for each subject and time window.
        `subject` is a reserved group by value.
      schema:
        type: array
        items:
          type: string
        example:
          - model
          - type

  responses:
    ConflictProblemResponse:
      description: Ledger Exists
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ConflictProblem"
          example:
            type: "urn:problem-type:exists"
            title: "ledger already exists"
            status: 409
            detail: "ledger exists"
            conflictingEntry:
              id: 01HXVM0S0CMZJSQ23G9MKXRQP7
              subject: "subject-1"
              metadata:
                stripePaymentId: "pi_4OrAkhLvyihio9p51h9iiFnB"
    BadRequestProblemResponse:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "urn:problem-type:bad-request"
            title: "Bad Request"
            status: 400
            detail: 'header Content-Type has unexpected value "application/xml"'
    UnauthorizedProblemResponse:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "urn:problem-type:unauthorized"
            title: "Unauthorized"
            status: 401
            detail: "missing or invalid token"
    NotFoundProblemResponse:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "urn:problem-type:not-found"
            title: "Not Found"
            status: 404
            detail: "meter not found"
    NotImplementedProblemResponse:
      description: Not Implemented
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "urn:problem-type:not-implemented"
            title: "Not Implemented"
            status: 501
            detail: "feature not implemented"
    UnexpectedProblemResponse:
      description: Unexpected error
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "urn:problem-type:unexpected"
            title: "Unexpected Error"
            status: 500
            detail: "unexpected error"

  securitySchemes:
    PortalTokenAuth:
      description: Consumer portal token in open-source version
      type: http
      scheme: bearer
      bearerFormat: jwt
    CloudTokenAuth:
      description: Cloud API token
      type: http
      scheme: bearer
      bearerFormat: opaque
    CloudCookieAuth:
      description: Cloud API web app cookie
      type: apiKey
      in: cookie
      name: __session
    CloudPortalTokenAuth:
      description: Cloud consumer portal token
      type: http
      scheme: bearer
      bearerFormat: opaque

security:
  - {} # No authentication required in open-source version
  - CloudTokenAuth: []
  - CloudCookieAuth: []
